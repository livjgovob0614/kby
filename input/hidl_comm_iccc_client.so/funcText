.text:0000000000004000 ; ===========================================================================
.text:0000000000004000 ; Segment type: Pure code
.text:0000000000004000                 AREA .text, CODE, ALIGN=3
.text:0000000000004000                 ; ORG 0x4000
.text:0000000000004000                 CODE64
.text:0000000000004000 ; =============== S U B R O U T I N E =======================================
.text:0000000000004000                 EXPORT start
.text:0000000000004000 start                                   ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000004000                                         ; LOAD:00000000000000C0↑o ...
.text:0000000000004000 ; __unwind {
.text:0000000000004000                 ADRP            X0, #off_A000@PAGE
.text:0000000000004004                 ADD             X0, X0, #off_A000@PAGEOFF ; void *
.text:0000000000004008                 B               .__cxa_finalize
.text:0000000000004008 ; } // starts at 4000
.text:0000000000004008 ; End of function start
.text:0000000000004008 ; ---------------------------------------------------------------------------
.text:000000000000400C                 ALIGN 0x10
.text:0000000000004010 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0000000000004014                 ALIGN 8
.text:0000000000004018 ; [00000004 BYTES: COLLAPSED FUNCTION j_nullsub_2. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:000000000000401C                 ALIGN 0x20
.text:0000000000004020 ; =============== S U B R O U T I N E =======================================
.text:0000000000004020 ; __int64 get_chipset_id(void)
.text:0000000000004020                 EXPORT _Z14get_chipset_idv
.text:0000000000004020 _Z14get_chipset_idv                     ; DATA XREF: LOAD:00000000000006D8↑o
.text:0000000000004020 ; __unwind {
.text:0000000000004020                 MOV             W0, #0x36 ; '6'
.text:0000000000004024                 RET
.text:0000000000004024 ; } // starts at 4020
.text:0000000000004024 ; End of function get_chipset_id(void)
.text:0000000000004028 ; =============== S U B R O U T I N E =======================================
.text:0000000000004028 ; Attributes: bp-based frame
.text:0000000000004028 ; __int64 __fastcall write_iccc_wrapped_key(unsigned __int8 *, int)
.text:0000000000004028                 EXPORT _Z22write_iccc_wrapped_keyPhi
.text:0000000000004028 _Z22write_iccc_wrapped_keyPhi           ; DATA XREF: LOAD:0000000000000780↑o
.text:0000000000004028 var_30          = -0x30
.text:0000000000004028 var_20          = -0x20
.text:0000000000004028 var_10          = -0x10
.text:0000000000004028 var_s0          =  0
.text:0000000000004028 ; __unwind {
.text:0000000000004028                 STR             X23, [SP,#-0x10+var_30]!
.text:000000000000402C                 STP             X22, X21, [SP,#0x30+var_20]
.text:0000000000004030                 STP             X20, X19, [SP,#0x30+var_10]
.text:0000000000004034                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000004038                 ADD             X29, SP, #0x30
.text:000000000000403C                 ADRP            X22, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004040                 MOV             W19, W1
.text:0000000000004044                 ADD             X22, X22, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004048                 ADRP            X2, #aWriteWrappedKe@PAGE ; "Write wrapped key file, size: %d"
.text:000000000000404C                 MOV             X20, X0
.text:0000000000004050                 ADD             X2, X2, #aWriteWrappedKe@PAGEOFF ; "Write wrapped key file, size: %d"
.text:0000000000004054                 MOV             W0, #6
.text:0000000000004058                 MOV             X1, X22
.text:000000000000405C                 MOV             W3, W19
.text:0000000000004060                 BL              .__android_log_print
.text:0000000000004064                 ADRP            X0, #aDataMiscTzIccc@PAGE ; "/data/misc/tz_iccc/key.dat"
.text:0000000000004068                 ADD             X0, X0, #aDataMiscTzIccc@PAGEOFF ; "/data/misc/tz_iccc/key.dat"
.text:000000000000406C                 MOV             W1, #0x242 ; oflag
.text:0000000000004070                 MOV             W2, #0x1B0
.text:0000000000004074                 BL              .open
.text:0000000000004078                 MOV             W21, W0
.text:000000000000407C                 ADRP            X2, #aWriteWrappedKe_0@PAGE ; "Write wrapped key file to fd: %d"
.text:0000000000004080                 ADD             X2, X2, #aWriteWrappedKe_0@PAGEOFF ; "Write wrapped key file to fd: %d"
.text:0000000000004084                 MOV             W0, #6
.text:0000000000004088                 MOV             X1, X22
.text:000000000000408C                 MOV             W3, W21
.text:0000000000004090                 BL              .__android_log_print
.text:0000000000004094                 TBNZ            W21, #0x1F, loc_416C
.text:0000000000004098                 SXTW            X22, W19
.text:000000000000409C                 MOV             W0, W21 ; fd
.text:00000000000040A0                 MOV             X1, X20 ; buf
.text:00000000000040A4                 MOV             X2, X22 ; n
.text:00000000000040A8                 BL              .write
.text:00000000000040AC                 MOV             X23, X0
.text:00000000000040B0                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000040B4                 ADRP            X2, #aWroteWrappedKe@PAGE ; "Wrote wrapped key file, size: %d\n"
.text:00000000000040B8                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000040BC                 ADD             X2, X2, #aWroteWrappedKe@PAGEOFF ; "Wrote wrapped key file, size: %d\n"
.text:00000000000040C0                 MOV             W0, #6
.text:00000000000040C4                 MOV             W3, W23
.text:00000000000040C8                 BL              .__android_log_print
.text:00000000000040CC                 CMP             W23, W19
.text:00000000000040D0                 B.NE            loc_41A0
.text:00000000000040D4                 MOV             W0, W21 ; fd
.text:00000000000040D8                 BL              .fsync
.text:00000000000040DC                 MOV             W0, W21 ; fd
.text:00000000000040E0                 BL              .close
.text:00000000000040E4                 ADRP            X0, #aDataMiscTzIccc_0@PAGE ; "/data/misc/tz_iccc/key.dat.bkp"
.text:00000000000040E8                 ADD             X0, X0, #aDataMiscTzIccc_0@PAGEOFF ; "/data/misc/tz_iccc/key.dat.bkp"
.text:00000000000040EC                 MOV             W1, #0x242 ; oflag
.text:00000000000040F0                 MOV             W2, #0x1B0
.text:00000000000040F4                 BL              .open
.text:00000000000040F8                 MOV             W21, W0
.text:00000000000040FC                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004100                 ADRP            X2, #aWriteWrappedKe_1@PAGE ; "Write wrapped key file to backup_fd: %d"
.text:0000000000004104                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004108                 ADD             X2, X2, #aWriteWrappedKe_1@PAGEOFF ; "Write wrapped key file to backup_fd: %d"
.text:000000000000410C                 MOV             W0, #6
.text:0000000000004110                 MOV             W3, W21
.text:0000000000004114                 BL              .__android_log_print
.text:0000000000004118                 TBNZ            W21, #0x1F, loc_416C
.text:000000000000411C                 MOV             W0, W21 ; fd
.text:0000000000004120                 MOV             X1, X20 ; buf
.text:0000000000004124                 MOV             X2, X22 ; n
.text:0000000000004128                 BL              .write
.text:000000000000412C                 MOV             X20, X0
.text:0000000000004130                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004134                 ADRP            X2, #aWroteWrappedKe_0@PAGE ; "Wrote wrapped key to backup file, size:"...
.text:0000000000004138                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:000000000000413C                 ADD             X2, X2, #aWroteWrappedKe_0@PAGEOFF ; "Wrote wrapped key to backup file, size:"...
.text:0000000000004140                 MOV             W0, #6
.text:0000000000004144                 MOV             W3, W20
.text:0000000000004148                 BL              .__android_log_print
.text:000000000000414C                 CMP             W20, W19
.text:0000000000004150                 B.NE            loc_41C8
.text:0000000000004154                 MOV             W0, W21 ; fd
.text:0000000000004158                 BL              .fsync
.text:000000000000415C                 MOV             W0, W21 ; fd
.text:0000000000004160                 BL              .close
.text:0000000000004164                 MOV             W0, WZR
.text:0000000000004168                 B               loc_4204
.text:000000000000416C ; ---------------------------------------------------------------------------
.text:000000000000416C loc_416C                                ; CODE XREF: write_iccc_wrapped_key(uchar *,int)+6C↑j
.text:000000000000416C                                         ; write_iccc_wrapped_key(uchar *,int)+F0↑j
.text:000000000000416C                 BL              .__errno
.text:0000000000004170                 LDR             W19, [X0]
.text:0000000000004174                 MOV             W0, W19 ; errnum
.text:0000000000004178                 BL              .strerror
.text:000000000000417C                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004180                 ADRP            X2, #aCreateOpenWrap@PAGE ; "Create/Open Wrapped key file failed, %d"...
.text:0000000000004184                 MOV             X4, X0
.text:0000000000004188                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:000000000000418C                 ADD             X2, X2, #aCreateOpenWrap@PAGEOFF ; "Create/Open Wrapped key file failed, %d"...
.text:0000000000004190                 MOV             W0, #6
.text:0000000000004194                 MOV             W3, W19
.text:0000000000004198                 BL              .__android_log_print
.text:000000000000419C                 B               loc_4200
.text:00000000000041A0 ; ---------------------------------------------------------------------------
.text:00000000000041A0 loc_41A0                                ; CODE XREF: write_iccc_wrapped_key(uchar *,int)+A8↑j
.text:00000000000041A0                 BL              .__errno
.text:00000000000041A4                 LDR             W19, [X0]
.text:00000000000041A8                 MOV             W0, W19 ; errnum
.text:00000000000041AC                 BL              .strerror
.text:00000000000041B0                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000041B4                 ADRP            X2, #aWriteWrappedKe_2@PAGE ; "Write wrapped key file failed, %d: %s\n"
.text:00000000000041B8                 MOV             X4, X0
.text:00000000000041BC                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000041C0                 ADD             X2, X2, #aWriteWrappedKe_2@PAGEOFF ; "Write wrapped key file failed, %d: %s\n"
.text:00000000000041C4                 B               loc_41EC
.text:00000000000041C8 ; ---------------------------------------------------------------------------
.text:00000000000041C8 loc_41C8                                ; CODE XREF: write_iccc_wrapped_key(uchar *,int)+128↑j
.text:00000000000041C8                 BL              .__errno
.text:00000000000041CC                 LDR             W19, [X0]
.text:00000000000041D0                 MOV             W0, W19 ; errnum
.text:00000000000041D4                 BL              .strerror
.text:00000000000041D8                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000041DC                 ADRP            X2, #aWriteWrappedKe_3@PAGE ; "Write wrapped key to backup file failed"...
.text:00000000000041E0                 MOV             X4, X0
.text:00000000000041E4                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000041E8                 ADD             X2, X2, #aWriteWrappedKe_3@PAGEOFF ; "Write wrapped key to backup file failed"...
.text:00000000000041EC loc_41EC                                ; CODE XREF: write_iccc_wrapped_key(uchar *,int)+19C↑j
.text:00000000000041EC                 MOV             W0, #6
.text:00000000000041F0                 MOV             W3, W19
.text:00000000000041F4                 BL              .__android_log_print
.text:00000000000041F8                 MOV             W0, W21 ; fd
.text:00000000000041FC                 BL              .close
.text:0000000000004200 loc_4200                                ; CODE XREF: write_iccc_wrapped_key(uchar *,int)+174↑j
.text:0000000000004200                 MOV             W0, #0xFFFFFFFF
.text:0000000000004204 loc_4204                                ; CODE XREF: write_iccc_wrapped_key(uchar *,int)+140↑j
.text:0000000000004204                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000004208                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000420C                 LDP             X22, X21, [SP,#0x30+var_20]
.text:0000000000004210                 LDR             X23, [SP+0x30+var_30],#0x40
.text:0000000000004214                 RET
.text:0000000000004214 ; } // starts at 4028
.text:0000000000004214 ; End of function write_iccc_wrapped_key(uchar *,int)
.text:0000000000004218 ; =============== S U B R O U T I N E =======================================
.text:0000000000004218 ; Attributes: bp-based frame
.text:0000000000004218 ; __int64 remove_iccc_encapsulated_key(void)
.text:0000000000004218                 EXPORT _Z28remove_iccc_encapsulated_keyv
.text:0000000000004218 _Z28remove_iccc_encapsulated_keyv       ; DATA XREF: LOAD:00000000000007B0↑o
.text:0000000000004218 var_10          = -0x10
.text:0000000000004218 var_s0          =  0
.text:0000000000004218 ; __unwind {
.text:0000000000004218                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000421C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000004220                 ADD             X29, SP, #0x10
.text:0000000000004224                 ADRP            X19, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004228                 ADD             X19, X19, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:000000000000422C                 ADRP            X2, #aRemoveEncapsul@PAGE ; "Remove encapsulated file"
.text:0000000000004230                 ADD             X2, X2, #aRemoveEncapsul@PAGEOFF ; "Remove encapsulated file"
.text:0000000000004234                 MOV             W0, #6
.text:0000000000004238                 MOV             X1, X19
.text:000000000000423C                 BL              .__android_log_print
.text:0000000000004240                 ADRP            X0, #aDataMiscTzIccc@PAGE ; "/data/misc/tz_iccc/key.dat"
.text:0000000000004244                 ADD             X0, X0, #aDataMiscTzIccc@PAGEOFF ; "/data/misc/tz_iccc/key.dat"
.text:0000000000004248                 BL              .remove
.text:000000000000424C                 MOV             W20, W0
.text:0000000000004250                 ADRP            X2, #aRemovedEncapsu@PAGE ; "Removed encapsulated file, ret: %d"
.text:0000000000004254                 ADD             X2, X2, #aRemovedEncapsu@PAGEOFF ; "Removed encapsulated file, ret: %d"
.text:0000000000004258                 MOV             W0, #6
.text:000000000000425C                 MOV             X1, X19
.text:0000000000004260                 MOV             W3, W20
.text:0000000000004264                 BL              .__android_log_print
.text:0000000000004268                 CBZ             W20, loc_429C
.text:000000000000426C                 BL              .__errno
.text:0000000000004270                 LDR             W19, [X0]
.text:0000000000004274                 MOV             W0, W19 ; errnum
.text:0000000000004278                 BL              .strerror
.text:000000000000427C                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004280                 ADRP            X2, #aRemoveEncapsul_0@PAGE ; "Remove encapsulated file failed, %d: %s"...
.text:0000000000004284                 MOV             X4, X0
.text:0000000000004288                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:000000000000428C                 ADD             X2, X2, #aRemoveEncapsul_0@PAGEOFF ; "Remove encapsulated file failed, %d: %s"...
.text:0000000000004290                 MOV             W0, #6
.text:0000000000004294                 MOV             W3, W19
.text:0000000000004298                 BL              .__android_log_print
.text:000000000000429C loc_429C                                ; CODE XREF: remove_iccc_encapsulated_key(void)+50↑j
.text:000000000000429C                 ADRP            X0, #aDataMiscTzIccc_0@PAGE ; "/data/misc/tz_iccc/key.dat.bkp"
.text:00000000000042A0                 ADD             X0, X0, #aDataMiscTzIccc_0@PAGEOFF ; "/data/misc/tz_iccc/key.dat.bkp"
.text:00000000000042A4                 BL              .remove
.text:00000000000042A8                 MOV             W19, W0
.text:00000000000042AC                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000042B0                 ADRP            X2, #aRemovedEncapsu_0@PAGE ; "Removed encapsulated backup file, ret: "...
.text:00000000000042B4                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000042B8                 ADD             X2, X2, #aRemovedEncapsu_0@PAGEOFF ; "Removed encapsulated backup file, ret: "...
.text:00000000000042BC                 MOV             W0, #6
.text:00000000000042C0                 MOV             W3, W19
.text:00000000000042C4                 BL              .__android_log_print
.text:00000000000042C8                 CBZ             W19, loc_42FC
.text:00000000000042CC                 BL              .__errno
.text:00000000000042D0                 LDR             W20, [X0]
.text:00000000000042D4                 MOV             W0, W20 ; errnum
.text:00000000000042D8                 BL              .strerror
.text:00000000000042DC                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000042E0                 ADRP            X2, #aRemoveEncapsul_1@PAGE ; "Remove encapsulated backup file failed,"...
.text:00000000000042E4                 MOV             X4, X0
.text:00000000000042E8                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000042EC                 ADD             X2, X2, #aRemoveEncapsul_1@PAGEOFF ; "Remove encapsulated backup file failed,"...
.text:00000000000042F0                 MOV             W0, #6
.text:00000000000042F4                 MOV             W3, W20
.text:00000000000042F8                 BL              .__android_log_print
.text:00000000000042FC loc_42FC                                ; CODE XREF: remove_iccc_encapsulated_key(void)+B0↑j
.text:00000000000042FC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000004300                 MOV             W0, W19
.text:0000000000004304                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000004308                 RET
.text:0000000000004308 ; } // starts at 4218
.text:0000000000004308 ; End of function remove_iccc_encapsulated_key(void)
.text:0000000000004308 ; ---------------------------------------------------------------------------
.text:000000000000430C                 ALIGN 0x10
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310 ; Attributes: bp-based frame
.text:0000000000004310 ; __int64 TZ_ICCC_initialize(void)
.text:0000000000004310                 EXPORT _Z18TZ_ICCC_initializev
.text:0000000000004310 _Z18TZ_ICCC_initializev                 ; DATA XREF: LOAD:0000000000000768↑o
.text:0000000000004310 var_50          = -0x50
.text:0000000000004310 var_48          = -0x48
.text:0000000000004310 var_40          = -0x40
.text:0000000000004310 var_2C          = -0x2C
.text:0000000000004310 var_28          = -0x28
.text:0000000000004310 var_20          = -0x20
.text:0000000000004310 var_18          = -0x18
.text:0000000000004310 var_10          = -0x10
.text:0000000000004310 var_s0          =  0
.text:0000000000004310 ; __unwind { // __gxx_personality_v0
.text:0000000000004310                 SUB             SP, SP, #0x60
.text:0000000000004314                 STP             X20, X19, [SP,#0x50+var_10]
.text:0000000000004318                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000431C                 ADD             X29, SP, #0x50
.text:0000000000004320                 MRS             X20, #3, c13, c0, #2
.text:0000000000004324                 MOV             W9, #0x7561
.text:0000000000004328                 LDR             X8, [X20,#0x28]
.text:000000000000432C                 MOV             W10, #0x6564
.text:0000000000004330                 MOVK            W9, #0x746C,LSL#16
.text:0000000000004334                 MOVK            W10, #0x6166,LSL#16
.text:0000000000004338                 STUR            X8, [X29,#var_18]
.text:000000000000433C                 MOV             W8, #0xE
.text:0000000000004340                 STUR            XZR, [X29,#var_20]
.text:0000000000004344                 STP             XZR, XZR, [SP,#0x50+var_50]
.text:0000000000004348                 STR             XZR, [SP,#0x50+var_40]
.text:000000000000434C                 STRB            W8, [SP,#0x50+var_50]
.text:0000000000004350                 STR             W9, [SP,#0x50+var_50+4]
.text:0000000000004354                 STUR            W10, [SP,#0x50+var_50+1]
.text:0000000000004358                 STRB            WZR, [SP,#0x50+var_48]
.text:000000000000435C ;   try {
.text:000000000000435C                 ADD             X8, SP, #0x50+var_28
.text:0000000000004360                 MOV             X0, SP
.text:0000000000004364                 MOV             W1, WZR
.text:0000000000004368                 BL              ._ZN6vendor7samsung8hardware3tlc4iccc4V1_08ISehIccc10getServiceERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb ; vendor::samsung::hardware::tlc::iccc::V1_0::ISehIccc::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:0000000000004368 ;   } // starts at 435C
.text:000000000000436C                 LDUR            X19, [X29,#var_20]
.text:0000000000004370                 CBZ             X19, loc_4388
.text:0000000000004374                 LDR             X8, [X19]
.text:0000000000004378                 LDUR            X8, [X8,#-0x18]
.text:000000000000437C                 ADD             X0, X19, X8 ; this
.text:0000000000004380 ;   try {
.text:0000000000004380                 SUB             X1, X29, #-var_20 ; void *
.text:0000000000004384                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004388 loc_4388                                ; CODE XREF: TZ_ICCC_initialize(void)+60↑j
.text:0000000000004388                 LDUR            X8, [X29,#var_20]
.text:000000000000438C                 CMP             X19, X8
.text:0000000000004390                 B.EQ            loc_4398
.text:0000000000004394                 BL              ._ZN7android14sp_report_raceEv ; android::sp_report_race(void)
.text:0000000000004394 ;   } // starts at 4380
.text:0000000000004398 loc_4398                                ; CODE XREF: TZ_ICCC_initialize(void)+80↑j
.text:0000000000004398                 LDR             X8, [SP,#0x50+var_28]
.text:000000000000439C                 LDRB            W9, [SP,#0x50+var_50]
.text:00000000000043A0                 STR             XZR, [SP,#0x50+var_28]
.text:00000000000043A4                 STUR            X8, [X29,#var_20]
.text:00000000000043A8                 TBZ             W9, #0, loc_43B8
.text:00000000000043AC                 LDR             X0, [SP,#0x50+var_40] ; void *
.text:00000000000043B0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000043B4                 LDUR            X8, [X29,#var_20]
.text:00000000000043B8 loc_43B8                                ; CODE XREF: TZ_ICCC_initialize(void)+98↑j
.text:00000000000043B8                 CBZ             X8, loc_4408
.text:00000000000043BC ;   try {
.text:00000000000043BC                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000043C0                 ADRP            X2, #aTzIcccInitiali@PAGE ; "TZ_ICCC_initialize\n"
.text:00000000000043C4                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000043C8                 ADD             X2, X2, #aTzIcccInitiali@PAGEOFF ; "TZ_ICCC_initialize\n"
.text:00000000000043CC                 MOV             W0, #6
.text:00000000000043D0                 BL              .__android_log_print
.text:00000000000043D0 ;   } // starts at 43BC
.text:00000000000043D4                 LDUR            X0, [X29,#var_20]
.text:00000000000043D8                 LDR             X8, [X0]
.text:00000000000043DC                 LDR             X9, [X8,#0x68]
.text:00000000000043E0 ;   try {
.text:00000000000043E0                 MOV             X8, SP
.text:00000000000043E4                 BLR             X9
.text:00000000000043E4 ;   } // starts at 43E0
.text:00000000000043E8 ;   try {
.text:00000000000043E8                 MOV             X0, SP  ; this
.text:00000000000043EC                 BL              ._ZNK7android8hardware7details13return_status8assertOkEv ; android::hardware::details::return_status::assertOk(void)
.text:00000000000043EC ;   } // starts at 43E8
.text:00000000000043F0                 LDR             W19, [SP,#0x50+var_2C]
.text:00000000000043F4                 MOV             X0, SP  ; this
.text:00000000000043F8                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:00000000000043FC                 LDUR            X8, [X29,#var_20]
.text:0000000000004400                 CBNZ            X8, loc_442C
.text:0000000000004404                 B               loc_4440
.text:0000000000004408 ; ---------------------------------------------------------------------------
.text:0000000000004408 loc_4408                                ; CODE XREF: TZ_ICCC_initialize(void):loc_43B8↑j
.text:0000000000004408 ;   try {
.text:0000000000004408                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:000000000000440C                 ADRP            X2, #aCannotGetIcccS@PAGE ; "Cannot get iccc Service\n"
.text:0000000000004410                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004414                 ADD             X2, X2, #aCannotGetIcccS@PAGEOFF ; "Cannot get iccc Service\n"
.text:0000000000004418                 MOV             W0, #6
.text:000000000000441C                 BL              .__android_log_print
.text:000000000000441C ;   } // starts at 4408
.text:0000000000004420                 MOV             W19, #0xFFFFFFFF
.text:0000000000004424                 LDUR            X8, [X29,#var_20]
.text:0000000000004428                 CBZ             X8, loc_4440
.text:000000000000442C loc_442C                                ; CODE XREF: TZ_ICCC_initialize(void)+F0↑j
.text:000000000000442C                 LDR             X9, [X8]
.text:0000000000004430                 LDUR            X9, [X9,#-0x18]
.text:0000000000004434                 ADD             X0, X8, X9 ; this
.text:0000000000004438 ;   try {
.text:0000000000004438                 SUB             X1, X29, #-var_20 ; void *
.text:000000000000443C                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:000000000000443C ;   } // starts at 4438
.text:0000000000004440 loc_4440                                ; CODE XREF: TZ_ICCC_initialize(void)+F4↑j
.text:0000000000004440                                         ; TZ_ICCC_initialize(void)+118↑j
.text:0000000000004440                 LDR             X8, [X20,#0x28]
.text:0000000000004444                 LDUR            X9, [X29,#var_18]
.text:0000000000004448                 CMP             X8, X9
.text:000000000000444C                 B.NE            loc_4464
.text:0000000000004450                 MOV             W0, W19
.text:0000000000004454                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000004458                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000000445C                 ADD             SP, SP, #0x60 ; '`'
.text:0000000000004460                 RET
.text:0000000000004464 ; ---------------------------------------------------------------------------
.text:0000000000004464 loc_4464                                ; CODE XREF: TZ_ICCC_initialize(void)+13C↑j
.text:0000000000004464                 BL              .__stack_chk_fail
.text:0000000000004468 ; ---------------------------------------------------------------------------
.text:0000000000004468 ;   catch(...) // owned by 4438
.text:0000000000004468                 BL              sub_58B0
.text:000000000000446C ; ---------------------------------------------------------------------------
.text:000000000000446C ;   cleanup() // owned by 43E8
.text:000000000000446C                 MOV             X19, X0
.text:0000000000004470                 MOV             X0, SP  ; this
.text:0000000000004474                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:0000000000004478                 LDUR            X8, [X29,#var_20]
.text:000000000000447C                 CBNZ            X8, loc_44B4
.text:0000000000004480                 B               loc_44C8
.text:0000000000004484 ; ---------------------------------------------------------------------------
.text:0000000000004484 ;   cleanup() // owned by 43E0
.text:0000000000004484                 B               loc_4488
.text:0000000000004488 ; ---------------------------------------------------------------------------
.text:0000000000004488 loc_4488                                ; CODE XREF: TZ_ICCC_initialize(void)+174↑j
.text:0000000000004488 ;   cleanup() // owned by 43BC
.text:0000000000004488 ;   cleanup() // owned by 4408
.text:0000000000004488                 MOV             X19, X0
.text:000000000000448C                 LDUR            X8, [X29,#var_20]
.text:0000000000004490                 CBNZ            X8, loc_44B4
.text:0000000000004494                 B               loc_44C8
.text:0000000000004498 ; ---------------------------------------------------------------------------
.text:0000000000004498 ;   cleanup() // owned by 435C
.text:0000000000004498                 LDRB            W8, [SP,#0x50+var_50]
.text:000000000000449C                 MOV             X19, X0
.text:00000000000044A0                 TBZ             W8, #0, loc_44AC
.text:00000000000044A4                 LDR             X0, [SP,#0x50+var_40] ; void *
.text:00000000000044A8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000044AC loc_44AC                                ; CODE XREF: TZ_ICCC_initialize(void)+190↑j
.text:00000000000044AC                 LDUR            X8, [X29,#var_20]
.text:00000000000044B0                 CBZ             X8, loc_44C8
.text:00000000000044B4 loc_44B4                                ; CODE XREF: TZ_ICCC_initialize(void)+16C↑j
.text:00000000000044B4                                         ; TZ_ICCC_initialize(void)+180↑j
.text:00000000000044B4                 LDR             X9, [X8]
.text:00000000000044B8                 LDUR            X9, [X9,#-0x18]
.text:00000000000044BC                 ADD             X0, X8, X9 ; this
.text:00000000000044C0 ;   try {
.text:00000000000044C0                 SUB             X1, X29, #-var_20 ; void *
.text:00000000000044C4                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:00000000000044C4 ;   } // starts at 44C0
.text:00000000000044C8 loc_44C8                                ; CODE XREF: TZ_ICCC_initialize(void)+170↑j
.text:00000000000044C8                                         ; TZ_ICCC_initialize(void)+184↑j ...
.text:00000000000044C8                 MOV             X0, X19
.text:00000000000044CC                 BL              sub_78A0
.text:00000000000044D0 ;   catch(...) // owned by 44C0
.text:00000000000044D0                 BL              sub_58B0
.text:00000000000044D4 ; ---------------------------------------------------------------------------
.text:00000000000044D4 ;   catch(...) // owned by 4380
.text:00000000000044D4                 BL              sub_58B0
.text:00000000000044D4 ; } // starts at 4310
.text:00000000000044D4 ; End of function TZ_ICCC_initialize(void)
.text:00000000000044D8 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D8 ; Attributes: bp-based frame
.text:00000000000044D8 ; __int64 __fastcall TZ_ICCC_read(unsigned int, unsigned int *)
.text:00000000000044D8                 EXPORT _Z12TZ_ICCC_readjPj
.text:00000000000044D8 _Z12TZ_ICCC_readjPj                     ; DATA XREF: LOAD:0000000000000720↑o
.text:00000000000044D8 var_C0          = -0xC0
.text:00000000000044D8 var_B8          = -0xB8
.text:00000000000044D8 var_B0          = -0xB0
.text:00000000000044D8 var_A8          = -0xA8
.text:00000000000044D8 var_A0          = -0xA0
.text:00000000000044D8 var_94          = -0x94
.text:00000000000044D8 var_90          = -0x90
.text:00000000000044D8 var_88          = -0x88
.text:00000000000044D8 var_60          = -0x60
.text:00000000000044D8 var_50          = -0x50
.text:00000000000044D8 var_40          = -0x40
.text:00000000000044D8 var_28          = -0x28
.text:00000000000044D8 var_20          = -0x20
.text:00000000000044D8 var_10          = -0x10
.text:00000000000044D8 var_s0          =  0
.text:00000000000044D8 ; __unwind { // __gxx_personality_v0
.text:00000000000044D8                 SUB             SP, SP, #0xD0
.text:00000000000044DC                 STR             X21, [SP,#0xC0+var_20]
.text:00000000000044E0                 STP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000044E4                 STP             X29, X30, [SP,#0xC0+var_s0]
.text:00000000000044E8                 ADD             X29, SP, #0xC0
.text:00000000000044EC                 MRS             X20, #3, c13, c0, #2
.text:00000000000044F0                 MOV             W9, #0xFFFFFFFF
.text:00000000000044F4                 LDR             X8, [X20,#0x28]
.text:00000000000044F8                 MOV             W19, W0
.text:00000000000044FC                 STUR            X8, [X29,#var_28]
.text:0000000000004500                 MOV             W8, #0xE
.text:0000000000004504                 STR             W9, [SP,#0xC0+var_94]
.text:0000000000004508                 MOV             W9, #0x6564
.text:000000000000450C                 STP             XZR, XZR, [SP,#0xC0+var_C0]
.text:0000000000004510                 MOVK            W9, #0x6166,LSL#16
.text:0000000000004514                 STRB            W8, [SP,#0xC0+var_C0]
.text:0000000000004518                 MOV             W8, #0x746C7561
.text:0000000000004520                 STR             X1, [SP,#0xC0+var_90]
.text:0000000000004524                 STR             XZR, [SP,#0xC0+var_A0]
.text:0000000000004528                 STR             XZR, [SP,#0xC0+var_B0]
.text:000000000000452C                 STR             W8, [SP,#0xC0+var_C0+4]
.text:0000000000004530                 STUR            W9, [SP,#0xC0+var_C0+1]
.text:0000000000004534                 STRB            WZR, [SP,#0xC0+var_B8]
.text:0000000000004538 ;   try {
.text:0000000000004538                 ADD             X8, SP, #0xC0+var_A8
.text:000000000000453C                 MOV             X0, SP
.text:0000000000004540                 MOV             W1, WZR
.text:0000000000004544                 BL              ._ZN6vendor7samsung8hardware3tlc4iccc4V1_08ISehIccc10getServiceERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb ; vendor::samsung::hardware::tlc::iccc::V1_0::ISehIccc::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:0000000000004544 ;   } // starts at 4538
.text:0000000000004548                 LDR             X21, [SP,#0xC0+var_A0]
.text:000000000000454C                 CBZ             X21, loc_4564
.text:0000000000004550                 LDR             X8, [X21]
.text:0000000000004554                 LDUR            X8, [X8,#-0x18]
.text:0000000000004558                 ADD             X0, X21, X8 ; this
.text:000000000000455C ;   try {
.text:000000000000455C                 ADD             X1, SP, #0xC0+var_A0 ; void *
.text:0000000000004560                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004564 loc_4564                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+74↑j
.text:0000000000004564                 LDR             X8, [SP,#0xC0+var_A0]
.text:0000000000004568                 CMP             X21, X8
.text:000000000000456C                 B.EQ            loc_4574
.text:0000000000004570                 BL              ._ZN7android14sp_report_raceEv ; android::sp_report_race(void)
.text:0000000000004570 ;   } // starts at 455C
.text:0000000000004574 loc_4574                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+94↑j
.text:0000000000004574                 LDR             X8, [SP,#0xC0+var_A8]
.text:0000000000004578                 LDRB            W9, [SP,#0xC0+var_C0]
.text:000000000000457C                 STP             XZR, X8, [SP,#0xC0+var_A8]
.text:0000000000004580                 TBZ             W9, #0, loc_4590
.text:0000000000004584                 LDR             X0, [SP,#0xC0+var_B0] ; void *
.text:0000000000004588                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000458C                 LDR             X8, [SP,#0xC0+var_A0]
.text:0000000000004590 loc_4590                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+A8↑j
.text:0000000000004590                 CBZ             X8, loc_460C
.text:0000000000004594 ;   try {
.text:0000000000004594                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004598                 ADRP            X2, #aTzIcccRead@PAGE ; "TZ_ICCC_read"
.text:000000000000459C                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000045A0                 ADD             X2, X2, #aTzIcccRead@PAGEOFF ; "TZ_ICCC_read"
.text:00000000000045A4                 MOV             W0, #6
.text:00000000000045A8                 BL              .__android_log_print
.text:00000000000045A8 ;   } // starts at 4594
.text:00000000000045AC                 ADRP            X9, #off_B020@PAGE
.text:00000000000045B0                 LDR             X0, [SP,#0xC0+var_A0]
.text:00000000000045B4                 ADD             X8, SP, #0xC0+var_90
.text:00000000000045B8                 ADD             X9, X9, #off_B020@PAGEOFF
.text:00000000000045BC                 ADD             X21, SP, #0xC0+var_60
.text:00000000000045C0                 ADD             X10, SP, #0xC0+var_94
.text:00000000000045C4                 STP             X9, X8, [SP,#0xC0+var_60]
.text:00000000000045C8                 STR             X21, [SP,#0xC0+var_40]
.text:00000000000045CC                 STR             X10, [SP,#0xC0+var_50]
.text:00000000000045D0                 LDR             X8, [X0]
.text:00000000000045D4                 LDR             X9, [X8,#0x70]
.text:00000000000045D8 ;   try {
.text:00000000000045D8                 ADD             X8, SP, #0xC0+var_88
.text:00000000000045DC                 ADD             X2, SP, #0xC0+var_60
.text:00000000000045E0                 MOV             W1, W19
.text:00000000000045E4                 BLR             X9
.text:00000000000045E4 ;   } // starts at 45D8
.text:00000000000045E8                 ADD             X0, SP, #0xC0+var_88 ; this
.text:00000000000045EC                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:00000000000045F0                 LDR             X0, [SP,#0xC0+var_40]
.text:00000000000045F4                 CMP             X21, X0
.text:00000000000045F8                 B.EQ            loc_4628
.text:00000000000045FC                 CBZ             X0, loc_4634
.text:0000000000004600                 LDR             X8, [X0]
.text:0000000000004604                 LDR             X8, [X8,#0x28]
.text:0000000000004608                 B               loc_4630
.text:000000000000460C ; ---------------------------------------------------------------------------
.text:000000000000460C loc_460C                                ; CODE XREF: TZ_ICCC_read(uint,uint *):loc_4590↑j
.text:000000000000460C ;   try {
.text:000000000000460C                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004610                 ADRP            X2, #aCannotGetIcccS_0@PAGE ; "Cannot get iccc Service"
.text:0000000000004614                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004618                 ADD             X2, X2, #aCannotGetIcccS_0@PAGEOFF ; "Cannot get iccc Service"
.text:000000000000461C                 MOV             W0, #6
.text:0000000000004620                 BL              .__android_log_print
.text:0000000000004620 ;   } // starts at 460C
.text:0000000000004624                 B               loc_4634
.text:0000000000004628 ; ---------------------------------------------------------------------------
.text:0000000000004628 loc_4628                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+120↑j
.text:0000000000004628                 LDR             X8, [X0]
.text:000000000000462C                 LDR             X8, [X8,#0x20]
.text:0000000000004630 loc_4630                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+130↑j
.text:0000000000004630                 BLR             X8
.text:0000000000004634 loc_4634                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+124↑j
.text:0000000000004634                                         ; TZ_ICCC_read(uint,uint *)+14C↑j
.text:0000000000004634                 LDR             X8, [SP,#0xC0+var_A0]
.text:0000000000004638                 LDR             W19, [SP,#0xC0+var_94]
.text:000000000000463C                 CBZ             X8, loc_4654
.text:0000000000004640                 LDR             X9, [X8]
.text:0000000000004644                 LDUR            X9, [X9,#-0x18]
.text:0000000000004648                 ADD             X0, X8, X9 ; this
.text:000000000000464C ;   try {
.text:000000000000464C                 ADD             X1, SP, #0xC0+var_A0 ; void *
.text:0000000000004650                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004650 ;   } // starts at 464C
.text:0000000000004654 loc_4654                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+164↑j
.text:0000000000004654                 LDR             X8, [X20,#0x28]
.text:0000000000004658                 LDUR            X9, [X29,#var_28]
.text:000000000000465C                 CMP             X8, X9
.text:0000000000004660                 B.NE            loc_467C
.text:0000000000004664                 MOV             W0, W19
.text:0000000000004668                 LDR             X21, [SP,#0xC0+var_20]
.text:000000000000466C                 LDP             X29, X30, [SP,#0xC0+var_s0]
.text:0000000000004670                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:0000000000004674                 ADD             SP, SP, #0xD0
.text:0000000000004678                 RET
.text:000000000000467C ; ---------------------------------------------------------------------------
.text:000000000000467C loc_467C                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+188↑j
.text:000000000000467C                 BL              .__stack_chk_fail
.text:0000000000004680 ; ---------------------------------------------------------------------------
.text:0000000000004680 ;   catch(...) // owned by 464C
.text:0000000000004680                 BL              sub_58B0
.text:0000000000004684 ; ---------------------------------------------------------------------------
.text:0000000000004684 ;   cleanup() // owned by 45D8
.text:0000000000004684                 LDR             X8, [SP,#0xC0+var_40]
.text:0000000000004688                 MOV             X19, X0
.text:000000000000468C                 CMP             X21, X8
.text:0000000000004690                 B.NE            loc_46A0
.text:0000000000004694                 LDR             X9, [X8]
.text:0000000000004698                 LDR             X9, [X9,#0x20]
.text:000000000000469C                 B               loc_46AC
.text:00000000000046A0 ; ---------------------------------------------------------------------------
.text:00000000000046A0 loc_46A0                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+1B8↑j
.text:00000000000046A0                 CBZ             X8, loc_46E4
.text:00000000000046A4                 LDR             X9, [X8]
.text:00000000000046A8                 LDR             X9, [X9,#0x28]
.text:00000000000046AC loc_46AC                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+1C4↑j
.text:00000000000046AC                 MOV             X0, X8
.text:00000000000046B0                 BLR             X9
.text:00000000000046B4                 LDR             X8, [SP,#0xC0+var_A0]
.text:00000000000046B8                 CBNZ            X8, loc_46EC
.text:00000000000046BC                 B               loc_4700
.text:00000000000046C0 ; ---------------------------------------------------------------------------
.text:00000000000046C0 ;   cleanup() // owned by 4594
.text:00000000000046C0 ;   cleanup() // owned by 460C
.text:00000000000046C0                 MOV             X19, X0
.text:00000000000046C4                 LDR             X8, [SP,#0xC0+var_A0]
.text:00000000000046C8                 CBNZ            X8, loc_46EC
.text:00000000000046CC                 B               loc_4700
.text:00000000000046D0 ; ---------------------------------------------------------------------------
.text:00000000000046D0 ;   cleanup() // owned by 4538
.text:00000000000046D0                 LDRB            W8, [SP,#0xC0+var_C0]
.text:00000000000046D4                 MOV             X19, X0
.text:00000000000046D8                 TBZ             W8, #0, loc_46E4
.text:00000000000046DC                 LDR             X0, [SP,#0xC0+var_B0] ; void *
.text:00000000000046E0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000046E4 loc_46E4                                ; CODE XREF: TZ_ICCC_read(uint,uint *):loc_46A0↑j
.text:00000000000046E4                                         ; TZ_ICCC_read(uint,uint *)+200↑j
.text:00000000000046E4                 LDR             X8, [SP,#0xC0+var_A0]
.text:00000000000046E8                 CBZ             X8, loc_4700
.text:00000000000046EC loc_46EC                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+1E0↑j
.text:00000000000046EC                                         ; TZ_ICCC_read(uint,uint *)+1F0↑j
.text:00000000000046EC                 LDR             X9, [X8]
.text:00000000000046F0                 LDUR            X9, [X9,#-0x18]
.text:00000000000046F4                 ADD             X0, X8, X9 ; this
.text:00000000000046F8 ;   try {
.text:00000000000046F8                 ADD             X1, SP, #0xC0+var_A0 ; void *
.text:00000000000046FC                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:00000000000046FC ;   } // starts at 46F8
.text:0000000000004700 loc_4700                                ; CODE XREF: TZ_ICCC_read(uint,uint *)+1E4↑j
.text:0000000000004700                                         ; TZ_ICCC_read(uint,uint *)+1F4↑j ...
.text:0000000000004700                 MOV             X0, X19
.text:0000000000004704                 BL              sub_78A0
.text:0000000000004708 ;   catch(...) // owned by 46F8
.text:0000000000004708                 BL              sub_58B0
.text:000000000000470C ; ---------------------------------------------------------------------------
.text:000000000000470C ;   catch(...) // owned by 455C
.text:000000000000470C                 BL              sub_58B0
.text:000000000000470C ; } // starts at 44D8
.text:000000000000470C ; End of function TZ_ICCC_read(uint,uint *)
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710 ; Attributes: bp-based frame
.text:0000000000004710 ; __int64 __fastcall TZ_ICCC_write(unsigned int, unsigned int)
.text:0000000000004710                 EXPORT _Z13TZ_ICCC_writejj
.text:0000000000004710 _Z13TZ_ICCC_writejj                     ; DATA XREF: LOAD:0000000000000738↑o
.text:0000000000004710 var_60          = -0x60
.text:0000000000004710 var_58          = -0x58
.text:0000000000004710 var_50          = -0x50
.text:0000000000004710 var_3C          = -0x3C
.text:0000000000004710 var_38          = -0x38
.text:0000000000004710 var_30          = -0x30
.text:0000000000004710 var_28          = -0x28
.text:0000000000004710 var_20          = -0x20
.text:0000000000004710 var_10          = -0x10
.text:0000000000004710 var_s0          =  0
.text:0000000000004710 ; __unwind { // __gxx_personality_v0
.text:0000000000004710                 SUB             SP, SP, #0x70
.text:0000000000004714                 STP             X22, X21, [SP,#0x60+var_20]
.text:0000000000004718                 STP             X20, X19, [SP,#0x60+var_10]
.text:000000000000471C                 STP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000004720                 ADD             X29, SP, #0x60
.text:0000000000004724                 MRS             X21, #3, c13, c0, #2
.text:0000000000004728                 MOV             W19, W1
.text:000000000000472C                 LDR             X8, [X21,#0x28]
.text:0000000000004730                 MOV             W20, W0
.text:0000000000004734                 MOV             W9, #0xE
.text:0000000000004738                 STUR            X8, [X29,#var_28]
.text:000000000000473C                 MOV             W8, #0x746C7561
.text:0000000000004744                 STP             XZR, XZR, [SP,#0x60+var_60]
.text:0000000000004748                 STRB            W9, [SP,#0x60+var_60]
.text:000000000000474C                 STR             XZR, [SP,#0x60+var_30]
.text:0000000000004750                 STR             W8, [SP,#0x60+var_60+4]
.text:0000000000004754                 MOV             W8, #0x61666564
.text:000000000000475C                 STR             XZR, [SP,#0x60+var_50]
.text:0000000000004760                 STRB            WZR, [SP,#0x60+var_58]
.text:0000000000004764                 STUR            W8, [SP,#0x60+var_60+1]
.text:0000000000004768 ;   try {
.text:0000000000004768                 ADD             X8, SP, #0x60+var_38
.text:000000000000476C                 MOV             X0, SP
.text:0000000000004770                 MOV             W1, WZR
.text:0000000000004774                 BL              ._ZN6vendor7samsung8hardware3tlc4iccc4V1_08ISehIccc10getServiceERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb ; vendor::samsung::hardware::tlc::iccc::V1_0::ISehIccc::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:0000000000004774 ;   } // starts at 4768
.text:0000000000004778                 LDR             X22, [SP,#0x60+var_30]
.text:000000000000477C                 CBZ             X22, loc_4794
.text:0000000000004780                 LDR             X8, [X22]
.text:0000000000004784                 LDUR            X8, [X8,#-0x18]
.text:0000000000004788                 ADD             X0, X22, X8 ; this
.text:000000000000478C ;   try {
.text:000000000000478C                 ADD             X1, SP, #0x60+var_30 ; void *
.text:0000000000004790                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004794 loc_4794                                ; CODE XREF: TZ_ICCC_write(uint,uint)+6C↑j
.text:0000000000004794                 LDR             X8, [SP,#0x60+var_30]
.text:0000000000004798                 CMP             X22, X8
.text:000000000000479C                 B.EQ            loc_47A4
.text:00000000000047A0                 BL              ._ZN7android14sp_report_raceEv ; android::sp_report_race(void)
.text:00000000000047A0 ;   } // starts at 478C
.text:00000000000047A4 loc_47A4                                ; CODE XREF: TZ_ICCC_write(uint,uint)+8C↑j
.text:00000000000047A4                 LDR             X8, [SP,#0x60+var_38]
.text:00000000000047A8                 LDRB            W9, [SP,#0x60+var_60]
.text:00000000000047AC                 STP             XZR, X8, [SP,#0x60+var_38]
.text:00000000000047B0                 TBZ             W9, #0, loc_47C0
.text:00000000000047B4                 LDR             X0, [SP,#0x60+var_50] ; void *
.text:00000000000047B8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000047BC                 LDR             X8, [SP,#0x60+var_30]
.text:00000000000047C0 loc_47C0                                ; CODE XREF: TZ_ICCC_write(uint,uint)+A0↑j
.text:00000000000047C0                 CBZ             X8, loc_4818
.text:00000000000047C4 ;   try {
.text:00000000000047C4                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000047C8                 ADRP            X2, #aTzIcccWrite@PAGE ; "TZ_ICCC_write"
.text:00000000000047CC                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000047D0                 ADD             X2, X2, #aTzIcccWrite@PAGEOFF ; "TZ_ICCC_write"
.text:00000000000047D4                 MOV             W0, #6
.text:00000000000047D8                 BL              .__android_log_print
.text:00000000000047D8 ;   } // starts at 47C4
.text:00000000000047DC                 LDR             X0, [SP,#0x60+var_30]
.text:00000000000047E0                 LDR             X8, [X0]
.text:00000000000047E4                 LDR             X9, [X8,#0x78]
.text:00000000000047E8 ;   try {
.text:00000000000047E8                 MOV             X8, SP
.text:00000000000047EC                 MOV             W1, W20
.text:00000000000047F0                 MOV             W2, W19
.text:00000000000047F4                 BLR             X9
.text:00000000000047F4 ;   } // starts at 47E8
.text:00000000000047F8 ;   try {
.text:00000000000047F8                 MOV             X0, SP  ; this
.text:00000000000047FC                 BL              ._ZNK7android8hardware7details13return_status8assertOkEv ; android::hardware::details::return_status::assertOk(void)
.text:00000000000047FC ;   } // starts at 47F8
.text:0000000000004800                 LDR             W19, [SP,#0x60+var_3C]
.text:0000000000004804                 MOV             X0, SP  ; this
.text:0000000000004808                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:000000000000480C                 LDR             X8, [SP,#0x60+var_30]
.text:0000000000004810                 CBNZ            X8, loc_483C
.text:0000000000004814                 B               loc_4850
.text:0000000000004818 ; ---------------------------------------------------------------------------
.text:0000000000004818 loc_4818                                ; CODE XREF: TZ_ICCC_write(uint,uint):loc_47C0↑j
.text:0000000000004818 ;   try {
.text:0000000000004818                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:000000000000481C                 ADRP            X2, #aCannotGetIcccS_0@PAGE ; "Cannot get iccc Service"
.text:0000000000004820                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004824                 ADD             X2, X2, #aCannotGetIcccS_0@PAGEOFF ; "Cannot get iccc Service"
.text:0000000000004828                 MOV             W0, #6
.text:000000000000482C                 BL              .__android_log_print
.text:000000000000482C ;   } // starts at 4818
.text:0000000000004830                 MOV             W19, #0xFFFFFFFF
.text:0000000000004834                 LDR             X8, [SP,#0x60+var_30]
.text:0000000000004838                 CBZ             X8, loc_4850
.text:000000000000483C loc_483C                                ; CODE XREF: TZ_ICCC_write(uint,uint)+100↑j
.text:000000000000483C                 LDR             X9, [X8]
.text:0000000000004840                 LDUR            X9, [X9,#-0x18]
.text:0000000000004844                 ADD             X0, X8, X9 ; this
.text:0000000000004848 ;   try {
.text:0000000000004848                 ADD             X1, SP, #0x60+var_30 ; void *
.text:000000000000484C                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:000000000000484C ;   } // starts at 4848
.text:0000000000004850 loc_4850                                ; CODE XREF: TZ_ICCC_write(uint,uint)+104↑j
.text:0000000000004850                                         ; TZ_ICCC_write(uint,uint)+128↑j
.text:0000000000004850                 LDR             X8, [X21,#0x28]
.text:0000000000004854                 LDUR            X9, [X29,#var_28]
.text:0000000000004858                 CMP             X8, X9
.text:000000000000485C                 B.NE            loc_4878
.text:0000000000004860                 MOV             W0, W19
.text:0000000000004864                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000004868                 LDP             X20, X19, [SP,#0x60+var_10]
.text:000000000000486C                 LDP             X22, X21, [SP,#0x60+var_20]
.text:0000000000004870                 ADD             SP, SP, #0x70 ; 'p'
.text:0000000000004874                 RET
.text:0000000000004878 ; ---------------------------------------------------------------------------
.text:0000000000004878 loc_4878                                ; CODE XREF: TZ_ICCC_write(uint,uint)+14C↑j
.text:0000000000004878                 BL              .__stack_chk_fail
.text:000000000000487C ; ---------------------------------------------------------------------------
.text:000000000000487C ;   catch(...) // owned by 4848
.text:000000000000487C                 BL              sub_58B0
.text:0000000000004880 ; ---------------------------------------------------------------------------
.text:0000000000004880 ;   cleanup() // owned by 47F8
.text:0000000000004880                 MOV             X19, X0
.text:0000000000004884                 MOV             X0, SP  ; this
.text:0000000000004888                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:000000000000488C                 LDR             X8, [SP,#0x60+var_30]
.text:0000000000004890                 CBNZ            X8, loc_48C8
.text:0000000000004894                 B               loc_48DC
.text:0000000000004898 ; ---------------------------------------------------------------------------
.text:0000000000004898 ;   cleanup() // owned by 47E8
.text:0000000000004898                 B               loc_489C
.text:000000000000489C ; ---------------------------------------------------------------------------
.text:000000000000489C loc_489C                                ; CODE XREF: TZ_ICCC_write(uint,uint)+188↑j
.text:000000000000489C ;   cleanup() // owned by 47C4
.text:000000000000489C ;   cleanup() // owned by 4818
.text:000000000000489C                 MOV             X19, X0
.text:00000000000048A0                 LDR             X8, [SP,#0x60+var_30]
.text:00000000000048A4                 CBNZ            X8, loc_48C8
.text:00000000000048A8                 B               loc_48DC
.text:00000000000048AC ; ---------------------------------------------------------------------------
.text:00000000000048AC ;   cleanup() // owned by 4768
.text:00000000000048AC                 LDRB            W8, [SP,#0x60+var_60]
.text:00000000000048B0                 MOV             X19, X0
.text:00000000000048B4                 TBZ             W8, #0, loc_48C0
.text:00000000000048B8                 LDR             X0, [SP,#0x60+var_50] ; void *
.text:00000000000048BC                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000048C0 loc_48C0                                ; CODE XREF: TZ_ICCC_write(uint,uint)+1A4↑j
.text:00000000000048C0                 LDR             X8, [SP,#0x60+var_30]
.text:00000000000048C4                 CBZ             X8, loc_48DC
.text:00000000000048C8 loc_48C8                                ; CODE XREF: TZ_ICCC_write(uint,uint)+180↑j
.text:00000000000048C8                                         ; TZ_ICCC_write(uint,uint)+194↑j
.text:00000000000048C8                 LDR             X9, [X8]
.text:00000000000048CC                 LDUR            X9, [X9,#-0x18]
.text:00000000000048D0                 ADD             X0, X8, X9 ; this
.text:00000000000048D4 ;   try {
.text:00000000000048D4                 ADD             X1, SP, #0x60+var_30 ; void *
.text:00000000000048D8                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:00000000000048D8 ;   } // starts at 48D4
.text:00000000000048DC loc_48DC                                ; CODE XREF: TZ_ICCC_write(uint,uint)+184↑j
.text:00000000000048DC                                         ; TZ_ICCC_write(uint,uint)+198↑j ...
.text:00000000000048DC                 MOV             X0, X19
.text:00000000000048E0                 BL              sub_78A0
.text:00000000000048E4 ;   catch(...) // owned by 48D4
.text:00000000000048E4                 BL              sub_58B0
.text:00000000000048E8 ; ---------------------------------------------------------------------------
.text:00000000000048E8 ;   catch(...) // owned by 478C
.text:00000000000048E8                 BL              sub_58B0
.text:00000000000048E8 ; } // starts at 4710
.text:00000000000048E8 ; End of function TZ_ICCC_write(uint,uint)
.text:00000000000048E8 ; ---------------------------------------------------------------------------
.text:00000000000048EC                 ALIGN 0x10
.text:00000000000048F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048F0 ; Attributes: bp-based frame
.text:00000000000048F0 ; __int64 __fastcall TZ_ICCC_attestation(unsigned __int8 *, unsigned int)
.text:00000000000048F0                 EXPORT _Z19TZ_ICCC_attestationPhj
.text:00000000000048F0 _Z19TZ_ICCC_attestationPhj              ; DATA XREF: LOAD:00000000000006F0↑o
.text:00000000000048F0 var_E0          = -0xE0
.text:00000000000048F0 var_D8          = -0xD8
.text:00000000000048F0 var_D0          = -0xD0
.text:00000000000048F0 var_C8          = -0xC8
.text:00000000000048F0 var_C0          = -0xC0
.text:00000000000048F0 var_B8          = -0xB8
.text:00000000000048F0 var_B0          = -0xB0
.text:00000000000048F0 var_A8          = -0xA8
.text:00000000000048F0 var_80          = -0x80
.text:00000000000048F0 var_78          = -0x78
.text:00000000000048F0 var_74          = -0x74
.text:00000000000048F0 var_70          = -0x70
.text:00000000000048F0 var_50          = -0x50
.text:00000000000048F0 var_38          = -0x38
.text:00000000000048F0 var_30          = -0x30
.text:00000000000048F0 var_20          = -0x20
.text:00000000000048F0 var_10          = -0x10
.text:00000000000048F0 var_s0          =  0
.text:00000000000048F0 ; __unwind { // __gxx_personality_v0
.text:00000000000048F0                 SUB             SP, SP, #0xF0
.text:00000000000048F4                 STR             X23, [SP,#0xE0+var_30]
.text:00000000000048F8                 STP             X22, X21, [SP,#0xE0+var_20]
.text:00000000000048FC                 STP             X20, X19, [SP,#0xE0+var_10]
.text:0000000000004900                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:0000000000004904                 ADD             X29, SP, #0xE0
.text:0000000000004908                 MRS             X23, #3, c13, c0, #2
.text:000000000000490C                 ADRP            X9, #qword_1630@PAGE
.text:0000000000004910                 LDR             X8, [X23,#0x28]
.text:0000000000004914                 MOV             W20, W1
.text:0000000000004918                 MOV             X19, X0
.text:000000000000491C                 LDR             D0, [X9,#qword_1630@PAGEOFF]
.text:0000000000004920                 MOV             W9, #1
.text:0000000000004924                 STUR            X8, [X29,#var_38]
.text:0000000000004928                 MOV             W8, #0xE
.text:000000000000492C                 STP             XZR, XZR, [SP,#0xE0+var_E0]
.text:0000000000004930                 STP             XZR, XZR, [SP,#0xE0+var_80]
.text:0000000000004934                 STRB            W8, [SP,#0xE0+var_E0]
.text:0000000000004938                 MOV             W8, #0x746C7561
.text:0000000000004940                 STRB            W9, [SP,#0xE0+var_74]
.text:0000000000004944                 STR             D0, [SP,#0xE0+var_B0]
.text:0000000000004948                 STR             XZR, [SP,#0xE0+var_C0]
.text:000000000000494C                 STR             W8, [SP,#0xE0+var_E0+4]
.text:0000000000004950                 MOV             W8, #0x61666564
.text:0000000000004958                 STR             XZR, [SP,#0xE0+var_D0]
.text:000000000000495C                 STRB            WZR, [SP,#0xE0+var_D8]
.text:0000000000004960                 STUR            W8, [SP,#0xE0+var_E0+1]
.text:0000000000004964 ;   try {
.text:0000000000004964                 ADD             X8, SP, #0xE0+var_C8
.text:0000000000004968                 MOV             X0, SP
.text:000000000000496C                 MOV             W1, WZR
.text:0000000000004970                 BL              ._ZN6vendor7samsung8hardware3tlc4iccc4V1_08ISehIccc10getServiceERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb ; vendor::samsung::hardware::tlc::iccc::V1_0::ISehIccc::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:0000000000004970 ;   } // starts at 4964
.text:0000000000004974                 LDR             X21, [SP,#0xE0+var_C0]
.text:0000000000004978                 CBZ             X21, loc_4990
.text:000000000000497C                 LDR             X8, [X21]
.text:0000000000004980                 LDUR            X8, [X8,#-0x18]
.text:0000000000004984                 ADD             X0, X21, X8 ; this
.text:0000000000004988 ;   try {
.text:0000000000004988                 ADD             X1, SP, #0xE0+var_C0 ; void *
.text:000000000000498C                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004990 loc_4990                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+88↑j
.text:0000000000004990                 LDR             X8, [SP,#0xE0+var_C0]
.text:0000000000004994                 CMP             X21, X8
.text:0000000000004998                 B.EQ            loc_49A0
.text:000000000000499C                 BL              ._ZN7android14sp_report_raceEv ; android::sp_report_race(void)
.text:000000000000499C ;   } // starts at 4988
.text:00000000000049A0 loc_49A0                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+A8↑j
.text:00000000000049A0                 LDR             X8, [SP,#0xE0+var_C8]
.text:00000000000049A4                 LDRB            W9, [SP,#0xE0+var_E0]
.text:00000000000049A8                 STP             XZR, X8, [SP,#0xE0+var_C8]
.text:00000000000049AC                 TBZ             W9, #0, loc_49BC
.text:00000000000049B0                 LDR             X0, [SP,#0xE0+var_D0] ; void *
.text:00000000000049B4                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000049B8                 LDR             X8, [SP,#0xE0+var_C0]
.text:00000000000049BC loc_49BC                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+BC↑j
.text:00000000000049BC                 CBZ             X8, loc_4AD0
.text:00000000000049C0 ;   try {
.text:00000000000049C0                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000049C4                 ADRP            X2, #aTzIcccAttestat@PAGE ; "TZ_ICCC_attestation\n"
.text:00000000000049C8                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000049CC                 ADD             X2, X2, #aTzIcccAttestat@PAGEOFF ; "TZ_ICCC_attestation\n"
.text:00000000000049D0                 MOV             W0, #6
.text:00000000000049D4                 BL              .__android_log_print
.text:00000000000049D8                 MOV             W21, W20
.text:00000000000049DC                 MOV             X0, X21 ; unsigned __int64
.text:00000000000049E0                 BL              ._Znam  ; operator new[](ulong)
.text:00000000000049E0 ;   } // starts at 49C0
.text:00000000000049E4                 MOV             W1, WZR ; c
.text:00000000000049E8                 MOV             X2, X21 ; n
.text:00000000000049EC                 MOV             X22, X0
.text:00000000000049F0                 BL              .memset
.text:00000000000049F4                 LDR             W8, [SP,#0xE0+var_78]
.text:00000000000049F8                 CMP             W8, W20
.text:00000000000049FC                 CSEL            W10, W8, W20, CC
.text:0000000000004A00                 CBZ             W10, loc_4A44
.text:0000000000004A04                 LDR             X8, [SP,#0xE0+var_80]
.text:0000000000004A08                 MOV             W9, W10
.text:0000000000004A0C                 CMP             W10, #0x1F
.text:0000000000004A10                 B.LS            loc_4A2C
.text:0000000000004A14                 ADD             X10, X8, X9
.text:0000000000004A18                 CMP             X22, X10
.text:0000000000004A1C                 B.CS            loc_4B5C
.text:0000000000004A20                 ADD             X10, X22, X9
.text:0000000000004A24                 CMP             X8, X10
.text:0000000000004A28                 B.CS            loc_4B5C
.text:0000000000004A2C loc_4A2C                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+120↑j
.text:0000000000004A2C                 MOV             X10, XZR
.text:0000000000004A30 loc_4A30                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+150↓j
.text:0000000000004A30                                         ; TZ_ICCC_attestation(uchar *,uint)+298↓j
.text:0000000000004A30                 LDRB            W11, [X8,X10]
.text:0000000000004A34                 STRB            W11, [X22,X10]
.text:0000000000004A38                 ADD             X10, X10, #1
.text:0000000000004A3C                 CMP             X10, X9
.text:0000000000004A40                 B.CC            loc_4A30
.text:0000000000004A44 loc_4A44                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+110↑j
.text:0000000000004A44                                         ; TZ_ICCC_attestation(uchar *,uint)+29C↓j
.text:0000000000004A44                 LDRB            W8, [SP,#0xE0+var_74]
.text:0000000000004A48                 CBZ             W8, loc_4A58
.text:0000000000004A4C                 LDR             X0, [SP,#0xE0+var_80] ; void *
.text:0000000000004A50                 CBZ             X0, loc_4A58
.text:0000000000004A54                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000004A58 loc_4A58                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+158↑j
.text:0000000000004A58                                         ; TZ_ICCC_attestation(uchar *,uint)+160↑j
.text:0000000000004A58                 MOV             W8, #1
.text:0000000000004A5C                 STR             X22, [SP,#0xE0+var_80]
.text:0000000000004A60                 MOV             X0, X22 ; dest
.text:0000000000004A64                 STR             W20, [SP,#0xE0+var_78]
.text:0000000000004A68                 MOV             X1, X19 ; src
.text:0000000000004A6C                 MOV             X2, X21 ; n
.text:0000000000004A70                 STRB            W8, [SP,#0xE0+var_74]
.text:0000000000004A74                 BL              .memcpy
.text:0000000000004A78                 ADRP            X8, #off_B068@PAGE
.text:0000000000004A7C                 LDR             X0, [SP,#0xE0+var_C0]
.text:0000000000004A80                 ADD             X8, X8, #off_B068@PAGEOFF
.text:0000000000004A84                 ADD             X20, SP, #0xE0+var_70
.text:0000000000004A88                 ADD             X9, SP, #0xE0+var_B8
.text:0000000000004A8C                 STR             X20, [SP,#0xE0+var_50]
.text:0000000000004A90                 STP             X8, X9, [SP,#0xE0+var_70]
.text:0000000000004A94                 LDR             X8, [X0]
.text:0000000000004A98                 LDR             X9, [X8,#0x80]
.text:0000000000004A9C ;   try {
.text:0000000000004A9C                 ADD             X8, SP, #0xE0+var_A8
.text:0000000000004AA0                 ADD             X1, SP, #0xE0+var_80
.text:0000000000004AA4                 ADD             X2, SP, #0xE0+var_70
.text:0000000000004AA8                 BLR             X9
.text:0000000000004AA8 ;   } // starts at 4A9C
.text:0000000000004AAC                 ADD             X0, SP, #0xE0+var_A8 ; this
.text:0000000000004AB0                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:0000000000004AB4                 LDR             X0, [SP,#0xE0+var_50]
.text:0000000000004AB8                 CMP             X20, X0
.text:0000000000004ABC                 B.EQ            loc_4AF4
.text:0000000000004AC0                 CBZ             X0, loc_4AE8
.text:0000000000004AC4                 LDR             X8, [X0]
.text:0000000000004AC8                 LDR             X8, [X8,#0x28]
.text:0000000000004ACC                 B               loc_4AFC
.text:0000000000004AD0 ; ---------------------------------------------------------------------------
.text:0000000000004AD0 loc_4AD0                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint):loc_49BC↑j
.text:0000000000004AD0 ;   try {
.text:0000000000004AD0                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004AD4                 ADRP            X2, #aCannotGetIcccS_0@PAGE ; "Cannot get iccc Service"
.text:0000000000004AD8                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004ADC                 ADD             X2, X2, #aCannotGetIcccS_0@PAGEOFF ; "Cannot get iccc Service"
.text:0000000000004AE0                 MOV             W0, #6
.text:0000000000004AE4                 BL              .__android_log_print
.text:0000000000004AE4 ;   } // starts at 4AD0
.text:0000000000004AE8 loc_4AE8                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+1D0↑j
.text:0000000000004AE8                 LDR             X8, [SP,#0xE0+var_C0]
.text:0000000000004AEC                 CBNZ            X8, loc_4B08
.text:0000000000004AF0                 B               loc_4B1C
.text:0000000000004AF4 ; ---------------------------------------------------------------------------
.text:0000000000004AF4 loc_4AF4                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+1CC↑j
.text:0000000000004AF4                 LDR             X8, [X0]
.text:0000000000004AF8                 LDR             X8, [X8,#0x20]
.text:0000000000004AFC loc_4AFC                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+1DC↑j
.text:0000000000004AFC                 BLR             X8
.text:0000000000004B00                 LDR             X8, [SP,#0xE0+var_C0]
.text:0000000000004B04                 CBZ             X8, loc_4B1C
.text:0000000000004B08 loc_4B08                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+1FC↑j
.text:0000000000004B08                 LDR             X9, [X8]
.text:0000000000004B0C                 LDUR            X9, [X9,#-0x18]
.text:0000000000004B10                 ADD             X0, X8, X9 ; this
.text:0000000000004B14 ;   try {
.text:0000000000004B14                 ADD             X1, SP, #0xE0+var_C0 ; void *
.text:0000000000004B18                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004B18 ;   } // starts at 4B14
.text:0000000000004B1C loc_4B1C                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+200↑j
.text:0000000000004B1C                                         ; TZ_ICCC_attestation(uchar *,uint)+214↑j
.text:0000000000004B1C                 LDRB            W8, [SP,#0xE0+var_74]
.text:0000000000004B20                 CBZ             W8, loc_4B30
.text:0000000000004B24                 LDR             X0, [SP,#0xE0+var_80] ; void *
.text:0000000000004B28                 CBZ             X0, loc_4B30
.text:0000000000004B2C                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000004B30 loc_4B30                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+230↑j
.text:0000000000004B30                                         ; TZ_ICCC_attestation(uchar *,uint)+238↑j
.text:0000000000004B30                 LDP             X0, X1, [SP,#0xE0+var_B8]
.text:0000000000004B34                 LDR             X8, [X23,#0x28]
.text:0000000000004B38                 LDUR            X9, [X29,#var_38]
.text:0000000000004B3C                 CMP             X8, X9
.text:0000000000004B40                 B.NE            loc_4B90
.text:0000000000004B44                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:0000000000004B48                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:0000000000004B4C                 LDP             X22, X21, [SP,#0xE0+var_20]
.text:0000000000004B50                 LDR             X23, [SP,#0xE0+var_30]
.text:0000000000004B54                 ADD             SP, SP, #0xF0
.text:0000000000004B58                 RET
.text:0000000000004B5C ; ---------------------------------------------------------------------------
.text:0000000000004B5C loc_4B5C                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+12C↑j
.text:0000000000004B5C                                         ; TZ_ICCC_attestation(uchar *,uint)+138↑j
.text:0000000000004B5C                 AND             X10, X9, #0xFFFFFFE0
.text:0000000000004B60                 ADD             X11, X8, #0x10
.text:0000000000004B64                 ADD             X12, X22, #0x10
.text:0000000000004B68                 MOV             X13, X10
.text:0000000000004B6C loc_4B6C                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+290↓j
.text:0000000000004B6C                 LDP             Q0, Q1, [X11,#-0x10]
.text:0000000000004B70                 ADD             X11, X11, #0x20 ; ' '
.text:0000000000004B74                 SUBS            X13, X13, #0x20 ; ' '
.text:0000000000004B78                 STP             Q0, Q1, [X12,#-0x10]
.text:0000000000004B7C                 ADD             X12, X12, #0x20 ; ' '
.text:0000000000004B80                 B.NE            loc_4B6C
.text:0000000000004B84                 CMP             X10, X9
.text:0000000000004B88                 B.NE            loc_4A30
.text:0000000000004B8C                 B               loc_4A44
.text:0000000000004B90 ; ---------------------------------------------------------------------------
.text:0000000000004B90 loc_4B90                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+250↑j
.text:0000000000004B90                 BL              .__stack_chk_fail
.text:0000000000004B94 ; ---------------------------------------------------------------------------
.text:0000000000004B94 ;   catch(...) // owned by 4B14
.text:0000000000004B94                 BL              sub_58B0
.text:0000000000004B98 ; ---------------------------------------------------------------------------
.text:0000000000004B98 ;   cleanup() // owned by 4A9C
.text:0000000000004B98                 LDR             X8, [SP,#0xE0+var_50]
.text:0000000000004B9C                 MOV             X19, X0
.text:0000000000004BA0                 CMP             X20, X8
.text:0000000000004BA4                 B.NE            loc_4BB4
.text:0000000000004BA8                 LDR             X9, [X8]
.text:0000000000004BAC                 LDR             X9, [X9,#0x20]
.text:0000000000004BB0                 B               loc_4BC0
.text:0000000000004BB4 ; ---------------------------------------------------------------------------
.text:0000000000004BB4 loc_4BB4                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+2B4↑j
.text:0000000000004BB4                 CBZ             X8, loc_4BFC
.text:0000000000004BB8                 LDR             X9, [X8]
.text:0000000000004BBC                 LDR             X9, [X9,#0x28]
.text:0000000000004BC0 loc_4BC0                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+2C0↑j
.text:0000000000004BC0                 MOV             X0, X8
.text:0000000000004BC4                 BLR             X9
.text:0000000000004BC8                 LDR             X8, [SP,#0xE0+var_C0]
.text:0000000000004BCC                 CBNZ            X8, loc_4C04
.text:0000000000004BD0                 B               loc_4C18
.text:0000000000004BD4 ; ---------------------------------------------------------------------------
.text:0000000000004BD4 ;   cleanup() // owned by 4964
.text:0000000000004BD4                 LDRB            W8, [SP,#0xE0+var_E0]
.text:0000000000004BD8                 MOV             X19, X0
.text:0000000000004BDC                 TBZ             W8, #0, loc_4BFC
.text:0000000000004BE0                 LDR             X0, [SP,#0xE0+var_D0] ; void *
.text:0000000000004BE4                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000004BE8                 LDR             X8, [SP,#0xE0+var_C0]
.text:0000000000004BEC                 CBNZ            X8, loc_4C04
.text:0000000000004BF0                 B               loc_4C18
.text:0000000000004BF4 ; ---------------------------------------------------------------------------
.text:0000000000004BF4 ;   catch(...) // owned by 4988
.text:0000000000004BF4                 BL              sub_58B0
.text:0000000000004BF8 ; ---------------------------------------------------------------------------
.text:0000000000004BF8 ;   cleanup() // owned by 49C0
.text:0000000000004BF8 ;   cleanup() // owned by 4AD0
.text:0000000000004BF8                 MOV             X19, X0
.text:0000000000004BFC loc_4BFC                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint):loc_4BB4↑j
.text:0000000000004BFC                                         ; TZ_ICCC_attestation(uchar *,uint)+2EC↑j
.text:0000000000004BFC                 LDR             X8, [SP,#0xE0+var_C0]
.text:0000000000004C00                 CBZ             X8, loc_4C18
.text:0000000000004C04 loc_4C04                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+2DC↑j
.text:0000000000004C04                                         ; TZ_ICCC_attestation(uchar *,uint)+2FC↑j
.text:0000000000004C04                 LDR             X9, [X8]
.text:0000000000004C08                 LDUR            X9, [X9,#-0x18]
.text:0000000000004C0C                 ADD             X0, X8, X9 ; this
.text:0000000000004C10 ;   try {
.text:0000000000004C10                 ADD             X1, SP, #0xE0+var_C0 ; void *
.text:0000000000004C14                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004C14 ;   } // starts at 4C10
.text:0000000000004C18 loc_4C18                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+2E0↑j
.text:0000000000004C18                                         ; TZ_ICCC_attestation(uchar *,uint)+300↑j ...
.text:0000000000004C18                 LDRB            W8, [SP,#0xE0+var_74]
.text:0000000000004C1C                 CBZ             W8, loc_4C2C
.text:0000000000004C20                 LDR             X0, [SP,#0xE0+var_80] ; void *
.text:0000000000004C24                 CBZ             X0, loc_4C2C
.text:0000000000004C28                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000004C2C loc_4C2C                                ; CODE XREF: TZ_ICCC_attestation(uchar *,uint)+32C↑j
.text:0000000000004C2C                                         ; TZ_ICCC_attestation(uchar *,uint)+334↑j
.text:0000000000004C2C                 MOV             X0, X19
.text:0000000000004C30                 BL              sub_78A0
.text:0000000000004C34 ;   catch(...) // owned by 4C10
.text:0000000000004C34                 BL              sub_58B0
.text:0000000000004C34 ; } // starts at 48F0
.text:0000000000004C34 ; End of function TZ_ICCC_attestation(uchar *,uint)
.text:0000000000004C38 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C38 ; Attributes: bp-based frame
.text:0000000000004C38 ; _QWORD __fastcall TZ_ICCC_device_status(unsigned int, unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int, unsigned __int8)
.text:0000000000004C38                 EXPORT _Z21TZ_ICCC_device_statusjPhjS_jh
.text:0000000000004C38 _Z21TZ_ICCC_device_statusjPhjS_jh       ; DATA XREF: LOAD:0000000000000708↑o
.text:0000000000004C38 var_2128        = -0x2128
.text:0000000000004C38 var_2120        = -0x2120
.text:0000000000004C38 var_2118        = -0x2118
.text:0000000000004C38 var_2110        = -0x2110
.text:0000000000004C38 var_2108        = -0x2108
.text:0000000000004C38 var_20FC        = -0x20FC
.text:0000000000004C38 var_20F8        = -0x20F8
.text:0000000000004C38 var_20F4        = -0x20F4
.text:0000000000004C38 var_20F0        = -0x20F0
.text:0000000000004C38 var_20EC        = -0x20EC
.text:0000000000004C38 var_20E8        = -0x20E8
.text:0000000000004C38 var_20E0        = -0x20E0
.text:0000000000004C38 var_20DC        = -0x20DC
.text:0000000000004C38 var_20D8        = -0x20D8
.text:0000000000004C38 var_20B0        = -0x20B0
.text:0000000000004C38 var_20A8        = -0x20A8
.text:0000000000004C38 var_20A4        = -0x20A4
.text:0000000000004C38 var_20A0        = -0x20A0
.text:0000000000004C38 var_2098        = -0x2098
.text:0000000000004C38 var_2094        = -0x2094
.text:0000000000004C38 var_2090        = -0x2090
.text:0000000000004C38 var_2070        = -0x2070
.text:0000000000004C38 s               = -0x2058
.text:0000000000004C38 var_58          = -0x58
.text:0000000000004C38 var_50          = -0x50
.text:0000000000004C38 var_40          = -0x40
.text:0000000000004C38 var_30          = -0x30
.text:0000000000004C38 var_20          = -0x20
.text:0000000000004C38 var_10          = -0x10
.text:0000000000004C38 var_s0          =  0
.text:0000000000004C38 ; __unwind { // __gxx_personality_v0
.text:0000000000004C38                 STR             X28, [SP,#-0x10+var_50]!
.text:0000000000004C3C                 STP             X26, X25, [SP,#0x50+var_40]
.text:0000000000004C40                 STP             X24, X23, [SP,#0x50+var_30]
.text:0000000000004C44                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000004C48                 STP             X20, X19, [SP,#0x50+var_10]
.text:0000000000004C4C                 STP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000004C50                 ADD             X29, SP, #0x50
.text:0000000000004C54                 SUB             SP, SP, #2,LSL#12
.text:0000000000004C58                 SUB             SP, SP, #0xE0
.text:0000000000004C5C                 MRS             X25, #3, c13, c0, #2
.text:0000000000004C60                 MOV             W24, W2
.text:0000000000004C64                 LDR             X8, [X25,#0x28]
.text:0000000000004C68                 MOV             X23, X1
.text:0000000000004C6C                 MOV             W20, W0
.text:0000000000004C70                 ADD             X0, SP, #0x2130+s ; s
.text:0000000000004C74                 MOV             W1, WZR ; c
.text:0000000000004C78                 MOV             W2, #0x2000 ; n
.text:0000000000004C7C                 STUR            X8, [X29,#var_58]
.text:0000000000004C80                 MOV             W19, W5
.text:0000000000004C84                 STR             W4, [SP,#0x2130+var_20EC]
.text:0000000000004C88                 MOV             X21, X3
.text:0000000000004C8C                 STRB            W5, [SP,#0x2130+var_20F0]
.text:0000000000004C90                 STR             WZR, [SP,#0x2130+var_20E0]
.text:0000000000004C94                 BL              .memset
.text:0000000000004C98                 MOV             W8, #1
.text:0000000000004C9C                 STP             XZR, XZR, [SP,#0x2130+var_20A0]
.text:0000000000004CA0                 STP             XZR, XZR, [SP,#0x2130+var_20B0]
.text:0000000000004CA4                 MOV             W10, #0x746C7561
.text:0000000000004CAC                 STP             XZR, XZR, [SP,#0x2130+var_2128]
.text:0000000000004CB0                 STRB            W8, [SP,#0x2130+var_2094]
.text:0000000000004CB4                 MOV             W9, #4
.text:0000000000004CB8                 STRB            W8, [SP,#0x2130+var_20A4]
.text:0000000000004CBC                 MOV             W8, #0xE
.text:0000000000004CC0                 STR             W10, [SP,#0x2130+var_2128+4]
.text:0000000000004CC4                 MOV             W10, #0x61666564
.text:0000000000004CCC                 STP             WZR, WZR, [SP,#0x2130+var_20FC]
.text:0000000000004CD0                 STRB            W8, [SP,#0x2130+var_2128]
.text:0000000000004CD4                 SUB             W8, W20, #1
.text:0000000000004CD8                 CMP             W8, #3
.text:0000000000004CDC                 STR             XZR, [SP,#0x2130+var_2108]
.text:0000000000004CE0                 CSEL            W20, W20, W9, CC
.text:0000000000004CE4                 STR             W9, [SP,#0x2130+var_20DC]
.text:0000000000004CE8                 STR             XZR, [SP,#0x2130+var_2118]
.text:0000000000004CEC                 STUR            W10, [SP,#0x2130+var_2128+1]
.text:0000000000004CF0                 STRB            WZR, [SP,#0x2130+var_2120]
.text:0000000000004CF4 ;   try {
.text:0000000000004CF4                 ADD             X8, SP, #0x2130+var_2110
.text:0000000000004CF8                 ADD             X0, SP, #0x2130+var_2128
.text:0000000000004CFC                 MOV             W1, WZR
.text:0000000000004D00                 BL              ._ZN6vendor7samsung8hardware3tlc4iccc4V1_08ISehIccc10getServiceERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb ; vendor::samsung::hardware::tlc::iccc::V1_0::ISehIccc::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:0000000000004D00 ;   } // starts at 4CF4
.text:0000000000004D04                 LDR             X22, [SP,#0x2130+var_2108]
.text:0000000000004D08                 CBZ             X22, loc_4D20
.text:0000000000004D0C                 LDR             X8, [X22]
.text:0000000000004D10                 LDUR            X8, [X8,#-0x18]
.text:0000000000004D14                 ADD             X0, X22, X8 ; this
.text:0000000000004D18 ;   try {
.text:0000000000004D18                 ADD             X1, SP, #0x2130+var_2108 ; void *
.text:0000000000004D1C                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004D20 loc_4D20                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+D0↑j
.text:0000000000004D20                 LDR             X8, [SP,#0x2130+var_2108]
.text:0000000000004D24                 CMP             X22, X8
.text:0000000000004D28                 B.EQ            loc_4D30
.text:0000000000004D2C                 BL              ._ZN7android14sp_report_raceEv ; android::sp_report_race(void)
.text:0000000000004D2C ;   } // starts at 4D18
.text:0000000000004D30 loc_4D30                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+F0↑j
.text:0000000000004D30                 LDR             X8, [SP,#0x2130+var_2110]
.text:0000000000004D34                 LDRB            W9, [SP,#0x2130+var_2128]
.text:0000000000004D38                 STP             XZR, X8, [SP,#0x2130+var_2110]
.text:0000000000004D3C                 TBZ             W9, #0, loc_4D4C
.text:0000000000004D40                 LDR             X0, [SP,#0x2130+var_2118] ; void *
.text:0000000000004D44                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000004D48                 LDR             X8, [SP,#0x2130+var_2108]
.text:0000000000004D4C loc_4D4C                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+104↑j
.text:0000000000004D4C                 CBZ             X8, loc_4F64
.text:0000000000004D50 ;   try {
.text:0000000000004D50                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004D54                 ADRP            X2, #aTzIcccDeviceSt@PAGE ; "TZ_ICCC_device_status\n"
.text:0000000000004D58                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004D5C                 ADD             X2, X2, #aTzIcccDeviceSt@PAGEOFF ; "TZ_ICCC_device_status\n"
.text:0000000000004D60                 MOV             W0, #6
.text:0000000000004D64                 BL              .__android_log_print
.text:0000000000004D68                 LDR             W22, [SP,#0x2130+var_20EC]
.text:0000000000004D6C                 CMP             W24, #0x40 ; '@'
.text:0000000000004D70                 B.NE            loc_4F88
.text:0000000000004D74                 CMP             W22, #1,LSL#12
.text:0000000000004D78                 B.HI            loc_4F88
.text:0000000000004D7C                 MOV             W0, #0x40 ; '@' ; unsigned __int64
.text:0000000000004D80                 MOV             W26, #0x40 ; '@'
.text:0000000000004D84                 BL              ._Znam  ; operator new[](ulong)
.text:0000000000004D88                 LDR             W8, [SP,#0x2130+var_2098]
.text:0000000000004D8C                 MOVI            V0.2D, #0
.text:0000000000004D90                 MOV             X24, X0
.text:0000000000004D94                 CMP             W8, #0x40 ; '@'
.text:0000000000004D98                 CSEL            W10, W8, W26, CC
.text:0000000000004D9C                 STP             Q0, Q0, [X0,#0x20]
.text:0000000000004DA0                 STP             Q0, Q0, [X0]
.text:0000000000004DA4                 CBZ             W10, loc_4DE8
.text:0000000000004DA8                 LDR             X8, [SP,#0x2130+var_20A0]
.text:0000000000004DAC                 MOV             W9, W10
.text:0000000000004DB0                 CMP             W10, #0x1F
.text:0000000000004DB4                 B.LS            loc_4DD0
.text:0000000000004DB8                 ADD             X10, X8, X9
.text:0000000000004DBC                 CMP             X24, X10
.text:0000000000004DC0                 B.CS            loc_5044
.text:0000000000004DC4                 ADD             X10, X24, X9
.text:0000000000004DC8                 CMP             X8, X10
.text:0000000000004DCC                 B.CS            loc_5044
.text:0000000000004DD0 loc_4DD0                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+17C↑j
.text:0000000000004DD0                 MOV             X10, XZR
.text:0000000000004DD4 loc_4DD4                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+1AC↓j
.text:0000000000004DD4                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+438↓j
.text:0000000000004DD4                 LDRB            W11, [X8,X10]
.text:0000000000004DD8                 STRB            W11, [X24,X10]
.text:0000000000004DDC                 ADD             X10, X10, #1
.text:0000000000004DE0                 CMP             X10, X9
.text:0000000000004DE4                 B.CC            loc_4DD4
.text:0000000000004DE8 loc_4DE8                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+16C↑j
.text:0000000000004DE8                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+43C↓j
.text:0000000000004DE8                 LDRB            W8, [SP,#0x2130+var_2094]
.text:0000000000004DEC                 CBZ             W8, loc_4E00
.text:0000000000004DF0                 LDR             X0, [SP,#0x2130+var_20A0] ; void *
.text:0000000000004DF4                 CBZ             X0, loc_4E00
.text:0000000000004DF8                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000004DFC                 LDR             W22, [SP,#0x2130+var_20EC]
.text:0000000000004E00 loc_4E00                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+1B4↑j
.text:0000000000004E00                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+1BC↑j
.text:0000000000004E00                 MOV             W8, #0x40 ; '@'
.text:0000000000004E04                 STR             X24, [SP,#0x2130+var_20A0]
.text:0000000000004E08                 LDP             Q0, Q1, [X23,#0x20]
.text:0000000000004E0C                 MOV             W9, #1
.text:0000000000004E10                 STR             W8, [SP,#0x2130+var_2098]
.text:0000000000004E14                 LDP             Q2, Q3, [X23]
.text:0000000000004E18                 MOV             W23, W22
.text:0000000000004E1C                 STRB            W9, [SP,#0x2130+var_2094]
.text:0000000000004E20                 STP             Q0, Q1, [X24,#0x20]
.text:0000000000004E24                 STP             Q2, Q3, [X24]
.text:0000000000004E28                 MOV             X0, X23 ; unsigned __int64
.text:0000000000004E2C                 BL              ._Znam  ; operator new[](ulong)
.text:0000000000004E2C ;   } // starts at 4D50
.text:0000000000004E30                 MOV             W1, WZR ; c
.text:0000000000004E34                 MOV             X2, X23 ; n
.text:0000000000004E38                 MOV             X24, X0
.text:0000000000004E3C                 BL              .memset
.text:0000000000004E40                 LDR             W8, [SP,#0x2130+var_20A8]
.text:0000000000004E44                 CMP             W8, W22
.text:0000000000004E48                 CSEL            W10, W8, W22, CC
.text:0000000000004E4C                 CBZ             W10, loc_4E90
.text:0000000000004E50                 LDR             X8, [SP,#0x2130+var_20B0]
.text:0000000000004E54                 MOV             W9, W10
.text:0000000000004E58                 CMP             W10, #0x1F
.text:0000000000004E5C                 B.LS            loc_4E78
.text:0000000000004E60                 ADD             X10, X8, X9
.text:0000000000004E64                 CMP             X24, X10
.text:0000000000004E68                 B.CS            loc_5078
.text:0000000000004E6C                 ADD             X10, X24, X9
.text:0000000000004E70                 CMP             X8, X10
.text:0000000000004E74                 B.CS            loc_5078
.text:0000000000004E78 loc_4E78                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+224↑j
.text:0000000000004E78                 MOV             X10, XZR
.text:0000000000004E7C loc_4E7C                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+254↓j
.text:0000000000004E7C                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+46C↓j
.text:0000000000004E7C                 LDRB            W11, [X8,X10]
.text:0000000000004E80                 STRB            W11, [X24,X10]
.text:0000000000004E84                 ADD             X10, X10, #1
.text:0000000000004E88                 CMP             X10, X9
.text:0000000000004E8C                 B.CC            loc_4E7C
.text:0000000000004E90 loc_4E90                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+214↑j
.text:0000000000004E90                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+470↓j
.text:0000000000004E90                 LDRB            W8, [SP,#0x2130+var_20A4]
.text:0000000000004E94                 CBZ             W8, loc_4EA8
.text:0000000000004E98                 LDR             X0, [SP,#0x2130+var_20B0] ; void *
.text:0000000000004E9C                 CBZ             X0, loc_4EA8
.text:0000000000004EA0                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000004EA4                 LDR             W23, [SP,#0x2130+var_20EC]
.text:0000000000004EA8 loc_4EA8                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+25C↑j
.text:0000000000004EA8                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+264↑j
.text:0000000000004EA8                 MOV             W8, #1
.text:0000000000004EAC                 STR             X24, [SP,#0x2130+var_20B0]
.text:0000000000004EB0                 MOV             X0, X24 ; dest
.text:0000000000004EB4                 STR             W22, [SP,#0x2130+var_20A8]
.text:0000000000004EB8                 MOV             X1, X21 ; src
.text:0000000000004EBC                 MOV             X2, X23 ; n
.text:0000000000004EC0                 STRB            W8, [SP,#0x2130+var_20A4]
.text:0000000000004EC4                 BL              .memcpy
.text:0000000000004EC8                 LDR             X21, [SP,#0x2130+var_2108]
.text:0000000000004ECC                 STR             XZR, [SP,#0x2130+var_2070]
.text:0000000000004ED0 ;   try {
.text:0000000000004ED0                 MOV             W0, #0x40 ; '@' ; unsigned __int64
.text:0000000000004ED4                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000004ED4 ;   } // starts at 4ED0
.text:0000000000004ED8                 ADRP            X8, #off_B0B0@PAGE
.text:0000000000004EDC                 STR             X0, [SP,#0x2130+var_2070]
.text:0000000000004EE0                 ADD             X8, X8, #off_B0B0@PAGEOFF
.text:0000000000004EE4                 ADD             X9, SP, #0x2130+var_20F8
.text:0000000000004EE8                 ADD             X10, SP, #0x2130+var_20FC
.text:0000000000004EEC                 ADD             X11, SP, #0x2130+var_20E8
.text:0000000000004EF0                 STP             X8, X9, [X0]
.text:0000000000004EF4                 ADD             X8, SP, #0x2130+s
.text:0000000000004EF8                 ADD             X9, SP, #0x2130+var_20F0
.text:0000000000004EFC                 STP             X10, X11, [X0,#0x10]
.text:0000000000004F00                 ADD             X10, SP, #0x2130+var_20F4
.text:0000000000004F04                 ADD             X11, SP, #0x2130+var_20EC
.text:0000000000004F08                 STP             X8, X9, [X0,#0x20]
.text:0000000000004F0C                 TST             W19, #0xFF
.text:0000000000004F10                 CSET            W4, NE
.text:0000000000004F14                 STP             X10, X11, [X0,#0x30]
.text:0000000000004F18                 LDR             X8, [X21]
.text:0000000000004F1C                 LDR             X9, [X8,#0x88]
.text:0000000000004F20 ;   try {
.text:0000000000004F20                 ADD             X8, SP, #0x2130+var_20D8
.text:0000000000004F24                 ADD             X2, SP, #0x2130+var_20A0
.text:0000000000004F28                 ADD             X3, SP, #0x2130+var_20B0
.text:0000000000004F2C                 ADD             X5, SP, #0x2130+var_2090
.text:0000000000004F30                 MOV             X0, X21
.text:0000000000004F34                 MOV             W1, W20
.text:0000000000004F38                 ADD             X20, SP, #0x2130+var_2090
.text:0000000000004F3C                 BLR             X9
.text:0000000000004F3C ;   } // starts at 4F20
.text:0000000000004F40                 ADD             X0, SP, #0x2130+var_20D8 ; this
.text:0000000000004F44                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:0000000000004F48                 LDR             X0, [SP,#0x2130+var_2070]
.text:0000000000004F4C                 CMP             X20, X0
.text:0000000000004F50                 B.EQ            loc_4FBC
.text:0000000000004F54                 CBZ             X0, loc_4F7C
.text:0000000000004F58                 LDR             X8, [X0]
.text:0000000000004F5C                 LDR             X8, [X8,#0x28]
.text:0000000000004F60                 B               loc_4FC4
.text:0000000000004F64 ; ---------------------------------------------------------------------------
.text:0000000000004F64 loc_4F64                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar):loc_4D4C↑j
.text:0000000000004F64 ;   try {
.text:0000000000004F64                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004F68                 ADRP            X2, #aCannotGetIcccS@PAGE ; "Cannot get iccc Service\n"
.text:0000000000004F6C                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004F70                 ADD             X2, X2, #aCannotGetIcccS@PAGEOFF ; "Cannot get iccc Service\n"
.text:0000000000004F74                 MOV             W0, #6
.text:0000000000004F78                 BL              .__android_log_print
.text:0000000000004F7C loc_4F7C                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+31C↑j
.text:0000000000004F7C                 LDR             X8, [SP,#0x2130+var_2108]
.text:0000000000004F80                 CBNZ            X8, loc_4FD0
.text:0000000000004F84                 B               loc_4FE4
.text:0000000000004F88 ; ---------------------------------------------------------------------------
.text:0000000000004F88 loc_4F88                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+138↑j
.text:0000000000004F88                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+140↑j
.text:0000000000004F88                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000004F8C                 ADRP            X2, #aErrorNonceLenD@PAGE ; "Error nonce_len: %d, key_len: %d\n"
.text:0000000000004F90                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000004F94                 ADD             X2, X2, #aErrorNonceLenD@PAGEOFF ; "Error nonce_len: %d, key_len: %d\n"
.text:0000000000004F98                 MOV             W0, #6
.text:0000000000004F9C                 MOV             W3, W24
.text:0000000000004FA0                 MOV             W4, W22
.text:0000000000004FA4                 BL              .__android_log_print
.text:0000000000004FA4 ;   } // starts at 4F64
.text:0000000000004FA8                 MOV             W8, #4
.text:0000000000004FAC                 STR             W8, [SP,#0x2130+var_20DC]
.text:0000000000004FB0                 LDR             X8, [SP,#0x2130+var_2108]
.text:0000000000004FB4                 CBNZ            X8, loc_4FD0
.text:0000000000004FB8                 B               loc_4FE4
.text:0000000000004FBC ; ---------------------------------------------------------------------------
.text:0000000000004FBC loc_4FBC                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+318↑j
.text:0000000000004FBC                 LDR             X8, [X0]
.text:0000000000004FC0                 LDR             X8, [X8,#0x20]
.text:0000000000004FC4 loc_4FC4                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+328↑j
.text:0000000000004FC4                 BLR             X8
.text:0000000000004FC8                 LDR             X8, [SP,#0x2130+var_2108]
.text:0000000000004FCC                 CBZ             X8, loc_4FE4
.text:0000000000004FD0 loc_4FD0                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+348↑j
.text:0000000000004FD0                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+37C↑j
.text:0000000000004FD0                 LDR             X9, [X8]
.text:0000000000004FD4                 LDUR            X9, [X9,#-0x18]
.text:0000000000004FD8                 ADD             X0, X8, X9 ; this
.text:0000000000004FDC ;   try {
.text:0000000000004FDC                 ADD             X1, SP, #0x2130+var_2108 ; void *
.text:0000000000004FE0                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000004FE0 ;   } // starts at 4FDC
.text:0000000000004FE4 loc_4FE4                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+34C↑j
.text:0000000000004FE4                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+380↑j ...
.text:0000000000004FE4                 LDRB            W8, [SP,#0x2130+var_20A4]
.text:0000000000004FE8                 CBZ             W8, loc_4FF8
.text:0000000000004FEC                 LDR             X0, [SP,#0x2130+var_20B0] ; void *
.text:0000000000004FF0                 CBZ             X0, loc_4FF8
.text:0000000000004FF4                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000004FF8 loc_4FF8                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+3B0↑j
.text:0000000000004FF8                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+3B8↑j
.text:0000000000004FF8                 LDRB            W8, [SP,#0x2130+var_2094]
.text:0000000000004FFC                 CBZ             W8, loc_500C
.text:0000000000005000                 LDR             X0, [SP,#0x2130+var_20A0] ; void *
.text:0000000000005004                 CBZ             X0, loc_500C
.text:0000000000005008                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000500C loc_500C                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+3C4↑j
.text:000000000000500C                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+3CC↑j
.text:000000000000500C                 LDP             X0, X1, [SP,#0x2130+var_20E8]
.text:0000000000005010                 LDR             X8, [X25,#0x28]
.text:0000000000005014                 LDUR            X9, [X29,#var_58]
.text:0000000000005018                 CMP             X8, X9
.text:000000000000501C                 B.NE            loc_50AC
.text:0000000000005020                 ADD             SP, SP, #2,LSL#12
.text:0000000000005024                 ADD             SP, SP, #0xE0
.text:0000000000005028                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000502C                 LDP             X20, X19, [SP,#0x50+var_10]
.text:0000000000005030                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000005034                 LDP             X24, X23, [SP,#0x50+var_30]
.text:0000000000005038                 LDP             X26, X25, [SP,#0x50+var_40]
.text:000000000000503C                 LDR             X28, [SP+0x50+var_50],#0x60
.text:0000000000005040                 RET
.text:0000000000005044 ; ---------------------------------------------------------------------------
.text:0000000000005044 loc_5044                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+188↑j
.text:0000000000005044                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+194↑j
.text:0000000000005044                 AND             X10, X9, #0x60
.text:0000000000005048                 ADD             X11, X8, #0x10
.text:000000000000504C                 ADD             X12, X24, #0x10
.text:0000000000005050                 MOV             X13, X10
.text:0000000000005054 loc_5054                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+430↓j
.text:0000000000005054                 LDP             Q0, Q1, [X11,#-0x10]
.text:0000000000005058                 ADD             X11, X11, #0x20 ; ' '
.text:000000000000505C                 SUBS            X13, X13, #0x20 ; ' '
.text:0000000000005060                 STP             Q0, Q1, [X12,#-0x10]
.text:0000000000005064                 ADD             X12, X12, #0x20 ; ' '
.text:0000000000005068                 B.NE            loc_5054
.text:000000000000506C                 CMP             X10, X9
.text:0000000000005070                 B.NE            loc_4DD4
.text:0000000000005074                 B               loc_4DE8
.text:0000000000005078 ; ---------------------------------------------------------------------------
.text:0000000000005078 loc_5078                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+230↑j
.text:0000000000005078                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+23C↑j
.text:0000000000005078                 AND             X10, X9, #0xFFFFFFE0
.text:000000000000507C                 ADD             X11, X8, #0x10
.text:0000000000005080                 ADD             X12, X24, #0x10
.text:0000000000005084                 MOV             X13, X10
.text:0000000000005088 loc_5088                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+464↓j
.text:0000000000005088                 LDP             Q0, Q1, [X11,#-0x10]
.text:000000000000508C                 ADD             X11, X11, #0x20 ; ' '
.text:0000000000005090                 SUBS            X13, X13, #0x20 ; ' '
.text:0000000000005094                 STP             Q0, Q1, [X12,#-0x10]
.text:0000000000005098                 ADD             X12, X12, #0x20 ; ' '
.text:000000000000509C                 B.NE            loc_5088
.text:00000000000050A0                 CMP             X10, X9
.text:00000000000050A4                 B.NE            loc_4E7C
.text:00000000000050A8                 B               loc_4E90
.text:00000000000050AC ; ---------------------------------------------------------------------------
.text:00000000000050AC loc_50AC                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+3E4↑j
.text:00000000000050AC                 BL              .__stack_chk_fail
.text:00000000000050B0 ; ---------------------------------------------------------------------------
.text:00000000000050B0 ;   cleanup() // owned by 4F20
.text:00000000000050B0                 LDR             X8, [SP,#0x2130+var_2070]
.text:00000000000050B4                 MOV             X19, X0
.text:00000000000050B8                 CMP             X20, X8
.text:00000000000050BC                 B.NE            loc_50CC
.text:00000000000050C0                 LDR             X9, [X8]
.text:00000000000050C4                 LDR             X9, [X9,#0x20]
.text:00000000000050C8                 B               loc_50D8
.text:00000000000050CC ; ---------------------------------------------------------------------------
.text:00000000000050CC loc_50CC                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+484↑j
.text:00000000000050CC                 CBZ             X8, loc_5118
.text:00000000000050D0                 LDR             X9, [X8]
.text:00000000000050D4                 LDR             X9, [X9,#0x28]
.text:00000000000050D8 loc_50D8                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+490↑j
.text:00000000000050D8                 MOV             X0, X8
.text:00000000000050DC                 BLR             X9
.text:00000000000050E0                 LDR             X8, [SP,#0x2130+var_2108]
.text:00000000000050E4                 CBNZ            X8, loc_5120
.text:00000000000050E8                 B               loc_5134
.text:00000000000050EC ; ---------------------------------------------------------------------------
.text:00000000000050EC ;   catch(...) // owned by 4FDC
.text:00000000000050EC                 BL              sub_58B0
.text:00000000000050F0 ; ---------------------------------------------------------------------------
.text:00000000000050F0 ;   cleanup() // owned by 4CF4
.text:00000000000050F0                 LDRB            W8, [SP,#0x2130+var_2128]
.text:00000000000050F4                 MOV             X19, X0
.text:00000000000050F8                 TBZ             W8, #0, loc_5118
.text:00000000000050FC                 LDR             X0, [SP,#0x2130+var_2118] ; void *
.text:0000000000005100                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000005104                 LDR             X8, [SP,#0x2130+var_2108]
.text:0000000000005108                 CBNZ            X8, loc_5120
.text:000000000000510C                 B               loc_5134
.text:0000000000005110 ; ---------------------------------------------------------------------------
.text:0000000000005110 ;   catch(...) // owned by 4D18
.text:0000000000005110                 BL              sub_58B0
.text:0000000000005114 ; ---------------------------------------------------------------------------
.text:0000000000005114 ;   cleanup() // owned by 4D50
.text:0000000000005114 ;   cleanup() // owned by 4ED0
.text:0000000000005114 ;   cleanup() // owned by 4F64
.text:0000000000005114                 MOV             X19, X0
.text:0000000000005118 loc_5118                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar):loc_50CC↑j
.text:0000000000005118                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+4C0↑j
.text:0000000000005118                 LDR             X8, [SP,#0x2130+var_2108]
.text:000000000000511C                 CBZ             X8, loc_5134
.text:0000000000005120 loc_5120                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+4AC↑j
.text:0000000000005120                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+4D0↑j
.text:0000000000005120                 LDR             X9, [X8]
.text:0000000000005124                 LDUR            X9, [X9,#-0x18]
.text:0000000000005128                 ADD             X0, X8, X9 ; this
.text:000000000000512C ;   try {
.text:000000000000512C                 ADD             X1, SP, #0x2130+var_2108 ; void *
.text:0000000000005130                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000005130 ;   } // starts at 512C
.text:0000000000005134 loc_5134                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+4B0↑j
.text:0000000000005134                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+4D4↑j ...
.text:0000000000005134                 LDRB            W8, [SP,#0x2130+var_20A4]
.text:0000000000005138                 CBZ             W8, loc_5148
.text:000000000000513C                 LDR             X0, [SP,#0x2130+var_20B0] ; void *
.text:0000000000005140                 CBZ             X0, loc_5148
.text:0000000000005144                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000005148 loc_5148                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+500↑j
.text:0000000000005148                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+508↑j
.text:0000000000005148                 LDRB            W8, [SP,#0x2130+var_2094]
.text:000000000000514C                 CBZ             W8, loc_515C
.text:0000000000005150                 LDR             X0, [SP,#0x2130+var_20A0] ; void *
.text:0000000000005154                 CBZ             X0, loc_515C
.text:0000000000005158                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000515C loc_515C                                ; CODE XREF: TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+514↑j
.text:000000000000515C                                         ; TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)+51C↑j
.text:000000000000515C                 MOV             X0, X19
.text:0000000000005160                 BL              sub_78A0
.text:0000000000005164 ;   catch(...) // owned by 512C
.text:0000000000005164                 BL              sub_58B0
.text:0000000000005164 ; } // starts at 4C38
.text:0000000000005164 ; End of function TZ_ICCC_device_status(uint,uchar *,uint,uchar *,uint,uchar)
.text:0000000000005168 ; =============== S U B R O U T I N E =======================================
.text:0000000000005168 ; Attributes: bp-based frame
.text:0000000000005168 ; __int64 TZ_ICCC_init_measurements(void)
.text:0000000000005168                 EXPORT _Z25TZ_ICCC_init_measurementsv
.text:0000000000005168 _Z25TZ_ICCC_init_measurementsv          ; DATA XREF: LOAD:0000000000000798↑o
.text:0000000000005168 var_568         = -0x568
.text:0000000000005168 var_560         = -0x560
.text:0000000000005168 var_558         = -0x558
.text:0000000000005168 var_550         = -0x550
.text:0000000000005168 var_548         = -0x548
.text:0000000000005168 var_534         = -0x534
.text:0000000000005168 var_530         = -0x530
.text:0000000000005168 var_528         = -0x528
.text:0000000000005168 var_520         = -0x520
.text:0000000000005168 var_518         = -0x518
.text:0000000000005168 var_510         = -0x510
.text:0000000000005168 var_4E8         = -0x4E8
.text:0000000000005168 var_4C0         = -0x4C0
.text:0000000000005168 var_498         = -0x498
.text:0000000000005168 var_488         = -0x488
.text:0000000000005168 var_470         = -0x470
.text:0000000000005168 var_450         = -0x450
.text:0000000000005168 src             = -0x438
.text:0000000000005168 var_431         = -0x431
.text:0000000000005168 var_430         = -0x430
.text:0000000000005168 var_428         = -0x428
.text:0000000000005168 var_30          = -0x30
.text:0000000000005168 var_20          = -0x20
.text:0000000000005168 var_10          = -0x10
.text:0000000000005168 var_s0          =  0
.text:0000000000005168 ; __unwind { // __gxx_personality_v0
.text:0000000000005168                 STR             X28, [SP,#-0x10+var_30]!
.text:000000000000516C                 STP             X22, X21, [SP,#0x30+var_20]
.text:0000000000005170                 STP             X20, X19, [SP,#0x30+var_10]
.text:0000000000005174                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000005178                 ADD             X29, SP, #0x30
.text:000000000000517C                 SUB             SP, SP, #0x540
.text:0000000000005180                 MRS             X22, #3, c13, c0, #2
.text:0000000000005184                 MOV             W11, #0x7361
.text:0000000000005188                 LDR             X8, [X22,#0x28]
.text:000000000000518C                 ADD             X9, SP, #0x570+src
.text:0000000000005190                 MOV             W10, #0xC
.text:0000000000005194                 MOVK            W11, #0x6D68,LSL#16
.text:0000000000005198                 STR             X8, [SP,#0x570+var_568]
.text:000000000000519C                 MOV             W8, #0x6D65
.text:00000000000051A0                 STP             XZR, XZR, [SP,#0x570+var_430]
.text:00000000000051A4                 STRB            W10, [SP,#0x570+src]
.text:00000000000051A8                 STURH           W8, [X9,#5]
.text:00000000000051AC                 STUR            W11, [X9,#1]
.text:00000000000051B0                 STRB            WZR, [SP,#0x570+var_431]
.text:00000000000051B4 ;   try {
.text:00000000000051B4                 ADD             X8, SP, #0x570+var_518
.text:00000000000051B8                 ADD             X0, SP, #0x570+src
.text:00000000000051BC                 MOV             W1, WZR
.text:00000000000051C0                 BL              ._ZN7android4hidl9allocator4V1_010IAllocator10getServiceERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEb ; android::hidl::allocator::V1_0::IAllocator::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:00000000000051C0 ;   } // starts at 51B4
.text:00000000000051C4                 LDRB            W8, [SP,#0x570+src]
.text:00000000000051C8                 TBZ             W8, #0, loc_51D4
.text:00000000000051CC                 LDR             X0, [SP,#0x570+var_428] ; void *
.text:00000000000051D0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000051D4 loc_51D4                                ; CODE XREF: TZ_ICCC_init_measurements(void)+60↑j
.text:00000000000051D4 ;   try {
.text:00000000000051D4                 ADD             X0, SP, #0x570+var_498
.text:00000000000051D8                 MOV             X1, XZR
.text:00000000000051DC                 ADD             X19, SP, #0x570+var_498
.text:00000000000051E0                 BL              ._ZN7android8hardware11hidl_handleC1EPK13native_handle ; android::hardware::hidl_handle::hidl_handle(native_handle const*)
.text:00000000000051E0 ;   } // starts at 51D4
.text:00000000000051E4                 ADD             X19, X19, #0x18
.text:00000000000051E8                 STR             XZR, [SP,#0x570+var_488]
.text:00000000000051EC ;   try {
.text:00000000000051EC                 ADRP            X1, #unk_1A44@PAGE
.text:00000000000051F0                 ADD             X1, X1, #unk_1A44@PAGEOFF ; char *
.text:00000000000051F4                 MOV             X0, X19 ; this
.text:00000000000051F8                 BL              ._ZN7android8hardware11hidl_stringC1EPKc ; android::hardware::hidl_string::hidl_string(char const*)
.text:00000000000051F8 ;   } // starts at 51EC
.text:00000000000051FC                 STR             XZR, [SP,#0x570+var_520]
.text:0000000000005200 ;   try {
.text:0000000000005200                 ADRP            X0, #aSystemTimaMeas@PAGE ; "/system/tima_measurement_info"
.text:0000000000005204                 ADD             X0, X0, #aSystemTimaMeas@PAGEOFF ; "/system/tima_measurement_info"
.text:0000000000005208                 MOV             W1, WZR
.text:000000000000520C                 BL              .__open_2
.text:0000000000005210                 MOV             W21, W0
.text:0000000000005214                 TBNZ            W0, #0x1F, loc_527C
.text:0000000000005218                 MOV             W0, W21 ; fd
.text:000000000000521C                 MOV             X1, XZR ; offset
.text:0000000000005220                 MOV             W2, #2  ; whence
.text:0000000000005224                 BL              .lseek
.text:0000000000005228                 MOV             W0, W21 ; fd
.text:000000000000522C                 MOV             X1, XZR ; offset
.text:0000000000005230                 MOV             W2, #1  ; whence
.text:0000000000005234                 BL              .lseek
.text:0000000000005238                 MOV             X20, X0
.text:000000000000523C                 MOV             W0, W21 ; fd
.text:0000000000005240                 MOV             X1, XZR ; offset
.text:0000000000005244                 MOV             W2, WZR ; whence
.text:0000000000005248                 BL              .lseek
.text:000000000000524C                 CMP             X20, #0x401
.text:0000000000005250                 B.LT            loc_5298
.text:0000000000005254                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005258                 ADRP            X2, #aTimaMeasuremen@PAGE ; "tima_measurement_info too big for INIT "...
.text:000000000000525C                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000005260                 ADD             X2, X2, #aTimaMeasuremen@PAGEOFF ; "tima_measurement_info too big for INIT "...
.text:0000000000005264                 MOV             W0, #6
.text:0000000000005268                 MOV             X3, X20
.text:000000000000526C                 BL              .__android_log_print
.text:0000000000005270                 MOV             W0, W21 ; fd
.text:0000000000005274                 BL              .close
.text:0000000000005278                 B               loc_5360
.text:000000000000527C ; ---------------------------------------------------------------------------
.text:000000000000527C loc_527C                                ; CODE XREF: TZ_ICCC_init_measurements(void)+AC↑j
.text:000000000000527C                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005280                 ADRP            X2, #aMeasurementInf@PAGE ; "Measurement info File is Missing"
.text:0000000000005284                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000005288                 ADD             X2, X2, #aMeasurementInf@PAGEOFF ; "Measurement info File is Missing"
.text:000000000000528C                 MOV             W0, #6
.text:0000000000005290                 BL              .__android_log_print
.text:0000000000005294                 B               loc_5360
.text:0000000000005298 ; ---------------------------------------------------------------------------
.text:0000000000005298 loc_5298                                ; CODE XREF: TZ_ICCC_init_measurements(void)+E8↑j
.text:0000000000005298                 TBNZ            X20, #0x3F, loc_5318 ; '?'
.text:000000000000529C                 ADD             X1, SP, #0x570+src
.text:00000000000052A0                 MOV             W0, W21
.text:00000000000052A4                 MOV             X2, X20
.text:00000000000052A8                 MOV             W3, #0x400
.text:00000000000052AC                 BL              .__read_chk
.text:00000000000052B0                 CMP             X0, X20
.text:00000000000052B4                 B.NE            loc_5340
.text:00000000000052B8                 MOV             W0, W21 ; fd
.text:00000000000052BC                 BL              .close
.text:00000000000052BC ;   } // starts at 5200
.text:00000000000052C0                 ADRP            X8, #off_B0F8@PAGE
.text:00000000000052C4                 LDR             X0, [SP,#0x570+var_518]
.text:00000000000052C8                 ADD             X8, X8, #off_B0F8@PAGEOFF
.text:00000000000052CC                 ADD             X21, SP, #0x570+var_470
.text:00000000000052D0                 ADD             X9, SP, #0x570+var_498
.text:00000000000052D4                 STR             X21, [SP,#0x570+var_450]
.text:00000000000052D8                 STP             X8, X9, [SP,#0x570+var_470]
.text:00000000000052DC                 LDR             X8, [X0]
.text:00000000000052E0                 LDR             X9, [X8,#0x68]
.text:00000000000052E4 ;   try {
.text:00000000000052E4                 ADD             X8, SP, #0x570+var_4C0
.text:00000000000052E8                 ADD             X2, SP, #0x570+var_470
.text:00000000000052EC                 MOV             W1, #0x400
.text:00000000000052F0                 BLR             X9
.text:00000000000052F0 ;   } // starts at 52E4
.text:00000000000052F4                 ADD             X0, SP, #0x570+var_4C0 ; this
.text:00000000000052F8                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:00000000000052FC                 LDR             X0, [SP,#0x570+var_450]
.text:0000000000005300                 CMP             X21, X0
.text:0000000000005304                 B.EQ            loc_53D8
.text:0000000000005308                 CBZ             X0, loc_53E4
.text:000000000000530C                 LDR             X8, [X0]
.text:0000000000005310                 LDR             X8, [X8,#0x28]
.text:0000000000005314                 B               loc_53E0
.text:0000000000005318 ; ---------------------------------------------------------------------------
.text:0000000000005318 loc_5318                                ; CODE XREF: TZ_ICCC_init_measurements(void):loc_5298↑j
.text:0000000000005318 ;   try {
.text:0000000000005318                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:000000000000531C                 ADRP            X2, #aTimaMeasuremen_0@PAGE ; "tima_measurement_info can not seek to e"...
.text:0000000000005320                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000005324                 ADD             X2, X2, #aTimaMeasuremen_0@PAGEOFF ; "tima_measurement_info can not seek to e"...
.text:0000000000005328                 MOV             W0, #6
.text:000000000000532C                 MOV             X3, X20
.text:0000000000005330                 BL              .__android_log_print
.text:0000000000005334                 MOV             W0, W21 ; fd
.text:0000000000005338                 BL              .close
.text:000000000000533C                 B               loc_5360
.text:0000000000005340 ; ---------------------------------------------------------------------------
.text:0000000000005340 loc_5340                                ; CODE XREF: TZ_ICCC_init_measurements(void)+14C↑j
.text:0000000000005340                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005344                 ADRP            X2, #aInitPopulateCa@PAGE ; "Init Populate: Cannot read file into me"...
.text:0000000000005348                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:000000000000534C                 ADD             X2, X2, #aInitPopulateCa@PAGEOFF ; "Init Populate: Cannot read file into me"...
.text:0000000000005350                 MOV             W0, #6
.text:0000000000005354                 BL              .__android_log_print
.text:0000000000005358                 MOV             W0, W21 ; fd
.text:000000000000535C                 BL              .close
.text:000000000000535C ;   } // starts at 5318
.text:0000000000005360 loc_5360                                ; CODE XREF: TZ_ICCC_init_measurements(void)+110↑j
.text:0000000000005360                                         ; TZ_ICCC_init_measurements(void)+12C↑j ...
.text:0000000000005360                 MOV             W20, #0xFFFFFFFF
.text:0000000000005364 loc_5364                                ; CODE XREF: TZ_ICCC_init_measurements(void)+3D4↓j
.text:0000000000005364                                         ; TZ_ICCC_init_measurements(void)+3F8↓j ...
.text:0000000000005364                 LDR             X8, [SP,#0x570+var_520]
.text:0000000000005368                 CBZ             X8, loc_5380
.text:000000000000536C                 LDR             X9, [X8]
.text:0000000000005370                 LDUR            X9, [X9,#-0x18]
.text:0000000000005374                 ADD             X0, X8, X9 ; this
.text:0000000000005378 ;   try {
.text:0000000000005378                 ADD             X1, SP, #0x570+var_520 ; void *
.text:000000000000537C                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:000000000000537C ;   } // starts at 5378
.text:0000000000005380 loc_5380                                ; CODE XREF: TZ_ICCC_init_measurements(void)+200↑j
.text:0000000000005380                 MOV             X0, X19 ; this
.text:0000000000005384                 BL              ._ZN7android8hardware11hidl_stringD1Ev ; android::hardware::hidl_string::~hidl_string()
.text:0000000000005388                 ADD             X0, SP, #0x570+var_498 ; this
.text:000000000000538C                 BL              ._ZN7android8hardware11hidl_handleD1Ev ; android::hardware::hidl_handle::~hidl_handle()
.text:0000000000005390                 LDR             X8, [SP,#0x570+var_518]
.text:0000000000005394                 CBZ             X8, loc_53AC
.text:0000000000005398                 LDR             X9, [X8]
.text:000000000000539C                 LDUR            X9, [X9,#-0x18]
.text:00000000000053A0                 ADD             X0, X8, X9 ; this
.text:00000000000053A4 ;   try {
.text:00000000000053A4                 ADD             X1, SP, #0x570+var_518 ; void *
.text:00000000000053A8                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:00000000000053A8 ;   } // starts at 53A4
.text:00000000000053AC loc_53AC                                ; CODE XREF: TZ_ICCC_init_measurements(void)+22C↑j
.text:00000000000053AC                 LDR             X8, [X22,#0x28]
.text:00000000000053B0                 LDR             X9, [SP,#0x570+var_568]
.text:00000000000053B4                 CMP             X8, X9
.text:00000000000053B8                 B.NE            loc_557C
.text:00000000000053BC                 MOV             W0, W20
.text:00000000000053C0                 ADD             SP, SP, #0x540
.text:00000000000053C4                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000053C8                 LDP             X20, X19, [SP,#0x30+var_10]
.text:00000000000053CC                 LDP             X22, X21, [SP,#0x30+var_20]
.text:00000000000053D0                 LDR             X28, [SP+0x30+var_30],#0x40
.text:00000000000053D4                 RET
.text:00000000000053D8 ; ---------------------------------------------------------------------------
.text:00000000000053D8 loc_53D8                                ; CODE XREF: TZ_ICCC_init_measurements(void)+19C↑j
.text:00000000000053D8                 LDR             X8, [X0]
.text:00000000000053DC                 LDR             X8, [X8,#0x20]
.text:00000000000053E0 loc_53E0                                ; CODE XREF: TZ_ICCC_init_measurements(void)+1AC↑j
.text:00000000000053E0                 BLR             X8
.text:00000000000053E4 loc_53E4                                ; CODE XREF: TZ_ICCC_init_measurements(void)+1A0↑j
.text:00000000000053E4 ;   try {
.text:00000000000053E4                 ADD             X8, SP, #0x570+var_528
.text:00000000000053E8                 ADD             X0, SP, #0x570+var_498
.text:00000000000053EC                 BL              ._ZN7android8hardware9mapMemoryERKNS0_11hidl_memoryE ; android::hardware::mapMemory(android::hardware::hidl_memory const&)
.text:00000000000053EC ;   } // starts at 53E4
.text:00000000000053F0                 LDR             X0, [SP,#0x570+var_528]
.text:00000000000053F4                 LDR             X8, [X0]
.text:00000000000053F8                 LDR             X9, [X8,#0x90]
.text:00000000000053FC ;   try {
.text:00000000000053FC                 ADD             X8, SP, #0x570+var_558
.text:0000000000005400                 BLR             X9
.text:0000000000005400 ;   } // starts at 53FC
.text:0000000000005404 ;   try {
.text:0000000000005404                 ADD             X0, SP, #0x570+var_558 ; this
.text:0000000000005408                 BL              ._ZNK7android8hardware7details13return_status8assertOkEv ; android::hardware::details::return_status::assertOk(void)
.text:0000000000005408 ;   } // starts at 5404
.text:000000000000540C                 LDR             X21, [SP,#0x570+var_530]
.text:0000000000005410                 ADD             X0, SP, #0x570+var_558 ; this
.text:0000000000005414                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:0000000000005418                 LDR             X0, [SP,#0x570+var_528]
.text:000000000000541C                 LDR             X8, [X0]
.text:0000000000005420                 LDR             X9, [X8,#0x68]
.text:0000000000005424 ;   try {
.text:0000000000005424                 ADD             X8, SP, #0x570+var_4E8
.text:0000000000005428                 BLR             X9
.text:0000000000005428 ;   } // starts at 5424
.text:000000000000542C                 ADD             X0, SP, #0x570+var_4E8 ; this
.text:0000000000005430                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:0000000000005434                 ADD             X1, SP, #0x570+src ; src
.text:0000000000005438                 MOV             X0, X21 ; dest
.text:000000000000543C                 MOV             W2, #0x400 ; n
.text:0000000000005440                 BL              .memcpy
.text:0000000000005444                 LDR             X0, [SP,#0x570+var_528]
.text:0000000000005448                 LDR             X8, [X0]
.text:000000000000544C                 LDR             X9, [X8,#0x88]
.text:0000000000005450 ;   try {
.text:0000000000005450                 ADD             X8, SP, #0x570+var_510
.text:0000000000005454                 BLR             X9
.text:0000000000005454 ;   } // starts at 5450
.text:0000000000005458                 ADD             X0, SP, #0x570+var_510 ; this
.text:000000000000545C                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:0000000000005460                 MOV             W9, #0x7561
.text:0000000000005464                 STP             XZR, XZR, [SP,#0x570+var_558]
.text:0000000000005468                 MOV             W10, #0x6564
.text:000000000000546C                 STR             XZR, [SP,#0x570+var_548]
.text:0000000000005470                 MOV             W8, #0xE
.text:0000000000005474                 STRB            WZR, [SP,#0x570+var_550]
.text:0000000000005478                 MOVK            W9, #0x746C,LSL#16
.text:000000000000547C                 MOVK            W10, #0x6166,LSL#16
.text:0000000000005480                 STRB            W8, [SP,#0x570+var_558]
.text:0000000000005484                 STR             W9, [SP,#0x570+var_558+4]
.text:0000000000005488                 STUR            W10, [SP,#0x570+var_558+1]
.text:000000000000548C ;   try {
.text:000000000000548C                 ADD             X8, SP, #0x570+var_560
.text:0000000000005490                 ADD             X0, SP, #0x570+var_558
.text:0000000000005494                 MOV             W1, WZR
.text:0000000000005498                 BL              ._ZN6vendor7samsung8hardware3tlc4iccc4V1_08ISehIccc10getServiceERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb ; vendor::samsung::hardware::tlc::iccc::V1_0::ISehIccc::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:0000000000005498 ;   } // starts at 548C
.text:000000000000549C                 LDR             X21, [SP,#0x570+var_520]
.text:00000000000054A0                 CBZ             X21, loc_54B8
.text:00000000000054A4                 LDR             X8, [X21]
.text:00000000000054A8                 LDUR            X8, [X8,#-0x18]
.text:00000000000054AC                 ADD             X0, X21, X8 ; this
.text:00000000000054B0 ;   try {
.text:00000000000054B0                 ADD             X1, SP, #0x570+var_520 ; void *
.text:00000000000054B4                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:00000000000054B8 loc_54B8                                ; CODE XREF: TZ_ICCC_init_measurements(void)+338↑j
.text:00000000000054B8                 LDR             X8, [SP,#0x570+var_520]
.text:00000000000054BC                 CMP             X21, X8
.text:00000000000054C0                 B.EQ            loc_54C8
.text:00000000000054C4                 BL              ._ZN7android14sp_report_raceEv ; android::sp_report_race(void)
.text:00000000000054C4 ;   } // starts at 54B0
.text:00000000000054C8 loc_54C8                                ; CODE XREF: TZ_ICCC_init_measurements(void)+358↑j
.text:00000000000054C8                 LDR             X8, [SP,#0x570+var_560]
.text:00000000000054CC                 LDRB            W9, [SP,#0x570+var_558]
.text:00000000000054D0                 STR             XZR, [SP,#0x570+var_560]
.text:00000000000054D4                 STR             X8, [SP,#0x570+var_520]
.text:00000000000054D8                 TBZ             W9, #0, loc_54E8
.text:00000000000054DC                 LDR             X0, [SP,#0x570+var_548] ; void *
.text:00000000000054E0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000054E4                 LDR             X8, [SP,#0x570+var_520]
.text:00000000000054E8 loc_54E8                                ; CODE XREF: TZ_ICCC_init_measurements(void)+370↑j
.text:00000000000054E8                 CBZ             X8, loc_5540
.text:00000000000054EC ;   try {
.text:00000000000054EC                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000054F0                 ADRP            X2, #aIcccInitMeasur@PAGE ; "ICCC_init_measurements\n"
.text:00000000000054F4                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000054F8                 ADD             X2, X2, #aIcccInitMeasur@PAGEOFF ; "ICCC_init_measurements\n"
.text:00000000000054FC                 MOV             W0, #6
.text:0000000000005500                 BL              .__android_log_print
.text:0000000000005500 ;   } // starts at 54EC
.text:0000000000005504                 LDR             X0, [SP,#0x570+var_520]
.text:0000000000005508                 LDR             X8, [X0]
.text:000000000000550C                 LDR             X9, [X8,#0x90]
.text:0000000000005510 ;   try {
.text:0000000000005510                 ADD             X8, SP, #0x570+var_558
.text:0000000000005514                 ADD             X1, SP, #0x570+var_498
.text:0000000000005518                 MOV             W2, W20
.text:000000000000551C                 BLR             X9
.text:000000000000551C ;   } // starts at 5510
.text:0000000000005520 ;   try {
.text:0000000000005520                 ADD             X0, SP, #0x570+var_558 ; this
.text:0000000000005524                 BL              ._ZNK7android8hardware7details13return_status8assertOkEv ; android::hardware::details::return_status::assertOk(void)
.text:0000000000005524 ;   } // starts at 5520
.text:0000000000005528                 LDR             W20, [SP,#0x570+var_534]
.text:000000000000552C                 ADD             X0, SP, #0x570+var_558 ; this
.text:0000000000005530                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:0000000000005534                 LDR             X8, [SP,#0x570+var_528]
.text:0000000000005538                 CBNZ            X8, loc_5564
.text:000000000000553C                 B               loc_5364
.text:0000000000005540 ; ---------------------------------------------------------------------------
.text:0000000000005540 loc_5540                                ; CODE XREF: TZ_ICCC_init_measurements(void):loc_54E8↑j
.text:0000000000005540 ;   try {
.text:0000000000005540                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005544                 ADRP            X2, #aCannotGetIcccS_0@PAGE ; "Cannot get iccc Service"
.text:0000000000005548                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:000000000000554C                 ADD             X2, X2, #aCannotGetIcccS_0@PAGEOFF ; "Cannot get iccc Service"
.text:0000000000005550                 MOV             W0, #6
.text:0000000000005554                 BL              .__android_log_print
.text:0000000000005554 ;   } // starts at 5540
.text:0000000000005558                 MOV             W20, #0xFFFFFFFF
.text:000000000000555C                 LDR             X8, [SP,#0x570+var_528]
.text:0000000000005560                 CBZ             X8, loc_5364
.text:0000000000005564 loc_5564                                ; CODE XREF: TZ_ICCC_init_measurements(void)+3D0↑j
.text:0000000000005564                 LDR             X9, [X8]
.text:0000000000005568                 LDUR            X9, [X9,#-0x18]
.text:000000000000556C                 ADD             X0, X8, X9 ; this
.text:0000000000005570 ;   try {
.text:0000000000005570                 ADD             X1, SP, #0x570+var_528 ; void *
.text:0000000000005574                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000005574 ;   } // starts at 5570
.text:0000000000005578                 B               loc_5364
.text:000000000000557C ; ---------------------------------------------------------------------------
.text:000000000000557C loc_557C                                ; CODE XREF: TZ_ICCC_init_measurements(void)+250↑j
.text:000000000000557C                 BL              .__stack_chk_fail
.text:0000000000005580 ; ---------------------------------------------------------------------------
.text:0000000000005580 ;   catch(...) // owned by 5570
.text:0000000000005580                 BL              sub_58B0
.text:0000000000005584 ; ---------------------------------------------------------------------------
.text:0000000000005584 ;   cleanup() // owned by 5520
.text:0000000000005584                 B               loc_55AC
.text:0000000000005588 ; ---------------------------------------------------------------------------
.text:0000000000005588 ;   cleanup() // owned by 5510
.text:0000000000005588                 B               loc_560C
.text:000000000000558C ; ---------------------------------------------------------------------------
.text:000000000000558C ;   cleanup() // owned by 548C
.text:000000000000558C                 LDRB            W8, [SP,#0x570+var_558]
.text:0000000000005590                 MOV             X20, X0
.text:0000000000005594                 TBZ             W8, #0, loc_5610
.text:0000000000005598                 LDR             X0, [SP,#0x570+var_548] ; void *
.text:000000000000559C                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000055A0                 LDR             X8, [SP,#0x570+var_528]
.text:00000000000055A4                 CBNZ            X8, loc_5618
.text:00000000000055A8                 B               loc_5674
.text:00000000000055AC ; ---------------------------------------------------------------------------
.text:00000000000055AC loc_55AC                                ; CODE XREF: TZ_ICCC_init_measurements(void)+41C↑j
.text:00000000000055AC ;   cleanup() // owned by 5404
.text:00000000000055AC                 MOV             X20, X0
.text:00000000000055B0                 ADD             X0, SP, #0x570+var_558 ; this
.text:00000000000055B4                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:00000000000055B8                 LDR             X8, [SP,#0x570+var_528]
.text:00000000000055BC                 CBNZ            X8, loc_5618
.text:00000000000055C0                 B               loc_5674
.text:00000000000055C4 ; ---------------------------------------------------------------------------
.text:00000000000055C4 ;   cleanup() // owned by 53FC
.text:00000000000055C4                 B               loc_560C
.text:00000000000055C8 ; ---------------------------------------------------------------------------
.text:00000000000055C8 ;   cleanup() // owned by 53E4
.text:00000000000055C8                 B               loc_5670
.text:00000000000055CC ; ---------------------------------------------------------------------------
.text:00000000000055CC ;   cleanup() // owned by 52E4
.text:00000000000055CC                 LDR             X8, [SP,#0x570+var_450]
.text:00000000000055D0                 MOV             X20, X0
.text:00000000000055D4                 CMP             X21, X8
.text:00000000000055D8                 B.NE            loc_55E8
.text:00000000000055DC                 LDR             X9, [X8]
.text:00000000000055E0                 LDR             X9, [X9,#0x20]
.text:00000000000055E4                 B               loc_55F4
.text:00000000000055E8 ; ---------------------------------------------------------------------------
.text:00000000000055E8 loc_55E8                                ; CODE XREF: TZ_ICCC_init_measurements(void)+470↑j
.text:00000000000055E8                 CBZ             X8, loc_5674
.text:00000000000055EC                 LDR             X9, [X8]
.text:00000000000055F0                 LDR             X9, [X9,#0x28]
.text:00000000000055F4 loc_55F4                                ; CODE XREF: TZ_ICCC_init_measurements(void)+47C↑j
.text:00000000000055F4                 MOV             X0, X8
.text:00000000000055F8                 BLR             X9
.text:00000000000055FC                 LDR             X8, [SP,#0x570+var_520]
.text:0000000000005600                 CBNZ            X8, loc_567C
.text:0000000000005604                 B               loc_5690
.text:0000000000005608 ; ---------------------------------------------------------------------------
.text:0000000000005608 ;   catch(...) // owned by 54B0
.text:0000000000005608                 BL              sub_58B0
.text:000000000000560C ; ---------------------------------------------------------------------------
.text:000000000000560C loc_560C                                ; CODE XREF: TZ_ICCC_init_measurements(void)+420↑j
.text:000000000000560C                                         ; TZ_ICCC_init_measurements(void)+45C↑j
.text:000000000000560C ;   cleanup() // owned by 5424
.text:000000000000560C ;   cleanup() // owned by 5450
.text:000000000000560C ;   cleanup() // owned by 54EC
.text:000000000000560C ;   cleanup() // owned by 5540
.text:000000000000560C                 MOV             X20, X0
.text:0000000000005610 loc_5610                                ; CODE XREF: TZ_ICCC_init_measurements(void)+42C↑j
.text:0000000000005610                 LDR             X8, [SP,#0x570+var_528]
.text:0000000000005614                 CBZ             X8, loc_5674
.text:0000000000005618 loc_5618                                ; CODE XREF: TZ_ICCC_init_measurements(void)+43C↑j
.text:0000000000005618                                         ; TZ_ICCC_init_measurements(void)+454↑j
.text:0000000000005618                 LDR             X9, [X8]
.text:000000000000561C                 LDUR            X9, [X9,#-0x18]
.text:0000000000005620                 ADD             X0, X8, X9 ; this
.text:0000000000005624 ;   try {
.text:0000000000005624                 ADD             X1, SP, #0x570+var_528 ; void *
.text:0000000000005628                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000005628 ;   } // starts at 5624
.text:000000000000562C                 B               loc_5674
.text:0000000000005630 ; ---------------------------------------------------------------------------
.text:0000000000005630 ;   catch(...) // owned by 5624
.text:0000000000005630                 BL              sub_58B0
.text:0000000000005634 ; ---------------------------------------------------------------------------
.text:0000000000005634 ;   catch(...) // owned by 53A4
.text:0000000000005634                 BL              sub_58B0
.text:0000000000005638 ; ---------------------------------------------------------------------------
.text:0000000000005638 ;   catch(...) // owned by 5378
.text:0000000000005638                 BL              sub_58B0
.text:000000000000563C ; ---------------------------------------------------------------------------
.text:000000000000563C ;   cleanup() // owned by 51EC
.text:000000000000563C                 MOV             X20, X0
.text:0000000000005640                 B               loc_5698
.text:0000000000005644 ; ---------------------------------------------------------------------------
.text:0000000000005644 ;   cleanup() // owned by 51D4
.text:0000000000005644                 MOV             X20, X0
.text:0000000000005648                 LDR             X8, [SP,#0x570+var_518]
.text:000000000000564C                 CBNZ            X8, loc_56A8
.text:0000000000005650                 B               loc_56BC
.text:0000000000005654 ; ---------------------------------------------------------------------------
.text:0000000000005654 ;   cleanup() // owned by 51B4
.text:0000000000005654                 LDRB            W8, [SP,#0x570+src]
.text:0000000000005658                 MOV             X20, X0
.text:000000000000565C                 TBZ             W8, #0, loc_56BC
.text:0000000000005660                 LDR             X0, [SP,#0x570+var_428] ; void *
.text:0000000000005664                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000005668                 MOV             X0, X20
.text:000000000000566C                 BL              sub_78A0
.text:0000000000005670 loc_5670                                ; CODE XREF: TZ_ICCC_init_measurements(void)+460↑j
.text:0000000000005670 ;   cleanup() // owned by 5200
.text:0000000000005670 ;   cleanup() // owned by 5318
.text:0000000000005670                 MOV             X20, X0
.text:0000000000005674 loc_5674                                ; CODE XREF: TZ_ICCC_init_measurements(void)+440↑j
.text:0000000000005674                                         ; TZ_ICCC_init_measurements(void)+458↑j ...
.text:0000000000005674                 LDR             X8, [SP,#0x570+var_520]
.text:0000000000005678                 CBZ             X8, loc_5690
.text:000000000000567C loc_567C                                ; CODE XREF: TZ_ICCC_init_measurements(void)+498↑j
.text:000000000000567C                 LDR             X9, [X8]
.text:0000000000005680                 LDUR            X9, [X9,#-0x18]
.text:0000000000005684                 ADD             X0, X8, X9 ; this
.text:0000000000005688 ;   try {
.text:0000000000005688                 ADD             X1, SP, #0x570+var_520 ; void *
.text:000000000000568C                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:000000000000568C ;   } // starts at 5688
.text:0000000000005690 loc_5690                                ; CODE XREF: TZ_ICCC_init_measurements(void)+49C↑j
.text:0000000000005690                                         ; TZ_ICCC_init_measurements(void)+510↑j
.text:0000000000005690                 MOV             X0, X19 ; this
.text:0000000000005694                 BL              ._ZN7android8hardware11hidl_stringD1Ev ; android::hardware::hidl_string::~hidl_string()
.text:0000000000005698 loc_5698                                ; CODE XREF: TZ_ICCC_init_measurements(void)+4D8↑j
.text:0000000000005698                 ADD             X0, SP, #0x570+var_498 ; this
.text:000000000000569C                 BL              ._ZN7android8hardware11hidl_handleD1Ev ; android::hardware::hidl_handle::~hidl_handle()
.text:00000000000056A0                 LDR             X8, [SP,#0x570+var_518]
.text:00000000000056A4                 CBZ             X8, loc_56BC
.text:00000000000056A8 loc_56A8                                ; CODE XREF: TZ_ICCC_init_measurements(void)+4E4↑j
.text:00000000000056A8                 LDR             X9, [X8]
.text:00000000000056AC                 LDUR            X9, [X9,#-0x18]
.text:00000000000056B0                 ADD             X0, X8, X9 ; this
.text:00000000000056B4 ;   try {
.text:00000000000056B4                 ADD             X1, SP, #0x570+var_518 ; void *
.text:00000000000056B8                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:00000000000056B8 ;   } // starts at 56B4
.text:00000000000056BC loc_56BC                                ; CODE XREF: TZ_ICCC_init_measurements(void)+4E8↑j
.text:00000000000056BC                                         ; TZ_ICCC_init_measurements(void)+4F4↑j ...
.text:00000000000056BC                 MOV             X0, X20
.text:00000000000056C0                 BL              sub_78A0
.text:00000000000056C4 ;   catch(...) // owned by 5688
.text:00000000000056C4                 BL              sub_58B0
.text:00000000000056C8 ; ---------------------------------------------------------------------------
.text:00000000000056C8 ;   catch(...) // owned by 56B4
.text:00000000000056C8                 BL              sub_58B0
.text:00000000000056C8 ; } // starts at 5168
.text:00000000000056C8 ; End of function TZ_ICCC_init_measurements(void)
.text:00000000000056C8 ; ---------------------------------------------------------------------------
.text:00000000000056CC                 ALIGN 0x10
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0 ; Attributes: bp-based frame
.text:00000000000056D0 ; __int64 TZ_ICCC_terminate(void)
.text:00000000000056D0                 EXPORT _Z17TZ_ICCC_terminatev
.text:00000000000056D0 _Z17TZ_ICCC_terminatev                  ; DATA XREF: LOAD:0000000000000750↑o
.text:00000000000056D0 var_50          = -0x50
.text:00000000000056D0 var_48          = -0x48
.text:00000000000056D0 var_40          = -0x40
.text:00000000000056D0 var_2C          = -0x2C
.text:00000000000056D0 var_28          = -0x28
.text:00000000000056D0 var_20          = -0x20
.text:00000000000056D0 var_18          = -0x18
.text:00000000000056D0 var_10          = -0x10
.text:00000000000056D0 var_s0          =  0
.text:00000000000056D0 ; __unwind { // __gxx_personality_v0
.text:00000000000056D0                 SUB             SP, SP, #0x60
.text:00000000000056D4                 STP             X20, X19, [SP,#0x50+var_10]
.text:00000000000056D8                 STP             X29, X30, [SP,#0x50+var_s0]
.text:00000000000056DC                 ADD             X29, SP, #0x50
.text:00000000000056E0                 MRS             X20, #3, c13, c0, #2
.text:00000000000056E4                 MOV             W9, #0x7561
.text:00000000000056E8                 LDR             X8, [X20,#0x28]
.text:00000000000056EC                 MOV             W10, #0x6564
.text:00000000000056F0                 MOVK            W9, #0x746C,LSL#16
.text:00000000000056F4                 MOVK            W10, #0x6166,LSL#16
.text:00000000000056F8                 STUR            X8, [X29,#var_18]
.text:00000000000056FC                 MOV             W8, #0xE
.text:0000000000005700                 STUR            XZR, [X29,#var_20]
.text:0000000000005704                 STP             XZR, XZR, [SP,#0x50+var_50]
.text:0000000000005708                 STR             XZR, [SP,#0x50+var_40]
.text:000000000000570C                 STRB            W8, [SP,#0x50+var_50]
.text:0000000000005710                 STR             W9, [SP,#0x50+var_50+4]
.text:0000000000005714                 STUR            W10, [SP,#0x50+var_50+1]
.text:0000000000005718                 STRB            WZR, [SP,#0x50+var_48]
.text:000000000000571C ;   try {
.text:000000000000571C                 ADD             X8, SP, #0x50+var_28
.text:0000000000005720                 MOV             X0, SP
.text:0000000000005724                 MOV             W1, WZR
.text:0000000000005728                 BL              ._ZN6vendor7samsung8hardware3tlc4iccc4V1_08ISehIccc10getServiceERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEb ; vendor::samsung::hardware::tlc::iccc::V1_0::ISehIccc::getService(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool)
.text:0000000000005728 ;   } // starts at 571C
.text:000000000000572C                 LDUR            X19, [X29,#var_20]
.text:0000000000005730                 CBZ             X19, loc_5748
.text:0000000000005734                 LDR             X8, [X19]
.text:0000000000005738                 LDUR            X8, [X8,#-0x18]
.text:000000000000573C                 ADD             X0, X19, X8 ; this
.text:0000000000005740 ;   try {
.text:0000000000005740                 SUB             X1, X29, #-var_20 ; void *
.text:0000000000005744                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000005748 loc_5748                                ; CODE XREF: TZ_ICCC_terminate(void)+60↑j
.text:0000000000005748                 LDUR            X8, [X29,#var_20]
.text:000000000000574C                 CMP             X19, X8
.text:0000000000005750                 B.EQ            loc_5758
.text:0000000000005754                 BL              ._ZN7android14sp_report_raceEv ; android::sp_report_race(void)
.text:0000000000005754 ;   } // starts at 5740
.text:0000000000005758 loc_5758                                ; CODE XREF: TZ_ICCC_terminate(void)+80↑j
.text:0000000000005758                 LDR             X8, [SP,#0x50+var_28]
.text:000000000000575C                 LDRB            W9, [SP,#0x50+var_50]
.text:0000000000005760                 STR             XZR, [SP,#0x50+var_28]
.text:0000000000005764                 STUR            X8, [X29,#var_20]
.text:0000000000005768                 TBZ             W9, #0, loc_5778
.text:000000000000576C                 LDR             X0, [SP,#0x50+var_40] ; void *
.text:0000000000005770                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000005774                 LDUR            X8, [X29,#var_20]
.text:0000000000005778 loc_5778                                ; CODE XREF: TZ_ICCC_terminate(void)+98↑j
.text:0000000000005778                 CBZ             X8, loc_57DC
.text:000000000000577C ;   try {
.text:000000000000577C                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005780                 ADRP            X2, #aTzIcccTerminat@PAGE ; "TZ_ICCC_terminate\n"
.text:0000000000005784                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000005788                 ADD             X2, X2, #aTzIcccTerminat@PAGEOFF ; "TZ_ICCC_terminate\n"
.text:000000000000578C                 MOV             W0, #6
.text:0000000000005790                 BL              .__android_log_print
.text:0000000000005790 ;   } // starts at 577C
.text:0000000000005794                 LDUR            X0, [X29,#var_20]
.text:0000000000005798                 LDR             X8, [X0]
.text:000000000000579C                 LDR             X9, [X8,#0x98]
.text:00000000000057A0 ;   try {
.text:00000000000057A0                 MOV             X8, SP
.text:00000000000057A4                 BLR             X9
.text:00000000000057A4 ;   } // starts at 57A0
.text:00000000000057A8 ;   try {
.text:00000000000057A8                 MOV             X0, SP  ; this
.text:00000000000057AC                 BL              ._ZNK7android8hardware7details13return_status8assertOkEv ; android::hardware::details::return_status::assertOk(void)
.text:00000000000057AC ;   } // starts at 57A8
.text:00000000000057B0                 LDR             W19, [SP,#0x50+var_2C]
.text:00000000000057B4                 MOV             X0, SP  ; this
.text:00000000000057B8                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:00000000000057BC ;   try {
.text:00000000000057BC                 ADRP            X0, #aCtlInterfaceSt@PAGE ; "ctl.interface_stop"
.text:00000000000057C0                 ADRP            X1, #aVendorSamsungH_0@PAGE ; "vendor.samsung.hardware.tlc.iccc@1.0::I"...
.text:00000000000057C4                 ADD             X0, X0, #aCtlInterfaceSt@PAGEOFF ; "ctl.interface_stop"
.text:00000000000057C8                 ADD             X1, X1, #aVendorSamsungH_0@PAGEOFF ; "vendor.samsung.hardware.tlc.iccc@1.0::I"...
.text:00000000000057CC                 BL              .property_set
.text:00000000000057D0                 LDUR            X8, [X29,#var_20]
.text:00000000000057D4                 CBNZ            X8, loc_5800
.text:00000000000057D8                 B               loc_5814
.text:00000000000057DC ; ---------------------------------------------------------------------------
.text:00000000000057DC loc_57DC                                ; CODE XREF: TZ_ICCC_terminate(void):loc_5778↑j
.text:00000000000057DC                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000057E0                 ADRP            X2, #aCannotGetIcccS@PAGE ; "Cannot get iccc Service\n"
.text:00000000000057E4                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000057E8                 ADD             X2, X2, #aCannotGetIcccS@PAGEOFF ; "Cannot get iccc Service\n"
.text:00000000000057EC                 MOV             W0, #6
.text:00000000000057F0                 BL              .__android_log_print
.text:00000000000057F0 ;   } // starts at 57BC
.text:00000000000057F4                 MOV             W19, #0xFFFFFFFF
.text:00000000000057F8                 LDUR            X8, [X29,#var_20]
.text:00000000000057FC                 CBZ             X8, loc_5814
.text:0000000000005800 loc_5800                                ; CODE XREF: TZ_ICCC_terminate(void)+104↑j
.text:0000000000005800                 LDR             X9, [X8]
.text:0000000000005804                 LDUR            X9, [X9,#-0x18]
.text:0000000000005808                 ADD             X0, X8, X9 ; this
.text:000000000000580C ;   try {
.text:000000000000580C                 SUB             X1, X29, #-var_20 ; void *
.text:0000000000005810                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:0000000000005810 ;   } // starts at 580C
.text:0000000000005814 loc_5814                                ; CODE XREF: TZ_ICCC_terminate(void)+108↑j
.text:0000000000005814                                         ; TZ_ICCC_terminate(void)+12C↑j
.text:0000000000005814                 LDR             X8, [X20,#0x28]
.text:0000000000005818                 LDUR            X9, [X29,#var_18]
.text:000000000000581C                 CMP             X8, X9
.text:0000000000005820                 B.NE            loc_5838
.text:0000000000005824                 MOV             W0, W19
.text:0000000000005828                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000582C                 LDP             X20, X19, [SP,#0x50+var_10]
.text:0000000000005830                 ADD             SP, SP, #0x60 ; '`'
.text:0000000000005834                 RET
.text:0000000000005838 ; ---------------------------------------------------------------------------
.text:0000000000005838 loc_5838                                ; CODE XREF: TZ_ICCC_terminate(void)+150↑j
.text:0000000000005838                 BL              .__stack_chk_fail
.text:000000000000583C ; ---------------------------------------------------------------------------
.text:000000000000583C ;   catch(...) // owned by 580C
.text:000000000000583C                 BL              sub_58B0
.text:0000000000005840 ; ---------------------------------------------------------------------------
.text:0000000000005840 ;   cleanup() // owned by 57A8
.text:0000000000005840                 MOV             X19, X0
.text:0000000000005844                 MOV             X0, SP  ; this
.text:0000000000005848                 BL              ._ZN7android8hardware7details13return_statusD2Ev ; android::hardware::details::return_status::~return_status()
.text:000000000000584C                 LDUR            X8, [X29,#var_20]
.text:0000000000005850                 CBNZ            X8, loc_588C
.text:0000000000005854                 B               loc_58A0
.text:0000000000005858 ; ---------------------------------------------------------------------------
.text:0000000000005858 ;   cleanup() // owned by 57A0
.text:0000000000005858                 B               loc_5880
.text:000000000000585C ; ---------------------------------------------------------------------------
.text:000000000000585C ;   cleanup() // owned by 571C
.text:000000000000585C                 LDRB            W8, [SP,#0x50+var_50]
.text:0000000000005860                 MOV             X19, X0
.text:0000000000005864                 TBZ             W8, #0, loc_5884
.text:0000000000005868                 LDR             X0, [SP,#0x50+var_40] ; void *
.text:000000000000586C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000005870                 LDUR            X8, [X29,#var_20]
.text:0000000000005874                 CBNZ            X8, loc_588C
.text:0000000000005878                 B               loc_58A0
.text:000000000000587C ; ---------------------------------------------------------------------------
.text:000000000000587C ;   catch(...) // owned by 5740
.text:000000000000587C                 BL              sub_58B0
.text:0000000000005880 ; ---------------------------------------------------------------------------
.text:0000000000005880 loc_5880                                ; CODE XREF: TZ_ICCC_terminate(void)+188↑j
.text:0000000000005880 ;   cleanup() // owned by 577C
.text:0000000000005880 ;   cleanup() // owned by 57BC
.text:0000000000005880                 MOV             X19, X0
.text:0000000000005884 loc_5884                                ; CODE XREF: TZ_ICCC_terminate(void)+194↑j
.text:0000000000005884                 LDUR            X8, [X29,#var_20]
.text:0000000000005888                 CBZ             X8, loc_58A0
.text:000000000000588C loc_588C                                ; CODE XREF: TZ_ICCC_terminate(void)+180↑j
.text:000000000000588C                                         ; TZ_ICCC_terminate(void)+1A4↑j
.text:000000000000588C                 LDR             X9, [X8]
.text:0000000000005890                 LDUR            X9, [X9,#-0x18]
.text:0000000000005894                 ADD             X0, X8, X9 ; this
.text:0000000000005898 ;   try {
.text:0000000000005898                 SUB             X1, X29, #-var_20 ; void *
.text:000000000000589C                 BL              ._ZNK7android7RefBase9decStrongEPKv ; android::RefBase::decStrong(void const*)
.text:000000000000589C ;   } // starts at 5898
.text:00000000000058A0 loc_58A0                                ; CODE XREF: TZ_ICCC_terminate(void)+184↑j
.text:00000000000058A0                                         ; TZ_ICCC_terminate(void)+1A8↑j ...
.text:00000000000058A0                 MOV             X0, X19
.text:00000000000058A4                 BL              sub_78A0
.text:00000000000058A8 ;   catch(...) // owned by 5898
.text:00000000000058A8                 BL              sub_58B0
.text:00000000000058A8 ; } // starts at 56D0
.text:00000000000058A8 ; End of function TZ_ICCC_terminate(void)
.text:00000000000058A8 ; ---------------------------------------------------------------------------
.text:00000000000058AC                 ALIGN 0x10
.text:00000000000058B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058B0 ; Attributes: noreturn
.text:00000000000058B0 sub_58B0                                ; CODE XREF: TZ_ICCC_initialize(void)+158↑p
.text:00000000000058B0                                         ; TZ_ICCC_initialize(void)+1C0↑p ...
.text:00000000000058B0 var_10          = -0x10
.text:00000000000058B0 ; __unwind {
.text:00000000000058B0                 STR             X30, [SP,#var_10]!
.text:00000000000058B4                 BL              .__cxa_begin_catch
.text:00000000000058B8                 BL              ._ZSt9terminatev ; std::terminate(void)
.text:00000000000058B8 ; } // starts at 58B0
.text:00000000000058B8 ; End of function sub_58B0
.text:00000000000058B8 ; ---------------------------------------------------------------------------
.text:00000000000058BC                 ALIGN 0x20
.text:00000000000058C0 ; [00000004 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00000000000058C4                 ALIGN 8
.text:00000000000058C8 ; =============== S U B R O U T I N E =======================================
.text:00000000000058C8 ; Attributes: bp-based frame
.text:00000000000058C8 sub_58C8                                ; DATA XREF: .data.rel.ro:000000000000B030↓o
.text:00000000000058C8 var_10          = -0x10
.text:00000000000058C8 var_s0          =  0
.text:00000000000058C8 ; __unwind {
.text:00000000000058C8                 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000058CC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000058D0                 ADD             X29, SP, #0x10
.text:00000000000058D4                 MOV             X19, X0
.text:00000000000058D8                 MOV             W0, #0x18 ; unsigned __int64
.text:00000000000058DC                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000058E0                 LDUR            Q0, [X19,#8]
.text:00000000000058E4                 ADRP            X8, #off_B020@PAGE
.text:00000000000058E8                 ADD             X8, X8, #off_B020@PAGEOFF
.text:00000000000058EC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000058F0                 STR             X8, [X0]
.text:00000000000058F4                 STUR            Q0, [X0,#8]
.text:00000000000058F8                 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000058FC                 RET
.text:00000000000058FC ; } // starts at 58C8
.text:00000000000058FC ; End of function sub_58C8
.text:0000000000005900 ; =============== S U B R O U T I N E =======================================
.text:0000000000005900 sub_5900                                ; DATA XREF: .data.rel.ro:000000000000B038↓o
.text:0000000000005900 ; __unwind {
.text:0000000000005900                 ADRP            X8, #off_B020@PAGE
.text:0000000000005904                 ADD             X8, X8, #off_B020@PAGEOFF
.text:0000000000005908                 STR             X8, [X1]
.text:000000000000590C                 LDUR            Q0, [X0,#8]
.text:0000000000005910                 STUR            Q0, [X1,#8]
.text:0000000000005914                 RET
.text:0000000000005914 ; } // starts at 5900
.text:0000000000005914 ; End of function sub_5900
.text:0000000000005918 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:000000000000591C                 ALIGN 0x20
.text:0000000000005920 ; =============== S U B R O U T I N E =======================================
.text:0000000000005920 sub_5920                                ; DATA XREF: .data.rel.ro:000000000000B050↓o
.text:0000000000005920 ; __unwind {
.text:0000000000005920                 LDR             W8, [X1]
.text:0000000000005924                 CBZ             W8, loc_592C
.text:0000000000005928                 RET
.text:000000000000592C ; ---------------------------------------------------------------------------
.text:000000000000592C loc_592C                                ; CODE XREF: sub_5920+4↑j
.text:000000000000592C                 LDR             X8, [X0,#8]
.text:0000000000005930                 LDR             W9, [X2]
.text:0000000000005934                 LDR             X8, [X8]
.text:0000000000005938                 STR             W9, [X8]
.text:000000000000593C                 LDR             X8, [X0,#0x10]
.text:0000000000005940                 STR             WZR, [X8]
.text:0000000000005944                 RET
.text:0000000000005944 ; } // starts at 5920
.text:0000000000005944 ; End of function sub_5920
.text:0000000000005948 ; =============== S U B R O U T I N E =======================================
.text:0000000000005948 ; Attributes: bp-based frame
.text:0000000000005948 sub_5948                                ; DATA XREF: .data.rel.ro:000000000000B078↓o
.text:0000000000005948 var_10          = -0x10
.text:0000000000005948 var_s0          =  0
.text:0000000000005948 ; __unwind {
.text:0000000000005948                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000594C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005950                 ADD             X29, SP, #0x10
.text:0000000000005954                 MOV             X19, X0
.text:0000000000005958                 MOV             W0, #0x10 ; unsigned __int64
.text:000000000000595C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000005960                 LDR             X8, [X19,#8]
.text:0000000000005964                 ADRP            X9, #off_B068@PAGE
.text:0000000000005968                 ADD             X9, X9, #off_B068@PAGEOFF
.text:000000000000596C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005970                 STP             X9, X8, [X0]
.text:0000000000005974                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000005978                 RET
.text:0000000000005978 ; } // starts at 5948
.text:0000000000005978 ; End of function sub_5948
.text:0000000000005978 ; ---------------------------------------------------------------------------
.text:000000000000597C                 ALIGN 0x20
.text:0000000000005980 ; =============== S U B R O U T I N E =======================================
.text:0000000000005980 sub_5980                                ; DATA XREF: .data.rel.ro:000000000000B080↓o
.text:0000000000005980 ; __unwind {
.text:0000000000005980                 ADRP            X8, #off_B068@PAGE
.text:0000000000005984                 ADD             X8, X8, #off_B068@PAGEOFF
.text:0000000000005988                 STR             X8, [X1]
.text:000000000000598C                 LDR             X8, [X0,#8]
.text:0000000000005990                 STR             X8, [X1,#8]
.text:0000000000005994                 RET
.text:0000000000005994 ; } // starts at 5980
.text:0000000000005994 ; End of function sub_5980
.text:0000000000005998 ; =============== S U B R O U T I N E =======================================
.text:0000000000005998 ; Attributes: bp-based frame
.text:0000000000005998 sub_5998                                ; DATA XREF: .data.rel.ro:000000000000B098↓o
.text:0000000000005998 var_10          = -0x10
.text:0000000000005998 var_s0          =  0
.text:0000000000005998 ; __unwind {
.text:0000000000005998                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000599C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000059A0                 ADD             X29, SP, #0x10
.text:00000000000059A4                 LDR             W8, [X1]
.text:00000000000059A8                 MOV             X20, X0
.text:00000000000059AC                 CBZ             W8, loc_59BC
.text:00000000000059B0                 LDR             X9, [X20,#8]
.text:00000000000059B4                 STR             W8, [X9,#0xC]
.text:00000000000059B8                 B               loc_5A10
.text:00000000000059BC ; ---------------------------------------------------------------------------
.text:00000000000059BC loc_59BC                                ; CODE XREF: sub_5998+14↑j
.text:00000000000059BC                 MOV             X19, X2
.text:00000000000059C0                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:00000000000059C4                 ADRP            X2, #aTzIcccAttestat_0@PAGE ; "TZ_ICCC_attestation service returned su"...
.text:00000000000059C8                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:00000000000059CC                 ADD             X2, X2, #aTzIcccAttestat_0@PAGEOFF ; "TZ_ICCC_attestation service returned su"...
.text:00000000000059D0                 MOV             W0, #6
.text:00000000000059D4                 BL              .__android_log_print
.text:00000000000059D8                 LDR             X8, [X20,#8]
.text:00000000000059DC                 MOV             W0, #0x1000 ; size
.text:00000000000059E0                 STR             WZR, [X8,#0xC]
.text:00000000000059E4                 LDR             W8, [X19,#8]
.text:00000000000059E8                 LDR             X9, [X20,#8]
.text:00000000000059EC                 STR             W8, [X9,#8]
.text:00000000000059F0                 BL              .malloc
.text:00000000000059F4                 LDR             X8, [X20,#8]
.text:00000000000059F8                 STR             X0, [X8]
.text:00000000000059FC                 LDR             X8, [X20,#8]
.text:0000000000005A00                 LDR             X1, [X19] ; src
.text:0000000000005A04                 LDR             X0, [X8] ; dest
.text:0000000000005A08                 LDRSW           X2, [X8,#8] ; n
.text:0000000000005A0C                 BL              .memcpy
.text:0000000000005A10 loc_5A10                                ; CODE XREF: sub_5998+20↑j
.text:0000000000005A10                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005A14                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000005A18                 RET
.text:0000000000005A18 ; } // starts at 5998
.text:0000000000005A18 ; End of function sub_5998
.text:0000000000005A18 ; ---------------------------------------------------------------------------
.text:0000000000005A1C                 ALIGN 0x20
.text:0000000000005A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A20 ; Attributes: bp-based frame
.text:0000000000005A20 sub_5A20                                ; DATA XREF: .data.rel.ro:000000000000B0C0↓o
.text:0000000000005A20 var_10          = -0x10
.text:0000000000005A20 var_s0          =  0
.text:0000000000005A20 ; __unwind {
.text:0000000000005A20                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000005A24                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005A28                 ADD             X29, SP, #0x10
.text:0000000000005A2C                 MOV             X19, X0
.text:0000000000005A30                 MOV             W0, #0x40 ; '@' ; unsigned __int64
.text:0000000000005A34                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000005A38                 ADRP            X9, #off_B0B0@PAGE
.text:0000000000005A3C                 LDR             X8, [X19,#0x38]
.text:0000000000005A40                 ADD             X9, X9, #off_B0B0@PAGEOFF
.text:0000000000005A44                 LDUR            Q0, [X19,#0x28]
.text:0000000000005A48                 LDUR            Q1, [X19,#0x18]
.text:0000000000005A4C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005A50                 STR             X9, [X0]
.text:0000000000005A54                 LDUR            Q2, [X19,#8]
.text:0000000000005A58                 STR             X8, [X0,#0x38]
.text:0000000000005A5C                 STUR            Q0, [X0,#0x28]
.text:0000000000005A60                 STUR            Q1, [X0,#0x18]
.text:0000000000005A64                 STUR            Q2, [X0,#8]
.text:0000000000005A68                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000005A6C                 RET
.text:0000000000005A6C ; } // starts at 5A20
.text:0000000000005A6C ; End of function sub_5A20
.text:0000000000005A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A70 sub_5A70                                ; DATA XREF: .data.rel.ro:000000000000B0C8↓o
.text:0000000000005A70 ; __unwind {
.text:0000000000005A70                 ADRP            X8, #off_B0B0@PAGE
.text:0000000000005A74                 ADD             X8, X8, #off_B0B0@PAGEOFF
.text:0000000000005A78                 STR             X8, [X1]
.text:0000000000005A7C                 LDR             X8, [X0,#0x38]
.text:0000000000005A80                 LDUR            Q0, [X0,#0x28]
.text:0000000000005A84                 LDUR            Q1, [X0,#0x18]
.text:0000000000005A88                 LDUR            Q2, [X0,#8]
.text:0000000000005A8C                 STR             X8, [X1,#0x38]
.text:0000000000005A90                 STUR            Q0, [X1,#0x28]
.text:0000000000005A94                 STUR            Q1, [X1,#0x18]
.text:0000000000005A98                 STUR            Q2, [X1,#8]
.text:0000000000005A9C                 RET
.text:0000000000005A9C ; } // starts at 5A70
.text:0000000000005A9C ; End of function sub_5A70
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0 ; Attributes: bp-based frame
.text:0000000000005AA0 sub_5AA0                                ; DATA XREF: .data.rel.ro:000000000000B0E0↓o
.text:0000000000005AA0 var_20          = -0x20
.text:0000000000005AA0 var_10          = -0x10
.text:0000000000005AA0 var_s0          =  0
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000005AA4                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000005AA8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000005AAC                 ADD             X29, SP, #0x20
.text:0000000000005AB0                 LDR             W8, [X1]
.text:0000000000005AB4                 MOV             X20, X0
.text:0000000000005AB8                 CBZ             W8, loc_5AC8
.text:0000000000005ABC                 LDR             X9, [X20,#0x18]
.text:0000000000005AC0                 STR             W8, [X9,#0xC]
.text:0000000000005AC4                 B               loc_5B58
.text:0000000000005AC8 ; ---------------------------------------------------------------------------
.text:0000000000005AC8 loc_5AC8                                ; CODE XREF: sub_5AA0+18↑j
.text:0000000000005AC8                 MOV             X19, X2
.text:0000000000005ACC                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005AD0                 ADRP            X2, #aIcccDeviceStat@PAGE ; "ICCC_device_status service returned suc"...
.text:0000000000005AD4                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000005AD8                 ADD             X2, X2, #aIcccDeviceStat@PAGEOFF ; "ICCC_device_status service returned suc"...
.text:0000000000005ADC                 MOV             W0, #6
.text:0000000000005AE0                 MOV             X21, X3
.text:0000000000005AE4                 BL              .__android_log_print
.text:0000000000005AE8                 LDR             W8, [X19,#8]
.text:0000000000005AEC                 MOV             W3, #0x2000
.text:0000000000005AF0                 LDR             X9, [X20,#8]
.text:0000000000005AF4                 STR             W8, [X9]
.text:0000000000005AF8                 LDR             W8, [X21,#8]
.text:0000000000005AFC                 LDR             X9, [X20,#0x10]
.text:0000000000005B00                 STR             W8, [X9]
.text:0000000000005B04                 LDR             X8, [X20,#0x18]
.text:0000000000005B08                 STR             WZR, [X8,#0xC]
.text:0000000000005B0C                 LDR             X8, [X20,#0x10]
.text:0000000000005B10                 LDR             X0, [X20,#0x20]
.text:0000000000005B14                 LDR             X1, [X21]
.text:0000000000005B18                 LDR             W2, [X8]
.text:0000000000005B1C                 BL              .__memcpy_chk
.text:0000000000005B20                 LDR             X8, [X20,#8]
.text:0000000000005B24                 MOV             W0, #0x2000 ; size
.text:0000000000005B28                 LDR             X9, [X20,#0x18]
.text:0000000000005B2C                 LDR             W8, [X8]
.text:0000000000005B30                 STR             W8, [X9,#8]
.text:0000000000005B34                 BL              .malloc
.text:0000000000005B38                 LDR             X8, [X20,#0x18]
.text:0000000000005B3C                 STR             X0, [X8]
.text:0000000000005B40                 LDR             X8, [X20,#0x18]
.text:0000000000005B44                 LDR             X9, [X20,#8]
.text:0000000000005B48                 LDR             X1, [X19] ; src
.text:0000000000005B4C                 LDR             X0, [X8] ; dest
.text:0000000000005B50                 LDR             W2, [X9] ; n
.text:0000000000005B54                 BL              .memcpy
.text:0000000000005B58 loc_5B58                                ; CODE XREF: sub_5AA0+24↑j
.text:0000000000005B58                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000005B5C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000005B60                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000005B64                 RET
.text:0000000000005B64 ; } // starts at 5AA0
.text:0000000000005B64 ; End of function sub_5AA0
.text:0000000000005B68 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B68 ; Attributes: bp-based frame
.text:0000000000005B68 sub_5B68                                ; DATA XREF: .data.rel.ro:000000000000B108↓o
.text:0000000000005B68 var_10          = -0x10
.text:0000000000005B68 var_s0          =  0
.text:0000000000005B68 ; __unwind {
.text:0000000000005B68                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000005B6C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005B70                 ADD             X29, SP, #0x10
.text:0000000000005B74                 MOV             X19, X0
.text:0000000000005B78                 MOV             W0, #0x10 ; unsigned __int64
.text:0000000000005B7C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000005B80                 LDR             X8, [X19,#8]
.text:0000000000005B84                 ADRP            X9, #off_B0F8@PAGE
.text:0000000000005B88                 ADD             X9, X9, #off_B0F8@PAGEOFF
.text:0000000000005B8C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005B90                 STP             X9, X8, [X0]
.text:0000000000005B94                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000005B98                 RET
.text:0000000000005B98 ; } // starts at 5B68
.text:0000000000005B98 ; End of function sub_5B68
.text:0000000000005B98 ; ---------------------------------------------------------------------------
.text:0000000000005B9C                 ALIGN 0x20
.text:0000000000005BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BA0 sub_5BA0                                ; DATA XREF: .data.rel.ro:000000000000B110↓o
.text:0000000000005BA0 ; __unwind {
.text:0000000000005BA0                 ADRP            X8, #off_B0F8@PAGE
.text:0000000000005BA4                 ADD             X8, X8, #off_B0F8@PAGEOFF
.text:0000000000005BA8                 STR             X8, [X1]
.text:0000000000005BAC                 LDR             X8, [X0,#8]
.text:0000000000005BB0                 STR             X8, [X1,#8]
.text:0000000000005BB4                 RET
.text:0000000000005BB4 ; } // starts at 5BA0
.text:0000000000005BB4 ; End of function sub_5BA0
.text:0000000000005BB8 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BB8 ; Attributes: bp-based frame
.text:0000000000005BB8 sub_5BB8                                ; DATA XREF: .data.rel.ro:000000000000B128↓o
.text:0000000000005BB8 var_10          = -0x10
.text:0000000000005BB8 var_s0          =  0
.text:0000000000005BB8 ; __unwind {
.text:0000000000005BB8                 LDRB            W8, [X1]
.text:0000000000005BBC                 CBZ             W8, loc_5C24
.text:0000000000005BC0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:0000000000005BC4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005BC8                 ADD             X29, SP, #0x10
.text:0000000000005BCC                 MOV             X19, X2
.text:0000000000005BD0                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005BD4                 ADRP            X2, #aAllocatedMemor@PAGE ; "Allocated memory"
.text:0000000000005BD8                 MOV             X20, X0
.text:0000000000005BDC                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000005BE0                 ADD             X2, X2, #aAllocatedMemor@PAGEOFF ; "Allocated memory"
.text:0000000000005BE4                 MOV             W0, #6
.text:0000000000005BE8                 BL              .__android_log_print
.text:0000000000005BEC                 LDR             X20, [X20,#8]
.text:0000000000005BF0                 CMP             X20, X19
.text:0000000000005BF4                 B.EQ            loc_5C18
.text:0000000000005BF8                 MOV             X0, X20
.text:0000000000005BFC                 MOV             X1, X19
.text:0000000000005C00                 BL              ._ZN7android8hardware11hidl_handleaSERKS1_ ; android::hardware::hidl_handle::operator=(android::hardware::hidl_handle const&)
.text:0000000000005C04                 LDR             X8, [X19,#0x10]
.text:0000000000005C08                 ADD             X1, X19, #0x18
.text:0000000000005C0C                 ADD             X0, X20, #0x18
.text:0000000000005C10                 STR             X8, [X20,#0x10]
.text:0000000000005C14                 BL              ._ZN7android8hardware11hidl_stringaSERKS1_ ; android::hardware::hidl_string::operator=(android::hardware::hidl_string const&)
.text:0000000000005C18 loc_5C18                                ; CODE XREF: sub_5BB8+3C↑j
.text:0000000000005C18                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000005C1C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000005C20                 RET
.text:0000000000005C24 ; ---------------------------------------------------------------------------
.text:0000000000005C24 loc_5C24                                ; CODE XREF: sub_5BB8+4↑j
.text:0000000000005C24                 ADRP            X1, #aIcccHidlClient@PAGE ; "ICCC_HIDL_CLIENT: "
.text:0000000000005C28                 ADRP            X2, #aFailedToAlloca@PAGE ; "Failed to allocate memory"
.text:0000000000005C2C                 ADD             X1, X1, #aIcccHidlClient@PAGEOFF ; "ICCC_HIDL_CLIENT: "
.text:0000000000005C30                 ADD             X2, X2, #aFailedToAlloca@PAGEOFF ; "Failed to allocate memory"
.text:0000000000005C34                 MOV             W0, #6
.text:0000000000005C38                 B               .__android_log_print
.text:0000000000005C38 ; } // starts at 5BB8
.text:0000000000005C38 ; End of function sub_5BB8
.text:0000000000005C3C ; =============== S U B R O U T I N E =======================================
.text:0000000000005C3C sub_5C3C                                ; CODE XREF: sub_5CA4+64↓p
.text:0000000000005C3C                                         ; sub_618C+164↓p ...
.text:0000000000005C3C ; __unwind {
.text:0000000000005C3C                 MOV             X2, #0
.text:0000000000005C40                 MOV             W3, #0
.text:0000000000005C44 loc_5C44                                ; CODE XREF: sub_5C3C+1C↓j
.text:0000000000005C44                 LDRB            W5, [X0],#1
.text:0000000000005C48                 AND             X4, X5, #0x7F
.text:0000000000005C4C                 LSL             X4, X4, X3
.text:0000000000005C50                 ADD             W3, W3, #7
.text:0000000000005C54                 ORR             X2, X2, X4
.text:0000000000005C58                 TBNZ            W5, #7, loc_5C44
.text:0000000000005C5C                 STR             X2, [X1]
.text:0000000000005C60                 RET
.text:0000000000005C60 ; } // starts at 5C3C
.text:0000000000005C60 ; End of function sub_5C3C
.text:0000000000005C64 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C64 sub_5C64                                ; CODE XREF: sub_5CA4+74↓p
.text:0000000000005C64                                         ; sub_618C+318↓p ...
.text:0000000000005C64 ; __unwind {
.text:0000000000005C64                 MOV             X2, #0
.text:0000000000005C68                 MOV             W3, #0
.text:0000000000005C6C loc_5C6C                                ; CODE XREF: sub_5C64+1C↓j
.text:0000000000005C6C                 LDRB            W4, [X0],#1
.text:0000000000005C70                 AND             X5, X4, #0x7F
.text:0000000000005C74                 LSL             X5, X5, X3
.text:0000000000005C78                 ADD             W3, W3, #7
.text:0000000000005C7C                 ORR             X2, X2, X5
.text:0000000000005C80                 TBNZ            W4, #7, loc_5C6C
.text:0000000000005C84                 CMP             W3, #0x3F ; '?'
.text:0000000000005C88                 B.HI            loc_5C9C
.text:0000000000005C8C                 TBZ             W4, #6, loc_5C9C
.text:0000000000005C90                 MOV             X4, #0xFFFFFFFFFFFFFFFF
.text:0000000000005C94                 LSL             X3, X4, X3
.text:0000000000005C98                 ORR             X2, X3, X2
.text:0000000000005C9C loc_5C9C                                ; CODE XREF: sub_5C64+24↑j
.text:0000000000005C9C                                         ; sub_5C64+28↑j
.text:0000000000005C9C                 STR             X2, [X1]
.text:0000000000005CA0                 RET
.text:0000000000005CA0 ; } // starts at 5C64
.text:0000000000005CA0 ; End of function sub_5C64
.text:0000000000005CA4 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CA4 ; Attributes: bp-based frame fpd=0x40
.text:0000000000005CA4 sub_5CA4                                ; CODE XREF: sub_618C+100↓p
.text:0000000000005CA4                                         ; sub_6684+2D0↓p ...
.text:0000000000005CA4 var_40          = -0x40
.text:0000000000005CA4 var_30          = -0x30
.text:0000000000005CA4 var_20          = -0x20
.text:0000000000005CA4 var_8           = -8
.text:0000000000005CA4 ; __unwind {
.text:0000000000005CA4                 STP             X29, X30, [SP,#var_40]!
.text:0000000000005CA8                 MOV             X29, SP
.text:0000000000005CAC                 STP             X19, X20, [SP,#0x40+var_30]
.text:0000000000005CB0                 UXTB            W20, W0
.text:0000000000005CB4                 MOV             X19, X2
.text:0000000000005CB8                 STP             X21, X22, [SP,#0x40+var_20]
.text:0000000000005CBC                 CMP             W20, #0x50 ; 'P'
.text:0000000000005CC0                 MOV             X22, X1
.text:0000000000005CC4                 MOV             X21, X3
.text:0000000000005CC8                 B.NE            loc_5CDC
.text:0000000000005CCC                 ADD             X19, X2, #7
.text:0000000000005CD0                 AND             X0, X19, #0xFFFFFFFFFFFFFFF8
.text:0000000000005CD4                 LDR             X1, [X0],#8
.text:0000000000005CD8                 B               loc_5D80
.text:0000000000005CDC ; ---------------------------------------------------------------------------
.text:0000000000005CDC loc_5CDC                                ; CODE XREF: sub_5CA4+24↑j
.text:0000000000005CDC                 AND             W1, W20, #0xF
.text:0000000000005CE0                 CMP             W1, #0xC ; switch 13 cases
.text:0000000000005CE4                 B.HI            def_5CFC ; jumptable 0000000000005CFC default case, cases 5-8
.text:0000000000005CE8                 ADRP            X0, #jpt_5CFC@PAGE
.text:0000000000005CEC                 ADD             X0, X0, #jpt_5CFC@PAGEOFF
.text:0000000000005CF0                 LDRB            W0, [X0,W1,UXTW]
.text:0000000000005CF4                 ADR             X1, loc_5D00 ; jumptable 0000000000005CFC case 1
.text:0000000000005CF8                 ADD             X0, X1, W0,SXTB#2
.text:0000000000005CFC                 BR              X0      ; switch jump
.text:0000000000005D00 ; ---------------------------------------------------------------------------
.text:0000000000005D00 loc_5D00                                ; CODE XREF: sub_5CA4+58↑j
.text:0000000000005D00                                         ; DATA XREF: sub_5CA4+50↑o
.text:0000000000005D00                 MOV             X0, X2  ; jumptable 0000000000005CFC case 1
.text:0000000000005D04                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000005D08                 BL              sub_5C3C
.text:0000000000005D0C                 B               loc_5D1C
.text:0000000000005D10 ; ---------------------------------------------------------------------------
.text:0000000000005D10 loc_5D10                                ; CODE XREF: sub_5CA4+58↑j
.text:0000000000005D10                 MOV             X0, X2  ; jumptable 0000000000005CFC case 9
.text:0000000000005D14                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000005D18                 BL              sub_5C64
.text:0000000000005D1C loc_5D1C                                ; CODE XREF: sub_5CA4+68↑j
.text:0000000000005D1C                 LDR             X1, [X29,#0x40+var_8]
.text:0000000000005D20                 B               loc_5D64
.text:0000000000005D24 ; ---------------------------------------------------------------------------
.text:0000000000005D24 loc_5D24                                ; CODE XREF: sub_5CA4+58↑j
.text:0000000000005D24                 MOV             X0, X2  ; jumptable 0000000000005CFC case 2
.text:0000000000005D28                 LDRH            W1, [X0],#2
.text:0000000000005D2C                 B               loc_5D64
.text:0000000000005D30 ; ---------------------------------------------------------------------------
.text:0000000000005D30 loc_5D30                                ; CODE XREF: sub_5CA4+58↑j
.text:0000000000005D30                 MOV             X0, X2  ; jumptable 0000000000005CFC case 3
.text:0000000000005D34                 LDR             W1, [X0],#4
.text:0000000000005D38                 B               loc_5D64
.text:0000000000005D3C ; ---------------------------------------------------------------------------
.text:0000000000005D3C loc_5D3C                                ; CODE XREF: sub_5CA4+58↑j
.text:0000000000005D3C                 MOV             X0, X2  ; jumptable 0000000000005CFC case 10
.text:0000000000005D40                 LDRSH           X1, [X0],#2
.text:0000000000005D44                 B               loc_5D64
.text:0000000000005D48 ; ---------------------------------------------------------------------------
.text:0000000000005D48 loc_5D48                                ; CODE XREF: sub_5CA4+58↑j
.text:0000000000005D48                 MOV             X0, X2  ; jumptable 0000000000005CFC case 11
.text:0000000000005D4C                 LDRSW           X1, [X0],#4
.text:0000000000005D50                 B               loc_5D64
.text:0000000000005D54 ; ---------------------------------------------------------------------------
.text:0000000000005D54 loc_5D54                                ; CODE XREF: sub_5CA4+58↑j
.text:0000000000005D54                 MOV             X0, X2  ; jumptable 0000000000005CFC cases 0,4,12
.text:0000000000005D58                 LDR             X1, [X0],#8
.text:0000000000005D5C                 B               loc_5D64
.text:0000000000005D60 ; ---------------------------------------------------------------------------
.text:0000000000005D60 def_5CFC                                ; CODE XREF: sub_5CA4+40↑j
.text:0000000000005D60                                         ; sub_5CA4+58↑j
.text:0000000000005D60                 BL              .abort  ; jumptable 0000000000005CFC default case, cases 5-8
.text:0000000000005D64 ; ---------------------------------------------------------------------------
.text:0000000000005D64 loc_5D64                                ; CODE XREF: sub_5CA4+7C↑j
.text:0000000000005D64                                         ; sub_5CA4+88↑j ...
.text:0000000000005D64                 CBZ             X1, loc_5D80
.text:0000000000005D68                 AND             W2, W20, #0x70
.text:0000000000005D6C                 CMP             W2, #0x10
.text:0000000000005D70                 CSEL            X19, X19, X22, EQ
.text:0000000000005D74                 ADD             X1, X1, X19
.text:0000000000005D78                 TBZ             W20, #7, loc_5D80
.text:0000000000005D7C                 LDR             X1, [X1]
.text:0000000000005D80 loc_5D80                                ; CODE XREF: sub_5CA4+34↑j
.text:0000000000005D80                                         ; sub_5CA4:loc_5D64↑j ...
.text:0000000000005D80                 STR             X1, [X21]
.text:0000000000005D84                 LDP             X19, X20, [SP,#0x40+var_30]
.text:0000000000005D88                 LDP             X21, X22, [SP,#0x40+var_20]
.text:0000000000005D8C                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:0000000000005D90                 RET
.text:0000000000005D90 ; } // starts at 5CA4
.text:0000000000005D90 ; End of function sub_5CA4
.text:0000000000005D94 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D94 sub_5D94                                ; CODE XREF: sub_7268+70↓p
.text:0000000000005D94                                         ; DATA XREF: sub_7268+7C↓o ...
.text:0000000000005D94 ; __unwind {
.text:0000000000005D94                 ADRP            X2, #byte_C000@PAGE
.text:0000000000005D98                 MOV             W0, #8
.text:0000000000005D9C                 MOV             X1, X2
.text:0000000000005DA0                 STRB            W0, [X2,#byte_C000@PAGEOFF]
.text:0000000000005DA4                 STRB            W0, [X1,#(byte_C001 - 0xC000)]
.text:0000000000005DA8                 STRB            W0, [X1,#(byte_C002 - 0xC000)]
.text:0000000000005DAC                 STRB            W0, [X1,#(byte_C003 - 0xC000)]
.text:0000000000005DB0                 STRB            W0, [X1,#(byte_C004 - 0xC000)]
.text:0000000000005DB4                 STRB            W0, [X1,#(byte_C005 - 0xC000)]
.text:0000000000005DB8                 STRB            W0, [X1,#(byte_C006 - 0xC000)]
.text:0000000000005DBC                 STRB            W0, [X1,#(byte_C007 - 0xC000)]
.text:0000000000005DC0                 STRB            W0, [X1,#(byte_C008 - 0xC000)]
.text:0000000000005DC4                 STRB            W0, [X1,#(byte_C009 - 0xC000)]
.text:0000000000005DC8                 STRB            W0, [X1,#(byte_C00A - 0xC000)]
.text:0000000000005DCC                 STRB            W0, [X1,#(byte_C00B - 0xC000)]
.text:0000000000005DD0                 STRB            W0, [X1,#(byte_C00C - 0xC000)]
.text:0000000000005DD4                 STRB            W0, [X1,#(byte_C00D - 0xC000)]
.text:0000000000005DD8                 STRB            W0, [X1,#(byte_C00E - 0xC000)]
.text:0000000000005DDC                 STRB            W0, [X1,#(byte_C00F - 0xC000)]
.text:0000000000005DE0                 STRB            W0, [X1,#(byte_C010 - 0xC000)]
.text:0000000000005DE4                 STRB            W0, [X1,#(byte_C011 - 0xC000)]
.text:0000000000005DE8                 STRB            W0, [X1,#(byte_C012 - 0xC000)]
.text:0000000000005DEC                 STRB            W0, [X1,#(byte_C013 - 0xC000)]
.text:0000000000005DF0                 STRB            W0, [X1,#(byte_C014 - 0xC000)]
.text:0000000000005DF4                 STRB            W0, [X1,#(byte_C015 - 0xC000)]
.text:0000000000005DF8                 STRB            W0, [X1,#(byte_C016 - 0xC000)]
.text:0000000000005DFC                 STRB            W0, [X1,#(byte_C017 - 0xC000)]
.text:0000000000005E00                 STRB            W0, [X1,#(byte_C018 - 0xC000)]
.text:0000000000005E04                 STRB            W0, [X1,#(byte_C019 - 0xC000)]
.text:0000000000005E08                 STRB            W0, [X1,#(byte_C01A - 0xC000)]
.text:0000000000005E0C                 STRB            W0, [X1,#(byte_C01B - 0xC000)]
.text:0000000000005E10                 STRB            W0, [X1,#(byte_C01C - 0xC000)]
.text:0000000000005E14                 STRB            W0, [X1,#(byte_C01D - 0xC000)]
.text:0000000000005E18                 STRB            W0, [X1,#(byte_C01E - 0xC000)]
.text:0000000000005E1C                 STRB            W0, [X1,#(byte_C01F - 0xC000)]
.text:0000000000005E20                 STRB            W0, [X1,#(byte_C040 - 0xC000)]
.text:0000000000005E24                 STRB            W0, [X1,#(byte_C041 - 0xC000)]
.text:0000000000005E28                 STRB            W0, [X1,#(byte_C042 - 0xC000)]
.text:0000000000005E2C                 STRB            W0, [X1,#(byte_C043 - 0xC000)]
.text:0000000000005E30                 STRB            W0, [X1,#(byte_C044 - 0xC000)]
.text:0000000000005E34                 STRB            W0, [X1,#(byte_C045 - 0xC000)]
.text:0000000000005E38                 STRB            W0, [X1,#(byte_C046 - 0xC000)]
.text:0000000000005E3C                 STRB            W0, [X1,#(byte_C047 - 0xC000)]
.text:0000000000005E40                 STRB            W0, [X1,#(byte_C048 - 0xC000)]
.text:0000000000005E44                 STRB            W0, [X1,#(byte_C049 - 0xC000)]
.text:0000000000005E48                 STRB            W0, [X1,#(byte_C04A - 0xC000)]
.text:0000000000005E4C                 STRB            W0, [X1,#(byte_C04B - 0xC000)]
.text:0000000000005E50                 STRB            W0, [X1,#(byte_C04C - 0xC000)]
.text:0000000000005E54                 STRB            W0, [X1,#(byte_C04D - 0xC000)]
.text:0000000000005E58                 STRB            W0, [X1,#(byte_C04E - 0xC000)]
.text:0000000000005E5C                 STRB            W0, [X1,#(byte_C04F - 0xC000)]
.text:0000000000005E60                 STRB            W0, [X1,#(byte_C050 - 0xC000)]
.text:0000000000005E64                 STRB            W0, [X1,#(byte_C051 - 0xC000)]
.text:0000000000005E68                 STRB            W0, [X1,#(byte_C052 - 0xC000)]
.text:0000000000005E6C                 STRB            W0, [X1,#(byte_C053 - 0xC000)]
.text:0000000000005E70                 STRB            W0, [X1,#(byte_C054 - 0xC000)]
.text:0000000000005E74                 STRB            W0, [X1,#(byte_C055 - 0xC000)]
.text:0000000000005E78                 STRB            W0, [X1,#(byte_C056 - 0xC000)]
.text:0000000000005E7C                 STRB            W0, [X1,#(byte_C057 - 0xC000)]
.text:0000000000005E80                 STRB            W0, [X1,#(byte_C058 - 0xC000)]
.text:0000000000005E84                 STRB            W0, [X1,#(byte_C059 - 0xC000)]
.text:0000000000005E88                 STRB            W0, [X1,#(byte_C05A - 0xC000)]
.text:0000000000005E8C                 STRB            W0, [X1,#(byte_C05B - 0xC000)]
.text:0000000000005E90                 STRB            W0, [X1,#(byte_C05C - 0xC000)]
.text:0000000000005E94                 STRB            W0, [X1,#(byte_C05D - 0xC000)]
.text:0000000000005E98                 STRB            W0, [X1,#(byte_C05E - 0xC000)]
.text:0000000000005E9C                 STRB            W0, [X1,#(byte_C05F - 0xC000)]
.text:0000000000005EA0                 STRB            W0, [X1,#(byte_C060 - 0xC000)]
.text:0000000000005EA4                 RET
.text:0000000000005EA4 ; } // starts at 5D94
.text:0000000000005EA4 ; End of function sub_5D94
.text:0000000000005EA8 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EA8 ; Attributes: bp-based frame
.text:0000000000005EA8 sub_5EA8                                ; CODE XREF: sub_5F3C+3C↓p
.text:0000000000005EA8                                         ; sub_705C+60↓p ...
.text:0000000000005EA8 var_s0          =  0
.text:0000000000005EA8 ; __unwind {
.text:0000000000005EA8                 ADRP            X3, #byte_C01F@PAGE
.text:0000000000005EAC                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000005EB0                 MOV             X29, SP
.text:0000000000005EB4                 LDRB            W3, [X3,#byte_C01F@PAGEOFF]
.text:0000000000005EB8                 CMP             W3, #8
.text:0000000000005EBC                 B.NE            loc_5ED4
.text:0000000000005EC0                 STR             X1, [X2]
.text:0000000000005EC4                 LDR             X1, [X0,#0x340]
.text:0000000000005EC8                 TBZ             X1, #0x3E, loc_5ED8 ; '>'
.text:0000000000005ECC                 STRB            WZR, [X0,#0x377]
.text:0000000000005ED0                 B               loc_5ED8
.text:0000000000005ED4 ; ---------------------------------------------------------------------------
.text:0000000000005ED4 loc_5ED4                                ; CODE XREF: sub_5EA8+14↑j
.text:0000000000005ED4                 BL              .abort
.text:0000000000005ED8 ; ---------------------------------------------------------------------------
.text:0000000000005ED8 loc_5ED8                                ; CODE XREF: sub_5EA8+20↑j
.text:0000000000005ED8                                         ; sub_5EA8+28↑j
.text:0000000000005ED8                 STR             X2, [X0,#0xF8]
.text:0000000000005EDC                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000005EE0                 RET
.text:0000000000005EE0 ; } // starts at 5EA8
.text:0000000000005EE0 ; End of function sub_5EA8
.text:0000000000005EE4 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EE4 ; Attributes: bp-based frame
.text:0000000000005EE4 sub_5EE4                                ; CODE XREF: sub_5F3C+E8↓p
.text:0000000000005EE4                                         ; sub_6AA8+1EC↓p ...
.text:0000000000005EE4 var_s0          =  0
.text:0000000000005EE4 ; __unwind {
.text:0000000000005EE4                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000005EE8                 CMP             W1, #0x61 ; 'a'
.text:0000000000005EEC                 MOV             X29, SP
.text:0000000000005EF0                 B.LE            loc_5EF8
.text:0000000000005EF4 loc_5EF4                                ; CODE XREF: sub_5EE4+48↓j
.text:0000000000005EF4                 BL              .abort
.text:0000000000005EF8 ; ---------------------------------------------------------------------------
.text:0000000000005EF8 loc_5EF8                                ; CODE XREF: sub_5EE4+C↑j
.text:0000000000005EF8                 ADRP            X3, #byte_C000@PAGE
.text:0000000000005EFC                 SXTW            X2, W1
.text:0000000000005F00                 ADD             X3, X3, #byte_C000@PAGEOFF
.text:0000000000005F04                 LDR             X4, [X0,#0x340]
.text:0000000000005F08                 LDR             X1, [X0,W1,SXTW#3]
.text:0000000000005F0C                 LDRB            W3, [X3,X2]
.text:0000000000005F10                 TBZ             X4, #0x3E, loc_5F28 ; '>'
.text:0000000000005F14                 ADD             X2, X0, X2
.text:0000000000005F18                 LDRB            W0, [X2,#0x358]
.text:0000000000005F1C                 CBZ             W0, loc_5F28
.text:0000000000005F20                 MOV             X0, X1
.text:0000000000005F24                 B               loc_5F34
.text:0000000000005F28 ; ---------------------------------------------------------------------------
.text:0000000000005F28 loc_5F28                                ; CODE XREF: sub_5EE4+2C↑j
.text:0000000000005F28                                         ; sub_5EE4+38↑j
.text:0000000000005F28                 CMP             W3, #8
.text:0000000000005F2C                 B.NE            loc_5EF4
.text:0000000000005F30                 LDR             X0, [X1]
.text:0000000000005F34 loc_5F34                                ; CODE XREF: sub_5EE4+40↑j
.text:0000000000005F34                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000005F38                 RET
.text:0000000000005F38 ; } // starts at 5EE4
.text:0000000000005F38 ; End of function sub_5EE4
.text:0000000000005F3C ; =============== S U B R O U T I N E =======================================
.text:0000000000005F3C ; Attributes: bp-based frame fpd=0x40
.text:0000000000005F3C sub_5F3C                                ; CODE XREF: sub_7634+110↓p
.text:0000000000005F3C                                         ; .text:0000000000007840↓p ...
.text:0000000000005F3C var_40          = -0x40
.text:0000000000005F3C var_30          = -0x30
.text:0000000000005F3C var_20          = -0x20
.text:0000000000005F3C ; __unwind {
.text:0000000000005F3C                 STP             X29, X30, [SP,#var_40]!
.text:0000000000005F40                 MOV             X29, SP
.text:0000000000005F44                 STP             X21, X22, [SP,#0x40+var_20]
.text:0000000000005F48                 MOV             X21, X0
.text:0000000000005F4C                 LDR             X0, [X1,#0x340]
.text:0000000000005F50                 STP             X19, X20, [SP,#0x40+var_30]
.text:0000000000005F54                 MOV             X19, X1
.text:0000000000005F58                 TBZ             X0, #0x3E, loc_5F64 ; '>'
.text:0000000000005F5C                 LDRB            W0, [X1,#0x377]
.text:0000000000005F60                 CBNZ            W0, loc_5F7C
.text:0000000000005F64 loc_5F64                                ; CODE XREF: sub_5F3C+1C↑j
.text:0000000000005F64                 LDR             X0, [X19,#0xF8]
.text:0000000000005F68                 CBNZ            X0, loc_5F7C
.text:0000000000005F6C                 LDR             X1, [X19,#0x310]
.text:0000000000005F70                 MOV             X0, X19
.text:0000000000005F74                 ADD             X2, X29, #0x38 ; '8'
.text:0000000000005F78                 BL              sub_5EA8
.text:0000000000005F7C loc_5F7C                                ; CODE XREF: sub_5F3C+24↑j
.text:0000000000005F7C                                         ; sub_5F3C+2C↑j
.text:0000000000005F7C                 MOV             X20, #(byte_C000 - 0xC000)
.text:0000000000005F80                 ADRP            X22, #0xC000
.text:0000000000005F84 loc_5F84                                ; CODE XREF: sub_5F3C+BC↓j
.text:0000000000005F84                 ADD             X2, X21, X20
.text:0000000000005F88                 LDR             X0, [X21,X20,LSL#3] ; dest
.text:0000000000005F8C                 LDR             X1, [X19,X20,LSL#3] ; src
.text:0000000000005F90                 LDRB            W2, [X2,#0x358]
.text:0000000000005F94                 CBZ             W2, loc_5F9C
.text:0000000000005F98 loc_5F98                                ; CODE XREF: sub_5F3C+84↓j
.text:0000000000005F98                 BL              .abort
.text:0000000000005F9C ; ---------------------------------------------------------------------------
.text:0000000000005F9C loc_5F9C                                ; CODE XREF: sub_5F3C+58↑j
.text:0000000000005F9C                 ADD             X3, X19, X20
.text:0000000000005FA0                 CMP             X0, XZR
.text:0000000000005FA4                 CSET            W2, NE
.text:0000000000005FA8                 LDRB            W3, [X3,#0x358]
.text:0000000000005FAC                 CBZ             W3, loc_5FCC
.text:0000000000005FB0                 CBZ             W2, loc_5FCC
.text:0000000000005FB4                 MOV             X2, X22
.text:0000000000005FB8                 LDRB            W2, [X20,X2]
.text:0000000000005FBC                 CMP             W2, #8
.text:0000000000005FC0                 B.NE            loc_5F98
.text:0000000000005FC4                 STR             X1, [X0]
.text:0000000000005FC8                 B               loc_5FF0
.text:0000000000005FCC ; ---------------------------------------------------------------------------
.text:0000000000005FCC loc_5FCC                                ; CODE XREF: sub_5F3C+70↑j
.text:0000000000005FCC                                         ; sub_5F3C+74↑j
.text:0000000000005FCC                 CMP             X1, XZR
.text:0000000000005FD0                 CSET            W3, NE
.text:0000000000005FD4                 TST             W2, W3
.text:0000000000005FD8                 B.EQ            loc_5FF0
.text:0000000000005FDC                 CMP             X1, X0
.text:0000000000005FE0                 B.EQ            loc_5FF0
.text:0000000000005FE4                 MOV             X2, X22
.text:0000000000005FE8                 LDRB            W2, [X2,X20] ; n
.text:0000000000005FEC                 BL              .memcpy
.text:0000000000005FF0 loc_5FF0                                ; CODE XREF: sub_5F3C+8C↑j
.text:0000000000005FF0                                         ; sub_5F3C+9C↑j ...
.text:0000000000005FF0                 ADD             X20, X20, #1
.text:0000000000005FF4                 CMP             X20, #0x61 ; 'a'
.text:0000000000005FF8                 B.NE            loc_5F84
.text:0000000000005FFC                 LDR             X0, [X21,#0x340]
.text:0000000000006000                 TBZ             X0, #0x3E, loc_6010 ; '>'
.text:0000000000006004                 LDRB            W1, [X21,#0x377]
.text:0000000000006008                 MOV             X0, #0
.text:000000000000600C                 CBNZ            W1, loc_6038
.text:0000000000006010 loc_6010                                ; CODE XREF: sub_5F3C+C4↑j
.text:0000000000006010                 LDR             X1, [X21,#0xF8]
.text:0000000000006014                 MOV             X0, #0
.text:0000000000006018                 CBNZ            X1, loc_6038
.text:000000000000601C                 MOV             W1, #0x1F
.text:0000000000006020                 MOV             X0, X19
.text:0000000000006024                 BL              sub_5EE4
.text:0000000000006028                 LDR             X1, [X21,#0x310]
.text:000000000000602C                 LDR             X21, [X19,#0x350]
.text:0000000000006030                 SUB             X0, X0, X1
.text:0000000000006034                 ADD             X0, X0, X21
.text:0000000000006038 loc_6038                                ; CODE XREF: sub_5F3C+D0↑j
.text:0000000000006038                                         ; sub_5F3C+DC↑j
.text:0000000000006038                 LDP             X19, X20, [SP,#0x40+var_30]
.text:000000000000603C                 LDP             X21, X22, [SP,#0x40+var_20]
.text:0000000000006040                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:0000000000006044                 RET
.text:0000000000006044 ; } // starts at 5F3C
.text:0000000000006044 ; End of function sub_5F3C
.text:0000000000006048 ; =============== S U B R O U T I N E =======================================
.text:0000000000006048 sub_6048                                ; CODE XREF: sub_7390+3C↓p
.text:0000000000006048                                         ; sub_7634+D4↓p
.text:0000000000006048 ; __unwind {
.text:0000000000006048                 LDR             X0, [X0,#0x310]
.text:000000000000604C                 RET
.text:000000000000604C ; } // starts at 6048
.text:000000000000604C ; End of function sub_6048
.text:0000000000006050 ; ---------------------------------------------------------------------------
.text:0000000000006050 ; __unwind {
.text:0000000000006050                 STP             X29, X30, [SP,#-0x10]!
.text:0000000000006054                 CMP             W1, #0x61 ; 'a'
.text:0000000000006058                 MOV             X29, SP
.text:000000000000605C                 B.LE            loc_6064
.text:0000000000006060 loc_6060                                ; CODE XREF: .text:0000000000006098↓j
.text:0000000000006060                 BL              .abort
.text:0000000000006064 ; ---------------------------------------------------------------------------
.text:0000000000006064 loc_6064                                ; CODE XREF: .text:000000000000605C↑j
.text:0000000000006064                 ADRP            X4, #byte_C000@PAGE
.text:0000000000006068                 SXTW            X3, W1
.text:000000000000606C                 ADD             X4, X4, #byte_C000@PAGEOFF
.text:0000000000006070                 LDR             X5, [X0,#0x340]
.text:0000000000006074                 LDRB            W4, [X4,X3]
.text:0000000000006078                 TBZ             X5, #0x3E, loc_6090 ; '>'
.text:000000000000607C                 ADD             X3, X0, X3
.text:0000000000006080                 LDRB            W3, [X3,#0x358]
.text:0000000000006084                 CBZ             W3, loc_6090
.text:0000000000006088                 STR             X2, [X0,W1,SXTW#3]
.text:000000000000608C                 B               loc_60A0
.text:0000000000006090 ; ---------------------------------------------------------------------------
.text:0000000000006090 loc_6090                                ; CODE XREF: .text:0000000000006078↑j
.text:0000000000006090                                         ; .text:0000000000006084↑j
.text:0000000000006090                 CMP             W4, #8
.text:0000000000006094                 LDR             X0, [X0,W1,SXTW#3]
.text:0000000000006098                 B.NE            loc_6060
.text:000000000000609C                 STR             X2, [X0]
.text:00000000000060A0 loc_60A0                                ; CODE XREF: .text:000000000000608C↑j
.text:00000000000060A0                 LDP             X29, X30, [SP],#0x10
.text:00000000000060A4                 RET
.text:00000000000060A4 ; } // starts at 6050
.text:00000000000060A8 ; ---------------------------------------------------------------------------
.text:00000000000060A8 ; __unwind {
.text:00000000000060A8                 LDR             X0, [X0,#0x318]
.text:00000000000060AC                 RET
.text:00000000000060AC ; } // starts at 60A8
.text:00000000000060B0 ; ---------------------------------------------------------------------------
.text:00000000000060B0 ; __unwind {
.text:00000000000060B0                 LDR             X2, [X0,#0x340]
.text:00000000000060B4                 LDR             X0, [X0,#0x318]
.text:00000000000060B8                 LSR             X2, X2, #0x3F ; '?'
.text:00000000000060BC                 STR             W2, [X1]
.text:00000000000060C0                 RET
.text:00000000000060C0 ; } // starts at 60B0
.text:00000000000060C4 ; ---------------------------------------------------------------------------
.text:00000000000060C4 ; __unwind {
.text:00000000000060C4                 STR             X1, [X0,#0x318]
.text:00000000000060C8                 RET
.text:00000000000060C8 ; } // starts at 60C4
.text:00000000000060CC ; ---------------------------------------------------------------------------
.text:00000000000060CC ; __unwind {
.text:00000000000060CC                 LDR             X0, [X0,#0x320]
.text:00000000000060D0                 RET
.text:00000000000060D0 ; } // starts at 60CC
.text:00000000000060D4 ; ---------------------------------------------------------------------------
.text:00000000000060D4 ; START OF FUNCTION CHUNK FOR sub_6114
.text:00000000000060D4 loc_60D4                                ; CODE XREF: sub_6114+64↓j
.text:00000000000060D4 ; __unwind {
.text:00000000000060D4                 LDR             X0, [X0,#0x338]
.text:00000000000060D8                 RET
.text:00000000000060D8 ; } // starts at 60D4
.text:00000000000060D8 ; END OF FUNCTION CHUNK FOR sub_6114
.text:00000000000060DC ; ---------------------------------------------------------------------------
.text:00000000000060DC ; __unwind {
.text:00000000000060DC                 STP             X29, X30, [SP,#-0x30]!
.text:00000000000060E0                 SUB             X0, X0, #1
.text:00000000000060E4                 MOV             X29, SP
.text:00000000000060E8                 ADD             X1, X29, #0x18
.text:00000000000060EC                 BL              sub_9224
.text:00000000000060F0                 CMP             X0, XZR
.text:00000000000060F4                 LDR             X0, [X29,#0x28]
.text:00000000000060F8                 LDP             X29, X30, [SP],#0x30
.text:00000000000060FC                 CSEL            X0, X0, XZR, NE
.text:0000000000006100                 RET
.text:0000000000006100 ; } // starts at 60DC
.text:0000000000006104 ; ---------------------------------------------------------------------------
.text:0000000000006104 ; START OF FUNCTION CHUNK FOR sub_6114
.text:0000000000006104 loc_6104                                ; CODE XREF: sub_6114+54↓j
.text:0000000000006104 ; __unwind {
.text:0000000000006104                 LDR             X0, [X0,#0x330]
.text:0000000000006108                 RET
.text:0000000000006108 ; } // starts at 6104
.text:000000000000610C ; ---------------------------------------------------------------------------
.text:000000000000610C loc_610C                                ; CODE XREF: sub_6114+5C↓j
.text:000000000000610C ; __unwind {
.text:000000000000610C                 LDR             X0, [X0,#0x328]
.text:0000000000006110                 RET
.text:0000000000006110 ; } // starts at 610C
.text:0000000000006110 ; END OF FUNCTION CHUNK FOR sub_6114
.text:0000000000006114 ; =============== S U B R O U T I N E =======================================
.text:0000000000006114 ; Attributes: bp-based frame
.text:0000000000006114 sub_6114                                ; CODE XREF: sub_618C+E8↓p
.text:0000000000006114                                         ; sub_6684+2BC↓p ...
.text:0000000000006114 var_s0          =  0
.text:0000000000006114 ; FUNCTION CHUNK AT .text:00000000000060D4 SIZE 00000008 BYTES
.text:0000000000006114 ; FUNCTION CHUNK AT .text:0000000000006104 SIZE 00000010 BYTES
.text:0000000000006114 ; __unwind {
.text:0000000000006114                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000006118                 UXTB            W2, W0
.text:000000000000611C                 MOV             X0, X1
.text:0000000000006120                 CMP             W2, #0xFF
.text:0000000000006124                 MOV             X29, SP
.text:0000000000006128                 B.EQ            loc_6180
.text:000000000000612C                 AND             W2, W2, #0x70
.text:0000000000006130                 CMP             W2, #0x20 ; ' '
.text:0000000000006134                 B.EQ            loc_616C
.text:0000000000006138                 B.HI            loc_614C
.text:000000000000613C                 CBZ             W2, loc_6180
.text:0000000000006140                 CMP             W2, #0x10
.text:0000000000006144                 B.NE            loc_617C
.text:0000000000006148                 B               loc_6180
.text:000000000000614C ; ---------------------------------------------------------------------------
.text:000000000000614C loc_614C                                ; CODE XREF: sub_6114+24↑j
.text:000000000000614C                 CMP             W2, #0x40 ; '@'
.text:0000000000006150                 B.EQ            loc_6174
.text:0000000000006154                 CMP             W2, #0x50 ; 'P'
.text:0000000000006158                 B.EQ            loc_6180
.text:000000000000615C                 CMP             W2, #0x30 ; '0'
.text:0000000000006160                 B.NE            loc_617C
.text:0000000000006164                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000006168                 B               loc_6104
.text:000000000000616C ; ---------------------------------------------------------------------------
.text:000000000000616C loc_616C                                ; CODE XREF: sub_6114+20↑j
.text:000000000000616C                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000006170                 B               loc_610C
.text:0000000000006174 ; ---------------------------------------------------------------------------
.text:0000000000006174 loc_6174                                ; CODE XREF: sub_6114+3C↑j
.text:0000000000006174                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000006178                 B               loc_60D4
.text:000000000000617C ; ---------------------------------------------------------------------------
.text:000000000000617C loc_617C                                ; CODE XREF: sub_6114+30↑j
.text:000000000000617C                                         ; sub_6114+4C↑j
.text:000000000000617C                 BL              .abort
.text:0000000000006180 ; ---------------------------------------------------------------------------
.text:0000000000006180 loc_6180                                ; CODE XREF: sub_6114+14↑j
.text:0000000000006180                                         ; sub_6114+28↑j ...
.text:0000000000006180                 MOV             X0, #0
.text:0000000000006184                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000006188                 RET
.text:0000000000006188 ; } // starts at 6114
.text:0000000000006188 ; End of function sub_6114
.text:000000000000618C ; =============== S U B R O U T I N E =======================================
.text:000000000000618C ; Attributes: bp-based frame fpd=0x90
.text:000000000000618C sub_618C                                ; CODE XREF: sub_6684+31C↓p
.text:000000000000618C                                         ; sub_6684+3F8↓p
.text:000000000000618C var_90          = -0x90
.text:000000000000618C var_80          = -0x80
.text:000000000000618C var_70          = -0x70
.text:000000000000618C var_60          = -0x60
.text:000000000000618C var_50          = -0x50
.text:000000000000618C var_40          = -0x40
.text:000000000000618C var_28          = -0x28
.text:000000000000618C var_18          = -0x18
.text:000000000000618C var_10          = -0x10
.text:000000000000618C var_8           = -8
.text:000000000000618C ; __unwind {
.text:000000000000618C                 STP             X29, X30, [SP,#var_90]!
.text:0000000000006190                 MOV             X29, SP
.text:0000000000006194                 STP             X21, X22, [SP,#0x90+var_70]
.text:0000000000006198                 STP             X23, X24, [SP,#0x90+var_60]
.text:000000000000619C                 STP             X25, X26, [SP,#0x90+var_50]
.text:00000000000061A0                 STP             X27, X28, [SP,#0x90+var_40]
.text:00000000000061A4                 STP             X19, X20, [SP,#0x90+var_80]
.text:00000000000061A8                 ADRP            X27, #jpt_6260@PAGE
.text:00000000000061AC                 MOV             X28, X1
.text:00000000000061B0                 MOV             X26, X2
.text:00000000000061B4                 MOV             X19, X3
.text:00000000000061B8                 STR             XZR, [X3,#0x620]
.text:00000000000061BC                 MOV             X24, #0
.text:00000000000061C0                 ADD             X27, X27, #jpt_6260@PAGEOFF
.text:00000000000061C4                 ADD             X22, X29, #0x78 ; 'x'
.text:00000000000061C8                 ADD             X21, X29, #0x80
.text:00000000000061CC                 MOV             W23, #1
.text:00000000000061D0                 ADD             X25, X29, #0x88
.text:00000000000061D4 loc_61D4                                ; CODE XREF: sub_618C+4D4↓j
.text:00000000000061D4                 CMP             X0, X28
.text:00000000000061D8                 B.CS            loc_6664
.text:00000000000061DC                 LDR             X1, [X26,#0x340]
.text:00000000000061E0                 LDR             X3, [X26,#0x318]
.text:00000000000061E4                 LDR             X2, [X19,#0x648]
.text:00000000000061E8                 ADD             X1, X3, X1,LSR#63
.text:00000000000061EC                 CMP             X2, X1
.text:00000000000061F0                 B.CS            loc_6664
.text:00000000000061F4                 LDRB            W1, [X0]
.text:00000000000061F8                 ADD             X20, X0, #1
.text:00000000000061FC                 AND             W3, W1, #0xC0
.text:0000000000006200                 CMP             W3, #0x40 ; '@'
.text:0000000000006204                 B.NE            loc_621C
.text:0000000000006208                 LDR             X0, [X19,#0x660]
.text:000000000000620C                 AND             X1, X1, #0x3F
.text:0000000000006210                 MADD            X1, X1, X0, X2
.text:0000000000006214                 STR             X1, [X19,#0x648]
.text:0000000000006218                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:000000000000621C ; ---------------------------------------------------------------------------
.text:000000000000621C loc_621C                                ; CODE XREF: sub_618C+78↑j
.text:000000000000621C                 CMP             W3, #0x80
.text:0000000000006220                 B.NE            loc_6234
.text:0000000000006224                 AND             X1, X1, #0x3F
.text:0000000000006228                 MOV             X0, X20
.text:000000000000622C                 STR             X1, [X29,#0x90+var_18]
.text:0000000000006230                 B               loc_62F4
.text:0000000000006234 ; ---------------------------------------------------------------------------
.text:0000000000006234 loc_6234                                ; CODE XREF: sub_618C+94↑j
.text:0000000000006234                 CMP             W3, #0xC0
.text:0000000000006238                 B.NE            loc_624C
.text:000000000000623C                 UBFIZ           X1, X1, #4, #6
.text:0000000000006240                 ADD             X1, X19, X1
.text:0000000000006244                 STR             WZR, [X1,#8]
.text:0000000000006248                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:000000000000624C ; ---------------------------------------------------------------------------
.text:000000000000624C loc_624C                                ; CODE XREF: sub_618C+AC↑j
.text:000000000000624C                 CMP             W1, #0x2F ; switch 48 cases
.text:0000000000006250                 B.HI            def_6260 ; jumptable 0000000000006260 default case, cases 23-44
.text:0000000000006254                 LDRH            W1, [X27,W1,UXTW#1]
.text:0000000000006258                 ADR             X3, loc_6264 ; jumptable 0000000000006260 case 1
.text:000000000000625C                 ADD             X1, X3, W1,SXTH#2
.text:0000000000006260                 BR              X1      ; switch jump
.text:0000000000006264 ; ---------------------------------------------------------------------------
.text:0000000000006264 loc_6264                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006264                                         ; DATA XREF: sub_618C+CC↑o
.text:0000000000006264                 LDRB            W2, [X19,#0x670] ; jumptable 0000000000006260 case 1
.text:0000000000006268                 MOV             X1, X26
.text:000000000000626C                 STR             X2, [X29,#0x90+var_28]
.text:0000000000006270                 MOV             W0, W2
.text:0000000000006274                 BL              sub_6114
.text:0000000000006278                 MOV             X1, X0
.text:000000000000627C                 LDR             X2, [X29,#0x90+var_28]
.text:0000000000006280                 MOV             X3, X25
.text:0000000000006284                 MOV             W0, W2
.text:0000000000006288                 MOV             X2, X20
.text:000000000000628C                 BL              sub_5CA4
.text:0000000000006290                 MOV             X20, X0
.text:0000000000006294                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000006298                 STR             X0, [X19,#0x648]
.text:000000000000629C                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000062A0 ; ---------------------------------------------------------------------------
.text:00000000000062A0 loc_62A0                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000062A0                 LDRB            W1, [X0,#1] ; jumptable 0000000000006260 case 2
.text:00000000000062A4                 ADD             X20, X0, #2
.text:00000000000062A8                 LDR             X3, [X19,#0x660]
.text:00000000000062AC                 MADD            X2, X1, X3, X2
.text:00000000000062B0                 STR             X2, [X19,#0x648]
.text:00000000000062B4                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000062B8 ; ---------------------------------------------------------------------------
.text:00000000000062B8 loc_62B8                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000062B8                 LDURH           W1, [X0,#1] ; jumptable 0000000000006260 case 3
.text:00000000000062BC                 ADD             X20, X0, #3
.text:00000000000062C0                 LDR             X3, [X19,#0x660]
.text:00000000000062C4                 MADD            X2, X1, X3, X2
.text:00000000000062C8                 STR             X2, [X19,#0x648]
.text:00000000000062CC                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000062D0 ; ---------------------------------------------------------------------------
.text:00000000000062D0 loc_62D0                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000062D0                 LDUR            W1, [X0,#1] ; jumptable 0000000000006260 case 4
.text:00000000000062D4                 ADD             X20, X0, #5
.text:00000000000062D8                 LDR             X3, [X19,#0x660]
.text:00000000000062DC                 MADD            X2, X1, X3, X2
.text:00000000000062E0                 STR             X2, [X19,#0x648]
.text:00000000000062E4                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000062E8 ; ---------------------------------------------------------------------------
.text:00000000000062E8 loc_62E8                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000062E8                 MOV             X0, X20 ; jumptable 0000000000006260 case 5
.text:00000000000062EC                 MOV             X1, X22
.text:00000000000062F0                 BL              sub_5C3C
.text:00000000000062F4 loc_62F4                                ; CODE XREF: sub_618C+A4↑j
.text:00000000000062F4                 MOV             X1, X21
.text:00000000000062F8                 BL              sub_5C3C
.text:00000000000062FC                 MOV             X20, X0
.text:0000000000006300                 LDR             X1, [X19,#0x658]
.text:0000000000006304                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006308                 B               loc_64B4
.text:000000000000630C ; ---------------------------------------------------------------------------
.text:000000000000630C loc_630C                                ; CODE XREF: sub_618C+D4↑j
.text:000000000000630C                 MOV             X0, X20 ; jumptable 0000000000006260 cases 6,8
.text:0000000000006310                 MOV             X1, X22
.text:0000000000006314                 BL              sub_5C3C
.text:0000000000006318                 MOV             X20, X0
.text:000000000000631C                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000006320                 CMP             X0, #0x61 ; 'a'
.text:0000000000006324                 B.HI            loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006328                 ADD             X0, X19, X0,LSL#4
.text:000000000000632C                 STR             WZR, [X0,#8]
.text:0000000000006330                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006334 ; ---------------------------------------------------------------------------
.text:0000000000006334 loc_6334                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006334                 MOV             X0, X20 ; jumptable 0000000000006260 case 7
.text:0000000000006338                 MOV             X1, X22
.text:000000000000633C                 BL              sub_5C3C
.text:0000000000006340                 MOV             X20, X0
.text:0000000000006344                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000006348                 CMP             X0, #0x61 ; 'a'
.text:000000000000634C                 B.HI            loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006350                 ADD             X0, X19, X0,LSL#4
.text:0000000000006354                 MOV             W1, #6
.text:0000000000006358                 STR             W1, [X0,#8]
.text:000000000000635C                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006360 ; ---------------------------------------------------------------------------
.text:0000000000006360 loc_6360                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006360                 MOV             X0, X20 ; jumptable 0000000000006260 case 9
.text:0000000000006364                 MOV             X1, X22
.text:0000000000006368                 BL              sub_5C3C
.text:000000000000636C                 MOV             X1, X25
.text:0000000000006370                 BL              sub_5C3C
.text:0000000000006374                 MOV             X20, X0
.text:0000000000006378                 LDR             X0, [X29,#0x90+var_18]
.text:000000000000637C                 CMP             X0, #0x61 ; 'a'
.text:0000000000006380                 B.HI            loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006384                 LSL             X0, X0, #4
.text:0000000000006388                 MOV             W2, #2
.text:000000000000638C                 ADD             X1, X19, X0
.text:0000000000006390                 STR             W2, [X1,#8]
.text:0000000000006394                 LDR             X1, [X29,#0x90+var_8]
.text:0000000000006398                 B               loc_6650
.text:000000000000639C ; ---------------------------------------------------------------------------
.text:000000000000639C loc_639C                                ; CODE XREF: sub_618C+D4↑j
.text:000000000000639C                 CBZ             X24, loc_63AC ; jumptable 0000000000006260 case 10
.text:00000000000063A0                 MOV             X3, X24
.text:00000000000063A4                 LDR             X24, [X24,#0x620]
.text:00000000000063A8                 B               loc_63B4
.text:00000000000063AC ; ---------------------------------------------------------------------------
.text:00000000000063AC loc_63AC                                ; CODE XREF: sub_618C:loc_639C↑j
.text:00000000000063AC                 SUB             SP, SP, #0x660
.text:00000000000063B0                 MOV             X3, SP
.text:00000000000063B4 loc_63B4                                ; CODE XREF: sub_618C+21C↑j
.text:00000000000063B4                 MOV             X0, X3  ; dest
.text:00000000000063B8                 MOV             X1, X19 ; src
.text:00000000000063BC                 MOV             X2, #0x648 ; n
.text:00000000000063C0                 BL              .memcpy
.text:00000000000063C4                 STR             X0, [X19,#0x620]
.text:00000000000063C8                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000063CC ; ---------------------------------------------------------------------------
.text:00000000000063CC loc_63CC                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000063CC                 LDR             X3, [X19,#0x620] ; jumptable 0000000000006260 case 11
.text:00000000000063D0                 MOV             X0, X19 ; dest
.text:00000000000063D4                 MOV             X2, #0x648 ; n
.text:00000000000063D8                 STR             X3, [X29,#0x90+var_28]
.text:00000000000063DC                 MOV             X1, X3  ; src
.text:00000000000063E0                 BL              .memcpy
.text:00000000000063E4                 LDR             X3, [X29,#0x90+var_28]
.text:00000000000063E8                 STR             X24, [X3,#0x620]
.text:00000000000063EC                 MOV             X24, X3
.text:00000000000063F0                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000063F4 ; ---------------------------------------------------------------------------
.text:00000000000063F4 loc_63F4                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000063F4                 MOV             X0, X20 ; jumptable 0000000000006260 case 12
.text:00000000000063F8                 MOV             X1, X21
.text:00000000000063FC                 BL              sub_5C3C
.text:0000000000006400                 LDR             X1, [X29,#0x90+var_10]
.text:0000000000006404                 STR             X1, [X19,#0x630]
.text:0000000000006408                 MOV             X1, X21
.text:000000000000640C                 BL              sub_5C3C
.text:0000000000006410                 MOV             X20, X0
.text:0000000000006414                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006418                 STR             X0, [X19,#0x628]
.text:000000000000641C                 B               loc_6438
.text:0000000000006420 ; ---------------------------------------------------------------------------
.text:0000000000006420 loc_6420                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006420                 MOV             X0, X20 ; jumptable 0000000000006260 case 13
.text:0000000000006424                 MOV             X1, X21
.text:0000000000006428                 BL              sub_5C3C
.text:000000000000642C                 MOV             X20, X0
.text:0000000000006430                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006434                 STR             X0, [X19,#0x630]
.text:0000000000006438 loc_6438                                ; CODE XREF: sub_618C+290↑j
.text:0000000000006438                 STR             W23, [X19,#0x640]
.text:000000000000643C                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006440 ; ---------------------------------------------------------------------------
.text:0000000000006440 loc_6440                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006440                 MOV             X0, X20 ; jumptable 0000000000006260 case 14
.text:0000000000006444                 MOV             X1, X21
.text:0000000000006448                 BL              sub_5C3C
.text:000000000000644C                 MOV             X20, X0
.text:0000000000006450                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006454                 B               loc_6504
.text:0000000000006458 ; ---------------------------------------------------------------------------
.text:0000000000006458 loc_6458                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006458                 MOV             W0, #2  ; jumptable 0000000000006260 case 15
.text:000000000000645C                 STR             X20, [X19,#0x638]
.text:0000000000006460                 STR             W0, [X19,#0x640]
.text:0000000000006464                 MOV             X0, X20
.text:0000000000006468                 B               loc_65B4
.text:000000000000646C ; ---------------------------------------------------------------------------
.text:000000000000646C loc_646C                                ; CODE XREF: sub_618C+D4↑j
.text:000000000000646C                 MOV             X1, X22 ; jumptable 0000000000006260 case 16
.text:0000000000006470                 MOV             X0, X20
.text:0000000000006474                 BL              sub_5C3C
.text:0000000000006478                 LDR             X1, [X29,#0x90+var_18]
.text:000000000000647C                 CMP             X1, #0x61 ; 'a'
.text:0000000000006480                 B.HI            loc_65B4
.text:0000000000006484                 LSL             X1, X1, #4
.text:0000000000006488                 MOV             W3, #3
.text:000000000000648C                 ADD             X2, X19, X1
.text:0000000000006490                 B               loc_65AC
.text:0000000000006494 ; ---------------------------------------------------------------------------
.text:0000000000006494 loc_6494                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006494                 MOV             X0, X20 ; jumptable 0000000000006260 case 17
.text:0000000000006498                 MOV             X1, X22
.text:000000000000649C                 BL              sub_5C3C
.text:00000000000064A0                 MOV             X1, X25
.text:00000000000064A4                 BL              sub_5C64
.text:00000000000064A8                 MOV             X20, X0
.text:00000000000064AC                 LDR             X1, [X19,#0x658]
.text:00000000000064B0                 LDR             X0, [X29,#0x90+var_8]
.text:00000000000064B4 loc_64B4                                ; CODE XREF: sub_618C+17C↑j
.text:00000000000064B4                 MUL             X1, X0, X1
.text:00000000000064B8                 LDR             X0, [X29,#0x90+var_18]
.text:00000000000064BC                 CMP             X0, #0x61 ; 'a'
.text:00000000000064C0                 B.HI            loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000064C4                 LSL             X0, X0, #4
.text:00000000000064C8                 ADD             X2, X19, X0
.text:00000000000064CC                 STR             W23, [X2,#8]
.text:00000000000064D0                 B               loc_6650
.text:00000000000064D4 ; ---------------------------------------------------------------------------
.text:00000000000064D4 loc_64D4                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000064D4                 MOV             X0, X20 ; jumptable 0000000000006260 case 18
.text:00000000000064D8                 MOV             X1, X21
.text:00000000000064DC                 BL              sub_5C3C
.text:00000000000064E0                 LDR             X1, [X29,#0x90+var_10]
.text:00000000000064E4                 STR             X1, [X19,#0x630]
.text:00000000000064E8                 MOV             X1, X25
.text:00000000000064EC                 BL              sub_5C64
.text:00000000000064F0                 STR             W23, [X19,#0x640]
.text:00000000000064F4                 MOV             X20, X0
.text:00000000000064F8 loc_64F8                                ; CODE XREF: sub_618C+390↓j
.text:00000000000064F8                 LDR             X1, [X19,#0x658]
.text:00000000000064FC                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000006500                 MUL             X0, X0, X1
.text:0000000000006504 loc_6504                                ; CODE XREF: sub_618C+2C8↑j
.text:0000000000006504                 STR             X0, [X19,#0x628]
.text:0000000000006508                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:000000000000650C ; ---------------------------------------------------------------------------
.text:000000000000650C loc_650C                                ; CODE XREF: sub_618C+D4↑j
.text:000000000000650C                 MOV             X0, X20 ; jumptable 0000000000006260 case 19
.text:0000000000006510                 MOV             X1, X25
.text:0000000000006514                 BL              sub_5C64
.text:0000000000006518                 MOV             X20, X0
.text:000000000000651C                 B               loc_64F8
.text:0000000000006520 ; ---------------------------------------------------------------------------
.text:0000000000006520 loc_6520                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006520                 MOV             X0, X20 ; jumptable 0000000000006260 case 20
.text:0000000000006524                 MOV             X1, X22
.text:0000000000006528                 BL              sub_5C3C
.text:000000000000652C                 MOV             X1, X21
.text:0000000000006530                 BL              sub_5C3C
.text:0000000000006534                 MOV             X20, X0
.text:0000000000006538                 LDR             X1, [X19,#0x658]
.text:000000000000653C                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006540                 B               loc_6564
.text:0000000000006544 ; ---------------------------------------------------------------------------
.text:0000000000006544 loc_6544                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006544                 MOV             X0, X20 ; jumptable 0000000000006260 case 21
.text:0000000000006548                 MOV             X1, X22
.text:000000000000654C                 BL              sub_5C3C
.text:0000000000006550                 MOV             X1, X25
.text:0000000000006554                 BL              sub_5C64
.text:0000000000006558                 MOV             X20, X0
.text:000000000000655C                 LDR             X1, [X19,#0x658]
.text:0000000000006560                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000006564 loc_6564                                ; CODE XREF: sub_618C+3B4↑j
.text:0000000000006564                 MUL             X1, X0, X1
.text:0000000000006568                 LDR             X0, [X29,#0x90+var_18]
.text:000000000000656C                 CMP             X0, #0x61 ; 'a'
.text:0000000000006570                 B.HI            loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006574                 LSL             X0, X0, #4
.text:0000000000006578                 MOV             W3, #4
.text:000000000000657C                 ADD             X2, X19, X0
.text:0000000000006580                 STR             W3, [X2,#8]
.text:0000000000006584                 B               loc_6650
.text:0000000000006588 ; ---------------------------------------------------------------------------
.text:0000000000006588 loc_6588                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006588                 MOV             X1, X22 ; jumptable 0000000000006260 case 22
.text:000000000000658C                 MOV             X0, X20
.text:0000000000006590                 BL              sub_5C3C
.text:0000000000006594                 LDR             X1, [X29,#0x90+var_18]
.text:0000000000006598                 CMP             X1, #0x61 ; 'a'
.text:000000000000659C                 B.HI            loc_65B4
.text:00000000000065A0                 LSL             X1, X1, #4
.text:00000000000065A4                 MOV             W3, #5
.text:00000000000065A8                 ADD             X2, X19, X1
.text:00000000000065AC loc_65AC                                ; CODE XREF: sub_618C+304↑j
.text:00000000000065AC                 STR             W3, [X2,#8]
.text:00000000000065B0                 STR             X0, [X19,X1]
.text:00000000000065B4 loc_65B4                                ; CODE XREF: sub_618C+2DC↑j
.text:00000000000065B4                                         ; sub_618C+2F4↑j ...
.text:00000000000065B4                 MOV             X1, X21
.text:00000000000065B8                 BL              sub_5C3C
.text:00000000000065BC                 LDR             X20, [X29,#0x90+var_10]
.text:00000000000065C0                 ADD             X20, X0, X20
.text:00000000000065C4                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000065C8 ; ---------------------------------------------------------------------------
.text:00000000000065C8 loc_65C8                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000065C8                 MOV             X0, #0x10 ; jumptable 0000000000006260 case 45
.text:00000000000065CC                 ADD             X2, X19, #0x100
.text:00000000000065D0                 STR             X0, [X29,#0x90+var_18]
.text:00000000000065D4                 MOV             X1, #0
.text:00000000000065D8 loc_65D8                                ; CODE XREF: sub_618C+460↓j
.text:00000000000065D8                 STR             W23, [X2,#8]
.text:00000000000065DC                 ADD             X0, X0, #1
.text:00000000000065E0                 STR             X1, [X2],#0x10
.text:00000000000065E4                 CMP             X0, #0x20 ; ' '
.text:00000000000065E8                 ADD             X1, X1, #8
.text:00000000000065EC                 B.NE            loc_65D8
.text:00000000000065F0                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:00000000000065F4 ; ---------------------------------------------------------------------------
.text:00000000000065F4 loc_65F4                                ; CODE XREF: sub_618C+D4↑j
.text:00000000000065F4                 MOV             X0, X20 ; jumptable 0000000000006260 case 46
.text:00000000000065F8                 MOV             X1, X21
.text:00000000000065FC                 BL              sub_5C3C
.text:0000000000006600                 MOV             X20, X0
.text:0000000000006604                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006608                 STR             X0, [X26,#0x350]
.text:000000000000660C                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006610 ; ---------------------------------------------------------------------------
.text:0000000000006610 loc_6610                                ; CODE XREF: sub_618C+D4↑j
.text:0000000000006610                 MOV             X0, X20 ; jumptable 0000000000006260 case 47
.text:0000000000006614                 MOV             X1, X22
.text:0000000000006618                 BL              sub_5C3C
.text:000000000000661C                 MOV             X1, X21
.text:0000000000006620                 BL              sub_5C3C
.text:0000000000006624                 MOV             X20, X0
.text:0000000000006628                 LDR             X1, [X29,#0x90+var_10]
.text:000000000000662C                 LDR             X0, [X19,#0x658]
.text:0000000000006630                 MUL             X1, X0, X1
.text:0000000000006634                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000006638                 CMP             X0, #0x61 ; 'a'
.text:000000000000663C                 B.HI            loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006640                 LSL             X0, X0, #4
.text:0000000000006644                 NEG             X1, X1
.text:0000000000006648                 ADD             X2, X19, X0
.text:000000000000664C                 STR             W23, [X2,#8]
.text:0000000000006650 loc_6650                                ; CODE XREF: sub_618C+20C↑j
.text:0000000000006650                                         ; sub_618C+344↑j ...
.text:0000000000006650                 STR             X1, [X19,X0]
.text:0000000000006654                 B               loc_665C ; jumptable 0000000000006260 case 0
.text:0000000000006658 ; ---------------------------------------------------------------------------
.text:0000000000006658 def_6260                                ; CODE XREF: sub_618C+C4↑j
.text:0000000000006658                                         ; sub_618C+D4↑j
.text:0000000000006658                 BL              .abort  ; jumptable 0000000000006260 default case, cases 23-44
.text:000000000000665C ; ---------------------------------------------------------------------------
.text:000000000000665C loc_665C                                ; CODE XREF: sub_618C+8C↑j
.text:000000000000665C                                         ; sub_618C+BC↑j ...
.text:000000000000665C                 MOV             X0, X20 ; jumptable 0000000000006260 case 0
.text:0000000000006660                 B               loc_61D4
.text:0000000000006664 ; ---------------------------------------------------------------------------
.text:0000000000006664 loc_6664                                ; CODE XREF: sub_618C+4C↑j
.text:0000000000006664                                         ; sub_618C+64↑j
.text:0000000000006664                 MOV             SP, X29
.text:0000000000006668                 LDP             X19, X20, [SP,#0x90+var_80]
.text:000000000000666C                 LDP             X21, X22, [SP,#0x90+var_70]
.text:0000000000006670                 LDP             X23, X24, [SP,#0x90+var_60]
.text:0000000000006674                 LDP             X25, X26, [SP,#0x90+var_50]
.text:0000000000006678                 LDP             X27, X28, [SP,#0x90+var_40]
.text:000000000000667C                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:0000000000006680                 RET
.text:0000000000006680 ; } // starts at 618C
.text:0000000000006680 ; End of function sub_618C
.text:0000000000006684 ; =============== S U B R O U T I N E =======================================
.text:0000000000006684 ; Attributes: bp-based frame fpd=0x90
.text:0000000000006684 sub_6684                                ; CODE XREF: sub_7268+4C↓p
.text:0000000000006684                                         ; sub_7390+30↓p ...
.text:0000000000006684 var_90          = -0x90
.text:0000000000006684 var_80          = -0x80
.text:0000000000006684 var_70          = -0x70
.text:0000000000006684 var_60          = -0x60
.text:0000000000006684 var_50          = -0x50
.text:0000000000006684 var_40          = -0x40
.text:0000000000006684 var_30          = -0x30
.text:0000000000006684 var_28          = -0x28
.text:0000000000006684 var_18          = -0x18
.text:0000000000006684 var_10          = -0x10
.text:0000000000006684 var_8           = -8
.text:0000000000006684 ; __unwind {
.text:0000000000006684                 STP             X29, X30, [SP,#var_90]!
.text:0000000000006688                 MOV             X2, #0x680 ; n
.text:000000000000668C                 MOV             X29, SP
.text:0000000000006690                 STP             X19, X20, [SP,#0x90+var_80]
.text:0000000000006694                 MOV             X20, X0
.text:0000000000006698                 MOV             X19, X1
.text:000000000000669C                 MOV             X0, X1  ; s
.text:00000000000066A0                 MOV             W1, #0  ; c
.text:00000000000066A4                 STP             X21, X22, [SP,#0x90+var_70]
.text:00000000000066A8                 STP             X23, X24, [SP,#0x90+var_60]
.text:00000000000066AC                 STP             X25, X26, [SP,#0x90+var_50]
.text:00000000000066B0                 STR             X27, [SP,#0x90+var_40]
.text:00000000000066B4                 BL              .memset
.text:00000000000066B8                 LDR             X1, [X20,#0x318]
.text:00000000000066BC                 STR             XZR, [X20,#0x350]
.text:00000000000066C0                 STR             XZR, [X20,#0x320]
.text:00000000000066C4                 CBNZ            X1, loc_66D0
.text:00000000000066C8 loc_66C8                                ; CODE XREF: sub_6684+80↓j
.text:00000000000066C8                                         ; sub_6684+98↓j
.text:00000000000066C8                 MOV             W0, #5
.text:00000000000066CC                 B               loc_6A8C
.text:00000000000066D0 ; ---------------------------------------------------------------------------
.text:00000000000066D0 loc_66D0                                ; CODE XREF: sub_6684+40↑j
.text:00000000000066D0                 LDR             X0, [X20,#0x340]
.text:00000000000066D4                 LSR             X0, X0, #0x3F ; '?'
.text:00000000000066D8                 SUB             X0, X0, #1
.text:00000000000066DC                 ADD             X0, X1, X0
.text:00000000000066E0                 ADD             X1, X20, #0x328
.text:00000000000066E4                 BL              sub_9224
.text:00000000000066E8                 MOV             X21, X0
.text:00000000000066EC                 CBNZ            X0, loc_67EC
.text:00000000000066F0                 LDR             X1, [X20,#0x318]
.text:00000000000066F4                 MOV             W0, #0xD2801168
.text:00000000000066FC                 LDR             W2, [X1]
.text:0000000000006700                 CMP             W2, W0
.text:0000000000006704                 B.NE            loc_66C8
.text:0000000000006708                 LDR             W1, [X1,#4]
.text:000000000000670C                 MOV             W0, #0xD4000001
.text:0000000000006714                 CMP             W1, W0
.text:0000000000006718                 MOV             W1, #1
.text:000000000000671C                 B.NE            loc_66C8
.text:0000000000006720                 LDR             X20, [X20,#0x310]
.text:0000000000006724                 MOV             X0, #0x1F
.text:0000000000006728                 STR             X0, [X19,#0x630]
.text:000000000000672C                 MOV             X0, #0x130
.text:0000000000006730                 STR             W1, [X19,#0x640]
.text:0000000000006734                 ADD             X3, X20, #0x130
.text:0000000000006738                 STR             X0, [X19,#0x628]
.text:000000000000673C                 MOV             X4, #0x100
.text:0000000000006740                 MOV             X0, #8
.text:0000000000006744                 MOV             X2, X19
.text:0000000000006748 loc_6748                                ; CODE XREF: sub_6684+D4↓j
.text:0000000000006748                 STR             W1, [X2,#8]
.text:000000000000674C                 STR             X0, [X2],#0x10
.text:0000000000006750                 ADD             X0, X0, #8
.text:0000000000006754                 CMP             X0, X4
.text:0000000000006758                 B.NE            loc_6748
.text:000000000000675C                 MOV             X1, #0xFFFFFFFFFFFFFC10
.text:0000000000006760                 ADD             X0, X20, #0x250
.text:0000000000006764                 SUB             X1, X1, X3
.text:0000000000006768                 ADD             X5, X19, #0x600
.text:000000000000676C                 MOV             W6, #1
.text:0000000000006770                 SUB             X1, X1, X19
.text:0000000000006774 loc_6774                                ; CODE XREF: sub_6684+12C↓j
.text:0000000000006774                 LDR             W2, [X0]
.text:0000000000006778                 CBZ             W2, loc_67B4
.text:000000000000677C                 MOV             W4, #0x46508001
.text:0000000000006784                 CMP             W2, W4
.text:0000000000006788                 B.NE            loc_67A8
.text:000000000000678C                 ADD             X2, X19, #0x400
.text:0000000000006790 loc_6790                                ; CODE XREF: sub_6684+120↓j
.text:0000000000006790                 ADD             X4, X1, X2
.text:0000000000006794                 STR             W6, [X2,#8]
.text:0000000000006798                 ADD             X4, X0, X4
.text:000000000000679C                 STR             X4, [X2],#0x10
.text:00000000000067A0                 CMP             X2, X5
.text:00000000000067A4                 B.NE            loc_6790
.text:00000000000067A8 loc_67A8                                ; CODE XREF: sub_6684+104↑j
.text:00000000000067A8                 LDR             W2, [X0,#4]
.text:00000000000067AC                 ADD             X0, X0, X2
.text:00000000000067B0                 B               loc_6774
.text:00000000000067B4 ; ---------------------------------------------------------------------------
.text:00000000000067B4 loc_67B4                                ; CODE XREF: sub_6684+F4↑j
.text:00000000000067B4                 ADD             X20, X20, #0x230
.text:00000000000067B8                 MOV             W0, #1
.text:00000000000067BC                 SUB             X20, X20, X3
.text:00000000000067C0                 STRB            W0, [X19,#0x673]
.text:00000000000067C4                 STR             X20, [X19,#0x1F0]
.text:00000000000067C8                 STR             W0, [X19,#0x1F8]
.text:00000000000067CC                 MOV             W0, #4
.text:00000000000067D0                 STR             W0, [X19,#0x608]
.text:00000000000067D4                 LDR             X0, [X3,#0x108]
.text:00000000000067D8                 SUB             X3, X0, X3
.text:00000000000067DC                 MOV             X0, #0x60 ; '`'
.text:00000000000067E0                 STR             X3, [X19,#0x600]
.text:00000000000067E4                 STR             X0, [X19,#0x668]
.text:00000000000067E8                 B               loc_6A80
.text:00000000000067EC ; ---------------------------------------------------------------------------
.text:00000000000067EC loc_67EC                                ; CODE XREF: sub_6684+68↑j
.text:00000000000067EC                 LDRSW           X1, [X21,#4]
.text:00000000000067F0                 ADD             X22, X21, #4
.text:00000000000067F4                 LDR             X0, [X20,#0x338]
.text:00000000000067F8                 SUB             X22, X22, X1
.text:00000000000067FC                 STR             X0, [X19,#0x648]
.text:0000000000006800                 ADD             X23, X22, #9
.text:0000000000006804                 MOV             X0, X23 ; s
.text:0000000000006808                 BL              .strlen
.text:000000000000680C                 ADD             X0, X0, #1
.text:0000000000006810                 LDRB            W1, [X22,#9]
.text:0000000000006814                 ADD             X0, X23, X0
.text:0000000000006818                 CMP             W1, #0x65 ; 'e'
.text:000000000000681C                 B.NE            loc_6838
.text:0000000000006820                 LDRB            W1, [X22,#0xA]
.text:0000000000006824                 CMP             W1, #0x68 ; 'h'
.text:0000000000006828                 B.NE            loc_6838
.text:000000000000682C                 LDR             X1, [X0],#8
.text:0000000000006830                 ADD             X23, X22, #0xB
.text:0000000000006834                 STR             X1, [X19,#0x678]
.text:0000000000006838 loc_6838                                ; CODE XREF: sub_6684+198↑j
.text:0000000000006838                                         ; sub_6684+1A4↑j
.text:0000000000006838                 LDRB            W1, [X22,#8]
.text:000000000000683C                 CMP             W1, #3
.text:0000000000006840                 B.LS            loc_685C
.text:0000000000006844                 LDRB            W1, [X0]
.text:0000000000006848                 CMP             W1, #8
.text:000000000000684C                 B.NE            loc_6A88
.text:0000000000006850                 LDRB            W1, [X0,#1]
.text:0000000000006854                 CBNZ            W1, loc_6A88
.text:0000000000006858                 ADD             X0, X0, #2
.text:000000000000685C loc_685C                                ; CODE XREF: sub_6684+1BC↑j
.text:000000000000685C                 ADD             X25, X29, #0x78 ; 'x'
.text:0000000000006860                 MOV             X1, X25
.text:0000000000006864                 BL              sub_5C3C
.text:0000000000006868                 LDR             X1, [X29,#0x90+var_18]
.text:000000000000686C                 STR             X1, [X19,#0x660]
.text:0000000000006870                 ADD             X1, X29, #0x80
.text:0000000000006874                 BL              sub_5C64
.text:0000000000006878                 MOV             X1, X0
.text:000000000000687C                 LDR             X2, [X29,#0x90+var_10]
.text:0000000000006880                 STR             X2, [X19,#0x658]
.text:0000000000006884                 LDRB            W2, [X22,#8]
.text:0000000000006888                 CMP             W2, #1
.text:000000000000688C                 B.NE            loc_689C
.text:0000000000006890                 ADD             X0, X0, #1
.text:0000000000006894                 LDRB            W1, [X1]
.text:0000000000006898                 B               loc_68A8
.text:000000000000689C ; ---------------------------------------------------------------------------
.text:000000000000689C loc_689C                                ; CODE XREF: sub_6684+208↑j
.text:000000000000689C                 MOV             X1, X25
.text:00000000000068A0                 BL              sub_5C3C
.text:00000000000068A4                 LDR             X1, [X29,#0x90+var_18]
.text:00000000000068A8 loc_68A8                                ; CODE XREF: sub_6684+214↑j
.text:00000000000068A8                 STR             X1, [X19,#0x668]
.text:00000000000068AC                 MOV             W1, #0xFFFFFFFF
.text:00000000000068B0                 STRB            W1, [X19,#0x671]
.text:00000000000068B4                 MOV             X24, #0
.text:00000000000068B8                 LDRB            W1, [X23]
.text:00000000000068BC                 CMP             W1, #0x7A ; 'z'
.text:00000000000068C0                 B.NE            loc_68E0
.text:00000000000068C4                 MOV             X1, X25
.text:00000000000068C8                 ADD             X23, X23, #1
.text:00000000000068CC                 BL              sub_5C3C
.text:00000000000068D0                 LDR             X24, [X29,#0x90+var_18]
.text:00000000000068D4                 MOV             W1, #1
.text:00000000000068D8                 STRB            W1, [X19,#0x672]
.text:00000000000068DC                 ADD             X24, X0, X24
.text:00000000000068E0 loc_68E0                                ; CODE XREF: sub_6684+23C↑j
.text:00000000000068E0                 ADD             X23, X23, #1
.text:00000000000068E4                 MOV             W27, #1
.text:00000000000068E8                 ADD             X25, X29, #0x88
.text:00000000000068EC loc_68EC                                ; CODE XREF: sub_6684+2F0↓j
.text:00000000000068EC                 LDURB           W1, [X23,#-1]
.text:00000000000068F0                 CBZ             W1, loc_6978
.text:00000000000068F4                 CMP             W1, #0x4C ; 'L'
.text:00000000000068F8                 B.NE            loc_6908
.text:00000000000068FC                 LDRB            W1, [X0]
.text:0000000000006900                 STRB            W1, [X19,#0x671]
.text:0000000000006904                 B               loc_6918
.text:0000000000006908 ; ---------------------------------------------------------------------------
.text:0000000000006908 loc_6908                                ; CODE XREF: sub_6684+274↑j
.text:0000000000006908                 CMP             W1, #0x52 ; 'R'
.text:000000000000690C                 B.NE            loc_6920
.text:0000000000006910                 LDRB            W1, [X0]
.text:0000000000006914                 STRB            W1, [X19,#0x670]
.text:0000000000006918 loc_6918                                ; CODE XREF: sub_6684+280↑j
.text:0000000000006918                 ADD             X0, X0, #1
.text:000000000000691C                 B               loc_6970
.text:0000000000006920 ; ---------------------------------------------------------------------------
.text:0000000000006920 loc_6920                                ; CODE XREF: sub_6684+288↑j
.text:0000000000006920                 CMP             W1, #0x50 ; 'P'
.text:0000000000006924                 B.NE            loc_6964
.text:0000000000006928                 MOV             X2, X0
.text:000000000000692C                 MOV             X1, X20
.text:0000000000006930                 LDRB            W26, [X2],#1
.text:0000000000006934                 STR             X2, [X29,#0x90+var_28]
.text:0000000000006938                 MOV             W0, W26
.text:000000000000693C                 STR             X2, [X29,#0x90+var_30]
.text:0000000000006940                 BL              sub_6114
.text:0000000000006944                 MOV             X1, X0
.text:0000000000006948                 LDR             X2, [X29,#0x90+var_28]
.text:000000000000694C                 MOV             W0, W26
.text:0000000000006950                 MOV             X3, X25
.text:0000000000006954                 BL              sub_5CA4
.text:0000000000006958                 LDR             X1, [X29,#0x90+var_8]
.text:000000000000695C                 STR             X1, [X19,#0x650]
.text:0000000000006960                 B               loc_6970
.text:0000000000006964 ; ---------------------------------------------------------------------------
.text:0000000000006964 loc_6964                                ; CODE XREF: sub_6684+2A0↑j
.text:0000000000006964                 CMP             W1, #0x53 ; 'S'
.text:0000000000006968                 B.NE            loc_6984
.text:000000000000696C                 STRB            W27, [X19,#0x673]
.text:0000000000006970 loc_6970                                ; CODE XREF: sub_6684+298↑j
.text:0000000000006970                                         ; sub_6684+2DC↑j
.text:0000000000006970                 ADD             X23, X23, #1
.text:0000000000006974                 B               loc_68EC
.text:0000000000006978 ; ---------------------------------------------------------------------------
.text:0000000000006978 loc_6978                                ; CODE XREF: sub_6684+26C↑j
.text:0000000000006978                 CMP             X24, XZR
.text:000000000000697C                 CSEL            X0, X24, X0, NE
.text:0000000000006980                 B               loc_6988
.text:0000000000006984 ; ---------------------------------------------------------------------------
.text:0000000000006984 loc_6984                                ; CODE XREF: sub_6684+2E4↑j
.text:0000000000006984                 MOV             X0, X24
.text:0000000000006988 loc_6988                                ; CODE XREF: sub_6684+2FC↑j
.text:0000000000006988                 CBZ             X0, loc_6A88
.text:000000000000698C                 LDR             W1, [X22]
.text:0000000000006990                 MOV             X2, X20
.text:0000000000006994                 MOV             X3, X19
.text:0000000000006998                 ADD             X1, X1, #4
.text:000000000000699C                 ADD             X1, X22, X1
.text:00000000000069A0                 BL              sub_618C
.text:00000000000069A4                 LDRB            W0, [X19,#0x670]
.text:00000000000069A8                 CMP             W0, #0xFF
.text:00000000000069AC                 B.EQ            loc_69E8
.text:00000000000069B0                 AND             W0, W0, #7
.text:00000000000069B4                 CMP             W0, #4  ; switch 5 cases
.text:00000000000069B8                 B.HI            def_69D0 ; jumptable 00000000000069D0 default case, case 1
.text:00000000000069BC                 ADRP            X1, #jpt_69D0@PAGE
.text:00000000000069C0                 ADD             X1, X1, #jpt_69D0@PAGEOFF
.text:00000000000069C4                 LDRB            W0, [X1,W0,UXTW]
.text:00000000000069C8                 ADR             X1, loc_69D4 ; jumptable 00000000000069D0 case 2
.text:00000000000069CC                 ADD             X0, X1, W0,SXTB#2
.text:00000000000069D0                 BR              X0      ; switch jump
.text:00000000000069D4 ; ---------------------------------------------------------------------------
.text:00000000000069D4 loc_69D4                                ; CODE XREF: sub_6684+34C↑j
.text:00000000000069D4                                         ; DATA XREF: sub_6684+344↑o
.text:00000000000069D4                 MOV             W2, #2  ; jumptable 00000000000069D0 case 2
.text:00000000000069D8                 B               loc_69F4
.text:00000000000069DC ; ---------------------------------------------------------------------------
.text:00000000000069DC loc_69DC                                ; CODE XREF: sub_6684+34C↑j
.text:00000000000069DC                 MOV             W2, #4  ; jumptable 00000000000069D0 case 3
.text:00000000000069E0                 B               loc_69F4
.text:00000000000069E4 ; ---------------------------------------------------------------------------
.text:00000000000069E4 def_69D0                                ; CODE XREF: sub_6684+334↑j
.text:00000000000069E4                                         ; sub_6684+34C↑j
.text:00000000000069E4                 BL              .abort  ; jumptable 00000000000069D0 default case, case 1
.text:00000000000069E8 ; ---------------------------------------------------------------------------
.text:00000000000069E8 loc_69E8                                ; CODE XREF: sub_6684+328↑j
.text:00000000000069E8                 MOV             W2, #0
.text:00000000000069EC                 B               loc_69F4
.text:00000000000069F0 ; ---------------------------------------------------------------------------
.text:00000000000069F0 loc_69F0                                ; CODE XREF: sub_6684+34C↑j
.text:00000000000069F0                 MOV             W2, #8  ; jumptable 00000000000069D0 cases 0,4
.text:00000000000069F4 loc_69F4                                ; CODE XREF: sub_6684+354↑j
.text:00000000000069F4                                         ; sub_6684+35C↑j ...
.text:00000000000069F4                 LDRB            W0, [X19,#0x672]
.text:00000000000069F8                 LSL             W2, W2, #1
.text:00000000000069FC                 ADD             X2, X2, #8
.text:0000000000006A00                 MOV             X22, #0
.text:0000000000006A04                 ADD             X2, X21, X2
.text:0000000000006A08                 CBZ             W0, loc_6A24
.text:0000000000006A0C                 MOV             X0, X2
.text:0000000000006A10                 ADD             X1, X29, #0x88
.text:0000000000006A14                 BL              sub_5C3C
.text:0000000000006A18                 LDR             X22, [X29,#0x90+var_8]
.text:0000000000006A1C                 MOV             X2, X0
.text:0000000000006A20                 ADD             X22, X0, X22
.text:0000000000006A24 loc_6A24                                ; CODE XREF: sub_6684+384↑j
.text:0000000000006A24                 LDRB            W23, [X19,#0x671]
.text:0000000000006A28                 CMP             W23, #0xFF
.text:0000000000006A2C                 B.EQ            loc_6A60
.text:0000000000006A30                 MOV             X1, X20
.text:0000000000006A34                 MOV             W0, W23
.text:0000000000006A38                 STR             X2, [X29,#0x90+var_28]
.text:0000000000006A3C                 BL              sub_6114
.text:0000000000006A40                 MOV             X1, X0
.text:0000000000006A44                 LDR             X2, [X29,#0x90+var_28]
.text:0000000000006A48                 MOV             W0, W23
.text:0000000000006A4C                 ADD             X3, X29, #0x88
.text:0000000000006A50                 BL              sub_5CA4
.text:0000000000006A54                 MOV             X2, X0
.text:0000000000006A58                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000006A5C                 STR             X0, [X20,#0x320]
.text:0000000000006A60 loc_6A60                                ; CODE XREF: sub_6684+3A8↑j
.text:0000000000006A60                 LDR             W1, [X21]
.text:0000000000006A64                 CMP             X22, XZR
.text:0000000000006A68                 CSEL            X0, X22, X2, NE
.text:0000000000006A6C                 MOV             X3, X19
.text:0000000000006A70                 ADD             X1, X1, #4
.text:0000000000006A74                 MOV             X2, X20
.text:0000000000006A78                 ADD             X1, X21, X1
.text:0000000000006A7C                 BL              sub_618C
.text:0000000000006A80 loc_6A80                                ; CODE XREF: sub_6684+164↑j
.text:0000000000006A80                 MOV             W0, #0
.text:0000000000006A84                 B               loc_6A8C
.text:0000000000006A88 ; ---------------------------------------------------------------------------
.text:0000000000006A88 loc_6A88                                ; CODE XREF: sub_6684+1C8↑j
.text:0000000000006A88                                         ; sub_6684+1D0↑j ...
.text:0000000000006A88                 MOV             W0, #3
.text:0000000000006A8C loc_6A8C                                ; CODE XREF: sub_6684+48↑j
.text:0000000000006A8C                                         ; sub_6684+400↑j
.text:0000000000006A8C                 LDP             X19, X20, [SP,#0x90+var_80]
.text:0000000000006A90                 LDP             X21, X22, [SP,#0x90+var_70]
.text:0000000000006A94                 LDP             X23, X24, [SP,#0x90+var_60]
.text:0000000000006A98                 LDP             X25, X26, [SP,#0x90+var_50]
.text:0000000000006A9C                 LDR             X27, [SP,#0x90+var_40]
.text:0000000000006AA0                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:0000000000006AA4                 RET
.text:0000000000006AA4 ; } // starts at 6684
.text:0000000000006AA4 ; End of function sub_6684
.text:0000000000006AA8 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AA8 ; Attributes: bp-based frame fpd=0x290
.text:0000000000006AA8 sub_6AA8                                ; CODE XREF: sub_705C+A8↓p
.text:0000000000006AA8                                         ; sub_705C+170↓p ...
.text:0000000000006AA8 var_290         = -0x290
.text:0000000000006AA8 var_280         = -0x280
.text:0000000000006AA8 var_270         = -0x270
.text:0000000000006AA8 var_260         = -0x260
.text:0000000000006AA8 var_250         = -0x250
.text:0000000000006AA8 var_240         = -0x240
.text:0000000000006AA8 var_228         = -0x228
.text:0000000000006AA8 var_210         = -0x210
.text:0000000000006AA8 ; __unwind {
.text:0000000000006AA8                 SUB             SP, SP, #0x230
.text:0000000000006AAC                 MOV             X4, X0
.text:0000000000006AB0                 STP             X29, X30, [SP,#0x230+var_290]!
.text:0000000000006AB4                 MOV             X29, SP
.text:0000000000006AB8                 STP             X27, X28, [SP,#0x290+var_240]
.text:0000000000006ABC                 ADD             X28, X29, #0x90
.text:0000000000006AC0                 STP             X21, X22, [SP,#0x290+var_270]
.text:0000000000006AC4                 STP             X23, X24, [SP,#0x290+var_260]
.text:0000000000006AC8                 ADRP            X22, #jpt_6F34@PAGE
.text:0000000000006ACC                 ADRP            X23, #jpt_6EB4@PAGE
.text:0000000000006AD0                 STP             X19, X20, [SP,#0x290+var_280]
.text:0000000000006AD4                 STP             X25, X26, [SP,#0x290+var_250]
.text:0000000000006AD8                 MOV             X24, X1
.text:0000000000006ADC                 MOV             X19, X2
.text:0000000000006AE0                 STR             X3, [X28]
.text:0000000000006AE4                 MOV             W25, #1
.text:0000000000006AE8                 ADD             X22, X22, #jpt_6F34@PAGEOFF
.text:0000000000006AEC                 ADD             X20, X29, #0x78 ; 'x'
.text:0000000000006AF0                 ADD             X23, X23, #jpt_6EB4@PAGEOFF
.text:0000000000006AF4                 ADD             X21, X29, #0x70 ; 'p'
.text:0000000000006AF8 loc_6AF8                                ; CODE XREF: sub_6AA8+584↓j
.text:0000000000006AF8                 CMP             X4, X24
.text:0000000000006AFC                 B.CS            loc_7030
.text:0000000000006B00                 LDRB            W26, [X4]
.text:0000000000006B04                 ADD             X27, X4, #1
.text:0000000000006B08                 CMP             W26, #0x20 ; ' '
.text:0000000000006B0C                 B.HI            loc_6BFC
.text:0000000000006B10                 CMP             W26, #0x1F
.text:0000000000006B14                 B.CS            loc_6E40
.text:0000000000006B18                 CMP             W26, #0x10
.text:0000000000006B1C                 B.EQ            loc_6D20
.text:0000000000006B20                 B.HI            loc_6BA8
.text:0000000000006B24                 CMP             W26, #0xA
.text:0000000000006B28                 B.EQ            loc_6CF8
.text:0000000000006B2C                 B.HI            loc_6B6C
.text:0000000000006B30                 CMP             W26, #6
.text:0000000000006B34                 B.EQ            loc_6E40
.text:0000000000006B38                 B.HI            loc_6B50
.text:0000000000006B3C                 CMP             W26, #3
.text:0000000000006B40                 B.NE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006B40                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006B44                 LDUR            X0, [X4,#1]
.text:0000000000006B48                 ADD             X27, X4, #9
.text:0000000000006B4C                 B               loc_7018
.text:0000000000006B50 ; ---------------------------------------------------------------------------
.text:0000000000006B50 loc_6B50                                ; CODE XREF: sub_6AA8+90↑j
.text:0000000000006B50                 CMP             W26, #8
.text:0000000000006B54                 ADD             X27, X4, #2
.text:0000000000006B58                 B.EQ            loc_6CF0
.text:0000000000006B5C                 CMP             W26, #9
.text:0000000000006B60                 B.NE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006B60                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006B64                 LDRSB           X0, [X4,#1]
.text:0000000000006B68                 B               loc_7018
.text:0000000000006B6C ; ---------------------------------------------------------------------------
.text:0000000000006B6C loc_6B6C                                ; CODE XREF: sub_6AA8+84↑j
.text:0000000000006B6C                 CMP             W26, #0xD
.text:0000000000006B70                 B.EQ            loc_6D0C
.text:0000000000006B74                 B.HI            loc_6B90
.text:0000000000006B78                 CMP             W26, #0xB
.text:0000000000006B7C                 B.EQ            loc_6D00
.text:0000000000006B80                 CMP             W26, #0xC
.text:0000000000006B84                 B.NE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006B84                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006B88                 LDUR            W0, [X4,#1]
.text:0000000000006B8C                 B               loc_6D10
.text:0000000000006B90 ; ---------------------------------------------------------------------------
.text:0000000000006B90 loc_6B90                                ; CODE XREF: sub_6AA8+CC↑j
.text:0000000000006B90                 CMP             W26, #0xE
.text:0000000000006B94                 ADD             X27, X4, #9
.text:0000000000006B98                 B.EQ            loc_6D18
.text:0000000000006B9C                 CMP             W26, #0xF
.text:0000000000006BA0                 B.EQ            loc_6D18
.text:0000000000006BA4                 B               def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006BA4                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006BA8 ; ---------------------------------------------------------------------------
.text:0000000000006BA8 loc_6BA8                                ; CODE XREF: sub_6AA8+78↑j
.text:0000000000006BA8                 CMP             W26, #0x15
.text:0000000000006BAC                 B.EQ            loc_6DC0
.text:0000000000006BB0                 B.HI            loc_6BD4
.text:0000000000006BB4                 CMP             W26, #0x12
.text:0000000000006BB8                 B.EQ            loc_6DA8
.text:0000000000006BBC                 B.CC            loc_6D38
.text:0000000000006BC0                 CMP             W26, #0x13
.text:0000000000006BC4                 B.EQ            loc_6DB4
.text:0000000000006BC8                 CMP             W26, #0x14
.text:0000000000006BCC                 B.EQ            loc_6DE8
.text:0000000000006BD0                 B               def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006BD0                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006BD4 ; ---------------------------------------------------------------------------
.text:0000000000006BD4 loc_6BD4                                ; CODE XREF: sub_6AA8+108↑j
.text:0000000000006BD4                 CMP             W26, #0x19
.text:0000000000006BD8                 B.EQ            loc_6E40
.text:0000000000006BDC                 B.HI            loc_6F04
.text:0000000000006BE0                 CMP             W26, #0x16
.text:0000000000006BE4                 SUB             W1, W25, #1
.text:0000000000006BE8                 SUB             W0, W25, #2
.text:0000000000006BEC                 B.EQ            loc_6DFC
.text:0000000000006BF0                 CMP             W26, #0x17
.text:0000000000006BF4                 B.EQ            loc_6E18
.text:0000000000006BF8                 B               def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006BF8                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006BFC ; ---------------------------------------------------------------------------
.text:0000000000006BFC loc_6BFC                                ; CODE XREF: sub_6AA8+64↑j
.text:0000000000006BFC                 CMP             W26, #0x4F ; 'O'
.text:0000000000006C00                 B.HI            loc_6C3C
.text:0000000000006C04                 CMP             W26, #0x30 ; '0'
.text:0000000000006C08                 B.CS            loc_6CE8
.text:0000000000006C0C                 CMP             W26, #0x27 ; '''
.text:0000000000006C10                 B.HI            loc_6C28
.text:0000000000006C14                 CMP             W26, #0x24 ; '$'
.text:0000000000006C18                 B.CS            loc_6F04
.text:0000000000006C1C                 CMP             W26, #0x22 ; '"'
.text:0000000000006C20                 B.HI            loc_6E40
.text:0000000000006C24                 B               loc_6F04
.text:0000000000006C28 ; ---------------------------------------------------------------------------
.text:0000000000006C28 loc_6C28                                ; CODE XREF: sub_6AA8+168↑j
.text:0000000000006C28                 CMP             W26, #0x2E ; '.'
.text:0000000000006C2C                 B.HI            loc_6FE0
.text:0000000000006C30                 CMP             W26, #0x29 ; ')'
.text:0000000000006C34                 B.CC            loc_6FF0
.text:0000000000006C38                 B               loc_6F04
.text:0000000000006C3C ; ---------------------------------------------------------------------------
.text:0000000000006C3C loc_6C3C                                ; CODE XREF: sub_6AA8+158↑j
.text:0000000000006C3C                 CMP             W26, #0x90
.text:0000000000006C40                 B.EQ            loc_6D54
.text:0000000000006C44                 B.HI            loc_6C5C
.text:0000000000006C48                 CMP             W26, #0x6F ; 'o'
.text:0000000000006C4C                 B.HI            loc_6D74
.text:0000000000006C50                 MOV             X0, X19
.text:0000000000006C54                 SUB             W1, W26, #0x50 ; 'P'
.text:0000000000006C58                 B               loc_6D6C
.text:0000000000006C5C ; ---------------------------------------------------------------------------
.text:0000000000006C5C loc_6C5C                                ; CODE XREF: sub_6AA8+19C↑j
.text:0000000000006C5C                 CMP             W26, #0x94
.text:0000000000006C60                 B.EQ            loc_6E40
.text:0000000000006C64                 B.HI            loc_6CA0
.text:0000000000006C68                 CMP             W26, #0x92
.text:0000000000006C6C                 B.NE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006C6C                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006C70                 MOV             X0, X27
.text:0000000000006C74                 MOV             X1, X21
.text:0000000000006C78                 ADD             X26, X29, #0x80
.text:0000000000006C7C                 BL              sub_5C3C
.text:0000000000006C80                 MOV             X1, X26
.text:0000000000006C84                 BL              sub_5C64
.text:0000000000006C88                 MOV             X27, X0
.text:0000000000006C8C                 LDR             W1, [X21]
.text:0000000000006C90                 MOV             X0, X19
.text:0000000000006C94                 BL              sub_5EE4
.text:0000000000006C98                 LDR             X1, [X26]
.text:0000000000006C9C                 B               loc_6DA0
.text:0000000000006CA0 ; ---------------------------------------------------------------------------
.text:0000000000006CA0 loc_6CA0                                ; CODE XREF: sub_6AA8+1BC↑j
.text:0000000000006CA0                 CMP             W26, #0x96
.text:0000000000006CA4                 B.EQ            loc_7028
.text:0000000000006CA8                 CMP             W26, #0xF1
.text:0000000000006CAC                 B.NE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006CAC                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006CB0                 LDRB            W2, [X4,#1]
.text:0000000000006CB4                 MOV             X1, X19
.text:0000000000006CB8                 ADD             X27, X4, #2
.text:0000000000006CBC                 STR             X2, [X29,#0x290+var_228]
.text:0000000000006CC0                 MOV             W0, W2
.text:0000000000006CC4                 ADD             X26, X29, #0x88
.text:0000000000006CC8                 BL              sub_6114
.text:0000000000006CCC                 MOV             X1, X0
.text:0000000000006CD0                 LDR             X2, [X29,#0x290+var_228]
.text:0000000000006CD4                 MOV             X3, X26
.text:0000000000006CD8                 MOV             W0, W2
.text:0000000000006CDC                 MOV             X2, X27
.text:0000000000006CE0                 BL              sub_5CA4
.text:0000000000006CE4                 B               loc_6D48
.text:0000000000006CE8 ; ---------------------------------------------------------------------------
.text:0000000000006CE8 loc_6CE8                                ; CODE XREF: sub_6AA8+160↑j
.text:0000000000006CE8                 SUB             W0, W26, #0x30 ; '0'
.text:0000000000006CEC                 B               loc_7018
.text:0000000000006CF0 ; ---------------------------------------------------------------------------
.text:0000000000006CF0 loc_6CF0                                ; CODE XREF: sub_6AA8+B0↑j
.text:0000000000006CF0                 LDRB            W0, [X4,#1]
.text:0000000000006CF4                 B               loc_7018
.text:0000000000006CF8 ; ---------------------------------------------------------------------------
.text:0000000000006CF8 loc_6CF8                                ; CODE XREF: sub_6AA8+80↑j
.text:0000000000006CF8                 LDURH           W0, [X4,#1]
.text:0000000000006CFC                 B               loc_6D04
.text:0000000000006D00 ; ---------------------------------------------------------------------------
.text:0000000000006D00 loc_6D00                                ; CODE XREF: sub_6AA8+D4↑j
.text:0000000000006D00                 LDURSH          X0, [X4,#1]
.text:0000000000006D04 loc_6D04                                ; CODE XREF: sub_6AA8+254↑j
.text:0000000000006D04                 ADD             X27, X4, #3
.text:0000000000006D08                 B               loc_7018
.text:0000000000006D0C ; ---------------------------------------------------------------------------
.text:0000000000006D0C loc_6D0C                                ; CODE XREF: sub_6AA8+C8↑j
.text:0000000000006D0C                 LDURSW          X0, [X4,#1]
.text:0000000000006D10 loc_6D10                                ; CODE XREF: sub_6AA8+E4↑j
.text:0000000000006D10                 ADD             X27, X4, #5
.text:0000000000006D14                 B               loc_7018
.text:0000000000006D18 ; ---------------------------------------------------------------------------
.text:0000000000006D18 loc_6D18                                ; CODE XREF: sub_6AA8+F0↑j
.text:0000000000006D18                                         ; sub_6AA8+F8↑j
.text:0000000000006D18                 LDUR            X0, [X4,#1]
.text:0000000000006D1C                 B               loc_7018
.text:0000000000006D20 ; ---------------------------------------------------------------------------
.text:0000000000006D20 loc_6D20                                ; CODE XREF: sub_6AA8+74↑j
.text:0000000000006D20                 MOV             X0, X27
.text:0000000000006D24                 MOV             X1, X20
.text:0000000000006D28                 BL              sub_5C3C
.text:0000000000006D2C                 MOV             X27, X0
.text:0000000000006D30                 LDR             X0, [X20]
.text:0000000000006D34                 B               loc_7018
.text:0000000000006D38 ; ---------------------------------------------------------------------------
.text:0000000000006D38 loc_6D38                                ; CODE XREF: sub_6AA8+114↑j
.text:0000000000006D38                 ADD             X26, X29, #0x88
.text:0000000000006D3C                 MOV             X0, X27
.text:0000000000006D40                 MOV             X1, X26
.text:0000000000006D44                 BL              sub_5C64
.text:0000000000006D48 loc_6D48                                ; CODE XREF: sub_6AA8+23C↑j
.text:0000000000006D48                 MOV             X27, X0
.text:0000000000006D4C                 LDR             X0, [X26]
.text:0000000000006D50                 B               loc_7018
.text:0000000000006D54 ; ---------------------------------------------------------------------------
.text:0000000000006D54 loc_6D54                                ; CODE XREF: sub_6AA8+198↑j
.text:0000000000006D54                 MOV             X0, X27
.text:0000000000006D58                 MOV             X1, X21
.text:0000000000006D5C                 BL              sub_5C3C
.text:0000000000006D60                 MOV             X27, X0
.text:0000000000006D64                 LDR             W1, [X21]
.text:0000000000006D68                 MOV             X0, X19
.text:0000000000006D6C loc_6D6C                                ; CODE XREF: sub_6AA8+1B0↑j
.text:0000000000006D6C                 BL              sub_5EE4
.text:0000000000006D70                 B               loc_7018
.text:0000000000006D74 ; ---------------------------------------------------------------------------
.text:0000000000006D74 loc_6D74                                ; CODE XREF: sub_6AA8+1A4↑j
.text:0000000000006D74                 ADD             X2, X29, #0x80
.text:0000000000006D78                 MOV             X0, X27
.text:0000000000006D7C                 MOV             X1, X2
.text:0000000000006D80                 STR             X2, [X29,#0x290+var_228]
.text:0000000000006D84                 BL              sub_5C64
.text:0000000000006D88                 MOV             X27, X0
.text:0000000000006D8C                 SUB             W1, W26, #0x70 ; 'p'
.text:0000000000006D90                 MOV             X0, X19
.text:0000000000006D94                 BL              sub_5EE4
.text:0000000000006D98                 LDR             X2, [X29,#0x290+var_228]
.text:0000000000006D9C                 LDR             X1, [X2]
.text:0000000000006DA0 loc_6DA0                                ; CODE XREF: sub_6AA8+1F4↑j
.text:0000000000006DA0                 ADD             X0, X0, X1
.text:0000000000006DA4                 B               loc_7018
.text:0000000000006DA8 ; ---------------------------------------------------------------------------
.text:0000000000006DA8 loc_6DA8                                ; CODE XREF: sub_6AA8+110↑j
.text:0000000000006DA8                 CBZ             W25, def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006DA8                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006DAC                 SUB             W0, W25, #1
.text:0000000000006DB0                 B               loc_6DF4
.text:0000000000006DB4 ; ---------------------------------------------------------------------------
.text:0000000000006DB4 loc_6DB4                                ; CODE XREF: sub_6AA8+11C↑j
.text:0000000000006DB4                 CBZ             W25, def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006DB4                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006DB8                 SUB             W25, W25, #1
.text:0000000000006DBC                 B               loc_7028
.text:0000000000006DC0 ; ---------------------------------------------------------------------------
.text:0000000000006DC0 loc_6DC0                                ; CODE XREF: sub_6AA8+104↑j
.text:0000000000006DC0                 SUB             W0, W25, #1
.text:0000000000006DC4                 LDRB            W1, [X4,#1]
.text:0000000000006DC8                 STR             X1, [X29,#0x290+var_210]
.text:0000000000006DCC                 ADD             X27, X4, #2
.text:0000000000006DD0                 SXTW            X0, W0
.text:0000000000006DD4                 CMP             X1, X0
.text:0000000000006DD8                 B.GE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006DD8                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006DDC                 SUB             X0, X0, X1
.text:0000000000006DE0                 LDR             X0, [X28,X0,LSL#3]
.text:0000000000006DE4                 B               loc_7018
.text:0000000000006DE8 ; ---------------------------------------------------------------------------
.text:0000000000006DE8 loc_6DE8                                ; CODE XREF: sub_6AA8+124↑j
.text:0000000000006DE8                 CMP             W25, #1
.text:0000000000006DEC                 B.LE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006DEC                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006DF0                 SUB             W0, W25, #2
.text:0000000000006DF4 loc_6DF4                                ; CODE XREF: sub_6AA8+308↑j
.text:0000000000006DF4                 LDR             X0, [X28,W0,SXTW#3]
.text:0000000000006DF8                 B               loc_7018
.text:0000000000006DFC ; ---------------------------------------------------------------------------
.text:0000000000006DFC loc_6DFC                                ; CODE XREF: sub_6AA8+144↑j
.text:0000000000006DFC                 CMP             W25, #1
.text:0000000000006E00                 B.LE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006E00                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006E04                 LDR             X3, [X28,W0,SXTW#3]
.text:0000000000006E08                 LDR             X2, [X28,W1,SXTW#3]
.text:0000000000006E0C                 STR             X3, [X28,W1,SXTW#3]
.text:0000000000006E10                 STR             X2, [X28,W0,SXTW#3]
.text:0000000000006E14                 B               loc_7028
.text:0000000000006E18 ; ---------------------------------------------------------------------------
.text:0000000000006E18 loc_6E18                                ; CODE XREF: sub_6AA8+14C↑j
.text:0000000000006E18                 CMP             W25, #2
.text:0000000000006E1C                 B.LE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006E1C                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006E20                 SUB             W2, W25, #3
.text:0000000000006E24                 LDR             X5, [X28,W0,SXTW#3]
.text:0000000000006E28                 LDR             X3, [X28,W1,SXTW#3]
.text:0000000000006E2C                 LDR             X4, [X28,W2,SXTW#3]
.text:0000000000006E30                 STR             X5, [X28,W1,SXTW#3]
.text:0000000000006E34                 STR             X4, [X28,W0,SXTW#3]
.text:0000000000006E38                 STR             X3, [X28,W2,SXTW#3]
.text:0000000000006E3C                 B               loc_7028
.text:0000000000006E40 ; ---------------------------------------------------------------------------
.text:0000000000006E40 loc_6E40                                ; CODE XREF: sub_6AA8+6C↑j
.text:0000000000006E40                                         ; sub_6AA8+8C↑j ...
.text:0000000000006E40                 CBZ             W25, def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006E40                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006E44                 SUB             W25, W25, #1
.text:0000000000006E48                 CMP             W26, #0x1F
.text:0000000000006E4C                 LDR             X2, [X28,W25,SXTW#3]
.text:0000000000006E50                 B.EQ            loc_6ED8
.text:0000000000006E54                 B.HI            loc_6E74
.text:0000000000006E58                 CMP             W26, #6
.text:0000000000006E5C                 B.EQ            loc_6ED0 ; jumptable 0000000000006EB4 case 8
.text:0000000000006E60                 CMP             W26, #0x19
.text:0000000000006E64                 B.NE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006E64                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006E68                 EOR             X1, X2, X2,ASR#63
.text:0000000000006E6C                 ADD             X0, X1, X2,LSR#63
.text:0000000000006E70                 B               loc_7018
.text:0000000000006E74 ; ---------------------------------------------------------------------------
.text:0000000000006E74 loc_6E74                                ; CODE XREF: sub_6AA8+3AC↑j
.text:0000000000006E74                 CMP             W26, #0x23 ; '#'
.text:0000000000006E78                 B.EQ            loc_6EE0
.text:0000000000006E7C                 CMP             W26, #0x94
.text:0000000000006E80                 B.EQ            loc_6E94
.text:0000000000006E84                 CMP             W26, #0x20 ; ' '
.text:0000000000006E88                 B.NE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006E88                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006E8C                 MVN             X0, X2
.text:0000000000006E90                 B               loc_7018
.text:0000000000006E94 ; ---------------------------------------------------------------------------
.text:0000000000006E94 loc_6E94                                ; CODE XREF: sub_6AA8+3D8↑j
.text:0000000000006E94                 LDRB            W0, [X4,#1]
.text:0000000000006E98                 ADD             X27, X4, #2
.text:0000000000006E9C                 SUB             W0, W0, #1 ; switch 8 cases
.text:0000000000006EA0                 CMP             W0, #7
.text:0000000000006EA4                 B.HI            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006EA4                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006EA8                 LDRB            W0, [X23,W0,UXTW]
.text:0000000000006EAC                 ADR             X1, loc_6EB8 ; jumptable 0000000000006EB4 case 1
.text:0000000000006EB0                 ADD             X0, X1, W0,SXTB#2
.text:0000000000006EB4                 BR              X0      ; switch jump
.text:0000000000006EB8 ; ---------------------------------------------------------------------------
.text:0000000000006EB8 loc_6EB8                                ; CODE XREF: sub_6AA8+40C↑j
.text:0000000000006EB8                                         ; DATA XREF: sub_6AA8+404↑o
.text:0000000000006EB8                 LDRB            W0, [X2] ; jumptable 0000000000006EB4 case 1
.text:0000000000006EBC                 B               loc_7018
.text:0000000000006EC0 ; ---------------------------------------------------------------------------
.text:0000000000006EC0 loc_6EC0                                ; CODE XREF: sub_6AA8+40C↑j
.text:0000000000006EC0                 LDRH            W0, [X2] ; jumptable 0000000000006EB4 case 2
.text:0000000000006EC4                 B               loc_7018
.text:0000000000006EC8 ; ---------------------------------------------------------------------------
.text:0000000000006EC8 loc_6EC8                                ; CODE XREF: sub_6AA8+40C↑j
.text:0000000000006EC8                 LDR             W0, [X2] ; jumptable 0000000000006EB4 case 4
.text:0000000000006ECC                 B               loc_7018
.text:0000000000006ED0 ; ---------------------------------------------------------------------------
.text:0000000000006ED0 loc_6ED0                                ; CODE XREF: sub_6AA8+3B4↑j
.text:0000000000006ED0                                         ; sub_6AA8+40C↑j
.text:0000000000006ED0                 LDR             X0, [X2] ; jumptable 0000000000006EB4 case 8
.text:0000000000006ED4                 B               loc_7018
.text:0000000000006ED8 ; ---------------------------------------------------------------------------
.text:0000000000006ED8 loc_6ED8                                ; CODE XREF: sub_6AA8+3A8↑j
.text:0000000000006ED8                 NEG             X0, X2
.text:0000000000006EDC                 B               loc_7018
.text:0000000000006EE0 ; ---------------------------------------------------------------------------
.text:0000000000006EE0 loc_6EE0                                ; CODE XREF: sub_6AA8+3D0↑j
.text:0000000000006EE0                 MOV             X0, X27
.text:0000000000006EE4                 MOV             X1, X20
.text:0000000000006EE8                 STR             X2, [X29,#0x290+var_228]
.text:0000000000006EEC                 BL              sub_5C3C
.text:0000000000006EF0                 MOV             X27, X0
.text:0000000000006EF4                 LDR             X1, [X20]
.text:0000000000006EF8                 LDR             X2, [X29,#0x290+var_228]
.text:0000000000006EFC                 ADD             X0, X2, X1
.text:0000000000006F00                 B               loc_7018
.text:0000000000006F04 ; ---------------------------------------------------------------------------
.text:0000000000006F04 loc_6F04                                ; CODE XREF: sub_6AA8+134↑j
.text:0000000000006F04                                         ; sub_6AA8+170↑j ...
.text:0000000000006F04                 CMP             W25, #1
.text:0000000000006F08                 B.LE            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006F08                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006F0C                 SUB             W2, W25, #2
.text:0000000000006F10                 SUB             W26, W26, #0x1A ; switch 21 cases
.text:0000000000006F14                 SUB             W25, W25, #1
.text:0000000000006F18                 CMP             W26, #0x14
.text:0000000000006F1C                 LDR             X1, [X28,W2,SXTW#3]
.text:0000000000006F20                 LDR             X0, [X28,W25,SXTW#3]
.text:0000000000006F24                 B.HI            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006F24                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006F28                 LDRB            W3, [X22,W26,UXTW]
.text:0000000000006F2C                 ADR             X4, loc_6F38 ; jumptable 0000000000006F34 case 26
.text:0000000000006F30                 ADD             X3, X4, W3,SXTB#2
.text:0000000000006F34                 BR              X3      ; switch jump
.text:0000000000006F38 ; ---------------------------------------------------------------------------
.text:0000000000006F38 loc_6F38                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F38                                         ; DATA XREF: sub_6AA8+484↑o
.text:0000000000006F38                 AND             X0, X0, X1 ; jumptable 0000000000006F34 case 26
.text:0000000000006F3C                 B               loc_6FCC
.text:0000000000006F40 ; ---------------------------------------------------------------------------
.text:0000000000006F40 loc_6F40                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F40                 SDIV            X0, X1, X0 ; jumptable 0000000000006F34 case 27
.text:0000000000006F44                 B               loc_6FCC
.text:0000000000006F48 ; ---------------------------------------------------------------------------
.text:0000000000006F48 loc_6F48                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F48                 SUB             X0, X1, X0 ; jumptable 0000000000006F34 case 28
.text:0000000000006F4C                 B               loc_6FCC
.text:0000000000006F50 ; ---------------------------------------------------------------------------
.text:0000000000006F50 loc_6F50                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F50                 UDIV            X3, X1, X0 ; jumptable 0000000000006F34 case 29
.text:0000000000006F54                 MSUB            X0, X3, X0, X1
.text:0000000000006F58                 B               loc_6FCC
.text:0000000000006F5C ; ---------------------------------------------------------------------------
.text:0000000000006F5C loc_6F5C                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F5C                 MUL             X0, X0, X1 ; jumptable 0000000000006F34 case 30
.text:0000000000006F60                 B               loc_6FCC
.text:0000000000006F64 ; ---------------------------------------------------------------------------
.text:0000000000006F64 loc_6F64                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F64                 ORR             X0, X0, X1 ; jumptable 0000000000006F34 case 33
.text:0000000000006F68                 B               loc_6FCC
.text:0000000000006F6C ; ---------------------------------------------------------------------------
.text:0000000000006F6C loc_6F6C                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F6C                 ADD             X0, X0, X1 ; jumptable 0000000000006F34 case 34
.text:0000000000006F70                 B               loc_6FCC
.text:0000000000006F74 ; ---------------------------------------------------------------------------
.text:0000000000006F74 loc_6F74                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F74                 LSL             X0, X1, X0 ; jumptable 0000000000006F34 case 36
.text:0000000000006F78                 B               loc_6FCC
.text:0000000000006F7C ; ---------------------------------------------------------------------------
.text:0000000000006F7C loc_6F7C                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F7C                 LSR             X0, X1, X0 ; jumptable 0000000000006F34 case 37
.text:0000000000006F80                 B               loc_6FCC
.text:0000000000006F84 ; ---------------------------------------------------------------------------
.text:0000000000006F84 loc_6F84                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F84                 ASR             X0, X1, X0 ; jumptable 0000000000006F34 case 38
.text:0000000000006F88                 B               loc_6FCC
.text:0000000000006F8C ; ---------------------------------------------------------------------------
.text:0000000000006F8C loc_6F8C                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F8C                 EOR             X0, X0, X1 ; jumptable 0000000000006F34 case 39
.text:0000000000006F90                 B               loc_6FCC
.text:0000000000006F94 ; ---------------------------------------------------------------------------
.text:0000000000006F94 loc_6F94                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006F94                 CMP             X1, X0  ; jumptable 0000000000006F34 case 44
.text:0000000000006F98                 CSET            X0, LE
.text:0000000000006F9C                 B               loc_6FCC
.text:0000000000006FA0 ; ---------------------------------------------------------------------------
.text:0000000000006FA0 loc_6FA0                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006FA0                 CMP             X1, X0  ; jumptable 0000000000006F34 case 42
.text:0000000000006FA4                 CSET            X0, GE
.text:0000000000006FA8                 B               loc_6FCC
.text:0000000000006FAC ; ---------------------------------------------------------------------------
.text:0000000000006FAC loc_6FAC                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006FAC                 CMP             X1, X0  ; jumptable 0000000000006F34 case 41
.text:0000000000006FB0                 CSET            X0, EQ
.text:0000000000006FB4                 B               loc_6FCC
.text:0000000000006FB8 ; ---------------------------------------------------------------------------
.text:0000000000006FB8 loc_6FB8                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006FB8                 CMP             X1, X0  ; jumptable 0000000000006F34 case 45
.text:0000000000006FBC                 CSET            X0, LT
.text:0000000000006FC0                 B               loc_6FCC
.text:0000000000006FC4 ; ---------------------------------------------------------------------------
.text:0000000000006FC4 loc_6FC4                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006FC4                 CMP             X1, X0  ; jumptable 0000000000006F34 case 43
.text:0000000000006FC8                 CSET            X0, GT
.text:0000000000006FCC loc_6FCC                                ; CODE XREF: sub_6AA8+494↑j
.text:0000000000006FCC                                         ; sub_6AA8+49C↑j ...
.text:0000000000006FCC                 MOV             W25, W2
.text:0000000000006FD0                 B               loc_7018
.text:0000000000006FD4 ; ---------------------------------------------------------------------------
.text:0000000000006FD4 loc_6FD4                                ; CODE XREF: sub_6AA8+48C↑j
.text:0000000000006FD4                 CMP             X1, X0  ; jumptable 0000000000006F34 case 46
.text:0000000000006FD8                 CSET            X0, NE
.text:0000000000006FDC                 B               loc_6FCC
.text:0000000000006FE0 ; ---------------------------------------------------------------------------
.text:0000000000006FE0 loc_6FE0                                ; CODE XREF: sub_6AA8+184↑j
.text:0000000000006FE0                 LDURSH          X0, [X4,#1]
.text:0000000000006FE4                 ADD             X27, X4, #3
.text:0000000000006FE8                 ADD             X27, X27, X0
.text:0000000000006FEC                 B               loc_7028
.text:0000000000006FF0 ; ---------------------------------------------------------------------------
.text:0000000000006FF0 loc_6FF0                                ; CODE XREF: sub_6AA8+18C↑j
.text:0000000000006FF0                 CBZ             W25, def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000006FF0                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000006FF4                 SUB             W25, W25, #1
.text:0000000000006FF8                 ADD             X27, X4, #3
.text:0000000000006FFC                 LDURSH          W0, [X4,#1]
.text:0000000000007000                 ADD             X0, X27, W0,SXTH
.text:0000000000007004                 LDR             X1, [X28,W25,SXTW#3]
.text:0000000000007008                 CMP             X1, XZR
.text:000000000000700C                 CSEL            X27, X27, X0, EQ
.text:0000000000007010                 B               loc_7028
.text:0000000000007014 ; ---------------------------------------------------------------------------
.text:0000000000007014 def_6EB4                                ; CODE XREF: sub_6AA8+98↑j
.text:0000000000007014                                         ; sub_6AA8+B8↑j ...
.text:0000000000007014                 BL              .abort  ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000007014                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000007018 ; ---------------------------------------------------------------------------
.text:0000000000007018 loc_7018                                ; CODE XREF: sub_6AA8+A4↑j
.text:0000000000007018                                         ; sub_6AA8+C0↑j ...
.text:0000000000007018                 CMP             W25, #0x3F ; '?'
.text:000000000000701C                 B.HI            def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:000000000000701C                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000007020                 STR             X0, [X28,W25,SXTW#3]
.text:0000000000007024                 ADD             W25, W25, #1
.text:0000000000007028 loc_7028                                ; CODE XREF: sub_6AA8+1FC↑j
.text:0000000000007028                                         ; sub_6AA8+314↑j ...
.text:0000000000007028                 MOV             X4, X27
.text:000000000000702C                 B               loc_6AF8
.text:0000000000007030 ; ---------------------------------------------------------------------------
.text:0000000000007030 loc_7030                                ; CODE XREF: sub_6AA8+54↑j
.text:0000000000007030                 CBZ             W25, def_6EB4 ; jumptable 0000000000006EB4 default case, cases 3,5-7
.text:0000000000007030                                         ; jumptable 0000000000006F34 default case, cases 31,32,35,40
.text:0000000000007034                 SUB             W25, W25, #1
.text:0000000000007038                 LDP             X19, X20, [SP,#0x290+var_280]
.text:000000000000703C                 LDP             X21, X22, [SP,#0x290+var_270]
.text:0000000000007040                 LDR             X0, [X28,W25,SXTW#3]
.text:0000000000007044                 LDP             X23, X24, [SP,#0x290+var_260]
.text:0000000000007048                 LDP             X25, X26, [SP,#0x290+var_250]
.text:000000000000704C                 LDP             X27, X28, [SP,#0x290+var_240]
.text:0000000000007050                 LDP             X29, X30, [SP+0x290+var_290],#0x60
.text:0000000000007054                 ADD             SP, SP, #0x230
.text:0000000000007058                 RET
.text:0000000000007058 ; } // starts at 6AA8
.text:0000000000007058 ; End of function sub_6AA8
.text:000000000000705C ; =============== S U B R O U T I N E =======================================
.text:000000000000705C ; Attributes: bp-based frame fpd=0x440
.text:000000000000705C ; __int64 __fastcall sub_705C(void *src)
.text:000000000000705C sub_705C                                ; CODE XREF: sub_7268+BC↓p
.text:000000000000705C                                         ; sub_7344+14↓p
.text:000000000000705C var_440         = -0x440
.text:000000000000705C var_430         = -0x430
.text:000000000000705C var_420         = -0x420
.text:000000000000705C var_410         = -0x410
.text:000000000000705C var_400         = -0x400
.text:000000000000705C var_3F0         = -0x3F0
.text:000000000000705C var_3D8         = -0x3D8
.text:000000000000705C var_80          = -0x80
.text:000000000000705C ; __unwind {
.text:000000000000705C                 SUB             SP, SP, #0x3E0
.text:0000000000007060                 MOV             X2, #0x3C0 ; n
.text:0000000000007064                 STP             X29, X30, [SP,#0x3E0+var_440]!
.text:0000000000007068                 MOV             X29, SP
.text:000000000000706C                 STP             X19, X20, [SP,#0x440+var_430]
.text:0000000000007070                 STP             X21, X22, [SP,#0x440+var_420]
.text:0000000000007074                 MOV             X19, X0
.text:0000000000007078                 ADD             X21, X29, #0x80
.text:000000000000707C                 STP             X23, X24, [SP,#0x440+var_410]
.text:0000000000007080                 MOV             X0, X21 ; dest
.text:0000000000007084                 MOV             X24, X1
.text:0000000000007088                 MOV             X1, X19 ; src
.text:000000000000708C                 STP             X25, X26, [SP,#0x440+var_400]
.text:0000000000007090                 STP             X27, X28, [SP,#0x440+var_3F0]
.text:0000000000007094                 BL              .memcpy
.text:0000000000007098                 LDR             X0, [X29,#0x440+var_80]
.text:000000000000709C                 TBZ             X0, #0x3E, loc_70A8 ; '>'
.text:00000000000070A0                 LDRB            W0, [X21,#0x377]
.text:00000000000070A4                 CBNZ            W0, loc_70C0
.text:00000000000070A8 loc_70A8                                ; CODE XREF: sub_705C+40↑j
.text:00000000000070A8                 LDR             X0, [X21,#0xF8]
.text:00000000000070AC                 CBNZ            X0, loc_70C0
.text:00000000000070B0                 LDR             X1, [X19,#0x310]
.text:00000000000070B4                 MOV             X0, X21
.text:00000000000070B8                 ADD             X2, X29, #0x70 ; 'p'
.text:00000000000070BC                 BL              sub_5EA8
.text:00000000000070C0 loc_70C0                                ; CODE XREF: sub_705C+48↑j
.text:00000000000070C0                                         ; sub_705C+50↑j
.text:00000000000070C0                 LDR             X0, [X19,#0x340]
.text:00000000000070C4                 TBZ             X0, #0x3E, loc_70CC ; '>'
.text:00000000000070C8                 STRB            WZR, [X19,#0x377]
.text:00000000000070CC loc_70CC                                ; CODE XREF: sub_705C+68↑j
.text:00000000000070CC                 LDR             W0, [X24,#0x640]
.text:00000000000070D0                 STR             XZR, [X19,#0xF8]
.text:00000000000070D4                 CMP             W0, #1
.text:00000000000070D8                 B.EQ            loc_7110
.text:00000000000070DC                 CMP             W0, #2
.text:00000000000070E0                 B.NE            loc_71A4
.text:00000000000070E4                 ADD             X20, X29, #0x78 ; 'x'
.text:00000000000070E8                 LDR             X0, [X24,#0x638]
.text:00000000000070EC                 MOV             X1, X20
.text:00000000000070F0                 BL              sub_5C3C
.text:00000000000070F4                 LDR             X1, [X20]
.text:00000000000070F8                 MOV             X2, X21
.text:00000000000070FC                 MOV             X3, #0
.text:0000000000007100                 ADD             X1, X0, X1
.text:0000000000007104                 BL              sub_6AA8
.text:0000000000007108                 MOV             X23, X0
.text:000000000000710C                 B               loc_7124
.text:0000000000007110 ; ---------------------------------------------------------------------------
.text:0000000000007110 loc_7110                                ; CODE XREF: sub_705C+7C↑j
.text:0000000000007110                 LDR             W1, [X24,#0x630]
.text:0000000000007114                 MOV             X0, X21
.text:0000000000007118                 BL              sub_5EE4
.text:000000000000711C                 LDR             X23, [X24,#0x628]
.text:0000000000007120                 ADD             X23, X0, X23
.text:0000000000007124 loc_7124                                ; CODE XREF: sub_705C+B0↑j
.text:0000000000007124                 ADRP            X0, #unk_1B90@PAGE
.text:0000000000007128                 STR             X23, [X19,#0x310]
.text:000000000000712C                 ADD             X0, X0, #unk_1B90@PAGEOFF
.text:0000000000007130                 MOV             X26, X24
.text:0000000000007134                 ADD             X22, X19, #0x358
.text:0000000000007138                 MOV             X20, #0
.text:000000000000713C                 STR             X0, [X29,#0x440+var_3D8]
.text:0000000000007140                 ADD             X25, X29, #0x78 ; 'x'
.text:0000000000007144                 ADRP            X27, #0xC000
.text:0000000000007148                 MOV             W28, #1
.text:000000000000714C loc_714C                                ; CODE XREF: sub_705C+1CC↓j
.text:000000000000714C                 LDR             W0, [X26,#8]
.text:0000000000007150                 SUB             W0, W0, #1
.text:0000000000007154                 CMP             W0, #4
.text:0000000000007158                 B.HI            loc_7218
.text:000000000000715C                 LDR             X1, [X29,#0x440+var_3D8]
.text:0000000000007160                 LDRB            W0, [X1,W0,UXTW]
.text:0000000000007164                 ADR             X1, loc_7170
.text:0000000000007168                 ADD             X0, X1, W0,SXTB#2
.text:000000000000716C                 BR              X0
.text:0000000000007170 ; ---------------------------------------------------------------------------
.text:0000000000007170 loc_7170                                ; DATA XREF: sub_705C+108↑o
.text:0000000000007170                 LDR             X0, [X26]
.text:0000000000007174                 ADD             X0, X23, X0
.text:0000000000007178                 B               loc_71D0
.text:000000000000717C ; ---------------------------------------------------------------------------
.text:000000000000717C                 LDR             X1, [X26]
.text:0000000000007180                 ADD             X0, X21, W1,SXTW
.text:0000000000007184                 LDRB            W0, [X0,#0x358]
.text:0000000000007188                 CBZ             W0, loc_71A8
.text:000000000000718C                 MOV             X0, X21
.text:0000000000007190                 BL              sub_5EE4
.text:0000000000007194 loc_7194                                ; CODE XREF: sub_705C+18C↓j
.text:0000000000007194                                         ; sub_705C+1B0↓j
.text:0000000000007194                 MOV             X1, X27
.text:0000000000007198                 LDRB            W1, [X20,X1]
.text:000000000000719C                 CMP             W1, #8
.text:00000000000071A0                 B.LS            loc_7210
.text:00000000000071A4 loc_71A4                                ; CODE XREF: sub_705C+84↑j
.text:00000000000071A4                 BL              .abort
.text:00000000000071A8 ; ---------------------------------------------------------------------------
.text:00000000000071A8 loc_71A8                                ; CODE XREF: sub_705C+12C↑j
.text:00000000000071A8                 LDR             X0, [X21,W1,SXTW#3]
.text:00000000000071AC                 B               loc_71D0
.text:00000000000071B0 ; ---------------------------------------------------------------------------
.text:00000000000071B0                 LDR             X0, [X26]
.text:00000000000071B4                 MOV             X1, X25
.text:00000000000071B8                 BL              sub_5C3C
.text:00000000000071BC                 LDR             X1, [X25]
.text:00000000000071C0                 MOV             X2, X21
.text:00000000000071C4                 MOV             X3, X23
.text:00000000000071C8                 ADD             X1, X0, X1
.text:00000000000071CC                 BL              sub_6AA8
.text:00000000000071D0 loc_71D0                                ; CODE XREF: sub_705C+11C↑j
.text:00000000000071D0                                         ; sub_705C+150↑j
.text:00000000000071D0                 LDR             X1, [X19,#0x340]
.text:00000000000071D4                 TBZ             X1, #0x3E, loc_7214 ; '>'
.text:00000000000071D8                 STRB            WZR, [X22]
.text:00000000000071DC                 B               loc_7214
.text:00000000000071E0 ; ---------------------------------------------------------------------------
.text:00000000000071E0                 LDR             X0, [X26]
.text:00000000000071E4                 ADD             X0, X23, X0
.text:00000000000071E8                 B               loc_7194
.text:00000000000071EC ; ---------------------------------------------------------------------------
.text:00000000000071EC                 LDR             X0, [X26]
.text:00000000000071F0                 MOV             X1, X25
.text:00000000000071F4                 BL              sub_5C3C
.text:00000000000071F8                 LDR             X1, [X25]
.text:00000000000071FC                 MOV             X2, X21
.text:0000000000007200                 MOV             X3, X23
.text:0000000000007204                 ADD             X1, X0, X1
.text:0000000000007208                 BL              sub_6AA8
.text:000000000000720C                 B               loc_7194
.text:0000000000007210 ; ---------------------------------------------------------------------------
.text:0000000000007210 loc_7210                                ; CODE XREF: sub_705C+144↑j
.text:0000000000007210                 STRB            W28, [X22]
.text:0000000000007214 loc_7214                                ; CODE XREF: sub_705C+178↑j
.text:0000000000007214                                         ; sub_705C+180↑j
.text:0000000000007214                 STR             X0, [X19,X20,LSL#3]
.text:0000000000007218 loc_7218                                ; CODE XREF: sub_705C+FC↑j
.text:0000000000007218                 ADD             X20, X20, #1
.text:000000000000721C                 ADD             X26, X26, #0x10
.text:0000000000007220                 CMP             X20, #0x62 ; 'b'
.text:0000000000007224                 ADD             X22, X22, #1
.text:0000000000007228                 B.NE            loc_714C
.text:000000000000722C                 LDR             X0, [X19,#0x340]
.text:0000000000007230                 LDRB            W2, [X24,#0x673]
.text:0000000000007234                 ORR             X1, X0, #0x8000000000000000
.text:0000000000007238                 AND             X0, X0, #0x7FFFFFFFFFFFFFFF
.text:000000000000723C                 CMP             W2, WZR
.text:0000000000007240                 CSEL            X0, X0, X1, EQ
.text:0000000000007244                 STR             X0, [X19,#0x340]
.text:0000000000007248                 LDP             X21, X22, [SP,#0x440+var_420]
.text:000000000000724C                 LDP             X19, X20, [SP,#0x440+var_430]
.text:0000000000007250                 LDP             X23, X24, [SP,#0x440+var_410]
.text:0000000000007254                 LDP             X25, X26, [SP,#0x440+var_400]
.text:0000000000007258                 LDP             X27, X28, [SP,#0x440+var_3F0]
.text:000000000000725C                 LDP             X29, X30, [SP+0x440+var_440],#0x60
.text:0000000000007260                 ADD             SP, SP, #0x3E0
.text:0000000000007264                 RET
.text:0000000000007264 ; } // starts at 705C
.text:0000000000007264 ; End of function sub_705C
.text:0000000000007268 ; =============== S U B R O U T I N E =======================================
.text:0000000000007268 ; Attributes: bp-based frame fpd=0x6D0
.text:0000000000007268 sub_7268                                ; CODE XREF: sub_7634+50↓p
.text:0000000000007268                                         ; .text:0000000000007804↓p ...
.text:0000000000007268 var_6D0         = -0x6D0
.text:0000000000007268 var_6C0         = -0x6C0
.text:0000000000007268 var_6B0         = -0x6B0
.text:0000000000007268 var_6A0         = -0x6A0
.text:0000000000007268 var_58          = -0x58
.text:0000000000007268 var_50          = -0x50
.text:0000000000007268 var_40          = -0x40
.text:0000000000007268 ; __unwind {
.text:0000000000007268                 SUB             SP, SP, #0x690
.text:000000000000726C                 STP             X29, X30, [SP,#0x690+var_6D0]!
.text:0000000000007270                 MOV             X29, SP
.text:0000000000007274                 STP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000007278                 STP             X21, X22, [SP,#0x6D0+var_6B0]
.text:000000000000727C                 MOV             X19, X0
.text:0000000000007280                 STR             X23, [SP,#0x6D0+var_6A0]
.text:0000000000007284                 MOV             X22, X2
.text:0000000000007288                 MOV             X23, X1
.text:000000000000728C                 MOV             X2, #0x3C0 ; n
.text:0000000000007290                 MOV             W1, #0  ; c
.text:0000000000007294                 MOV             X20, X30
.text:0000000000007298                 BL              .memset
.text:000000000000729C                 STR             X20, [X19,#0x318]
.text:00000000000072A0                 MOV             X0, #0x4000000000000000
.text:00000000000072A4                 ADD             X20, X29, #0x50 ; 'P'
.text:00000000000072A8                 STR             X0, [X19,#0x340]
.text:00000000000072AC                 MOV             X1, X20
.text:00000000000072B0                 MOV             X0, X19
.text:00000000000072B4                 BL              sub_6684
.text:00000000000072B8                 CBZ             W0, loc_72C0
.text:00000000000072BC                 BL              .abort
.text:00000000000072C0 ; ---------------------------------------------------------------------------
.text:00000000000072C0 loc_72C0                                ; CODE XREF: sub_7268+50↑j
.text:00000000000072C0                 ADRP            X0, #pthread_create_ptr@PAGE
.text:00000000000072C4                 ADRP            X21, #byte_C000@PAGE
.text:00000000000072C8                 LDR             X0, [X0,#pthread_create_ptr@PAGEOFF]
.text:00000000000072CC                 CBNZ            X0, loc_72E0
.text:00000000000072D0 loc_72D0                                ; CODE XREF: sub_7268+8C↓j
.text:00000000000072D0                 LDRB            W0, [X21,#byte_C000@PAGEOFF]
.text:00000000000072D4                 CBNZ            W0, loc_72F8
.text:00000000000072D8                 BL              sub_5D94
.text:00000000000072DC                 B               loc_72F8
.text:00000000000072E0 ; ---------------------------------------------------------------------------
.text:00000000000072E0 loc_72E0                                ; CODE XREF: sub_7268+64↑j
.text:00000000000072E0                 MOV             X0, X21
.text:00000000000072E4                 ADRP            X1, #sub_5D94@PAGE
.text:00000000000072E8                 ADD             X0, X0, #0x64 ; 'd' ; once_control
.text:00000000000072EC                 ADD             X1, X1, #sub_5D94@PAGEOFF ; init_routine
.text:00000000000072F0                 BL              .pthread_once
.text:00000000000072F4                 CBNZ            W0, loc_72D0
.text:00000000000072F8 loc_72F8                                ; CODE XREF: sub_7268+6C↑j
.text:00000000000072F8                                         ; sub_7268+74↑j
.text:00000000000072F8                 ADD             X2, X29, #0x48 ; 'H'
.text:00000000000072FC                 MOV             X0, X19
.text:0000000000007300                 MOV             X1, X23
.text:0000000000007304                 BL              sub_5EA8
.text:0000000000007308                 STR             XZR, [X29,#0x6D0+var_58]
.text:000000000000730C                 MOV             W0, #1
.text:0000000000007310                 STR             W0, [X29,#0x6D0+var_40]
.text:0000000000007314                 MOV             X0, #0x1F
.text:0000000000007318                 MOV             X1, X20
.text:000000000000731C                 STR             X0, [X29,#0x6D0+var_50]
.text:0000000000007320                 MOV             X0, X19 ; src
.text:0000000000007324                 BL              sub_705C
.text:0000000000007328                 STR             X22, [X19,#0x318]
.text:000000000000732C                 LDR             X23, [SP,#0x6D0+var_6A0]
.text:0000000000007330                 LDP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000007334                 LDP             X21, X22, [SP,#0x6D0+var_6B0]
.text:0000000000007338                 LDP             X29, X30, [SP+0x6D0+var_6D0],#0x40
.text:000000000000733C                 ADD             SP, SP, #0x690
.text:0000000000007340                 RET
.text:0000000000007340 ; } // starts at 7268
.text:0000000000007340 ; End of function sub_7268
.text:0000000000007344 ; =============== S U B R O U T I N E =======================================
.text:0000000000007344 ; Attributes: bp-based frame
.text:0000000000007344 sub_7344                                ; CODE XREF: sub_7390+9C↓p
.text:0000000000007344                                         ; sub_7450+90↓p ...
.text:0000000000007344 var_s0          =  0
.text:0000000000007344 var_s10         =  0x10
.text:0000000000007344 ; __unwind {
.text:0000000000007344                 STP             X29, X30, [SP,#-0x20+var_s0]!
.text:0000000000007348                 MOV             X29, SP
.text:000000000000734C                 STP             X19, X20, [SP,#var_s10]
.text:0000000000007350                 MOV             X19, X1
.text:0000000000007354                 MOV             X20, X0
.text:0000000000007358                 BL              sub_705C
.text:000000000000735C                 LDR             X1, [X19,#0x668]
.text:0000000000007360                 ADD             X19, X19, X1,LSL#4
.text:0000000000007364                 LDR             W0, [X19,#8]
.text:0000000000007368                 CMP             W0, #6
.text:000000000000736C                 B.NE            loc_7378
.text:0000000000007370                 STR             XZR, [X20,#0x318]
.text:0000000000007374                 B               loc_7384
.text:0000000000007378 ; ---------------------------------------------------------------------------
.text:0000000000007378 loc_7378                                ; CODE XREF: sub_7344+28↑j
.text:0000000000007378                 MOV             X0, X20
.text:000000000000737C                 BL              sub_5EE4
.text:0000000000007380                 STR             X0, [X20,#0x318]
.text:0000000000007384 loc_7384                                ; CODE XREF: sub_7344+30↑j
.text:0000000000007384                 LDP             X19, X20, [SP,#var_s10]
.text:0000000000007388                 LDP             X29, X30, [SP+var_s0],#0x20
.text:000000000000738C                 RET
.text:000000000000738C ; } // starts at 7344
.text:000000000000738C ; End of function sub_7344
.text:0000000000007390 ; =============== S U B R O U T I N E =======================================
.text:0000000000007390 ; Attributes: bp-based frame fpd=0x6C0
.text:0000000000007390 sub_7390                                ; CODE XREF: sub_7634+FC↓p
.text:0000000000007390                                         ; sub_78A0+74↓p
.text:0000000000007390 var_6C0         = -0x6C0
.text:0000000000007390 var_6B0         = -0x6B0
.text:0000000000007390 var_6A0         = -0x6A0
.text:0000000000007390 var_690         = -0x690
.text:0000000000007390 ; __unwind {
.text:0000000000007390                 SUB             SP, SP, #0x680
.text:0000000000007394                 STP             X29, X30, [SP,#0x680+var_6C0]!
.text:0000000000007398                 MOV             X29, SP
.text:000000000000739C                 STP             X19, X20, [SP,#0x6C0+var_6B0]
.text:00000000000073A0                 STP             X21, X22, [SP,#0x6C0+var_6A0]
.text:00000000000073A4                 STP             X23, X24, [SP,#0x6C0+var_690]
.text:00000000000073A8                 MOV             X21, X0
.text:00000000000073AC                 MOV             X19, X1
.text:00000000000073B0                 ADD             X20, X29, #0x40 ; '@'
.text:00000000000073B4                 MOV             W23, #4
.text:00000000000073B8 loc_73B8                                ; CODE XREF: sub_7390+A0↓j
.text:00000000000073B8                 MOV             X1, X20
.text:00000000000073BC                 MOV             X0, X19
.text:00000000000073C0                 BL              sub_6684
.text:00000000000073C4                 MOV             W24, W0
.text:00000000000073C8                 MOV             X0, X19
.text:00000000000073CC                 BL              sub_6048
.text:00000000000073D0                 LDR             X1, [X19,#0x340]
.text:00000000000073D4                 SUB             X0, X0, X1,LSR#63
.text:00000000000073D8                 LDR             X1, [X21,#0x18]
.text:00000000000073DC                 CMP             X0, X1
.text:00000000000073E0                 CSEL            W22, W23, WZR, EQ
.text:00000000000073E4                 CBNZ            W24, loc_7434
.text:00000000000073E8                 LDR             X5, [X20,#0x650]
.text:00000000000073EC                 CBNZ            X5, loc_73F8
.text:00000000000073F0 loc_73F0                                ; CODE XREF: sub_7390+8C↓j
.text:00000000000073F0                 CBZ             W22, loc_7424
.text:00000000000073F4                 BL              .abort
.text:00000000000073F8 ; ---------------------------------------------------------------------------
.text:00000000000073F8 loc_73F8                                ; CODE XREF: sub_7390+5C↑j
.text:00000000000073F8                 LDR             X2, [X21]
.text:00000000000073FC                 MOV             W0, #1
.text:0000000000007400                 ORR             W1, W22, #2
.text:0000000000007404                 MOV             X3, X21
.text:0000000000007408                 MOV             X4, X19
.text:000000000000740C                 BLR             X5
.text:0000000000007410                 CMP             W0, #7
.text:0000000000007414                 B.EQ            loc_7438
.text:0000000000007418                 CMP             W0, #8
.text:000000000000741C                 B.EQ            loc_73F0
.text:0000000000007420                 B               loc_7434
.text:0000000000007424 ; ---------------------------------------------------------------------------
.text:0000000000007424 loc_7424                                ; CODE XREF: sub_7390:loc_73F0↑j
.text:0000000000007424                 MOV             X0, X19
.text:0000000000007428                 MOV             X1, X20
.text:000000000000742C                 BL              sub_7344
.text:0000000000007430                 B               loc_73B8
.text:0000000000007434 ; ---------------------------------------------------------------------------
.text:0000000000007434 loc_7434                                ; CODE XREF: sub_7390+54↑j
.text:0000000000007434                                         ; sub_7390+90↑j
.text:0000000000007434                 MOV             W0, #2
.text:0000000000007438 loc_7438                                ; CODE XREF: sub_7390+84↑j
.text:0000000000007438                 LDP             X19, X20, [SP,#0x6C0+var_6B0]
.text:000000000000743C                 LDP             X21, X22, [SP,#0x6C0+var_6A0]
.text:0000000000007440                 LDP             X23, X24, [SP,#0x6C0+var_690]
.text:0000000000007444                 LDP             X29, X30, [SP+0x6C0+var_6C0],#0x40
.text:0000000000007448                 ADD             SP, SP, #0x680
.text:000000000000744C                 RET
.text:000000000000744C ; } // starts at 7390
.text:000000000000744C ; End of function sub_7390
.text:0000000000007450 ; =============== S U B R O U T I N E =======================================
.text:0000000000007450 ; Attributes: bp-based frame fpd=0x6D0
.text:0000000000007450 sub_7450                                ; CODE XREF: .text:0000000000007828↓p
.text:0000000000007450                                         ; sub_78A0+84↓p ...
.text:0000000000007450 var_6D0         = -0x6D0
.text:0000000000007450 var_6C0         = -0x6C0
.text:0000000000007450 var_6B0         = -0x6B0
.text:0000000000007450 var_6A0         = -0x6A0
.text:0000000000007450 var_690         = -0x690
.text:0000000000007450 ; __unwind {
.text:0000000000007450                 SUB             SP, SP, #0x680
.text:0000000000007454                 STP             X29, X30, [SP,#0x680+var_6D0]!
.text:0000000000007458                 MOV             X29, SP
.text:000000000000745C                 STP             X23, X24, [SP,#0x6D0+var_6A0]
.text:0000000000007460                 LDR             X23, [X0,#0x10]
.text:0000000000007464                 LDR             X24, [X0,#0x18]
.text:0000000000007468                 STP             X21, X22, [SP,#0x6D0+var_6B0]
.text:000000000000746C                 STP             X25, X26, [SP,#0x6D0+var_690]
.text:0000000000007470                 STP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000007474                 MOV             X21, X1
.text:0000000000007478                 MOV             X20, X0
.text:000000000000747C                 ADD             X22, X29, #0x50 ; 'P'
.text:0000000000007480                 MOV             W25, #0x1A
.text:0000000000007484                 MOV             W26, #0xA
.text:0000000000007488 loc_7488                                ; CODE XREF: sub_7450+94↓j
.text:0000000000007488                 MOV             X0, X21
.text:000000000000748C                 MOV             X1, X22
.text:0000000000007490                 BL              sub_6684
.text:0000000000007494                 CMP             W0, #5
.text:0000000000007498                 MOV             W19, W0
.text:000000000000749C                 B.EQ            loc_74A4
.text:00000000000074A0                 CBNZ            W0, loc_7514
.text:00000000000074A4 loc_74A4                                ; CODE XREF: sub_7450+4C↑j
.text:00000000000074A4                 CMP             W19, #5
.text:00000000000074A8                 LDR             X2, [X20]
.text:00000000000074AC                 MOV             W0, #1
.text:00000000000074B0                 CSEL            W1, W25, W26, EQ
.text:00000000000074B4                 MOV             X3, X20
.text:00000000000074B8                 MOV             X4, X21
.text:00000000000074BC                 MOV             X5, X24
.text:00000000000074C0                 BLR             X23
.text:00000000000074C4                 CBNZ            W0, loc_7514
.text:00000000000074C8                 CMP             W19, #5
.text:00000000000074CC                 B.EQ            loc_751C
.text:00000000000074D0                 LDR             X5, [X22,#0x650]
.text:00000000000074D4                 CBNZ            X5, loc_74E8
.text:00000000000074D8 loc_74D8                                ; CODE XREF: sub_7450+C0↓j
.text:00000000000074D8                 MOV             X0, X21
.text:00000000000074DC                 MOV             X1, X22
.text:00000000000074E0                 BL              sub_7344
.text:00000000000074E4                 B               loc_7488
.text:00000000000074E8 ; ---------------------------------------------------------------------------
.text:00000000000074E8 loc_74E8                                ; CODE XREF: sub_7450+84↑j
.text:00000000000074E8                 LDR             X2, [X20]
.text:00000000000074EC                 MOV             W0, #1
.text:00000000000074F0                 MOV             W1, #0xA
.text:00000000000074F4                 MOV             X3, X20
.text:00000000000074F8                 MOV             X4, X21
.text:00000000000074FC                 BLR             X5
.text:0000000000007500                 CMP             W0, #7
.text:0000000000007504                 MOV             W19, W0
.text:0000000000007508                 B.EQ            loc_751C
.text:000000000000750C                 CMP             W0, #8
.text:0000000000007510                 B.EQ            loc_74D8
.text:0000000000007514 loc_7514                                ; CODE XREF: sub_7450+50↑j
.text:0000000000007514                                         ; sub_7450+74↑j
.text:0000000000007514                 MOV             W0, #2
.text:0000000000007518                 B               loc_7520
.text:000000000000751C ; ---------------------------------------------------------------------------
.text:000000000000751C loc_751C                                ; CODE XREF: sub_7450+7C↑j
.text:000000000000751C                                         ; sub_7450+B8↑j
.text:000000000000751C                 MOV             W0, W19
.text:0000000000007520 loc_7520                                ; CODE XREF: sub_7450+C8↑j
.text:0000000000007520                 LDP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000007524                 LDP             X21, X22, [SP,#0x6D0+var_6B0]
.text:0000000000007528                 LDP             X23, X24, [SP,#0x6D0+var_6A0]
.text:000000000000752C                 LDP             X25, X26, [SP,#0x6D0+var_690]
.text:0000000000007530                 LDP             X29, X30, [SP+0x6D0+var_6D0],#0x50
.text:0000000000007534                 ADD             SP, SP, #0x680
.text:0000000000007538                 RET
.text:0000000000007538 ; } // starts at 7450
.text:0000000000007538 ; End of function sub_7450
.text:000000000000753C ; ---------------------------------------------------------------------------
.text:000000000000753C ; __unwind {
.text:000000000000753C                 SUB             SP, SP, #0xA40
.text:0000000000007540                 MOV             X2, #0x3C0
.text:0000000000007544                 STP             X29, X30, [SP,#-0x30]!
.text:0000000000007548                 MOV             X29, SP
.text:000000000000754C                 STP             X19, X20, [SP,#0x10]
.text:0000000000007550                 ADD             X20, X29, #0x30 ; '0'
.text:0000000000007554                 STR             X21, [SP,#0x20]
.text:0000000000007558                 MOV             X19, X1
.text:000000000000755C                 MOV             X21, X0
.text:0000000000007560                 MOV             W1, #0
.text:0000000000007564                 MOV             X0, X20
.text:0000000000007568                 ADD             X21, X21, #1
.text:000000000000756C                 BL              .memset
.text:0000000000007570                 STR             X21, [X20,#0x318]
.text:0000000000007574                 MOV             X0, #0x4000000000000000
.text:0000000000007578                 ADD             X21, X29, #0x3F0
.text:000000000000757C                 STR             X0, [X20,#0x340]
.text:0000000000007580                 MOV             X1, X21
.text:0000000000007584                 MOV             X0, X20
.text:0000000000007588                 BL              sub_6684
.text:000000000000758C                 MOV             X1, #0
.text:0000000000007590                 CBNZ            W0, loc_7618
.text:0000000000007594                 LDR             W0, [X29,#0xA30]
.text:0000000000007598                 CMP             W0, #2
.text:000000000000759C                 B.EQ            loc_7618
.text:00000000000075A0                 ADD             X0, X21, #8
.text:00000000000075A4                 ADD             X2, X19, #0x334
.text:00000000000075A8                 ADD             X1, X19, #0x20 ; ' '
.text:00000000000075AC                 ADD             X21, X21, #0x628
.text:00000000000075B0 loc_75B0                                ; CODE XREF: .text:00000000000075E8↓j
.text:00000000000075B0                 LDRB            W3, [X0]
.text:00000000000075B4                 STRB            W3, [X2]
.text:00000000000075B8                 CMP             W3, #1
.text:00000000000075BC                 B.EQ            loc_75C8
.text:00000000000075C0                 CMP             W3, #2
.text:00000000000075C4                 B.NE            loc_75D4
.text:00000000000075C8 loc_75C8                                ; CODE XREF: .text:00000000000075BC↑j
.text:00000000000075C8                 LDUR            X3, [X0,#-8]
.text:00000000000075CC                 STR             X3, [X1]
.text:00000000000075D0                 B               loc_75D8
.text:00000000000075D4 ; ---------------------------------------------------------------------------
.text:00000000000075D4 loc_75D4                                ; CODE XREF: .text:00000000000075C4↑j
.text:00000000000075D4                 STR             XZR, [X1]
.text:00000000000075D8 loc_75D8                                ; CODE XREF: .text:00000000000075D0↑j
.text:00000000000075D8                 ADD             X0, X0, #0x10
.text:00000000000075DC                 ADD             X2, X2, #1
.text:00000000000075E0                 CMP             X0, X21
.text:00000000000075E4                 ADD             X1, X1, #8
.text:00000000000075E8                 B.NE            loc_75B0
.text:00000000000075EC                 LDR             X0, [X29,#0xA18]
.text:00000000000075F0                 MOV             X1, X19
.text:00000000000075F4                 STR             X0, [X19,#0x10]
.text:00000000000075F8                 LDR             X0, [X29,#0xA20]
.text:00000000000075FC                 STRH            W0, [X19,#0x330]
.text:0000000000007600                 LDR             X0, [X29,#0xA58]
.text:0000000000007604                 STRH            W0, [X19,#0x332]
.text:0000000000007608                 LDR             X0, [X20,#0x350]
.text:000000000000760C                 STR             X0, [X19,#0x18]
.text:0000000000007610                 LDR             X0, [X29,#0xA68]
.text:0000000000007614                 STR             X0, [X19,#8]
.text:0000000000007618 loc_7618                                ; CODE XREF: .text:0000000000007590↑j
.text:0000000000007618                                         ; .text:000000000000759C↑j
.text:0000000000007618                 LDP             X19, X20, [SP,#0x10]
.text:000000000000761C                 LDR             X21, [SP,#0x20]
.text:0000000000007620                 LDP             X29, X30, [SP],#0x30
.text:0000000000007624                 MOV             X0, X1
.text:0000000000007628                 ADD             SP, SP, #0xA40
.text:000000000000762C                 RET
.text:000000000000762C ; } // starts at 753C
.text:0000000000007630 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0000000000007634 ; =============== S U B R O U T I N E =======================================
.text:0000000000007634 ; Attributes: bp-based frame fpd=0xED0
.text:0000000000007634 sub_7634                                ; CODE XREF: .text:00000000000079E4↓p
.text:0000000000007634 var_ED0         = -0xED0
.text:0000000000007634 var_EC8         = -0xEC8
.text:0000000000007634 var_EC0         = -0xEC0
.text:0000000000007634 var_EB0         = -0xEB0
.text:0000000000007634 var_EA0         = -0xEA0
.text:0000000000007634 var_E90         = -0xE90
.text:0000000000007634 var_E80         = -0xE80
.text:0000000000007634 var_E70         = -0xE70
.text:0000000000007634 var_E60         = -0xE60
.text:0000000000007634 var_E50         = -0xE50
.text:0000000000007634 var_E40         = -0xE40
.text:0000000000007634 var_E30         = -0xE30
.text:0000000000007634 var_E20         = -0xE20
.text:0000000000007634 var_E08         = -0xE08
.text:0000000000007634 ; __unwind {
.text:0000000000007634                 SUB             SP, SP, #0xE10
.text:0000000000007638                 STP             X29, X30, [SP,#0xE10+var_ED0]!
.text:000000000000763C                 MOV             X29, SP
.text:0000000000007640                 STP             X21, X22, [SP,#0xED0+var_E90]
.text:0000000000007644                 STP             D8, D9, [SP,#0xED0+var_E50]
.text:0000000000007648                 ADD             X21, X29, #0xD0
.text:000000000000764C                 STP             D10, D11, [SP,#0xED0+var_E40]
.text:0000000000007650                 STP             X0, X1, [SP,#0xED0+var_EC0]
.text:0000000000007654                 STP             D12, D13, [SP,#0xED0+var_E30]
.text:0000000000007658                 STP             X2, X3, [SP,#0xED0+var_EB0]
.text:000000000000765C                 STP             D14, D15, [SP,#0xED0+var_E20]
.text:0000000000007660                 STP             X19, X20, [SP,#0xED0+var_EA0]
.text:0000000000007664                 MOV             X2, X30
.text:0000000000007668                 ADD             X1, X29, #0xED0
.text:000000000000766C                 MOV             X20, X0
.text:0000000000007670                 MOV             X0, X21
.text:0000000000007674                 STP             X23, X24, [SP,#0xED0+var_E80]
.text:0000000000007678                 STP             X25, X26, [SP,#0xED0+var_E70]
.text:000000000000767C                 STP             X27, X28, [SP,#0xED0+var_E60]
.text:0000000000007680                 ADD             X19, X29, #0x490
.text:0000000000007684                 BL              sub_7268
.text:0000000000007688                 MOV             X0, X19 ; dest
.text:000000000000768C                 MOV             X1, X21 ; src
.text:0000000000007690                 MOV             X2, #0x3C0 ; n
.text:0000000000007694                 ADD             X22, X29, #0x850
.text:0000000000007698                 BL              .memcpy
.text:000000000000769C loc_769C                                ; CODE XREF: sub_7634+9C↓j
.text:000000000000769C                 MOV             X0, X19
.text:00000000000076A0                 MOV             X1, X22
.text:00000000000076A4                 BL              sub_6684
.text:00000000000076A8                 CMP             W0, #5
.text:00000000000076AC                 B.EQ            loc_7768
.text:00000000000076B0                 CBZ             W0, loc_76BC
.text:00000000000076B4 loc_76B4                                ; CODE XREF: sub_7634+C8↓j
.text:00000000000076B4                 MOV             W0, #3
.text:00000000000076B8                 B               loc_7768
.text:00000000000076BC ; ---------------------------------------------------------------------------
.text:00000000000076BC loc_76BC                                ; CODE XREF: sub_7634+7C↑j
.text:00000000000076BC                 LDR             X5, [X22,#0x650]
.text:00000000000076C0                 CBNZ            X5, loc_76D4
.text:00000000000076C4 loc_76C4                                ; CODE XREF: sub_7634+C4↓j
.text:00000000000076C4                 MOV             X0, X19
.text:00000000000076C8                 MOV             X1, X22
.text:00000000000076CC                 BL              sub_7344
.text:00000000000076D0                 B               loc_769C
.text:00000000000076D4 ; ---------------------------------------------------------------------------
.text:00000000000076D4 loc_76D4                                ; CODE XREF: sub_7634+8C↑j
.text:00000000000076D4                 MOV             W0, #1
.text:00000000000076D8                 LDR             X2, [X20]
.text:00000000000076DC                 MOV             W1, W0
.text:00000000000076E0                 MOV             X3, X20
.text:00000000000076E4                 MOV             X4, X19
.text:00000000000076E8                 BLR             X5
.text:00000000000076EC                 CMP             W0, #6
.text:00000000000076F0                 B.EQ            loc_7700
.text:00000000000076F4                 CMP             W0, #8
.text:00000000000076F8                 B.EQ            loc_76C4
.text:00000000000076FC                 B               loc_76B4
.text:0000000000007700 ; ---------------------------------------------------------------------------
.text:0000000000007700 loc_7700                                ; CODE XREF: sub_7634+BC↑j
.text:0000000000007700                 STR             XZR, [X20,#0x10]
.text:0000000000007704                 MOV             X0, X19
.text:0000000000007708                 BL              sub_6048
.text:000000000000770C                 LDR             X1, [X19,#0x340]
.text:0000000000007710                 MOV             X2, #0x3C0 ; n
.text:0000000000007714                 SUB             X0, X0, X1,LSR#63
.text:0000000000007718                 MOV             X1, X21 ; src
.text:000000000000771C                 STR             X0, [X20,#0x18]
.text:0000000000007720                 MOV             X0, X19 ; dest
.text:0000000000007724                 BL              .memcpy
.text:0000000000007728                 MOV             X0, X20
.text:000000000000772C                 MOV             X1, X19
.text:0000000000007730                 BL              sub_7390
.text:0000000000007734                 CMP             W0, #7
.text:0000000000007738                 B.NE            loc_7768
.text:000000000000773C                 MOV             X1, X19
.text:0000000000007740                 MOV             X0, X21
.text:0000000000007744                 BL              sub_5F3C
.text:0000000000007748                 LDR             X20, [X19,#0x318]
.text:000000000000774C                 STR             X0, [X29,#0xED0+var_E08]
.text:0000000000007750                 LDR             X0, [X19,#0x310]
.text:0000000000007754                 MOV             X1, X20
.text:0000000000007758                 BL              nullsub_1
.text:000000000000775C                 STR             X20, [SP,#0xED0+var_EC8]
.text:0000000000007760                 LDR             X4, [X29,#0xED0+var_E08]
.text:0000000000007764                 B               loc_776C
.text:0000000000007768 ; ---------------------------------------------------------------------------
.text:0000000000007768 loc_7768                                ; CODE XREF: sub_7634+78↑j
.text:0000000000007768                                         ; sub_7634+84↑j ...
.text:0000000000007768                 MOV             X4, #0
.text:000000000000776C loc_776C                                ; CODE XREF: sub_7634+130↑j
.text:000000000000776C                 LDP             X2, X3, [SP,#0xED0+var_EB0]
.text:0000000000007770                 LDP             D8, D9, [SP,#0xED0+var_E50]
.text:0000000000007774                 LDP             X19, X20, [SP,#0xED0+var_EA0]
.text:0000000000007778                 LDP             D10, D11, [SP,#0xED0+var_E40]
.text:000000000000777C                 LDP             X21, X22, [SP,#0xED0+var_E90]
.text:0000000000007780                 LDP             D12, D13, [SP,#0xED0+var_E30]
.text:0000000000007784                 LDP             X23, X24, [SP,#0xED0+var_E80]
.text:0000000000007788                 LDP             D14, D15, [SP,#0xED0+var_E20]
.text:000000000000778C                 LDP             X25, X26, [SP,#0xED0+var_E70]
.text:0000000000007790                 LDP             X27, X28, [SP,#0xED0+var_E60]
.text:0000000000007794                 LDP             X0, X1, [SP,#0xED0+var_EC0]
.text:0000000000007798                 LDP             X29, X30, [SP+0xED0+var_ED0],#0xC0
.text:000000000000779C                 MOV             X16, SP
.text:00000000000077A0                 ADD             SP, SP, X4
.text:00000000000077A4                 ADD             SP, SP, #0xE10
.text:00000000000077A8                 RET
.text:00000000000077A8 ; } // starts at 7634
.text:00000000000077A8 ; End of function sub_7634
.text:00000000000077AC ; ---------------------------------------------------------------------------
.text:00000000000077AC ; __unwind {
.text:00000000000077AC                 SUB             SP, SP, #0x790
.text:00000000000077B0                 STP             X29, X30, [SP,#-0xC0]!
.text:00000000000077B4                 MOV             X29, SP
.text:00000000000077B8                 STP             X19, X20, [SP,#0x30]
.text:00000000000077BC                 STP             D8, D9, [SP,#0x80]
.text:00000000000077C0                 ADD             X20, X29, #0xD0
.text:00000000000077C4                 STP             D10, D11, [SP,#0x90]
.text:00000000000077C8                 STP             X2, X3, [SP,#0x20]
.text:00000000000077CC                 STP             D12, D13, [SP,#0xA0]
.text:00000000000077D0                 STP             X0, X1, [SP,#0x10]
.text:00000000000077D4                 STP             D14, D15, [SP,#0xB0]
.text:00000000000077D8                 STP             X21, X22, [SP,#0x40]
.text:00000000000077DC                 STP             X23, X24, [SP,#0x50]
.text:00000000000077E0                 MOV             X21, X0
.text:00000000000077E4                 MOV             X23, X1
.text:00000000000077E8                 MOV             X22, X2
.text:00000000000077EC                 MOV             X0, X20
.text:00000000000077F0                 MOV             X2, X30
.text:00000000000077F4                 ADD             X1, X29, #0x850
.text:00000000000077F8                 ADD             X19, X29, #0x490
.text:00000000000077FC                 STP             X25, X26, [SP,#0x60]
.text:0000000000007800                 STP             X27, X28, [SP,#0x70]
.text:0000000000007804                 BL              sub_7268
.text:0000000000007808                 MOV             X1, X20
.text:000000000000780C                 MOV             X2, #0x3C0
.text:0000000000007810                 MOV             X0, X19
.text:0000000000007814                 BL              .memcpy
.text:0000000000007818                 STR             X23, [X21,#0x10]
.text:000000000000781C                 STR             X22, [X21,#0x18]
.text:0000000000007820                 MOV             X0, X21
.text:0000000000007824                 MOV             X1, X19
.text:0000000000007828                 BL              sub_7450
.text:000000000000782C                 CMP             W0, #7
.text:0000000000007830                 MOV             X4, #0
.text:0000000000007834                 B.NE            loc_7860
.text:0000000000007838                 MOV             X1, X19
.text:000000000000783C                 MOV             X0, X20
.text:0000000000007840                 BL              sub_5F3C
.text:0000000000007844                 LDR             X19, [X29,#0x7A8]
.text:0000000000007848                 STR             X0, [X29,#0xC8]
.text:000000000000784C                 LDR             X0, [X29,#0x7A0]
.text:0000000000007850                 MOV             X1, X19
.text:0000000000007854                 BL              nullsub_1
.text:0000000000007858                 STR             X19, [SP,#8]
.text:000000000000785C                 LDR             X4, [X29,#0xC8]
.text:0000000000007860 loc_7860                                ; CODE XREF: .text:0000000000007834↑j
.text:0000000000007860                 LDP             X2, X3, [SP,#0x20]
.text:0000000000007864                 LDP             D8, D9, [SP,#0x80]
.text:0000000000007868                 LDP             X19, X20, [SP,#0x30]
.text:000000000000786C                 LDP             D10, D11, [SP,#0x90]
.text:0000000000007870                 LDP             X21, X22, [SP,#0x40]
.text:0000000000007874                 LDP             D12, D13, [SP,#0xA0]
.text:0000000000007878                 LDP             X23, X24, [SP,#0x50]
.text:000000000000787C                 LDP             D14, D15, [SP,#0xB0]
.text:0000000000007880                 LDP             X25, X26, [SP,#0x60]
.text:0000000000007884                 LDP             X27, X28, [SP,#0x70]
.text:0000000000007888                 LDP             X0, X1, [SP,#0x10]
.text:000000000000788C                 LDP             X29, X30, [SP],#0xC0
.text:0000000000007890                 MOV             X16, SP
.text:0000000000007894                 ADD             SP, SP, X4
.text:0000000000007898                 ADD             SP, SP, #0x790
.text:000000000000789C                 RET
.text:000000000000789C ; } // starts at 77AC
.text:00000000000078A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000078A0 ; Attributes: bp-based frame fpd=0x850
.text:00000000000078A0 sub_78A0                                ; CODE XREF: TZ_ICCC_initialize(void)+1BC↑p
.text:00000000000078A0                                         ; TZ_ICCC_read(uint,uint *)+22C↑p ...
.text:00000000000078A0 var_850         = -0x850
.text:00000000000078A0 var_848         = -0x848
.text:00000000000078A0 var_840         = -0x840
.text:00000000000078A0 var_830         = -0x830
.text:00000000000078A0 var_820         = -0x820
.text:00000000000078A0 var_810         = -0x810
.text:00000000000078A0 var_800         = -0x800
.text:00000000000078A0 var_7F0         = -0x7F0
.text:00000000000078A0 var_7E0         = -0x7E0
.text:00000000000078A0 var_7D0         = -0x7D0
.text:00000000000078A0 var_7C0         = -0x7C0
.text:00000000000078A0 var_7B0         = -0x7B0
.text:00000000000078A0 var_7A0         = -0x7A0
.text:00000000000078A0 var_788         = -0x788
.text:00000000000078A0 var_B0          = -0xB0
.text:00000000000078A0 var_A8          = -0xA8
.text:00000000000078A0 ; __unwind {
.text:00000000000078A0                 SUB             SP, SP, #0x790
.text:00000000000078A4                 STP             X29, X30, [SP,#0x790+var_850]!
.text:00000000000078A8                 MOV             X29, SP
.text:00000000000078AC                 STP             X19, X20, [SP,#0x850+var_820]
.text:00000000000078B0                 STP             D8, D9, [SP,#0x850+var_7D0]
.text:00000000000078B4                 ADD             X20, X29, #0xD0
.text:00000000000078B8                 STP             D10, D11, [SP,#0x850+var_7C0]
.text:00000000000078BC                 STP             X0, X1, [SP,#0x850+var_840]
.text:00000000000078C0                 STP             D12, D13, [SP,#0x850+var_7B0]
.text:00000000000078C4                 STP             X2, X3, [SP,#0x850+var_830]
.text:00000000000078C8                 STP             D14, D15, [SP,#0x850+var_7A0]
.text:00000000000078CC                 MOV             X2, X30
.text:00000000000078D0                 ADD             X1, X29, #0x850
.text:00000000000078D4                 STP             X21, X22, [SP,#0x850+var_810]
.text:00000000000078D8                 MOV             X21, X0
.text:00000000000078DC                 MOV             X0, X20
.text:00000000000078E0                 STP             X23, X24, [SP,#0x850+var_800]
.text:00000000000078E4                 STP             X25, X26, [SP,#0x850+var_7F0]
.text:00000000000078E8                 STP             X27, X28, [SP,#0x850+var_7E0]
.text:00000000000078EC                 ADD             X19, X29, #0x490
.text:00000000000078F0                 BL              sub_7268
.text:00000000000078F4                 MOV             X0, X19 ; dest
.text:00000000000078F8                 MOV             X1, X20 ; src
.text:00000000000078FC                 MOV             X2, #0x3C0 ; n
.text:0000000000007900                 BL              .memcpy
.text:0000000000007904                 LDR             X0, [X21,#0x10]
.text:0000000000007908                 CBNZ            X0, loc_791C
.text:000000000000790C                 MOV             X0, X21
.text:0000000000007910                 MOV             X1, X19
.text:0000000000007914                 BL              sub_7390
.text:0000000000007918                 B               loc_7928
.text:000000000000791C ; ---------------------------------------------------------------------------
.text:000000000000791C loc_791C                                ; CODE XREF: sub_78A0+68↑j
.text:000000000000791C                 MOV             X0, X21
.text:0000000000007920                 MOV             X1, X19
.text:0000000000007924                 BL              sub_7450
.text:0000000000007928 loc_7928                                ; CODE XREF: sub_78A0+78↑j
.text:0000000000007928                 CMP             W0, #7
.text:000000000000792C                 B.EQ            loc_7934
.text:0000000000007930                 BL              .abort
.text:0000000000007934 ; ---------------------------------------------------------------------------
.text:0000000000007934 loc_7934                                ; CODE XREF: sub_78A0+8C↑j
.text:0000000000007934                 MOV             X1, X19
.text:0000000000007938                 MOV             X0, X20
.text:000000000000793C                 BL              sub_5F3C
.text:0000000000007940                 LDR             X19, [X29,#0x850+var_A8]
.text:0000000000007944                 STR             X0, [X29,#0x850+var_788]
.text:0000000000007948                 LDR             X0, [X29,#0x850+var_B0]
.text:000000000000794C                 MOV             X1, X19
.text:0000000000007950                 BL              nullsub_1
.text:0000000000007954                 STR             X19, [SP,#0x850+var_848]
.text:0000000000007958                 LDR             X4, [X29,#0x850+var_788]
.text:000000000000795C                 LDP             D8, D9, [SP,#0x850+var_7D0]
.text:0000000000007960                 LDP             X0, X1, [SP,#0x850+var_840]
.text:0000000000007964                 LDP             D10, D11, [SP,#0x850+var_7C0]
.text:0000000000007968                 LDP             X2, X3, [SP,#0x850+var_830]
.text:000000000000796C                 LDP             D12, D13, [SP,#0x850+var_7B0]
.text:0000000000007970                 LDP             X19, X20, [SP,#0x850+var_820]
.text:0000000000007974                 LDP             D14, D15, [SP,#0x850+var_7A0]
.text:0000000000007978                 LDP             X21, X22, [SP,#0x850+var_810]
.text:000000000000797C                 LDP             X23, X24, [SP,#0x850+var_800]
.text:0000000000007980                 LDP             X25, X26, [SP,#0x850+var_7F0]
.text:0000000000007984                 LDP             X27, X28, [SP,#0x850+var_7E0]
.text:0000000000007988                 LDP             X29, X30, [SP+0x850+var_850],#0xC0
.text:000000000000798C                 MOV             X16, SP
.text:0000000000007990                 ADD             SP, SP, X4
.text:0000000000007994                 ADD             SP, SP, #0x790
.text:0000000000007998                 RET
.text:0000000000007998 ; } // starts at 78A0
.text:0000000000007998 ; End of function sub_78A0
.text:000000000000799C ; ---------------------------------------------------------------------------
.text:000000000000799C ; __unwind {
.text:000000000000799C                 SUB             SP, SP, #0x790
.text:00000000000079A0                 STP             X29, X30, [SP,#-0xC0]!
.text:00000000000079A4                 MOV             X29, SP
.text:00000000000079A8                 STP             D8, D9, [SP,#0x80]
.text:00000000000079AC                 STP             X0, X1, [SP,#0x10]
.text:00000000000079B0                 STP             D10, D11, [SP,#0x90]
.text:00000000000079B4                 LDR             X1, [X0,#0x10]
.text:00000000000079B8                 STP             D12, D13, [SP,#0xA0]
.text:00000000000079BC                 STP             X2, X3, [SP,#0x20]
.text:00000000000079C0                 STP             D14, D15, [SP,#0xB0]
.text:00000000000079C4                 STP             X21, X22, [SP,#0x40]
.text:00000000000079C8                 STP             X19, X20, [SP,#0x30]
.text:00000000000079CC                 STP             X23, X24, [SP,#0x50]
.text:00000000000079D0                 STP             X25, X26, [SP,#0x60]
.text:00000000000079D4                 STP             X27, X28, [SP,#0x70]
.text:00000000000079D8                 MOV             X2, X30
.text:00000000000079DC                 MOV             X21, X0
.text:00000000000079E0                 CBNZ            X1, loc_79F0
.text:00000000000079E4                 BL              sub_7634
.text:00000000000079E8                 MOV             X4, #0
.text:00000000000079EC                 B               loc_7A54
.text:00000000000079F0 ; ---------------------------------------------------------------------------
.text:00000000000079F0 loc_79F0                                ; CODE XREF: .text:00000000000079E0↑j
.text:00000000000079F0                 ADD             X20, X29, #0xD0
.text:00000000000079F4                 ADD             X1, X29, #0x850
.text:00000000000079F8                 MOV             X0, X20
.text:00000000000079FC                 ADD             X19, X29, #0x490
.text:0000000000007A00                 BL              sub_7268
.text:0000000000007A04                 MOV             X1, X20
.text:0000000000007A08                 MOV             X2, #0x3C0
.text:0000000000007A0C                 MOV             X0, X19
.text:0000000000007A10                 BL              .memcpy
.text:0000000000007A14                 MOV             X0, X21
.text:0000000000007A18                 MOV             X1, X19
.text:0000000000007A1C                 BL              sub_7450
.text:0000000000007A20                 CMP             W0, #7
.text:0000000000007A24                 B.EQ            loc_7A2C
.text:0000000000007A28                 BL              .abort
.text:0000000000007A2C ; ---------------------------------------------------------------------------
.text:0000000000007A2C loc_7A2C                                ; CODE XREF: .text:0000000000007A24↑j
.text:0000000000007A2C                 MOV             X1, X19
.text:0000000000007A30                 MOV             X0, X20
.text:0000000000007A34                 BL              sub_5F3C
.text:0000000000007A38                 LDR             X19, [X29,#0x7A8]
.text:0000000000007A3C                 STR             X0, [X29,#0xC8]
.text:0000000000007A40                 LDR             X0, [X29,#0x7A0]
.text:0000000000007A44                 MOV             X1, X19
.text:0000000000007A48                 BL              nullsub_1
.text:0000000000007A4C                 STR             X19, [SP,#8]
.text:0000000000007A50                 LDR             X4, [X29,#0xC8]
.text:0000000000007A54 loc_7A54                                ; CODE XREF: .text:00000000000079EC↑j
.text:0000000000007A54                 LDP             X2, X3, [SP,#0x20]
.text:0000000000007A58                 LDP             D8, D9, [SP,#0x80]
.text:0000000000007A5C                 LDP             X19, X20, [SP,#0x30]
.text:0000000000007A60                 LDP             D10, D11, [SP,#0x90]
.text:0000000000007A64                 LDP             X21, X22, [SP,#0x40]
.text:0000000000007A68                 LDP             D12, D13, [SP,#0xA0]
.text:0000000000007A6C                 LDP             X23, X24, [SP,#0x50]
.text:0000000000007A70                 LDP             D14, D15, [SP,#0xB0]
.text:0000000000007A74                 LDP             X25, X26, [SP,#0x60]
.text:0000000000007A78                 LDP             X27, X28, [SP,#0x70]
.text:0000000000007A7C                 LDP             X0, X1, [SP,#0x10]
.text:0000000000007A80                 LDP             X29, X30, [SP],#0xC0
.text:0000000000007A84                 MOV             X16, SP
.text:0000000000007A88                 ADD             SP, SP, X4
.text:0000000000007A8C                 ADD             SP, SP, #0x790
.text:0000000000007A90                 RET
.text:0000000000007A90 ; } // starts at 799C
.text:0000000000007A94 ; ---------------------------------------------------------------------------
.text:0000000000007A94 ; __unwind {
.text:0000000000007A94                 STP             X29, X30, [SP,#-0x10]!
.text:0000000000007A98                 MOV             X29, SP
.text:0000000000007A9C                 LDR             X2, [X0,#8]
.text:0000000000007AA0                 CBZ             X2, loc_7AB0
.text:0000000000007AA4                 MOV             X1, X0
.text:0000000000007AA8                 MOV             W0, #1
.text:0000000000007AAC                 BLR             X2
.text:0000000000007AB0 loc_7AB0                                ; CODE XREF: .text:0000000000007AA0↑j
.text:0000000000007AB0                 LDP             X29, X30, [SP],#0x10
.text:0000000000007AB4                 RET
.text:0000000000007AB4 ; } // starts at 7A94
.text:0000000000007AB8 ; ---------------------------------------------------------------------------
.text:0000000000007AB8 ; __unwind {
.text:0000000000007AB8                 SUB             SP, SP, #0xA40
.text:0000000000007ABC                 MOV             X2, X30
.text:0000000000007AC0                 STP             X29, X30, [SP,#-0xA0]!
.text:0000000000007AC4                 MOV             X29, SP
.text:0000000000007AC8                 STP             X19, X20, [SP,#0x10]
.text:0000000000007ACC                 STP             D8, D9, [SP,#0x60]
.text:0000000000007AD0                 ADD             X20, X29, #0xA0
.text:0000000000007AD4                 STP             D10, D11, [SP,#0x70]
.text:0000000000007AD8                 STP             X21, X22, [SP,#0x20]
.text:0000000000007ADC                 STP             D12, D13, [SP,#0x80]
.text:0000000000007AE0                 STP             X23, X24, [SP,#0x30]
.text:0000000000007AE4                 STP             D14, D15, [SP,#0x90]
.text:0000000000007AE8                 MOV             X22, X0
.text:0000000000007AEC                 MOV             X23, X1
.text:0000000000007AF0                 MOV             X0, X20
.text:0000000000007AF4                 ADD             X1, X29, #0xAE0
.text:0000000000007AF8                 ADD             X21, X29, #0x460
.text:0000000000007AFC                 STP             X25, X26, [SP,#0x40]
.text:0000000000007B00                 STP             X27, X28, [SP,#0x50]
.text:0000000000007B04                 BL              sub_7268
.text:0000000000007B08 loc_7B08                                ; CODE XREF: .text:0000000000007B48↓j
.text:0000000000007B08                 MOV             X0, X20
.text:0000000000007B0C                 MOV             X1, X21
.text:0000000000007B10                 BL              sub_6684
.text:0000000000007B14                 CMP             W0, #5
.text:0000000000007B18                 MOV             W19, W0
.text:0000000000007B1C                 B.EQ            loc_7B24
.text:0000000000007B20                 CBNZ            W0, loc_7B4C
.text:0000000000007B24 loc_7B24                                ; CODE XREF: .text:0000000000007B1C↑j
.text:0000000000007B24                 MOV             X0, X20
.text:0000000000007B28                 MOV             X1, X23
.text:0000000000007B2C                 BLR             X22
.text:0000000000007B30                 CBNZ            W0, loc_7B4C
.text:0000000000007B34                 CMP             W19, #5
.text:0000000000007B38                 B.EQ            loc_7B54
.text:0000000000007B3C                 MOV             X0, X20
.text:0000000000007B40                 MOV             X1, X21
.text:0000000000007B44                 BL              sub_7344
.text:0000000000007B48                 B               loc_7B08
.text:0000000000007B4C ; ---------------------------------------------------------------------------
.text:0000000000007B4C loc_7B4C                                ; CODE XREF: .text:0000000000007B20↑j
.text:0000000000007B4C                                         ; .text:0000000000007B30↑j
.text:0000000000007B4C                 MOV             W0, #3
.text:0000000000007B50                 B               loc_7B58
.text:0000000000007B54 ; ---------------------------------------------------------------------------
.text:0000000000007B54 loc_7B54                                ; CODE XREF: .text:0000000000007B38↑j
.text:0000000000007B54                 MOV             W0, W19
.text:0000000000007B58 loc_7B58                                ; CODE XREF: .text:0000000000007B50↑j
.text:0000000000007B58                 LDP             X19, X20, [SP,#0x10]
.text:0000000000007B5C                 LDP             D8, D9, [SP,#0x60]
.text:0000000000007B60                 LDP             X21, X22, [SP,#0x20]
.text:0000000000007B64                 LDP             D10, D11, [SP,#0x70]
.text:0000000000007B68                 LDP             X23, X24, [SP,#0x30]
.text:0000000000007B6C                 LDP             D12, D13, [SP,#0x80]
.text:0000000000007B70                 LDP             X25, X26, [SP,#0x40]
.text:0000000000007B74                 LDP             D14, D15, [SP,#0x90]
.text:0000000000007B78                 LDP             X27, X28, [SP,#0x50]
.text:0000000000007B7C                 LDP             X29, X30, [SP],#0xA0
.text:0000000000007B80                 ADD             SP, SP, #0xA40
.text:0000000000007B84                 RET
.text:0000000000007B84 ; } // starts at 7AB8
.text:0000000000007B88 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B88 sub_7B88                                ; CODE XREF: sub_7EA0+64↓p
.text:0000000000007B88                                         ; sub_8020+6C↓p ...
.text:0000000000007B88 ; __unwind {
.text:0000000000007B88                 MOV             X2, #0
.text:0000000000007B8C                 MOV             W3, #0
.text:0000000000007B90 loc_7B90                                ; CODE XREF: sub_7B88+1C↓j
.text:0000000000007B90                 LDRB            W5, [X0],#1
.text:0000000000007B94                 AND             X4, X5, #0x7F
.text:0000000000007B98                 LSL             X4, X4, X3
.text:0000000000007B9C                 ADD             W3, W3, #7
.text:0000000000007BA0                 ORR             X2, X2, X4
.text:0000000000007BA4                 TBNZ            W5, #7, loc_7B90
.text:0000000000007BA8                 STR             X2, [X1]
.text:0000000000007BAC                 RET
.text:0000000000007BAC ; } // starts at 7B88
.text:0000000000007BAC ; End of function sub_7B88
.text:0000000000007BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BB0 sub_7BB0                                ; CODE XREF: sub_7EA0+74↓p
.text:0000000000007BB0                                         ; sub_8020+74↓p
.text:0000000000007BB0 ; __unwind {
.text:0000000000007BB0                 MOV             X2, #0
.text:0000000000007BB4                 MOV             W3, #0
.text:0000000000007BB8 loc_7BB8                                ; CODE XREF: sub_7BB0+1C↓j
.text:0000000000007BB8                 LDRB            W4, [X0],#1
.text:0000000000007BBC                 AND             X5, X4, #0x7F
.text:0000000000007BC0                 LSL             X5, X5, X3
.text:0000000000007BC4                 ADD             W3, W3, #7
.text:0000000000007BC8                 ORR             X2, X2, X5
.text:0000000000007BCC                 TBNZ            W4, #7, loc_7BB8
.text:0000000000007BD0                 CMP             W3, #0x3F ; '?'
.text:0000000000007BD4                 B.HI            loc_7BE8
.text:0000000000007BD8                 TBZ             W4, #6, loc_7BE8
.text:0000000000007BDC                 MOV             X4, #0xFFFFFFFFFFFFFFFF
.text:0000000000007BE0                 LSL             X3, X4, X3
.text:0000000000007BE4                 ORR             X2, X3, X2
.text:0000000000007BE8 loc_7BE8                                ; CODE XREF: sub_7BB0+24↑j
.text:0000000000007BE8                                         ; sub_7BB0+28↑j
.text:0000000000007BE8                 STR             X2, [X1]
.text:0000000000007BEC                 RET
.text:0000000000007BEC ; } // starts at 7BB0
.text:0000000000007BEC ; End of function sub_7BB0
.text:0000000000007BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BF0 sub_7BF0                                ; DATA XREF: sub_89D8:loc_8E2C↓o
.text:0000000000007BF0                                         ; sub_89D8+458↓o
.text:0000000000007BF0 ; __unwind {
.text:0000000000007BF0                 LDR             X3, [X1,#8]
.text:0000000000007BF4                 LDR             X1, [X2,#8]
.text:0000000000007BF8                 CMP             X3, X1
.text:0000000000007BFC                 CSETM           W0, CC
.text:0000000000007C00                 CMP             X3, X1
.text:0000000000007C04                 CSINC           W0, W0, WZR, LS
.text:0000000000007C08                 RET
.text:0000000000007C08 ; } // starts at 7BF0
.text:0000000000007C08 ; End of function sub_7BF0
.text:0000000000007C0C ; =============== S U B R O U T I N E =======================================
.text:0000000000007C0C ; Attributes: bp-based frame fpd=0x60
.text:0000000000007C0C sub_7C0C                                ; CODE XREF: sub_7CCC+4C↓p
.text:0000000000007C0C                                         ; sub_7CCC+94↓p
.text:0000000000007C0C var_60          = -0x60
.text:0000000000007C0C var_50          = -0x50
.text:0000000000007C0C var_40          = -0x40
.text:0000000000007C0C var_30          = -0x30
.text:0000000000007C0C var_20          = -0x20
.text:0000000000007C0C var_8           = -8
.text:0000000000007C0C ; __unwind {
.text:0000000000007C0C                 STP             X29, X30, [SP,#var_60]!
.text:0000000000007C10                 MOV             X29, SP
.text:0000000000007C14                 STP             X19, X20, [SP,#0x60+var_50]
.text:0000000000007C18                 LSL             W19, W3, #1
.text:0000000000007C1C                 STR             X25, [SP,#0x60+var_20]
.text:0000000000007C20                 STP             X23, X24, [SP,#0x60+var_30]
.text:0000000000007C24                 STP             X21, X22, [SP,#0x60+var_40]
.text:0000000000007C28                 MOV             X24, X0
.text:0000000000007C2C                 MOV             X25, X1
.text:0000000000007C30                 MOV             X20, X2
.text:0000000000007C34                 MOV             W23, W4
.text:0000000000007C38                 ADD             W19, W19, #1
.text:0000000000007C3C loc_7C3C                                ; CODE XREF: sub_7C0C+A4↓j
.text:0000000000007C3C                 CMP             W19, W23
.text:0000000000007C40                 B.GE            loc_7CB4
.text:0000000000007C44                 ADD             W21, W19, #1
.text:0000000000007C48                 CMP             W21, W23
.text:0000000000007C4C                 B.GE            loc_7C78
.text:0000000000007C50                 SBFIZ           X1, X19, #3, #0x20 ; ' '
.text:0000000000007C54                 MOV             X0, X24
.text:0000000000007C58                 ADD             X2, X20, X1
.text:0000000000007C5C                 STR             X3, [X29,#0x60+var_8]
.text:0000000000007C60                 LDR             X1, [X20,X1]
.text:0000000000007C64                 LDR             X2, [X2,#8]
.text:0000000000007C68                 BLR             X25
.text:0000000000007C6C                 CMP             W0, WZR
.text:0000000000007C70                 LDR             X3, [X29,#0x60+var_8]
.text:0000000000007C74                 CSEL            W19, W19, W21, GE
.text:0000000000007C78 loc_7C78                                ; CODE XREF: sub_7C0C+40↑j
.text:0000000000007C78                 SBFIZ           X21, X3, #3, #0x20 ; ' '
.text:0000000000007C7C                 SBFIZ           X22, X19, #3, #0x20 ; ' '
.text:0000000000007C80                 MOV             X0, X24
.text:0000000000007C84                 LDR             X1, [X20,X21]
.text:0000000000007C88                 LDR             X2, [X20,X22]
.text:0000000000007C8C                 BLR             X25
.text:0000000000007C90                 TBZ             W0, #0x1F, loc_7CB4
.text:0000000000007C94                 LDR             X1, [X20,X22]
.text:0000000000007C98                 MOV             W3, W19
.text:0000000000007C9C                 LDR             X0, [X20,X21]
.text:0000000000007CA0                 STR             X1, [X20,X21]
.text:0000000000007CA4                 STR             X0, [X20,X22]
.text:0000000000007CA8                 LSL             W0, W19, #1
.text:0000000000007CAC                 ADD             W19, W0, #1
.text:0000000000007CB0                 B               loc_7C3C
.text:0000000000007CB4 ; ---------------------------------------------------------------------------
.text:0000000000007CB4 loc_7CB4                                ; CODE XREF: sub_7C0C+34↑j
.text:0000000000007CB4                                         ; sub_7C0C+84↑j
.text:0000000000007CB4                 LDP             X19, X20, [SP,#0x60+var_50]
.text:0000000000007CB8                 LDP             X21, X22, [SP,#0x60+var_40]
.text:0000000000007CBC                 LDP             X23, X24, [SP,#0x60+var_30]
.text:0000000000007CC0                 LDR             X25, [SP,#0x60+var_20]
.text:0000000000007CC4                 LDP             X29, X30, [SP+0x60+var_60],#0x60
.text:0000000000007CC8                 RET
.text:0000000000007CC8 ; } // starts at 7C0C
.text:0000000000007CC8 ; End of function sub_7C0C
.text:0000000000007CCC ; =============== S U B R O U T I N E =======================================
.text:0000000000007CCC ; Attributes: bp-based frame fpd=0x50
.text:0000000000007CCC sub_7CCC                                ; CODE XREF: sub_89D8+158↓p
.text:0000000000007CCC                                         ; sub_89D8+54C↓p
.text:0000000000007CCC var_50          = -0x50
.text:0000000000007CCC var_40          = -0x40
.text:0000000000007CCC var_30          = -0x30
.text:0000000000007CCC var_20          = -0x20
.text:0000000000007CCC var_10          = -0x10
.text:0000000000007CCC ; __unwind {
.text:0000000000007CCC                 STP             X29, X30, [SP,#var_50]!
.text:0000000000007CD0                 MOV             X29, SP
.text:0000000000007CD4                 STP             X19, X20, [SP,#0x50+var_40]
.text:0000000000007CD8                 LDR             X19, [X2,#8]
.text:0000000000007CDC                 STP             X21, X22, [SP,#0x50+var_30]
.text:0000000000007CE0                 STP             X23, X24, [SP,#0x50+var_20]
.text:0000000000007CE4                 STR             X25, [SP,#0x50+var_10]
.text:0000000000007CE8                 MOV             X24, X0
.text:0000000000007CEC                 MOV             X25, X1
.text:0000000000007CF0                 MOV             X21, X2
.text:0000000000007CF4                 ADD             X22, X2, #0x10
.text:0000000000007CF8                 LSR             X20, X19, #1
.text:0000000000007CFC loc_7CFC                                ; CODE XREF: sub_7CCC+50↓j
.text:0000000000007CFC                 SUB             W20, W20, #1
.text:0000000000007D00                 TBNZ            W20, #0x1F, loc_7D20
.text:0000000000007D04                 MOV             X0, X24
.text:0000000000007D08                 MOV             X1, X25
.text:0000000000007D0C                 MOV             X2, X22
.text:0000000000007D10                 MOV             W3, W20
.text:0000000000007D14                 MOV             W4, W19
.text:0000000000007D18                 BL              sub_7C0C
.text:0000000000007D1C                 B               loc_7CFC
.text:0000000000007D20 ; ---------------------------------------------------------------------------
.text:0000000000007D20 loc_7D20                                ; CODE XREF: sub_7CCC+34↑j
.text:0000000000007D20                 MOV             X20, #0
.text:0000000000007D24                 SUB             W19, W19, #1
.text:0000000000007D28                 ADD             X23, X22, W19,SXTW#3
.text:0000000000007D2C loc_7D2C                                ; CODE XREF: sub_7CCC+98↓j
.text:0000000000007D2C                 CMP             W19, WZR
.text:0000000000007D30                 B.LE            loc_7D68
.text:0000000000007D34                 LDR             X1, [X23,X20]
.text:0000000000007D38                 MOV             W4, W19
.text:0000000000007D3C                 LDR             X0, [X21,#0x10]
.text:0000000000007D40                 MOV             X2, X22
.text:0000000000007D44                 STR             X1, [X21,#0x10]
.text:0000000000007D48                 MOV             W3, #0
.text:0000000000007D4C                 STR             X0, [X23,X20]
.text:0000000000007D50                 MOV             X1, X25
.text:0000000000007D54                 MOV             X0, X24
.text:0000000000007D58                 SUB             W19, W19, #1
.text:0000000000007D5C                 SUB             X20, X20, #8
.text:0000000000007D60                 BL              sub_7C0C
.text:0000000000007D64                 B               loc_7D2C
.text:0000000000007D68 ; ---------------------------------------------------------------------------
.text:0000000000007D68 loc_7D68                                ; CODE XREF: sub_7CCC+64↑j
.text:0000000000007D68                 LDP             X19, X20, [SP,#0x50+var_40]
.text:0000000000007D6C                 LDP             X21, X22, [SP,#0x50+var_30]
.text:0000000000007D70                 LDP             X23, X24, [SP,#0x50+var_20]
.text:0000000000007D74                 LDR             X25, [SP,#0x50+var_10]
.text:0000000000007D78                 LDP             X29, X30, [SP+0x50+var_50],#0x50
.text:0000000000007D7C                 RET
.text:0000000000007D7C ; } // starts at 7CCC
.text:0000000000007D7C ; End of function sub_7CCC
.text:0000000000007D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D80 ; Attributes: bp-based frame
.text:0000000000007D80 sub_7D80                                ; CODE XREF: sub_811C+F8↓p
.text:0000000000007D80                                         ; sub_828C+340↓p ...
.text:0000000000007D80 var_s0          =  0
.text:0000000000007D80 ; __unwind {
.text:0000000000007D80                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000007D84                 UXTB            W0, W0
.text:0000000000007D88                 CMP             W0, #0xFF
.text:0000000000007D8C                 MOV             X29, SP
.text:0000000000007D90                 B.EQ            loc_7DCC
.text:0000000000007D94                 AND             W0, W0, #7
.text:0000000000007D98                 CMP             W0, #4  ; switch 5 cases
.text:0000000000007D9C                 B.HI            def_7DB4 ; jumptable 0000000000007DB4 default case, case 1
.text:0000000000007DA0                 ADRP            X1, #jpt_7DB4@PAGE
.text:0000000000007DA4                 ADD             X1, X1, #jpt_7DB4@PAGEOFF
.text:0000000000007DA8                 LDRB            W0, [X1,W0,UXTW]
.text:0000000000007DAC                 ADR             X1, loc_7DB8 ; jumptable 0000000000007DB4 case 2
.text:0000000000007DB0                 ADD             X0, X1, W0,SXTB#2
.text:0000000000007DB4                 BR              X0      ; switch jump
.text:0000000000007DB8 ; ---------------------------------------------------------------------------
.text:0000000000007DB8 loc_7DB8                                ; CODE XREF: sub_7D80+34↑j
.text:0000000000007DB8                                         ; DATA XREF: sub_7D80+2C↑o
.text:0000000000007DB8                 MOV             W0, #2  ; jumptable 0000000000007DB4 case 2
.text:0000000000007DBC                 B               loc_7DD8
.text:0000000000007DC0 ; ---------------------------------------------------------------------------
.text:0000000000007DC0 loc_7DC0                                ; CODE XREF: sub_7D80+34↑j
.text:0000000000007DC0                 MOV             W0, #4  ; jumptable 0000000000007DB4 case 3
.text:0000000000007DC4                 B               loc_7DD8
.text:0000000000007DC8 ; ---------------------------------------------------------------------------
.text:0000000000007DC8 def_7DB4                                ; CODE XREF: sub_7D80+1C↑j
.text:0000000000007DC8                                         ; sub_7D80+34↑j
.text:0000000000007DC8                 BL              .abort  ; jumptable 0000000000007DB4 default case, case 1
.text:0000000000007DCC ; ---------------------------------------------------------------------------
.text:0000000000007DCC loc_7DCC                                ; CODE XREF: sub_7D80+10↑j
.text:0000000000007DCC                 MOV             W0, #0
.text:0000000000007DD0                 B               loc_7DD8
.text:0000000000007DD4 ; ---------------------------------------------------------------------------
.text:0000000000007DD4 loc_7DD4                                ; CODE XREF: sub_7D80+34↑j
.text:0000000000007DD4                 MOV             W0, #8  ; jumptable 0000000000007DB4 cases 0,4
.text:0000000000007DD8 loc_7DD8                                ; CODE XREF: sub_7D80+3C↑j
.text:0000000000007DD8                                         ; sub_7D80+44↑j ...
.text:0000000000007DD8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000007DDC                 RET
.text:0000000000007DDC ; } // starts at 7D80
.text:0000000000007DDC ; End of function sub_7D80
.text:0000000000007DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DE0 ; Attributes: bp-based frame
.text:0000000000007DE0 sub_7DE0                                ; CODE XREF: sub_7F90+30↓p
.text:0000000000007DE0                                         ; sub_811C+38↓p ...
.text:0000000000007DE0 var_s0          =  0
.text:0000000000007DE0 ; __unwind {
.text:0000000000007DE0                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000007DE4                 UXTB            W0, W0
.text:0000000000007DE8                 CMP             W0, #0xFF
.text:0000000000007DEC                 MOV             X29, SP
.text:0000000000007DF0                 B.EQ            loc_7E34
.text:0000000000007DF4                 AND             W0, W0, #0x70
.text:0000000000007DF8                 CMP             W0, #0x20 ; ' '
.text:0000000000007DFC                 B.EQ            loc_7E24
.text:0000000000007E00                 B.HI            loc_7E10
.text:0000000000007E04                 CMP             W0, #0x10
.text:0000000000007E08                 CBNZ            W0, loc_7E1C
.text:0000000000007E0C                 B               loc_7E34
.text:0000000000007E10 ; ---------------------------------------------------------------------------
.text:0000000000007E10 loc_7E10                                ; CODE XREF: sub_7DE0+20↑j
.text:0000000000007E10                 CMP             W0, #0x30 ; '0'
.text:0000000000007E14                 B.EQ            loc_7E2C
.text:0000000000007E18                 CMP             W0, #0x50 ; 'P'
.text:0000000000007E1C loc_7E1C                                ; CODE XREF: sub_7DE0+28↑j
.text:0000000000007E1C                 B.EQ            loc_7E34
.text:0000000000007E20                 BL              .abort
.text:0000000000007E24 ; ---------------------------------------------------------------------------
.text:0000000000007E24 loc_7E24                                ; CODE XREF: sub_7DE0+1C↑j
.text:0000000000007E24                 LDR             X0, [X1,#8]
.text:0000000000007E28                 B               loc_7E38
.text:0000000000007E2C ; ---------------------------------------------------------------------------
.text:0000000000007E2C loc_7E2C                                ; CODE XREF: sub_7DE0+34↑j
.text:0000000000007E2C                 LDR             X0, [X1,#0x10]
.text:0000000000007E30                 B               loc_7E38
.text:0000000000007E34 ; ---------------------------------------------------------------------------
.text:0000000000007E34 loc_7E34                                ; CODE XREF: sub_7DE0+10↑j
.text:0000000000007E34                                         ; sub_7DE0+2C↑j ...
.text:0000000000007E34                 MOV             X0, #0
.text:0000000000007E38 loc_7E38                                ; CODE XREF: sub_7DE0+48↑j
.text:0000000000007E38                                         ; sub_7DE0+50↑j
.text:0000000000007E38                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000007E3C                 RET
.text:0000000000007E3C ; } // starts at 7DE0
.text:0000000000007E3C ; End of function sub_7DE0
.text:0000000000007E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E40 ; Attributes: bp-based frame
.text:0000000000007E40 sub_7E40                                ; CODE XREF: sub_828C+238↓p
.text:0000000000007E40                                         ; sub_828C+278↓p ...
.text:0000000000007E40 var_s0          =  0
.text:0000000000007E40 ; __unwind {
.text:0000000000007E40                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000007E44                 UXTB            W0, W0
.text:0000000000007E48                 CMP             W0, #0xFF
.text:0000000000007E4C                 MOV             X29, SP
.text:0000000000007E50                 B.EQ            loc_7E94
.text:0000000000007E54                 AND             W0, W0, #0x70
.text:0000000000007E58                 CMP             W0, #0x20 ; ' '
.text:0000000000007E5C                 B.EQ            loc_7E84
.text:0000000000007E60                 B.HI            loc_7E70
.text:0000000000007E64                 CMP             W0, #0x10
.text:0000000000007E68                 CBNZ            W0, loc_7E7C
.text:0000000000007E6C                 B               loc_7E94
.text:0000000000007E70 ; ---------------------------------------------------------------------------
.text:0000000000007E70 loc_7E70                                ; CODE XREF: sub_7E40+20↑j
.text:0000000000007E70                 CMP             W0, #0x30 ; '0'
.text:0000000000007E74                 B.EQ            loc_7E8C
.text:0000000000007E78                 CMP             W0, #0x50 ; 'P'
.text:0000000000007E7C loc_7E7C                                ; CODE XREF: sub_7E40+28↑j
.text:0000000000007E7C                 B.EQ            loc_7E94
.text:0000000000007E80                 BL              .abort
.text:0000000000007E84 ; ---------------------------------------------------------------------------
.text:0000000000007E84 loc_7E84                                ; CODE XREF: sub_7E40+1C↑j
.text:0000000000007E84                 LDR             X0, [X1,#8]
.text:0000000000007E88                 B               loc_7E98
.text:0000000000007E8C ; ---------------------------------------------------------------------------
.text:0000000000007E8C loc_7E8C                                ; CODE XREF: sub_7E40+34↑j
.text:0000000000007E8C                 LDR             X0, [X1,#0x10]
.text:0000000000007E90                 B               loc_7E98
.text:0000000000007E94 ; ---------------------------------------------------------------------------
.text:0000000000007E94 loc_7E94                                ; CODE XREF: sub_7E40+10↑j
.text:0000000000007E94                                         ; sub_7E40+2C↑j ...
.text:0000000000007E94                 MOV             X0, #0
.text:0000000000007E98 loc_7E98                                ; CODE XREF: sub_7E40+48↑j
.text:0000000000007E98                                         ; sub_7E40+50↑j
.text:0000000000007E98                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000007E9C                 RET
.text:0000000000007E9C ; } // starts at 7E40
.text:0000000000007E9C ; End of function sub_7E40
.text:0000000000007EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EA0 ; Attributes: bp-based frame fpd=0x40
.text:0000000000007EA0 sub_7EA0                                ; CODE XREF: sub_7F90+48↓p
.text:0000000000007EA0                                         ; sub_7F90+60↓p ...
.text:0000000000007EA0 var_40          = -0x40
.text:0000000000007EA0 var_30          = -0x30
.text:0000000000007EA0 var_20          = -0x20
.text:0000000000007EA0 var_8           = -8
.text:0000000000007EA0 ; __unwind {
.text:0000000000007EA0                 STP             X29, X30, [SP,#var_40]!
.text:0000000000007EA4                 MOV             X29, SP
.text:0000000000007EA8                 STP             X19, X20, [SP,#0x40+var_30]
.text:0000000000007EAC                 UXTB            W20, W0
.text:0000000000007EB0                 MOV             X19, X2
.text:0000000000007EB4                 STP             X21, X22, [SP,#0x40+var_20]
.text:0000000000007EB8                 CMP             W20, #0x50 ; 'P'
.text:0000000000007EBC                 MOV             X22, X1
.text:0000000000007EC0                 MOV             X21, X3
.text:0000000000007EC4                 B.NE            loc_7ED8
.text:0000000000007EC8                 ADD             X19, X2, #7
.text:0000000000007ECC                 AND             X0, X19, #0xFFFFFFFFFFFFFFF8
.text:0000000000007ED0                 LDR             X1, [X0],#8
.text:0000000000007ED4                 B               loc_7F7C
.text:0000000000007ED8 ; ---------------------------------------------------------------------------
.text:0000000000007ED8 loc_7ED8                                ; CODE XREF: sub_7EA0+24↑j
.text:0000000000007ED8                 AND             W1, W20, #0xF
.text:0000000000007EDC                 CMP             W1, #0xC ; switch 13 cases
.text:0000000000007EE0                 B.HI            def_7EF8 ; jumptable 0000000000007EF8 default case, cases 5-8
.text:0000000000007EE4                 ADRP            X0, #jpt_7EF8@PAGE
.text:0000000000007EE8                 ADD             X0, X0, #jpt_7EF8@PAGEOFF
.text:0000000000007EEC                 LDRB            W0, [X0,W1,UXTW]
.text:0000000000007EF0                 ADR             X1, loc_7EFC ; jumptable 0000000000007EF8 case 1
.text:0000000000007EF4                 ADD             X0, X1, W0,SXTB#2
.text:0000000000007EF8                 BR              X0      ; switch jump
.text:0000000000007EFC ; ---------------------------------------------------------------------------
.text:0000000000007EFC loc_7EFC                                ; CODE XREF: sub_7EA0+58↑j
.text:0000000000007EFC                                         ; DATA XREF: sub_7EA0+50↑o
.text:0000000000007EFC                 MOV             X0, X2  ; jumptable 0000000000007EF8 case 1
.text:0000000000007F00                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000007F04                 BL              sub_7B88
.text:0000000000007F08                 B               loc_7F18
.text:0000000000007F0C ; ---------------------------------------------------------------------------
.text:0000000000007F0C loc_7F0C                                ; CODE XREF: sub_7EA0+58↑j
.text:0000000000007F0C                 MOV             X0, X2  ; jumptable 0000000000007EF8 case 9
.text:0000000000007F10                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000007F14                 BL              sub_7BB0
.text:0000000000007F18 loc_7F18                                ; CODE XREF: sub_7EA0+68↑j
.text:0000000000007F18                 LDR             X1, [X29,#0x40+var_8]
.text:0000000000007F1C                 B               loc_7F60
.text:0000000000007F20 ; ---------------------------------------------------------------------------
.text:0000000000007F20 loc_7F20                                ; CODE XREF: sub_7EA0+58↑j
.text:0000000000007F20                 MOV             X0, X2  ; jumptable 0000000000007EF8 case 2
.text:0000000000007F24                 LDRH            W1, [X0],#2
.text:0000000000007F28                 B               loc_7F60
.text:0000000000007F2C ; ---------------------------------------------------------------------------
.text:0000000000007F2C loc_7F2C                                ; CODE XREF: sub_7EA0+58↑j
.text:0000000000007F2C                 MOV             X0, X2  ; jumptable 0000000000007EF8 case 3
.text:0000000000007F30                 LDR             W1, [X0],#4
.text:0000000000007F34                 B               loc_7F60
.text:0000000000007F38 ; ---------------------------------------------------------------------------
.text:0000000000007F38 loc_7F38                                ; CODE XREF: sub_7EA0+58↑j
.text:0000000000007F38                 MOV             X0, X2  ; jumptable 0000000000007EF8 case 10
.text:0000000000007F3C                 LDRSH           X1, [X0],#2
.text:0000000000007F40                 B               loc_7F60
.text:0000000000007F44 ; ---------------------------------------------------------------------------
.text:0000000000007F44 loc_7F44                                ; CODE XREF: sub_7EA0+58↑j
.text:0000000000007F44                 MOV             X0, X2  ; jumptable 0000000000007EF8 case 11
.text:0000000000007F48                 LDRSW           X1, [X0],#4
.text:0000000000007F4C                 B               loc_7F60
.text:0000000000007F50 ; ---------------------------------------------------------------------------
.text:0000000000007F50 loc_7F50                                ; CODE XREF: sub_7EA0+58↑j
.text:0000000000007F50                 MOV             X0, X2  ; jumptable 0000000000007EF8 cases 0,4,12
.text:0000000000007F54                 LDR             X1, [X0],#8
.text:0000000000007F58                 B               loc_7F60
.text:0000000000007F5C ; ---------------------------------------------------------------------------
.text:0000000000007F5C def_7EF8                                ; CODE XREF: sub_7EA0+40↑j
.text:0000000000007F5C                                         ; sub_7EA0+58↑j
.text:0000000000007F5C                 BL              .abort  ; jumptable 0000000000007EF8 default case, cases 5-8
.text:0000000000007F60 ; ---------------------------------------------------------------------------
.text:0000000000007F60 loc_7F60                                ; CODE XREF: sub_7EA0+7C↑j
.text:0000000000007F60                                         ; sub_7EA0+88↑j ...
.text:0000000000007F60                 CBZ             X1, loc_7F7C
.text:0000000000007F64                 AND             W2, W20, #0x70
.text:0000000000007F68                 CMP             W2, #0x10
.text:0000000000007F6C                 CSEL            X19, X19, X22, EQ
.text:0000000000007F70                 ADD             X1, X1, X19
.text:0000000000007F74                 TBZ             W20, #7, loc_7F7C
.text:0000000000007F78                 LDR             X1, [X1]
.text:0000000000007F7C loc_7F7C                                ; CODE XREF: sub_7EA0+34↑j
.text:0000000000007F7C                                         ; sub_7EA0:loc_7F60↑j ...
.text:0000000000007F7C                 STR             X1, [X21]
.text:0000000000007F80                 LDP             X19, X20, [SP,#0x40+var_30]
.text:0000000000007F84                 LDP             X21, X22, [SP,#0x40+var_20]
.text:0000000000007F88                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:0000000000007F8C                 RET
.text:0000000000007F8C ; } // starts at 7EA0
.text:0000000000007F8C ; End of function sub_7EA0
.text:0000000000007F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F90 ; Attributes: bp-based frame fpd=0x50
.text:0000000000007F90 sub_7F90                                ; DATA XREF: sub_89D8+43C↓o
.text:0000000000007F90                                         ; sub_89D8+440↓o
.text:0000000000007F90 var_50          = -0x50
.text:0000000000007F90 var_40          = -0x40
.text:0000000000007F90 var_30          = -0x30
.text:0000000000007F90 var_20          = -0x20
.text:0000000000007F90 var_10          = -0x10
.text:0000000000007F90 var_8           = -8
.text:0000000000007F90 ; __unwind {
.text:0000000000007F90                 STP             X29, X30, [SP,#var_50]!
.text:0000000000007F94                 MOV             X29, SP
.text:0000000000007F98                 STP             X19, X20, [SP,#0x50+var_40]
.text:0000000000007F9C                 LDRH            W19, [X0,#0x20]
.text:0000000000007FA0                 MOV             X20, X0
.text:0000000000007FA4                 STR             X23, [SP,#0x50+var_20]
.text:0000000000007FA8                 MOV             X23, X1
.text:0000000000007FAC                 UBFX            X19, X19, #3, #8
.text:0000000000007FB0                 MOV             X1, X20
.text:0000000000007FB4                 MOV             W0, W19
.text:0000000000007FB8                 STP             X21, X22, [SP,#0x50+var_30]
.text:0000000000007FBC                 MOV             X22, X2
.text:0000000000007FC0                 BL              sub_7DE0
.text:0000000000007FC4                 MOV             X21, X0
.text:0000000000007FC8                 ADD             X2, X23, #8
.text:0000000000007FCC                 MOV             X1, X21
.text:0000000000007FD0                 ADD             X3, X29, #0x40 ; '@'
.text:0000000000007FD4                 MOV             W0, W19
.text:0000000000007FD8                 BL              sub_7EA0
.text:0000000000007FDC                 LDRH            W0, [X20,#0x20]
.text:0000000000007FE0                 MOV             X1, X21
.text:0000000000007FE4                 ADD             X2, X22, #8
.text:0000000000007FE8                 ADD             X3, X29, #0x48 ; 'H'
.text:0000000000007FEC                 LSR             X0, X0, #3
.text:0000000000007FF0                 BL              sub_7EA0
.text:0000000000007FF4                 LDR             X23, [SP,#0x50+var_20]
.text:0000000000007FF8                 LDR             X2, [X29,#0x50+var_10]
.text:0000000000007FFC                 LDR             X1, [X29,#0x50+var_8]
.text:0000000000008000                 LDP             X19, X20, [SP,#0x50+var_40]
.text:0000000000008004                 CMP             X2, X1
.text:0000000000008008                 CSETM           W0, CC
.text:000000000000800C                 CMP             X2, X1
.text:0000000000008010                 LDP             X21, X22, [SP,#0x50+var_30]
.text:0000000000008014                 CSINC           W0, W0, WZR, LS
.text:0000000000008018                 LDP             X29, X30, [SP+0x50+var_50],#0x50
.text:000000000000801C                 RET
.text:000000000000801C ; } // starts at 7F90
.text:000000000000801C ; End of function sub_7F90
.text:0000000000008020 ; =============== S U B R O U T I N E =======================================
.text:0000000000008020 ; Attributes: bp-based frame fpd=0x40
.text:0000000000008020 sub_8020                                ; CODE XREF: sub_811C+80↓p
.text:0000000000008020                                         ; sub_827C+C↓j ...
.text:0000000000008020 var_40          = -0x40
.text:0000000000008020 var_30          = -0x30
.text:0000000000008020 ; __unwind {
.text:0000000000008020                 STP             X29, X30, [SP,#var_40]!
.text:0000000000008024                 MOV             X29, SP
.text:0000000000008028                 STP             X19, X20, [SP,#0x40+var_30]
.text:000000000000802C                 ADD             X20, X0, #9
.text:0000000000008030                 MOV             X19, X0
.text:0000000000008034                 MOV             X0, X20 ; s
.text:0000000000008038                 BL              .strlen
.text:000000000000803C                 ADD             X0, X0, #1
.text:0000000000008040                 LDRB            W2, [X19,#8]
.text:0000000000008044                 ADD             X1, X20, X0
.text:0000000000008048                 CMP             W2, #3
.text:000000000000804C                 B.LS            loc_806C
.text:0000000000008050                 LDRB            W2, [X20,X0]
.text:0000000000008054                 MOV             W0, #0xFF
.text:0000000000008058                 CMP             W2, #8
.text:000000000000805C                 B.NE            loc_8110
.text:0000000000008060                 LDRB            W2, [X1,#1]
.text:0000000000008064                 CBNZ            W2, loc_8110
.text:0000000000008068                 ADD             X1, X1, #2
.text:000000000000806C loc_806C                                ; CODE XREF: sub_8020+2C↑j
.text:000000000000806C                 LDRB            W0, [X19,#9]
.text:0000000000008070                 CMP             W0, #0x7A ; 'z'
.text:0000000000008074                 B.EQ            loc_8080
.text:0000000000008078 loc_8078                                ; CODE XREF: sub_8020+E0↓j
.text:0000000000008078                 MOV             W0, #0
.text:000000000000807C                 B               loc_8110
.text:0000000000008080 ; ---------------------------------------------------------------------------
.text:0000000000008080 loc_8080                                ; CODE XREF: sub_8020+54↑j
.text:0000000000008080                 ADD             X20, X29, #0x30 ; '0'
.text:0000000000008084                 MOV             X0, X1
.text:0000000000008088                 MOV             X1, X20
.text:000000000000808C                 BL              sub_7B88
.text:0000000000008090                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000008094                 BL              sub_7BB0
.text:0000000000008098                 LDRB            W2, [X19,#8]
.text:000000000000809C                 CMP             W2, #1
.text:00000000000080A0                 B.NE            loc_80AC
.text:00000000000080A4                 ADD             X0, X0, #1
.text:00000000000080A8                 B               loc_80B4
.text:00000000000080AC ; ---------------------------------------------------------------------------
.text:00000000000080AC loc_80AC                                ; CODE XREF: sub_8020+80↑j
.text:00000000000080AC                 MOV             X1, X20
.text:00000000000080B0                 BL              sub_7B88
.text:00000000000080B4 loc_80B4                                ; CODE XREF: sub_8020+88↑j
.text:00000000000080B4                 MOV             X1, X20
.text:00000000000080B8                 ADD             X19, X19, #0xA
.text:00000000000080BC                 ADD             X20, X29, #0x28 ; '('
.text:00000000000080C0                 BL              sub_7B88
.text:00000000000080C4 loc_80C4                                ; CODE XREF: sub_8020+EC↓j
.text:00000000000080C4                 LDRB            W1, [X19]
.text:00000000000080C8                 CMP             W1, #0x52 ; 'R'
.text:00000000000080CC                 B.NE            loc_80D8
.text:00000000000080D0                 LDRB            W0, [X0]
.text:00000000000080D4                 B               loc_8110
.text:00000000000080D8 ; ---------------------------------------------------------------------------
.text:00000000000080D8 loc_80D8                                ; CODE XREF: sub_8020+AC↑j
.text:00000000000080D8                 CMP             W1, #0x50 ; 'P'
.text:00000000000080DC                 B.NE            loc_80FC
.text:00000000000080E0                 MOV             X2, X0
.text:00000000000080E4                 MOV             X1, #0
.text:00000000000080E8                 MOV             X3, X20
.text:00000000000080EC                 LDRB            W0, [X2],#1
.text:00000000000080F0                 AND             W0, W0, #0x7F
.text:00000000000080F4                 BL              sub_7EA0
.text:00000000000080F8                 B               loc_8108
.text:00000000000080FC ; ---------------------------------------------------------------------------
.text:00000000000080FC loc_80FC                                ; CODE XREF: sub_8020+BC↑j
.text:00000000000080FC                 CMP             W1, #0x4C ; 'L'
.text:0000000000008100                 B.NE            loc_8078
.text:0000000000008104                 ADD             X0, X0, #1
.text:0000000000008108 loc_8108                                ; CODE XREF: sub_8020+D8↑j
.text:0000000000008108                 ADD             X19, X19, #1
.text:000000000000810C                 B               loc_80C4
.text:0000000000008110 ; ---------------------------------------------------------------------------
.text:0000000000008110 loc_8110                                ; CODE XREF: sub_8020+3C↑j
.text:0000000000008110                                         ; sub_8020+44↑j ...
.text:0000000000008110                 LDP             X19, X20, [SP,#0x40+var_30]
.text:0000000000008114                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:0000000000008118                 RET
.text:0000000000008118 ; } // starts at 8020
.text:0000000000008118 ; End of function sub_8020
.text:000000000000811C ; =============== S U B R O U T I N E =======================================
.text:000000000000811C ; Attributes: bp-based frame fpd=0x70
.text:000000000000811C sub_811C                                ; CODE XREF: sub_828C+3B4↓p
.text:000000000000811C                                         ; sub_89D8+3B0↓p ...
.text:000000000000811C var_70          = -0x70
.text:000000000000811C var_60          = -0x60
.text:000000000000811C var_50          = -0x50
.text:000000000000811C var_40          = -0x40
.text:000000000000811C var_30          = -0x30
.text:000000000000811C var_20          = -0x20
.text:000000000000811C var_10          = -0x10
.text:000000000000811C var_8           = -8
.text:000000000000811C ; __unwind {
.text:000000000000811C                 STP             X29, X30, [SP,#var_70]!
.text:0000000000008120                 MOV             X29, SP
.text:0000000000008124                 STP             X21, X22, [SP,#0x70+var_50]
.text:0000000000008128                 MOV             X22, X0
.text:000000000000812C                 LDRH            W0, [X0,#0x20]
.text:0000000000008130                 STP             X19, X20, [SP,#0x70+var_60]
.text:0000000000008134                 UBFX            X0, X0, #3, #8
.text:0000000000008138                 MOV             X19, X1
.text:000000000000813C                 MOV             X1, X22
.text:0000000000008140                 STP             X23, X24, [SP,#0x70+var_40]
.text:0000000000008144                 STP             X25, X26, [SP,#0x70+var_30]
.text:0000000000008148                 STP             X27, X28, [SP,#0x70+var_20]
.text:000000000000814C                 MOV             X23, X2
.text:0000000000008150                 UXTB            W21, W0
.text:0000000000008154                 BL              sub_7DE0
.text:0000000000008158                 ADD             X24, X29, #0x60 ; '`'
.text:000000000000815C                 MOV             X27, X0
.text:0000000000008160                 ADD             X25, X29, #0x68 ; 'h'
.text:0000000000008164                 MOV             X0, #0
.text:0000000000008168                 MOV             X26, #1
.text:000000000000816C loc_816C                                ; CODE XREF: sub_811C+13C↓j
.text:000000000000816C                 LDR             W1, [X19]
.text:0000000000008170                 CBZ             W1, loc_825C
.text:0000000000008174                 LDR             W1, [X19,#4]
.text:0000000000008178                 CBZ             W1, loc_8244
.text:000000000000817C                 LDRB            W2, [X22,#0x20]
.text:0000000000008180                 MOV             X20, X0
.text:0000000000008184                 TBZ             W2, #2, loc_81B0
.text:0000000000008188                 ADD             X20, X19, #4
.text:000000000000818C                 SUB             X20, X20, W1,SXTW
.text:0000000000008190                 CMP             X20, X0
.text:0000000000008194                 B.EQ            loc_81B0
.text:0000000000008198                 MOV             X0, X20
.text:000000000000819C                 BL              sub_8020
.text:00000000000081A0                 MOV             W21, W0
.text:00000000000081A4                 MOV             X1, X22
.text:00000000000081A8                 BL              sub_7DE0
.text:00000000000081AC                 MOV             X27, X0
.text:00000000000081B0 loc_81B0                                ; CODE XREF: sub_811C+68↑j
.text:00000000000081B0                                         ; sub_811C+78↑j
.text:00000000000081B0                 CBNZ            W21, loc_81E4
.text:00000000000081B4                 LDR             X0, [X19,#8]
.text:00000000000081B8                 LDR             X1, [X19,#0x10]
.text:00000000000081BC                 STR             X0, [X29,#0x70+var_10]
.text:00000000000081C0                 STR             X1, [X29,#0x70+var_8]
.text:00000000000081C4                 CBZ             X0, loc_8248
.text:00000000000081C8 loc_81C8                                ; CODE XREF: sub_811C+124↓j
.text:00000000000081C8                 LDR             X0, [X29,#0x70+var_10]
.text:00000000000081CC                 LDR             X1, [X29,#0x70+var_8]
.text:00000000000081D0                 SUB             X0, X23, X0
.text:00000000000081D4                 CMP             X0, X1
.text:00000000000081D8                 B.CS            loc_8248
.text:00000000000081DC                 MOV             X0, X19
.text:00000000000081E0                 B               loc_8260
.text:00000000000081E4 ; ---------------------------------------------------------------------------
.text:00000000000081E4 loc_81E4                                ; CODE XREF: sub_811C:loc_81B0↑j
.text:00000000000081E4                 UXTB            W28, W21
.text:00000000000081E8                 MOV             X1, X27
.text:00000000000081EC                 ADD             X2, X19, #8
.text:00000000000081F0                 MOV             X3, X24
.text:00000000000081F4                 MOV             W0, W28
.text:00000000000081F8                 BL              sub_7EA0
.text:00000000000081FC                 MOV             X2, X0
.text:0000000000008200                 MOV             X1, #0
.text:0000000000008204                 MOV             X3, X25
.text:0000000000008208                 AND             W0, W21, #0xF
.text:000000000000820C                 BL              sub_7EA0
.text:0000000000008210                 MOV             W0, W28
.text:0000000000008214                 BL              sub_7D80
.text:0000000000008218                 MOV             W0, W0
.text:000000000000821C                 CMP             X0, #7
.text:0000000000008220                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008224                 B.HI            loc_8234
.text:0000000000008228                 LSL             X1, X0, #3
.text:000000000000822C                 LSL             X1, X26, X1
.text:0000000000008230                 SUB             X1, X1, #1
.text:0000000000008234 loc_8234                                ; CODE XREF: sub_811C+108↑j
.text:0000000000008234                 LDR             X0, [X29,#0x70+var_10]
.text:0000000000008238                 TST             X1, X0
.text:000000000000823C                 B.EQ            loc_8248
.text:0000000000008240                 B               loc_81C8
.text:0000000000008244 ; ---------------------------------------------------------------------------
.text:0000000000008244 loc_8244                                ; CODE XREF: sub_811C+5C↑j
.text:0000000000008244                 MOV             X20, X0
.text:0000000000008248 loc_8248                                ; CODE XREF: sub_811C+A8↑j
.text:0000000000008248                                         ; sub_811C+BC↑j ...
.text:0000000000008248                 LDR             W0, [X19]
.text:000000000000824C                 ADD             X0, X0, #4
.text:0000000000008250                 ADD             X19, X19, X0
.text:0000000000008254                 MOV             X0, X20
.text:0000000000008258                 B               loc_816C
.text:000000000000825C ; ---------------------------------------------------------------------------
.text:000000000000825C loc_825C                                ; CODE XREF: sub_811C+54↑j
.text:000000000000825C                 MOV             X0, #0
.text:0000000000008260 loc_8260                                ; CODE XREF: sub_811C+C4↑j
.text:0000000000008260                 LDP             X19, X20, [SP,#0x70+var_60]
.text:0000000000008264                 LDP             X21, X22, [SP,#0x70+var_50]
.text:0000000000008268                 LDP             X23, X24, [SP,#0x70+var_40]
.text:000000000000826C                 LDP             X25, X26, [SP,#0x70+var_30]
.text:0000000000008270                 LDP             X27, X28, [SP,#0x70+var_20]
.text:0000000000008274                 LDP             X29, X30, [SP+0x70+var_70],#0x70
.text:0000000000008278                 RET
.text:0000000000008278 ; } // starts at 811C
.text:0000000000008278 ; End of function sub_811C
.text:000000000000827C ; =============== S U B R O U T I N E =======================================
.text:000000000000827C sub_827C                                ; CODE XREF: sub_828C+334↓p
.text:000000000000827C                                         ; sub_828C+3C0↓p ...
.text:000000000000827C ; __unwind {
.text:000000000000827C                 ADD             X1, X0, #4
.text:0000000000008280                 LDRSW           X0, [X0,#4]
.text:0000000000008284                 SUB             X0, X1, X0
.text:0000000000008288                 B               sub_8020
.text:0000000000008288 ; } // starts at 827C
.text:0000000000008288 ; End of function sub_827C
.text:000000000000828C ; =============== S U B R O U T I N E =======================================
.text:000000000000828C ; Attributes: bp-based frame fpd=0x90
.text:000000000000828C sub_828C                                ; DATA XREF: sub_9224+14C↓o
.text:000000000000828C                                         ; sub_9224+150↓o
.text:000000000000828C var_90          = -0x90
.text:000000000000828C var_80          = -0x80
.text:000000000000828C var_70          = -0x70
.text:000000000000828C var_60          = -0x60
.text:000000000000828C var_48          = -0x48
.text:000000000000828C var_40          = -0x40
.text:000000000000828C var_38          = -0x38
.text:000000000000828C var_30          = -0x30
.text:000000000000828C var_28          = -0x28
.text:000000000000828C var_20          = -0x20
.text:000000000000828C var_18          = -0x18
.text:000000000000828C var_10          = -0x10
.text:000000000000828C ; __unwind {
.text:000000000000828C                 STP             X29, X30, [SP,#var_90]!
.text:0000000000008290                 CMP             X1, #0x2F ; '/'
.text:0000000000008294                 MOV             X29, SP
.text:0000000000008298                 STP             X19, X20, [SP,#0x90+var_80]
.text:000000000000829C                 STP             X21, X22, [SP,#0x90+var_70]
.text:00000000000082A0                 STP             X23, X24, [SP,#0x90+var_60]
.text:00000000000082A4                 CSET            W13, HI
.text:00000000000082A8                 LDR             X6, [X0,#0x10]
.text:00000000000082AC                 LDR             X7, [X0]
.text:00000000000082B0                 CBZ             W13, loc_83A4
.text:00000000000082B4                 LDR             W3, [X2,#0x28]
.text:00000000000082B8                 CBZ             W3, loc_83A4
.text:00000000000082BC                 ADRP            X1, #qword_A010@PAGE
.text:00000000000082C0                 LDR             X4, [X0,#0x20]
.text:00000000000082C4                 LDR             X5, [X0,#0x28]
.text:00000000000082C8                 LDR             X3, [X1,#qword_A010@PAGEOFF]
.text:00000000000082CC                 CMP             X4, X3
.text:00000000000082D0                 ADRP            X3, #qword_C068@PAGE
.text:00000000000082D4                 B.NE            loc_8360
.text:00000000000082D8                 LDR             X9, [X3,#qword_C068@PAGEOFF]
.text:00000000000082DC                 ADD             X8, X3, #qword_C068@PAGEOFF
.text:00000000000082E0                 CMP             X5, X9
.text:00000000000082E4                 B.NE            loc_8360
.text:00000000000082E8                 LDR             X9, [X8,#(qword_C070 - 0xC068)]
.text:00000000000082EC                 MOV             X4, #0
.text:00000000000082F0                 MOV             X5, #0
.text:00000000000082F4                 MOV             X1, X9
.text:00000000000082F8 loc_82F8                                ; CODE XREF: sub_828C+D0↓j
.text:00000000000082F8                 CBZ             X1, loc_83BC
.text:00000000000082FC                 LDR             X10, [X2]
.text:0000000000008300                 LDR             X8, [X1]
.text:0000000000008304                 LDR             X4, [X1,#8]
.text:0000000000008308                 CMP             X10, X8
.text:000000000000830C                 B.CC            loc_8340
.text:0000000000008310                 CMP             X10, X4
.text:0000000000008314                 B.CS            loc_8340
.text:0000000000008318                 CMP             X1, X9
.text:000000000000831C                 LDR             X7, [X1,#0x10]
.text:0000000000008320                 LDR             X8, [X1,#0x18]
.text:0000000000008324                 B.EQ            loc_849C
.text:0000000000008328                 ADD             X3, X3, #qword_C068@PAGEOFF
.text:000000000000832C                 LDR             X0, [X1,#0x28]
.text:0000000000008330                 STR             X0, [X5,#0x28]
.text:0000000000008334                 STR             X9, [X1,#0x28]
.text:0000000000008338                 STR             X1, [X3,#(qword_C070 - 0xC068)]
.text:000000000000833C                 B               loc_849C
.text:0000000000008340 ; ---------------------------------------------------------------------------
.text:0000000000008340 loc_8340                                ; CODE XREF: sub_828C+80↑j
.text:0000000000008340                                         ; sub_828C+88↑j
.text:0000000000008340                 ORR             X4, X8, X4
.text:0000000000008344                 CBZ             X4, loc_83B8
.text:0000000000008348                 LDR             X8, [X1,#0x28]
.text:000000000000834C                 MOV             X4, X1
.text:0000000000008350                 CMP             X8, XZR
.text:0000000000008354                 CSEL            X5, X5, X1, EQ
.text:0000000000008358                 MOV             X1, X8
.text:000000000000835C                 B               loc_82F8
.text:0000000000008360 ; ---------------------------------------------------------------------------
.text:0000000000008360 loc_8360                                ; CODE XREF: sub_828C+48↑j
.text:0000000000008360                                         ; sub_828C+58↑j
.text:0000000000008360                 STR             X4, [X1,#qword_A010@PAGEOFF]
.text:0000000000008364                 ADD             X4, X3, #qword_C068@PAGEOFF
.text:0000000000008368                 ADD             X1, X4, #0x40 ; '@'
.text:000000000000836C                 STR             X5, [X3,#qword_C068@PAGEOFF]
.text:0000000000008370                 ADD             X4, X4, #0x1C0
.text:0000000000008374 loc_8374                                ; CODE XREF: sub_828C+FC↓j
.text:0000000000008374                 STUR            XZR, [X1,#-0x30]
.text:0000000000008378                 STUR            XZR, [X1,#-0x28]
.text:000000000000837C                 STUR            X1, [X1,#-8]
.text:0000000000008380                 ADD             X1, X1, #0x30 ; '0'
.text:0000000000008384                 CMP             X1, X4
.text:0000000000008388                 B.NE            loc_8374
.text:000000000000838C                 ADD             X3, X3, #qword_C068@PAGEOFF
.text:0000000000008390                 ADD             X1, X3, #0x10
.text:0000000000008394                 STR             XZR, [X3,#(qword_C1F0 - 0xC068)]
.text:0000000000008398                 STR             X1, [X3,#(qword_C070 - 0xC068)]
.text:000000000000839C                 STR             WZR, [X2,#0x28]
.text:00000000000083A0                 B               loc_83AC
.text:00000000000083A4 ; ---------------------------------------------------------------------------
.text:00000000000083A4 loc_83A4                                ; CODE XREF: sub_828C+24↑j
.text:00000000000083A4                                         ; sub_828C+2C↑j
.text:00000000000083A4                 CMP             X1, #0x19
.text:00000000000083A8                 B.LS            loc_8688
.text:00000000000083AC loc_83AC                                ; CODE XREF: sub_828C+114↑j
.text:00000000000083AC                 MOV             X4, #0
.text:00000000000083B0                 MOV             X5, #0
.text:00000000000083B4                 B               loc_83BC
.text:00000000000083B8 ; ---------------------------------------------------------------------------
.text:00000000000083B8 loc_83B8                                ; CODE XREF: sub_828C+B8↑j
.text:00000000000083B8                 MOV             X4, X1
.text:00000000000083BC loc_83BC                                ; CODE XREF: sub_828C:loc_82F8↑j
.text:00000000000083BC                                         ; sub_828C+128↑j
.text:00000000000083BC                 LDRH            W14, [X0,#0x18]
.text:00000000000083C0                 MOV             X9, #0
.text:00000000000083C4                 MOV             X10, #0
.text:00000000000083C8                 MOV             X12, #0
.text:00000000000083CC                 MOV             X11, #0
.text:00000000000083D0                 MOV             X8, #0
.text:00000000000083D4 loc_83D4                                ; CODE XREF: sub_828C+1BC↓j
.text:00000000000083D4                 SUB             X14, X14, #1
.text:00000000000083D8                 CMN             X14, #1
.text:00000000000083DC                 B.EQ            loc_844C
.text:00000000000083E0                 LDR             W0, [X6]
.text:00000000000083E4                 CMP             W0, #1
.text:00000000000083E8                 B.NE            loc_8424
.text:00000000000083EC                 LDR             X1, [X6,#0x10]
.text:00000000000083F0                 LDR             X3, [X2]
.text:00000000000083F4                 ADD             X1, X7, X1
.text:00000000000083F8                 CMP             X3, X1
.text:00000000000083FC                 B.CC            loc_8444
.text:0000000000008400                 LDR             X0, [X6,#0x28]
.text:0000000000008404                 ADD             X0, X1, X0
.text:0000000000008408                 CMP             X3, X0
.text:000000000000840C                 CSEL            X9, X9, X0, CS
.text:0000000000008410                 CMP             X3, X0
.text:0000000000008414                 CSEL            X10, X10, X1, CS
.text:0000000000008418                 CMP             X3, X0
.text:000000000000841C                 CSINC           X12, X12, XZR, CS
.text:0000000000008420                 B               loc_8444
.text:0000000000008424 ; ---------------------------------------------------------------------------
.text:0000000000008424 loc_8424                                ; CODE XREF: sub_828C+15C↑j
.text:0000000000008424                 MOV             W1, #0x6474E550
.text:000000000000842C                 CMP             W0, W1
.text:0000000000008430                 B.EQ            loc_8440
.text:0000000000008434                 CMP             W0, #2
.text:0000000000008438                 CSEL            X11, X11, X6, NE
.text:000000000000843C                 B               loc_8444
.text:0000000000008440 ; ---------------------------------------------------------------------------
.text:0000000000008440 loc_8440                                ; CODE XREF: sub_828C+1A4↑j
.text:0000000000008440                 MOV             X8, X6
.text:0000000000008444 loc_8444                                ; CODE XREF: sub_828C+170↑j
.text:0000000000008444                                         ; sub_828C+194↑j ...
.text:0000000000008444                 ADD             X6, X6, #0x38 ; '8'
.text:0000000000008448                 B               loc_83D4
.text:000000000000844C ; ---------------------------------------------------------------------------
.text:000000000000844C loc_844C                                ; CODE XREF: sub_828C+150↑j
.text:000000000000844C                 CBNZ            X12, loc_8458
.text:0000000000008450 loc_8450                                ; CODE XREF: sub_828C:loc_849C↓j
.text:0000000000008450                 MOV             W0, #0
.text:0000000000008454                 B               loc_8694
.text:0000000000008458 ; ---------------------------------------------------------------------------
.text:0000000000008458 loc_8458                                ; CODE XREF: sub_828C:loc_844C↑j
.text:0000000000008458                 CBZ             W13, loc_849C
.text:000000000000845C                 ADRP            X0, #qword_C068@PAGE
.text:0000000000008460                 CBZ             X5, loc_8480
.text:0000000000008464                 CBZ             X4, loc_8480
.text:0000000000008468                 LDR             X1, [X4,#0x28]
.text:000000000000846C                 STR             X1, [X5,#0x28]
.text:0000000000008470                 ADD             X1, X0, #qword_C068@PAGEOFF
.text:0000000000008474                 LDR             X3, [X1,#(qword_C070 - 0xC068)]
.text:0000000000008478                 STR             X3, [X4,#0x28]
.text:000000000000847C                 STR             X4, [X1,#(qword_C070 - 0xC068)]
.text:0000000000008480 loc_8480                                ; CODE XREF: sub_828C+1D4↑j
.text:0000000000008480                                         ; sub_828C+1D8↑j
.text:0000000000008480                 ADD             X0, X0, #qword_C068@PAGEOFF
.text:0000000000008484                 LDR             X0, [X0,#(qword_C070 - 0xC068)]
.text:0000000000008488                 STR             X7, [X0,#0x10]
.text:000000000000848C                 STR             X8, [X0,#0x18]
.text:0000000000008490                 STR             X11, [X0,#0x20]
.text:0000000000008494                 STR             X10, [X0]
.text:0000000000008498                 STR             X9, [X0,#8]
.text:000000000000849C loc_849C                                ; CODE XREF: sub_828C+98↑j
.text:000000000000849C                                         ; sub_828C+B0↑j ...
.text:000000000000849C                 CBZ             X8, loc_8450
.text:00000000000084A0                 LDR             X0, [X8,#0x10]
.text:00000000000084A4                 ADD             X21, X7, X0
.text:00000000000084A8                 LDRB            W0, [X7,X0]
.text:00000000000084AC                 CMP             W0, #1
.text:00000000000084B0                 B.NE            loc_8680
.text:00000000000084B4                 LDRB            W20, [X21,#1]
.text:00000000000084B8                 MOV             X1, X2
.text:00000000000084BC                 MOV             X19, X2
.text:00000000000084C0                 MOV             W0, W20
.text:00000000000084C4                 BL              sub_7E40
.text:00000000000084C8                 MOV             X1, X0
.text:00000000000084CC                 ADD             X2, X21, #4
.text:00000000000084D0                 MOV             W0, W20
.text:00000000000084D4                 ADD             X3, X29, #0x50 ; 'P'
.text:00000000000084D8                 BL              sub_7EA0
.text:00000000000084DC                 LDRB            W20, [X21,#2]
.text:00000000000084E0                 MOV             X2, X0
.text:00000000000084E4                 CMP             W20, #0xFF
.text:00000000000084E8                 B.EQ            loc_8610
.text:00000000000084EC                 LDRB            W0, [X21,#3]
.text:00000000000084F0                 CMP             W0, #0x3B ; ';'
.text:00000000000084F4                 B.NE            loc_8610
.text:00000000000084F8                 MOV             X1, X19
.text:00000000000084FC                 MOV             W0, W20
.text:0000000000008500                 STR             X2, [X29,#0x90+var_48]
.text:0000000000008504                 BL              sub_7E40
.text:0000000000008508                 MOV             X1, X0
.text:000000000000850C                 LDR             X2, [X29,#0x90+var_48]
.text:0000000000008510                 MOV             W0, W20
.text:0000000000008514                 ADD             X3, X29, #0x58 ; 'X'
.text:0000000000008518                 BL              sub_7EA0
.text:000000000000851C                 MOV             X22, X0
.text:0000000000008520                 LDR             X0, [X29,#0x90+var_38]
.text:0000000000008524                 CBZ             X0, loc_8680
.text:0000000000008528                 AND             X1, X22, #3
.text:000000000000852C                 CBNZ            X1, loc_8610
.text:0000000000008530                 LDRSW           X2, [X22]
.text:0000000000008534                 LDR             X1, [X19]
.text:0000000000008538                 ADD             X2, X21, X2
.text:000000000000853C                 CMP             X1, X2
.text:0000000000008540                 B.CC            loc_8680
.text:0000000000008544                 SUB             X0, X0, #1
.text:0000000000008548                 LSL             X2, X0, #3
.text:000000000000854C                 LDRSW           X2, [X22,X2]
.text:0000000000008550                 ADD             X2, X21, X2
.text:0000000000008554                 CMP             X1, X2
.text:0000000000008558                 B.CS            loc_85AC
.text:000000000000855C                 MOV             X3, X0
.text:0000000000008560                 MOV             X4, #0
.text:0000000000008564 loc_8564                                ; CODE XREF: sub_828C+310↓j
.text:0000000000008564                                         ; sub_828C+31C↓j
.text:0000000000008564                 CMP             X4, X3
.text:0000000000008568                 B.CS            loc_8690
.text:000000000000856C                 ADD             X0, X3, X4
.text:0000000000008570                 LSR             X0, X0, #1
.text:0000000000008574                 LSL             X2, X0, #3
.text:0000000000008578                 LDRSW           X5, [X22,X2]
.text:000000000000857C                 ADD             X5, X21, X5
.text:0000000000008580                 CMP             X1, X5
.text:0000000000008584                 B.CC            loc_85A4
.text:0000000000008588                 ADD             X2, X22, X2
.text:000000000000858C                 ADD             X4, X0, #1
.text:0000000000008590                 LDRSW           X2, [X2,#8]
.text:0000000000008594                 ADD             X2, X21, X2
.text:0000000000008598                 CMP             X1, X2
.text:000000000000859C                 B.CS            loc_8564
.text:00000000000085A0                 B               loc_85AC
.text:00000000000085A4 ; ---------------------------------------------------------------------------
.text:00000000000085A4 loc_85A4                                ; CODE XREF: sub_828C+2F8↑j
.text:00000000000085A4                 MOV             X3, X0
.text:00000000000085A8                 B               loc_8564
.text:00000000000085AC ; ---------------------------------------------------------------------------
.text:00000000000085AC loc_85AC                                ; CODE XREF: sub_828C+2CC↑j
.text:00000000000085AC                                         ; sub_828C+314↑j
.text:00000000000085AC                 LSL             X20, X0, #3
.text:00000000000085B0                 ADD             X0, X22, X20
.text:00000000000085B4                 LDRSW           X23, [X0,#4]
.text:00000000000085B8                 ADD             X23, X21, X23
.text:00000000000085BC                 MOV             X0, X23
.text:00000000000085C0                 BL              sub_827C
.text:00000000000085C4                 UXTB            W24, W0
.text:00000000000085C8                 MOV             W0, W24
.text:00000000000085CC                 BL              sub_7D80
.text:00000000000085D0                 ADD             X2, X23, W0,UXTW
.text:00000000000085D4                 MOV             X1, #0
.text:00000000000085D8                 AND             W0, W24, #0xF
.text:00000000000085DC                 ADD             X2, X2, #8
.text:00000000000085E0                 ADD             X3, X29, #0x60 ; '`'
.text:00000000000085E4                 BL              sub_7EA0
.text:00000000000085E8                 LDRSW           X0, [X22,X20]
.text:00000000000085EC                 LDR             X1, [X19]
.text:00000000000085F0                 ADD             X21, X21, X0
.text:00000000000085F4                 LDR             X0, [X29,#0x90+var_30]
.text:00000000000085F8                 ADD             X0, X21, X0
.text:00000000000085FC                 CMP             X1, X0
.text:0000000000008600                 B.CS            loc_8608
.text:0000000000008604                 STR             X23, [X19,#0x20]
.text:0000000000008608 loc_8608                                ; CODE XREF: sub_828C+374↑j
.text:0000000000008608                 STR             X21, [X19,#0x18]
.text:000000000000860C                 B               loc_8680
.text:0000000000008610 ; ---------------------------------------------------------------------------
.text:0000000000008610 loc_8610                                ; CODE XREF: sub_828C+25C↑j
.text:0000000000008610                                         ; sub_828C+268↑j ...
.text:0000000000008610                 LDR             X0, [X19,#8]
.text:0000000000008614                 STR             X0, [X29,#0x90+var_28]
.text:0000000000008618                 LDR             X0, [X19,#0x10]
.text:000000000000861C                 STR             X0, [X29,#0x90+var_20]
.text:0000000000008620                 MOV             W0, #4
.text:0000000000008624                 LDR             X1, [X29,#0x90+var_40]
.text:0000000000008628                 STR             XZR, [X29,#0x90+var_10]
.text:000000000000862C                 LDR             X2, [X19]
.text:0000000000008630                 STRB            W0, [X29,#0x90+var_10]
.text:0000000000008634                 ADD             X0, X29, #0x60 ; '`'
.text:0000000000008638                 STR             XZR, [X29,#0x90+var_30]
.text:000000000000863C                 STR             X1, [X29,#0x90+var_18]
.text:0000000000008640                 BL              sub_811C
.text:0000000000008644                 STR             X0, [X19,#0x20]
.text:0000000000008648                 CBZ             X0, loc_8680
.text:000000000000864C                 BL              sub_827C
.text:0000000000008650                 UXTB            W20, W0
.text:0000000000008654                 MOV             X1, X19
.text:0000000000008658                 MOV             W0, W20
.text:000000000000865C                 BL              sub_7E40
.text:0000000000008660                 MOV             X1, X0
.text:0000000000008664                 LDR             X2, [X19,#0x20]
.text:0000000000008668                 MOV             W0, W20
.text:000000000000866C                 ADD             X3, X29, #0x58 ; 'X'
.text:0000000000008670                 ADD             X2, X2, #8
.text:0000000000008674                 BL              sub_7EA0
.text:0000000000008678                 LDR             X0, [X29,#0x90+var_38]
.text:000000000000867C                 STR             X0, [X19,#0x18]
.text:0000000000008680 loc_8680                                ; CODE XREF: sub_828C+224↑j
.text:0000000000008680                                         ; sub_828C+298↑j ...
.text:0000000000008680                 MOV             W0, #1
.text:0000000000008684                 B               loc_8694
.text:0000000000008688 ; ---------------------------------------------------------------------------
.text:0000000000008688 loc_8688                                ; CODE XREF: sub_828C+11C↑j
.text:0000000000008688                 MOV             W0, #0xFFFFFFFF
.text:000000000000868C                 B               loc_8694
.text:0000000000008690 ; ---------------------------------------------------------------------------
.text:0000000000008690 loc_8690                                ; CODE XREF: sub_828C+2DC↑j
.text:0000000000008690                 BL              .abort
.text:0000000000008694 ; ---------------------------------------------------------------------------
.text:0000000000008694 loc_8694                                ; CODE XREF: sub_828C+1C8↑j
.text:0000000000008694                                         ; sub_828C+3F8↑j ...
.text:0000000000008694                 LDP             X19, X20, [SP,#0x90+var_80]
.text:0000000000008698                 LDP             X21, X22, [SP,#0x90+var_70]
.text:000000000000869C                 LDP             X23, X24, [SP,#0x90+var_60]
.text:00000000000086A0                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:00000000000086A4                 RET
.text:00000000000086A4 ; } // starts at 828C
.text:00000000000086A4 ; End of function sub_828C
.text:00000000000086A8 ; ---------------------------------------------------------------------------
.text:00000000000086A8 loc_86A8                                ; DATA XREF: sub_89D8:loc_8E20↓o
.text:00000000000086A8                                         ; sub_89D8+44C↓o
.text:00000000000086A8 ; __unwind {
.text:00000000000086A8                 STP             X29, X30, [SP,#-0x40]!
.text:00000000000086AC                 MOV             X29, SP
.text:00000000000086B0                 STP             X21, X22, [SP,#0x20]
.text:00000000000086B4                 MOV             X21, X0
.text:00000000000086B8                 MOV             X0, X1
.text:00000000000086BC                 STP             X19, X20, [SP,#0x10]
.text:00000000000086C0                 MOV             X19, X2
.text:00000000000086C4                 MOV             X20, X1
.text:00000000000086C8                 BL              sub_827C
.text:00000000000086CC                 UXTB            W22, W0
.text:00000000000086D0                 MOV             X1, X21
.text:00000000000086D4                 MOV             W0, W22
.text:00000000000086D8                 BL              sub_7DE0
.text:00000000000086DC                 MOV             X1, X0
.text:00000000000086E0                 ADD             X2, X20, #8
.text:00000000000086E4                 ADD             X3, X29, #0x30 ; '0'
.text:00000000000086E8                 MOV             W0, W22
.text:00000000000086EC                 BL              sub_7EA0
.text:00000000000086F0                 MOV             X0, X19
.text:00000000000086F4                 BL              sub_827C
.text:00000000000086F8                 UXTB            W20, W0
.text:00000000000086FC                 MOV             X1, X21
.text:0000000000008700                 MOV             W0, W20
.text:0000000000008704                 BL              sub_7DE0
.text:0000000000008708                 MOV             X1, X0
.text:000000000000870C                 ADD             X2, X19, #8
.text:0000000000008710                 ADD             X3, X29, #0x38 ; '8'
.text:0000000000008714                 MOV             W0, W20
.text:0000000000008718                 BL              sub_7EA0
.text:000000000000871C                 LDR             X2, [X29,#0x30]
.text:0000000000008720                 LDR             X1, [X29,#0x38]
.text:0000000000008724                 LDP             X19, X20, [SP,#0x10]
.text:0000000000008728                 CMP             X2, X1
.text:000000000000872C                 CSETM           W0, CC
.text:0000000000008730                 CMP             X2, X1
.text:0000000000008734                 LDP             X21, X22, [SP,#0x20]
.text:0000000000008738                 CSINC           W0, W0, WZR, LS
.text:000000000000873C                 LDP             X29, X30, [SP],#0x40
.text:0000000000008740                 RET
.text:0000000000008740 ; } // starts at 86A8
.text:0000000000008744 ; =============== S U B R O U T I N E =======================================
.text:0000000000008744 ; Attributes: bp-based frame fpd=0x70
.text:0000000000008744 sub_8744                                ; CODE XREF: sub_89D8+58↓p
.text:0000000000008744                                         ; sub_89D8+94↓p
.text:0000000000008744 var_70          = -0x70
.text:0000000000008744 var_60          = -0x60
.text:0000000000008744 var_50          = -0x50
.text:0000000000008744 var_40          = -0x40
.text:0000000000008744 var_30          = -0x30
.text:0000000000008744 var_20          = -0x20
.text:0000000000008744 var_8           = -8
.text:0000000000008744 ; __unwind {
.text:0000000000008744                 STP             X29, X30, [SP,#var_70]!
.text:0000000000008748                 MOV             X29, SP
.text:000000000000874C                 STP             X19, X20, [SP,#0x70+var_60]
.text:0000000000008750                 STP             X23, X24, [SP,#0x70+var_40]
.text:0000000000008754                 STP             X25, X26, [SP,#0x70+var_30]
.text:0000000000008758                 STP             X21, X22, [SP,#0x70+var_50]
.text:000000000000875C                 MOV             X19, X1
.text:0000000000008760                 STR             X27, [SP,#0x70+var_20]
.text:0000000000008764                 MOV             X20, X0
.text:0000000000008768                 MOV             X26, #0
.text:000000000000876C                 MOV             W25, #0
.text:0000000000008770                 MOV             X22, #0
.text:0000000000008774                 MOV             X1, #0
.text:0000000000008778                 ADD             X23, X29, #0x68 ; 'h'
.text:000000000000877C                 MOV             X24, #1
.text:0000000000008780 loc_8780                                ; CODE XREF: sub_8744+13C↓j
.text:0000000000008780                 LDR             W0, [X19]
.text:0000000000008784                 CBZ             W0, loc_8884
.text:0000000000008788                 LDR             W0, [X19,#4]
.text:000000000000878C                 CBZ             W0, loc_886C
.text:0000000000008790                 ADD             X21, X19, #4
.text:0000000000008794                 SUB             X21, X21, W0,SXTW
.text:0000000000008798                 CMP             X21, X1
.text:000000000000879C                 B.EQ            loc_8808
.text:00000000000087A0                 MOV             X0, X21
.text:00000000000087A4                 BL              sub_8020
.text:00000000000087A8                 CMP             W0, #0xFF
.text:00000000000087AC                 MOV             W25, W0
.text:00000000000087B0                 B.NE            loc_87BC
.text:00000000000087B4                 MOV             X0, #0xFFFFFFFFFFFFFFFF
.text:00000000000087B8                 B               loc_8888
.text:00000000000087BC ; ---------------------------------------------------------------------------
.text:00000000000087BC loc_87BC                                ; CODE XREF: sub_8744+6C↑j
.text:00000000000087BC                 UXTB            W27, W0
.text:00000000000087C0                 MOV             X1, X20
.text:00000000000087C4                 MOV             W0, W27
.text:00000000000087C8                 BL              sub_7DE0
.text:00000000000087CC                 MOV             X26, X0
.text:00000000000087D0                 LDRH            W1, [X20,#0x20]
.text:00000000000087D4                 AND             W0, W1, #0x7F8
.text:00000000000087D8                 CMP             W0, #0x7F8
.text:00000000000087DC                 B.NE            loc_87EC
.text:00000000000087E0                 BFI             W1, W27, #3, #8
.text:00000000000087E4                 STRH            W1, [X20,#0x20]
.text:00000000000087E8                 B               loc_880C
.text:00000000000087EC ; ---------------------------------------------------------------------------
.text:00000000000087EC loc_87EC                                ; CODE XREF: sub_8744+98↑j
.text:00000000000087EC                 UBFX            X1, X1, #3, #8
.text:00000000000087F0                 CMP             W1, W25
.text:00000000000087F4                 B.EQ            loc_880C
.text:00000000000087F8                 LDRB            W0, [X20,#0x20]
.text:00000000000087FC                 ORR             W0, W0, #4
.text:0000000000008800                 STRB            W0, [X20,#0x20]
.text:0000000000008804                 B               loc_880C
.text:0000000000008808 ; ---------------------------------------------------------------------------
.text:0000000000008808 loc_8808                                ; CODE XREF: sub_8744+58↑j
.text:0000000000008808                 MOV             X21, X1
.text:000000000000880C loc_880C                                ; CODE XREF: sub_8744+A4↑j
.text:000000000000880C                                         ; sub_8744+B0↑j ...
.text:000000000000880C                 UXTB            W27, W25
.text:0000000000008810                 MOV             X1, X26
.text:0000000000008814                 ADD             X2, X19, #8
.text:0000000000008818                 MOV             X3, X23
.text:000000000000881C                 MOV             W0, W27
.text:0000000000008820                 BL              sub_7EA0
.text:0000000000008824                 MOV             W0, W27
.text:0000000000008828                 BL              sub_7D80
.text:000000000000882C                 MOV             W0, W0
.text:0000000000008830                 CMP             X0, #7
.text:0000000000008834                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008838                 B.HI            loc_8848
.text:000000000000883C                 LSL             X1, X0, #3
.text:0000000000008840                 LSL             X1, X24, X1
.text:0000000000008844                 SUB             X1, X1, #1
.text:0000000000008848 loc_8848                                ; CODE XREF: sub_8744+F4↑j
.text:0000000000008848                 LDR             X0, [X29,#0x70+var_8]
.text:000000000000884C                 TST             X1, X0
.text:0000000000008850                 B.EQ            loc_8870
.text:0000000000008854                 LDR             X1, [X20]
.text:0000000000008858                 ADD             X22, X22, #1
.text:000000000000885C                 CMP             X0, X1
.text:0000000000008860                 B.CS            loc_8870
.text:0000000000008864                 STR             X0, [X20]
.text:0000000000008868                 B               loc_8870
.text:000000000000886C ; ---------------------------------------------------------------------------
.text:000000000000886C loc_886C                                ; CODE XREF: sub_8744+48↑j
.text:000000000000886C                 MOV             X21, X1
.text:0000000000008870 loc_8870                                ; CODE XREF: sub_8744+10C↑j
.text:0000000000008870                                         ; sub_8744+11C↑j ...
.text:0000000000008870                 LDR             W0, [X19]
.text:0000000000008874                 MOV             X1, X21
.text:0000000000008878                 ADD             X0, X0, #4
.text:000000000000887C                 ADD             X19, X19, X0
.text:0000000000008880                 B               loc_8780
.text:0000000000008884 ; ---------------------------------------------------------------------------
.text:0000000000008884 loc_8884                                ; CODE XREF: sub_8744+40↑j
.text:0000000000008884                 MOV             X0, X22
.text:0000000000008888 loc_8888                                ; CODE XREF: sub_8744+74↑j
.text:0000000000008888                 LDP             X19, X20, [SP,#0x70+var_60]
.text:000000000000888C                 LDP             X21, X22, [SP,#0x70+var_50]
.text:0000000000008890                 LDP             X23, X24, [SP,#0x70+var_40]
.text:0000000000008894                 LDP             X25, X26, [SP,#0x70+var_30]
.text:0000000000008898                 LDR             X27, [SP,#0x70+var_20]
.text:000000000000889C                 LDP             X29, X30, [SP+0x70+var_70],#0x70
.text:00000000000088A0                 RET
.text:00000000000088A0 ; } // starts at 8744
.text:00000000000088A0 ; End of function sub_8744
.text:00000000000088A4 ; =============== S U B R O U T I N E =======================================
.text:00000000000088A4 ; Attributes: bp-based frame fpd=0x70
.text:00000000000088A4 sub_88A4                                ; CODE XREF: sub_89D8+3F8↓p
.text:00000000000088A4                                         ; sub_89D8+40C↓p
.text:00000000000088A4 var_70          = -0x70
.text:00000000000088A4 var_60          = -0x60
.text:00000000000088A4 var_50          = -0x50
.text:00000000000088A4 var_40          = -0x40
.text:00000000000088A4 var_30          = -0x30
.text:00000000000088A4 var_20          = -0x20
.text:00000000000088A4 var_8           = -8
.text:00000000000088A4 ; __unwind {
.text:00000000000088A4                 STP             X29, X30, [SP,#var_70]!
.text:00000000000088A8                 MOV             X29, SP
.text:00000000000088AC                 STP             X21, X22, [SP,#0x70+var_50]
.text:00000000000088B0                 MOV             X22, X0
.text:00000000000088B4                 LDRH            W0, [X0,#0x20]
.text:00000000000088B8                 STP             X23, X24, [SP,#0x70+var_40]
.text:00000000000088BC                 UBFX            X0, X0, #3, #8
.text:00000000000088C0                 MOV             X23, X1
.text:00000000000088C4                 MOV             X1, X22
.text:00000000000088C8                 STR             X27, [SP,#0x70+var_20]
.text:00000000000088CC                 STP             X25, X26, [SP,#0x70+var_30]
.text:00000000000088D0                 STP             X19, X20, [SP,#0x70+var_60]
.text:00000000000088D4                 UXTB            W21, W0
.text:00000000000088D8                 MOV             X19, X2
.text:00000000000088DC                 BL              sub_7DE0
.text:00000000000088E0                 ADD             X24, X29, #0x68 ; 'h'
.text:00000000000088E4                 MOV             X26, X0
.text:00000000000088E8                 MOV             X25, #1
.text:00000000000088EC                 MOV             X0, #0
.text:00000000000088F0 loc_88F0                                ; CODE XREF: sub_88A4+114↓j
.text:00000000000088F0                 LDR             W1, [X19]
.text:00000000000088F4                 CBZ             W1, loc_89BC
.text:00000000000088F8                 LDR             W1, [X19,#4]
.text:00000000000088FC                 MOV             X20, X0
.text:0000000000008900                 CBZ             W1, loc_89A8
.text:0000000000008904                 LDRB            W2, [X22,#0x20]
.text:0000000000008908                 TBZ             W2, #2, loc_8934
.text:000000000000890C                 ADD             X20, X19, #4
.text:0000000000008910                 SUB             X20, X20, W1,SXTW
.text:0000000000008914                 CMP             X20, X0
.text:0000000000008918                 B.EQ            loc_8934
.text:000000000000891C                 MOV             X0, X20
.text:0000000000008920                 BL              sub_8020
.text:0000000000008924                 MOV             W21, W0
.text:0000000000008928                 MOV             X1, X22
.text:000000000000892C                 BL              sub_7DE0
.text:0000000000008930                 MOV             X26, X0
.text:0000000000008934 loc_8934                                ; CODE XREF: sub_88A4+64↑j
.text:0000000000008934                                         ; sub_88A4+74↑j
.text:0000000000008934                 CBNZ            W21, loc_8944
.text:0000000000008938                 LDR             X0, [X19,#8]
.text:000000000000893C                 CBZ             X0, loc_89A8
.text:0000000000008940                 B               loc_898C
.text:0000000000008944 ; ---------------------------------------------------------------------------
.text:0000000000008944 loc_8944                                ; CODE XREF: sub_88A4:loc_8934↑j
.text:0000000000008944                 UXTB            W27, W21
.text:0000000000008948                 MOV             X1, X26
.text:000000000000894C                 ADD             X2, X19, #8
.text:0000000000008950                 MOV             X3, X24
.text:0000000000008954                 MOV             W0, W27
.text:0000000000008958                 BL              sub_7EA0
.text:000000000000895C                 MOV             W0, W27
.text:0000000000008960                 BL              sub_7D80
.text:0000000000008964                 MOV             W0, W0
.text:0000000000008968                 CMP             X0, #7
.text:000000000000896C                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008970                 B.HI            loc_8980
.text:0000000000008974                 LSL             X1, X0, #3
.text:0000000000008978                 LSL             X1, X25, X1
.text:000000000000897C                 SUB             X1, X1, #1
.text:0000000000008980 loc_8980                                ; CODE XREF: sub_88A4+CC↑j
.text:0000000000008980                 LDR             X0, [X29,#0x70+var_8]
.text:0000000000008984                 TST             X1, X0
.text:0000000000008988                 B.EQ            loc_89A8
.text:000000000000898C loc_898C                                ; CODE XREF: sub_88A4+9C↑j
.text:000000000000898C                 LDR             X0, [X23]
.text:0000000000008990                 CBZ             X0, loc_89A8
.text:0000000000008994                 LDR             X1, [X0,#8]
.text:0000000000008998                 ADD             X2, X1, #1
.text:000000000000899C                 ADD             X1, X1, #2
.text:00000000000089A0                 STR             X2, [X0,#8]
.text:00000000000089A4                 STR             X19, [X0,X1,LSL#3]
.text:00000000000089A8 loc_89A8                                ; CODE XREF: sub_88A4+5C↑j
.text:00000000000089A8                                         ; sub_88A4+98↑j ...
.text:00000000000089A8                 LDR             W0, [X19]
.text:00000000000089AC                 ADD             X0, X0, #4
.text:00000000000089B0                 ADD             X19, X19, X0
.text:00000000000089B4                 MOV             X0, X20
.text:00000000000089B8                 B               loc_88F0
.text:00000000000089BC ; ---------------------------------------------------------------------------
.text:00000000000089BC loc_89BC                                ; CODE XREF: sub_88A4+50↑j
.text:00000000000089BC                 LDP             X19, X20, [SP,#0x70+var_60]
.text:00000000000089C0                 LDP             X21, X22, [SP,#0x70+var_50]
.text:00000000000089C4                 LDP             X23, X24, [SP,#0x70+var_40]
.text:00000000000089C8                 LDP             X25, X26, [SP,#0x70+var_30]
.text:00000000000089CC                 LDR             X27, [SP,#0x70+var_20]
.text:00000000000089D0                 LDP             X29, X30, [SP+0x70+var_70],#0x70
.text:00000000000089D4                 RET
.text:00000000000089D4 ; } // starts at 88A4
.text:00000000000089D4 ; End of function sub_88A4
.text:00000000000089D8 ; =============== S U B R O U T I N E =======================================
.text:00000000000089D8 ; Attributes: bp-based frame fpd=0x90
.text:00000000000089D8 sub_89D8                                ; CODE XREF: sub_9224+5C↓p
.text:00000000000089D8                                         ; sub_9224+90↓p
.text:00000000000089D8 var_90          = -0x90
.text:00000000000089D8 var_80          = -0x80
.text:00000000000089D8 var_70          = -0x70
.text:00000000000089D8 var_60          = -0x60
.text:00000000000089D8 var_50          = -0x50
.text:00000000000089D8 var_40          = -0x40
.text:00000000000089D8 var_30          = -0x30
.text:00000000000089D8 var_28          = -0x28
.text:00000000000089D8 var_18          = -0x18
.text:00000000000089D8 var_10          = -0x10
.text:00000000000089D8 ptr             = -8
.text:00000000000089D8 ; __unwind {
.text:00000000000089D8                 STP             X29, X30, [SP,#var_90]!
.text:00000000000089DC                 MOV             X29, SP
.text:00000000000089E0                 STP             X21, X22, [SP,#0x90+var_70]
.text:00000000000089E4                 MOV             X22, X1
.text:00000000000089E8                 LDRB            W1, [X0,#0x20]
.text:00000000000089EC                 STP             X19, X20, [SP,#0x90+var_80]
.text:00000000000089F0                 STP             X23, X24, [SP,#0x90+var_60]
.text:00000000000089F4                 STP             X25, X26, [SP,#0x90+var_50]
.text:00000000000089F8                 STP             X27, X28, [SP,#0x90+var_40]
.text:00000000000089FC                 MOV             X19, X0
.text:0000000000008A00                 TBZ             W1, #0, loc_8A10
.text:0000000000008A04 loc_8A04                                ; CODE XREF: sub_89D8+1D8↓j
.text:0000000000008A04                 LDRB            W0, [X19,#0x20]
.text:0000000000008A08                 TBNZ            W0, #0, loc_8BBC
.text:0000000000008A0C                 B               loc_8D70
.text:0000000000008A10 ; ---------------------------------------------------------------------------
.text:0000000000008A10 loc_8A10                                ; CODE XREF: sub_89D8+28↑j
.text:0000000000008A10                 LDR             W20, [X0,#0x20]
.text:0000000000008A14                 UBFX            X20, X20, #0xB, #0x15
.text:0000000000008A18                 CBNZ            X20, loc_8AA4
.text:0000000000008A1C                 TBZ             W1, #1, loc_8A68
.text:0000000000008A20                 LDR             X21, [X0,#0x18]
.text:0000000000008A24 loc_8A24                                ; CODE XREF: sub_89D8+8C↓j
.text:0000000000008A24                 LDR             X1, [X21]
.text:0000000000008A28                 CBZ             X1, loc_8A7C
.text:0000000000008A2C                 MOV             X0, X19
.text:0000000000008A30                 BL              sub_8744
.text:0000000000008A34                 CMN             X0, #1
.text:0000000000008A38                 B.NE            loc_8A5C
.text:0000000000008A3C loc_8A3C                                ; CODE XREF: sub_89D8+A0↓j
.text:0000000000008A3C                 MOV             W0, #0x7F8
.text:0000000000008A40                 STR             XZR, [X19,#0x20]
.text:0000000000008A44                 STRH            W0, [X19,#0x20]
.text:0000000000008A48                 ADRP            X0, #qword_C068@PAGE
.text:0000000000008A4C                 ADD             X0, X0, #qword_C068@PAGEOFF
.text:0000000000008A50                 ADD             X0, X0, #0x198
.text:0000000000008A54                 STR             X0, [X19,#0x18]
.text:0000000000008A58                 B               loc_8BA8
.text:0000000000008A5C ; ---------------------------------------------------------------------------
.text:0000000000008A5C loc_8A5C                                ; CODE XREF: sub_89D8+60↑j
.text:0000000000008A5C                 ADD             X20, X20, X0
.text:0000000000008A60                 ADD             X21, X21, #8
.text:0000000000008A64                 B               loc_8A24
.text:0000000000008A68 ; ---------------------------------------------------------------------------
.text:0000000000008A68 loc_8A68                                ; CODE XREF: sub_89D8+44↑j
.text:0000000000008A68                 LDR             X1, [X0,#0x18]
.text:0000000000008A6C                 BL              sub_8744
.text:0000000000008A70                 CMN             X0, #1
.text:0000000000008A74                 MOV             X20, X0
.text:0000000000008A78                 B.EQ            loc_8A3C
.text:0000000000008A7C loc_8A7C                                ; CODE XREF: sub_89D8+50↑j
.text:0000000000008A7C                 AND             W0, W20, #0x1FFFFF
.text:0000000000008A80                 CMP             X0, X20
.text:0000000000008A84                 MOV             X1, X0
.text:0000000000008A88                 LDR             W0, [X19,#0x20]
.text:0000000000008A8C                 B.NE            loc_8A98
.text:0000000000008A90                 BFI             W0, W1, #0xB, #0x15
.text:0000000000008A94                 B               loc_8A9C
.text:0000000000008A98 ; ---------------------------------------------------------------------------
.text:0000000000008A98 loc_8A98                                ; CODE XREF: sub_89D8+B4↑j
.text:0000000000008A98                 AND             W0, W0, #0x7FF
.text:0000000000008A9C loc_8A9C                                ; CODE XREF: sub_89D8+BC↑j
.text:0000000000008A9C                 STR             W0, [X19,#0x20]
.text:0000000000008AA0                 CBZ             X20, loc_8BA8
.text:0000000000008AA4 loc_8AA4                                ; CODE XREF: sub_89D8+40↑j
.text:0000000000008AA4                 ADD             X21, X20, #2
.text:0000000000008AA8                 LSL             X21, X21, #3
.text:0000000000008AAC                 MOV             X0, X21 ; size
.text:0000000000008AB0                 BL              .malloc
.text:0000000000008AB4                 STR             X0, [X29,#0x90+var_10]
.text:0000000000008AB8                 CBZ             X0, loc_8BA8
.text:0000000000008ABC                 STR             XZR, [X0,#8]
.text:0000000000008AC0                 MOV             X0, X21 ; size
.text:0000000000008AC4                 BL              .malloc
.text:0000000000008AC8                 STR             X0, [X29,#0x90+ptr]
.text:0000000000008ACC                 CBZ             X0, loc_8DAC
.text:0000000000008AD0                 STR             XZR, [X0,#8]
.text:0000000000008AD4                 B               loc_8DAC
.text:0000000000008AD8 ; ---------------------------------------------------------------------------
.text:0000000000008AD8 loc_8AD8                                ; CODE XREF: sub_89D8+128↓j
.text:0000000000008AD8                 ADD             X4, X25, X2,LSL#3
.text:0000000000008ADC                 LDR             X5, [X26]
.text:0000000000008AE0                 LDR             X4, [X4,#0x10]
.text:0000000000008AE4                 CBZ             X4, loc_8ECC
.text:0000000000008AE8                 ADD             X4, X1, #2
.text:0000000000008AEC                 ADD             X1, X1, #1
.text:0000000000008AF0                 STR             X5, [X24,X4,LSL#3]
.text:0000000000008AF4 loc_8AF4                                ; CODE XREF: sub_89D8+500↓j
.text:0000000000008AF4                 ADD             X2, X2, #1
.text:0000000000008AF8                 ADD             X26, X26, #8
.text:0000000000008AFC loc_8AFC                                ; CODE XREF: sub_89D8+4F0↓j
.text:0000000000008AFC                 CMP             X2, X3
.text:0000000000008B00                 B.NE            loc_8AD8
.text:0000000000008B04                 STR             X1, [X24,#8]
.text:0000000000008B08                 STR             X0, [X25,#8]
.text:0000000000008B0C                 LDR             X2, [X29,#0x90+ptr]
.text:0000000000008B10                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000008B14                 LDR             X1, [X2,#8]
.text:0000000000008B18                 LDR             X0, [X0,#8]
.text:0000000000008B1C                 ADD             X0, X1, X0
.text:0000000000008B20                 CMP             X0, X20
.text:0000000000008B24                 B.NE            loc_8DFC
.text:0000000000008B28                 MOV             X0, X19
.text:0000000000008B2C                 MOV             X1, X23
.text:0000000000008B30                 BL              sub_7CCC
.text:0000000000008B34                 LDR             X27, [X29,#0x90+ptr]
.text:0000000000008B38                 LDR             X21, [X29,#0x90+var_10]
.text:0000000000008B3C                 LDR             X20, [X27,#8]
.text:0000000000008B40                 CBZ             X20, loc_8B84
.text:0000000000008B44                 LDR             X24, [X21,#8]
.text:0000000000008B48                 LSL             X26, X20, #3
.text:0000000000008B4C loc_8B4C                                ; CODE XREF: sub_89D8+198↓j
.text:0000000000008B4C                 ADD             X0, X27, X26
.text:0000000000008B50                 SUB             X20, X20, #1
.text:0000000000008B54                 ADD             X25, X21, X24,LSL#3
.text:0000000000008B58                 LDR             X28, [X0,#8]
.text:0000000000008B5C loc_8B5C                                ; CODE XREF: sub_89D8+53C↓j
.text:0000000000008B5C                 CBNZ            X24, loc_8EDC
.text:0000000000008B60 loc_8B60                                ; CODE XREF: sub_89D8+528↓j
.text:0000000000008B60                 ADD             X0, X20, X24
.text:0000000000008B64                 SUB             X26, X26, #8
.text:0000000000008B68                 ADD             X0, X0, #2
.text:0000000000008B6C                 STR             X28, [X21,X0,LSL#3]
.text:0000000000008B70                 CBNZ            X20, loc_8B4C
.text:0000000000008B74                 LDR             X1, [X21,#8]
.text:0000000000008B78                 LDR             X0, [X27,#8]
.text:0000000000008B7C                 ADD             X0, X1, X0
.text:0000000000008B80                 STR             X0, [X21,#8]
.text:0000000000008B84 loc_8B84                                ; CODE XREF: sub_89D8+168↑j
.text:0000000000008B84                 LDR             X0, [X29,#0x90+ptr] ; ptr
.text:0000000000008B88                 BL              .free
.text:0000000000008B8C loc_8B8C                                ; CODE XREF: sub_89D8+550↓j
.text:0000000000008B8C                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000008B90                 LDR             X1, [X19,#0x18]
.text:0000000000008B94                 STR             X1, [X0]
.text:0000000000008B98                 STR             X0, [X19,#0x18]
.text:0000000000008B9C                 LDRB            W0, [X19,#0x20]
.text:0000000000008BA0                 ORR             W0, W0, #1
.text:0000000000008BA4                 STRB            W0, [X19,#0x20]
.text:0000000000008BA8 loc_8BA8                                ; CODE XREF: sub_89D8+80↑j
.text:0000000000008BA8                                         ; sub_89D8+C8↑j ...
.text:0000000000008BA8                 LDR             X0, [X19]
.text:0000000000008BAC                 CMP             X22, X0
.text:0000000000008BB0                 B.CS            loc_8A04
.text:0000000000008BB4 loc_8BB4                                ; CODE XREF: sub_89D8+200↓j
.text:0000000000008BB4                                         ; sub_89D8+2A8↓j ...
.text:0000000000008BB4                 MOV             X0, #0
.text:0000000000008BB8                 B               loc_8F2C
.text:0000000000008BBC ; ---------------------------------------------------------------------------
.text:0000000000008BBC loc_8BBC                                ; CODE XREF: sub_89D8+30↑j
.text:0000000000008BBC                 TBZ             W0, #2, loc_8C64
.text:0000000000008BC0                 LDR             X27, [X19,#0x18]
.text:0000000000008BC4                 MOV             X24, #0
.text:0000000000008BC8                 ADD             X25, X29, #0x78 ; 'x'
.text:0000000000008BCC                 ADD             X26, X29, #0x80
.text:0000000000008BD0                 LDR             X23, [X27,#8]
.text:0000000000008BD4 loc_8BD4                                ; CODE XREF: sub_89D8+288↓j
.text:0000000000008BD4                 CMP             X24, X23
.text:0000000000008BD8                 B.CS            loc_8BB4
.text:0000000000008BDC                 ADD             X21, X23, X24
.text:0000000000008BE0                 LSR             X21, X21, #1
.text:0000000000008BE4                 ADD             X0, X21, #2
.text:0000000000008BE8                 LDR             X20, [X27,X0,LSL#3]
.text:0000000000008BEC                 MOV             X0, X20
.text:0000000000008BF0                 BL              sub_827C
.text:0000000000008BF4                 UXTB            W2, W0
.text:0000000000008BF8                 MOV             W28, W0
.text:0000000000008BFC                 MOV             X1, X19
.text:0000000000008C00                 MOV             W0, W2
.text:0000000000008C04                 STR             X2, [X29,#0x90+var_28]
.text:0000000000008C08                 BL              sub_7DE0
.text:0000000000008C0C                 MOV             X1, X0
.text:0000000000008C10                 LDR             X2, [X29,#0x90+var_28]
.text:0000000000008C14                 MOV             X3, X25
.text:0000000000008C18                 MOV             W0, W2
.text:0000000000008C1C                 ADD             X2, X20, #8
.text:0000000000008C20                 BL              sub_7EA0
.text:0000000000008C24                 MOV             X2, X0
.text:0000000000008C28                 MOV             X1, #0
.text:0000000000008C2C                 AND             W0, W28, #0xF
.text:0000000000008C30                 MOV             X3, X26
.text:0000000000008C34                 BL              sub_7EA0
.text:0000000000008C38                 LDR             X1, [X29,#0x90+var_18]
.text:0000000000008C3C                 CMP             X22, X1
.text:0000000000008C40                 B.CC            loc_8C5C
.text:0000000000008C44                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000008C48                 ADD             X0, X1, X0
.text:0000000000008C4C                 CMP             X22, X0
.text:0000000000008C50                 B.CC            loc_8CF0
.text:0000000000008C54                 ADD             X24, X21, #1
.text:0000000000008C58                 MOV             X21, X23
.text:0000000000008C5C loc_8C5C                                ; CODE XREF: sub_89D8+268↑j
.text:0000000000008C5C                 MOV             X23, X21
.text:0000000000008C60                 B               loc_8BD4
.text:0000000000008C64 ; ---------------------------------------------------------------------------
.text:0000000000008C64 loc_8C64                                ; CODE XREF: sub_89D8:loc_8BBC↑j
.text:0000000000008C64                 LDRH            W0, [X19,#0x20]
.text:0000000000008C68                 TST             W0, #0x7F8
.text:0000000000008C6C                 B.NE            loc_8CC0
.text:0000000000008C70                 LDR             X5, [X19,#0x18]
.text:0000000000008C74                 MOV             X3, #0
.text:0000000000008C78                 LDR             X2, [X5,#8]
.text:0000000000008C7C loc_8C7C                                ; CODE XREF: sub_89D8+2DC↓j
.text:0000000000008C7C                                         ; sub_89D8+2E4↓j
.text:0000000000008C7C                 CMP             X3, X2
.text:0000000000008C80                 B.CS            loc_8BB4
.text:0000000000008C84                 ADD             X1, X2, X3
.text:0000000000008C88                 LSR             X1, X1, #1
.text:0000000000008C8C                 ADD             X0, X1, #2
.text:0000000000008C90                 LDR             X0, [X5,X0,LSL#3]
.text:0000000000008C94                 LDR             X6, [X0,#8]
.text:0000000000008C98                 LDR             X4, [X0,#0x10]
.text:0000000000008C9C                 CMP             X22, X6
.text:0000000000008CA0                 B.CC            loc_8CB8
.text:0000000000008CA4                 ADD             X3, X6, X4
.text:0000000000008CA8                 CMP             X22, X3
.text:0000000000008CAC                 B.CC            loc_8F2C
.text:0000000000008CB0                 ADD             X3, X1, #1
.text:0000000000008CB4                 B               loc_8C7C
.text:0000000000008CB8 ; ---------------------------------------------------------------------------
.text:0000000000008CB8 loc_8CB8                                ; CODE XREF: sub_89D8+2C8↑j
.text:0000000000008CB8                 MOV             X2, X1
.text:0000000000008CBC                 B               loc_8C7C
.text:0000000000008CC0 ; ---------------------------------------------------------------------------
.text:0000000000008CC0 loc_8CC0                                ; CODE XREF: sub_89D8+294↑j
.text:0000000000008CC0                 UBFX            X0, X0, #3, #8
.text:0000000000008CC4                 LDR             X24, [X19,#0x18]
.text:0000000000008CC8                 MOV             X1, X19
.text:0000000000008CCC                 MOV             X23, #0
.text:0000000000008CD0                 UXTB            W25, W0
.text:0000000000008CD4                 ADD             X27, X29, #0x80
.text:0000000000008CD8                 BL              sub_7DE0
.text:0000000000008CDC                 AND             W26, W25, #0xF
.text:0000000000008CE0                 MOV             X28, X0
.text:0000000000008CE4                 LDR             X21, [X24,#8]
.text:0000000000008CE8                 ADD             X4, X29, #0x78 ; 'x'
.text:0000000000008CEC                 B               loc_8D48
.text:0000000000008CF0 ; ---------------------------------------------------------------------------
.text:0000000000008CF0 loc_8CF0                                ; CODE XREF: sub_89D8+278↑j
.text:0000000000008CF0                                         ; sub_89D8+388↓j
.text:0000000000008CF0                 MOV             X0, X20
.text:0000000000008CF4                 B               loc_8F2C
.text:0000000000008CF8 ; ---------------------------------------------------------------------------
.text:0000000000008CF8 loc_8CF8                                ; CODE XREF: sub_89D8+374↓j
.text:0000000000008CF8                 ADD             X19, X21, X23
.text:0000000000008CFC                 MOV             X3, X4
.text:0000000000008D00                 LSR             X19, X19, #1
.text:0000000000008D04                 MOV             X1, X28
.text:0000000000008D08                 ADD             X0, X19, #2
.text:0000000000008D0C                 STR             X4, [X29,#0x90+var_28]
.text:0000000000008D10                 LDR             X20, [X24,X0,LSL#3]
.text:0000000000008D14                 MOV             W0, W25
.text:0000000000008D18                 ADD             X2, X20, #8
.text:0000000000008D1C                 BL              sub_7EA0
.text:0000000000008D20                 MOV             X2, X0
.text:0000000000008D24                 MOV             X1, #0
.text:0000000000008D28                 MOV             W0, W26
.text:0000000000008D2C                 MOV             X3, X27
.text:0000000000008D30                 BL              sub_7EA0
.text:0000000000008D34                 LDR             X1, [X29,#0x90+var_18]
.text:0000000000008D38                 LDR             X4, [X29,#0x90+var_28]
.text:0000000000008D3C                 CMP             X22, X1
.text:0000000000008D40                 B.CS            loc_8D54
.text:0000000000008D44 loc_8D44                                ; CODE XREF: sub_89D8+394↓j
.text:0000000000008D44                 MOV             X21, X19
.text:0000000000008D48 loc_8D48                                ; CODE XREF: sub_89D8+314↑j
.text:0000000000008D48                 CMP             X23, X21
.text:0000000000008D4C                 B.CC            loc_8CF8
.text:0000000000008D50                 B               loc_8BB4
.text:0000000000008D54 ; ---------------------------------------------------------------------------
.text:0000000000008D54 loc_8D54                                ; CODE XREF: sub_89D8+368↑j
.text:0000000000008D54                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000008D58                 ADD             X0, X1, X0
.text:0000000000008D5C                 CMP             X22, X0
.text:0000000000008D60                 B.CC            loc_8CF0
.text:0000000000008D64                 ADD             X23, X19, #1
.text:0000000000008D68                 MOV             X19, X21
.text:0000000000008D6C                 B               loc_8D44
.text:0000000000008D70 ; ---------------------------------------------------------------------------
.text:0000000000008D70 loc_8D70                                ; CODE XREF: sub_89D8+34↑j
.text:0000000000008D70                 TBZ             W0, #1, loc_8D98
.text:0000000000008D74                 LDR             X20, [X19,#0x18]
.text:0000000000008D78 loc_8D78                                ; CODE XREF: sub_89D8+3BC↓j
.text:0000000000008D78                 LDR             X1, [X20]
.text:0000000000008D7C                 CBZ             X1, loc_8BB4
.text:0000000000008D80                 MOV             X0, X19
.text:0000000000008D84                 MOV             X2, X22
.text:0000000000008D88                 BL              sub_811C
.text:0000000000008D8C                 CBNZ            X0, loc_8F2C
.text:0000000000008D90                 ADD             X20, X20, #8
.text:0000000000008D94                 B               loc_8D78
.text:0000000000008D98 ; ---------------------------------------------------------------------------
.text:0000000000008D98 loc_8D98                                ; CODE XREF: sub_89D8:loc_8D70↑j
.text:0000000000008D98                 LDR             X1, [X19,#0x18]
.text:0000000000008D9C                 MOV             X0, X19
.text:0000000000008DA0                 MOV             X2, X22
.text:0000000000008DA4                 BL              sub_811C
.text:0000000000008DA8                 B               loc_8F2C
.text:0000000000008DAC ; ---------------------------------------------------------------------------
.text:0000000000008DAC loc_8DAC                                ; CODE XREF: sub_89D8+F4↑j
.text:0000000000008DAC                                         ; sub_89D8+FC↑j
.text:0000000000008DAC                 LDRB            W0, [X19,#0x20]
.text:0000000000008DB0                 TBZ             W0, #1, loc_8DD8
.text:0000000000008DB4                 LDR             X21, [X19,#0x18]
.text:0000000000008DB8                 ADD             X23, X29, #0x80
.text:0000000000008DBC loc_8DBC                                ; CODE XREF: sub_89D8+3FC↓j
.text:0000000000008DBC                 LDR             X2, [X21]
.text:0000000000008DC0                 CBZ             X2, loc_8DE8
.text:0000000000008DC4                 MOV             X0, X19
.text:0000000000008DC8                 MOV             X1, X23
.text:0000000000008DCC                 ADD             X21, X21, #8
.text:0000000000008DD0                 BL              sub_88A4
.text:0000000000008DD4                 B               loc_8DBC
.text:0000000000008DD8 ; ---------------------------------------------------------------------------
.text:0000000000008DD8 loc_8DD8                                ; CODE XREF: sub_89D8+3D8↑j
.text:0000000000008DD8                 LDR             X2, [X19,#0x18]
.text:0000000000008DDC                 MOV             X0, X19
.text:0000000000008DE0                 ADD             X1, X29, #0x80
.text:0000000000008DE4                 BL              sub_88A4
.text:0000000000008DE8 loc_8DE8                                ; CODE XREF: sub_89D8+3E8↑j
.text:0000000000008DE8                 LDR             X24, [X29,#0x90+var_10]
.text:0000000000008DEC                 CBZ             X24, loc_8E00
.text:0000000000008DF0                 LDR             X0, [X24,#8]
.text:0000000000008DF4                 CMP             X0, X20
.text:0000000000008DF8                 B.EQ            loc_8E00
.text:0000000000008DFC loc_8DFC                                ; CODE XREF: sub_89D8+14C↑j
.text:0000000000008DFC                 BL              .abort
.text:0000000000008E00 ; ---------------------------------------------------------------------------
.text:0000000000008E00 loc_8E00                                ; CODE XREF: sub_89D8+414↑j
.text:0000000000008E00                                         ; sub_89D8+420↑j
.text:0000000000008E00                 LDRB            W0, [X19,#0x20]
.text:0000000000008E04                 TBNZ            W0, #2, loc_8E20
.text:0000000000008E08                 LDRH            W0, [X19,#0x20]
.text:0000000000008E0C                 TST             W0, #0x7F8
.text:0000000000008E10                 B.EQ            loc_8E2C
.text:0000000000008E14                 ADRP            X23, #sub_7F90@PAGE
.text:0000000000008E18                 ADD             X23, X23, #sub_7F90@PAGEOFF
.text:0000000000008E1C                 B               loc_8E34
.text:0000000000008E20 ; ---------------------------------------------------------------------------
.text:0000000000008E20 loc_8E20                                ; CODE XREF: sub_89D8+42C↑j
.text:0000000000008E20                 ADRP            X23, #loc_86A8@PAGE
.text:0000000000008E24                 ADD             X23, X23, #loc_86A8@PAGEOFF
.text:0000000000008E28                 B               loc_8E34
.text:0000000000008E2C ; ---------------------------------------------------------------------------
.text:0000000000008E2C loc_8E2C                                ; CODE XREF: sub_89D8+438↑j
.text:0000000000008E2C                 ADRP            X23, #sub_7BF0@PAGE
.text:0000000000008E30                 ADD             X23, X23, #sub_7BF0@PAGEOFF
.text:0000000000008E34 loc_8E34                                ; CODE XREF: sub_89D8+444↑j
.text:0000000000008E34                                         ; sub_89D8+450↑j
.text:0000000000008E34                 LDR             X25, [X29,#0x90+ptr]
.text:0000000000008E38                 CBZ             X25, loc_8F18
.text:0000000000008E3C                 ADRP            X21, #qword_C068@PAGE
.text:0000000000008E40                 ADD             X26, X24, #0x10
.text:0000000000008E44                 ADD             X21, X21, #qword_C068@PAGEOFF
.text:0000000000008E48                 LDR             X3, [X24,#8]
.text:0000000000008E4C                 ADD             X21, X21, #0x190
.text:0000000000008E50                 MOV             X28, X26
.text:0000000000008E54                 MOV             X27, #0
.text:0000000000008E58                 MOV             X4, X21
.text:0000000000008E5C loc_8E5C                                ; CODE XREF: sub_89D8+4E0↓j
.text:0000000000008E5C                 CMP             X27, X3
.text:0000000000008E60                 B.EQ            loc_8EBC
.text:0000000000008E64 loc_8E64                                ; CODE XREF: sub_89D8+4C8↓j
.text:0000000000008E64                 CMP             X21, X4
.text:0000000000008E68                 B.EQ            loc_8EA4
.text:0000000000008E6C                 LDR             X1, [X28]
.text:0000000000008E70                 MOV             X0, X19
.text:0000000000008E74                 LDR             X2, [X21]
.text:0000000000008E78                 STR             X4, [X29,#0x90+var_30]
.text:0000000000008E7C                 STR             X3, [X29,#0x90+var_28]
.text:0000000000008E80                 BLR             X23
.text:0000000000008E84                 LDR             X3, [X29,#0x90+var_28]
.text:0000000000008E88                 LDR             X4, [X29,#0x90+var_30]
.text:0000000000008E8C                 TBZ             W0, #0x1F, loc_8EA4
.text:0000000000008E90                 SUB             X0, X21, X26
.text:0000000000008E94                 ADD             X0, X25, X0
.text:0000000000008E98                 LDR             X21, [X0,#0x10]
.text:0000000000008E9C                 STR             XZR, [X0,#0x10]
.text:0000000000008EA0                 B               loc_8E64
.text:0000000000008EA4 ; ---------------------------------------------------------------------------
.text:0000000000008EA4 loc_8EA4                                ; CODE XREF: sub_89D8+490↑j
.text:0000000000008EA4                                         ; sub_89D8+4B4↑j
.text:0000000000008EA4                 ADD             X0, X25, X27,LSL#3
.text:0000000000008EA8                 ADD             X27, X27, #1
.text:0000000000008EAC                 STR             X21, [X0,#0x10]
.text:0000000000008EB0                 MOV             X21, X28
.text:0000000000008EB4                 ADD             X28, X28, #8
.text:0000000000008EB8                 B               loc_8E5C
.text:0000000000008EBC ; ---------------------------------------------------------------------------
.text:0000000000008EBC loc_8EBC                                ; CODE XREF: sub_89D8+488↑j
.text:0000000000008EBC                 MOV             X0, #0
.text:0000000000008EC0                 MOV             X1, #0
.text:0000000000008EC4                 MOV             X2, #0
.text:0000000000008EC8                 B               loc_8AFC
.text:0000000000008ECC ; ---------------------------------------------------------------------------
.text:0000000000008ECC loc_8ECC                                ; CODE XREF: sub_89D8+10C↑j
.text:0000000000008ECC                 ADD             X4, X0, #2
.text:0000000000008ED0                 ADD             X0, X0, #1
.text:0000000000008ED4                 STR             X5, [X25,X4,LSL#3]
.text:0000000000008ED8                 B               loc_8AF4
.text:0000000000008EDC ; ---------------------------------------------------------------------------
.text:0000000000008EDC loc_8EDC                                ; CODE XREF: sub_89D8:loc_8B5C↑j
.text:0000000000008EDC                 LDR             X1, [X25,#8]
.text:0000000000008EE0                 SUB             X3, X24, #1
.text:0000000000008EE4                 MOV             X0, X19
.text:0000000000008EE8                 STR             X3, [X29,#0x90+var_28]
.text:0000000000008EEC                 MOV             X2, X28
.text:0000000000008EF0                 SUB             X25, X25, #8
.text:0000000000008EF4                 BLR             X23
.text:0000000000008EF8                 CMP             W0, WZR
.text:0000000000008EFC                 LDR             X3, [X29,#0x90+var_28]
.text:0000000000008F00                 B.LE            loc_8B60
.text:0000000000008F04                 ADD             X0, X25, X26
.text:0000000000008F08                 LDR             X1, [X25,#0x10]
.text:0000000000008F0C                 MOV             X24, X3
.text:0000000000008F10                 STR             X1, [X0,#0x10]
.text:0000000000008F14                 B               loc_8B5C
.text:0000000000008F18 ; ---------------------------------------------------------------------------
.text:0000000000008F18 loc_8F18                                ; CODE XREF: sub_89D8+460↑j
.text:0000000000008F18                 MOV             X0, X19
.text:0000000000008F1C                 MOV             X1, X23
.text:0000000000008F20                 MOV             X2, X24
.text:0000000000008F24                 BL              sub_7CCC
.text:0000000000008F28                 B               loc_8B8C
.text:0000000000008F2C ; ---------------------------------------------------------------------------
.text:0000000000008F2C loc_8F2C                                ; CODE XREF: sub_89D8+1E0↑j
.text:0000000000008F2C                                         ; sub_89D8+2D4↑j ...
.text:0000000000008F2C                 LDP             X19, X20, [SP,#0x90+var_80]
.text:0000000000008F30                 LDP             X21, X22, [SP,#0x90+var_70]
.text:0000000000008F34                 LDP             X23, X24, [SP,#0x90+var_60]
.text:0000000000008F38                 LDP             X25, X26, [SP,#0x90+var_50]
.text:0000000000008F3C                 LDP             X27, X28, [SP,#0x90+var_40]
.text:0000000000008F40                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:0000000000008F44                 RET
.text:0000000000008F44 ; } // starts at 89D8
.text:0000000000008F44 ; End of function sub_89D8
.text:0000000000008F48 ; ---------------------------------------------------------------------------
.text:0000000000008F48 loc_8F48                                ; CODE XREF: .text:0000000000008FEC↓j
.text:0000000000008F48 ; __unwind {
.text:0000000000008F48                 STP             X29, X30, [SP,#-0x30]!
.text:0000000000008F4C                 MOV             X29, SP
.text:0000000000008F50                 STP             X19, X20, [SP,#0x10]
.text:0000000000008F54                 STR             X21, [SP,#0x20]
.text:0000000000008F58                 CBZ             X0, loc_8FD4
.text:0000000000008F5C                 LDR             W4, [X0]
.text:0000000000008F60                 CBZ             W4, loc_8FD4
.text:0000000000008F64                 MOV             X19, X1
.text:0000000000008F68                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008F6C                 ADRP            X20, #qword_C068@PAGE
.text:0000000000008F70                 STR             X1, [X19]
.text:0000000000008F74                 ADRP            X1, #pthread_create_ptr@PAGE
.text:0000000000008F78                 STR             XZR, [X19,#0x20]
.text:0000000000008F7C                 MOV             X21, X1
.text:0000000000008F80                 STR             X0, [X19,#0x18]
.text:0000000000008F84                 MOV             W0, #0x7F8
.text:0000000000008F88                 STR             X2, [X19,#8]
.text:0000000000008F8C                 STR             X3, [X19,#0x10]
.text:0000000000008F90                 STRH            W0, [X19,#0x20]
.text:0000000000008F94                 LDR             X0, [X1,#pthread_create_ptr@PAGEOFF]
.text:0000000000008F98                 CBZ             X0, loc_8FA8
.text:0000000000008F9C                 ADD             X0, X20, #qword_C068@PAGEOFF
.text:0000000000008FA0                 ADD             X0, X0, #0x1A0
.text:0000000000008FA4                 BL              .pthread_mutex_lock
.text:0000000000008FA8 loc_8FA8                                ; CODE XREF: .text:0000000000008F98↑j
.text:0000000000008FA8                 ADD             X0, X20, #qword_C068@PAGEOFF
.text:0000000000008FAC                 LDR             X1, [X0,#(qword_C230 - 0xC068)]
.text:0000000000008FB0                 STR             X1, [X19,#0x28]
.text:0000000000008FB4                 STR             X19, [X0,#(qword_C230 - 0xC068)]
.text:0000000000008FB8                 LDR             X21, [X21,#(pthread_create_ptr - 0xB000)] ; pthread_create
.text:0000000000008FBC                 CBZ             X21, loc_8FD4
.text:0000000000008FC0                 LDP             X19, X20, [SP,#0x10]
.text:0000000000008FC4                 LDR             X21, [SP,#0x20]
.text:0000000000008FC8                 ADD             X0, X0, #0x1A0
.text:0000000000008FCC                 LDP             X29, X30, [SP],#0x30
.text:0000000000008FD0                 B               .pthread_mutex_unlock
.text:0000000000008FD4 ; ---------------------------------------------------------------------------
.text:0000000000008FD4 loc_8FD4                                ; CODE XREF: .text:0000000000008F58↑j
.text:0000000000008FD4                                         ; .text:0000000000008F60↑j ...
.text:0000000000008FD4                 LDP             X19, X20, [SP,#0x10]
.text:0000000000008FD8                 LDR             X21, [SP,#0x20]
.text:0000000000008FDC                 LDP             X29, X30, [SP],#0x30
.text:0000000000008FE0                 RET
.text:0000000000008FE0 ; } // starts at 8F48
.text:0000000000008FE4 ; ---------------------------------------------------------------------------
.text:0000000000008FE4 loc_8FE4                                ; CODE XREF: .text:0000000000009020↓j
.text:0000000000008FE4 ; __unwind {
.text:0000000000008FE4                 MOV             X2, #0
.text:0000000000008FE8                 MOV             X3, #0
.text:0000000000008FEC                 B               loc_8F48
.text:0000000000008FEC ; } // starts at 8FE4
.text:0000000000008FF0 ; ---------------------------------------------------------------------------
.text:0000000000008FF0 ; __unwind {
.text:0000000000008FF0                 STP             X29, X30, [SP,#-0x20]!
.text:0000000000008FF4                 MOV             X29, SP
.text:0000000000008FF8                 LDR             W1, [X0]
.text:0000000000008FFC                 STR             X19, [SP,#0x10]
.text:0000000000009000                 CBZ             W1, loc_9024
.text:0000000000009004                 MOV             X19, X0
.text:0000000000009008                 MOV             X0, #0x30 ; '0'
.text:000000000000900C                 BL              .malloc
.text:0000000000009010                 MOV             X1, X0
.text:0000000000009014                 MOV             X0, X19
.text:0000000000009018                 LDR             X19, [SP,#0x10]
.text:000000000000901C                 LDP             X29, X30, [SP],#0x20
.text:0000000000009020                 B               loc_8FE4
.text:0000000000009024 ; ---------------------------------------------------------------------------
.text:0000000000009024 loc_9024                                ; CODE XREF: .text:0000000000009000↑j
.text:0000000000009024                 LDR             X19, [SP,#0x10]
.text:0000000000009028                 LDP             X29, X30, [SP],#0x20
.text:000000000000902C                 RET
.text:000000000000902C ; } // starts at 8FF0
.text:0000000000009030 ; ---------------------------------------------------------------------------
.text:0000000000009030 loc_9030                                ; CODE XREF: .text:00000000000090CC↓j
.text:0000000000009030 ; __unwind {
.text:0000000000009030                 STP             X29, X30, [SP,#-0x30]!
.text:0000000000009034                 MOV             X4, #0xFFFFFFFFFFFFFFFF
.text:0000000000009038                 MOV             X29, SP
.text:000000000000903C                 STP             X19, X20, [SP,#0x10]
.text:0000000000009040                 STR             XZR, [X1,#0x20]
.text:0000000000009044                 ADRP            X19, #qword_C068@PAGE
.text:0000000000009048                 STR             X0, [X1,#0x18]
.text:000000000000904C                 MOV             W0, #2
.text:0000000000009050                 STRB            W0, [X1,#0x20]
.text:0000000000009054                 STR             X2, [X1,#8]
.text:0000000000009058                 ADRP            X2, #pthread_create_ptr@PAGE
.text:000000000000905C                 LDRH            W0, [X1,#0x20]
.text:0000000000009060                 MOV             X20, X2
.text:0000000000009064                 STR             X4, [X1]
.text:0000000000009068                 ORR             W0, W0, #0x7F8
.text:000000000000906C                 STR             X3, [X1,#0x10]
.text:0000000000009070                 STRH            W0, [X1,#0x20]
.text:0000000000009074                 LDR             X0, [X2,#pthread_create_ptr@PAGEOFF]
.text:0000000000009078                 CBZ             X0, loc_9090
.text:000000000000907C                 ADD             X0, X19, #qword_C068@PAGEOFF
.text:0000000000009080                 STR             X1, [X29,#0x28]
.text:0000000000009084                 ADD             X0, X0, #0x1A0
.text:0000000000009088                 BL              .pthread_mutex_lock
.text:000000000000908C                 LDR             X1, [X29,#0x28]
.text:0000000000009090 loc_9090                                ; CODE XREF: .text:0000000000009078↑j
.text:0000000000009090                 ADD             X0, X19, #qword_C068@PAGEOFF
.text:0000000000009094                 LDR             X2, [X0,#(qword_C230 - 0xC068)]
.text:0000000000009098                 STR             X2, [X1,#0x28]
.text:000000000000909C                 STR             X1, [X0,#(qword_C230 - 0xC068)]
.text:00000000000090A0                 LDR             X20, [X20,#(pthread_create_ptr - 0xB000)] ; pthread_create
.text:00000000000090A4                 CBZ             X20, loc_90B8
.text:00000000000090A8                 LDP             X19, X20, [SP,#0x10]
.text:00000000000090AC                 LDP             X29, X30, [SP],#0x30
.text:00000000000090B0                 ADD             X0, X0, #0x1A0
.text:00000000000090B4                 B               .pthread_mutex_unlock
.text:00000000000090B8 ; ---------------------------------------------------------------------------
.text:00000000000090B8 loc_90B8                                ; CODE XREF: .text:00000000000090A4↑j
.text:00000000000090B8                 LDP             X19, X20, [SP,#0x10]
.text:00000000000090BC                 LDP             X29, X30, [SP],#0x30
.text:00000000000090C0                 RET
.text:00000000000090C0 ; } // starts at 9030
.text:00000000000090C4 ; ---------------------------------------------------------------------------
.text:00000000000090C4 loc_90C4                                ; CODE XREF: .text:00000000000090F8↓j
.text:00000000000090C4 ; __unwind {
.text:00000000000090C4                 MOV             X2, #0
.text:00000000000090C8                 MOV             X3, #0
.text:00000000000090CC                 B               loc_9030
.text:00000000000090CC ; } // starts at 90C4
.text:00000000000090D0 ; ---------------------------------------------------------------------------
.text:00000000000090D0 ; __unwind {
.text:00000000000090D0                 STP             X29, X30, [SP,#-0x20]!
.text:00000000000090D4                 MOV             X29, SP
.text:00000000000090D8                 STR             X19, [SP,#0x10]
.text:00000000000090DC                 MOV             X19, X0
.text:00000000000090E0                 MOV             X0, #0x30 ; '0'
.text:00000000000090E4                 BL              .malloc
.text:00000000000090E8                 MOV             X1, X0
.text:00000000000090EC                 MOV             X0, X19
.text:00000000000090F0                 LDR             X19, [SP,#0x10]
.text:00000000000090F4                 LDP             X29, X30, [SP],#0x20
.text:00000000000090F8                 B               loc_90C4
.text:00000000000090F8 ; } // starts at 90D0
.text:00000000000090FC ; =============== S U B R O U T I N E =======================================
.text:00000000000090FC ; Attributes: bp-based frame
.text:00000000000090FC sub_90FC                                ; CODE XREF: sub_91FC↓j
.text:00000000000090FC var_s0          =  0
.text:00000000000090FC var_s10         =  0x10
.text:00000000000090FC var_s20         =  0x20
.text:00000000000090FC ; __unwind {
.text:00000000000090FC                 STP             X29, X30, [SP,#-0x30+var_s0]!
.text:0000000000009100                 MOV             X29, SP
.text:0000000000009104                 STP             X19, X20, [SP,#var_s10]
.text:0000000000009108                 STP             X21, X22, [SP,#var_s20]
.text:000000000000910C                 CBZ             X0, loc_91BC
.text:0000000000009110                 LDR             W1, [X0]
.text:0000000000009114                 CBZ             W1, loc_91BC
.text:0000000000009118                 ADRP            X20, #pthread_create_ptr@PAGE
.text:000000000000911C                 MOV             X21, X0
.text:0000000000009120                 ADRP            X22, #qword_C068@PAGE
.text:0000000000009124                 LDR             X0, [X20,#pthread_create_ptr@PAGEOFF]
.text:0000000000009128                 CBZ             X0, loc_9138
.text:000000000000912C                 ADD             X0, X22, #qword_C068@PAGEOFF
.text:0000000000009130                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000009134                 BL              .pthread_mutex_lock
.text:0000000000009138 loc_9138                                ; CODE XREF: sub_90FC+2C↑j
.text:0000000000009138                 ADD             X0, X22, #qword_C068@PAGEOFF
.text:000000000000913C                 ADD             X0, X0, #0x1C8
.text:0000000000009140                 LDR             X19, [X0]
.text:0000000000009144 loc_9144                                ; CODE XREF: sub_90FC+60↓j
.text:0000000000009144                 CBZ             X19, loc_9160
.text:0000000000009148                 LDR             X1, [X19,#0x18]
.text:000000000000914C                 CMP             X1, X21
.text:0000000000009150                 B.EQ            loc_918C
.text:0000000000009154                 ADD             X0, X19, #0x28 ; '('
.text:0000000000009158                 LDR             X19, [X19,#0x28]
.text:000000000000915C                 B               loc_9144
.text:0000000000009160 ; ---------------------------------------------------------------------------
.text:0000000000009160 loc_9160                                ; CODE XREF: sub_90FC:loc_9144↑j
.text:0000000000009160                 ADD             X0, X22, #qword_C068@PAGEOFF
.text:0000000000009164                 ADD             X0, X0, #0x1D0
.text:0000000000009168                 B               loc_9170
.text:000000000000916C ; ---------------------------------------------------------------------------
.text:000000000000916C loc_916C                                ; CODE XREF: sub_90FC+8C↓j
.text:000000000000916C                                         ; sub_90FC+A8↓j
.text:000000000000916C                 ADD             X0, X19, #0x28 ; '('
.text:0000000000009170 loc_9170                                ; CODE XREF: sub_90FC+6C↑j
.text:0000000000009170                 LDR             X19, [X0]
.text:0000000000009174                 CBZ             X19, loc_91C4
.text:0000000000009178                 LDRB            W1, [X19,#0x20]
.text:000000000000917C                 TBNZ            W1, #0, loc_9198
.text:0000000000009180                 LDR             X1, [X19,#0x18]
.text:0000000000009184                 CMP             X1, X21
.text:0000000000009188                 B.NE            loc_916C
.text:000000000000918C loc_918C                                ; CODE XREF: sub_90FC+54↑j
.text:000000000000918C                 LDR             X1, [X19,#0x28]
.text:0000000000009190                 STR             X1, [X0]
.text:0000000000009194                 B               loc_91E0
.text:0000000000009198 ; ---------------------------------------------------------------------------
.text:0000000000009198 loc_9198                                ; CODE XREF: sub_90FC+80↑j
.text:0000000000009198                 LDR             X1, [X19,#0x18]
.text:000000000000919C                 LDR             X1, [X1]
.text:00000000000091A0                 CMP             X1, X21
.text:00000000000091A4                 B.NE            loc_916C
.text:00000000000091A8                 LDR             X1, [X19,#0x28]
.text:00000000000091AC                 STR             X1, [X0]
.text:00000000000091B0                 LDR             X0, [X19,#0x18] ; ptr
.text:00000000000091B4                 BL              .free
.text:00000000000091B8                 B               loc_91E0
.text:00000000000091BC ; ---------------------------------------------------------------------------
.text:00000000000091BC loc_91BC                                ; CODE XREF: sub_90FC+10↑j
.text:00000000000091BC                                         ; sub_90FC+18↑j
.text:00000000000091BC                 MOV             X19, #0
.text:00000000000091C0                 B               loc_91E8
.text:00000000000091C4 ; ---------------------------------------------------------------------------
.text:00000000000091C4 loc_91C4                                ; CODE XREF: sub_90FC+78↑j
.text:00000000000091C4                 LDR             X20, [X20,#pthread_create_ptr@PAGEOFF]
.text:00000000000091C8                 CBZ             X20, loc_91DC
.text:00000000000091CC loc_91CC                                ; CODE XREF: sub_90FC+E8↓j
.text:00000000000091CC                 ADD             X0, X22, #qword_C068@PAGEOFF
.text:00000000000091D0                 ADD             X0, X0, #0x1A0 ; mutex
.text:00000000000091D4                 BL              .pthread_mutex_unlock
.text:00000000000091D8                 CBNZ            X19, loc_91E8
.text:00000000000091DC loc_91DC                                ; CODE XREF: sub_90FC+CC↑j
.text:00000000000091DC                 BL              .abort
.text:00000000000091E0 ; ---------------------------------------------------------------------------
.text:00000000000091E0 loc_91E0                                ; CODE XREF: sub_90FC+98↑j
.text:00000000000091E0                                         ; sub_90FC+BC↑j
.text:00000000000091E0                 LDR             X20, [X20,#pthread_create_ptr@PAGEOFF]
.text:00000000000091E4                 CBNZ            X20, loc_91CC
.text:00000000000091E8 loc_91E8                                ; CODE XREF: sub_90FC+C4↑j
.text:00000000000091E8                                         ; sub_90FC+DC↑j
.text:00000000000091E8                 MOV             X0, X19
.text:00000000000091EC                 LDP             X19, X20, [SP,#var_s10]
.text:00000000000091F0                 LDP             X21, X22, [SP,#var_s20]
.text:00000000000091F4                 LDP             X29, X30, [SP+var_s0],#0x30
.text:00000000000091F8                 RET
.text:00000000000091F8 ; } // starts at 90FC
.text:00000000000091F8 ; End of function sub_90FC
.text:00000000000091FC ; =============== S U B R O U T I N E =======================================
.text:00000000000091FC ; Attributes: thunk
.text:00000000000091FC sub_91FC                                ; CODE XREF: .text:0000000000009210↓p
.text:00000000000091FC ; __unwind {
.text:00000000000091FC                 B               sub_90FC
.text:00000000000091FC ; } // starts at 91FC
.text:00000000000091FC ; End of function sub_91FC
.text:0000000000009200 ; ---------------------------------------------------------------------------
.text:0000000000009200 ; __unwind {
.text:0000000000009200                 STP             X29, X30, [SP,#-0x10]!
.text:0000000000009204                 MOV             X29, SP
.text:0000000000009208                 LDR             W1, [X0]
.text:000000000000920C                 CBZ             W1, loc_921C
.text:0000000000009210                 BL              sub_91FC
.text:0000000000009214                 LDP             X29, X30, [SP],#0x10
.text:0000000000009218                 B               .free
.text:000000000000921C ; ---------------------------------------------------------------------------
.text:000000000000921C loc_921C                                ; CODE XREF: .text:000000000000920C↑j
.text:000000000000921C                 LDP             X29, X30, [SP],#0x10
.text:0000000000009220                 RET
.text:0000000000009220 ; } // starts at 9200
.text:0000000000009224 ; =============== S U B R O U T I N E =======================================
.text:0000000000009224 ; Attributes: bp-based frame fpd=0x80
.text:0000000000009224 sub_9224                                ; CODE XREF: .text:00000000000060EC↑p
.text:0000000000009224                                         ; sub_6684+60↑p
.text:0000000000009224 var_80          = -0x80
.text:0000000000009224 var_70          = -0x70
.text:0000000000009224 var_60          = -0x60
.text:0000000000009224 var_50          = -0x50
.text:0000000000009224 var_40          = -0x40
.text:0000000000009224 var_30          = -0x30
.text:0000000000009224 var_28          = -0x28
.text:0000000000009224 var_20          = -0x20
.text:0000000000009224 var_18          = -0x18
.text:0000000000009224 var_10          = -0x10
.text:0000000000009224 var_8           = -8
.text:0000000000009224 ; __unwind {
.text:0000000000009224                 STP             X29, X30, [SP,#var_80]!
.text:0000000000009228                 MOV             X29, SP
.text:000000000000922C                 STP             X21, X22, [SP,#0x80+var_60]
.text:0000000000009230                 ADRP            X21, #pthread_create_ptr@PAGE
.text:0000000000009234                 STR             X25, [SP,#0x80+var_40]
.text:0000000000009238                 STP             X23, X24, [SP,#0x80+var_50]
.text:000000000000923C                 MOV             X23, X0
.text:0000000000009240                 MOV             X22, X1
.text:0000000000009244                 LDR             X0, [X21,#pthread_create_ptr@PAGEOFF]
.text:0000000000009248                 ADRP            X25, #qword_C068@PAGE
.text:000000000000924C                 STP             X19, X20, [SP,#0x80+var_70]
.text:0000000000009250                 CBZ             X0, loc_9260
.text:0000000000009254                 ADD             X0, X25, #qword_C068@PAGEOFF
.text:0000000000009258                 ADD             X0, X0, #0x1A0 ; mutex
.text:000000000000925C                 BL              .pthread_mutex_lock
.text:0000000000009260 loc_9260                                ; CODE XREF: sub_9224+2C↑j
.text:0000000000009260                 ADD             X0, X25, #qword_C068@PAGEOFF
.text:0000000000009264                 LDR             X19, [X0,#(qword_C238 - 0xC068)]
.text:0000000000009268 loc_9268                                ; CODE XREF: sub_9224+70↓j
.text:0000000000009268                 CBZ             X19, loc_9298
.text:000000000000926C                 LDR             X0, [X19]
.text:0000000000009270                 CMP             X23, X0
.text:0000000000009274                 B.CC            loc_9290
.text:0000000000009278                 MOV             X0, X19
.text:000000000000927C                 MOV             X1, X23
.text:0000000000009280                 BL              sub_89D8
.text:0000000000009284                 MOV             X20, X0
.text:0000000000009288                 CBNZ            X0, loc_93C0
.text:000000000000928C                 B               loc_9298
.text:0000000000009290 ; ---------------------------------------------------------------------------
.text:0000000000009290 loc_9290                                ; CODE XREF: sub_9224+50↑j
.text:0000000000009290                 LDR             X19, [X19,#0x28]
.text:0000000000009294                 B               loc_9268
.text:0000000000009298 ; ---------------------------------------------------------------------------
.text:0000000000009298 loc_9298                                ; CODE XREF: sub_9224:loc_9268↑j
.text:0000000000009298                                         ; sub_9224+68↑j
.text:0000000000009298                 ADD             X24, X25, #qword_C068@PAGEOFF
.text:000000000000929C loc_929C                                ; CODE XREF: sub_9224+C8↓j
.text:000000000000929C                 LDR             X19, [X24,#(qword_C230 - 0xC068)]
.text:00000000000092A0                 CBZ             X19, loc_92F4
.text:00000000000092A4                 LDR             X0, [X19,#0x28]
.text:00000000000092A8                 MOV             X1, X23
.text:00000000000092AC                 STR             X0, [X24,#(qword_C230 - 0xC068)]
.text:00000000000092B0                 MOV             X0, X19
.text:00000000000092B4                 BL              sub_89D8
.text:00000000000092B8                 MOV             X20, X0
.text:00000000000092BC                 LDR             X1, [X24,#(qword_C238 - 0xC068)]
.text:00000000000092C0                 ADD             X2, X24, #0x1D0
.text:00000000000092C4 loc_92C4                                ; CODE XREF: sub_9224+BC↓j
.text:00000000000092C4                 CBZ             X1, loc_92E4
.text:00000000000092C8                 LDR             X3, [X1]
.text:00000000000092CC                 LDR             X0, [X19]
.text:00000000000092D0                 CMP             X3, X0
.text:00000000000092D4                 B.CC            loc_92E4
.text:00000000000092D8                 ADD             X2, X1, #0x28 ; '('
.text:00000000000092DC                 LDR             X1, [X1,#0x28]
.text:00000000000092E0                 B               loc_92C4
.text:00000000000092E4 ; ---------------------------------------------------------------------------
.text:00000000000092E4 loc_92E4                                ; CODE XREF: sub_9224:loc_92C4↑j
.text:00000000000092E4                                         ; sub_9224+B0↑j
.text:00000000000092E4                 STR             X1, [X19,#0x28]
.text:00000000000092E8                 STR             X19, [X2]
.text:00000000000092EC                 CBZ             X20, loc_929C
.text:00000000000092F0                 B               loc_93C0
.text:00000000000092F4 ; ---------------------------------------------------------------------------
.text:00000000000092F4 loc_92F4                                ; CODE XREF: sub_9224+7C↑j
.text:00000000000092F4                 LDR             X21, [X21,#pthread_create_ptr@PAGEOFF]
.text:00000000000092F8                 MOV             X20, #0
.text:00000000000092FC                 CBZ             X21, loc_9364
.text:0000000000009300 loc_9300                                ; CODE XREF: sub_9224+1A0↓j
.text:0000000000009300                 ADD             X0, X25, #qword_C068@PAGEOFF
.text:0000000000009304                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000009308                 BL              .pthread_mutex_unlock
.text:000000000000930C                 CBZ             X20, loc_9364
.text:0000000000009310 loc_9310                                ; CODE XREF: sub_9224+1A4↓j
.text:0000000000009310                 LDR             X0, [X19,#8]
.text:0000000000009314                 STR             X0, [X22]
.text:0000000000009318                 LDRB            W1, [X19,#0x20]
.text:000000000000931C                 LDR             X0, [X19,#0x10]
.text:0000000000009320                 STR             X0, [X22,#8]
.text:0000000000009324                 LDRH            W0, [X19,#0x20]
.text:0000000000009328                 UBFX            X0, X0, #3, #8
.text:000000000000932C                 TBZ             W1, #2, loc_9338
.text:0000000000009330                 MOV             X0, X20
.text:0000000000009334                 BL              sub_827C
.text:0000000000009338 loc_9338                                ; CODE XREF: sub_9224+108↑j
.text:0000000000009338                 UXTB            W21, W0
.text:000000000000933C                 MOV             X1, X19
.text:0000000000009340                 MOV             W0, W21
.text:0000000000009344                 BL              sub_7DE0
.text:0000000000009348                 MOV             X1, X0
.text:000000000000934C                 ADD             X2, X20, #8
.text:0000000000009350                 MOV             W0, W21
.text:0000000000009354                 ADD             X3, X29, #0x50 ; 'P'
.text:0000000000009358                 BL              sub_7EA0
.text:000000000000935C                 LDR             X0, [X29,#0x80+var_30]
.text:0000000000009360                 B               loc_93B8
.text:0000000000009364 ; ---------------------------------------------------------------------------
.text:0000000000009364 loc_9364                                ; CODE XREF: sub_9224+D8↑j
.text:0000000000009364                                         ; sub_9224+E8↑j
.text:0000000000009364                 MOV             W0, #1
.text:0000000000009368                 ADD             X19, X29, #0x50 ; 'P'
.text:000000000000936C                 STR             W0, [X29,#0x80+var_8]
.text:0000000000009370                 ADRP            X0, #sub_828C@PAGE
.text:0000000000009374                 ADD             X0, X0, #sub_828C@PAGEOFF ; callback
.text:0000000000009378                 MOV             X1, X19 ; data
.text:000000000000937C                 STR             X23, [X29,#0x80+var_30]
.text:0000000000009380                 MOV             X20, #0
.text:0000000000009384                 STR             XZR, [X29,#0x80+var_28]
.text:0000000000009388                 STR             XZR, [X29,#0x80+var_20]
.text:000000000000938C                 STR             XZR, [X29,#0x80+var_18]
.text:0000000000009390                 STR             XZR, [X29,#0x80+var_10]
.text:0000000000009394                 BL              .dl_iterate_phdr
.text:0000000000009398                 TBNZ            W0, #0x1F, loc_93CC
.text:000000000000939C                 LDR             X20, [X29,#0x80+var_10]
.text:00000000000093A0                 CBZ             X20, loc_93CC
.text:00000000000093A4                 LDR             X0, [X19,#8]
.text:00000000000093A8                 STR             X0, [X22]
.text:00000000000093AC                 LDR             X0, [X19,#0x10]
.text:00000000000093B0                 STR             X0, [X22,#8]
.text:00000000000093B4                 LDR             X0, [X19,#0x18]
.text:00000000000093B8 loc_93B8                                ; CODE XREF: sub_9224+13C↑j
.text:00000000000093B8                 STR             X0, [X22,#0x10]
.text:00000000000093BC                 B               loc_93CC
.text:00000000000093C0 ; ---------------------------------------------------------------------------
.text:00000000000093C0 loc_93C0                                ; CODE XREF: sub_9224+64↑j
.text:00000000000093C0                                         ; sub_9224+CC↑j
.text:00000000000093C0                 LDR             X21, [X21,#pthread_create_ptr@PAGEOFF]
.text:00000000000093C4                 CBNZ            X21, loc_9300
.text:00000000000093C8                 B               loc_9310
.text:00000000000093CC ; ---------------------------------------------------------------------------
.text:00000000000093CC loc_93CC                                ; CODE XREF: sub_9224+174↑j
.text:00000000000093CC                                         ; sub_9224+17C↑j ...
.text:00000000000093CC                 MOV             X0, X20
.text:00000000000093D0                 LDR             X25, [SP,#0x80+var_40]
.text:00000000000093D4                 LDP             X19, X20, [SP,#0x80+var_70]
.text:00000000000093D8                 LDP             X21, X22, [SP,#0x80+var_60]
.text:00000000000093DC                 LDP             X23, X24, [SP,#0x80+var_50]
.text:00000000000093E0                 LDP             X29, X30, [SP+0x80+var_80],#0x80
.text:00000000000093E4                 RET
.text:00000000000093E4 ; } // starts at 9224
.text:00000000000093E4 ; End of function sub_9224
.text:00000000000093E4 ; .text         ends
.bss:000000000000C230 qword_C230      % 8                     ; DATA XREF: .text:0000000000008FAC↑r
.bss:000000000000C230                                         ; .text:0000000000008FB4↑w ...
extern:000000000000C380                                         ; DATA XREF: .text:0000000000008FB8↑o
extern:000000000000C380                                         ; .text:00000000000090A0↑o ...
