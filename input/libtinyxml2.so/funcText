.text:0000000000008000 ; ===========================================================================
.text:0000000000008000 ; Segment type: Pure code
.text:0000000000008000                 AREA .text, CODE, ALIGN=3
.text:0000000000008000                 ; ORG 0x8000
.text:0000000000008000                 CODE64
.text:0000000000008000 ; =============== S U B R O U T I N E =======================================
.text:0000000000008000                 EXPORT start
.text:0000000000008000 start                                   ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000008000                                         ; LOAD:00000000000000C0↑o ...
.text:0000000000008000 ; __unwind {
.text:0000000000008000                 ADRP            X0, #off_11000@PAGE
.text:0000000000008004                 ADD             X0, X0, #off_11000@PAGEOFF ; void *
.text:0000000000008008                 B               .__cxa_finalize
.text:0000000000008008 ; } // starts at 8000
.text:0000000000008008 ; End of function start
.text:0000000000008008 ; ---------------------------------------------------------------------------
.text:000000000000800C                 ALIGN 0x10
.text:0000000000008010 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0000000000008014                 ALIGN 8
.text:0000000000008018 ; [00000004 BYTES: COLLAPSED FUNCTION j_nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:000000000000801C                 ALIGN 0x20
.text:0000000000008020 ; =============== S U B R O U T I N E =======================================
.text:0000000000008020 ; Attributes: bp-based frame
.text:0000000000008020 ; void __fastcall tinyxml2::StrPair::~StrPair(tinyxml2::StrPair *__hidden this)
.text:0000000000008020                 EXPORT _ZN8tinyxml27StrPairD2Ev
.text:0000000000008020 _ZN8tinyxml27StrPairD2Ev                ; DATA XREF: LOAD:00000000000010F8↑o
.text:0000000000008020                                         ; LOAD:0000000000001500↑o
.text:0000000000008020 var_10          = -0x10
.text:0000000000008020 var_s0          =  0
.text:0000000000008020 ; __unwind {
.text:0000000000008020                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000008024                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000008028                 ADD             X29, SP, #0x10
.text:000000000000802C                 LDRB            W8, [X0,#1]
.text:0000000000008030                 MOV             X19, X0
.text:0000000000008034                 TBZ             W8, #1, loc_8044
.text:0000000000008038                 LDR             X0, [X19,#8] ; void *
.text:000000000000803C                 CBZ             X0, loc_8044
.text:0000000000008040                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000008044 loc_8044                                ; CODE XREF: tinyxml2::StrPair::~StrPair()+14↑j
.text:0000000000008044                                         ; tinyxml2::StrPair::~StrPair()+1C↑j
.text:0000000000008044                 STR             WZR, [X19]
.text:0000000000008048                 STP             XZR, XZR, [X19,#8]
.text:000000000000804C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000008050                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000008054                 RET
.text:0000000000008054 ; } // starts at 8020
.text:0000000000008054 ; End of function tinyxml2::StrPair::~StrPair()
.text:0000000000008058 ; =============== S U B R O U T I N E =======================================
.text:0000000000008058 ; Attributes: bp-based frame
.text:0000000000008058 ; __int64 __fastcall tinyxml2::StrPair::Reset(tinyxml2::StrPair *__hidden this)
.text:0000000000008058                 EXPORT _ZN8tinyxml27StrPair5ResetEv
.text:0000000000008058 _ZN8tinyxml27StrPair5ResetEv            ; DATA XREF: LOAD:0000000000001050↑o
.text:0000000000008058 var_10          = -0x10
.text:0000000000008058 var_s0          =  0
.text:0000000000008058 ; __unwind {
.text:0000000000008058                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000805C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000008060                 ADD             X29, SP, #0x10
.text:0000000000008064                 LDRB            W8, [X0,#1]
.text:0000000000008068                 MOV             X19, X0
.text:000000000000806C                 TBZ             W8, #1, loc_807C
.text:0000000000008070                 LDR             X0, [X19,#8] ; void *
.text:0000000000008074                 CBZ             X0, loc_807C
.text:0000000000008078                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000807C loc_807C                                ; CODE XREF: tinyxml2::StrPair::Reset(void)+14↑j
.text:000000000000807C                                         ; tinyxml2::StrPair::Reset(void)+1C↑j
.text:000000000000807C                 STR             WZR, [X19]
.text:0000000000008080                 STP             XZR, XZR, [X19,#8]
.text:0000000000008084                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000008088                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000808C                 RET
.text:000000000000808C ; } // starts at 8058
.text:000000000000808C ; End of function tinyxml2::StrPair::Reset(void)
.text:0000000000008090 ; =============== S U B R O U T I N E =======================================
.text:0000000000008090 ; __int64 __fastcall tinyxml2::StrPair::TransferTo(tinyxml2::StrPair *__hidden this, tinyxml2::StrPair *)
.text:0000000000008090                 EXPORT _ZN8tinyxml27StrPair10TransferToEPS0_
.text:0000000000008090 _ZN8tinyxml27StrPair10TransferToEPS0_   ; DATA XREF: LOAD:00000000000010E0↑o
.text:0000000000008090 var_20          = -0x20
.text:0000000000008090 var_10          = -0x10
.text:0000000000008090 ; __unwind {
.text:0000000000008090                 CMP             X0, X1
.text:0000000000008094                 B.EQ            locret_80F0
.text:0000000000008098                 STP             X20, X19, [SP,#var_20]!
.text:000000000000809C                 STP             X29, X30, [SP,#0x20+var_10]
.text:00000000000080A0                 ADD             X29, SP, #0x20+var_10
.text:00000000000080A4                 LDRB            W8, [X1,#1]
.text:00000000000080A8                 MOV             X20, X1
.text:00000000000080AC                 MOV             X19, X0
.text:00000000000080B0                 TBZ             W8, #1, loc_80C0
.text:00000000000080B4                 LDR             X0, [X20,#8] ; void *
.text:00000000000080B8                 CBZ             X0, loc_80C0
.text:00000000000080BC                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000080C0 loc_80C0                                ; CODE XREF: tinyxml2::StrPair::TransferTo(tinyxml2::StrPair*)+20↑j
.text:00000000000080C0                                         ; tinyxml2::StrPair::TransferTo(tinyxml2::StrPair*)+28↑j
.text:00000000000080C0                 STR             WZR, [X20]
.text:00000000000080C4                 STP             XZR, XZR, [X20,#8]
.text:00000000000080C8                 LDR             W8, [X19]
.text:00000000000080CC                 STR             W8, [X20]
.text:00000000000080D0                 LDR             X8, [X19,#8]
.text:00000000000080D4                 STR             X8, [X20,#8]
.text:00000000000080D8                 LDR             X8, [X19,#0x10]
.text:00000000000080DC                 STR             X8, [X20,#0x10]
.text:00000000000080E0                 STR             WZR, [X19]
.text:00000000000080E4                 STP             XZR, XZR, [X19,#8]
.text:00000000000080E8                 LDP             X29, X30, [SP,#0x20+var_10]
.text:00000000000080EC                 LDP             X20, X19, [SP+0x20+var_20],#0x20
.text:00000000000080F0 locret_80F0                             ; CODE XREF: tinyxml2::StrPair::TransferTo(tinyxml2::StrPair*)+4↑j
.text:00000000000080F0                 RET
.text:00000000000080F0 ; } // starts at 8090
.text:00000000000080F0 ; End of function tinyxml2::StrPair::TransferTo(tinyxml2::StrPair*)
.text:00000000000080F0 ; ---------------------------------------------------------------------------
.text:00000000000080F4                 ALIGN 8
.text:00000000000080F8 ; =============== S U B R O U T I N E =======================================
.text:00000000000080F8 ; Attributes: bp-based frame
.text:00000000000080F8 ; _QWORD __fastcall tinyxml2::StrPair::SetStr(tinyxml2::StrPair *__hidden this, const char *, int)
.text:00000000000080F8                 EXPORT _ZN8tinyxml27StrPair6SetStrEPKci
.text:00000000000080F8 _ZN8tinyxml27StrPair6SetStrEPKci        ; CODE XREF: tinyxml2::StrPair::SetStr(char const*,int)+C↓j
.text:00000000000080F8                                         ; DATA XREF: LOAD:0000000000000A98↑o ...
.text:00000000000080F8 var_30          = -0x30
.text:00000000000080F8 var_20          = -0x20
.text:00000000000080F8 var_10          = -0x10
.text:00000000000080F8 var_s0          =  0
.text:00000000000080F8 ; __unwind {
.text:00000000000080F8                 STR             X23, [SP,#-0x10+var_30]!
.text:00000000000080FC                 STP             X22, X21, [SP,#0x30+var_20]
.text:0000000000008100                 STP             X20, X19, [SP,#0x30+var_10]
.text:0000000000008104                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000008108                 ADD             X29, SP, #0x30
.text:000000000000810C                 LDRB            W8, [X0,#1]
.text:0000000000008110                 MOV             W19, W2
.text:0000000000008114                 MOV             X20, X0
.text:0000000000008118                 MOV             X21, X1
.text:000000000000811C                 TBZ             W8, #1, loc_812C
.text:0000000000008120                 LDR             X0, [X20,#8] ; void *
.text:0000000000008124                 CBZ             X0, loc_812C
.text:0000000000008128                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000812C loc_812C                                ; CODE XREF: tinyxml2::StrPair::SetStr(char const*,int)+24↑j
.text:000000000000812C                                         ; tinyxml2::StrPair::SetStr(char const*,int)+2C↑j
.text:000000000000812C                 MOV             X0, X21 ; s
.text:0000000000008130                 STR             WZR, [X20]
.text:0000000000008134                 STP             XZR, XZR, [X20,#8]
.text:0000000000008138                 BL              .strlen
.text:000000000000813C                 ADD             X23, X0, #1
.text:0000000000008140                 MOV             X22, X0
.text:0000000000008144                 MOV             X0, X23 ; unsigned __int64
.text:0000000000008148                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000814C                 MOV             X1, X21 ; src
.text:0000000000008150                 STR             X0, [X20,#8]
.text:0000000000008154                 MOV             X2, X23 ; n
.text:0000000000008158                 BL              .memcpy
.text:000000000000815C                 LDR             X8, [X20,#8]
.text:0000000000008160                 ORR             W9, W19, #0x200
.text:0000000000008164                 STR             W9, [X20]
.text:0000000000008168                 ADD             X8, X8, X22
.text:000000000000816C                 STR             X8, [X20,#0x10]
.text:0000000000008170                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000008174                 LDP             X20, X19, [SP,#0x30+var_10]
.text:0000000000008178                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000817C                 LDR             X23, [SP+0x30+var_30],#0x40
.text:0000000000008180                 RET
.text:0000000000008180 ; } // starts at 80F8
.text:0000000000008180 ; End of function tinyxml2::StrPair::SetStr(char const*,int)
.text:0000000000008180 ; ---------------------------------------------------------------------------
.text:0000000000008184                 ALIGN 8
.text:0000000000008188 ; =============== S U B R O U T I N E =======================================
.text:0000000000008188 ; Attributes: bp-based frame
.text:0000000000008188 ; _QWORD __fastcall tinyxml2::StrPair::ParseText(tinyxml2::StrPair *__hidden this, char *, const char *, int, int *)
.text:0000000000008188                 EXPORT _ZN8tinyxml27StrPair9ParseTextEPcPKciPi
.text:0000000000008188 _ZN8tinyxml27StrPair9ParseTextEPcPKciPi ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+C↓j
.text:0000000000008188                                         ; DATA XREF: LOAD:0000000000000C78↑o ...
.text:0000000000008188 var_50          = -0x50
.text:0000000000008188 var_40          = -0x40
.text:0000000000008188 var_30          = -0x30
.text:0000000000008188 var_20          = -0x20
.text:0000000000008188 var_10          = -0x10
.text:0000000000008188 var_s0          =  0
.text:0000000000008188 ; __unwind {
.text:0000000000008188                 STR             X27, [SP,#-0x10+var_50]!
.text:000000000000818C                 STP             X26, X25, [SP,#0x50+var_40]
.text:0000000000008190                 STP             X24, X23, [SP,#0x50+var_30]
.text:0000000000008194                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000008198                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000000819C                 STP             X29, X30, [SP,#0x50+var_s0]
.text:00000000000081A0                 ADD             X29, SP, #0x50
.text:00000000000081A4                 LDRB            W26, [X2]
.text:00000000000081A8                 MOV             X21, X0
.text:00000000000081AC                 MOV             X0, X2  ; s
.text:00000000000081B0                 MOV             X24, X4
.text:00000000000081B4                 MOV             X25, X2
.text:00000000000081B8                 MOV             W20, W3
.text:00000000000081BC                 MOV             X19, X1
.text:00000000000081C0                 BL              .strlen
.text:00000000000081C4                 LDRB            W27, [X19]
.text:00000000000081C8                 CBZ             W27, loc_8210
.text:00000000000081CC                 MOV             X22, X0
.text:00000000000081D0                 MOV             X23, X19
.text:00000000000081D4 loc_81D4                                ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+84↓j
.text:00000000000081D4                 CMP             W26, W27,UXTB
.text:00000000000081D8                 B.NE            loc_81F0
.text:00000000000081DC                 MOV             X0, X23 ; s1
.text:00000000000081E0                 MOV             X1, X25 ; s2
.text:00000000000081E4                 MOV             X2, X22 ; n
.text:00000000000081E8                 BL              .strncmp
.text:00000000000081EC                 CBZ             W0, loc_8218
.text:00000000000081F0 loc_81F0                                ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+50↑j
.text:00000000000081F0                 AND             W8, W27, #0xFF
.text:00000000000081F4                 CMP             W8, #0xA
.text:00000000000081F8                 B.NE            loc_8208
.text:00000000000081FC                 LDR             W8, [X24]
.text:0000000000008200                 ADD             W8, W8, #1
.text:0000000000008204                 STR             W8, [X24]
.text:0000000000008208 loc_8208                                ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+70↑j
.text:0000000000008208                 LDRB            W27, [X23,#1]!
.text:000000000000820C                 CBNZ            W27, loc_81D4
.text:0000000000008210 loc_8210                                ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+40↑j
.text:0000000000008210                 MOV             X0, XZR
.text:0000000000008214                 B               loc_823C
.text:0000000000008218 ; ---------------------------------------------------------------------------
.text:0000000000008218 loc_8218                                ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+64↑j
.text:0000000000008218                 LDRB            W8, [X21,#1]
.text:000000000000821C                 TBZ             W8, #1, loc_822C
.text:0000000000008220                 LDR             X0, [X21,#8] ; void *
.text:0000000000008224                 CBZ             X0, loc_822C
.text:0000000000008228                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000822C loc_822C                                ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+94↑j
.text:000000000000822C                                         ; tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+9C↑j
.text:000000000000822C                 ORR             W8, W20, #0x100
.text:0000000000008230                 STP             X19, X23, [X21,#8]
.text:0000000000008234                 ADD             X0, X23, X22
.text:0000000000008238                 STR             W8, [X21]
.text:000000000000823C loc_823C                                ; CODE XREF: tinyxml2::StrPair::ParseText(char *,char const*,int,int *)+8C↑j
.text:000000000000823C                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000008240                 LDP             X20, X19, [SP,#0x50+var_10]
.text:0000000000008244                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000008248                 LDP             X24, X23, [SP,#0x50+var_30]
.text:000000000000824C                 LDP             X26, X25, [SP,#0x50+var_40]
.text:0000000000008250                 LDR             X27, [SP+0x50+var_50],#0x60
.text:0000000000008254                 RET
.text:0000000000008254 ; } // starts at 8188
.text:0000000000008254 ; End of function tinyxml2::StrPair::ParseText(char *,char const*,int,int *)
.text:0000000000008258 ; =============== S U B R O U T I N E =======================================
.text:0000000000008258 ; Attributes: bp-based frame
.text:0000000000008258 ; __int64 __fastcall tinyxml2::StrPair::ParseName(tinyxml2::StrPair *__hidden this, char *)
.text:0000000000008258                 EXPORT _ZN8tinyxml27StrPair9ParseNameEPc
.text:0000000000008258 _ZN8tinyxml27StrPair9ParseNameEPc       ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+C↓j
.text:0000000000008258                                         ; DATA XREF: LOAD:00000000000012F0↑o ...
.text:0000000000008258 var_30          = -0x30
.text:0000000000008258 var_20          = -0x20
.text:0000000000008258 var_10          = -0x10
.text:0000000000008258 var_s0          =  0
.text:0000000000008258 ; __unwind {
.text:0000000000008258                 STR             X23, [SP,#-0x10+var_30]!
.text:000000000000825C                 STP             X22, X21, [SP,#0x30+var_20]
.text:0000000000008260                 STP             X20, X19, [SP,#0x30+var_10]
.text:0000000000008264                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000008268                 ADD             X29, SP, #0x30
.text:000000000000826C                 CBZ             X1, loc_8318
.text:0000000000008270                 LDRB            W21, [X1]
.text:0000000000008274                 MOV             X19, X1
.text:0000000000008278                 CBZ             W21, loc_8318
.text:000000000000827C                 MOV             X20, X0
.text:0000000000008280                 SXTB            W8, W21
.text:0000000000008284                 TBNZ            W8, #0x1F, loc_8294
.text:0000000000008288                 MOV             W0, W21 ; int
.text:000000000000828C                 BL              .isalpha
.text:0000000000008290                 CBZ             W0, loc_8308
.text:0000000000008294 loc_8294                                ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+2C↑j
.text:0000000000008294                                         ; tinyxml2::StrPair::ParseName(char *)+B4↓j ...
.text:0000000000008294                 MOV             X21, X19
.text:0000000000008298 loc_8298                                ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+4C↓j
.text:0000000000008298                                         ; tinyxml2::StrPair::ParseName(char *)+5C↓j ...
.text:0000000000008298                 LDRB            W23, [X21,#1]!
.text:000000000000829C                 CBZ             W23, loc_82E4
.text:00000000000082A0                 SXTB            W8, W23
.text:00000000000082A4                 TBNZ            W8, #0x1F, loc_8298
.text:00000000000082A8                 AND             W22, W23, #0xFF
.text:00000000000082AC                 MOV             W0, W22 ; int
.text:00000000000082B0                 BL              .isalpha
.text:00000000000082B4                 CBNZ            W0, loc_8298
.text:00000000000082B8                 CMP             W22, #0x3A ; ':'
.text:00000000000082BC                 B.EQ            loc_8298
.text:00000000000082C0                 CMP             W22, #0x5F ; '_'
.text:00000000000082C4                 B.EQ            loc_8298
.text:00000000000082C8                 SUB             W8, W23, #0x2D ; '-'
.text:00000000000082CC                 AND             W8, W8, #0xFF
.text:00000000000082D0                 CMP             W8, #2
.text:00000000000082D4                 B.CC            loc_8298
.text:00000000000082D8                 SUB             W8, W22, #0x30 ; '0'
.text:00000000000082DC                 CMP             W8, #9
.text:00000000000082E0                 B.LS            loc_8298
.text:00000000000082E4 loc_82E4                                ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+44↑j
.text:00000000000082E4                 LDRB            W8, [X20,#1]
.text:00000000000082E8                 TBZ             W8, #1, loc_82F8
.text:00000000000082EC                 LDR             X0, [X20,#8] ; void *
.text:00000000000082F0                 CBZ             X0, loc_82F8
.text:00000000000082F4                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000082F8 loc_82F8                                ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+90↑j
.text:00000000000082F8                                         ; tinyxml2::StrPair::ParseName(char *)+98↑j
.text:00000000000082F8                 MOV             W8, #0x100
.text:00000000000082FC                 STP             X19, X21, [X20,#8]
.text:0000000000008300                 STR             W8, [X20]
.text:0000000000008304                 B               loc_831C
.text:0000000000008308 ; ---------------------------------------------------------------------------
.text:0000000000008308 loc_8308                                ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+38↑j
.text:0000000000008308                 CMP             W21, #0x5F ; '_'
.text:000000000000830C                 B.EQ            loc_8294
.text:0000000000008310                 CMP             W21, #0x3A ; ':'
.text:0000000000008314                 B.EQ            loc_8294
.text:0000000000008318 loc_8318                                ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+14↑j
.text:0000000000008318                                         ; tinyxml2::StrPair::ParseName(char *)+20↑j
.text:0000000000008318                 MOV             X21, XZR
.text:000000000000831C loc_831C                                ; CODE XREF: tinyxml2::StrPair::ParseName(char *)+AC↑j
.text:000000000000831C                 MOV             X0, X21
.text:0000000000008320                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000008324                 LDP             X20, X19, [SP,#0x30+var_10]
.text:0000000000008328                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000832C                 LDR             X23, [SP+0x30+var_30],#0x40
.text:0000000000008330                 RET
.text:0000000000008330 ; } // starts at 8258
.text:0000000000008330 ; End of function tinyxml2::StrPair::ParseName(char *)
.text:0000000000008330 ; ---------------------------------------------------------------------------
.text:0000000000008334                 ALIGN 8
.text:0000000000008338 ; =============== S U B R O U T I N E =======================================
.text:0000000000008338 ; Attributes: bp-based frame
.text:0000000000008338 ; __int64 __fastcall tinyxml2::StrPair::CollapseWhitespace(tinyxml2::StrPair *__hidden this)
.text:0000000000008338                 EXPORT _ZN8tinyxml27StrPair18CollapseWhitespaceEv
.text:0000000000008338 _ZN8tinyxml27StrPair18CollapseWhitespaceEv
.text:0000000000008338                                         ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+C↓j
.text:0000000000008338                                         ; DATA XREF: LOAD:0000000000000948↑o ...
.text:0000000000008338 var_20          = -0x20
.text:0000000000008338 var_10          = -0x10
.text:0000000000008338 var_s0          =  0
.text:0000000000008338 ; __unwind {
.text:0000000000008338                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000833C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000008340                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000008344                 ADD             X29, SP, #0x20
.text:0000000000008348                 LDR             X20, [X0,#8]
.text:000000000000834C                 MOV             X19, X0
.text:0000000000008350                 LDRSB           W8, [X20]
.text:0000000000008354                 TBNZ            W8, #0x1F, loc_836C
.text:0000000000008358 loc_8358                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+30↓j
.text:0000000000008358                 AND             W0, W8, #0xFF ; int
.text:000000000000835C                 BL              .isspace
.text:0000000000008360                 CBZ             W0, loc_836C
.text:0000000000008364                 LDRSB           W8, [X20,#1]!
.text:0000000000008368                 TBZ             W8, #0x1F, loc_8358
.text:000000000000836C loc_836C                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+1C↑j
.text:000000000000836C                                         ; tinyxml2::StrPair::CollapseWhitespace(void)+28↑j
.text:000000000000836C                 STR             X20, [X19,#8]
.text:0000000000008370                 LDRB            W22, [X20]
.text:0000000000008374                 CBZ             W22, loc_83CC
.text:0000000000008378                 MOV             W19, #0x20 ; ' '
.text:000000000000837C                 MOV             X21, X20
.text:0000000000008380 loc_8380                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+8C↓j
.text:0000000000008380                 SXTB            W8, W22
.text:0000000000008384                 TBNZ            W8, #0x1F, loc_83BC
.text:0000000000008388                 AND             W0, W22, #0xFF ; int
.text:000000000000838C                 BL              .isspace
.text:0000000000008390                 CBZ             W0, loc_83BC
.text:0000000000008394 loc_8394                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+6C↓j
.text:0000000000008394                 AND             W0, W22, #0xFF ; int
.text:0000000000008398                 BL              .isspace
.text:000000000000839C                 CBZ             W0, loc_83AC
.text:00000000000083A0                 LDRSB           W22, [X21,#1]!
.text:00000000000083A4                 TBZ             W22, #0x1F, loc_8394
.text:00000000000083A8                 B               loc_83B4
.text:00000000000083AC ; ---------------------------------------------------------------------------
.text:00000000000083AC loc_83AC                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+64↑j
.text:00000000000083AC                 TST             W22, #0xFF
.text:00000000000083B0                 B.EQ            loc_83C8
.text:00000000000083B4 loc_83B4                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+70↑j
.text:00000000000083B4                 STRB            W19, [X20],#1
.text:00000000000083B8                 LDRB            W22, [X21]
.text:00000000000083BC loc_83BC                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+4C↑j
.text:00000000000083BC                                         ; tinyxml2::StrPair::CollapseWhitespace(void)+58↑j
.text:00000000000083BC                 STRB            W22, [X20],#1
.text:00000000000083C0                 LDRB            W22, [X21,#1]!
.text:00000000000083C4                 CBNZ            W22, loc_8380
.text:00000000000083C8 loc_83C8                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+78↑j
.text:00000000000083C8                 STRB            WZR, [X20]
.text:00000000000083CC loc_83CC                                ; CODE XREF: tinyxml2::StrPair::CollapseWhitespace(void)+3C↑j
.text:00000000000083CC                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000083D0                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000083D4                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000083D8                 RET
.text:00000000000083D8 ; } // starts at 8338
.text:00000000000083D8 ; End of function tinyxml2::StrPair::CollapseWhitespace(void)
.text:00000000000083D8 ; ---------------------------------------------------------------------------
.text:00000000000083DC                 ALIGN 0x20
.text:00000000000083E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083E0 ; Attributes: bp-based frame
.text:00000000000083E0 ; __int64 __fastcall tinyxml2::StrPair::GetStr(tinyxml2::StrPair *__hidden this)
.text:00000000000083E0                 EXPORT _ZN8tinyxml27StrPair6GetStrEv
.text:00000000000083E0 _ZN8tinyxml27StrPair6GetStrEv           ; CODE XREF: tinyxml2::StrPair::GetStr(void)+C↓j
.text:00000000000083E0                                         ; DATA XREF: LOAD:0000000000001560↑o ...
.text:00000000000083E0 n               = -0x6C
.text:00000000000083E0 var_60          = -0x60
.text:00000000000083E0 var_58          = -0x58
.text:00000000000083E0 var_50          = -0x50
.text:00000000000083E0 var_40          = -0x40
.text:00000000000083E0 var_30          = -0x30
.text:00000000000083E0 var_20          = -0x20
.text:00000000000083E0 var_10          = -0x10
.text:00000000000083E0 var_s0          =  0
.text:00000000000083E0 ; __unwind {
.text:00000000000083E0                 SUB             SP, SP, #0x80
.text:00000000000083E4                 STP             X28, X27, [SP,#0x70+var_50]
.text:00000000000083E8                 STP             X26, X25, [SP,#0x70+var_40]
.text:00000000000083EC                 STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000083F0                 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000083F4                 STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000083F8                 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000083FC                 ADD             X29, SP, #0x70
.text:0000000000008400                 MRS             X25, #3, c13, c0, #2
.text:0000000000008404                 MOV             X19, X0
.text:0000000000008408                 LDR             X8, [X25,#0x28]
.text:000000000000840C                 STR             X8, [SP,#0x70+var_58]
.text:0000000000008410                 LDRB            W8, [X0,#1]
.text:0000000000008414                 TBZ             W8, #0, loc_8654
.text:0000000000008418                 LDR             X8, [X19,#0x10]
.text:000000000000841C                 STRB            WZR, [X8]
.text:0000000000008420                 LDR             W8, [X19]
.text:0000000000008424                 EOR             W8, W8, #0x100
.text:0000000000008428                 STR             W8, [X19]
.text:000000000000842C                 CBZ             W8, loc_864C
.text:0000000000008430                 LDP             X26, X9, [X19,#8]
.text:0000000000008434                 CMP             X26, X9
.text:0000000000008438                 B.CS            loc_8634
.text:000000000000843C                 ADRP            X20, #aQuot@PAGE ; "quot"
.text:0000000000008440                 ADRP            X21, #unk_4EC7@PAGE
.text:0000000000008444                 ADRP            X22, #aApos@PAGE ; "apos"
.text:0000000000008448                 ADD             X20, X20, #aQuot@PAGEOFF ; "quot"
.text:000000000000844C                 ADD             X21, X21, #unk_4EC7@PAGEOFF
.text:0000000000008450                 ADD             X22, X22, #aApos@PAGEOFF ; "apos"
.text:0000000000008454                 MOV             W24, #0xA
.text:0000000000008458                 MOV             X23, X26
.text:000000000000845C                 TBNZ            W8, #1, loc_8470
.text:0000000000008460                 B               loc_84A4
.text:0000000000008464 ; ---------------------------------------------------------------------------
.text:0000000000008464 loc_8464                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+24C↓j
.text:0000000000008464                 LDR             W8, [X19]
.text:0000000000008468                 MOV             X26, X27
.text:000000000000846C                 TBZ             W8, #1, loc_84A4
.text:0000000000008470 loc_8470                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+7C↑j
.text:0000000000008470                 LDRB            W9, [X26]
.text:0000000000008474                 CMP             W9, #0xA
.text:0000000000008478                 B.EQ            loc_8490
.text:000000000000847C                 CMP             W9, #0xD
.text:0000000000008480                 B.NE            loc_84A4
.text:0000000000008484                 LDRB            W8, [X26,#1]!
.text:0000000000008488                 CMP             W8, #0xA
.text:000000000000848C                 B               loc_8498
.text:0000000000008490 ; ---------------------------------------------------------------------------
.text:0000000000008490 loc_8490                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+98↑j
.text:0000000000008490                 LDRB            W8, [X26,#1]!
.text:0000000000008494                 CMP             W8, #0xD
.text:0000000000008498 loc_8498                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+AC↑j
.text:0000000000008498                 STRB            W24, [X23],#1
.text:000000000000849C                 CINC            X27, X26, EQ
.text:00000000000084A0                 B               loc_8624
.text:00000000000084A4 ; ---------------------------------------------------------------------------
.text:00000000000084A4 loc_84A4                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+80↑j
.text:00000000000084A4                                         ; tinyxml2::StrPair::GetStr(void)+8C↑j ...
.text:00000000000084A4                 LDRB            W9, [X26]
.text:00000000000084A8                 TBZ             W8, #0, loc_8508
.text:00000000000084AC                 CMP             W9, #0x26 ; '&'
.text:00000000000084B0                 B.NE            loc_8508
.text:00000000000084B4                 MOV             X27, X26
.text:00000000000084B8                 LDRB            W8, [X27,#1]!
.text:00000000000084BC                 CMP             W8, #0x23 ; '#'
.text:00000000000084C0                 B.NE            loc_8514
.text:00000000000084C4                 ADD             X1, SP, #0x70+n+4 ; char *
.text:00000000000084C8                 STRH            WZR, [SP,#0x70+var_60]
.text:00000000000084CC                 ADD             X2, SP, #0x70+n ; char *
.text:00000000000084D0                 STR             XZR, [SP,#0x70+n+4]
.text:00000000000084D4                 MOV             X0, X26 ; this
.text:00000000000084D8                 STR             WZR, [SP,#0x70+n]
.text:00000000000084DC                 BL              ._ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi ; tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)
.text:00000000000084E0                 CBZ             X0, loc_860C
.text:00000000000084E4                 LDRSW           X26, [SP,#0x70+n]
.text:00000000000084E8                 MOV             X28, X0
.text:00000000000084EC                 ADD             X1, SP, #0x70+n+4 ; src
.text:00000000000084F0                 MOV             X0, X23 ; dest
.text:00000000000084F4                 MOV             X2, X26 ; n
.text:00000000000084F8                 BL              .memcpy
.text:00000000000084FC                 MOV             X27, X28
.text:0000000000008500                 ADD             X23, X23, X26
.text:0000000000008504                 B               loc_8624
.text:0000000000008508 ; ---------------------------------------------------------------------------
.text:0000000000008508 loc_8508                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+C8↑j
.text:0000000000008508                                         ; tinyxml2::StrPair::GetStr(void)+D0↑j
.text:0000000000008508                 ADD             X27, X26, #1
.text:000000000000850C                 STRB            W9, [X23],#1
.text:0000000000008510                 B               loc_8624
.text:0000000000008514 ; ---------------------------------------------------------------------------
.text:0000000000008514 loc_8514                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+E0↑j
.text:0000000000008514                 MOV             X0, X27 ; s1
.text:0000000000008518                 MOV             X1, X20 ; s2
.text:000000000000851C                 MOV             W2, #4  ; n
.text:0000000000008520                 BL              .strncmp
.text:0000000000008524                 CBNZ            W0, loc_8540
.text:0000000000008528                 LDRB            W8, [X26,#5]
.text:000000000000852C                 CMP             W8, #0x3B ; ';'
.text:0000000000008530                 B.NE            loc_8540
.text:0000000000008534                 MOV             X8, XZR
.text:0000000000008538                 MOV             W9, #6
.text:000000000000853C                 B               loc_85F0
.text:0000000000008540 ; ---------------------------------------------------------------------------
.text:0000000000008540 loc_8540                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+144↑j
.text:0000000000008540                                         ; tinyxml2::StrPair::GetStr(void)+150↑j
.text:0000000000008540                 MOV             X0, X27 ; s1
.text:0000000000008544                 MOV             X1, X21 ; s2
.text:0000000000008548                 MOV             W2, #3  ; n
.text:000000000000854C                 BL              .strncmp
.text:0000000000008550                 CBNZ            W0, loc_856C
.text:0000000000008554                 LDRB            W8, [X26,#4]
.text:0000000000008558                 CMP             W8, #0x3B ; ';'
.text:000000000000855C                 B.NE            loc_856C
.text:0000000000008560                 MOV             W8, #1
.text:0000000000008564                 MOV             W9, #5
.text:0000000000008568                 B               loc_85F0
.text:000000000000856C ; ---------------------------------------------------------------------------
.text:000000000000856C loc_856C                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+170↑j
.text:000000000000856C                                         ; tinyxml2::StrPair::GetStr(void)+17C↑j
.text:000000000000856C                 MOV             X0, X27 ; s1
.text:0000000000008570                 MOV             X1, X22 ; s2
.text:0000000000008574                 MOV             W2, #4  ; n
.text:0000000000008578                 BL              .strncmp
.text:000000000000857C                 CBNZ            W0, loc_8598
.text:0000000000008580                 LDRB            W8, [X26,#5]
.text:0000000000008584                 CMP             W8, #0x3B ; ';'
.text:0000000000008588                 B.NE            loc_8598
.text:000000000000858C                 MOV             W8, #2
.text:0000000000008590                 MOV             W9, #6
.text:0000000000008594                 B               loc_85F0
.text:0000000000008598 ; ---------------------------------------------------------------------------
.text:0000000000008598 loc_8598                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+19C↑j
.text:0000000000008598                                         ; tinyxml2::StrPair::GetStr(void)+1A8↑j
.text:0000000000008598                 ADRP            X1, #aLt@PAGE ; "lt"
.text:000000000000859C                 MOV             X0, X27 ; s1
.text:00000000000085A0                 ADD             X1, X1, #aLt@PAGEOFF ; s2
.text:00000000000085A4                 MOV             W2, #2  ; n
.text:00000000000085A8                 BL              .strncmp
.text:00000000000085AC                 CBNZ            W0, loc_85C4
.text:00000000000085B0                 LDRB            W8, [X26,#3]
.text:00000000000085B4                 CMP             W8, #0x3B ; ';'
.text:00000000000085B8                 B.NE            loc_85C4
.text:00000000000085BC                 MOV             W8, #3
.text:00000000000085C0                 B               loc_85EC
.text:00000000000085C4 ; ---------------------------------------------------------------------------
.text:00000000000085C4 loc_85C4                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+1CC↑j
.text:00000000000085C4                                         ; tinyxml2::StrPair::GetStr(void)+1D8↑j
.text:00000000000085C4                 ADRP            X1, #aGt@PAGE ; "gt"
.text:00000000000085C8                 MOV             X0, X27 ; s1
.text:00000000000085CC                 ADD             X1, X1, #aGt@PAGEOFF ; "gt"
.text:00000000000085D0                 MOV             W2, #2  ; n
.text:00000000000085D4                 BL              .strncmp
.text:00000000000085D8                 CBNZ            W0, loc_8620
.text:00000000000085DC                 LDRB            W8, [X26,#3]
.text:00000000000085E0                 CMP             W8, #0x3B ; ';'
.text:00000000000085E4                 B.NE            loc_8620
.text:00000000000085E8                 MOV             W8, #4
.text:00000000000085EC loc_85EC                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+1E0↑j
.text:00000000000085EC                 MOV             W9, #4
.text:00000000000085F0 loc_85F0                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+15C↑j
.text:00000000000085F0                                         ; tinyxml2::StrPair::GetStr(void)+188↑j ...
.text:00000000000085F0                 ADRP            X10, #off_12010@PAGE ; "quot"
.text:00000000000085F4                 ADD             X10, X10, #off_12010@PAGEOFF ; "quot"
.text:00000000000085F8                 ADD             X8, X10, X8,LSL#4
.text:00000000000085FC                 ADD             X27, X26, X9
.text:0000000000008600                 LDRB            W8, [X8,#0xC]
.text:0000000000008604                 STRB            W8, [X23],#1
.text:0000000000008608                 B               loc_8624
.text:000000000000860C ; ---------------------------------------------------------------------------
.text:000000000000860C loc_860C                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+100↑j
.text:000000000000860C                 LDRB            W8, [X26]
.text:0000000000008610                 MOV             W26, #1
.text:0000000000008614                 STRB            W8, [X23]
.text:0000000000008618                 ADD             X23, X23, X26
.text:000000000000861C                 B               loc_8624
.text:0000000000008620 ; ---------------------------------------------------------------------------
.text:0000000000008620 loc_8620                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+1F8↑j
.text:0000000000008620                                         ; tinyxml2::StrPair::GetStr(void)+204↑j
.text:0000000000008620                 ADD             X23, X23, #1
.text:0000000000008624 loc_8624                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+C0↑j
.text:0000000000008624                                         ; tinyxml2::StrPair::GetStr(void)+124↑j ...
.text:0000000000008624                 LDR             X8, [X19,#0x10]
.text:0000000000008628                 CMP             X27, X8
.text:000000000000862C                 B.CC            loc_8464
.text:0000000000008630                 MOV             X26, X23
.text:0000000000008634 loc_8634                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+58↑j
.text:0000000000008634                 STRB            WZR, [X26]
.text:0000000000008638                 LDR             W8, [X19]
.text:000000000000863C                 TBZ             W8, #2, loc_864C
.text:0000000000008640                 MOV             X0, X19 ; this
.text:0000000000008644                 BL              ._ZN8tinyxml27StrPair18CollapseWhitespaceEv ; tinyxml2::StrPair::CollapseWhitespace(void)
.text:0000000000008648                 LDR             W8, [X19]
.text:000000000000864C loc_864C                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+4C↑j
.text:000000000000864C                                         ; tinyxml2::StrPair::GetStr(void)+25C↑j
.text:000000000000864C                 AND             W8, W8, #0x200
.text:0000000000008650                 STR             W8, [X19]
.text:0000000000008654 loc_8654                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+34↑j
.text:0000000000008654                 LDR             X0, [X19,#8]
.text:0000000000008658                 LDR             X8, [X25,#0x28]
.text:000000000000865C                 LDR             X9, [SP,#0x70+var_58]
.text:0000000000008660                 CMP             X8, X9
.text:0000000000008664                 B.NE            loc_8688
.text:0000000000008668                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:000000000000866C                 LDP             X20, X19, [SP,#0x70+var_10]
.text:0000000000008670                 LDP             X22, X21, [SP,#0x70+var_20]
.text:0000000000008674                 LDP             X24, X23, [SP,#0x70+var_30]
.text:0000000000008678                 LDP             X26, X25, [SP,#0x70+var_40]
.text:000000000000867C                 LDP             X28, X27, [SP,#0x70+var_50]
.text:0000000000008680                 ADD             SP, SP, #0x80
.text:0000000000008684                 RET
.text:0000000000008688 ; ---------------------------------------------------------------------------
.text:0000000000008688 loc_8688                                ; CODE XREF: tinyxml2::StrPair::GetStr(void)+284↑j
.text:0000000000008688                 BL              .__stack_chk_fail
.text:0000000000008688 ; } // starts at 83E0
.text:0000000000008688 ; End of function tinyxml2::StrPair::GetStr(void)
.text:0000000000008688 ; ---------------------------------------------------------------------------
.text:000000000000868C                 ALIGN 0x10
.text:0000000000008690 ; =============== S U B R O U T I N E =======================================
.text:0000000000008690 ; Attributes: bp-based frame
.text:0000000000008690 ; __int64 __fastcall tinyxml2::XMLUtil::GetCharacterRef(tinyxml2::XMLUtil *__hidden this, const char *, char *, int *)
.text:0000000000008690                 EXPORT _ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi
.text:0000000000008690 _ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi
.text:0000000000008690                                         ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+C↓j
.text:0000000000008690                                         ; DATA XREF: LOAD:0000000000000B10↑o ...
.text:0000000000008690 var_60          = -0x60
.text:0000000000008690 var_50          = -0x50
.text:0000000000008690 var_30          = -0x30
.text:0000000000008690 var_28          = -0x28
.text:0000000000008690 var_20          = -0x20
.text:0000000000008690 var_10          = -0x10
.text:0000000000008690 var_s0          =  0
.text:0000000000008690 ; __unwind {
.text:0000000000008690                 SUB             SP, SP, #0x70
.text:0000000000008694                 STP             X22, X21, [SP,#0x60+var_20]
.text:0000000000008698                 STP             X20, X19, [SP,#0x60+var_10]
.text:000000000000869C                 STP             X29, X30, [SP,#0x60+var_s0]
.text:00000000000086A0                 ADD             X29, SP, #0x60
.text:00000000000086A4                 MRS             X22, #3, c13, c0, #2
.text:00000000000086A8                 MOV             X19, X0
.text:00000000000086AC                 LDR             X8, [X22,#0x28]
.text:00000000000086B0                 STUR            X8, [X29,#var_28]
.text:00000000000086B4                 STR             WZR, [X2]
.text:00000000000086B8                 LDRB            W8, [X0,#1]!
.text:00000000000086BC                 CMP             W8, #0x23 ; '#'
.text:00000000000086C0                 B.NE            loc_88A0
.text:00000000000086C4                 MOV             X8, X19
.text:00000000000086C8                 LDRB            W9, [X8,#2]!
.text:00000000000086CC                 CBZ             W9, loc_88A0
.text:00000000000086D0                 MOV             X21, X2
.text:00000000000086D4                 MOV             X20, X1
.text:00000000000086D8                 CMP             W9, #0x78 ; 'x'
.text:00000000000086DC                 B.NE            loc_8778
.text:00000000000086E0                 MOV             X0, X19
.text:00000000000086E4                 LDRB            W8, [X0,#3]! ; s
.text:00000000000086E8                 CBZ             W8, loc_8814
.text:00000000000086EC                 MOV             W1, #0x3B ; ';' ; c
.text:00000000000086F0                 BL              .strchr
.text:00000000000086F4                 CBZ             X0, loc_88A0
.text:00000000000086F8                 LDURB           W15, [X0,#-1]
.text:00000000000086FC                 SUB             X8, X0, X19
.text:0000000000008700                 CMP             W15, #0x78 ; 'x'
.text:0000000000008704                 B.EQ            loc_8798
.text:0000000000008708                 MOV             X9, XZR
.text:000000000000870C                 SUB             X10, X0, #2
.text:0000000000008710                 MOV             W11, #1
.text:0000000000008714                 MOV             W12, #0xFFFFFFD0
.text:0000000000008718                 MOV             W13, #0xFFFFFFA9
.text:000000000000871C                 MOV             W14, #0xFFFFFFC9
.text:0000000000008720 loc_8720                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+E0↓j
.text:0000000000008720                 AND             W16, W15, #0xFF
.text:0000000000008724                 SUB             W15, W15, #0x30 ; '0'
.text:0000000000008728                 AND             W17, W15, #0xFF
.text:000000000000872C                 MOV             W15, W12
.text:0000000000008730                 CMP             W17, #0xA
.text:0000000000008734                 B.CC            loc_8758
.text:0000000000008738                 MOV             W15, W13
.text:000000000000873C                 SUB             W17, W16, #0x61 ; 'a'
.text:0000000000008740                 CMP             W17, #6
.text:0000000000008744                 B.CC            loc_8758
.text:0000000000008748                 MOV             W15, W14
.text:000000000000874C                 SUB             W17, W16, #0x41 ; 'A'
.text:0000000000008750                 CMP             W17, #5
.text:0000000000008754                 B.HI            loc_8814
.text:0000000000008758 loc_8758                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+A4↑j
.text:0000000000008758                                         ; tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+B4↑j
.text:0000000000008758                 ADD             W15, W15, W16
.text:000000000000875C                 MUL             W15, W15, W11
.text:0000000000008760                 LSL             W11, W11, #4
.text:0000000000008764                 ADD             X9, X9, X15
.text:0000000000008768                 LDRB            W15, [X10],#-1
.text:000000000000876C                 CMP             W15, #0x78 ; 'x'
.text:0000000000008770                 B.NE            loc_8720
.text:0000000000008774                 B               loc_87E0
.text:0000000000008778 ; ---------------------------------------------------------------------------
.text:0000000000008778 loc_8778                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+4C↑j
.text:0000000000008778                 MOV             W1, #0x3B ; ';' ; c
.text:000000000000877C                 MOV             X0, X8  ; s
.text:0000000000008780                 BL              .strchr
.text:0000000000008784                 CBZ             X0, loc_88A0
.text:0000000000008788                 LDURB           W12, [X0,#-1]
.text:000000000000878C                 SUB             X8, X0, X19
.text:0000000000008790                 CMP             W12, #0x23 ; '#'
.text:0000000000008794                 B.NE            loc_87A0
.text:0000000000008798 loc_8798                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+74↑j
.text:0000000000008798                 MOV             X9, XZR
.text:000000000000879C                 B               loc_87E0
.text:00000000000087A0 ; ---------------------------------------------------------------------------
.text:00000000000087A0 loc_87A0                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+104↑j
.text:00000000000087A0                 MOV             X9, XZR
.text:00000000000087A4                 SUB             X10, X0, #2
.text:00000000000087A8                 MOV             W11, #1
.text:00000000000087AC loc_87AC                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+14C↓j
.text:00000000000087AC                 SUB             W13, W12, #0x30 ; '0'
.text:00000000000087B0                 AND             W13, W13, #0xFF
.text:00000000000087B4                 CMP             W13, #9
.text:00000000000087B8                 B.HI            loc_8814
.text:00000000000087BC                 AND             W12, W12, #0xFF
.text:00000000000087C0                 SUB             W12, W12, #0x30 ; '0'
.text:00000000000087C4                 ADD             W13, W11, W11,LSL#2
.text:00000000000087C8                 MUL             W12, W12, W11
.text:00000000000087CC                 LSL             W11, W13, #1
.text:00000000000087D0                 ADD             X9, X9, X12
.text:00000000000087D4                 LDRB            W12, [X10],#-1
.text:00000000000087D8                 CMP             W12, #0x23 ; '#'
.text:00000000000087DC                 B.NE            loc_87AC
.text:00000000000087E0 loc_87E0                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+E4↑j
.text:00000000000087E0                                         ; tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+10C↑j
.text:00000000000087E0                 ADRP            X10, #xmmword_4E70@PAGE
.text:00000000000087E4                 STP             XZR, XZR, [SP,#0x60+var_60]
.text:00000000000087E8                 ADRP            X11, #xmmword_4E60@PAGE
.text:00000000000087EC                 CMP             X9, #0x80
.text:00000000000087F0                 LDR             Q0, [X10,#xmmword_4E70@PAGEOFF]
.text:00000000000087F4                 MOV             W10, #0xFC
.text:00000000000087F8                 LDR             Q1, [X11,#xmmword_4E60@PAGEOFF]
.text:00000000000087FC                 STR             X10, [SP,#0x60+var_30]
.text:0000000000008800                 STP             Q1, Q0, [SP,#0x60+var_50]
.text:0000000000008804                 B.CS            loc_881C
.text:0000000000008808                 MOV             W10, #1
.text:000000000000880C                 STR             W10, [X21]
.text:0000000000008810                 B               loc_8888
.text:0000000000008814 ; ---------------------------------------------------------------------------
.text:0000000000008814 loc_8814                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+58↑j
.text:0000000000008814                                         ; tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+C4↑j ...
.text:0000000000008814                 MOV             X0, XZR
.text:0000000000008818                 B               loc_88A0
.text:000000000000881C ; ---------------------------------------------------------------------------
.text:000000000000881C loc_881C                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+174↑j
.text:000000000000881C                 CMP             X9, #0x7FF
.text:0000000000008820                 B.HI            loc_8830
.text:0000000000008824                 MOV             W10, #2
.text:0000000000008828                 STR             W10, [X21]
.text:000000000000882C                 B               loc_8874
.text:0000000000008830 ; ---------------------------------------------------------------------------
.text:0000000000008830 loc_8830                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+190↑j
.text:0000000000008830                 LSR             X10, X9, #0x10
.text:0000000000008834                 CBNZ            X10, loc_8844
.text:0000000000008838                 MOV             W10, #3
.text:000000000000883C                 STR             W10, [X21]
.text:0000000000008840                 B               loc_8864
.text:0000000000008844 ; ---------------------------------------------------------------------------
.text:0000000000008844 loc_8844                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+1A4↑j
.text:0000000000008844                 CMP             X9, #0x200,LSL#12
.text:0000000000008848                 B.CS            loc_88C4
.text:000000000000884C                 MOV             W10, #4
.text:0000000000008850                 MOV             W11, #0x80
.text:0000000000008854                 BFXIL           W11, W9, #0, #6
.text:0000000000008858                 LSR             X9, X9, #6
.text:000000000000885C                 STR             W10, [X21]
.text:0000000000008860                 STRB            W11, [X20,#3]
.text:0000000000008864 loc_8864                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+1B0↑j
.text:0000000000008864                 MOV             W10, #0x80
.text:0000000000008868                 BFXIL           W10, W9, #0, #6
.text:000000000000886C                 LSR             X9, X9, #6
.text:0000000000008870                 STRB            W10, [X20,#2]
.text:0000000000008874 loc_8874                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+19C↑j
.text:0000000000008874                 MOV             W10, #0x80
.text:0000000000008878                 BFXIL           W10, W9, #0, #6
.text:000000000000887C                 LSR             X9, X9, #6
.text:0000000000008880                 STRB            W10, [X20,#1]
.text:0000000000008884                 LDRSW           X10, [X21]
.text:0000000000008888 loc_8888                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+180↑j
.text:0000000000008888                 MOV             X11, SP
.text:000000000000888C                 LDR             X10, [X11,X10,LSL#3]
.text:0000000000008890                 ORR             W9, W10, W9
.text:0000000000008894                 STRB            W9, [X20]
.text:0000000000008898 loc_8898                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+238↓j
.text:0000000000008898                 ADD             X8, X19, X8
.text:000000000000889C                 ADD             X0, X8, #1
.text:00000000000088A0 loc_88A0                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+30↑j
.text:00000000000088A0                                         ; tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+3C↑j ...
.text:00000000000088A0                 LDR             X8, [X22,#0x28]
.text:00000000000088A4                 LDUR            X9, [X29,#var_28]
.text:00000000000088A8                 CMP             X8, X9
.text:00000000000088AC                 B.NE            loc_88CC
.text:00000000000088B0                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:00000000000088B4                 LDP             X20, X19, [SP,#0x60+var_10]
.text:00000000000088B8                 LDP             X22, X21, [SP,#0x60+var_20]
.text:00000000000088BC                 ADD             SP, SP, #0x70 ; 'p'
.text:00000000000088C0                 RET
.text:00000000000088C4 ; ---------------------------------------------------------------------------
.text:00000000000088C4 loc_88C4                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+1B8↑j
.text:00000000000088C4                 STR             WZR, [X21]
.text:00000000000088C8                 B               loc_8898
.text:00000000000088CC ; ---------------------------------------------------------------------------
.text:00000000000088CC loc_88CC                                ; CODE XREF: tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)+21C↑j
.text:00000000000088CC                 BL              .__stack_chk_fail
.text:00000000000088CC ; } // starts at 8690
.text:00000000000088CC ; End of function tinyxml2::XMLUtil::GetCharacterRef(char const*,char *,int *)
.text:00000000000088D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088D0 ; __int64 __fastcall tinyxml2::XMLUtil::SetBoolSerialization(tinyxml2::XMLUtil *__hidden this, const char *, const char *)
.text:00000000000088D0                 EXPORT _ZN8tinyxml27XMLUtil20SetBoolSerializationEPKcS2_
.text:00000000000088D0 _ZN8tinyxml27XMLUtil20SetBoolSerializationEPKcS2_
.text:00000000000088D0                                         ; DATA XREF: LOAD:0000000000000DE0↑o
.text:00000000000088D0 ; __unwind {
.text:00000000000088D0                 ADRP            X9, #_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGE
.text:00000000000088D4                 ADRP            X11, #_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGE
.text:00000000000088D8                 ADRP            X8, #aTrue@PAGE ; "true"
.text:00000000000088DC                 ADD             X8, X8, #aTrue@PAGEOFF ; "true"
.text:00000000000088E0                 LDR             X9, [X9,#_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGEOFF]
.text:00000000000088E4                 CMP             X0, #0
.text:00000000000088E8                 LDR             X11, [X11,#_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGEOFF]
.text:00000000000088EC                 ADRP            X10, #aFalse@PAGE ; "false"
.text:00000000000088F0                 CSEL            X8, X8, X0, EQ
.text:00000000000088F4                 ADD             X10, X10, #aFalse@PAGEOFF ; "false"
.text:00000000000088F8                 CMP             X1, #0
.text:00000000000088FC                 CSEL            X10, X10, X1, EQ
.text:0000000000008900                 STR             X8, [X9] ; tinyxml2::XMLUtil::writeBoolTrue
.text:0000000000008904                 STR             X10, [X11] ; tinyxml2::XMLUtil::writeBoolFalse
.text:0000000000008908                 RET
.text:0000000000008908 ; } // starts at 88D0
.text:0000000000008908 ; End of function tinyxml2::XMLUtil::SetBoolSerialization(char const*,char const*)
.text:0000000000008908 ; ---------------------------------------------------------------------------
.text:000000000000890C                 ALIGN 0x10
.text:0000000000008910 ; =============== S U B R O U T I N E =======================================
.text:0000000000008910 ; __int64 __fastcall tinyxml2::XMLUtil::ReadBOM(tinyxml2::XMLUtil *__hidden this, const char *, bool *)
.text:0000000000008910                 EXPORT _ZN8tinyxml27XMLUtil7ReadBOMEPKcPb
.text:0000000000008910 _ZN8tinyxml27XMLUtil7ReadBOMEPKcPb      ; DATA XREF: LOAD:00000000000011D0↑o
.text:0000000000008910 ; __unwind {
.text:0000000000008910                 STRB            WZR, [X1]
.text:0000000000008914                 LDRB            W8, [X0]
.text:0000000000008918                 CMP             W8, #0xEF
.text:000000000000891C                 B.NE            locret_8944
.text:0000000000008920                 LDRB            W8, [X0,#1]
.text:0000000000008924                 CMP             W8, #0xBB
.text:0000000000008928                 B.NE            locret_8944
.text:000000000000892C                 LDRB            W8, [X0,#2]
.text:0000000000008930                 CMP             W8, #0xBF
.text:0000000000008934                 B.NE            locret_8944
.text:0000000000008938                 MOV             W8, #1
.text:000000000000893C                 ADD             X0, X0, #3
.text:0000000000008940                 STRB            W8, [X1]
.text:0000000000008944 locret_8944                             ; CODE XREF: tinyxml2::XMLUtil::ReadBOM(char const*,bool *)+C↑j
.text:0000000000008944                                         ; tinyxml2::XMLUtil::ReadBOM(char const*,bool *)+18↑j ...
.text:0000000000008944                 RET
.text:0000000000008944 ; } // starts at 8910
.text:0000000000008944 ; End of function tinyxml2::XMLUtil::ReadBOM(char const*,bool *)
.text:0000000000008948 ; =============== S U B R O U T I N E =======================================
.text:0000000000008948 ; Attributes: bp-based frame
.text:0000000000008948 ; __int64 __fastcall tinyxml2::XMLUtil::ConvertUTF32ToUTF8(tinyxml2::XMLUtil *__hidden this, unsigned __int64, char *, int *)
.text:0000000000008948                 EXPORT _ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi
.text:0000000000008948 _ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi
.text:0000000000008948                                         ; DATA XREF: LOAD:0000000000001848↑o
.text:0000000000008948 var_40          = -0x40
.text:0000000000008948 var_30          = -0x30
.text:0000000000008948 var_10          = -0x10
.text:0000000000008948 var_8           = -8
.text:0000000000008948 var_s0          =  0
.text:0000000000008948 ; __unwind {
.text:0000000000008948                 SUB             SP, SP, #0x50
.text:000000000000894C                 STP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000008950                 ADD             X29, SP, #0x40
.text:0000000000008954                 MRS             X8, #3, c13, c0, #2
.text:0000000000008958                 ADRP            X10, #xmmword_4E60@PAGE
.text:000000000000895C                 LDR             X9, [X8,#0x28]
.text:0000000000008960                 ADRP            X11, #xmmword_4E70@PAGE
.text:0000000000008964                 CMP             X0, #0x80
.text:0000000000008968                 LDR             Q0, [X10,#xmmword_4E60@PAGEOFF]
.text:000000000000896C                 LDR             Q1, [X11,#xmmword_4E70@PAGEOFF]
.text:0000000000008970                 STUR            X9, [X29,#var_8]
.text:0000000000008974                 MOV             W9, #0xFC
.text:0000000000008978                 STP             XZR, XZR, [SP,#0x40+var_40]
.text:000000000000897C                 STP             Q0, Q1, [SP,#0x40+var_30]
.text:0000000000008980                 STR             X9, [SP,#0x40+var_10]
.text:0000000000008984                 B.CS            loc_8994
.text:0000000000008988                 MOV             W9, #1
.text:000000000000898C                 STR             W9, [X2]
.text:0000000000008990                 B               loc_8A00
.text:0000000000008994 ; ---------------------------------------------------------------------------
.text:0000000000008994 loc_8994                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+3C↑j
.text:0000000000008994                 CMP             X0, #0x7FF
.text:0000000000008998                 B.HI            loc_89A8
.text:000000000000899C                 MOV             W9, #2
.text:00000000000089A0                 STR             W9, [X2]
.text:00000000000089A4                 B               loc_89EC
.text:00000000000089A8 ; ---------------------------------------------------------------------------
.text:00000000000089A8 loc_89A8                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+50↑j
.text:00000000000089A8                 LSR             X9, X0, #0x10
.text:00000000000089AC                 CBNZ            X9, loc_89BC
.text:00000000000089B0                 MOV             W9, #3
.text:00000000000089B4                 STR             W9, [X2]
.text:00000000000089B8                 B               loc_89DC
.text:00000000000089BC ; ---------------------------------------------------------------------------
.text:00000000000089BC loc_89BC                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+64↑j
.text:00000000000089BC                 CMP             X0, #0x200,LSL#12
.text:00000000000089C0                 B.CS            loc_8A2C
.text:00000000000089C4                 MOV             W9, #4
.text:00000000000089C8                 MOV             W10, #0x80
.text:00000000000089CC                 BFXIL           W10, W0, #0, #6
.text:00000000000089D0                 LSR             X0, X0, #6
.text:00000000000089D4                 STR             W9, [X2]
.text:00000000000089D8                 STRB            W10, [X1,#3]
.text:00000000000089DC loc_89DC                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+70↑j
.text:00000000000089DC                 MOV             W9, #0x80
.text:00000000000089E0                 BFXIL           W9, W0, #0, #6
.text:00000000000089E4                 LSR             X0, X0, #6
.text:00000000000089E8                 STRB            W9, [X1,#2]
.text:00000000000089EC loc_89EC                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+5C↑j
.text:00000000000089EC                 MOV             W9, #0x80
.text:00000000000089F0                 BFXIL           W9, W0, #0, #6
.text:00000000000089F4                 LSR             X0, X0, #6
.text:00000000000089F8                 STRB            W9, [X1,#1]
.text:00000000000089FC                 LDRSW           X9, [X2]
.text:0000000000008A00 loc_8A00                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+48↑j
.text:0000000000008A00                 MOV             X10, SP
.text:0000000000008A04                 LDR             X9, [X10,X9,LSL#3]
.text:0000000000008A08                 ORR             W9, W9, W0
.text:0000000000008A0C                 STRB            W9, [X1]
.text:0000000000008A10 loc_8A10                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+E8↓j
.text:0000000000008A10                 LDR             X8, [X8,#0x28]
.text:0000000000008A14                 LDUR            X9, [X29,#var_8]
.text:0000000000008A18                 CMP             X8, X9
.text:0000000000008A1C                 B.NE            loc_8A34
.text:0000000000008A20                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000008A24                 ADD             SP, SP, #0x50 ; 'P'
.text:0000000000008A28                 RET
.text:0000000000008A2C ; ---------------------------------------------------------------------------
.text:0000000000008A2C loc_8A2C                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+78↑j
.text:0000000000008A2C                 STR             WZR, [X2]
.text:0000000000008A30                 B               loc_8A10
.text:0000000000008A34 ; ---------------------------------------------------------------------------
.text:0000000000008A34 loc_8A34                                ; CODE XREF: tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)+D4↑j
.text:0000000000008A34                 BL              .__stack_chk_fail
.text:0000000000008A34 ; } // starts at 8948
.text:0000000000008A34 ; End of function tinyxml2::XMLUtil::ConvertUTF32ToUTF8(ulong,char *,int *)
.text:0000000000008A38 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A38 ; __int64 __fastcall tinyxml2::XMLUtil::ToStr(tinyxml2::XMLUtil *__hidden this, int, char *, int)
.text:0000000000008A38                 EXPORT _ZN8tinyxml27XMLUtil5ToStrEiPci
.text:0000000000008A38 _ZN8tinyxml27XMLUtil5ToStrEiPci         ; DATA XREF: LOAD:00000000000009A8↑o
.text:0000000000008A38 ; __unwind {
.text:0000000000008A38                 MOV             X8, X1
.text:0000000000008A3C                 ADRP            X3, #unk_4EA5@PAGE
.text:0000000000008A40                 MOV             W4, W0
.text:0000000000008A44                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008A48                 ADD             X3, X3, #unk_4EA5@PAGEOFF
.text:0000000000008A4C                 MOV             X0, X8
.text:0000000000008A50                 SXTW            X2, W2
.text:0000000000008A54                 B               sub_8A58
.text:0000000000008A54 ; } // starts at 8A38
.text:0000000000008A54 ; End of function tinyxml2::XMLUtil::ToStr(int,char *,int)
.text:0000000000008A58 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A58 ; Attributes: bp-based frame
.text:0000000000008A58 sub_8A58                                ; CODE XREF: tinyxml2::XMLUtil::ToStr(int,char *,int)+1C↑j
.text:0000000000008A58                                         ; tinyxml2::XMLUtil::ToStr(uint,char *,int)+1C↓j ...
.text:0000000000008A58 var_108         = -0x108
.text:0000000000008A58 var_100         = -0x100
.text:0000000000008A58 var_E0          = -0xE0
.text:0000000000008A58 var_C0          = -0xC0
.text:0000000000008A58 var_A0          = -0xA0
.text:0000000000008A58 var_80          = -0x80
.text:0000000000008A58 var_70          = -0x70
.text:0000000000008A58 var_60          = -0x60
.text:0000000000008A58 var_38          = -0x38
.text:0000000000008A58 var_28          = -0x28
.text:0000000000008A58 var_10          = -0x10
.text:0000000000008A58 var_s0          =  0
.text:0000000000008A58 ; __unwind {
.text:0000000000008A58                 SUB             SP, SP, #0x120
.text:0000000000008A5C                 STP             X28, X19, [SP,#0x110+var_10]
.text:0000000000008A60                 STP             X29, X30, [SP,#0x110+var_s0]
.text:0000000000008A64                 ADD             X29, SP, #0x110
.text:0000000000008A68                 MRS             X19, #3, c13, c0, #2
.text:0000000000008A6C                 STP             Q6, Q7, [SP,#0x110+var_A0]
.text:0000000000008A70                 STP             Q4, Q5, [SP,#0x110+var_C0]
.text:0000000000008A74                 MOV             X10, #0xFFFFFFFFFFFFFFE0
.text:0000000000008A78                 STP             Q2, Q3, [SP,#0x110+var_E0]
.text:0000000000008A7C                 ADD             X11, SP, #0x110+var_100
.text:0000000000008A80                 STP             Q0, Q1, [SP,#0x110+var_100]
.text:0000000000008A84                 MOVK            X10, #0xFF80,LSL#32
.text:0000000000008A88                 STP             X6, X7, [X29,#var_70]
.text:0000000000008A8C                 ADD             X11, X11, #0x80
.text:0000000000008A90                 STP             X4, X5, [X29,#var_80]
.text:0000000000008A94                 SUB             X12, X29, #-var_80
.text:0000000000008A98                 LDR             X9, [X19,#0x28]
.text:0000000000008A9C                 MOV             X8, X3
.text:0000000000008AA0                 MOV             X3, X1
.text:0000000000008AA4                 SUB             X5, X29, #-var_60
.text:0000000000008AA8                 MOV             X1, X2
.text:0000000000008AAC                 STR             X9, [SP,#0x110+var_108]
.text:0000000000008AB0                 ADD             X9, X12, #0x20 ; ' '
.text:0000000000008AB4                 ADD             X12, X29, #0x10
.text:0000000000008AB8                 STP             X11, X10, [X29,#var_28]
.text:0000000000008ABC                 SUB             X10, X29, #-var_38
.text:0000000000008AC0                 MOV             W2, WZR
.text:0000000000008AC4                 STP             X12, X9, [X29,#var_38]
.text:0000000000008AC8                 MOV             X4, X8
.text:0000000000008ACC                 LDP             Q1, Q0, [X10]
.text:0000000000008AD0                 STP             Q1, Q0, [X29,#var_60]
.text:0000000000008AD4                 BL              .__vsnprintf_chk
.text:0000000000008AD8                 LDR             X8, [X19,#0x28]
.text:0000000000008ADC                 LDR             X9, [SP,#0x110+var_108]
.text:0000000000008AE0                 CMP             X8, X9
.text:0000000000008AE4                 B.NE            loc_8AF8
.text:0000000000008AE8                 LDP             X29, X30, [SP,#0x110+var_s0]
.text:0000000000008AEC                 LDP             X28, X19, [SP,#0x110+var_10]
.text:0000000000008AF0                 ADD             SP, SP, #0x120
.text:0000000000008AF4                 RET
.text:0000000000008AF8 ; ---------------------------------------------------------------------------
.text:0000000000008AF8 loc_8AF8                                ; CODE XREF: sub_8A58+8C↑j
.text:0000000000008AF8                 BL              .__stack_chk_fail
.text:0000000000008AF8 ; } // starts at 8A58
.text:0000000000008AF8 ; End of function sub_8A58
.text:0000000000008AF8 ; ---------------------------------------------------------------------------
.text:0000000000008AFC                 ALIGN 0x20
.text:0000000000008B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B00 ; __int64 __fastcall tinyxml2::XMLUtil::ToStr(tinyxml2::XMLUtil *__hidden this, unsigned int, char *, int)
.text:0000000000008B00                 EXPORT _ZN8tinyxml27XMLUtil5ToStrEjPci
.text:0000000000008B00 _ZN8tinyxml27XMLUtil5ToStrEjPci         ; DATA XREF: LOAD:0000000000001488↑o
.text:0000000000008B00 ; __unwind {
.text:0000000000008B00                 MOV             X8, X1
.text:0000000000008B04                 ADRP            X3, #unk_4EE4@PAGE
.text:0000000000008B08                 MOV             W4, W0
.text:0000000000008B0C                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008B10                 ADD             X3, X3, #unk_4EE4@PAGEOFF
.text:0000000000008B14                 MOV             X0, X8
.text:0000000000008B18                 SXTW            X2, W2
.text:0000000000008B1C                 B               sub_8A58
.text:0000000000008B1C ; } // starts at 8B00
.text:0000000000008B1C ; End of function tinyxml2::XMLUtil::ToStr(uint,char *,int)
.text:0000000000008B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B20 ; __int64 __fastcall tinyxml2::XMLUtil::ToStr(tinyxml2::XMLUtil *__hidden this, bool, char *, int)
.text:0000000000008B20                 EXPORT _ZN8tinyxml27XMLUtil5ToStrEbPci
.text:0000000000008B20 _ZN8tinyxml27XMLUtil5ToStrEbPci         ; DATA XREF: LOAD:0000000000001440↑o
.text:0000000000008B20 ; __unwind {
.text:0000000000008B20                 ADRP            X9, #_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGE
.text:0000000000008B24                 ADRP            X10, #_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGE
.text:0000000000008B28                 TST             W0, #1
.text:0000000000008B2C                 LDR             X9, [X9,#_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGEOFF]
.text:0000000000008B30                 MOV             X8, X1
.text:0000000000008B34                 LDR             X10, [X10,#_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGEOFF]
.text:0000000000008B38                 ADRP            X3, #aS@PAGE ; "%s"
.text:0000000000008B3C                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008B40                 ADD             X3, X3, #aS@PAGEOFF ; "%s"
.text:0000000000008B44                 MOV             X0, X8
.text:0000000000008B48                 CSEL            X9, X9, X10, NE
.text:0000000000008B4C                 SXTW            X2, W2
.text:0000000000008B50                 LDR             X4, [X9]
.text:0000000000008B54                 B               sub_8A58
.text:0000000000008B54 ; } // starts at 8B20
.text:0000000000008B54 ; End of function tinyxml2::XMLUtil::ToStr(bool,char *,int)
.text:0000000000008B58 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B58 ; __int64 __fastcall tinyxml2::XMLUtil::ToStr(tinyxml2::XMLUtil *__hidden this, float, char *, int)
.text:0000000000008B58                 EXPORT _ZN8tinyxml27XMLUtil5ToStrEfPci
.text:0000000000008B58 _ZN8tinyxml27XMLUtil5ToStrEfPci         ; DATA XREF: LOAD:0000000000001470↑o
.text:0000000000008B58 ; __unwind {
.text:0000000000008B58                 FCVT            D0, S0
.text:0000000000008B5C                 ADRP            X3, #a8g@PAGE ; "%.8g"
.text:0000000000008B60                 SXTW            X2, W1
.text:0000000000008B64                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008B68                 ADD             X3, X3, #a8g@PAGEOFF ; "%.8g"
.text:0000000000008B6C                 B               sub_8A58
.text:0000000000008B6C ; } // starts at 8B58
.text:0000000000008B6C ; End of function tinyxml2::XMLUtil::ToStr(float,char *,int)
.text:0000000000008B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B70 ; __int64 __fastcall tinyxml2::XMLUtil::ToStr(tinyxml2::XMLUtil *__hidden this, double, char *, int)
.text:0000000000008B70                 EXPORT _ZN8tinyxml27XMLUtil5ToStrEdPci
.text:0000000000008B70 _ZN8tinyxml27XMLUtil5ToStrEdPci         ; DATA XREF: LOAD:0000000000001458↑o
.text:0000000000008B70 ; __unwind {
.text:0000000000008B70                 ADRP            X3, #a17g@PAGE ; "%.17g"
.text:0000000000008B74                 SXTW            X2, W1
.text:0000000000008B78                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008B7C                 ADD             X3, X3, #a17g@PAGEOFF ; "%.17g"
.text:0000000000008B80                 B               sub_8A58
.text:0000000000008B80 ; } // starts at 8B70
.text:0000000000008B80 ; End of function tinyxml2::XMLUtil::ToStr(double,char *,int)
.text:0000000000008B80 ; ---------------------------------------------------------------------------
.text:0000000000008B84                 ALIGN 8
.text:0000000000008B88 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B88 ; __int64 __fastcall tinyxml2::XMLUtil::ToStr(tinyxml2::XMLUtil *__hidden this, __int64, char *, int)
.text:0000000000008B88                 EXPORT _ZN8tinyxml27XMLUtil5ToStrElPci
.text:0000000000008B88 _ZN8tinyxml27XMLUtil5ToStrElPci         ; DATA XREF: LOAD:00000000000014A0↑o
.text:0000000000008B88 ; __unwind {
.text:0000000000008B88                 MOV             X8, X1
.text:0000000000008B8C                 ADRP            X3, #aLld@PAGE ; "%lld"
.text:0000000000008B90                 MOV             X4, X0
.text:0000000000008B94                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000008B98                 ADD             X3, X3, #aLld@PAGEOFF ; "%lld"
.text:0000000000008B9C                 MOV             X0, X8
.text:0000000000008BA0                 SXTW            X2, W2
.text:0000000000008BA4                 B               sub_8A58
.text:0000000000008BA4 ; } // starts at 8B88
.text:0000000000008BA4 ; End of function tinyxml2::XMLUtil::ToStr(long,char *,int)
.text:0000000000008BA8 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BA8 ; Attributes: bp-based frame
.text:0000000000008BA8 ; __int64 __fastcall tinyxml2::XMLUtil::ToInt(tinyxml2::XMLUtil *__hidden this, const char *, int *)
.text:0000000000008BA8                 EXPORT _ZN8tinyxml27XMLUtil5ToIntEPKcPi
.text:0000000000008BA8 _ZN8tinyxml27XMLUtil5ToIntEPKcPi        ; DATA XREF: LOAD:0000000000000E88↑o
.text:0000000000008BA8 var_s0          =  0
.text:0000000000008BA8 ; __unwind {
.text:0000000000008BA8                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000008BAC                 MOV             X29, SP
.text:0000000000008BB0                 MOV             X2, X1
.text:0000000000008BB4                 ADRP            X1, #unk_4EA5@PAGE
.text:0000000000008BB8                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:0000000000008BBC                 BL              .sscanf
.text:0000000000008BC0                 CMP             W0, #1
.text:0000000000008BC4                 CSET            W0, EQ
.text:0000000000008BC8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000008BCC                 RET
.text:0000000000008BCC ; } // starts at 8BA8
.text:0000000000008BCC ; End of function tinyxml2::XMLUtil::ToInt(char const*,int *)
.text:0000000000008BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BD0 ; Attributes: bp-based frame
.text:0000000000008BD0 ; __int64 __fastcall tinyxml2::XMLUtil::ToUnsigned(tinyxml2::XMLUtil *__hidden this, const char *, unsigned int *)
.text:0000000000008BD0                 EXPORT _ZN8tinyxml27XMLUtil10ToUnsignedEPKcPj
.text:0000000000008BD0 _ZN8tinyxml27XMLUtil10ToUnsignedEPKcPj  ; DATA XREF: LOAD:0000000000000D80↑o
.text:0000000000008BD0 var_s0          =  0
.text:0000000000008BD0 ; __unwind {
.text:0000000000008BD0                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000008BD4                 MOV             X29, SP
.text:0000000000008BD8                 MOV             X2, X1
.text:0000000000008BDC                 ADRP            X1, #unk_4EE4@PAGE
.text:0000000000008BE0                 ADD             X1, X1, #unk_4EE4@PAGEOFF ; format
.text:0000000000008BE4                 BL              .sscanf
.text:0000000000008BE8                 CMP             W0, #1
.text:0000000000008BEC                 CSET            W0, EQ
.text:0000000000008BF0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000008BF4                 RET
.text:0000000000008BF4 ; } // starts at 8BD0
.text:0000000000008BF4 ; End of function tinyxml2::XMLUtil::ToUnsigned(char const*,uint *)
.text:0000000000008BF8 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BF8 ; Attributes: bp-based frame
.text:0000000000008BF8 ; __int64 __fastcall tinyxml2::XMLUtil::ToBool(tinyxml2::XMLUtil *__hidden this, const char *, bool *)
.text:0000000000008BF8                 EXPORT _ZN8tinyxml27XMLUtil6ToBoolEPKcPb
.text:0000000000008BF8 _ZN8tinyxml27XMLUtil6ToBoolEPKcPb       ; DATA XREF: LOAD:0000000000000D98↑o
.text:0000000000008BF8 var_2C          = -0x2C
.text:0000000000008BF8 var_28          = -0x28
.text:0000000000008BF8 var_20          = -0x20
.text:0000000000008BF8 var_10          = -0x10
.text:0000000000008BF8 var_s0          =  0
.text:0000000000008BF8 ; __unwind {
.text:0000000000008BF8                 SUB             SP, SP, #0x40
.text:0000000000008BFC                 STR             X21, [SP,#0x30+var_20]
.text:0000000000008C00                 STP             X20, X19, [SP,#0x30+var_10]
.text:0000000000008C04                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000008C08                 ADD             X29, SP, #0x30
.text:0000000000008C0C                 MRS             X21, #3, c13, c0, #2
.text:0000000000008C10                 MOV             X19, X1
.text:0000000000008C14                 LDR             X8, [X21,#0x28]
.text:0000000000008C18                 ADRP            X1, #unk_4EA5@PAGE
.text:0000000000008C1C                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:0000000000008C20                 ADD             X2, SP, #0x30+var_2C
.text:0000000000008C24                 MOV             X20, X0
.text:0000000000008C28                 STR             X8, [SP,#0x30+var_28]
.text:0000000000008C2C                 STR             WZR, [SP,#0x30+var_2C]
.text:0000000000008C30                 BL              .sscanf
.text:0000000000008C34                 CMP             W0, #1
.text:0000000000008C38                 B.NE            loc_8C4C
.text:0000000000008C3C                 LDR             W8, [SP,#0x30+var_2C]
.text:0000000000008C40                 CMP             W8, #0
.text:0000000000008C44                 CSET            W8, NE
.text:0000000000008C48                 B               loc_8CAC
.text:0000000000008C4C ; ---------------------------------------------------------------------------
.text:0000000000008C4C loc_8C4C                                ; CODE XREF: tinyxml2::XMLUtil::ToBool(char const*,bool *)+40↑j
.text:0000000000008C4C                 ADRP            X8, #aTrue@PAGE ; "true"
.text:0000000000008C50                 ADD             X8, X8, #aTrue@PAGEOFF ; "true"
.text:0000000000008C54                 CMP             X20, X8
.text:0000000000008C58                 B.EQ            loc_8CA8
.text:0000000000008C5C                 ADRP            X1, #aTrue@PAGE ; "true"
.text:0000000000008C60                 ADD             X1, X1, #aTrue@PAGEOFF ; "true"
.text:0000000000008C64                 MOV             X0, X20 ; s1
.text:0000000000008C68                 MOV             W2, #0x7FFFFFFF ; n
.text:0000000000008C6C                 BL              .strncmp
.text:0000000000008C70                 CBZ             W0, loc_8CA8
.text:0000000000008C74                 ADRP            X8, #aFalse@PAGE ; "false"
.text:0000000000008C78                 ADD             X8, X8, #aFalse@PAGEOFF ; "false"
.text:0000000000008C7C                 CMP             X20, X8
.text:0000000000008C80                 B.EQ            loc_8CD8
.text:0000000000008C84                 ADRP            X1, #aFalse@PAGE ; "false"
.text:0000000000008C88                 ADD             X1, X1, #aFalse@PAGEOFF ; "false"
.text:0000000000008C8C                 MOV             X0, X20 ; s1
.text:0000000000008C90                 MOV             W2, #0x7FFFFFFF ; n
.text:0000000000008C94                 BL              .strncmp
.text:0000000000008C98                 MOV             W8, W0
.text:0000000000008C9C                 MOV             W0, WZR
.text:0000000000008CA0                 CBNZ            W8, loc_8CB4
.text:0000000000008CA4                 B               loc_8CAC
.text:0000000000008CA8 ; ---------------------------------------------------------------------------
.text:0000000000008CA8 loc_8CA8                                ; CODE XREF: tinyxml2::XMLUtil::ToBool(char const*,bool *)+60↑j
.text:0000000000008CA8                                         ; tinyxml2::XMLUtil::ToBool(char const*,bool *)+78↑j
.text:0000000000008CA8                 MOV             W8, #1
.text:0000000000008CAC loc_8CAC                                ; CODE XREF: tinyxml2::XMLUtil::ToBool(char const*,bool *)+50↑j
.text:0000000000008CAC                                         ; tinyxml2::XMLUtil::ToBool(char const*,bool *)+AC↑j ...
.text:0000000000008CAC                 MOV             W0, #1
.text:0000000000008CB0                 STRB            W8, [X19]
.text:0000000000008CB4 loc_8CB4                                ; CODE XREF: tinyxml2::XMLUtil::ToBool(char const*,bool *)+A8↑j
.text:0000000000008CB4                 LDR             X8, [X21,#0x28]
.text:0000000000008CB8                 LDR             X9, [SP,#0x30+var_28]
.text:0000000000008CBC                 CMP             X8, X9
.text:0000000000008CC0                 B.NE            loc_8CE0
.text:0000000000008CC4                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000008CC8                 LDP             X20, X19, [SP,#0x30+var_10]
.text:0000000000008CCC                 LDR             X21, [SP,#0x30+var_20]
.text:0000000000008CD0                 ADD             SP, SP, #0x40 ; '@'
.text:0000000000008CD4                 RET
.text:0000000000008CD8 ; ---------------------------------------------------------------------------
.text:0000000000008CD8 loc_8CD8                                ; CODE XREF: tinyxml2::XMLUtil::ToBool(char const*,bool *)+88↑j
.text:0000000000008CD8                 MOV             W8, WZR
.text:0000000000008CDC                 B               loc_8CAC
.text:0000000000008CE0 ; ---------------------------------------------------------------------------
.text:0000000000008CE0 loc_8CE0                                ; CODE XREF: tinyxml2::XMLUtil::ToBool(char const*,bool *)+C8↑j
.text:0000000000008CE0                 BL              .__stack_chk_fail
.text:0000000000008CE0 ; } // starts at 8BF8
.text:0000000000008CE0 ; End of function tinyxml2::XMLUtil::ToBool(char const*,bool *)
.text:0000000000008CE0 ; ---------------------------------------------------------------------------
.text:0000000000008CE4                 ALIGN 8
.text:0000000000008CE8 ; =============== S U B R O U T I N E =======================================
.text:0000000000008CE8 ; Attributes: bp-based frame
.text:0000000000008CE8 ; __int64 __fastcall tinyxml2::XMLUtil::ToFloat(tinyxml2::XMLUtil *__hidden this, const char *, float *)
.text:0000000000008CE8                 EXPORT _ZN8tinyxml27XMLUtil7ToFloatEPKcPf
.text:0000000000008CE8 _ZN8tinyxml27XMLUtil7ToFloatEPKcPf      ; DATA XREF: LOAD:0000000000000B28↑o
.text:0000000000008CE8 var_s0          =  0
.text:0000000000008CE8 ; __unwind {
.text:0000000000008CE8                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000008CEC                 MOV             X29, SP
.text:0000000000008CF0                 MOV             X2, X1
.text:0000000000008CF4                 ADRP            X1, #aF@PAGE ; "%f"
.text:0000000000008CF8                 ADD             X1, X1, #aF@PAGEOFF ; "%f"
.text:0000000000008CFC                 BL              .sscanf
.text:0000000000008D00                 CMP             W0, #1
.text:0000000000008D04                 CSET            W0, EQ
.text:0000000000008D08                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000008D0C                 RET
.text:0000000000008D0C ; } // starts at 8CE8
.text:0000000000008D0C ; End of function tinyxml2::XMLUtil::ToFloat(char const*,float *)
.text:0000000000008D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D10 ; Attributes: bp-based frame
.text:0000000000008D10 ; __int64 __fastcall tinyxml2::XMLUtil::ToDouble(tinyxml2::XMLUtil *__hidden this, const char *, double *)
.text:0000000000008D10                 EXPORT _ZN8tinyxml27XMLUtil8ToDoubleEPKcPd
.text:0000000000008D10 _ZN8tinyxml27XMLUtil8ToDoubleEPKcPd     ; DATA XREF: LOAD:0000000000000EA0↑o
.text:0000000000008D10 var_s0          =  0
.text:0000000000008D10 ; __unwind {
.text:0000000000008D10                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000008D14                 MOV             X29, SP
.text:0000000000008D18                 MOV             X2, X1
.text:0000000000008D1C                 ADRP            X1, #aLf@PAGE ; "%lf"
.text:0000000000008D20                 ADD             X1, X1, #aLf@PAGEOFF ; format
.text:0000000000008D24                 BL              .sscanf
.text:0000000000008D28                 CMP             W0, #1
.text:0000000000008D2C                 CSET            W0, EQ
.text:0000000000008D30                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000008D34                 RET
.text:0000000000008D34 ; } // starts at 8D10
.text:0000000000008D34 ; End of function tinyxml2::XMLUtil::ToDouble(char const*,double *)
.text:0000000000008D38 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D38 ; Attributes: bp-based frame
.text:0000000000008D38 ; __int64 __fastcall tinyxml2::XMLUtil::ToInt64(tinyxml2::XMLUtil *__hidden this, const char *, __int64 *)
.text:0000000000008D38                 EXPORT _ZN8tinyxml27XMLUtil7ToInt64EPKcPl
.text:0000000000008D38 _ZN8tinyxml27XMLUtil7ToInt64EPKcPl      ; DATA XREF: LOAD:0000000000001950↑o
.text:0000000000008D38 var_20          = -0x20
.text:0000000000008D38 var_18          = -0x18
.text:0000000000008D38 var_10          = -0x10
.text:0000000000008D38 var_s0          =  0
.text:0000000000008D38 ; __unwind {
.text:0000000000008D38                 SUB             SP, SP, #0x30
.text:0000000000008D3C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000008D40                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000008D44                 ADD             X29, SP, #0x20
.text:0000000000008D48                 MRS             X20, #3, c13, c0, #2
.text:0000000000008D4C                 MOV             X19, X1
.text:0000000000008D50                 LDR             X8, [X20,#0x28]
.text:0000000000008D54                 ADRP            X1, #aLld@PAGE ; "%lld"
.text:0000000000008D58                 ADD             X1, X1, #aLld@PAGEOFF ; "%lld"
.text:0000000000008D5C                 MOV             X2, SP
.text:0000000000008D60                 STR             X8, [SP,#0x20+var_18]
.text:0000000000008D64                 STR             XZR, [SP,#0x20+var_20]
.text:0000000000008D68                 BL              .sscanf
.text:0000000000008D6C                 CMP             W0, #1
.text:0000000000008D70                 B.NE            loc_8D80
.text:0000000000008D74                 LDR             X8, [SP,#0x20+var_20]
.text:0000000000008D78                 STR             X8, [X19]
.text:0000000000008D7C                 B               loc_8D84
.text:0000000000008D80 ; ---------------------------------------------------------------------------
.text:0000000000008D80 loc_8D80                                ; CODE XREF: tinyxml2::XMLUtil::ToInt64(char const*,long *)+38↑j
.text:0000000000008D80                 MOV             W0, WZR
.text:0000000000008D84 loc_8D84                                ; CODE XREF: tinyxml2::XMLUtil::ToInt64(char const*,long *)+44↑j
.text:0000000000008D84                 LDR             X8, [X20,#0x28]
.text:0000000000008D88                 LDR             X9, [SP,#0x20+var_18]
.text:0000000000008D8C                 CMP             X8, X9
.text:0000000000008D90                 B.NE            loc_8DA4
.text:0000000000008D94                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000008D98                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000008D9C                 ADD             SP, SP, #0x30 ; '0'
.text:0000000000008DA0                 RET
.text:0000000000008DA4 ; ---------------------------------------------------------------------------
.text:0000000000008DA4 loc_8DA4                                ; CODE XREF: tinyxml2::XMLUtil::ToInt64(char const*,long *)+58↑j
.text:0000000000008DA4                 BL              .__stack_chk_fail
.text:0000000000008DA4 ; } // starts at 8D38
.text:0000000000008DA4 ; End of function tinyxml2::XMLUtil::ToInt64(char const*,long *)
.text:0000000000008DA8 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DA8 ; Attributes: bp-based frame
.text:0000000000008DA8 ; __int64 __fastcall tinyxml2::XMLDocument::Identify(tinyxml2::XMLDocument *__hidden this, char *, tinyxml2::XMLNode **)
.text:0000000000008DA8                 EXPORT _ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE
.text:0000000000008DA8 _ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE
.text:0000000000008DA8                                         ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+C↓j
.text:0000000000008DA8                                         ; DATA XREF: LOAD:0000000000001038↑o ...
.text:0000000000008DA8 var_40          = -0x40
.text:0000000000008DA8 var_30          = -0x30
.text:0000000000008DA8 var_20          = -0x20
.text:0000000000008DA8 var_10          = -0x10
.text:0000000000008DA8 var_s0          =  0
.text:0000000000008DA8 ; __unwind {
.text:0000000000008DA8                 STP             X26, X25, [SP,#-0x10+var_40]!
.text:0000000000008DAC                 STP             X24, X23, [SP,#0x40+var_30]
.text:0000000000008DB0                 STP             X22, X21, [SP,#0x40+var_20]
.text:0000000000008DB4                 STP             X20, X19, [SP,#0x40+var_10]
.text:0000000000008DB8                 STP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000008DBC                 ADD             X29, SP, #0x40
.text:0000000000008DC0                 LDRSB           W25, [X1]
.text:0000000000008DC4                 MOV             X23, X1
.text:0000000000008DC8                 LDR             W24, [X0,#0xA0]
.text:0000000000008DCC                 MOV             X20, X0
.text:0000000000008DD0                 MOV             X19, X2
.text:0000000000008DD4                 TBNZ            W25, #0x1F, loc_8E0C
.text:0000000000008DD8                 MOV             W26, W24
.text:0000000000008DDC                 MOV             X21, X23
.text:0000000000008DE0 loc_8DE0                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+5C↓j
.text:0000000000008DE0                 AND             W22, W25, #0xFF
.text:0000000000008DE4                 MOV             W0, W22 ; int
.text:0000000000008DE8                 BL              .isspace
.text:0000000000008DEC                 CBZ             W0, loc_8E14
.text:0000000000008DF0                 CMP             W22, #0xA
.text:0000000000008DF4                 B.NE            loc_8E00
.text:0000000000008DF8                 ADD             W26, W26, #1
.text:0000000000008DFC                 STR             W26, [X20,#0xA0]
.text:0000000000008E00 loc_8E00                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+4C↑j
.text:0000000000008E00                 LDRSB           W25, [X21,#1]!
.text:0000000000008E04                 TBZ             W25, #0x1F, loc_8DE0
.text:0000000000008E08                 B               loc_8E1C
.text:0000000000008E0C ; ---------------------------------------------------------------------------
.text:0000000000008E0C loc_8E0C                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+2C↑j
.text:0000000000008E0C                 MOV             X21, X23
.text:0000000000008E10                 B               loc_8E1C
.text:0000000000008E14 ; ---------------------------------------------------------------------------
.text:0000000000008E14 loc_8E14                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+44↑j
.text:0000000000008E14                 TST             W25, #0xFF
.text:0000000000008E18                 B.EQ            loc_905C
.text:0000000000008E1C loc_8E1C                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+60↑j
.text:0000000000008E1C                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+68↑j
.text:0000000000008E1C                 ADRP            X8, #asc_4F28@PAGE ; "<?"
.text:0000000000008E20                 ADD             X8, X8, #asc_4F28@PAGEOFF ; "<?"
.text:0000000000008E24                 CMP             X21, X8
.text:0000000000008E28                 B.EQ            loc_8F3C
.text:0000000000008E2C                 ADRP            X1, #asc_4F28@PAGE ; "<?"
.text:0000000000008E30                 ADD             X1, X1, #asc_4F28@PAGEOFF ; "<?"
.text:0000000000008E34                 MOV             X0, X21 ; s1
.text:0000000000008E38                 MOV             W2, #2  ; n
.text:0000000000008E3C                 BL              .strncmp
.text:0000000000008E40                 CBZ             W0, loc_8F3C
.text:0000000000008E44                 ADRP            X8, #asc_505F@PAGE ; "<!--"
.text:0000000000008E48                 ADD             X8, X8, #asc_505F@PAGEOFF ; "<!--"
.text:0000000000008E4C                 CMP             X21, X8
.text:0000000000008E50                 B.EQ            loc_8FFC
.text:0000000000008E54                 ADRP            X1, #asc_505F@PAGE ; "<!--"
.text:0000000000008E58                 ADD             X1, X1, #asc_505F@PAGEOFF ; "<!--"
.text:0000000000008E5C                 MOV             X0, X21 ; s1
.text:0000000000008E60                 MOV             W2, #4  ; n
.text:0000000000008E64                 BL              .strncmp
.text:0000000000008E68                 CBZ             W0, loc_8FFC
.text:0000000000008E6C                 ADRP            X8, #aCdata@PAGE ; "<![CDATA["
.text:0000000000008E70                 ADD             X8, X8, #aCdata@PAGEOFF ; "<![CDATA["
.text:0000000000008E74                 CMP             X21, X8
.text:0000000000008E78                 B.EQ            loc_90F8
.text:0000000000008E7C                 ADRP            X1, #aCdata@PAGE ; "<![CDATA["
.text:0000000000008E80                 ADD             X1, X1, #aCdata@PAGEOFF ; "<![CDATA["
.text:0000000000008E84                 MOV             W2, #9  ; n
.text:0000000000008E88                 MOV             X0, X21 ; s1
.text:0000000000008E8C                 BL              .strncmp
.text:0000000000008E90                 CBZ             W0, loc_90F8
.text:0000000000008E94                 ADRP            X8, #asc_5168@PAGE ; "<!"
.text:0000000000008E98                 ADD             X8, X8, #asc_5168@PAGEOFF ; "<!"
.text:0000000000008E9C                 CMP             X21, X8
.text:0000000000008EA0                 B.EQ            loc_91D8
.text:0000000000008EA4                 ADRP            X1, #asc_5168@PAGE ; "<!"
.text:0000000000008EA8                 ADD             X1, X1, #asc_5168@PAGEOFF ; "<!"
.text:0000000000008EAC                 MOV             X0, X21 ; s1
.text:0000000000008EB0                 MOV             W2, #2  ; n
.text:0000000000008EB4                 BL              .strncmp
.text:0000000000008EB8                 CBZ             W0, loc_91D8
.text:0000000000008EBC                 ADRP            X8, #unk_4EA8@PAGE
.text:0000000000008EC0                 ADD             X8, X8, #unk_4EA8@PAGEOFF
.text:0000000000008EC4                 CMP             X21, X8
.text:0000000000008EC8                 B.EQ            loc_9200
.text:0000000000008ECC                 AND             W8, W25, #0xFF
.text:0000000000008ED0                 CMP             W8, #0x3C ; '<'
.text:0000000000008ED4                 B.EQ            loc_9200
.text:0000000000008ED8                 LDR             X8, [X20,#0x208]
.text:0000000000008EDC                 ADD             X21, X20, #0x208
.text:0000000000008EE0                 MOV             X0, X21
.text:0000000000008EE4                 LDR             X8, [X8,#0x18]
.text:0000000000008EE8                 BLR             X8
.text:0000000000008EEC                 ADRP            X8, #_ZTVN8tinyxml27XMLTextE_ptr@PAGE
.text:0000000000008EF0                 MOVI            V0.2D, #0
.text:0000000000008EF4                 MOV             X22, X0
.text:0000000000008EF8                 LDR             X8, [X8,#_ZTVN8tinyxml27XMLTextE_ptr@PAGEOFF]
.text:0000000000008EFC                 STP             X20, XZR, [X0,#8]
.text:0000000000008F00                 STR             WZR, [X0,#0x18]
.text:0000000000008F04                 STP             XZR, XZR, [X0,#0x20]
.text:0000000000008F08                 ADD             X8, X8, #0x10
.text:0000000000008F0C                 STR             WZR, [X0,#0x30]
.text:0000000000008F10                 STUR            Q0, [X0,#0x48]
.text:0000000000008F14                 STUR            Q0, [X0,#0x38]
.text:0000000000008F18                 STR             X8, [X0]
.text:0000000000008F1C                 STRB            WZR, [X0,#0x68]
.text:0000000000008F20                 STP             XZR, X21, [X0,#0x58]
.text:0000000000008F24                 LDR             W8, [X20,#0x104]
.text:0000000000008F28                 LDR             W9, [X20,#0x100]
.text:0000000000008F2C                 CMP             W9, W8
.text:0000000000008F30                 B.LE            loc_9268
.text:0000000000008F34                 LDR             X21, [X20,#0xA8]
.text:0000000000008F38                 B               loc_92BC
.text:0000000000008F3C ; ---------------------------------------------------------------------------
.text:0000000000008F3C loc_8F3C                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+80↑j
.text:0000000000008F3C                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+98↑j
.text:0000000000008F3C                 LDR             X8, [X20,#0x288]
.text:0000000000008F40                 ADD             X23, X20, #0x288
.text:0000000000008F44                 MOV             X0, X23
.text:0000000000008F48                 LDR             X8, [X8,#0x18]
.text:0000000000008F4C                 BLR             X8
.text:0000000000008F50                 ADRP            X8, #_ZTVN8tinyxml214XMLDeclarationE_ptr@PAGE
.text:0000000000008F54                 MOVI            V0.2D, #0
.text:0000000000008F58                 MOV             X22, X0
.text:0000000000008F5C                 LDR             X8, [X8,#_ZTVN8tinyxml214XMLDeclarationE_ptr@PAGEOFF]
.text:0000000000008F60 loc_8F60                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+454↓j
.text:0000000000008F60                 STP             X20, XZR, [X0,#8]
.text:0000000000008F64                 STR             WZR, [X0,#0x18]
.text:0000000000008F68                 STP             XZR, XZR, [X0,#0x20]
.text:0000000000008F6C                 ADD             X8, X8, #0x10
.text:0000000000008F70                 STR             WZR, [X0,#0x30]
.text:0000000000008F74                 STUR            Q0, [X0,#0x48]
.text:0000000000008F78                 STUR            Q0, [X0,#0x38]
.text:0000000000008F7C                 STR             X8, [X0]
.text:0000000000008F80                 STP             XZR, X23, [X0,#0x58]
.text:0000000000008F84                 LDR             W8, [X20,#0x104]
.text:0000000000008F88                 LDR             W9, [X20,#0x100]
.text:0000000000008F8C                 CMP             W9, W8
.text:0000000000008F90                 B.LE            loc_8F9C
.text:0000000000008F94                 LDR             X23, [X20,#0xA8]
.text:0000000000008F98                 B               loc_8FF0
.text:0000000000008F9C ; ---------------------------------------------------------------------------
.text:0000000000008F9C loc_8F9C                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+1E8↑j
.text:0000000000008F9C                 LSL             W9, W8, #1
.text:0000000000008FA0                 ADD             W24, W9, #2
.text:0000000000008FA4                 SXTW            X9, W24
.text:0000000000008FA8                 CMP             XZR, X9,LSR#61
.text:0000000000008FAC                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:0000000000008FB0                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:0000000000008FB4                 SXTW            X25, W8
.text:0000000000008FB8                 BL              ._Znam  ; operator new[](ulong)
.text:0000000000008FBC                 LDR             X1, [X20,#0xA8] ; src
.text:0000000000008FC0                 LSL             X2, X25, #3 ; n
.text:0000000000008FC4                 MOV             X23, X0
.text:0000000000008FC8                 BL              .memcpy
.text:0000000000008FCC                 LDR             X0, [X20,#0xA8] ; void *
.text:0000000000008FD0                 ADD             X8, X20, #0xB0
.text:0000000000008FD4                 CMP             X0, X8
.text:0000000000008FD8                 B.EQ            loc_8FE4
.text:0000000000008FDC                 CBZ             X0, loc_8FE4
.text:0000000000008FE0                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000008FE4 loc_8FE4                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+230↑j
.text:0000000000008FE4                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+234↑j
.text:0000000000008FE4                 LDR             W8, [X20,#0x104]
.text:0000000000008FE8                 STR             X23, [X20,#0xA8]
.text:0000000000008FEC                 STR             W24, [X20,#0x100]
.text:0000000000008FF0 loc_8FF0                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+1F0↑j
.text:0000000000008FF0                 STR             X22, [X23,W8,SXTW#3]
.text:0000000000008FF4                 ADD             X23, X21, #2
.text:0000000000008FF8                 B               loc_90C4
.text:0000000000008FFC ; ---------------------------------------------------------------------------
.text:0000000000008FFC loc_8FFC                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+A8↑j
.text:0000000000008FFC                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+C0↑j
.text:0000000000008FFC                 LDR             X8, [X20,#0x288]
.text:0000000000009000                 ADD             X23, X20, #0x288
.text:0000000000009004                 MOV             X0, X23
.text:0000000000009008                 LDR             X8, [X8,#0x18]
.text:000000000000900C                 BLR             X8
.text:0000000000009010                 ADRP            X8, #_ZTVN8tinyxml210XMLCommentE_ptr@PAGE
.text:0000000000009014                 MOVI            V0.2D, #0
.text:0000000000009018                 MOV             X22, X0
.text:000000000000901C                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLCommentE_ptr@PAGEOFF]
.text:0000000000009020                 STP             X20, XZR, [X0,#8]
.text:0000000000009024                 STR             WZR, [X0,#0x18]
.text:0000000000009028                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000902C                 ADD             X8, X8, #0x10
.text:0000000000009030                 STR             WZR, [X0,#0x30]
.text:0000000000009034                 STUR            Q0, [X0,#0x48]
.text:0000000000009038                 STUR            Q0, [X0,#0x38]
.text:000000000000903C                 STR             X8, [X0]
.text:0000000000009040                 STP             XZR, X23, [X0,#0x58]
.text:0000000000009044                 LDR             W8, [X20,#0x104]
.text:0000000000009048                 LDR             W9, [X20,#0x100]
.text:000000000000904C                 CMP             W9, W8
.text:0000000000009050                 B.LE            loc_9068
.text:0000000000009054                 LDR             X23, [X20,#0xA8]
.text:0000000000009058                 B               loc_90BC
.text:000000000000905C ; ---------------------------------------------------------------------------
.text:000000000000905C loc_905C                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+70↑j
.text:000000000000905C                 MOV             X22, XZR
.text:0000000000009060                 MOV             X23, X21
.text:0000000000009064                 B               loc_90D8
.text:0000000000009068 ; ---------------------------------------------------------------------------
.text:0000000000009068 loc_9068                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+2A8↑j
.text:0000000000009068                 LSL             W9, W8, #1
.text:000000000000906C                 ADD             W24, W9, #2
.text:0000000000009070                 SXTW            X9, W24
.text:0000000000009074                 CMP             XZR, X9,LSR#61
.text:0000000000009078                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:000000000000907C                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:0000000000009080                 SXTW            X25, W8
.text:0000000000009084                 BL              ._Znam  ; operator new[](ulong)
.text:0000000000009088                 LDR             X1, [X20,#0xA8] ; src
.text:000000000000908C                 LSL             X2, X25, #3 ; n
.text:0000000000009090                 MOV             X23, X0
.text:0000000000009094                 BL              .memcpy
.text:0000000000009098                 LDR             X0, [X20,#0xA8] ; void *
.text:000000000000909C                 ADD             X8, X20, #0xB0
.text:00000000000090A0                 CMP             X0, X8
.text:00000000000090A4                 B.EQ            loc_90B0
.text:00000000000090A8                 CBZ             X0, loc_90B0
.text:00000000000090AC                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000090B0 loc_90B0                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+2FC↑j
.text:00000000000090B0                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+300↑j
.text:00000000000090B0                 LDR             W8, [X20,#0x104]
.text:00000000000090B4                 STR             X23, [X20,#0xA8]
.text:00000000000090B8                 STR             W24, [X20,#0x100]
.text:00000000000090BC loc_90BC                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+2B0↑j
.text:00000000000090BC                 STR             X22, [X23,W8,SXTW#3]
.text:00000000000090C0                 ADD             X23, X21, #4
.text:00000000000090C4 loc_90C4                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+250↑j
.text:00000000000090C4                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+590↓j
.text:00000000000090C4                 LDR             W8, [X20,#0x104]
.text:00000000000090C8                 LDR             W9, [X20,#0xA0]
.text:00000000000090CC                 ADD             W8, W8, #1
.text:00000000000090D0                 STR             W8, [X20,#0x104]
.text:00000000000090D4                 STR             W9, [X22,#0x30]
.text:00000000000090D8 loc_90D8                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+2BC↑j
.text:00000000000090D8                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+42C↓j ...
.text:00000000000090D8                 STR             X22, [X19]
.text:00000000000090DC                 MOV             X0, X23
.text:00000000000090E0                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000090E4                 LDP             X20, X19, [SP,#0x40+var_10]
.text:00000000000090E8                 LDP             X22, X21, [SP,#0x40+var_20]
.text:00000000000090EC                 LDP             X24, X23, [SP,#0x40+var_30]
.text:00000000000090F0                 LDP             X26, X25, [SP+0x40+var_40],#0x50
.text:00000000000090F4                 RET
.text:00000000000090F8 ; ---------------------------------------------------------------------------
.text:00000000000090F8 loc_90F8                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+D0↑j
.text:00000000000090F8                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+E8↑j
.text:00000000000090F8                 LDR             X8, [X20,#0x208]
.text:00000000000090FC                 ADD             X23, X20, #0x208
.text:0000000000009100                 MOV             X0, X23
.text:0000000000009104                 LDR             X8, [X8,#0x18]
.text:0000000000009108                 BLR             X8
.text:000000000000910C                 ADRP            X8, #_ZTVN8tinyxml27XMLTextE_ptr@PAGE
.text:0000000000009110                 MOVI            V0.2D, #0
.text:0000000000009114                 MOV             X22, X0
.text:0000000000009118                 LDR             X8, [X8,#_ZTVN8tinyxml27XMLTextE_ptr@PAGEOFF]
.text:000000000000911C                 STP             X20, XZR, [X0,#8]
.text:0000000000009120                 STR             WZR, [X0,#0x18]
.text:0000000000009124                 STP             XZR, XZR, [X0,#0x20]
.text:0000000000009128                 ADD             X8, X8, #0x10
.text:000000000000912C                 STR             WZR, [X0,#0x30]
.text:0000000000009130                 STUR            Q0, [X0,#0x48]
.text:0000000000009134                 STUR            Q0, [X0,#0x38]
.text:0000000000009138                 STR             X8, [X0]
.text:000000000000913C                 STRB            WZR, [X0,#0x68]
.text:0000000000009140                 STP             XZR, X23, [X0,#0x58]
.text:0000000000009144                 LDR             W8, [X20,#0x104]
.text:0000000000009148                 LDR             W9, [X20,#0x100]
.text:000000000000914C                 CMP             W9, W8
.text:0000000000009150                 B.LE            loc_915C
.text:0000000000009154                 LDR             X23, [X20,#0xA8]
.text:0000000000009158                 B               loc_91B0
.text:000000000000915C ; ---------------------------------------------------------------------------
.text:000000000000915C loc_915C                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+3A8↑j
.text:000000000000915C                 LSL             W9, W8, #1
.text:0000000000009160                 ADD             W24, W9, #2
.text:0000000000009164                 SXTW            X9, W24
.text:0000000000009168                 CMP             XZR, X9,LSR#61
.text:000000000000916C                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:0000000000009170                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:0000000000009174                 SXTW            X25, W8
.text:0000000000009178                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000917C                 LDR             X1, [X20,#0xA8] ; src
.text:0000000000009180                 LSL             X2, X25, #3 ; n
.text:0000000000009184                 MOV             X23, X0
.text:0000000000009188                 BL              .memcpy
.text:000000000000918C                 LDR             X0, [X20,#0xA8] ; void *
.text:0000000000009190                 ADD             X8, X20, #0xB0
.text:0000000000009194                 CMP             X0, X8
.text:0000000000009198                 B.EQ            loc_91A4
.text:000000000000919C                 CBZ             X0, loc_91A4
.text:00000000000091A0                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000091A4 loc_91A4                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+3F0↑j
.text:00000000000091A4                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+3F4↑j
.text:00000000000091A4                 LDR             W8, [X20,#0x104]
.text:00000000000091A8                 STR             X23, [X20,#0xA8]
.text:00000000000091AC                 STR             W24, [X20,#0x100]
.text:00000000000091B0 loc_91B0                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+3B0↑j
.text:00000000000091B0                 STR             X22, [X23,W8,SXTW#3]
.text:00000000000091B4                 MOV             W10, #1
.text:00000000000091B8                 LDR             W8, [X20,#0x104]
.text:00000000000091BC                 ADD             X23, X21, #9
.text:00000000000091C0                 LDR             W9, [X20,#0xA0]
.text:00000000000091C4                 ADD             W8, W8, #1
.text:00000000000091C8                 STR             W8, [X20,#0x104]
.text:00000000000091CC                 STR             W9, [X22,#0x30]
.text:00000000000091D0                 STRB            W10, [X22,#0x68]
.text:00000000000091D4                 B               loc_90D8
.text:00000000000091D8 ; ---------------------------------------------------------------------------
.text:00000000000091D8 loc_91D8                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+F8↑j
.text:00000000000091D8                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+110↑j
.text:00000000000091D8                 LDR             X8, [X20,#0x288]
.text:00000000000091DC                 ADD             X23, X20, #0x288
.text:00000000000091E0                 MOV             X0, X23
.text:00000000000091E4                 LDR             X8, [X8,#0x18]
.text:00000000000091E8                 BLR             X8
.text:00000000000091EC                 ADRP            X8, #_ZTVN8tinyxml210XMLUnknownE_ptr@PAGE
.text:00000000000091F0                 MOVI            V0.2D, #0
.text:00000000000091F4                 MOV             X22, X0
.text:00000000000091F8                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLUnknownE_ptr@PAGEOFF]
.text:00000000000091FC                 B               loc_8F60
.text:0000000000009200 ; ---------------------------------------------------------------------------
.text:0000000000009200 loc_9200                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+120↑j
.text:0000000000009200                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+12C↑j
.text:0000000000009200                 LDR             X8, [X20,#0x108]
.text:0000000000009204                 ADD             X23, X20, #0x108
.text:0000000000009208                 MOV             X0, X23
.text:000000000000920C                 LDR             X8, [X8,#0x18]
.text:0000000000009210                 BLR             X8
.text:0000000000009214                 ADRP            X8, #_ZTVN8tinyxml210XMLElementE_ptr@PAGE
.text:0000000000009218                 MOVI            V0.2D, #0
.text:000000000000921C                 MOV             X22, X0
.text:0000000000009220                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLElementE_ptr@PAGEOFF]
.text:0000000000009224                 STP             X20, XZR, [X0,#8]
.text:0000000000009228                 STR             WZR, [X0,#0x18]
.text:000000000000922C                 STP             XZR, XZR, [X0,#0x20]
.text:0000000000009230                 ADD             X8, X8, #0x10
.text:0000000000009234                 STR             WZR, [X0,#0x30]
.text:0000000000009238                 STUR            Q0, [X0,#0x48]
.text:000000000000923C                 STUR            Q0, [X0,#0x38]
.text:0000000000009240                 STR             X8, [X0]
.text:0000000000009244                 STR             WZR, [X0,#0x68]
.text:0000000000009248                 STR             XZR, [X0,#0x70]
.text:000000000000924C                 STP             XZR, X23, [X0,#0x58]
.text:0000000000009250                 LDR             W8, [X20,#0x104]
.text:0000000000009254                 LDR             W9, [X20,#0x100]
.text:0000000000009258                 CMP             W9, W8
.text:000000000000925C                 B.LE            loc_92DC
.text:0000000000009260                 LDR             X23, [X20,#0xA8]
.text:0000000000009264                 B               loc_9330
.text:0000000000009268 ; ---------------------------------------------------------------------------
.text:0000000000009268 loc_9268                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+188↑j
.text:0000000000009268                 LSL             W9, W8, #1
.text:000000000000926C                 ADD             W25, W9, #2
.text:0000000000009270                 SXTW            X9, W25
.text:0000000000009274                 CMP             XZR, X9,LSR#61
.text:0000000000009278                 SBFIZ           X10, X25, #3, #0x20 ; ' '
.text:000000000000927C                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:0000000000009280                 SXTW            X26, W8
.text:0000000000009284                 BL              ._Znam  ; operator new[](ulong)
.text:0000000000009288                 LDR             X1, [X20,#0xA8] ; src
.text:000000000000928C                 LSL             X2, X26, #3 ; n
.text:0000000000009290                 MOV             X21, X0
.text:0000000000009294                 BL              .memcpy
.text:0000000000009298                 LDR             X0, [X20,#0xA8] ; void *
.text:000000000000929C                 ADD             X8, X20, #0xB0
.text:00000000000092A0                 CMP             X0, X8
.text:00000000000092A4                 B.EQ            loc_92B0
.text:00000000000092A8                 CBZ             X0, loc_92B0
.text:00000000000092AC                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000092B0 loc_92B0                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+4FC↑j
.text:00000000000092B0                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+500↑j
.text:00000000000092B0                 LDR             W8, [X20,#0x104]
.text:00000000000092B4                 STR             X21, [X20,#0xA8]
.text:00000000000092B8                 STR             W25, [X20,#0x100]
.text:00000000000092BC loc_92BC                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+190↑j
.text:00000000000092BC                 STR             X22, [X21,W8,SXTW#3]
.text:00000000000092C0                 LDR             W8, [X20,#0x104]
.text:00000000000092C4                 LDR             W9, [X20,#0xA0]
.text:00000000000092C8                 ADD             W8, W8, #1
.text:00000000000092CC                 STR             W8, [X20,#0x104]
.text:00000000000092D0                 STR             W9, [X22,#0x30]
.text:00000000000092D4                 STR             W24, [X20,#0xA0]
.text:00000000000092D8                 B               loc_90D8
.text:00000000000092DC ; ---------------------------------------------------------------------------
.text:00000000000092DC loc_92DC                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+4B4↑j
.text:00000000000092DC                 LSL             W9, W8, #1
.text:00000000000092E0                 ADD             W24, W9, #2
.text:00000000000092E4                 SXTW            X9, W24
.text:00000000000092E8                 CMP             XZR, X9,LSR#61
.text:00000000000092EC                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:00000000000092F0                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:00000000000092F4                 SXTW            X25, W8
.text:00000000000092F8                 BL              ._Znam  ; operator new[](ulong)
.text:00000000000092FC                 LDR             X1, [X20,#0xA8] ; src
.text:0000000000009300                 LSL             X2, X25, #3 ; n
.text:0000000000009304                 MOV             X23, X0
.text:0000000000009308                 BL              .memcpy
.text:000000000000930C                 LDR             X0, [X20,#0xA8] ; void *
.text:0000000000009310                 ADD             X8, X20, #0xB0
.text:0000000000009314                 CMP             X0, X8
.text:0000000000009318                 B.EQ            loc_9324
.text:000000000000931C                 CBZ             X0, loc_9324
.text:0000000000009320                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000009324 loc_9324                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+570↑j
.text:0000000000009324                                         ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+574↑j
.text:0000000000009324                 LDR             W8, [X20,#0x104]
.text:0000000000009328                 STR             X23, [X20,#0xA8]
.text:000000000000932C                 STR             W24, [X20,#0x100]
.text:0000000000009330 loc_9330                                ; CODE XREF: tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)+4BC↑j
.text:0000000000009330                 STR             X22, [X23,W8,SXTW#3]
.text:0000000000009334                 ADD             X23, X21, #1
.text:0000000000009338                 B               loc_90C4
.text:0000000000009338 ; } // starts at 8DA8
.text:0000000000009338 ; End of function tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)
.text:0000000000009338 ; ---------------------------------------------------------------------------
.text:000000000000933C                 ALIGN 0x20
.text:0000000000009340 ; =============== S U B R O U T I N E =======================================
.text:0000000000009340 ; Attributes: bp-based frame
.text:0000000000009340 ; tinyxml2::XMLDocument::Accept(tinyxml2::XMLVisitor *)const
.text:0000000000009340                 EXPORT _ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE
.text:0000000000009340 _ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE
.text:0000000000009340                                         ; DATA XREF: LOAD:00000000000011A0↑o
.text:0000000000009340                                         ; .data.rel.ro:0000000000012400↓o
.text:0000000000009340 var_20          = -0x20
.text:0000000000009340 var_10          = -0x10
.text:0000000000009340 var_s0          =  0
.text:0000000000009340 ; __unwind {
.text:0000000000009340                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000009344                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009348                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000934C                 ADD             X29, SP, #0x20
.text:0000000000009350                 LDR             X8, [X1]
.text:0000000000009354                 MOV             X20, X0
.text:0000000000009358                 MOV             X19, X1
.text:000000000000935C                 MOV             X0, X1
.text:0000000000009360                 MOV             X1, X20
.text:0000000000009364                 LDR             X8, [X8,#0x10]
.text:0000000000009368                 BLR             X8
.text:000000000000936C                 TBZ             W0, #0, loc_9398
.text:0000000000009370                 LDR             X21, [X20,#0x38]
.text:0000000000009374                 CBZ             X21, loc_9398
.text:0000000000009378 loc_9378                                ; CODE XREF: tinyxml2::XMLDocument::Accept(tinyxml2::XMLVisitor *)+54↓j
.text:0000000000009378                 LDR             X8, [X21]
.text:000000000000937C                 MOV             X0, X21
.text:0000000000009380                 MOV             X1, X19
.text:0000000000009384                 LDR             X8, [X8,#0x70]
.text:0000000000009388                 BLR             X8
.text:000000000000938C                 TBZ             W0, #0, loc_9398
.text:0000000000009390                 LDR             X21, [X21,#0x50]
.text:0000000000009394                 CBNZ            X21, loc_9378
.text:0000000000009398 loc_9398                                ; CODE XREF: tinyxml2::XMLDocument::Accept(tinyxml2::XMLVisitor *)+2C↑j
.text:0000000000009398                                         ; tinyxml2::XMLDocument::Accept(tinyxml2::XMLVisitor *)+34↑j ...
.text:0000000000009398                 LDR             X8, [X19]
.text:000000000000939C                 MOV             X0, X19
.text:00000000000093A0                 MOV             X1, X20
.text:00000000000093A4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000093A8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000093AC                 LDR             X2, [X8,#0x18]
.text:00000000000093B0                 LDR             X21, [SP+0x20+var_20],#0x30
.text:00000000000093B4                 BR              X2
.text:00000000000093B4 ; } // starts at 9340
.text:00000000000093B4 ; End of function tinyxml2::XMLDocument::Accept(tinyxml2::XMLVisitor *)
.text:00000000000093B8 ; =============== S U B R O U T I N E =======================================
.text:00000000000093B8 ; tinyxml2::XMLNode::XMLNode(tinyxml2::XMLDocument *)
.text:00000000000093B8                 EXPORT _ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE
.text:00000000000093B8 _ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE
.text:00000000000093B8                                         ; DATA XREF: LOAD:0000000000001230↑o
.text:00000000000093B8 ; __unwind {
.text:00000000000093B8                 ADRP            X8, #_ZTVN8tinyxml27XMLNodeE_ptr@PAGE
.text:00000000000093BC                 MOVI            V0.2D, #0
.text:00000000000093C0                 LDR             X8, [X8,#_ZTVN8tinyxml27XMLNodeE_ptr@PAGEOFF]
.text:00000000000093C4                 STP             X1, XZR, [X0,#8]
.text:00000000000093C8                 STR             WZR, [X0,#0x18]
.text:00000000000093CC                 STP             XZR, XZR, [X0,#0x20]
.text:00000000000093D0                 ADD             X8, X8, #0x10
.text:00000000000093D4                 STR             WZR, [X0,#0x30]
.text:00000000000093D8                 STUR            Q0, [X0,#0x58]
.text:00000000000093DC                 STUR            Q0, [X0,#0x48]
.text:00000000000093E0                 STR             X8, [X0]
.text:00000000000093E4                 STUR            Q0, [X0,#0x38]
.text:00000000000093E8                 RET
.text:00000000000093E8 ; } // starts at 93B8
.text:00000000000093E8 ; End of function tinyxml2::XMLNode::XMLNode(tinyxml2::XMLDocument *)
.text:00000000000093E8 ; ---------------------------------------------------------------------------
.text:00000000000093EC                 ALIGN 0x10
.text:00000000000093F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000093F0 ; Attributes: bp-based frame
.text:00000000000093F0 ; __int64 __fastcall tinyxml2::XMLNode::DeleteChildren(tinyxml2::XMLNode *__hidden this)
.text:00000000000093F0                 EXPORT _ZN8tinyxml27XMLNode14DeleteChildrenEv
.text:00000000000093F0 _ZN8tinyxml27XMLNode14DeleteChildrenEv  ; DATA XREF: LOAD:00000000000016F8↑o
.text:00000000000093F0 var_10          = -0x10
.text:00000000000093F0 var_s0          =  0
.text:00000000000093F0 ; __unwind {
.text:00000000000093F0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000093F4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000093F8                 ADD             X29, SP, #0x10
.text:00000000000093FC                 MOV             X20, X0
.text:0000000000009400                 LDR             X1, [X20,#0x38]!
.text:0000000000009404                 CBZ             X1, loc_941C
.text:0000000000009408                 MOV             X19, X0
.text:000000000000940C loc_940C                                ; CODE XREF: tinyxml2::XMLNode::DeleteChildren(void)+28↓j
.text:000000000000940C                 MOV             X0, X19
.text:0000000000009410                 BL              ._ZN8tinyxml27XMLNode11DeleteChildEPS0_ ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:0000000000009414                 LDR             X1, [X19,#0x38]
.text:0000000000009418                 CBNZ            X1, loc_940C
.text:000000000000941C loc_941C                                ; CODE XREF: tinyxml2::XMLNode::DeleteChildren(void)+14↑j
.text:000000000000941C                 STP             XZR, XZR, [X20]
.text:0000000000009420                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009424                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000009428                 RET
.text:0000000000009428 ; } // starts at 93F0
.text:0000000000009428 ; End of function tinyxml2::XMLNode::DeleteChildren(void)
.text:0000000000009428 ; ---------------------------------------------------------------------------
.text:000000000000942C                 ALIGN 0x10
.text:0000000000009430 ; =============== S U B R O U T I N E =======================================
.text:0000000000009430 ; tinyxml2::XMLNode::Unlink(tinyxml2::XMLNode*)
.text:0000000000009430                 EXPORT _ZN8tinyxml27XMLNode6UnlinkEPS0_
.text:0000000000009430 _ZN8tinyxml27XMLNode6UnlinkEPS0_        ; DATA XREF: LOAD:0000000000000FF0↑o
.text:0000000000009430 ; __unwind {
.text:0000000000009430                 LDR             X8, [X0,#0x38]
.text:0000000000009434                 CMP             X8, X1
.text:0000000000009438                 B.NE            loc_9444
.text:000000000000943C                 LDR             X8, [X1,#0x50]
.text:0000000000009440                 STR             X8, [X0,#0x38]
.text:0000000000009444 loc_9444                                ; CODE XREF: tinyxml2::XMLNode::Unlink(tinyxml2::XMLNode*)+8↑j
.text:0000000000009444                 LDR             X8, [X0,#0x40]
.text:0000000000009448                 CMP             X8, X1
.text:000000000000944C                 B.NE            loc_9458
.text:0000000000009450                 LDR             X8, [X1,#0x48]
.text:0000000000009454                 STR             X8, [X0,#0x40]
.text:0000000000009458 loc_9458                                ; CODE XREF: tinyxml2::XMLNode::Unlink(tinyxml2::XMLNode*)+1C↑j
.text:0000000000009458                 MOV             X8, X1
.text:000000000000945C                 LDR             X9, [X8,#0x48]!
.text:0000000000009460                 CBZ             X9, loc_946C
.text:0000000000009464                 LDR             X10, [X1,#0x50]
.text:0000000000009468                 STR             X10, [X9,#0x50]
.text:000000000000946C loc_946C                                ; CODE XREF: tinyxml2::XMLNode::Unlink(tinyxml2::XMLNode*)+30↑j
.text:000000000000946C                 LDR             X9, [X1,#0x50]
.text:0000000000009470                 CBZ             X9, loc_947C
.text:0000000000009474                 LDR             X10, [X8]
.text:0000000000009478                 STR             X10, [X9,#0x48]
.text:000000000000947C loc_947C                                ; CODE XREF: tinyxml2::XMLNode::Unlink(tinyxml2::XMLNode*)+40↑j
.text:000000000000947C                 STR             XZR, [X1,#0x10]
.text:0000000000009480                 STP             XZR, XZR, [X8]
.text:0000000000009484                 RET
.text:0000000000009484 ; } // starts at 9430
.text:0000000000009484 ; End of function tinyxml2::XMLNode::Unlink(tinyxml2::XMLNode*)
.text:0000000000009488 ; ---------------------------------------------------------------------------
.text:0000000000009488 ; tinyxml2::XMLNode::~XMLNode()
.text:0000000000009488                 EXPORT _ZN8tinyxml27XMLNodeD0Ev
.text:0000000000009488 _ZN8tinyxml27XMLNodeD0Ev                ; DATA XREF: LOAD:0000000000000E70↑o
.text:0000000000009488                                         ; .data.rel.ro:00000000000120F0↓o
.text:0000000000009488 ; __unwind {
.text:0000000000009488                 BRK             #1
.text:0000000000009488 ; } // starts at 9488
.text:0000000000009488 ; ---------------------------------------------------------------------------
.text:000000000000948C                 DCD 0
.text:0000000000009490 ; =============== S U B R O U T I N E =======================================
.text:0000000000009490 ; Attributes: bp-based frame
.text:0000000000009490 ; __int64 __fastcall tinyxml2::XMLNode::Value(tinyxml2::XMLNode *__hidden this)
.text:0000000000009490                 EXPORT _ZNK8tinyxml27XMLNode5ValueEv
.text:0000000000009490 _ZNK8tinyxml27XMLNode5ValueEv           ; DATA XREF: LOAD:0000000000001668↑o
.text:0000000000009490 var_10          = -0x10
.text:0000000000009490 var_s0          =  0
.text:0000000000009490 ; __unwind {
.text:0000000000009490                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000009494                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009498                 ADD             X29, SP, #0x10
.text:000000000000949C                 LDR             X8, [X0]
.text:00000000000094A0                 MOV             X19, X0
.text:00000000000094A4                 LDR             X8, [X8,#0x48]
.text:00000000000094A8                 BLR             X8
.text:00000000000094AC                 CBZ             X0, loc_94C0
.text:00000000000094B0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000094B4                 MOV             X0, XZR
.text:00000000000094B8                 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000094BC                 RET
.text:00000000000094C0 ; ---------------------------------------------------------------------------
.text:00000000000094C0 loc_94C0                                ; CODE XREF: tinyxml2::XMLNode::Value(void)+1C↑j
.text:00000000000094C0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000094C4                 ADD             X0, X19, #0x18 ; this
.text:00000000000094C8                 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000094CC                 B               ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:00000000000094CC ; } // starts at 9490
.text:00000000000094CC ; End of function tinyxml2::XMLNode::Value(void)
.text:00000000000094D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094D0 ; Attributes: bp-based frame
.text:00000000000094D0 ; _QWORD __fastcall tinyxml2::XMLNode::SetValue(tinyxml2::XMLNode *__hidden this, const char *, bool)
.text:00000000000094D0                 EXPORT _ZN8tinyxml27XMLNode8SetValueEPKcb
.text:00000000000094D0 _ZN8tinyxml27XMLNode8SetValueEPKcb      ; DATA XREF: LOAD:0000000000000A20↑o
.text:00000000000094D0 var_10          = -0x10
.text:00000000000094D0 var_s0          =  0
.text:00000000000094D0 ; __unwind {
.text:00000000000094D0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000094D4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000094D8                 ADD             X29, SP, #0x10
.text:00000000000094DC                 MOV             X20, X0
.text:00000000000094E0                 MOV             X19, X1
.text:00000000000094E4                 ADD             X0, X0, #0x18 ; this
.text:00000000000094E8                 TBZ             W2, #0, loc_9514
.text:00000000000094EC                 LDRB            W8, [X0,#1]
.text:00000000000094F0                 TBZ             W8, #1, loc_9500
.text:00000000000094F4                 LDR             X0, [X20,#0x20] ; void *
.text:00000000000094F8                 CBZ             X0, loc_9500
.text:00000000000094FC                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000009500 loc_9500                                ; CODE XREF: tinyxml2::XMLNode::SetValue(char const*,bool)+20↑j
.text:0000000000009500                                         ; tinyxml2::XMLNode::SetValue(char const*,bool)+28↑j
.text:0000000000009500                 STR             WZR, [X20,#0x18]
.text:0000000000009504                 STP             X19, XZR, [X20,#0x20]
.text:0000000000009508                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000950C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000009510                 RET
.text:0000000000009514 ; ---------------------------------------------------------------------------
.text:0000000000009514 loc_9514                                ; CODE XREF: tinyxml2::XMLNode::SetValue(char const*,bool)+18↑j
.text:0000000000009514                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009518                 MOV             X1, X19 ; char *
.text:000000000000951C                 MOV             W2, WZR ; int
.text:0000000000009520                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000009524                 B               ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:0000000000009524 ; } // starts at 94D0
.text:0000000000009524 ; End of function tinyxml2::XMLNode::SetValue(char const*,bool)
.text:0000000000009528 ; =============== S U B R O U T I N E =======================================
.text:0000000000009528 ; Attributes: bp-based frame
.text:0000000000009528 ; __int64 __fastcall tinyxml2::XMLNode::DeepClone(tinyxml2::XMLNode *__hidden this, tinyxml2::XMLDocument *)
.text:0000000000009528                 EXPORT _ZNK8tinyxml27XMLNode9DeepCloneEPNS_11XMLDocumentE
.text:0000000000009528 _ZNK8tinyxml27XMLNode9DeepCloneEPNS_11XMLDocumentE
.text:0000000000009528                                         ; CODE XREF: tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)+3C↓p
.text:0000000000009528                                         ; tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)+C↓j
.text:0000000000009528                                         ; DATA XREF: ...
.text:0000000000009528 var_20          = -0x20
.text:0000000000009528 var_10          = -0x10
.text:0000000000009528 var_s0          =  0
.text:0000000000009528 ; __unwind {
.text:0000000000009528                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000952C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009530                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009534                 ADD             X29, SP, #0x20
.text:0000000000009538                 LDR             X8, [X0]
.text:000000000000953C                 MOV             X21, X0
.text:0000000000009540                 MOV             X19, X1
.text:0000000000009544                 LDR             X8, [X8,#0x60]
.text:0000000000009548                 BLR             X8
.text:000000000000954C                 MOV             X20, X0
.text:0000000000009550                 CBZ             X0, loc_957C
.text:0000000000009554                 LDR             X21, [X21,#0x38]
.text:0000000000009558                 CBZ             X21, loc_957C
.text:000000000000955C loc_955C                                ; CODE XREF: tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)+50↓j
.text:000000000000955C                 MOV             X0, X21 ; this
.text:0000000000009560                 MOV             X1, X19 ; tinyxml2::XMLDocument *
.text:0000000000009564                 BL              _ZNK8tinyxml27XMLNode9DeepCloneEPNS_11XMLDocumentE ; tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)
.text:0000000000009568                 MOV             X1, X0
.text:000000000000956C                 MOV             X0, X20
.text:0000000000009570                 BL              ._ZN8tinyxml27XMLNode14InsertEndChildEPS0_ ; tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)
.text:0000000000009574                 LDR             X21, [X21,#0x50]
.text:0000000000009578                 CBNZ            X21, loc_955C
.text:000000000000957C loc_957C                                ; CODE XREF: tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)+28↑j
.text:000000000000957C                                         ; tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)+30↑j
.text:000000000000957C                 MOV             X0, X20
.text:0000000000009580                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009584                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009588                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000958C                 RET
.text:000000000000958C ; } // starts at 9528
.text:000000000000958C ; End of function tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)
.text:0000000000009590 ; =============== S U B R O U T I N E =======================================
.text:0000000000009590 ; Attributes: bp-based frame
.text:0000000000009590 ; tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)
.text:0000000000009590                 EXPORT _ZN8tinyxml27XMLNode14InsertEndChildEPS0_
.text:0000000000009590 _ZN8tinyxml27XMLNode14InsertEndChildEPS0_
.text:0000000000009590                                         ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+C↓j
.text:0000000000009590                                         ; DATA XREF: LOAD:0000000000000A08↑o ...
.text:0000000000009590 var_10          = -0x10
.text:0000000000009590 var_s0          =  0
.text:0000000000009590 ; __unwind {
.text:0000000000009590                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:0000000000009594                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009598                 ADD             X29, SP, #0x10
.text:000000000000959C                 LDR             X8, [X1,#8]
.text:00000000000095A0                 LDR             X9, [X0,#8]
.text:00000000000095A4                 CMP             X8, X9
.text:00000000000095A8                 B.EQ            loc_95B4
.text:00000000000095AC                 MOV             X19, XZR
.text:00000000000095B0                 B               loc_96AC
.text:00000000000095B4 ; ---------------------------------------------------------------------------
.text:00000000000095B4 loc_95B4                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+18↑j
.text:00000000000095B4                 LDR             X9, [X1,#0x10]
.text:00000000000095B8                 MOV             X19, X1
.text:00000000000095BC                 MOV             X20, X0
.text:00000000000095C0                 CBZ             X9, loc_9634
.text:00000000000095C4                 LDR             X8, [X9,#0x38]
.text:00000000000095C8                 CMP             X8, X19
.text:00000000000095CC                 B.NE            loc_95D8
.text:00000000000095D0                 LDR             X8, [X19,#0x50]
.text:00000000000095D4                 STR             X8, [X9,#0x38]
.text:00000000000095D8 loc_95D8                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+3C↑j
.text:00000000000095D8                 LDR             X8, [X9,#0x40]
.text:00000000000095DC                 CMP             X8, X19
.text:00000000000095E0                 B.NE            loc_95EC
.text:00000000000095E4                 LDR             X8, [X19,#0x48]
.text:00000000000095E8                 STR             X8, [X9,#0x40]
.text:00000000000095EC loc_95EC                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+50↑j
.text:00000000000095EC                 MOV             X8, X19
.text:00000000000095F0                 LDR             X9, [X8,#0x48]!
.text:00000000000095F4                 CBZ             X9, loc_9600
.text:00000000000095F8                 LDR             X10, [X19,#0x50]
.text:00000000000095FC                 STR             X10, [X9,#0x50]
.text:0000000000009600 loc_9600                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+64↑j
.text:0000000000009600                 LDR             X9, [X19,#0x50]
.text:0000000000009604                 CBZ             X9, loc_9610
.text:0000000000009608                 LDR             X10, [X8]
.text:000000000000960C                 STR             X10, [X9,#0x48]
.text:0000000000009610 loc_9610                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+74↑j
.text:0000000000009610                 STR             XZR, [X19,#0x10]
.text:0000000000009614                 STP             XZR, XZR, [X8]
.text:0000000000009618                 LDR             X8, [X20,#0x40]
.text:000000000000961C                 CBZ             X8, loc_969C
.text:0000000000009620 loc_9620                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+108↓j
.text:0000000000009620                 STR             X19, [X8,#0x50]
.text:0000000000009624                 LDR             X8, [X20,#0x40]
.text:0000000000009628                 STR             X8, [X19,#0x48]
.text:000000000000962C                 STR             X19, [X20,#0x40]
.text:0000000000009630                 B               loc_96A4
.text:0000000000009634 ; ---------------------------------------------------------------------------
.text:0000000000009634 loc_9634                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+30↑j
.text:0000000000009634                 LDRSW           X9, [X8,#0x104]
.text:0000000000009638                 CMP             W9, #1
.text:000000000000963C                 B.LT            loc_9684
.text:0000000000009640                 LDR             X10, [X8,#0xA8]
.text:0000000000009644                 MOV             X11, XZR
.text:0000000000009648                 MOV             X12, X10
.text:000000000000964C loc_964C                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+D4↓j
.text:000000000000964C                 LDR             X13, [X12]
.text:0000000000009650                 CMP             X13, X19
.text:0000000000009654                 B.EQ            loc_966C
.text:0000000000009658                 ADD             X11, X11, #1
.text:000000000000965C                 ADD             X12, X12, #8
.text:0000000000009660                 CMP             X11, X9
.text:0000000000009664                 B.LT            loc_964C
.text:0000000000009668                 B               loc_9684
.text:000000000000966C ; ---------------------------------------------------------------------------
.text:000000000000966C loc_966C                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+C4↑j
.text:000000000000966C                 SUB             W9, W9, #1
.text:0000000000009670                 LDR             X9, [X10,W9,SXTW#3]
.text:0000000000009674                 STR             X9, [X12]
.text:0000000000009678                 LDR             W9, [X8,#0x104]
.text:000000000000967C                 SUB             W9, W9, #1
.text:0000000000009680                 STR             W9, [X8,#0x104]
.text:0000000000009684 loc_9684                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+AC↑j
.text:0000000000009684                                         ; tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+D8↑j
.text:0000000000009684                 LDR             X0, [X19,#0x60]
.text:0000000000009688                 LDR             X8, [X0]
.text:000000000000968C                 LDR             X8, [X8,#0x28]
.text:0000000000009690                 BLR             X8
.text:0000000000009694                 LDR             X8, [X20,#0x40]
.text:0000000000009698                 CBNZ            X8, loc_9620
.text:000000000000969C loc_969C                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+8C↑j
.text:000000000000969C                 STP             X19, X19, [X20,#0x38]
.text:00000000000096A0                 STR             XZR, [X19,#0x48]
.text:00000000000096A4 loc_96A4                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+A0↑j
.text:00000000000096A4                 STR             XZR, [X19,#0x50]
.text:00000000000096A8                 STR             X20, [X19,#0x10]
.text:00000000000096AC loc_96AC                                ; CODE XREF: tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)+20↑j
.text:00000000000096AC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000096B0                 MOV             X0, X19
.text:00000000000096B4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:00000000000096B8                 RET
.text:00000000000096B8 ; } // starts at 9590
.text:00000000000096B8 ; End of function tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)
.text:00000000000096B8 ; ---------------------------------------------------------------------------
.text:00000000000096BC                 ALIGN 0x20
.text:00000000000096C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096C0 ; Attributes: bp-based frame
.text:00000000000096C0 ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:00000000000096C0                 EXPORT _ZN8tinyxml27XMLNode11DeleteChildEPS0_
.text:00000000000096C0 _ZN8tinyxml27XMLNode11DeleteChildEPS0_  ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+C↓j
.text:00000000000096C0                                         ; DATA XREF: LOAD:00000000000009F0↑o ...
.text:00000000000096C0 var_10          = -0x10
.text:00000000000096C0 var_s0          =  0
.text:00000000000096C0 ; __unwind {
.text:00000000000096C0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000096C4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000096C8                 ADD             X29, SP, #0x10
.text:00000000000096CC                 LDR             X8, [X0,#0x38]
.text:00000000000096D0                 MOV             X19, X1
.text:00000000000096D4                 CMP             X8, X1
.text:00000000000096D8                 B.NE            loc_96E4
.text:00000000000096DC                 LDR             X8, [X19,#0x50]
.text:00000000000096E0                 STR             X8, [X0,#0x38]
.text:00000000000096E4 loc_96E4                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+18↑j
.text:00000000000096E4                 LDR             X8, [X0,#0x40]
.text:00000000000096E8                 CMP             X8, X19
.text:00000000000096EC                 B.NE            loc_96F8
.text:00000000000096F0                 LDR             X8, [X19,#0x48]
.text:00000000000096F4                 STR             X8, [X0,#0x40]
.text:00000000000096F8 loc_96F8                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+2C↑j
.text:00000000000096F8                 MOV             X8, X19
.text:00000000000096FC                 LDR             X9, [X8,#0x48]!
.text:0000000000009700                 CBZ             X9, loc_970C
.text:0000000000009704                 LDR             X10, [X19,#0x50]
.text:0000000000009708                 STR             X10, [X9,#0x50]
.text:000000000000970C loc_970C                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+40↑j
.text:000000000000970C                 LDR             X9, [X19,#0x50]
.text:0000000000009710                 CBZ             X9, loc_971C
.text:0000000000009714                 LDR             X10, [X8]
.text:0000000000009718                 STR             X10, [X9,#0x48]
.text:000000000000971C loc_971C                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+50↑j
.text:000000000000971C                 LDR             X9, [X19]
.text:0000000000009720                 MOV             X0, X19
.text:0000000000009724                 STR             XZR, [X19,#0x10]
.text:0000000000009728                 STP             XZR, XZR, [X8]
.text:000000000000972C                 LDR             X8, [X9,#0x18]
.text:0000000000009730                 BLR             X8
.text:0000000000009734                 CBZ             X0, loc_9768
.text:0000000000009738 loc_9738                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+B4↓j
.text:0000000000009738                                         ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+E0↓j ...
.text:0000000000009738                 LDR             X8, [X19]
.text:000000000000973C                 MOV             X0, X19
.text:0000000000009740                 LDR             X20, [X19,#0x60]
.text:0000000000009744                 LDR             X8, [X8,#0x78]
.text:0000000000009748                 BLR             X8
.text:000000000000974C                 LDR             X8, [X20]
.text:0000000000009750                 MOV             X0, X20
.text:0000000000009754                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009758                 MOV             X1, X19
.text:000000000000975C                 LDR             X2, [X8,#0x20]
.text:0000000000009760                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000009764                 BR              X2
.text:0000000000009768 ; ---------------------------------------------------------------------------
.text:0000000000009768 loc_9768                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+74↑j
.text:0000000000009768                 LDR             X8, [X19,#8]
.text:000000000000976C                 LDRSW           X9, [X8,#0x104]
.text:0000000000009770                 CMP             W9, #1
.text:0000000000009774                 B.LT            loc_9738
.text:0000000000009778                 LDR             X10, [X8,#0xA8]
.text:000000000000977C                 MOV             X11, XZR
.text:0000000000009780                 MOV             X12, X10
.text:0000000000009784 loc_9784                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+DC↓j
.text:0000000000009784                 LDR             X13, [X12]
.text:0000000000009788                 CMP             X13, X19
.text:000000000000978C                 B.EQ            loc_97A4
.text:0000000000009790                 ADD             X11, X11, #1
.text:0000000000009794                 ADD             X12, X12, #8
.text:0000000000009798                 CMP             X11, X9
.text:000000000000979C                 B.LT            loc_9784
.text:00000000000097A0                 B               loc_9738
.text:00000000000097A4 ; ---------------------------------------------------------------------------
.text:00000000000097A4 loc_97A4                                ; CODE XREF: tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)+CC↑j
.text:00000000000097A4                 SUB             W9, W9, #1
.text:00000000000097A8                 LDR             X9, [X10,W9,SXTW#3]
.text:00000000000097AC                 STR             X9, [X12]
.text:00000000000097B0                 LDR             W9, [X8,#0x104]
.text:00000000000097B4                 SUB             W9, W9, #1
.text:00000000000097B8                 STR             W9, [X8,#0x104]
.text:00000000000097BC                 B               loc_9738
.text:00000000000097BC ; } // starts at 96C0
.text:00000000000097BC ; End of function tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:00000000000097C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000097C0 ; Attributes: bp-based frame
.text:00000000000097C0 ; tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)
.text:00000000000097C0                 EXPORT _ZN8tinyxml27XMLNode10DeleteNodeEPS0_
.text:00000000000097C0 _ZN8tinyxml27XMLNode10DeleteNodeEPS0_   ; DATA XREF: LOAD:0000000000000F78↑o
.text:00000000000097C0 var_10          = -0x10
.text:00000000000097C0 var_s0          =  0
.text:00000000000097C0 ; __unwind {
.text:00000000000097C0                 CBZ             X0, locret_9814
.text:00000000000097C4                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000097C8                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000097CC                 ADD             X29, SP, #0x10
.text:00000000000097D0                 LDR             X8, [X0]
.text:00000000000097D4                 MOV             X19, X0
.text:00000000000097D8                 LDR             X8, [X8,#0x18]
.text:00000000000097DC                 BLR             X8
.text:00000000000097E0                 CBZ             X0, loc_9818
.text:00000000000097E4 loc_97E4                                ; CODE XREF: tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)+64↓j
.text:00000000000097E4                                         ; tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)+90↓j ...
.text:00000000000097E4                 LDR             X8, [X19]
.text:00000000000097E8                 MOV             X0, X19
.text:00000000000097EC                 LDR             X20, [X19,#0x60]
.text:00000000000097F0                 LDR             X8, [X8,#0x78]
.text:00000000000097F4                 BLR             X8
.text:00000000000097F8                 LDR             X8, [X20]
.text:00000000000097FC                 MOV             X0, X20
.text:0000000000009800                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009804                 MOV             X1, X19
.text:0000000000009808                 LDR             X2, [X8,#0x20]
.text:000000000000980C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000009810                 BR              X2
.text:0000000000009814 ; ---------------------------------------------------------------------------
.text:0000000000009814 locret_9814                             ; CODE XREF: tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)↑j
.text:0000000000009814                 RET
.text:0000000000009818 ; ---------------------------------------------------------------------------
.text:0000000000009818 loc_9818                                ; CODE XREF: tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)+20↑j
.text:0000000000009818                 LDR             X8, [X19,#8]
.text:000000000000981C                 LDRSW           X9, [X8,#0x104]
.text:0000000000009820                 CMP             W9, #1
.text:0000000000009824                 B.LT            loc_97E4
.text:0000000000009828                 LDR             X10, [X8,#0xA8]
.text:000000000000982C                 MOV             X11, XZR
.text:0000000000009830                 MOV             X12, X10
.text:0000000000009834 loc_9834                                ; CODE XREF: tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)+8C↓j
.text:0000000000009834                 LDR             X13, [X12]
.text:0000000000009838                 CMP             X13, X19
.text:000000000000983C                 B.EQ            loc_9854
.text:0000000000009840                 ADD             X11, X11, #1
.text:0000000000009844                 ADD             X12, X12, #8
.text:0000000000009848                 CMP             X11, X9
.text:000000000000984C                 B.LT            loc_9834
.text:0000000000009850                 B               loc_97E4
.text:0000000000009854 ; ---------------------------------------------------------------------------
.text:0000000000009854 loc_9854                                ; CODE XREF: tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)+7C↑j
.text:0000000000009854                 SUB             W9, W9, #1
.text:0000000000009858                 LDR             X9, [X10,W9,SXTW#3]
.text:000000000000985C                 STR             X9, [X12]
.text:0000000000009860                 LDR             W9, [X8,#0x104]
.text:0000000000009864                 SUB             W9, W9, #1
.text:0000000000009868                 STR             W9, [X8,#0x104]
.text:000000000000986C                 B               loc_97E4
.text:000000000000986C ; } // starts at 97C0
.text:000000000000986C ; End of function tinyxml2::XMLNode::DeleteNode(tinyxml2::XMLNode*)
.text:0000000000009870 ; =============== S U B R O U T I N E =======================================
.text:0000000000009870 ; tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)const
.text:0000000000009870                 EXPORT _ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_
.text:0000000000009870 _ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_
.text:0000000000009870                                         ; DATA XREF: LOAD:0000000000000708↑o
.text:0000000000009870 ; __unwind {
.text:0000000000009870                 LDR             X8, [X1,#0x10]
.text:0000000000009874                 CBZ             X8, loc_98D0
.text:0000000000009878                 LDR             X9, [X8,#0x38]
.text:000000000000987C                 CMP             X9, X1
.text:0000000000009880                 B.NE            loc_988C
.text:0000000000009884                 LDR             X9, [X1,#0x50]
.text:0000000000009888                 STR             X9, [X8,#0x38]
.text:000000000000988C loc_988C                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+10↑j
.text:000000000000988C                 LDR             X9, [X8,#0x40]
.text:0000000000009890                 CMP             X9, X1
.text:0000000000009894                 B.NE            loc_98A0
.text:0000000000009898                 LDR             X9, [X1,#0x48]
.text:000000000000989C                 STR             X9, [X8,#0x40]
.text:00000000000098A0 loc_98A0                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+24↑j
.text:00000000000098A0                 MOV             X8, X1
.text:00000000000098A4                 LDR             X9, [X8,#0x48]!
.text:00000000000098A8                 CBZ             X9, loc_98B4
.text:00000000000098AC                 LDR             X10, [X1,#0x50]
.text:00000000000098B0                 STR             X10, [X9,#0x50]
.text:00000000000098B4 loc_98B4                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+38↑j
.text:00000000000098B4                 LDR             X9, [X1,#0x50]
.text:00000000000098B8                 CBZ             X9, loc_98C4
.text:00000000000098BC                 LDR             X10, [X8]
.text:00000000000098C0                 STR             X10, [X9,#0x48]
.text:00000000000098C4 loc_98C4                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+48↑j
.text:00000000000098C4                 STR             XZR, [X1,#0x10]
.text:00000000000098C8                 STP             XZR, XZR, [X8]
.text:00000000000098CC                 RET
.text:00000000000098D0 ; ---------------------------------------------------------------------------
.text:00000000000098D0 loc_98D0                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+4↑j
.text:00000000000098D0                 LDR             X8, [X1,#8]
.text:00000000000098D4                 LDRSW           X9, [X8,#0x104]
.text:00000000000098D8                 CMP             W9, #1
.text:00000000000098DC                 B.LT            loc_9924
.text:00000000000098E0                 LDR             X10, [X8,#0xA8]
.text:00000000000098E4                 MOV             X11, XZR
.text:00000000000098E8                 MOV             X12, X10
.text:00000000000098EC loc_98EC                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+94↓j
.text:00000000000098EC                 LDR             X13, [X12]
.text:00000000000098F0                 CMP             X13, X1
.text:00000000000098F4                 B.EQ            loc_990C
.text:00000000000098F8                 ADD             X11, X11, #1
.text:00000000000098FC                 ADD             X12, X12, #8
.text:0000000000009900                 CMP             X11, X9
.text:0000000000009904                 B.LT            loc_98EC
.text:0000000000009908                 B               loc_9924
.text:000000000000990C ; ---------------------------------------------------------------------------
.text:000000000000990C loc_990C                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+84↑j
.text:000000000000990C                 SUB             W9, W9, #1
.text:0000000000009910                 LDR             X9, [X10,W9,SXTW#3]
.text:0000000000009914                 STR             X9, [X12]
.text:0000000000009918                 LDR             W9, [X8,#0x104]
.text:000000000000991C                 SUB             W9, W9, #1
.text:0000000000009920                 STR             W9, [X8,#0x104]
.text:0000000000009924 loc_9924                                ; CODE XREF: tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+6C↑j
.text:0000000000009924                                         ; tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)+98↑j
.text:0000000000009924                 LDR             X0, [X1,#0x60]
.text:0000000000009928                 LDR             X8, [X0]
.text:000000000000992C                 LDR             X1, [X8,#0x28]
.text:0000000000009930                 BR              X1
.text:0000000000009930 ; } // starts at 9870
.text:0000000000009930 ; End of function tinyxml2::XMLNode::InsertChildPreamble(tinyxml2::XMLNode*)
.text:0000000000009930 ; ---------------------------------------------------------------------------
.text:0000000000009934                 ALIGN 8
.text:0000000000009938 ; =============== S U B R O U T I N E =======================================
.text:0000000000009938 ; Attributes: bp-based frame
.text:0000000000009938 ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:0000000000009938                 EXPORT _ZN8tinyxml27XMLNode16InsertFirstChildEPS0_
.text:0000000000009938 _ZN8tinyxml27XMLNode16InsertFirstChildEPS0_
.text:0000000000009938                                         ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+C↓j
.text:0000000000009938                                         ; DATA XREF: LOAD:0000000000000990↑o ...
.text:0000000000009938 var_10          = -0x10
.text:0000000000009938 var_s0          =  0
.text:0000000000009938 ; __unwind {
.text:0000000000009938                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000993C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009940                 ADD             X29, SP, #0x10
.text:0000000000009944                 LDR             X8, [X1,#8]
.text:0000000000009948                 LDR             X9, [X0,#8]
.text:000000000000994C                 CMP             X8, X9
.text:0000000000009950                 B.EQ            loc_995C
.text:0000000000009954                 MOV             X19, XZR
.text:0000000000009958                 B               loc_9A54
.text:000000000000995C ; ---------------------------------------------------------------------------
.text:000000000000995C loc_995C                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+18↑j
.text:000000000000995C                 LDR             X9, [X1,#0x10]
.text:0000000000009960                 MOV             X19, X1
.text:0000000000009964                 MOV             X20, X0
.text:0000000000009968                 CBZ             X9, loc_99DC
.text:000000000000996C                 LDR             X8, [X9,#0x38]
.text:0000000000009970                 CMP             X8, X19
.text:0000000000009974                 B.NE            loc_9980
.text:0000000000009978                 LDR             X8, [X19,#0x50]
.text:000000000000997C                 STR             X8, [X9,#0x38]
.text:0000000000009980 loc_9980                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+3C↑j
.text:0000000000009980                 LDR             X8, [X9,#0x40]
.text:0000000000009984                 CMP             X8, X19
.text:0000000000009988                 B.NE            loc_9994
.text:000000000000998C                 LDR             X8, [X19,#0x48]
.text:0000000000009990                 STR             X8, [X9,#0x40]
.text:0000000000009994 loc_9994                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+50↑j
.text:0000000000009994                 MOV             X8, X19
.text:0000000000009998                 LDR             X9, [X8,#0x48]!
.text:000000000000999C                 CBZ             X9, loc_99A8
.text:00000000000099A0                 LDR             X10, [X19,#0x50]
.text:00000000000099A4                 STR             X10, [X9,#0x50]
.text:00000000000099A8 loc_99A8                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+64↑j
.text:00000000000099A8                 LDR             X9, [X19,#0x50]
.text:00000000000099AC                 CBZ             X9, loc_99B8
.text:00000000000099B0                 LDR             X10, [X8]
.text:00000000000099B4                 STR             X10, [X9,#0x48]
.text:00000000000099B8 loc_99B8                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+74↑j
.text:00000000000099B8                 STR             XZR, [X19,#0x10]
.text:00000000000099BC                 STP             XZR, XZR, [X8]
.text:00000000000099C0                 LDR             X8, [X20,#0x38]
.text:00000000000099C4                 CBZ             X8, loc_9A44
.text:00000000000099C8 loc_99C8                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+108↓j
.text:00000000000099C8                 STR             X19, [X8,#0x48]
.text:00000000000099CC                 LDR             X8, [X20,#0x38]
.text:00000000000099D0                 STR             X8, [X19,#0x50]
.text:00000000000099D4                 STR             X19, [X20,#0x38]
.text:00000000000099D8                 B               loc_9A4C
.text:00000000000099DC ; ---------------------------------------------------------------------------
.text:00000000000099DC loc_99DC                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+30↑j
.text:00000000000099DC                 LDRSW           X9, [X8,#0x104]
.text:00000000000099E0                 CMP             W9, #1
.text:00000000000099E4                 B.LT            loc_9A2C
.text:00000000000099E8                 LDR             X10, [X8,#0xA8]
.text:00000000000099EC                 MOV             X11, XZR
.text:00000000000099F0                 MOV             X12, X10
.text:00000000000099F4 loc_99F4                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+D4↓j
.text:00000000000099F4                 LDR             X13, [X12]
.text:00000000000099F8                 CMP             X13, X19
.text:00000000000099FC                 B.EQ            loc_9A14
.text:0000000000009A00                 ADD             X11, X11, #1
.text:0000000000009A04                 ADD             X12, X12, #8
.text:0000000000009A08                 CMP             X11, X9
.text:0000000000009A0C                 B.LT            loc_99F4
.text:0000000000009A10                 B               loc_9A2C
.text:0000000000009A14 ; ---------------------------------------------------------------------------
.text:0000000000009A14 loc_9A14                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+C4↑j
.text:0000000000009A14                 SUB             W9, W9, #1
.text:0000000000009A18                 LDR             X9, [X10,W9,SXTW#3]
.text:0000000000009A1C                 STR             X9, [X12]
.text:0000000000009A20                 LDR             W9, [X8,#0x104]
.text:0000000000009A24                 SUB             W9, W9, #1
.text:0000000000009A28                 STR             W9, [X8,#0x104]
.text:0000000000009A2C loc_9A2C                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+AC↑j
.text:0000000000009A2C                                         ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+D8↑j
.text:0000000000009A2C                 LDR             X0, [X19,#0x60]
.text:0000000000009A30                 LDR             X8, [X0]
.text:0000000000009A34                 LDR             X8, [X8,#0x28]
.text:0000000000009A38                 BLR             X8
.text:0000000000009A3C                 LDR             X8, [X20,#0x38]
.text:0000000000009A40                 CBNZ            X8, loc_99C8
.text:0000000000009A44 loc_9A44                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+8C↑j
.text:0000000000009A44                 STP             X19, X19, [X20,#0x38]
.text:0000000000009A48                 STR             XZR, [X19,#0x50]
.text:0000000000009A4C loc_9A4C                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+A0↑j
.text:0000000000009A4C                 STR             XZR, [X19,#0x48]
.text:0000000000009A50                 STR             X20, [X19,#0x10]
.text:0000000000009A54 loc_9A54                                ; CODE XREF: tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)+20↑j
.text:0000000000009A54                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009A58                 MOV             X0, X19
.text:0000000000009A5C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000009A60                 RET
.text:0000000000009A60 ; } // starts at 9938
.text:0000000000009A60 ; End of function tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:0000000000009A60 ; ---------------------------------------------------------------------------
.text:0000000000009A64                 ALIGN 8
.text:0000000000009A68 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A68 ; Attributes: bp-based frame
.text:0000000000009A68 ; __int64 __fastcall tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode *__hidden this, tinyxml2::XMLNode *, tinyxml2::XMLNode *)
.text:0000000000009A68                 EXPORT _ZN8tinyxml27XMLNode16InsertAfterChildEPS0_S1_
.text:0000000000009A68 _ZN8tinyxml27XMLNode16InsertAfterChildEPS0_S1_
.text:0000000000009A68                                         ; DATA XREF: LOAD:0000000000001938↑o
.text:0000000000009A68 var_20          = -0x20
.text:0000000000009A68 var_10          = -0x10
.text:0000000000009A68 var_s0          =  0
.text:0000000000009A68 ; __unwind {
.text:0000000000009A68                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000009A6C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009A70                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009A74                 ADD             X29, SP, #0x20
.text:0000000000009A78                 LDR             X8, [X2,#8]
.text:0000000000009A7C                 LDR             X9, [X0,#8]
.text:0000000000009A80                 CMP             X8, X9
.text:0000000000009A84                 B.NE            loc_9A9C
.text:0000000000009A88                 LDR             X9, [X1,#0x10]
.text:0000000000009A8C                 MOV             X20, X0
.text:0000000000009A90                 MOV             X21, X1
.text:0000000000009A94                 CMP             X9, X0
.text:0000000000009A98                 B.EQ            loc_9AB4
.text:0000000000009A9C loc_9A9C                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+1C↑j
.text:0000000000009A9C                 MOV             X19, XZR
.text:0000000000009AA0 loc_9AA0                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+54↓j
.text:0000000000009AA0                                         ; tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+154↓j
.text:0000000000009AA0                 MOV             X0, X19
.text:0000000000009AA4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009AA8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009AAC                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000009AB0                 RET
.text:0000000000009AB4 ; ---------------------------------------------------------------------------
.text:0000000000009AB4 loc_9AB4                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+30↑j
.text:0000000000009AB4                 MOV             X19, X2
.text:0000000000009AB8                 CMP             X21, X2
.text:0000000000009ABC                 B.EQ            loc_9AA0
.text:0000000000009AC0                 LDR             X9, [X21,#0x50]
.text:0000000000009AC4                 CBZ             X9, loc_9B28
.text:0000000000009AC8                 LDR             X9, [X19,#0x10]
.text:0000000000009ACC                 CBZ             X9, loc_9B40
.text:0000000000009AD0                 LDR             X8, [X9,#0x38]
.text:0000000000009AD4                 CMP             X8, X19
.text:0000000000009AD8                 B.NE            loc_9AE4
.text:0000000000009ADC                 LDR             X8, [X19,#0x50]
.text:0000000000009AE0                 STR             X8, [X9,#0x38]
.text:0000000000009AE4 loc_9AE4                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+70↑j
.text:0000000000009AE4                 LDR             X8, [X9,#0x40]
.text:0000000000009AE8                 CMP             X8, X19
.text:0000000000009AEC                 B.NE            loc_9AF8
.text:0000000000009AF0                 LDR             X8, [X19,#0x48]
.text:0000000000009AF4                 STR             X8, [X9,#0x40]
.text:0000000000009AF8 loc_9AF8                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+84↑j
.text:0000000000009AF8                 MOV             X8, X19
.text:0000000000009AFC                 LDR             X9, [X8,#0x48]!
.text:0000000000009B00                 CBZ             X9, loc_9B0C
.text:0000000000009B04                 LDR             X10, [X19,#0x50]
.text:0000000000009B08                 STR             X10, [X9,#0x50]
.text:0000000000009B0C loc_9B0C                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+98↑j
.text:0000000000009B0C                 LDR             X9, [X19,#0x50]
.text:0000000000009B10                 CBZ             X9, loc_9B1C
.text:0000000000009B14                 LDR             X10, [X8]
.text:0000000000009B18                 STR             X10, [X9,#0x48]
.text:0000000000009B1C loc_9B1C                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+A8↑j
.text:0000000000009B1C                 STR             XZR, [X19,#0x10]
.text:0000000000009B20                 STP             XZR, XZR, [X8]
.text:0000000000009B24                 B               loc_9BA0
.text:0000000000009B28 ; ---------------------------------------------------------------------------
.text:0000000000009B28 loc_9B28                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+5C↑j
.text:0000000000009B28                 MOV             X0, X20
.text:0000000000009B2C                 MOV             X1, X19
.text:0000000000009B30                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009B34                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009B38                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000009B3C                 B               ._ZN8tinyxml27XMLNode14InsertEndChildEPS0_ ; tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)
.text:0000000000009B40 ; ---------------------------------------------------------------------------
.text:0000000000009B40 loc_9B40                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+64↑j
.text:0000000000009B40                 LDRSW           X9, [X8,#0x104]
.text:0000000000009B44                 CMP             W9, #1
.text:0000000000009B48                 B.LT            loc_9B90
.text:0000000000009B4C                 LDR             X10, [X8,#0xA8]
.text:0000000000009B50                 MOV             X11, XZR
.text:0000000000009B54                 MOV             X12, X10
.text:0000000000009B58 loc_9B58                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+108↓j
.text:0000000000009B58                 LDR             X13, [X12]
.text:0000000000009B5C                 CMP             X13, X19
.text:0000000000009B60                 B.EQ            loc_9B78
.text:0000000000009B64                 ADD             X11, X11, #1
.text:0000000000009B68                 ADD             X12, X12, #8
.text:0000000000009B6C                 CMP             X11, X9
.text:0000000000009B70                 B.LT            loc_9B58
.text:0000000000009B74                 B               loc_9B90
.text:0000000000009B78 ; ---------------------------------------------------------------------------
.text:0000000000009B78 loc_9B78                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+F8↑j
.text:0000000000009B78                 SUB             W9, W9, #1
.text:0000000000009B7C                 LDR             X9, [X10,W9,SXTW#3]
.text:0000000000009B80                 STR             X9, [X12]
.text:0000000000009B84                 LDR             W9, [X8,#0x104]
.text:0000000000009B88                 SUB             W9, W9, #1
.text:0000000000009B8C                 STR             W9, [X8,#0x104]
.text:0000000000009B90 loc_9B90                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+E0↑j
.text:0000000000009B90                                         ; tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+10C↑j
.text:0000000000009B90                 LDR             X0, [X19,#0x60]
.text:0000000000009B94                 LDR             X8, [X0]
.text:0000000000009B98                 LDR             X8, [X8,#0x28]
.text:0000000000009B9C                 BLR             X8
.text:0000000000009BA0 loc_9BA0                                ; CODE XREF: tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)+BC↑j
.text:0000000000009BA0                 STR             X21, [X19,#0x48]
.text:0000000000009BA4                 LDR             X8, [X21,#0x50]
.text:0000000000009BA8                 STR             X8, [X19,#0x50]
.text:0000000000009BAC                 LDR             X8, [X21,#0x50]
.text:0000000000009BB0                 STR             X19, [X8,#0x48]
.text:0000000000009BB4                 STR             X19, [X21,#0x50]
.text:0000000000009BB8                 STR             X20, [X19,#0x10]
.text:0000000000009BBC                 B               loc_9AA0
.text:0000000000009BBC ; } // starts at 9A68
.text:0000000000009BBC ; End of function tinyxml2::XMLNode::InsertAfterChild(tinyxml2::XMLNode*,tinyxml2::XMLNode*)
.text:0000000000009BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BC0 ; Attributes: bp-based frame
.text:0000000000009BC0 ; __int64 __fastcall tinyxml2::XMLNode::FirstChildElement(tinyxml2::XMLNode *__hidden this, const char *)
.text:0000000000009BC0                 EXPORT _ZNK8tinyxml27XMLNode17FirstChildElementEPKc
.text:0000000000009BC0 _ZNK8tinyxml27XMLNode17FirstChildElementEPKc
.text:0000000000009BC0                                         ; DATA XREF: LOAD:0000000000001968↑o
.text:0000000000009BC0 var_20          = -0x20
.text:0000000000009BC0 var_10          = -0x10
.text:0000000000009BC0 var_s0          =  0
.text:0000000000009BC0 ; __unwind {
.text:0000000000009BC0                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000009BC4                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009BC8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009BCC                 ADD             X29, SP, #0x20
.text:0000000000009BD0                 LDR             X19, [X0,#0x38]
.text:0000000000009BD4                 CBZ             X19, loc_9C44
.text:0000000000009BD8                 MOV             X20, X1
.text:0000000000009BDC loc_9BDC                                ; CODE XREF: tinyxml2::XMLNode::FirstChildElement(char const*)+80↓j
.text:0000000000009BDC                 LDR             X8, [X19]
.text:0000000000009BE0                 MOV             X0, X19
.text:0000000000009BE4                 LDR             X8, [X8,#0x30]
.text:0000000000009BE8                 BLR             X8
.text:0000000000009BEC                 CBZ             X0, loc_9C3C
.text:0000000000009BF0                 MOV             X21, X0
.text:0000000000009BF4                 CBZ             X20, loc_9C48
.text:0000000000009BF8                 LDR             X8, [X21]
.text:0000000000009BFC                 MOV             X0, X21
.text:0000000000009C00                 LDR             X8, [X8,#0x48]
.text:0000000000009C04                 BLR             X8
.text:0000000000009C08                 CBZ             X0, loc_9C1C
.text:0000000000009C0C                 MOV             X0, XZR
.text:0000000000009C10                 CMP             X0, X20
.text:0000000000009C14                 B.NE            loc_9C2C
.text:0000000000009C18                 B               loc_9C48
.text:0000000000009C1C ; ---------------------------------------------------------------------------
.text:0000000000009C1C loc_9C1C                                ; CODE XREF: tinyxml2::XMLNode::FirstChildElement(char const*)+48↑j
.text:0000000000009C1C                 ADD             X0, X21, #0x18 ; this
.text:0000000000009C20                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:0000000000009C24                 CMP             X0, X20
.text:0000000000009C28                 B.EQ            loc_9C48
.text:0000000000009C2C loc_9C2C                                ; CODE XREF: tinyxml2::XMLNode::FirstChildElement(char const*)+54↑j
.text:0000000000009C2C                 MOV             X1, X20 ; s2
.text:0000000000009C30                 MOV             W2, #0x7FFFFFFF ; n
.text:0000000000009C34                 BL              .strncmp
.text:0000000000009C38                 CBZ             W0, loc_9C48
.text:0000000000009C3C loc_9C3C                                ; CODE XREF: tinyxml2::XMLNode::FirstChildElement(char const*)+2C↑j
.text:0000000000009C3C                 LDR             X19, [X19,#0x50]
.text:0000000000009C40                 CBNZ            X19, loc_9BDC
.text:0000000000009C44 loc_9C44                                ; CODE XREF: tinyxml2::XMLNode::FirstChildElement(char const*)+14↑j
.text:0000000000009C44                 MOV             X21, XZR
.text:0000000000009C48 loc_9C48                                ; CODE XREF: tinyxml2::XMLNode::FirstChildElement(char const*)+34↑j
.text:0000000000009C48                                         ; tinyxml2::XMLNode::FirstChildElement(char const*)+58↑j ...
.text:0000000000009C48                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009C4C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009C50                 MOV             X0, X21
.text:0000000000009C54                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000009C58                 RET
.text:0000000000009C58 ; } // starts at 9BC0
.text:0000000000009C58 ; End of function tinyxml2::XMLNode::FirstChildElement(char const*)
.text:0000000000009C58 ; ---------------------------------------------------------------------------
.text:0000000000009C5C                 ALIGN 0x20
.text:0000000000009C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C60 ; Attributes: bp-based frame
.text:0000000000009C60 ; __int64 __fastcall tinyxml2::XMLNode::ToElementWithName(tinyxml2::XMLNode *__hidden this, const char *)
.text:0000000000009C60                 EXPORT _ZNK8tinyxml27XMLNode17ToElementWithNameEPKc
.text:0000000000009C60 _ZNK8tinyxml27XMLNode17ToElementWithNameEPKc
.text:0000000000009C60                                         ; DATA XREF: LOAD:0000000000001770↑o
.text:0000000000009C60 var_10          = -0x10
.text:0000000000009C60 var_s0          =  0
.text:0000000000009C60 ; __unwind {
.text:0000000000009C60                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:0000000000009C64                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009C68                 ADD             X29, SP, #0x10
.text:0000000000009C6C                 LDR             X8, [X0]
.text:0000000000009C70                 MOV             X20, X1
.text:0000000000009C74                 LDR             X8, [X8,#0x30]
.text:0000000000009C78                 BLR             X8
.text:0000000000009C7C                 MOV             X19, X0
.text:0000000000009C80                 CBZ             X0, loc_9CD0
.text:0000000000009C84                 CBZ             X20, loc_9CD0
.text:0000000000009C88                 LDR             X8, [X19]
.text:0000000000009C8C                 MOV             X0, X19
.text:0000000000009C90                 LDR             X8, [X8,#0x48]
.text:0000000000009C94                 BLR             X8
.text:0000000000009C98                 CBZ             X0, loc_9CAC
.text:0000000000009C9C                 MOV             X0, XZR
.text:0000000000009CA0                 CMP             X0, X20
.text:0000000000009CA4                 B.NE            loc_9CBC
.text:0000000000009CA8                 B               loc_9CD0
.text:0000000000009CAC ; ---------------------------------------------------------------------------
.text:0000000000009CAC loc_9CAC                                ; CODE XREF: tinyxml2::XMLNode::ToElementWithName(char const*)+38↑j
.text:0000000000009CAC                 ADD             X0, X19, #0x18 ; this
.text:0000000000009CB0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:0000000000009CB4                 CMP             X0, X20
.text:0000000000009CB8                 B.EQ            loc_9CD0
.text:0000000000009CBC loc_9CBC                                ; CODE XREF: tinyxml2::XMLNode::ToElementWithName(char const*)+44↑j
.text:0000000000009CBC                 MOV             X1, X20 ; s2
.text:0000000000009CC0                 MOV             W2, #0x7FFFFFFF ; n
.text:0000000000009CC4                 BL              .strncmp
.text:0000000000009CC8                 CBZ             W0, loc_9CD0
.text:0000000000009CCC                 MOV             X19, XZR
.text:0000000000009CD0 loc_9CD0                                ; CODE XREF: tinyxml2::XMLNode::ToElementWithName(char const*)+20↑j
.text:0000000000009CD0                                         ; tinyxml2::XMLNode::ToElementWithName(char const*)+24↑j ...
.text:0000000000009CD0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000009CD4                 MOV             X0, X19
.text:0000000000009CD8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000009CDC                 RET
.text:0000000000009CDC ; } // starts at 9C60
.text:0000000000009CDC ; End of function tinyxml2::XMLNode::ToElementWithName(char const*)
.text:0000000000009CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CE0 ; Attributes: bp-based frame
.text:0000000000009CE0 ; __int64 __fastcall tinyxml2::XMLNode::LastChildElement(tinyxml2::XMLNode *__hidden this, const char *)
.text:0000000000009CE0                 EXPORT _ZNK8tinyxml27XMLNode16LastChildElementEPKc
.text:0000000000009CE0 _ZNK8tinyxml27XMLNode16LastChildElementEPKc
.text:0000000000009CE0                                         ; DATA XREF: LOAD:00000000000009C0↑o
.text:0000000000009CE0 var_20          = -0x20
.text:0000000000009CE0 var_10          = -0x10
.text:0000000000009CE0 var_s0          =  0
.text:0000000000009CE0 ; __unwind {
.text:0000000000009CE0                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000009CE4                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009CE8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009CEC                 ADD             X29, SP, #0x20
.text:0000000000009CF0                 LDR             X19, [X0,#0x40]
.text:0000000000009CF4                 CBZ             X19, loc_9D64
.text:0000000000009CF8                 MOV             X20, X1
.text:0000000000009CFC loc_9CFC                                ; CODE XREF: tinyxml2::XMLNode::LastChildElement(char const*)+80↓j
.text:0000000000009CFC                 LDR             X8, [X19]
.text:0000000000009D00                 MOV             X0, X19
.text:0000000000009D04                 LDR             X8, [X8,#0x30]
.text:0000000000009D08                 BLR             X8
.text:0000000000009D0C                 CBZ             X0, loc_9D5C
.text:0000000000009D10                 MOV             X21, X0
.text:0000000000009D14                 CBZ             X20, loc_9D68
.text:0000000000009D18                 LDR             X8, [X21]
.text:0000000000009D1C                 MOV             X0, X21
.text:0000000000009D20                 LDR             X8, [X8,#0x48]
.text:0000000000009D24                 BLR             X8
.text:0000000000009D28                 CBZ             X0, loc_9D3C
.text:0000000000009D2C                 MOV             X0, XZR
.text:0000000000009D30                 CMP             X0, X20
.text:0000000000009D34                 B.NE            loc_9D4C
.text:0000000000009D38                 B               loc_9D68
.text:0000000000009D3C ; ---------------------------------------------------------------------------
.text:0000000000009D3C loc_9D3C                                ; CODE XREF: tinyxml2::XMLNode::LastChildElement(char const*)+48↑j
.text:0000000000009D3C                 ADD             X0, X21, #0x18 ; this
.text:0000000000009D40                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:0000000000009D44                 CMP             X0, X20
.text:0000000000009D48                 B.EQ            loc_9D68
.text:0000000000009D4C loc_9D4C                                ; CODE XREF: tinyxml2::XMLNode::LastChildElement(char const*)+54↑j
.text:0000000000009D4C                 MOV             X1, X20 ; s2
.text:0000000000009D50                 MOV             W2, #0x7FFFFFFF ; n
.text:0000000000009D54                 BL              .strncmp
.text:0000000000009D58                 CBZ             W0, loc_9D68
.text:0000000000009D5C loc_9D5C                                ; CODE XREF: tinyxml2::XMLNode::LastChildElement(char const*)+2C↑j
.text:0000000000009D5C                 LDR             X19, [X19,#0x48]
.text:0000000000009D60                 CBNZ            X19, loc_9CFC
.text:0000000000009D64 loc_9D64                                ; CODE XREF: tinyxml2::XMLNode::LastChildElement(char const*)+14↑j
.text:0000000000009D64                 MOV             X21, XZR
.text:0000000000009D68 loc_9D68                                ; CODE XREF: tinyxml2::XMLNode::LastChildElement(char const*)+34↑j
.text:0000000000009D68                                         ; tinyxml2::XMLNode::LastChildElement(char const*)+58↑j ...
.text:0000000000009D68                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009D6C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009D70                 MOV             X0, X21
.text:0000000000009D74                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000009D78                 RET
.text:0000000000009D78 ; } // starts at 9CE0
.text:0000000000009D78 ; End of function tinyxml2::XMLNode::LastChildElement(char const*)
.text:0000000000009D78 ; ---------------------------------------------------------------------------
.text:0000000000009D7C                 ALIGN 0x20
.text:0000000000009D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D80 ; Attributes: bp-based frame
.text:0000000000009D80 ; __int64 __fastcall tinyxml2::XMLNode::NextSiblingElement(tinyxml2::XMLNode *__hidden this, const char *)
.text:0000000000009D80                 EXPORT _ZNK8tinyxml27XMLNode18NextSiblingElementEPKc
.text:0000000000009D80 _ZNK8tinyxml27XMLNode18NextSiblingElementEPKc
.text:0000000000009D80                                         ; DATA XREF: LOAD:0000000000001290↑o
.text:0000000000009D80 var_20          = -0x20
.text:0000000000009D80 var_10          = -0x10
.text:0000000000009D80 var_s0          =  0
.text:0000000000009D80 ; __unwind {
.text:0000000000009D80                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000009D84                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009D88                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009D8C                 ADD             X29, SP, #0x20
.text:0000000000009D90                 LDR             X19, [X0,#0x50]
.text:0000000000009D94                 CBZ             X19, loc_9E04
.text:0000000000009D98                 MOV             X20, X1
.text:0000000000009D9C loc_9D9C                                ; CODE XREF: tinyxml2::XMLNode::NextSiblingElement(char const*)+80↓j
.text:0000000000009D9C                 LDR             X8, [X19]
.text:0000000000009DA0                 MOV             X0, X19
.text:0000000000009DA4                 LDR             X8, [X8,#0x30]
.text:0000000000009DA8                 BLR             X8
.text:0000000000009DAC                 CBZ             X0, loc_9DFC
.text:0000000000009DB0                 MOV             X21, X0
.text:0000000000009DB4                 CBZ             X20, loc_9E08
.text:0000000000009DB8                 LDR             X8, [X21]
.text:0000000000009DBC                 MOV             X0, X21
.text:0000000000009DC0                 LDR             X8, [X8,#0x48]
.text:0000000000009DC4                 BLR             X8
.text:0000000000009DC8                 CBZ             X0, loc_9DDC
.text:0000000000009DCC                 MOV             X0, XZR
.text:0000000000009DD0                 CMP             X0, X20
.text:0000000000009DD4                 B.NE            loc_9DEC
.text:0000000000009DD8                 B               loc_9E08
.text:0000000000009DDC ; ---------------------------------------------------------------------------
.text:0000000000009DDC loc_9DDC                                ; CODE XREF: tinyxml2::XMLNode::NextSiblingElement(char const*)+48↑j
.text:0000000000009DDC                 ADD             X0, X21, #0x18 ; this
.text:0000000000009DE0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:0000000000009DE4                 CMP             X0, X20
.text:0000000000009DE8                 B.EQ            loc_9E08
.text:0000000000009DEC loc_9DEC                                ; CODE XREF: tinyxml2::XMLNode::NextSiblingElement(char const*)+54↑j
.text:0000000000009DEC                 MOV             X1, X20 ; s2
.text:0000000000009DF0                 MOV             W2, #0x7FFFFFFF ; n
.text:0000000000009DF4                 BL              .strncmp
.text:0000000000009DF8                 CBZ             W0, loc_9E08
.text:0000000000009DFC loc_9DFC                                ; CODE XREF: tinyxml2::XMLNode::NextSiblingElement(char const*)+2C↑j
.text:0000000000009DFC                 LDR             X19, [X19,#0x50]
.text:0000000000009E00                 CBNZ            X19, loc_9D9C
.text:0000000000009E04 loc_9E04                                ; CODE XREF: tinyxml2::XMLNode::NextSiblingElement(char const*)+14↑j
.text:0000000000009E04                 MOV             X21, XZR
.text:0000000000009E08 loc_9E08                                ; CODE XREF: tinyxml2::XMLNode::NextSiblingElement(char const*)+34↑j
.text:0000000000009E08                                         ; tinyxml2::XMLNode::NextSiblingElement(char const*)+58↑j ...
.text:0000000000009E08                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009E0C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009E10                 MOV             X0, X21
.text:0000000000009E14                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000009E18                 RET
.text:0000000000009E18 ; } // starts at 9D80
.text:0000000000009E18 ; End of function tinyxml2::XMLNode::NextSiblingElement(char const*)
.text:0000000000009E18 ; ---------------------------------------------------------------------------
.text:0000000000009E1C                 ALIGN 0x20
.text:0000000000009E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E20 ; Attributes: bp-based frame
.text:0000000000009E20 ; __int64 __fastcall tinyxml2::XMLNode::PreviousSiblingElement(tinyxml2::XMLNode *__hidden this, const char *)
.text:0000000000009E20                 EXPORT _ZNK8tinyxml27XMLNode22PreviousSiblingElementEPKc
.text:0000000000009E20 _ZNK8tinyxml27XMLNode22PreviousSiblingElementEPKc
.text:0000000000009E20                                         ; DATA XREF: LOAD:0000000000000C00↑o
.text:0000000000009E20 var_20          = -0x20
.text:0000000000009E20 var_10          = -0x10
.text:0000000000009E20 var_s0          =  0
.text:0000000000009E20 ; __unwind {
.text:0000000000009E20                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000009E24                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009E28                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009E2C                 ADD             X29, SP, #0x20
.text:0000000000009E30                 LDR             X19, [X0,#0x48]
.text:0000000000009E34                 CBZ             X19, loc_9EA4
.text:0000000000009E38                 MOV             X20, X1
.text:0000000000009E3C loc_9E3C                                ; CODE XREF: tinyxml2::XMLNode::PreviousSiblingElement(char const*)+80↓j
.text:0000000000009E3C                 LDR             X8, [X19]
.text:0000000000009E40                 MOV             X0, X19
.text:0000000000009E44                 LDR             X8, [X8,#0x30]
.text:0000000000009E48                 BLR             X8
.text:0000000000009E4C                 CBZ             X0, loc_9E9C
.text:0000000000009E50                 MOV             X21, X0
.text:0000000000009E54                 CBZ             X20, loc_9EA8
.text:0000000000009E58                 LDR             X8, [X21]
.text:0000000000009E5C                 MOV             X0, X21
.text:0000000000009E60                 LDR             X8, [X8,#0x48]
.text:0000000000009E64                 BLR             X8
.text:0000000000009E68                 CBZ             X0, loc_9E7C
.text:0000000000009E6C                 MOV             X0, XZR
.text:0000000000009E70                 CMP             X0, X20
.text:0000000000009E74                 B.NE            loc_9E8C
.text:0000000000009E78                 B               loc_9EA8
.text:0000000000009E7C ; ---------------------------------------------------------------------------
.text:0000000000009E7C loc_9E7C                                ; CODE XREF: tinyxml2::XMLNode::PreviousSiblingElement(char const*)+48↑j
.text:0000000000009E7C                 ADD             X0, X21, #0x18 ; this
.text:0000000000009E80                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:0000000000009E84                 CMP             X0, X20
.text:0000000000009E88                 B.EQ            loc_9EA8
.text:0000000000009E8C loc_9E8C                                ; CODE XREF: tinyxml2::XMLNode::PreviousSiblingElement(char const*)+54↑j
.text:0000000000009E8C                 MOV             X1, X20 ; s2
.text:0000000000009E90                 MOV             W2, #0x7FFFFFFF ; n
.text:0000000000009E94                 BL              .strncmp
.text:0000000000009E98                 CBZ             W0, loc_9EA8
.text:0000000000009E9C loc_9E9C                                ; CODE XREF: tinyxml2::XMLNode::PreviousSiblingElement(char const*)+2C↑j
.text:0000000000009E9C                 LDR             X19, [X19,#0x48]
.text:0000000000009EA0                 CBNZ            X19, loc_9E3C
.text:0000000000009EA4 loc_9EA4                                ; CODE XREF: tinyxml2::XMLNode::PreviousSiblingElement(char const*)+14↑j
.text:0000000000009EA4                 MOV             X21, XZR
.text:0000000000009EA8 loc_9EA8                                ; CODE XREF: tinyxml2::XMLNode::PreviousSiblingElement(char const*)+34↑j
.text:0000000000009EA8                                         ; tinyxml2::XMLNode::PreviousSiblingElement(char const*)+58↑j ...
.text:0000000000009EA8                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000009EAC                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000009EB0                 MOV             X0, X21
.text:0000000000009EB4                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000009EB8                 RET
.text:0000000000009EB8 ; } // starts at 9E20
.text:0000000000009EB8 ; End of function tinyxml2::XMLNode::PreviousSiblingElement(char const*)
.text:0000000000009EB8 ; ---------------------------------------------------------------------------
.text:0000000000009EBC                 ALIGN 0x20
.text:0000000000009EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EC0 ; Attributes: bp-based frame
.text:0000000000009EC0 ; _QWORD __fastcall tinyxml2::XMLNode::ParseDeep(tinyxml2::XMLNode *__hidden this, char *, tinyxml2::StrPair *, int *)
.text:0000000000009EC0                 EXPORT _ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi
.text:0000000000009EC0 _ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi
.text:0000000000009EC0                                         ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+C↓j
.text:0000000000009EC0                                         ; DATA XREF: LOAD:0000000000000B70↑o ...
.text:0000000000009EC0 var_90          = -0x90
.text:0000000000009EC0 var_88          = -0x88
.text:0000000000009EC0 var_80          = -0x80
.text:0000000000009EC0 var_78          = -0x78
.text:0000000000009EC0 var_70          = -0x70
.text:0000000000009EC0 var_60          = -0x60
.text:0000000000009EC0 var_58          = -0x58
.text:0000000000009EC0 var_50          = -0x50
.text:0000000000009EC0 var_40          = -0x40
.text:0000000000009EC0 var_30          = -0x30
.text:0000000000009EC0 var_20          = -0x20
.text:0000000000009EC0 var_10          = -0x10
.text:0000000000009EC0 var_s0          =  0
.text:0000000000009EC0 ; __unwind {
.text:0000000000009EC0                 SUB             SP, SP, #0xA0
.text:0000000000009EC4                 STP             X28, X27, [SP,#0x90+var_50]
.text:0000000000009EC8                 STP             X26, X25, [SP,#0x90+var_40]
.text:0000000000009ECC                 STP             X24, X23, [SP,#0x90+var_30]
.text:0000000000009ED0                 STP             X22, X21, [SP,#0x90+var_20]
.text:0000000000009ED4                 STP             X20, X19, [SP,#0x90+var_10]
.text:0000000000009ED8                 STP             X29, X30, [SP,#0x90+var_s0]
.text:0000000000009EDC                 ADD             X29, SP, #0x90
.text:0000000000009EE0                 MRS             X21, #3, c13, c0, #2
.text:0000000000009EE4                 MOV             X20, X3
.text:0000000000009EE8                 LDR             X8, [X21,#0x28]
.text:0000000000009EEC                 MOV             X24, X2
.text:0000000000009EF0                 MOV             X22, X0
.text:0000000000009EF4                 MOV             X23, X1
.text:0000000000009EF8                 STR             X8, [SP,#0x90+var_58]
.text:0000000000009EFC                 LDR             X19, [X0,#8]
.text:0000000000009F00                 LDR             W8, [X19,#0xA4]
.text:0000000000009F04                 ADD             W8, W8, #1
.text:0000000000009F08                 CMP             W8, #0x64 ; 'd'
.text:0000000000009F0C                 STR             W8, [X19,#0xA4]
.text:0000000000009F10                 B.NE            loc_9F2C
.text:0000000000009F14                 LDR             W2, [X19,#0xA0]
.text:0000000000009F18                 ADRP            X3, #aElementNesting@PAGE ; "Element nesting is too deep."
.text:0000000000009F1C                 ADD             X3, X3, #aElementNesting@PAGEOFF ; "Element nesting is too deep."
.text:0000000000009F20                 MOV             W1, #0x12
.text:0000000000009F24                 MOV             X0, X19
.text:0000000000009F28                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:0000000000009F2C loc_9F2C                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+50↑j
.text:0000000000009F2C                 LDR             X8, [X22,#8]
.text:0000000000009F30                 LDR             W8, [X8,#0x6C]
.text:0000000000009F34                 CBNZ            W8, loc_A404
.text:0000000000009F38                 ADD             X8, SP, #0x90+var_78
.text:0000000000009F3C                 STP             X24, X21, [SP,#0x90+var_88]
.text:0000000000009F40                 ADD             X9, X24, #8
.text:0000000000009F44                 ADD             X21, X8, #8
.text:0000000000009F48                 STR             X9, [SP,#0x90+var_90]
.text:0000000000009F4C loc_9F4C                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *):loc_A3EC↓j
.text:0000000000009F4C                 CBZ             X23, loc_A400
.text:0000000000009F50                 LDRB            W8, [X23]
.text:0000000000009F54                 CBZ             W8, loc_A400
.text:0000000000009F58                 LDR             X0, [X22,#8] ; this
.text:0000000000009F5C                 ADD             X2, SP, #0x90+var_60 ; tinyxml2::XMLNode **
.text:0000000000009F60                 MOV             X1, X23 ; char *
.text:0000000000009F64                 STR             XZR, [SP,#0x90+var_60]
.text:0000000000009F68                 BL              ._ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE ; tinyxml2::XMLDocument::Identify(char *,tinyxml2::XMLNode **)
.text:0000000000009F6C                 LDR             X28, [SP,#0x90+var_60]
.text:0000000000009F70                 CBZ             X28, loc_A400
.text:0000000000009F74                 STR             WZR, [SP,#0x90+var_78]
.text:0000000000009F78                 MOV             X1, X0
.text:0000000000009F7C                 STP             XZR, XZR, [X21]
.text:0000000000009F80                 ADD             X2, SP, #0x90+var_78
.text:0000000000009F84                 LDR             X8, [X28]
.text:0000000000009F88                 MOV             X0, X28
.text:0000000000009F8C                 LDR             W25, [X28,#0x30]
.text:0000000000009F90                 MOV             X3, X20
.text:0000000000009F94                 LDR             X8, [X8,#0x88]
.text:0000000000009F98                 BLR             X8
.text:0000000000009F9C                 MOV             X23, X0
.text:0000000000009FA0                 CBZ             X0, loc_A0DC
.text:0000000000009FA4                 LDR             X8, [X28]
.text:0000000000009FA8                 MOV             X0, X28
.text:0000000000009FAC                 LDR             X8, [X8,#0x20]
.text:0000000000009FB0                 BLR             X8
.text:0000000000009FB4                 CBZ             X0, loc_A000
.text:0000000000009FB8                 LDR             X8, [X22]
.text:0000000000009FBC                 MOV             X24, X0
.text:0000000000009FC0                 MOV             X0, X22
.text:0000000000009FC4                 LDR             X8, [X8,#0x18]
.text:0000000000009FC8                 BLR             X8
.text:0000000000009FCC                 CBZ             X0, loc_A138
.text:0000000000009FD0                 LDR             X0, [X22,#0x38]
.text:0000000000009FD4                 CBZ             X0, loc_A000
.text:0000000000009FD8                 LDR             X8, [X0]
.text:0000000000009FDC                 LDR             X8, [X8,#0x20]
.text:0000000000009FE0                 BLR             X8
.text:0000000000009FE4                 CBZ             X0, loc_A138
.text:0000000000009FE8                 LDR             X0, [X22,#0x40]
.text:0000000000009FEC                 CBZ             X0, loc_A138
.text:0000000000009FF0                 LDR             X8, [X0]
.text:0000000000009FF4                 LDR             X8, [X8,#0x20]
.text:0000000000009FF8                 BLR             X8
.text:0000000000009FFC                 CBZ             X0, loc_A138
.text:000000000000A000 loc_A000                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+F4↑j
.text:000000000000A000                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+114↑j
.text:000000000000A000                 LDR             X8, [X28]
.text:000000000000A004                 MOV             X0, X28
.text:000000000000A008                 LDR             X8, [X8]
.text:000000000000A00C                 BLR             X8
.text:000000000000A010                 CBZ             X0, loc_A2A4
.text:000000000000A014                 LDR             W8, [X0,#0x68]
.text:000000000000A018                 MOV             X24, X0
.text:000000000000A01C                 CMP             W8, #2
.text:000000000000A020                 B.NE            loc_A194
.text:000000000000A024                 LDR             X25, [SP,#0x90+var_88]
.text:000000000000A028                 CBZ             X25, loc_A07C
.text:000000000000A02C                 ADD             X8, X24, #0x18
.text:000000000000A030                 CMP             X8, X25
.text:000000000000A034                 B.EQ            loc_A07C
.text:000000000000A038                 LDRB            W8, [X25,#1]
.text:000000000000A03C                 TBZ             W8, #1, loc_A050
.text:000000000000A040                 LDR             X8, [SP,#0x90+var_90]
.text:000000000000A044                 LDR             X0, [X8] ; void *
.text:000000000000A048                 CBZ             X0, loc_A050
.text:000000000000A04C                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000A050 loc_A050                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+17C↑j
.text:000000000000A050                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+188↑j
.text:000000000000A050                 LDR             X8, [SP,#0x90+var_90]
.text:000000000000A054                 STR             WZR, [X25]
.text:000000000000A058                 STP             XZR, XZR, [X8]
.text:000000000000A05C                 LDR             W8, [X24,#0x18]
.text:000000000000A060                 STR             W8, [X25]
.text:000000000000A064                 LDR             X8, [X24,#0x20]
.text:000000000000A068                 STR             X8, [X25,#8]
.text:000000000000A06C                 LDR             X8, [X24,#0x28]
.text:000000000000A070                 STR             X8, [X25,#0x10]
.text:000000000000A074                 STR             WZR, [X24,#0x18]
.text:000000000000A078                 STP             XZR, XZR, [X24,#0x20]
.text:000000000000A07C loc_A07C                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+168↑j
.text:000000000000A07C                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+174↑j
.text:000000000000A07C                 LDR             X0, [X28,#0x60]
.text:000000000000A080                 LDR             X8, [X0]
.text:000000000000A084                 LDR             X8, [X8,#0x28]
.text:000000000000A088                 BLR             X8
.text:000000000000A08C                 LDR             X8, [X28]
.text:000000000000A090                 MOV             X0, X28
.text:000000000000A094                 LDR             X8, [X8,#0x18]
.text:000000000000A098                 BLR             X8
.text:000000000000A09C                 CBZ             X0, loc_A264
.text:000000000000A0A0 loc_A0A0                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+3B0↓j
.text:000000000000A0A0                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+3DC↓j ...
.text:000000000000A0A0                 LDR             X8, [X28]
.text:000000000000A0A4                 MOV             X0, X28
.text:000000000000A0A8                 LDR             X24, [X28,#0x60]
.text:000000000000A0AC                 LDR             X8, [X8,#0x78]
.text:000000000000A0B0                 BLR             X8
.text:000000000000A0B4                 LDR             X8, [X24]
.text:000000000000A0B8                 MOV             X0, X24
.text:000000000000A0BC                 MOV             X1, X28
.text:000000000000A0C0                 LDR             X8, [X8,#0x20]
.text:000000000000A0C4                 BLR             X8
.text:000000000000A0C8                 MOV             W24, #1
.text:000000000000A0CC                 MOV             X27, X23
.text:000000000000A0D0                 LDRB            W8, [SP,#0x90+var_78+1]
.text:000000000000A0D4                 TBNZ            W8, #1, loc_A3E0
.text:000000000000A0D8                 B               loc_A3EC
.text:000000000000A0DC ; ---------------------------------------------------------------------------
.text:000000000000A0DC loc_A0DC                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+E0↑j
.text:000000000000A0DC                 LDR             X8, [X28]
.text:000000000000A0E0                 MOV             X0, X28
.text:000000000000A0E4                 LDR             X8, [X8,#0x18]
.text:000000000000A0E8                 BLR             X8
.text:000000000000A0EC                 CBZ             X0, loc_A158
.text:000000000000A0F0 loc_A0F0                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+2A4↓j
.text:000000000000A0F0                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+2D0↓j ...
.text:000000000000A0F0                 LDR             X8, [X28]
.text:000000000000A0F4                 MOV             X0, X28
.text:000000000000A0F8                 LDR             X24, [X28,#0x60]
.text:000000000000A0FC                 LDR             X8, [X8,#0x78]
.text:000000000000A100                 BLR             X8
.text:000000000000A104                 LDR             X8, [X24]
.text:000000000000A108                 MOV             X0, X24
.text:000000000000A10C                 MOV             X1, X28
.text:000000000000A110                 LDR             X8, [X8,#0x20]
.text:000000000000A114                 BLR             X8
.text:000000000000A118                 LDR             X0, [X22,#8]
.text:000000000000A11C                 LDR             W8, [X0,#0x6C]
.text:000000000000A120                 CBNZ            W8, loc_A3D4
.text:000000000000A124                 MOV             W1, #0xF
.text:000000000000A128                 MOV             W2, W25
.text:000000000000A12C                 MOV             X3, XZR
.text:000000000000A130                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000A134                 B               loc_A3D4
.text:000000000000A138 ; ---------------------------------------------------------------------------
.text:000000000000A138 loc_A138                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+10C↑j
.text:000000000000A138                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+124↑j ...
.text:000000000000A138                 LDR             X8, [X24]
.text:000000000000A13C                 MOV             X0, X24
.text:000000000000A140                 LDR             X26, [X22,#8]
.text:000000000000A144                 LDR             X8, [X8,#0x48]
.text:000000000000A148                 BLR             X8
.text:000000000000A14C                 CBZ             X0, loc_A1D4
.text:000000000000A150                 MOV             X4, XZR
.text:000000000000A154                 B               loc_A1E0
.text:000000000000A158 ; ---------------------------------------------------------------------------
.text:000000000000A158 loc_A158                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+22C↑j
.text:000000000000A158                 LDR             X8, [X28,#8]
.text:000000000000A15C                 LDRSW           X9, [X8,#0x104]
.text:000000000000A160                 CMP             W9, #1
.text:000000000000A164                 B.LT            loc_A0F0
.text:000000000000A168                 LDR             X10, [X8,#0xA8]
.text:000000000000A16C                 MOV             X11, XZR
.text:000000000000A170                 MOV             X12, X10
.text:000000000000A174 loc_A174                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+2CC↓j
.text:000000000000A174                 LDR             X13, [X12]
.text:000000000000A178                 CMP             X13, X28
.text:000000000000A17C                 B.EQ            loc_A248
.text:000000000000A180                 ADD             X11, X11, #1
.text:000000000000A184                 ADD             X12, X12, #8
.text:000000000000A188                 CMP             X11, X9
.text:000000000000A18C                 B.LT            loc_A174
.text:000000000000A190                 B               loc_A0F0
.text:000000000000A194 ; ---------------------------------------------------------------------------
.text:000000000000A194 loc_A194                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+160↑j
.text:000000000000A194                 LDP             X10, X9, [SP,#0x90+var_70]
.text:000000000000A198                 CMP             X10, X9
.text:000000000000A19C                 B.EQ            loc_A2A0
.text:000000000000A1A0                 CBNZ            W8, loc_A300
.text:000000000000A1A4                 ADD             X0, SP, #0x90+var_78 ; this
.text:000000000000A1A8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000A1AC                 LDR             X8, [X24]
.text:000000000000A1B0                 MOV             X26, X0
.text:000000000000A1B4                 MOV             X0, X24
.text:000000000000A1B8                 LDR             X8, [X8,#0x48]
.text:000000000000A1BC                 BLR             X8
.text:000000000000A1C0                 CBZ             X0, loc_A2DC
.text:000000000000A1C4                 MOV             X1, XZR
.text:000000000000A1C8                 CMP             X26, X1
.text:000000000000A1CC                 B.NE            loc_A2F0
.text:000000000000A1D0                 B               loc_A2A4
.text:000000000000A1D4 ; ---------------------------------------------------------------------------
.text:000000000000A1D4 loc_A1D4                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+28C↑j
.text:000000000000A1D4                 ADD             X0, X24, #0x18 ; this
.text:000000000000A1D8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000A1DC                 MOV             X4, X0
.text:000000000000A1E0 loc_A1E0                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+294↑j
.text:000000000000A1E0                 ADRP            X3, #aXmldeclaration@PAGE ; "XMLDeclaration value=%s"
.text:000000000000A1E4                 MOV             X0, X26
.text:000000000000A1E8                 MOV             W1, #0xB
.text:000000000000A1EC                 MOV             W2, W25
.text:000000000000A1F0                 ADD             X3, X3, #aXmldeclaration@PAGEOFF ; "XMLDeclaration value=%s"
.text:000000000000A1F4                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000A1F8                 LDR             X8, [X28]
.text:000000000000A1FC                 MOV             X0, X28
.text:000000000000A200                 LDR             X8, [X8,#0x18]
.text:000000000000A204                 BLR             X8
.text:000000000000A208                 CBNZ            X0, loc_A3AC
.text:000000000000A20C                 LDR             X8, [X28,#8]
.text:000000000000A210                 LDRSW           X9, [X8,#0x104]
.text:000000000000A214                 CMP             W9, #1
.text:000000000000A218                 B.LT            loc_A3AC
.text:000000000000A21C                 LDR             X10, [X8,#0xA8]
.text:000000000000A220                 MOV             X11, XZR
.text:000000000000A224                 MOV             X12, X10
.text:000000000000A228 loc_A228                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+380↓j
.text:000000000000A228                 LDR             X13, [X12]
.text:000000000000A22C                 CMP             X13, X28
.text:000000000000A230                 B.EQ            loc_A394
.text:000000000000A234                 ADD             X11, X11, #1
.text:000000000000A238                 ADD             X12, X12, #8
.text:000000000000A23C                 CMP             X11, X9
.text:000000000000A240                 B.LT            loc_A228
.text:000000000000A244                 B               loc_A3AC
.text:000000000000A248 ; ---------------------------------------------------------------------------
.text:000000000000A248 loc_A248                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+2BC↑j
.text:000000000000A248                 SUB             W9, W9, #1
.text:000000000000A24C                 LDR             X9, [X10,W9,SXTW#3]
.text:000000000000A250                 STR             X9, [X12]
.text:000000000000A254                 LDR             W9, [X8,#0x104]
.text:000000000000A258                 SUB             W9, W9, #1
.text:000000000000A25C                 STR             W9, [X8,#0x104]
.text:000000000000A260                 B               loc_A0F0
.text:000000000000A264 ; ---------------------------------------------------------------------------
.text:000000000000A264 loc_A264                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+1DC↑j
.text:000000000000A264                 LDR             X8, [X28,#8]
.text:000000000000A268                 LDRSW           X9, [X8,#0x104]
.text:000000000000A26C                 CMP             W9, #1
.text:000000000000A270                 B.LT            loc_A0A0
.text:000000000000A274                 LDR             X10, [X8,#0xA8]
.text:000000000000A278                 MOV             X11, XZR
.text:000000000000A27C                 MOV             X12, X10
.text:000000000000A280 loc_A280                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+3D8↓j
.text:000000000000A280                 LDR             X13, [X12]
.text:000000000000A284                 CMP             X13, X28
.text:000000000000A288                 B.EQ            loc_A2C0
.text:000000000000A28C                 ADD             X11, X11, #1
.text:000000000000A290                 ADD             X12, X12, #8
.text:000000000000A294                 CMP             X11, X9
.text:000000000000A298                 B.LT            loc_A280
.text:000000000000A29C                 B               loc_A0A0
.text:000000000000A2A0 ; ---------------------------------------------------------------------------
.text:000000000000A2A0 loc_A2A0                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+2DC↑j
.text:000000000000A2A0                 CBZ             W8, loc_A300
.text:000000000000A2A4 loc_A2A4                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+150↑j
.text:000000000000A2A4                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+310↑j ...
.text:000000000000A2A4                 MOV             X0, X22
.text:000000000000A2A8                 MOV             X1, X28
.text:000000000000A2AC                 BL              ._ZN8tinyxml27XMLNode14InsertEndChildEPS0_ ; tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)
.text:000000000000A2B0                 MOV             W24, WZR
.text:000000000000A2B4                 LDRB            W8, [SP,#0x90+var_78+1]
.text:000000000000A2B8                 TBNZ            W8, #1, loc_A3E0
.text:000000000000A2BC                 B               loc_A3EC
.text:000000000000A2C0 ; ---------------------------------------------------------------------------
.text:000000000000A2C0 loc_A2C0                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+3C8↑j
.text:000000000000A2C0                 SUB             W9, W9, #1
.text:000000000000A2C4                 LDR             X9, [X10,W9,SXTW#3]
.text:000000000000A2C8                 STR             X9, [X12]
.text:000000000000A2CC                 LDR             W9, [X8,#0x104]
.text:000000000000A2D0                 SUB             W9, W9, #1
.text:000000000000A2D4                 STR             W9, [X8,#0x104]
.text:000000000000A2D8                 B               loc_A0A0
.text:000000000000A2DC ; ---------------------------------------------------------------------------
.text:000000000000A2DC loc_A2DC                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+300↑j
.text:000000000000A2DC                 ADD             X0, X24, #0x18 ; this
.text:000000000000A2E0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000A2E4                 MOV             X1, X0  ; s2
.text:000000000000A2E8                 CMP             X26, X1
.text:000000000000A2EC                 B.EQ            loc_A2A4
.text:000000000000A2F0 loc_A2F0                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+30C↑j
.text:000000000000A2F0                 MOV             X0, X26 ; s1
.text:000000000000A2F4                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000A2F8                 BL              .strncmp
.text:000000000000A2FC                 CBZ             W0, loc_A2A4
.text:000000000000A300 loc_A300                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+2E0↑j
.text:000000000000A300                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *):loc_A2A0↑j
.text:000000000000A300                 LDR             X8, [X24]
.text:000000000000A304                 MOV             X0, X24
.text:000000000000A308                 LDR             X26, [X22,#8]
.text:000000000000A30C                 LDR             X8, [X8,#0x48]
.text:000000000000A310                 BLR             X8
.text:000000000000A314                 CBZ             X0, loc_A320
.text:000000000000A318                 MOV             X4, XZR
.text:000000000000A31C                 B               loc_A32C
.text:000000000000A320 ; ---------------------------------------------------------------------------
.text:000000000000A320 loc_A320                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+454↑j
.text:000000000000A320                 ADD             X0, X24, #0x18 ; this
.text:000000000000A324                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000A328                 MOV             X4, X0
.text:000000000000A32C loc_A32C                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+45C↑j
.text:000000000000A32C                 ADRP            X3, #aXmlelementName@PAGE ; "XMLElement name=%s"
.text:000000000000A330                 MOV             X0, X26
.text:000000000000A334                 MOV             W1, #0xE
.text:000000000000A338                 MOV             W2, W25
.text:000000000000A33C                 ADD             X3, X3, #aXmlelementName@PAGEOFF ; "XMLElement name=%s"
.text:000000000000A340                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000A344                 LDR             X8, [X28]
.text:000000000000A348                 MOV             X0, X28
.text:000000000000A34C                 LDR             X8, [X8,#0x18]
.text:000000000000A350                 BLR             X8
.text:000000000000A354                 CBNZ            X0, loc_A3AC
.text:000000000000A358                 LDR             X8, [X28,#8]
.text:000000000000A35C                 LDRSW           X9, [X8,#0x104]
.text:000000000000A360                 CMP             W9, #1
.text:000000000000A364                 B.LT            loc_A3AC
.text:000000000000A368                 LDR             X10, [X8,#0xA8]
.text:000000000000A36C                 MOV             X11, XZR
.text:000000000000A370                 MOV             X12, X10
.text:000000000000A374 loc_A374                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+4CC↓j
.text:000000000000A374                 LDR             X13, [X12]
.text:000000000000A378                 CMP             X13, X28
.text:000000000000A37C                 B.EQ            loc_A394
.text:000000000000A380                 ADD             X11, X11, #1
.text:000000000000A384                 ADD             X12, X12, #8
.text:000000000000A388                 CMP             X11, X9
.text:000000000000A38C                 B.LT            loc_A374
.text:000000000000A390                 B               loc_A3AC
.text:000000000000A394 ; ---------------------------------------------------------------------------
.text:000000000000A394 loc_A394                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+370↑j
.text:000000000000A394                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+4BC↑j
.text:000000000000A394                 SUB             W9, W9, #1
.text:000000000000A398                 LDR             X9, [X10,W9,SXTW#3]
.text:000000000000A39C                 STR             X9, [X12]
.text:000000000000A3A0                 LDR             W9, [X8,#0x104]
.text:000000000000A3A4                 SUB             W9, W9, #1
.text:000000000000A3A8                 STR             W9, [X8,#0x104]
.text:000000000000A3AC loc_A3AC                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+348↑j
.text:000000000000A3AC                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+358↑j ...
.text:000000000000A3AC                 LDR             X8, [X28]
.text:000000000000A3B0                 MOV             X0, X28
.text:000000000000A3B4                 LDR             X24, [X28,#0x60]
.text:000000000000A3B8                 LDR             X8, [X8,#0x78]
.text:000000000000A3BC                 BLR             X8
.text:000000000000A3C0                 LDR             X8, [X24]
.text:000000000000A3C4                 MOV             X0, X24
.text:000000000000A3C8                 MOV             X1, X28
.text:000000000000A3CC                 LDR             X8, [X8,#0x20]
.text:000000000000A3D0                 BLR             X8
.text:000000000000A3D4 loc_A3D4                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+260↑j
.text:000000000000A3D4                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+274↑j
.text:000000000000A3D4                 MOV             W24, #3
.text:000000000000A3D8                 LDRB            W8, [SP,#0x90+var_78+1]
.text:000000000000A3DC                 TBZ             W8, #1, loc_A3EC
.text:000000000000A3E0 loc_A3E0                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+214↑j
.text:000000000000A3E0                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+3F8↑j
.text:000000000000A3E0                 LDR             X0, [SP,#0x90+var_70] ; void *
.text:000000000000A3E4                 CBZ             X0, loc_A3EC
.text:000000000000A3E8                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000A3EC loc_A3EC                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+218↑j
.text:000000000000A3EC                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+3FC↑j ...
.text:000000000000A3EC                 CBZ             W24, loc_9F4C
.text:000000000000A3F0                 LDR             X21, [SP,#0x90+var_80]
.text:000000000000A3F4                 CMP             W24, #3
.text:000000000000A3F8                 B.EQ            loc_A404
.text:000000000000A3FC                 B               loc_A408
.text:000000000000A400 ; ---------------------------------------------------------------------------
.text:000000000000A400 loc_A400                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *):loc_9F4C↑j
.text:000000000000A400                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+94↑j ...
.text:000000000000A400                 LDR             X21, [SP,#0x90+var_80]
.text:000000000000A404 loc_A404                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+74↑j
.text:000000000000A404                                         ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+538↑j
.text:000000000000A404                 MOV             X27, XZR
.text:000000000000A408 loc_A408                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+53C↑j
.text:000000000000A408                 LDR             W8, [X19,#0xA4]
.text:000000000000A40C                 SUB             W8, W8, #1
.text:000000000000A410                 STR             W8, [X19,#0xA4]
.text:000000000000A414                 LDR             X8, [X21,#0x28]
.text:000000000000A418                 LDR             X9, [SP,#0x90+var_58]
.text:000000000000A41C                 CMP             X8, X9
.text:000000000000A420                 B.NE            loc_A448
.text:000000000000A424                 MOV             X0, X27
.text:000000000000A428                 LDP             X29, X30, [SP,#0x90+var_s0]
.text:000000000000A42C                 LDP             X20, X19, [SP,#0x90+var_10]
.text:000000000000A430                 LDP             X22, X21, [SP,#0x90+var_20]
.text:000000000000A434                 LDP             X24, X23, [SP,#0x90+var_30]
.text:000000000000A438                 LDP             X26, X25, [SP,#0x90+var_40]
.text:000000000000A43C                 LDP             X28, X27, [SP,#0x90+var_50]
.text:000000000000A440                 ADD             SP, SP, #0xA0
.text:000000000000A444                 RET
.text:000000000000A448 ; ---------------------------------------------------------------------------
.text:000000000000A448 loc_A448                                ; CODE XREF: tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)+560↑j
.text:000000000000A448                 BL              .__stack_chk_fail
.text:000000000000A448 ; } // starts at 9EC0
.text:000000000000A448 ; End of function tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)
.text:000000000000A448 ; ---------------------------------------------------------------------------
.text:000000000000A44C                 ALIGN 0x10
.text:000000000000A450 ; =============== S U B R O U T I N E =======================================
.text:000000000000A450 ; Attributes: bp-based frame
.text:000000000000A450 ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError, int, char const*, ...)
.text:000000000000A450                 EXPORT _ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz
.text:000000000000A450 _ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz
.text:000000000000A450                                         ; CODE XREF: tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)+C↓j
.text:000000000000A450                                         ; DATA XREF: LOAD:0000000000001548↑o ...
.text:000000000000A450 var_130         = -0x130
.text:000000000000A450 var_110         = -0x110
.text:000000000000A450 var_F0          = -0xF0
.text:000000000000A450 var_D0          = -0xD0
.text:000000000000A450 var_B0          = -0xB0
.text:000000000000A450 var_A0          = -0xA0
.text:000000000000A450 var_90          = -0x90
.text:000000000000A450 var_80          = -0x80
.text:000000000000A450 var_70          = -0x70
.text:000000000000A450 var_48          = -0x48
.text:000000000000A450 var_40          = -0x40
.text:000000000000A450 var_30          = -0x30
.text:000000000000A450 var_20          = -0x20
.text:000000000000A450 var_10          = -0x10
.text:000000000000A450 var_s0          =  0
.text:000000000000A450 ; __unwind {
.text:000000000000A450                 SUB             SP, SP, #0x140
.text:000000000000A454                 STP             X28, X25, [SP,#0x130+var_40]
.text:000000000000A458                 STP             X24, X23, [SP,#0x130+var_30]
.text:000000000000A45C                 STP             X22, X21, [SP,#0x130+var_20]
.text:000000000000A460                 STP             X20, X19, [SP,#0x130+var_10]
.text:000000000000A464                 STP             X29, X30, [SP,#0x130+var_s0]
.text:000000000000A468                 ADD             X29, SP, #0x130
.text:000000000000A46C                 MRS             X25, #3, c13, c0, #2
.text:000000000000A470                 STP             Q6, Q7, [SP,#0x130+var_D0]
.text:000000000000A474                 STP             Q4, Q5, [SP,#0x130+var_F0]
.text:000000000000A478                 MOV             X21, X0
.text:000000000000A47C                 STP             Q2, Q3, [SP,#0x130+var_110]
.text:000000000000A480                 MOV             W22, W2
.text:000000000000A484                 STP             Q0, Q1, [SP,#0x130+var_130]
.text:000000000000A488                 MOV             W23, W1
.text:000000000000A48C                 STP             X6, X7, [SP,#0x130+var_A0]
.text:000000000000A490                 MOV             X19, X3
.text:000000000000A494                 STP             X4, X5, [SP,#0x130+var_B0]
.text:000000000000A498                 ADD             X20, X0, #0x78 ; 'x'
.text:000000000000A49C                 LDR             X8, [X25,#0x28]
.text:000000000000A4A0                 STUR            X8, [X29,#var_48]
.text:000000000000A4A4                 LDRB            W8, [X0,#0x79]
.text:000000000000A4A8                 STR             W1, [X0,#0x6C]
.text:000000000000A4AC                 STR             W2, [X0,#0x90]
.text:000000000000A4B0                 TBZ             W8, #1, loc_A4C0
.text:000000000000A4B4                 LDR             X0, [X21,#0x80] ; void *
.text:000000000000A4B8                 CBZ             X0, loc_A4C0
.text:000000000000A4BC                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000A4C0 loc_A4C0                                ; CODE XREF: tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)+60↑j
.text:000000000000A4C0                                         ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)+68↑j
.text:000000000000A4C0                 MOV             W24, #0x3E8
.text:000000000000A4C4                 STR             WZR, [X21,#0x78]
.text:000000000000A4C8                 MOV             X0, X24 ; unsigned __int64
.text:000000000000A4CC                 STP             XZR, XZR, [X21,#0x80]
.text:000000000000A4D0                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000A4D4                 ADRP            X8, #_ZN8tinyxml211XMLDocument11_errorNamesE_ptr@PAGE
.text:000000000000A4D8                 ADRP            X3, #aErrorSErroridD@PAGE ; "Error=%s ErrorID=%d (0x%x) Line number="...
.text:000000000000A4DC                 ADD             X3, X3, #aErrorSErroridD@PAGEOFF ; "Error=%s ErrorID=%d (0x%x) Line number="...
.text:000000000000A4E0                 LDR             X8, [X8,#_ZN8tinyxml211XMLDocument11_errorNamesE_ptr@PAGEOFF]
.text:000000000000A4E4                 MOV             X1, X24
.text:000000000000A4E8                 MOV             X2, X24
.text:000000000000A4EC                 MOV             W5, W23
.text:000000000000A4F0                 MOV             W6, W23
.text:000000000000A4F4                 LDR             X4, [X8,W23,UXTW#3]
.text:000000000000A4F8                 MOV             W7, W22
.text:000000000000A4FC                 MOV             X21, X0
.text:000000000000A500                 BL              sub_8A58
.text:000000000000A504                 CBZ             X19, loc_A590
.text:000000000000A508                 MOV             W22, #0x3E8
.text:000000000000A50C                 MOV             X0, X21
.text:000000000000A510                 MOV             X1, X22
.text:000000000000A514                 BL              .__strlen_chk
.text:000000000000A518                 ADD             X8, X21, X0
.text:000000000000A51C                 ADRP            X3, #asc_5075@PAGE ; ": "
.text:000000000000A520                 MOV             X23, #0xFFFFFFFFFFFFFFFF
.text:000000000000A524                 SUB             X2, X22, X0
.text:000000000000A528                 ADD             X3, X3, #asc_5075@PAGEOFF ; ": "
.text:000000000000A52C                 MOV             X0, X8
.text:000000000000A530                 MOV             X1, X23
.text:000000000000A534                 BL              sub_8A58
.text:000000000000A538                 MOV             X0, X21
.text:000000000000A53C                 MOV             X1, X22
.text:000000000000A540                 BL              .__strlen_chk
.text:000000000000A544                 MOV             X8, #0xFFFFFFFFFFFFFFE0
.text:000000000000A548                 MOV             X9, SP
.text:000000000000A54C                 ADD             X10, SP, #0x130+var_B0
.text:000000000000A550                 MOVK            X8, #0xFF80,LSL#32
.text:000000000000A554                 ADD             X9, X9, #0x80
.text:000000000000A558                 ADD             X10, X10, #0x20 ; ' '
.text:000000000000A55C                 ADD             X11, X29, #0x10
.text:000000000000A560                 STP             X9, X8, [X29,#var_80]
.text:000000000000A564                 ADD             X8, X21, X0
.text:000000000000A568                 SUB             X1, X22, X0
.text:000000000000A56C                 STP             X11, X10, [X29,#var_90]
.text:000000000000A570                 SUB             X5, X29, #-var_70
.text:000000000000A574                 LDP             Q1, Q0, [X29,#var_90]
.text:000000000000A578                 MOV             X0, X8
.text:000000000000A57C                 MOV             W2, WZR
.text:000000000000A580                 MOV             X3, X23
.text:000000000000A584                 MOV             X4, X19
.text:000000000000A588                 STP             Q1, Q0, [X29,#var_70]
.text:000000000000A58C                 BL              .__vsnprintf_chk
.text:000000000000A590 loc_A590                                ; CODE XREF: tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)+B4↑j
.text:000000000000A590                 MOV             X0, X20 ; this
.text:000000000000A594                 MOV             X1, X21 ; char *
.text:000000000000A598                 MOV             W2, WZR ; int
.text:000000000000A59C                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000A5A0                 MOV             X0, X21 ; void *
.text:000000000000A5A4                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000A5A8                 LDR             X8, [X25,#0x28]
.text:000000000000A5AC                 LDUR            X9, [X29,#var_48]
.text:000000000000A5B0                 CMP             X8, X9
.text:000000000000A5B4                 B.NE            loc_A5D4
.text:000000000000A5B8                 LDP             X29, X30, [SP,#0x130+var_s0]
.text:000000000000A5BC                 LDP             X20, X19, [SP,#0x130+var_10]
.text:000000000000A5C0                 LDP             X22, X21, [SP,#0x130+var_20]
.text:000000000000A5C4                 LDP             X24, X23, [SP,#0x130+var_30]
.text:000000000000A5C8                 LDP             X28, X25, [SP,#0x130+var_40]
.text:000000000000A5CC                 ADD             SP, SP, #0x140
.text:000000000000A5D0                 RET
.text:000000000000A5D4 ; ---------------------------------------------------------------------------
.text:000000000000A5D4 loc_A5D4                                ; CODE XREF: tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)+164↑j
.text:000000000000A5D4                 BL              .__stack_chk_fail
.text:000000000000A5D4 ; } // starts at A450
.text:000000000000A5D4 ; End of function tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000A5D8 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5D8 ; tinyxml2::XMLDocument::MarkInUse(tinyxml2::XMLNode *)
.text:000000000000A5D8                 EXPORT _ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE
.text:000000000000A5D8 _ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE
.text:000000000000A5D8                                         ; DATA XREF: LOAD:0000000000000AB0↑o
.text:000000000000A5D8 ; __unwind {
.text:000000000000A5D8                 LDRSW           X8, [X0,#0x104]
.text:000000000000A5DC                 CMP             W8, #1
.text:000000000000A5E0                 B.LT            locret_A60C
.text:000000000000A5E4                 LDR             X9, [X0,#0xA8]
.text:000000000000A5E8                 MOV             X10, XZR
.text:000000000000A5EC                 MOV             X11, X9
.text:000000000000A5F0 loc_A5F0                                ; CODE XREF: tinyxml2::XMLDocument::MarkInUse(tinyxml2::XMLNode *)+30↓j
.text:000000000000A5F0                 LDR             X12, [X11]
.text:000000000000A5F4                 CMP             X12, X1
.text:000000000000A5F8                 B.EQ            loc_A610
.text:000000000000A5FC                 ADD             X10, X10, #1
.text:000000000000A600                 ADD             X11, X11, #8
.text:000000000000A604                 CMP             X10, X8
.text:000000000000A608                 B.LT            loc_A5F0
.text:000000000000A60C locret_A60C                             ; CODE XREF: tinyxml2::XMLDocument::MarkInUse(tinyxml2::XMLNode *)+8↑j
.text:000000000000A60C                 RET
.text:000000000000A610 ; ---------------------------------------------------------------------------
.text:000000000000A610 loc_A610                                ; CODE XREF: tinyxml2::XMLDocument::MarkInUse(tinyxml2::XMLNode *)+20↑j
.text:000000000000A610                 SUB             W8, W8, #1
.text:000000000000A614                 LDR             X8, [X9,W8,SXTW#3]
.text:000000000000A618                 STR             X8, [X11]
.text:000000000000A61C                 LDR             W8, [X0,#0x104]
.text:000000000000A620                 SUB             W8, W8, #1
.text:000000000000A624                 STR             W8, [X0,#0x104]
.text:000000000000A628                 RET
.text:000000000000A628 ; } // starts at A5D8
.text:000000000000A628 ; End of function tinyxml2::XMLDocument::MarkInUse(tinyxml2::XMLNode *)
.text:000000000000A628 ; ---------------------------------------------------------------------------
.text:000000000000A62C                 ALIGN 0x10
.text:000000000000A630 ; =============== S U B R O U T I N E =======================================
.text:000000000000A630 ; Attributes: bp-based frame
.text:000000000000A630 ; _QWORD __fastcall tinyxml2::XMLText::ParseDeep(tinyxml2::XMLText *__hidden this, char *, tinyxml2::StrPair *, int *)
.text:000000000000A630                 EXPORT _ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000A630 _ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000A630                                         ; DATA XREF: LOAD:0000000000001788↑o
.text:000000000000A630                                         ; .data.rel.ro:0000000000012530↓o
.text:000000000000A630 var_10          = -0x10
.text:000000000000A630 var_s0          =  0
.text:000000000000A630 ; __unwind {
.text:000000000000A630                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000A634                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A638                 ADD             X29, SP, #0x10
.text:000000000000A63C                 LDRB            W8, [X0,#0x68]
.text:000000000000A640                 MOV             X4, X3  ; int *
.text:000000000000A644                 MOV             X19, X0
.text:000000000000A648                 CBZ             W8, loc_A670
.text:000000000000A64C                 ADRP            X2, #asc_4F2B@PAGE ; "]]>"
.text:000000000000A650                 ADD             X0, X19, #0x18 ; this
.text:000000000000A654                 ADD             X2, X2, #asc_4F2B@PAGEOFF ; "]]>"
.text:000000000000A658                 MOV             W3, #2  ; int
.text:000000000000A65C                 BL              ._ZN8tinyxml27StrPair9ParseTextEPcPKciPi ; tinyxml2::StrPair::ParseText(char *,char const*,int,int *)
.text:000000000000A660                 CBNZ            X0, loc_A6D0
.text:000000000000A664                 LDR             X0, [X19,#8]
.text:000000000000A668                 MOV             W1, #byte_9 ; char *
.text:000000000000A66C                 B               loc_A6C0
.text:000000000000A670 ; ---------------------------------------------------------------------------
.text:000000000000A670 loc_A670                                ; CODE XREF: tinyxml2::XMLText::ParseDeep(char *,tinyxml2::StrPair *,int *)+18↑j
.text:000000000000A670                 LDR             X8, [X19,#8]
.text:000000000000A674                 MOV             W10, #2
.text:000000000000A678                 ADRP            X2, #unk_4EA8@PAGE
.text:000000000000A67C                 ADD             X0, X19, #0x18 ; this
.text:000000000000A680                 ADD             X2, X2, #unk_4EA8@PAGEOFF ; char *
.text:000000000000A684                 LDRB            W9, [X8,#0x69]
.text:000000000000A688                 LDR             W8, [X8,#0x70]
.text:000000000000A68C                 CMP             W9, #0
.text:000000000000A690                 CINC            W9, W10, NE
.text:000000000000A694                 CMP             W8, #1
.text:000000000000A698                 ORR             W8, W9, #4
.text:000000000000A69C                 CSEL            W3, W8, W9, EQ ; int
.text:000000000000A6A0                 BL              ._ZN8tinyxml27StrPair9ParseTextEPcPKciPi ; tinyxml2::StrPair::ParseText(char *,char const*,int,int *)
.text:000000000000A6A4                 CBZ             X0, loc_A6B8
.text:000000000000A6A8                 LDRB            W8, [X0],#-1
.text:000000000000A6AC                 CMP             W8, #0
.text:000000000000A6B0                 CSEL            X0, XZR, X0, EQ
.text:000000000000A6B4                 B               loc_A6D0
.text:000000000000A6B8 ; ---------------------------------------------------------------------------
.text:000000000000A6B8 loc_A6B8                                ; CODE XREF: tinyxml2::XMLText::ParseDeep(char *,tinyxml2::StrPair *,int *)+74↑j
.text:000000000000A6B8                 LDR             X0, [X19,#8]
.text:000000000000A6BC                 MOV             W1, #8
.text:000000000000A6C0 loc_A6C0                                ; CODE XREF: tinyxml2::XMLText::ParseDeep(char *,tinyxml2::StrPair *,int *)+3C↑j
.text:000000000000A6C0                 LDR             W2, [X19,#0x30]
.text:000000000000A6C4                 MOV             X3, XZR
.text:000000000000A6C8                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000A6CC                 MOV             X0, XZR
.text:000000000000A6D0 loc_A6D0                                ; CODE XREF: tinyxml2::XMLText::ParseDeep(char *,tinyxml2::StrPair *,int *)+30↑j
.text:000000000000A6D0                                         ; tinyxml2::XMLText::ParseDeep(char *,tinyxml2::StrPair *,int *)+84↑j
.text:000000000000A6D0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A6D4                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000A6D8                 RET
.text:000000000000A6D8 ; } // starts at A630
.text:000000000000A6D8 ; End of function tinyxml2::XMLText::ParseDeep(char *,tinyxml2::StrPair *,int *)
.text:000000000000A6D8 ; ---------------------------------------------------------------------------
.text:000000000000A6DC                 ALIGN 0x20
.text:000000000000A6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A6E0 ; Attributes: bp-based frame
.text:000000000000A6E0 ; __int64 __fastcall tinyxml2::XMLText::ShallowClone(tinyxml2::XMLText *__hidden this, tinyxml2::XMLDocument *)
.text:000000000000A6E0                 EXPORT _ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000A6E0 _ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000A6E0                                         ; DATA XREF: LOAD:0000000000000B88↑o
.text:000000000000A6E0                                         ; .data.rel.ro:0000000000012508↓o
.text:000000000000A6E0 var_10          = -0x10
.text:000000000000A6E0 var_s0          =  0
.text:000000000000A6E0 ; __unwind {
.text:000000000000A6E0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000A6E4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A6E8                 ADD             X29, SP, #0x10
.text:000000000000A6EC                 MOV             X20, X1
.text:000000000000A6F0                 MOV             X19, X0
.text:000000000000A6F4                 CBNZ            X1, loc_A6FC
.text:000000000000A6F8                 LDR             X20, [X19,#8]
.text:000000000000A6FC loc_A6FC                                ; CODE XREF: tinyxml2::XMLText::ShallowClone(tinyxml2::XMLDocument *)+14↑j
.text:000000000000A6FC                 LDR             X8, [X19]
.text:000000000000A700                 MOV             X0, X19
.text:000000000000A704                 LDR             X8, [X8,#0x48]
.text:000000000000A708                 BLR             X8
.text:000000000000A70C                 CBZ             X0, loc_A718
.text:000000000000A710                 MOV             X1, XZR
.text:000000000000A714                 B               loc_A724
.text:000000000000A718 ; ---------------------------------------------------------------------------
.text:000000000000A718 loc_A718                                ; CODE XREF: tinyxml2::XMLText::ShallowClone(tinyxml2::XMLDocument *)+2C↑j
.text:000000000000A718                 ADD             X0, X19, #0x18 ; this
.text:000000000000A71C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000A720                 MOV             X1, X0  ; char *
.text:000000000000A724 loc_A724                                ; CODE XREF: tinyxml2::XMLText::ShallowClone(tinyxml2::XMLDocument *)+34↑j
.text:000000000000A724                 MOV             X0, X20 ; this
.text:000000000000A728                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000A72C                 LDRB            W8, [X19,#0x68]
.text:000000000000A730                 STRB            W8, [X0,#0x68]
.text:000000000000A734                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A738                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000A73C                 RET
.text:000000000000A73C ; } // starts at A6E0
.text:000000000000A73C ; End of function tinyxml2::XMLText::ShallowClone(tinyxml2::XMLDocument *)
.text:000000000000A740 ; =============== S U B R O U T I N E =======================================
.text:000000000000A740 ; Attributes: bp-based frame
.text:000000000000A740 ; __int64 __fastcall tinyxml2::XMLDocument::NewText(tinyxml2::XMLDocument *__hidden this, const char *)
.text:000000000000A740                 EXPORT _ZN8tinyxml211XMLDocument7NewTextEPKc
.text:000000000000A740 _ZN8tinyxml211XMLDocument7NewTextEPKc   ; CODE XREF: tinyxml2::XMLDocument::NewText(char const*)+C↓j
.text:000000000000A740                                         ; DATA XREF: LOAD:00000000000012D8↑o ...
.text:000000000000A740 var_40          = -0x40
.text:000000000000A740 var_30          = -0x30
.text:000000000000A740 var_20          = -0x20
.text:000000000000A740 var_10          = -0x10
.text:000000000000A740 var_s0          =  0
.text:000000000000A740 ; __unwind {
.text:000000000000A740                 STR             X25, [SP,#-0x10+var_40]!
.text:000000000000A744                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000000A748                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000000A74C                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000000A750                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000A754                 ADD             X29, SP, #0x40
.text:000000000000A758                 LDR             X8, [X0,#0x208]
.text:000000000000A75C                 ADD             X23, X0, #0x208
.text:000000000000A760                 MOV             X21, X0
.text:000000000000A764                 MOV             X0, X23
.text:000000000000A768                 MOV             X19, X1
.text:000000000000A76C                 LDR             X8, [X8,#0x18]
.text:000000000000A770                 BLR             X8
.text:000000000000A774                 ADRP            X8, #_ZTVN8tinyxml27XMLTextE_ptr@PAGE
.text:000000000000A778                 MOVI            V0.2D, #0
.text:000000000000A77C                 MOV             X22, X0
.text:000000000000A780                 MOV             X20, X0
.text:000000000000A784                 LDR             X8, [X8,#_ZTVN8tinyxml27XMLTextE_ptr@PAGEOFF]
.text:000000000000A788                 STP             X21, XZR, [X0,#8]
.text:000000000000A78C                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000A790                 STR             WZR, [X0,#0x30]
.text:000000000000A794                 ADD             X8, X8, #0x10
.text:000000000000A798                 STR             WZR, [X22,#0x18]!
.text:000000000000A79C                 STUR            Q0, [X0,#0x48]
.text:000000000000A7A0                 STR             X8, [X0]
.text:000000000000A7A4                 STUR            Q0, [X0,#0x38]
.text:000000000000A7A8                 STRB            WZR, [X0,#0x68]
.text:000000000000A7AC                 STP             XZR, X23, [X0,#0x58]
.text:000000000000A7B0                 LDR             W8, [X21,#0x104]
.text:000000000000A7B4                 LDR             W9, [X21,#0x100]
.text:000000000000A7B8                 CMP             W9, W8
.text:000000000000A7BC                 B.LE            loc_A7C8
.text:000000000000A7C0                 LDR             X23, [X21,#0xA8]
.text:000000000000A7C4                 B               loc_A81C
.text:000000000000A7C8 ; ---------------------------------------------------------------------------
.text:000000000000A7C8 loc_A7C8                                ; CODE XREF: tinyxml2::XMLDocument::NewText(char const*)+7C↑j
.text:000000000000A7C8                 LSL             W9, W8, #1
.text:000000000000A7CC                 ADD             W24, W9, #2
.text:000000000000A7D0                 SXTW            X9, W24
.text:000000000000A7D4                 CMP             XZR, X9,LSR#61
.text:000000000000A7D8                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:000000000000A7DC                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000A7E0                 SXTW            X25, W8
.text:000000000000A7E4                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000A7E8                 LDR             X1, [X21,#0xA8] ; src
.text:000000000000A7EC                 LSL             X2, X25, #3 ; n
.text:000000000000A7F0                 MOV             X23, X0
.text:000000000000A7F4                 BL              .memcpy
.text:000000000000A7F8                 LDR             X0, [X21,#0xA8] ; void *
.text:000000000000A7FC                 ADD             X8, X21, #0xB0
.text:000000000000A800                 CMP             X0, X8
.text:000000000000A804                 B.EQ            loc_A810
.text:000000000000A808                 CBZ             X0, loc_A810
.text:000000000000A80C                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000A810 loc_A810                                ; CODE XREF: tinyxml2::XMLDocument::NewText(char const*)+C4↑j
.text:000000000000A810                                         ; tinyxml2::XMLDocument::NewText(char const*)+C8↑j
.text:000000000000A810                 LDR             W8, [X21,#0x104]
.text:000000000000A814                 STR             X23, [X21,#0xA8]
.text:000000000000A818                 STR             W24, [X21,#0x100]
.text:000000000000A81C loc_A81C                                ; CODE XREF: tinyxml2::XMLDocument::NewText(char const*)+84↑j
.text:000000000000A81C                 STR             X20, [X23,W8,SXTW#3]
.text:000000000000A820                 MOV             X0, X22 ; this
.text:000000000000A824                 LDR             W8, [X21,#0x104]
.text:000000000000A828                 MOV             X1, X19 ; char *
.text:000000000000A82C                 MOV             W2, WZR ; int
.text:000000000000A830                 ADD             W8, W8, #1
.text:000000000000A834                 STR             W8, [X21,#0x104]
.text:000000000000A838                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000A83C                 MOV             X0, X20
.text:000000000000A840                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000A844                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000000A848                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000000A84C                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000000A850                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000000A854                 RET
.text:000000000000A854 ; } // starts at A740
.text:000000000000A854 ; End of function tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000A858 ; =============== S U B R O U T I N E =======================================
.text:000000000000A858 ; Attributes: bp-based frame
.text:000000000000A858 ; __int64 __fastcall tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLText *__hidden this, const tinyxml2::XMLNode *)
.text:000000000000A858                 EXPORT _ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000A858 _ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000A858                                         ; DATA XREF: LOAD:0000000000001110↑o
.text:000000000000A858                                         ; .data.rel.ro:0000000000012510↓o
.text:000000000000A858 var_10          = -0x10
.text:000000000000A858 var_s0          =  0
.text:000000000000A858 ; __unwind {
.text:000000000000A858                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000A85C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A860                 ADD             X29, SP, #0x10
.text:000000000000A864                 LDR             X8, [X1]
.text:000000000000A868                 MOV             X19, X0
.text:000000000000A86C                 MOV             X0, X1
.text:000000000000A870                 LDR             X8, [X8,#0x38]
.text:000000000000A874                 BLR             X8
.text:000000000000A878                 CBZ             X0, loc_A8F4
.text:000000000000A87C                 LDR             X8, [X0]
.text:000000000000A880                 MOV             X20, X0
.text:000000000000A884                 LDR             X8, [X8,#0x48]
.text:000000000000A888                 BLR             X8
.text:000000000000A88C                 CBZ             X0, loc_A898
.text:000000000000A890                 MOV             X20, XZR
.text:000000000000A894                 B               loc_A8A4
.text:000000000000A898 ; ---------------------------------------------------------------------------
.text:000000000000A898 loc_A898                                ; CODE XREF: tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)+34↑j
.text:000000000000A898                 ADD             X0, X20, #0x18 ; this
.text:000000000000A89C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000A8A0                 MOV             X20, X0
.text:000000000000A8A4 loc_A8A4                                ; CODE XREF: tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)+3C↑j
.text:000000000000A8A4                 LDR             X8, [X19]
.text:000000000000A8A8                 MOV             X0, X19
.text:000000000000A8AC                 LDR             X8, [X8,#0x48]
.text:000000000000A8B0                 BLR             X8
.text:000000000000A8B4                 CBZ             X0, loc_A8DC
.text:000000000000A8B8                 MOV             X1, XZR ; s2
.text:000000000000A8BC                 CMP             X20, X1
.text:000000000000A8C0                 B.EQ            loc_A8F0
.text:000000000000A8C4 loc_A8C4                                ; CODE XREF: tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)+94↓j
.text:000000000000A8C4                 MOV             X0, X20 ; s1
.text:000000000000A8C8                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000A8CC                 BL              .strncmp
.text:000000000000A8D0                 CMP             W0, #0
.text:000000000000A8D4                 CSET            W0, EQ
.text:000000000000A8D8                 B               loc_A8F4
.text:000000000000A8DC ; ---------------------------------------------------------------------------
.text:000000000000A8DC loc_A8DC                                ; CODE XREF: tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)+5C↑j
.text:000000000000A8DC                 ADD             X0, X19, #0x18 ; this
.text:000000000000A8E0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000A8E4                 MOV             X1, X0
.text:000000000000A8E8                 CMP             X20, X1
.text:000000000000A8EC                 B.NE            loc_A8C4
.text:000000000000A8F0 loc_A8F0                                ; CODE XREF: tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)+68↑j
.text:000000000000A8F0                 MOV             W0, #1
.text:000000000000A8F4 loc_A8F4                                ; CODE XREF: tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)+20↑j
.text:000000000000A8F4                                         ; tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)+80↑j
.text:000000000000A8F4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A8F8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000A8FC                 RET
.text:000000000000A8FC ; } // starts at A858
.text:000000000000A8FC ; End of function tinyxml2::XMLText::ShallowEqual(tinyxml2::XMLNode const*)
.text:000000000000A900 ; =============== S U B R O U T I N E =======================================
.text:000000000000A900 ; tinyxml2::XMLText::Accept(tinyxml2::XMLVisitor *)const
.text:000000000000A900                 EXPORT _ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE
.text:000000000000A900 _ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE
.text:000000000000A900                                         ; DATA XREF: LOAD:0000000000000AC8↑o
.text:000000000000A900                                         ; .data.rel.ro:0000000000012518↓o
.text:000000000000A900 ; __unwind {
.text:000000000000A900                 LDR             X9, [X1]
.text:000000000000A904                 MOV             X8, X0
.text:000000000000A908                 MOV             X0, X1
.text:000000000000A90C                 MOV             X1, X8
.text:000000000000A910                 LDR             X2, [X9,#0x38]
.text:000000000000A914                 BR              X2
.text:000000000000A914 ; } // starts at A900
.text:000000000000A914 ; End of function tinyxml2::XMLText::Accept(tinyxml2::XMLVisitor *)
.text:000000000000A918 ; =============== S U B R O U T I N E =======================================
.text:000000000000A918 ; tinyxml2::XMLComment::XMLComment(tinyxml2::XMLDocument *)
.text:000000000000A918                 EXPORT _ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE
.text:000000000000A918 _ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE
.text:000000000000A918                                         ; DATA XREF: LOAD:00000000000008B8↑o
.text:000000000000A918                                         ; LOAD:0000000000000CD8↑o
.text:000000000000A918 ; __unwind {
.text:000000000000A918                 ADRP            X8, #_ZTVN8tinyxml210XMLCommentE_ptr@PAGE ; Alternative name is 'tinyxml2::XMLComment::XMLComment(tinyxml2::XMLDocument *)'
.text:000000000000A91C                 MOVI            V0.2D, #0
.text:000000000000A920                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLCommentE_ptr@PAGEOFF]
.text:000000000000A924                 STP             X1, XZR, [X0,#8]
.text:000000000000A928                 STR             WZR, [X0,#0x18]
.text:000000000000A92C                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000A930                 ADD             X8, X8, #0x10
.text:000000000000A934                 STR             WZR, [X0,#0x30]
.text:000000000000A938                 STUR            Q0, [X0,#0x58]
.text:000000000000A93C                 STUR            Q0, [X0,#0x48]
.text:000000000000A940                 STR             X8, [X0]
.text:000000000000A944                 STUR            Q0, [X0,#0x38]
.text:000000000000A948                 RET
.text:000000000000A948 ; } // starts at A918
.text:000000000000A948 ; End of function tinyxml2::XMLComment::XMLComment(tinyxml2::XMLDocument *)
.text:000000000000A948 ; ---------------------------------------------------------------------------
.text:000000000000A94C                 ALIGN 0x10
.text:000000000000A950 ; =============== S U B R O U T I N E =======================================
.text:000000000000A950 ; Attributes: bp-based frame
.text:000000000000A950 ; void __fastcall tinyxml2::XMLComment::~XMLComment(tinyxml2::XMLComment *__hidden this)
.text:000000000000A950                 EXPORT _ZN8tinyxml210XMLCommentD0Ev
.text:000000000000A950 _ZN8tinyxml210XMLCommentD0Ev            ; DATA XREF: LOAD:0000000000001590↑o
.text:000000000000A950                                         ; .data.rel.ro:0000000000012190↓o
.text:000000000000A950 var_10          = -0x10
.text:000000000000A950 var_s0          =  0
.text:000000000000A950 ; __unwind {
.text:000000000000A950                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000A954                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A958                 ADD             X29, SP, #0x10
.text:000000000000A95C                 MOV             X19, X0
.text:000000000000A960                 BL              ._ZN8tinyxml27XMLNodeD2Ev ; tinyxml2::XMLNode::~XMLNode()
.text:000000000000A964                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A968                 MOV             X0, X19 ; void *
.text:000000000000A96C                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000A970                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000A970 ; } // starts at A950
.text:000000000000A970 ; End of function tinyxml2::XMLComment::~XMLComment()
.text:000000000000A970 ; ---------------------------------------------------------------------------
.text:000000000000A974                 ALIGN 8
.text:000000000000A978 ; =============== S U B R O U T I N E =======================================
.text:000000000000A978 ; Attributes: bp-based frame
.text:000000000000A978 ; _QWORD __fastcall tinyxml2::XMLComment::ParseDeep(tinyxml2::XMLComment *__hidden this, char *, tinyxml2::StrPair *, int *)
.text:000000000000A978                 EXPORT _ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000A978 _ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000A978                                         ; DATA XREF: LOAD:0000000000000858↑o
.text:000000000000A978                                         ; .data.rel.ro:0000000000012198↓o
.text:000000000000A978 var_10          = -0x10
.text:000000000000A978 var_s0          =  0
.text:000000000000A978 ; __unwind {
.text:000000000000A978                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000A97C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A980                 ADD             X29, SP, #0x10
.text:000000000000A984                 ADRP            X2, #asc_4F5A@PAGE ; "-->"
.text:000000000000A988                 MOV             X4, X3  ; int *
.text:000000000000A98C                 MOV             X19, X0
.text:000000000000A990                 ADD             X0, X0, #0x18 ; this
.text:000000000000A994                 ADD             X2, X2, #asc_4F5A@PAGEOFF ; "-->"
.text:000000000000A998                 MOV             W3, #2  ; int
.text:000000000000A99C                 BL              ._ZN8tinyxml27StrPair9ParseTextEPcPKciPi ; tinyxml2::StrPair::ParseText(char *,char const*,int,int *)
.text:000000000000A9A0                 MOV             X20, X0
.text:000000000000A9A4                 CBNZ            X0, loc_A9BC
.text:000000000000A9A8                 LDR             X0, [X19,#8]
.text:000000000000A9AC                 MOV             W1, #0xA
.text:000000000000A9B0                 LDR             W2, [X19,#0x30]
.text:000000000000A9B4                 MOV             X3, XZR
.text:000000000000A9B8                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000A9BC loc_A9BC                                ; CODE XREF: tinyxml2::XMLComment::ParseDeep(char *,tinyxml2::StrPair *,int *)+2C↑j
.text:000000000000A9BC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A9C0                 MOV             X0, X20
.text:000000000000A9C4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000A9C8                 RET
.text:000000000000A9C8 ; } // starts at A978
.text:000000000000A9C8 ; End of function tinyxml2::XMLComment::ParseDeep(char *,tinyxml2::StrPair *,int *)
.text:000000000000A9C8 ; ---------------------------------------------------------------------------
.text:000000000000A9CC                 ALIGN 0x10
.text:000000000000A9D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A9D0 ; Attributes: bp-based frame
.text:000000000000A9D0 ; __int64 __fastcall tinyxml2::XMLComment::ShallowClone(tinyxml2::XMLComment *__hidden this, tinyxml2::XMLDocument *)
.text:000000000000A9D0                 EXPORT _ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000A9D0 _ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000A9D0                                         ; DATA XREF: LOAD:0000000000001008↑o
.text:000000000000A9D0                                         ; .data.rel.ro:0000000000012170↓o
.text:000000000000A9D0 var_10          = -0x10
.text:000000000000A9D0 var_s0          =  0
.text:000000000000A9D0 ; __unwind {
.text:000000000000A9D0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000A9D4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000A9D8                 ADD             X29, SP, #0x10
.text:000000000000A9DC                 MOV             X19, X1
.text:000000000000A9E0                 MOV             X20, X0
.text:000000000000A9E4                 CBNZ            X1, loc_A9EC
.text:000000000000A9E8                 LDR             X19, [X20,#8]
.text:000000000000A9EC loc_A9EC                                ; CODE XREF: tinyxml2::XMLComment::ShallowClone(tinyxml2::XMLDocument *)+14↑j
.text:000000000000A9EC                 LDR             X8, [X20]
.text:000000000000A9F0                 MOV             X0, X20
.text:000000000000A9F4                 LDR             X8, [X8,#0x48]
.text:000000000000A9F8                 BLR             X8
.text:000000000000A9FC                 CBZ             X0, loc_AA08
.text:000000000000AA00                 MOV             X1, XZR
.text:000000000000AA04                 B               loc_AA14
.text:000000000000AA08 ; ---------------------------------------------------------------------------
.text:000000000000AA08 loc_AA08                                ; CODE XREF: tinyxml2::XMLComment::ShallowClone(tinyxml2::XMLDocument *)+2C↑j
.text:000000000000AA08                 ADD             X0, X20, #0x18 ; this
.text:000000000000AA0C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000AA10                 MOV             X1, X0  ; char *
.text:000000000000AA14 loc_AA14                                ; CODE XREF: tinyxml2::XMLComment::ShallowClone(tinyxml2::XMLDocument *)+34↑j
.text:000000000000AA14                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AA18                 MOV             X0, X19 ; this
.text:000000000000AA1C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000AA20                 B               ._ZN8tinyxml211XMLDocument10NewCommentEPKc ; tinyxml2::XMLDocument::NewComment(char const*)
.text:000000000000AA20 ; } // starts at A9D0
.text:000000000000AA20 ; End of function tinyxml2::XMLComment::ShallowClone(tinyxml2::XMLDocument *)
.text:000000000000AA20 ; ---------------------------------------------------------------------------
.text:000000000000AA24                 ALIGN 8
.text:000000000000AA28 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA28 ; Attributes: bp-based frame
.text:000000000000AA28 ; __int64 __fastcall tinyxml2::XMLDocument::NewComment(tinyxml2::XMLDocument *__hidden this, const char *)
.text:000000000000AA28                 EXPORT _ZN8tinyxml211XMLDocument10NewCommentEPKc
.text:000000000000AA28 _ZN8tinyxml211XMLDocument10NewCommentEPKc
.text:000000000000AA28                                         ; CODE XREF: tinyxml2::XMLDocument::NewComment(char const*)+C↓j
.text:000000000000AA28                                         ; DATA XREF: LOAD:00000000000006D8↑o ...
.text:000000000000AA28 var_40          = -0x40
.text:000000000000AA28 var_30          = -0x30
.text:000000000000AA28 var_20          = -0x20
.text:000000000000AA28 var_10          = -0x10
.text:000000000000AA28 var_s0          =  0
.text:000000000000AA28 ; __unwind {
.text:000000000000AA28                 STR             X25, [SP,#-0x10+var_40]!
.text:000000000000AA2C                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000000AA30                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000000AA34                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000000AA38                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000AA3C                 ADD             X29, SP, #0x40
.text:000000000000AA40                 LDR             X8, [X0,#0x288]
.text:000000000000AA44                 ADD             X23, X0, #0x288
.text:000000000000AA48                 MOV             X21, X0
.text:000000000000AA4C                 MOV             X0, X23
.text:000000000000AA50                 MOV             X19, X1
.text:000000000000AA54                 LDR             X8, [X8,#0x18]
.text:000000000000AA58                 BLR             X8
.text:000000000000AA5C                 ADRP            X8, #_ZTVN8tinyxml210XMLCommentE_ptr@PAGE
.text:000000000000AA60                 MOVI            V0.2D, #0
.text:000000000000AA64                 MOV             X22, X0
.text:000000000000AA68                 MOV             X20, X0
.text:000000000000AA6C                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLCommentE_ptr@PAGEOFF]
.text:000000000000AA70                 STP             X21, XZR, [X0,#8]
.text:000000000000AA74                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000AA78                 STR             WZR, [X0,#0x30]
.text:000000000000AA7C                 ADD             X8, X8, #0x10
.text:000000000000AA80                 STR             WZR, [X22,#0x18]!
.text:000000000000AA84                 STUR            Q0, [X0,#0x48]
.text:000000000000AA88                 STR             X8, [X0]
.text:000000000000AA8C                 STUR            Q0, [X0,#0x38]
.text:000000000000AA90                 STP             XZR, X23, [X0,#0x58]
.text:000000000000AA94                 LDR             W8, [X21,#0x104]
.text:000000000000AA98                 LDR             W9, [X21,#0x100]
.text:000000000000AA9C                 CMP             W9, W8
.text:000000000000AAA0                 B.LE            loc_AAAC
.text:000000000000AAA4                 LDR             X23, [X21,#0xA8]
.text:000000000000AAA8                 B               loc_AB00
.text:000000000000AAAC ; ---------------------------------------------------------------------------
.text:000000000000AAAC loc_AAAC                                ; CODE XREF: tinyxml2::XMLDocument::NewComment(char const*)+78↑j
.text:000000000000AAAC                 LSL             W9, W8, #1
.text:000000000000AAB0                 ADD             W24, W9, #2
.text:000000000000AAB4                 SXTW            X9, W24
.text:000000000000AAB8                 CMP             XZR, X9,LSR#61
.text:000000000000AABC                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:000000000000AAC0                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000AAC4                 SXTW            X25, W8
.text:000000000000AAC8                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000AACC                 LDR             X1, [X21,#0xA8] ; src
.text:000000000000AAD0                 LSL             X2, X25, #3 ; n
.text:000000000000AAD4                 MOV             X23, X0
.text:000000000000AAD8                 BL              .memcpy
.text:000000000000AADC                 LDR             X0, [X21,#0xA8] ; void *
.text:000000000000AAE0                 ADD             X8, X21, #0xB0
.text:000000000000AAE4                 CMP             X0, X8
.text:000000000000AAE8                 B.EQ            loc_AAF4
.text:000000000000AAEC                 CBZ             X0, loc_AAF4
.text:000000000000AAF0                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000AAF4 loc_AAF4                                ; CODE XREF: tinyxml2::XMLDocument::NewComment(char const*)+C0↑j
.text:000000000000AAF4                                         ; tinyxml2::XMLDocument::NewComment(char const*)+C4↑j
.text:000000000000AAF4                 LDR             W8, [X21,#0x104]
.text:000000000000AAF8                 STR             X23, [X21,#0xA8]
.text:000000000000AAFC                 STR             W24, [X21,#0x100]
.text:000000000000AB00 loc_AB00                                ; CODE XREF: tinyxml2::XMLDocument::NewComment(char const*)+80↑j
.text:000000000000AB00                 STR             X20, [X23,W8,SXTW#3]
.text:000000000000AB04                 MOV             X0, X22 ; this
.text:000000000000AB08                 LDR             W8, [X21,#0x104]
.text:000000000000AB0C                 MOV             X1, X19 ; char *
.text:000000000000AB10                 MOV             W2, WZR ; int
.text:000000000000AB14                 ADD             W8, W8, #1
.text:000000000000AB18                 STR             W8, [X21,#0x104]
.text:000000000000AB1C                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000AB20                 MOV             X0, X20
.text:000000000000AB24                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000AB28                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000000AB2C                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000000AB30                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000000AB34                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000000AB38                 RET
.text:000000000000AB38 ; } // starts at AA28
.text:000000000000AB38 ; End of function tinyxml2::XMLDocument::NewComment(char const*)
.text:000000000000AB38 ; ---------------------------------------------------------------------------
.text:000000000000AB3C                 ALIGN 0x20
.text:000000000000AB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB40 ; Attributes: bp-based frame
.text:000000000000AB40 ; __int64 __fastcall tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLComment *__hidden this, const tinyxml2::XMLNode *)
.text:000000000000AB40                 EXPORT _ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000AB40 _ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000AB40                                         ; DATA XREF: LOAD:0000000000000750↑o
.text:000000000000AB40                                         ; .data.rel.ro:0000000000012178↓o
.text:000000000000AB40 var_10          = -0x10
.text:000000000000AB40 var_s0          =  0
.text:000000000000AB40 ; __unwind {
.text:000000000000AB40                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000AB44                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AB48                 ADD             X29, SP, #0x10
.text:000000000000AB4C                 LDR             X8, [X1]
.text:000000000000AB50                 MOV             X19, X0
.text:000000000000AB54                 MOV             X0, X1
.text:000000000000AB58                 LDR             X8, [X8,#0x40]
.text:000000000000AB5C                 BLR             X8
.text:000000000000AB60                 CBZ             X0, loc_ABDC
.text:000000000000AB64                 LDR             X8, [X0]
.text:000000000000AB68                 MOV             X20, X0
.text:000000000000AB6C                 LDR             X8, [X8,#0x48]
.text:000000000000AB70                 BLR             X8
.text:000000000000AB74                 CBZ             X0, loc_AB80
.text:000000000000AB78                 MOV             X20, XZR
.text:000000000000AB7C                 B               loc_AB8C
.text:000000000000AB80 ; ---------------------------------------------------------------------------
.text:000000000000AB80 loc_AB80                                ; CODE XREF: tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)+34↑j
.text:000000000000AB80                 ADD             X0, X20, #0x18 ; this
.text:000000000000AB84                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000AB88                 MOV             X20, X0
.text:000000000000AB8C loc_AB8C                                ; CODE XREF: tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)+3C↑j
.text:000000000000AB8C                 LDR             X8, [X19]
.text:000000000000AB90                 MOV             X0, X19
.text:000000000000AB94                 LDR             X8, [X8,#0x48]
.text:000000000000AB98                 BLR             X8
.text:000000000000AB9C                 CBZ             X0, loc_ABC4
.text:000000000000ABA0                 MOV             X1, XZR ; s2
.text:000000000000ABA4                 CMP             X20, X1
.text:000000000000ABA8                 B.EQ            loc_ABD8
.text:000000000000ABAC loc_ABAC                                ; CODE XREF: tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)+94↓j
.text:000000000000ABAC                 MOV             X0, X20 ; s1
.text:000000000000ABB0                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000ABB4                 BL              .strncmp
.text:000000000000ABB8                 CMP             W0, #0
.text:000000000000ABBC                 CSET            W0, EQ
.text:000000000000ABC0                 B               loc_ABDC
.text:000000000000ABC4 ; ---------------------------------------------------------------------------
.text:000000000000ABC4 loc_ABC4                                ; CODE XREF: tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)+5C↑j
.text:000000000000ABC4                 ADD             X0, X19, #0x18 ; this
.text:000000000000ABC8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000ABCC                 MOV             X1, X0
.text:000000000000ABD0                 CMP             X20, X1
.text:000000000000ABD4                 B.NE            loc_ABAC
.text:000000000000ABD8 loc_ABD8                                ; CODE XREF: tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)+68↑j
.text:000000000000ABD8                 MOV             W0, #1
.text:000000000000ABDC loc_ABDC                                ; CODE XREF: tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)+20↑j
.text:000000000000ABDC                                         ; tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)+80↑j
.text:000000000000ABDC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000ABE0                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000ABE4                 RET
.text:000000000000ABE4 ; } // starts at AB40
.text:000000000000ABE4 ; End of function tinyxml2::XMLComment::ShallowEqual(tinyxml2::XMLNode const*)
.text:000000000000ABE8 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABE8 ; tinyxml2::XMLComment::Accept(tinyxml2::XMLVisitor *)const
.text:000000000000ABE8                 EXPORT _ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE
.text:000000000000ABE8 _ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE
.text:000000000000ABE8                                         ; DATA XREF: LOAD:0000000000000630↑o
.text:000000000000ABE8                                         ; .data.rel.ro:0000000000012180↓o
.text:000000000000ABE8 ; __unwind {
.text:000000000000ABE8                 LDR             X9, [X1]
.text:000000000000ABEC                 MOV             X8, X0
.text:000000000000ABF0                 MOV             X0, X1
.text:000000000000ABF4                 MOV             X1, X8
.text:000000000000ABF8                 LDR             X2, [X9,#0x40]
.text:000000000000ABFC                 BR              X2
.text:000000000000ABFC ; } // starts at ABE8
.text:000000000000ABFC ; End of function tinyxml2::XMLComment::Accept(tinyxml2::XMLVisitor *)
.text:000000000000AC00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC00 ; tinyxml2::XMLDeclaration::XMLDeclaration(tinyxml2::XMLDocument *)
.text:000000000000AC00                 EXPORT _ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE
.text:000000000000AC00 _ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE
.text:000000000000AC00                                         ; DATA XREF: LOAD:0000000000000F30↑o
.text:000000000000AC00                                         ; LOAD:00000000000013E0↑o
.text:000000000000AC00 ; __unwind {
.text:000000000000AC00                 ADRP            X8, #_ZTVN8tinyxml214XMLDeclarationE_ptr@PAGE
.text:000000000000AC04                 MOVI            V0.2D, #0
.text:000000000000AC08                 LDR             X8, [X8,#_ZTVN8tinyxml214XMLDeclarationE_ptr@PAGEOFF]
.text:000000000000AC0C                 STP             X1, XZR, [X0,#8]
.text:000000000000AC10                 STR             WZR, [X0,#0x18]
.text:000000000000AC14                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000AC18                 ADD             X8, X8, #0x10
.text:000000000000AC1C                 STR             WZR, [X0,#0x30]
.text:000000000000AC20                 STUR            Q0, [X0,#0x58]
.text:000000000000AC24                 STUR            Q0, [X0,#0x48]
.text:000000000000AC28                 STR             X8, [X0]
.text:000000000000AC2C                 STUR            Q0, [X0,#0x38]
.text:000000000000AC30                 RET
.text:000000000000AC30 ; } // starts at AC00
.text:000000000000AC30 ; End of function tinyxml2::XMLDeclaration::XMLDeclaration(tinyxml2::XMLDocument *)
.text:000000000000AC30 ; ---------------------------------------------------------------------------
.text:000000000000AC34                 ALIGN 8
.text:000000000000AC38 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC38 ; Attributes: bp-based frame
.text:000000000000AC38 ; void __fastcall tinyxml2::XMLDeclaration::~XMLDeclaration(tinyxml2::XMLDeclaration *__hidden this)
.text:000000000000AC38                 EXPORT _ZN8tinyxml214XMLDeclarationD0Ev
.text:000000000000AC38 _ZN8tinyxml214XMLDeclarationD0Ev        ; DATA XREF: LOAD:0000000000000600↑o
.text:000000000000AC38                                         ; .data.rel.ro:0000000000012230↓o
.text:000000000000AC38 var_10          = -0x10
.text:000000000000AC38 var_s0          =  0
.text:000000000000AC38 ; __unwind {
.text:000000000000AC38                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000AC3C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AC40                 ADD             X29, SP, #0x10
.text:000000000000AC44                 MOV             X19, X0
.text:000000000000AC48                 BL              ._ZN8tinyxml27XMLNodeD2Ev ; tinyxml2::XMLNode::~XMLNode()
.text:000000000000AC4C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AC50                 MOV             X0, X19 ; void *
.text:000000000000AC54                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000AC58                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000AC58 ; } // starts at AC38
.text:000000000000AC58 ; End of function tinyxml2::XMLDeclaration::~XMLDeclaration()
.text:000000000000AC58 ; ---------------------------------------------------------------------------
.text:000000000000AC5C                 ALIGN 0x20
.text:000000000000AC60 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC60 ; Attributes: bp-based frame
.text:000000000000AC60 ; _QWORD __fastcall tinyxml2::XMLDeclaration::ParseDeep(tinyxml2::XMLDeclaration *__hidden this, char *, tinyxml2::StrPair *, int *)
.text:000000000000AC60                 EXPORT _ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000AC60 _ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000AC60                                         ; DATA XREF: LOAD:0000000000001920↑o
.text:000000000000AC60                                         ; .data.rel.ro:0000000000012238↓o
.text:000000000000AC60 var_10          = -0x10
.text:000000000000AC60 var_s0          =  0
.text:000000000000AC60 ; __unwind {
.text:000000000000AC60                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000AC64                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AC68                 ADD             X29, SP, #0x10
.text:000000000000AC6C                 ADRP            X2, #asc_503D@PAGE ; "?>"
.text:000000000000AC70                 MOV             X4, X3  ; int *
.text:000000000000AC74                 MOV             X19, X0
.text:000000000000AC78                 ADD             X0, X0, #0x18 ; this
.text:000000000000AC7C                 ADD             X2, X2, #asc_503D@PAGEOFF ; "?>"
.text:000000000000AC80                 MOV             W3, #2  ; int
.text:000000000000AC84                 BL              ._ZN8tinyxml27StrPair9ParseTextEPcPKciPi ; tinyxml2::StrPair::ParseText(char *,char const*,int,int *)
.text:000000000000AC88                 MOV             X20, X0
.text:000000000000AC8C                 CBNZ            X0, loc_ACA4
.text:000000000000AC90                 LDR             X0, [X19,#8]
.text:000000000000AC94                 MOV             W1, #0xB
.text:000000000000AC98                 LDR             W2, [X19,#0x30]
.text:000000000000AC9C                 MOV             X3, XZR
.text:000000000000ACA0                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000ACA4 loc_ACA4                                ; CODE XREF: tinyxml2::XMLDeclaration::ParseDeep(char *,tinyxml2::StrPair *,int *)+2C↑j
.text:000000000000ACA4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000ACA8                 MOV             X0, X20
.text:000000000000ACAC                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000ACB0                 RET
.text:000000000000ACB0 ; } // starts at AC60
.text:000000000000ACB0 ; End of function tinyxml2::XMLDeclaration::ParseDeep(char *,tinyxml2::StrPair *,int *)
.text:000000000000ACB0 ; ---------------------------------------------------------------------------
.text:000000000000ACB4                 ALIGN 8
.text:000000000000ACB8 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACB8 ; Attributes: bp-based frame
.text:000000000000ACB8 ; __int64 __fastcall tinyxml2::XMLDeclaration::ShallowClone(tinyxml2::XMLDeclaration *__hidden this, tinyxml2::XMLDocument *)
.text:000000000000ACB8                 EXPORT _ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000ACB8 _ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000ACB8                                         ; DATA XREF: LOAD:0000000000001080↑o
.text:000000000000ACB8                                         ; .data.rel.ro:0000000000012210↓o
.text:000000000000ACB8 var_10          = -0x10
.text:000000000000ACB8 var_s0          =  0
.text:000000000000ACB8 ; __unwind {
.text:000000000000ACB8                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000ACBC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000ACC0                 ADD             X29, SP, #0x10
.text:000000000000ACC4                 MOV             X19, X1
.text:000000000000ACC8                 MOV             X20, X0
.text:000000000000ACCC                 CBNZ            X1, loc_ACD4
.text:000000000000ACD0                 LDR             X19, [X20,#8]
.text:000000000000ACD4 loc_ACD4                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowClone(tinyxml2::XMLDocument *)+14↑j
.text:000000000000ACD4                 LDR             X8, [X20]
.text:000000000000ACD8                 MOV             X0, X20
.text:000000000000ACDC                 LDR             X8, [X8,#0x48]
.text:000000000000ACE0                 BLR             X8
.text:000000000000ACE4                 CBZ             X0, loc_ACF0
.text:000000000000ACE8                 MOV             X1, XZR
.text:000000000000ACEC                 B               loc_ACFC
.text:000000000000ACF0 ; ---------------------------------------------------------------------------
.text:000000000000ACF0 loc_ACF0                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowClone(tinyxml2::XMLDocument *)+2C↑j
.text:000000000000ACF0                 ADD             X0, X20, #0x18 ; this
.text:000000000000ACF4                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000ACF8                 MOV             X1, X0  ; char *
.text:000000000000ACFC loc_ACFC                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowClone(tinyxml2::XMLDocument *)+34↑j
.text:000000000000ACFC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AD00                 MOV             X0, X19 ; this
.text:000000000000AD04                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000AD08                 B               ._ZN8tinyxml211XMLDocument14NewDeclarationEPKc ; tinyxml2::XMLDocument::NewDeclaration(char const*)
.text:000000000000AD08 ; } // starts at ACB8
.text:000000000000AD08 ; End of function tinyxml2::XMLDeclaration::ShallowClone(tinyxml2::XMLDocument *)
.text:000000000000AD08 ; ---------------------------------------------------------------------------
.text:000000000000AD0C                 ALIGN 0x10
.text:000000000000AD10 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD10 ; Attributes: bp-based frame
.text:000000000000AD10 ; __int64 __fastcall tinyxml2::XMLDocument::NewDeclaration(tinyxml2::XMLDocument *__hidden this, const char *)
.text:000000000000AD10                 EXPORT _ZN8tinyxml211XMLDocument14NewDeclarationEPKc
.text:000000000000AD10 _ZN8tinyxml211XMLDocument14NewDeclarationEPKc
.text:000000000000AD10                                         ; CODE XREF: tinyxml2::XMLDocument::NewDeclaration(char const*)+C↓j
.text:000000000000AD10                                         ; DATA XREF: LOAD:0000000000001758↑o ...
.text:000000000000AD10 var_40          = -0x40
.text:000000000000AD10 var_30          = -0x30
.text:000000000000AD10 var_20          = -0x20
.text:000000000000AD10 var_10          = -0x10
.text:000000000000AD10 var_s0          =  0
.text:000000000000AD10 ; __unwind {
.text:000000000000AD10                 STR             X25, [SP,#-0x10+var_40]!
.text:000000000000AD14                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000000AD18                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000000AD1C                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000000AD20                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000AD24                 ADD             X29, SP, #0x40
.text:000000000000AD28                 LDR             X8, [X0,#0x288]
.text:000000000000AD2C                 ADD             X23, X0, #0x288
.text:000000000000AD30                 MOV             X20, X0
.text:000000000000AD34                 MOV             X0, X23
.text:000000000000AD38                 MOV             X19, X1
.text:000000000000AD3C                 LDR             X8, [X8,#0x18]
.text:000000000000AD40                 BLR             X8
.text:000000000000AD44                 ADRP            X8, #_ZTVN8tinyxml214XMLDeclarationE_ptr@PAGE
.text:000000000000AD48                 MOVI            V0.2D, #0
.text:000000000000AD4C                 MOV             X22, X0
.text:000000000000AD50                 MOV             X21, X0
.text:000000000000AD54                 LDR             X8, [X8,#_ZTVN8tinyxml214XMLDeclarationE_ptr@PAGEOFF]
.text:000000000000AD58                 STP             X20, XZR, [X0,#8]
.text:000000000000AD5C                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000AD60                 STR             WZR, [X0,#0x30]
.text:000000000000AD64                 ADD             X8, X8, #0x10
.text:000000000000AD68                 STR             WZR, [X22,#0x18]!
.text:000000000000AD6C                 STUR            Q0, [X0,#0x48]
.text:000000000000AD70                 STR             X8, [X0]
.text:000000000000AD74                 STUR            Q0, [X0,#0x38]
.text:000000000000AD78                 STP             XZR, X23, [X0,#0x58]
.text:000000000000AD7C                 LDR             W8, [X20,#0x104]
.text:000000000000AD80                 LDR             W9, [X20,#0x100]
.text:000000000000AD84                 CMP             W9, W8
.text:000000000000AD88                 B.LE            loc_AD94
.text:000000000000AD8C                 LDR             X23, [X20,#0xA8]
.text:000000000000AD90                 B               loc_ADE8
.text:000000000000AD94 ; ---------------------------------------------------------------------------
.text:000000000000AD94 loc_AD94                                ; CODE XREF: tinyxml2::XMLDocument::NewDeclaration(char const*)+78↑j
.text:000000000000AD94                 LSL             W9, W8, #1
.text:000000000000AD98                 ADD             W24, W9, #2
.text:000000000000AD9C                 SXTW            X9, W24
.text:000000000000ADA0                 CMP             XZR, X9,LSR#61
.text:000000000000ADA4                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:000000000000ADA8                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000ADAC                 SXTW            X25, W8
.text:000000000000ADB0                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000ADB4                 LDR             X1, [X20,#0xA8] ; src
.text:000000000000ADB8                 LSL             X2, X25, #3 ; n
.text:000000000000ADBC                 MOV             X23, X0
.text:000000000000ADC0                 BL              .memcpy
.text:000000000000ADC4                 LDR             X0, [X20,#0xA8] ; void *
.text:000000000000ADC8                 ADD             X8, X20, #0xB0
.text:000000000000ADCC                 CMP             X0, X8
.text:000000000000ADD0                 B.EQ            loc_ADDC
.text:000000000000ADD4                 CBZ             X0, loc_ADDC
.text:000000000000ADD8                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000ADDC loc_ADDC                                ; CODE XREF: tinyxml2::XMLDocument::NewDeclaration(char const*)+C0↑j
.text:000000000000ADDC                                         ; tinyxml2::XMLDocument::NewDeclaration(char const*)+C4↑j
.text:000000000000ADDC                 LDR             W8, [X20,#0x104]
.text:000000000000ADE0                 STR             X23, [X20,#0xA8]
.text:000000000000ADE4                 STR             W24, [X20,#0x100]
.text:000000000000ADE8 loc_ADE8                                ; CODE XREF: tinyxml2::XMLDocument::NewDeclaration(char const*)+80↑j
.text:000000000000ADE8                 STR             X21, [X23,W8,SXTW#3]
.text:000000000000ADEC                 ADRP            X9, #aXmlVersion10En@PAGE ; "xml version=\"1.0\" encoding=\"UTF-8\""
.text:000000000000ADF0                 LDR             W8, [X20,#0x104]
.text:000000000000ADF4                 ADD             X9, X9, #aXmlVersion10En@PAGEOFF ; "xml version=\"1.0\" encoding=\"UTF-8\""
.text:000000000000ADF8                 CMP             X19, #0
.text:000000000000ADFC                 CSEL            X1, X9, X19, EQ ; char *
.text:000000000000AE00                 MOV             X0, X22 ; this
.text:000000000000AE04                 ADD             W8, W8, #1
.text:000000000000AE08                 MOV             W2, WZR ; int
.text:000000000000AE0C                 STR             W8, [X20,#0x104]
.text:000000000000AE10                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000AE14                 MOV             X0, X21
.text:000000000000AE18                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000AE1C                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000000AE20                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000000AE24                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000000AE28                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000000AE2C                 RET
.text:000000000000AE2C ; } // starts at AD10
.text:000000000000AE2C ; End of function tinyxml2::XMLDocument::NewDeclaration(char const*)
.text:000000000000AE30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE30 ; Attributes: bp-based frame
.text:000000000000AE30 ; __int64 __fastcall tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLDeclaration *__hidden this, const tinyxml2::XMLNode *)
.text:000000000000AE30                 EXPORT _ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000AE30 _ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000AE30                                         ; DATA XREF: LOAD:00000000000017D0↑o
.text:000000000000AE30                                         ; .data.rel.ro:0000000000012218↓o
.text:000000000000AE30 var_10          = -0x10
.text:000000000000AE30 var_s0          =  0
.text:000000000000AE30 ; __unwind {
.text:000000000000AE30                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000AE34                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AE38                 ADD             X29, SP, #0x10
.text:000000000000AE3C                 LDR             X8, [X1]
.text:000000000000AE40                 MOV             X19, X0
.text:000000000000AE44                 MOV             X0, X1
.text:000000000000AE48                 LDR             X8, [X8,#0x50]
.text:000000000000AE4C                 BLR             X8
.text:000000000000AE50                 CBZ             X0, loc_AECC
.text:000000000000AE54                 LDR             X8, [X0]
.text:000000000000AE58                 MOV             X20, X0
.text:000000000000AE5C                 LDR             X8, [X8,#0x48]
.text:000000000000AE60                 BLR             X8
.text:000000000000AE64                 CBZ             X0, loc_AE70
.text:000000000000AE68                 MOV             X20, XZR
.text:000000000000AE6C                 B               loc_AE7C
.text:000000000000AE70 ; ---------------------------------------------------------------------------
.text:000000000000AE70 loc_AE70                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)+34↑j
.text:000000000000AE70                 ADD             X0, X20, #0x18 ; this
.text:000000000000AE74                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000AE78                 MOV             X20, X0
.text:000000000000AE7C loc_AE7C                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)+3C↑j
.text:000000000000AE7C                 LDR             X8, [X19]
.text:000000000000AE80                 MOV             X0, X19
.text:000000000000AE84                 LDR             X8, [X8,#0x48]
.text:000000000000AE88                 BLR             X8
.text:000000000000AE8C                 CBZ             X0, loc_AEB4
.text:000000000000AE90                 MOV             X1, XZR ; s2
.text:000000000000AE94                 CMP             X20, X1
.text:000000000000AE98                 B.EQ            loc_AEC8
.text:000000000000AE9C loc_AE9C                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)+94↓j
.text:000000000000AE9C                 MOV             X0, X20 ; s1
.text:000000000000AEA0                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000AEA4                 BL              .strncmp
.text:000000000000AEA8                 CMP             W0, #0
.text:000000000000AEAC                 CSET            W0, EQ
.text:000000000000AEB0                 B               loc_AECC
.text:000000000000AEB4 ; ---------------------------------------------------------------------------
.text:000000000000AEB4 loc_AEB4                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)+5C↑j
.text:000000000000AEB4                 ADD             X0, X19, #0x18 ; this
.text:000000000000AEB8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000AEBC                 MOV             X1, X0
.text:000000000000AEC0                 CMP             X20, X1
.text:000000000000AEC4                 B.NE            loc_AE9C
.text:000000000000AEC8 loc_AEC8                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)+68↑j
.text:000000000000AEC8                 MOV             W0, #1
.text:000000000000AECC loc_AECC                                ; CODE XREF: tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)+20↑j
.text:000000000000AECC                                         ; tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)+80↑j
.text:000000000000AECC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AED0                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000AED4                 RET
.text:000000000000AED4 ; } // starts at AE30
.text:000000000000AED4 ; End of function tinyxml2::XMLDeclaration::ShallowEqual(tinyxml2::XMLNode const*)
.text:000000000000AED8 ; =============== S U B R O U T I N E =======================================
.text:000000000000AED8 ; tinyxml2::XMLDeclaration::Accept(tinyxml2::XMLVisitor *)const
.text:000000000000AED8                 EXPORT _ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE
.text:000000000000AED8 _ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE
.text:000000000000AED8                                         ; DATA XREF: LOAD:00000000000018D8↑o
.text:000000000000AED8                                         ; .data.rel.ro:0000000000012220↓o
.text:000000000000AED8 ; __unwind {
.text:000000000000AED8                 LDR             X9, [X1]
.text:000000000000AEDC                 MOV             X8, X0
.text:000000000000AEE0                 MOV             X0, X1
.text:000000000000AEE4                 MOV             X1, X8
.text:000000000000AEE8                 LDR             X2, [X9,#0x30]
.text:000000000000AEEC                 BR              X2
.text:000000000000AEEC ; } // starts at AED8
.text:000000000000AEEC ; End of function tinyxml2::XMLDeclaration::Accept(tinyxml2::XMLVisitor *)
.text:000000000000AEF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AEF0 ; tinyxml2::XMLUnknown::XMLUnknown(tinyxml2::XMLDocument *)
.text:000000000000AEF0                 EXPORT _ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE
.text:000000000000AEF0 _ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE
.text:000000000000AEF0                                         ; DATA XREF: LOAD:00000000000012C0↑o
.text:000000000000AEF0                                         ; LOAD:00000000000016E0↑o
.text:000000000000AEF0 ; __unwind {
.text:000000000000AEF0                 ADRP            X8, #_ZTVN8tinyxml210XMLUnknownE_ptr@PAGE ; Alternative name is 'tinyxml2::XMLUnknown::XMLUnknown(tinyxml2::XMLDocument *)'
.text:000000000000AEF4                 MOVI            V0.2D, #0
.text:000000000000AEF8                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLUnknownE_ptr@PAGEOFF]
.text:000000000000AEFC                 STP             X1, XZR, [X0,#8]
.text:000000000000AF00                 STR             WZR, [X0,#0x18]
.text:000000000000AF04                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000AF08                 ADD             X8, X8, #0x10
.text:000000000000AF0C                 STR             WZR, [X0,#0x30]
.text:000000000000AF10                 STUR            Q0, [X0,#0x58]
.text:000000000000AF14                 STUR            Q0, [X0,#0x48]
.text:000000000000AF18                 STR             X8, [X0]
.text:000000000000AF1C                 STUR            Q0, [X0,#0x38]
.text:000000000000AF20                 RET
.text:000000000000AF20 ; } // starts at AEF0
.text:000000000000AF20 ; End of function tinyxml2::XMLUnknown::XMLUnknown(tinyxml2::XMLDocument *)
.text:000000000000AF20 ; ---------------------------------------------------------------------------
.text:000000000000AF24                 ALIGN 8
.text:000000000000AF28 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF28 ; Attributes: bp-based frame
.text:000000000000AF28 ; void __fastcall tinyxml2::XMLUnknown::~XMLUnknown(tinyxml2::XMLUnknown *__hidden this)
.text:000000000000AF28                 EXPORT _ZN8tinyxml210XMLUnknownD0Ev
.text:000000000000AF28 _ZN8tinyxml210XMLUnknownD0Ev            ; DATA XREF: LOAD:0000000000001218↑o
.text:000000000000AF28                                         ; .data.rel.ro:00000000000122D0↓o
.text:000000000000AF28 var_10          = -0x10
.text:000000000000AF28 var_s0          =  0
.text:000000000000AF28 ; __unwind {
.text:000000000000AF28                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000AF2C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AF30                 ADD             X29, SP, #0x10
.text:000000000000AF34                 MOV             X19, X0
.text:000000000000AF38                 BL              ._ZN8tinyxml27XMLNodeD2Ev ; tinyxml2::XMLNode::~XMLNode()
.text:000000000000AF3C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AF40                 MOV             X0, X19 ; void *
.text:000000000000AF44                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000AF48                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000AF48 ; } // starts at AF28
.text:000000000000AF48 ; End of function tinyxml2::XMLUnknown::~XMLUnknown()
.text:000000000000AF48 ; ---------------------------------------------------------------------------
.text:000000000000AF4C                 ALIGN 0x10
.text:000000000000AF50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF50 ; Attributes: bp-based frame
.text:000000000000AF50 ; _QWORD __fastcall tinyxml2::XMLUnknown::ParseDeep(tinyxml2::XMLUnknown *__hidden this, char *, tinyxml2::StrPair *, int *)
.text:000000000000AF50                 EXPORT _ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000AF50 _ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000AF50                                         ; DATA XREF: LOAD:0000000000000C30↑o
.text:000000000000AF50                                         ; .data.rel.ro:00000000000122D8↓o
.text:000000000000AF50 var_10          = -0x10
.text:000000000000AF50 var_s0          =  0
.text:000000000000AF50 ; __unwind {
.text:000000000000AF50                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000AF54                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AF58                 ADD             X29, SP, #0x10
.text:000000000000AF5C                 ADRP            X2, #asc_4FF7@PAGE ; ">"
.text:000000000000AF60                 MOV             X4, X3  ; int *
.text:000000000000AF64                 MOV             X19, X0
.text:000000000000AF68                 ADD             X0, X0, #0x18 ; this
.text:000000000000AF6C                 ADD             X2, X2, #asc_4FF7@PAGEOFF ; ">"
.text:000000000000AF70                 MOV             W3, #2  ; int
.text:000000000000AF74                 BL              ._ZN8tinyxml27StrPair9ParseTextEPcPKciPi ; tinyxml2::StrPair::ParseText(char *,char const*,int,int *)
.text:000000000000AF78                 MOV             X20, X0
.text:000000000000AF7C                 CBNZ            X0, loc_AF94
.text:000000000000AF80                 LDR             X0, [X19,#8]
.text:000000000000AF84                 MOV             W1, #0xC
.text:000000000000AF88                 LDR             W2, [X19,#0x30]
.text:000000000000AF8C                 MOV             X3, XZR
.text:000000000000AF90                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000AF94 loc_AF94                                ; CODE XREF: tinyxml2::XMLUnknown::ParseDeep(char *,tinyxml2::StrPair *,int *)+2C↑j
.text:000000000000AF94                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AF98                 MOV             X0, X20
.text:000000000000AF9C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000AFA0                 RET
.text:000000000000AFA0 ; } // starts at AF50
.text:000000000000AFA0 ; End of function tinyxml2::XMLUnknown::ParseDeep(char *,tinyxml2::StrPair *,int *)
.text:000000000000AFA0 ; ---------------------------------------------------------------------------
.text:000000000000AFA4                 ALIGN 8
.text:000000000000AFA8 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFA8 ; Attributes: bp-based frame
.text:000000000000AFA8 ; __int64 __fastcall tinyxml2::XMLUnknown::ShallowClone(tinyxml2::XMLUnknown *__hidden this, tinyxml2::XMLDocument *)
.text:000000000000AFA8                 EXPORT _ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000AFA8 _ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000AFA8                                         ; DATA XREF: LOAD:00000000000016C8↑o
.text:000000000000AFA8                                         ; .data.rel.ro:00000000000122B0↓o
.text:000000000000AFA8 var_10          = -0x10
.text:000000000000AFA8 var_s0          =  0
.text:000000000000AFA8 ; __unwind {
.text:000000000000AFA8                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000AFAC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AFB0                 ADD             X29, SP, #0x10
.text:000000000000AFB4                 MOV             X19, X1
.text:000000000000AFB8                 MOV             X20, X0
.text:000000000000AFBC                 CBNZ            X1, loc_AFC4
.text:000000000000AFC0                 LDR             X19, [X20,#8]
.text:000000000000AFC4 loc_AFC4                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowClone(tinyxml2::XMLDocument *)+14↑j
.text:000000000000AFC4                 LDR             X8, [X20]
.text:000000000000AFC8                 MOV             X0, X20
.text:000000000000AFCC                 LDR             X8, [X8,#0x48]
.text:000000000000AFD0                 BLR             X8
.text:000000000000AFD4                 CBZ             X0, loc_AFE0
.text:000000000000AFD8                 MOV             X1, XZR
.text:000000000000AFDC                 B               loc_AFEC
.text:000000000000AFE0 ; ---------------------------------------------------------------------------
.text:000000000000AFE0 loc_AFE0                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowClone(tinyxml2::XMLDocument *)+2C↑j
.text:000000000000AFE0                 ADD             X0, X20, #0x18 ; this
.text:000000000000AFE4                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000AFE8                 MOV             X1, X0  ; char *
.text:000000000000AFEC loc_AFEC                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowClone(tinyxml2::XMLDocument *)+34↑j
.text:000000000000AFEC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000AFF0                 MOV             X0, X19 ; this
.text:000000000000AFF4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000AFF8                 B               ._ZN8tinyxml211XMLDocument10NewUnknownEPKc ; tinyxml2::XMLDocument::NewUnknown(char const*)
.text:000000000000AFF8 ; } // starts at AFA8
.text:000000000000AFF8 ; End of function tinyxml2::XMLUnknown::ShallowClone(tinyxml2::XMLDocument *)
.text:000000000000AFF8 ; ---------------------------------------------------------------------------
.text:000000000000AFFC                 ALIGN 0x20
.text:000000000000B000 ; =============== S U B R O U T I N E =======================================
.text:000000000000B000 ; Attributes: bp-based frame
.text:000000000000B000 ; __int64 __fastcall tinyxml2::XMLDocument::NewUnknown(tinyxml2::XMLDocument *__hidden this, const char *)
.text:000000000000B000                 EXPORT _ZN8tinyxml211XMLDocument10NewUnknownEPKc
.text:000000000000B000 _ZN8tinyxml211XMLDocument10NewUnknownEPKc
.text:000000000000B000                                         ; CODE XREF: tinyxml2::XMLDocument::NewUnknown(char const*)+C↓j
.text:000000000000B000                                         ; DATA XREF: LOAD:0000000000000FD8↑o ...
.text:000000000000B000 var_40          = -0x40
.text:000000000000B000 var_30          = -0x30
.text:000000000000B000 var_20          = -0x20
.text:000000000000B000 var_10          = -0x10
.text:000000000000B000 var_s0          =  0
.text:000000000000B000 ; __unwind {
.text:000000000000B000                 STR             X25, [SP,#-0x10+var_40]!
.text:000000000000B004                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000000B008                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000000B00C                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000000B010                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000B014                 ADD             X29, SP, #0x40
.text:000000000000B018                 LDR             X8, [X0,#0x288]
.text:000000000000B01C                 ADD             X23, X0, #0x288
.text:000000000000B020                 MOV             X21, X0
.text:000000000000B024                 MOV             X0, X23
.text:000000000000B028                 MOV             X19, X1
.text:000000000000B02C                 LDR             X8, [X8,#0x18]
.text:000000000000B030                 BLR             X8
.text:000000000000B034                 ADRP            X8, #_ZTVN8tinyxml210XMLUnknownE_ptr@PAGE
.text:000000000000B038                 MOVI            V0.2D, #0
.text:000000000000B03C                 MOV             X22, X0
.text:000000000000B040                 MOV             X20, X0
.text:000000000000B044                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLUnknownE_ptr@PAGEOFF]
.text:000000000000B048                 STP             X21, XZR, [X0,#8]
.text:000000000000B04C                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000B050                 STR             WZR, [X0,#0x30]
.text:000000000000B054                 ADD             X8, X8, #0x10
.text:000000000000B058                 STR             WZR, [X22,#0x18]!
.text:000000000000B05C                 STUR            Q0, [X0,#0x48]
.text:000000000000B060                 STR             X8, [X0]
.text:000000000000B064                 STUR            Q0, [X0,#0x38]
.text:000000000000B068                 STP             XZR, X23, [X0,#0x58]
.text:000000000000B06C                 LDR             W8, [X21,#0x104]
.text:000000000000B070                 LDR             W9, [X21,#0x100]
.text:000000000000B074                 CMP             W9, W8
.text:000000000000B078                 B.LE            loc_B084
.text:000000000000B07C                 LDR             X23, [X21,#0xA8]
.text:000000000000B080                 B               loc_B0D8
.text:000000000000B084 ; ---------------------------------------------------------------------------
.text:000000000000B084 loc_B084                                ; CODE XREF: tinyxml2::XMLDocument::NewUnknown(char const*)+78↑j
.text:000000000000B084                 LSL             W9, W8, #1
.text:000000000000B088                 ADD             W24, W9, #2
.text:000000000000B08C                 SXTW            X9, W24
.text:000000000000B090                 CMP             XZR, X9,LSR#61
.text:000000000000B094                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:000000000000B098                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000B09C                 SXTW            X25, W8
.text:000000000000B0A0                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000B0A4                 LDR             X1, [X21,#0xA8] ; src
.text:000000000000B0A8                 LSL             X2, X25, #3 ; n
.text:000000000000B0AC                 MOV             X23, X0
.text:000000000000B0B0                 BL              .memcpy
.text:000000000000B0B4                 LDR             X0, [X21,#0xA8] ; void *
.text:000000000000B0B8                 ADD             X8, X21, #0xB0
.text:000000000000B0BC                 CMP             X0, X8
.text:000000000000B0C0                 B.EQ            loc_B0CC
.text:000000000000B0C4                 CBZ             X0, loc_B0CC
.text:000000000000B0C8                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000B0CC loc_B0CC                                ; CODE XREF: tinyxml2::XMLDocument::NewUnknown(char const*)+C0↑j
.text:000000000000B0CC                                         ; tinyxml2::XMLDocument::NewUnknown(char const*)+C4↑j
.text:000000000000B0CC                 LDR             W8, [X21,#0x104]
.text:000000000000B0D0                 STR             X23, [X21,#0xA8]
.text:000000000000B0D4                 STR             W24, [X21,#0x100]
.text:000000000000B0D8 loc_B0D8                                ; CODE XREF: tinyxml2::XMLDocument::NewUnknown(char const*)+80↑j
.text:000000000000B0D8                 STR             X20, [X23,W8,SXTW#3]
.text:000000000000B0DC                 MOV             X0, X22 ; this
.text:000000000000B0E0                 LDR             W8, [X21,#0x104]
.text:000000000000B0E4                 MOV             X1, X19 ; char *
.text:000000000000B0E8                 MOV             W2, WZR ; int
.text:000000000000B0EC                 ADD             W8, W8, #1
.text:000000000000B0F0                 STR             W8, [X21,#0x104]
.text:000000000000B0F4                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B0F8                 MOV             X0, X20
.text:000000000000B0FC                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000B100                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000000B104                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000000B108                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000000B10C                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000000B110                 RET
.text:000000000000B110 ; } // starts at B000
.text:000000000000B110 ; End of function tinyxml2::XMLDocument::NewUnknown(char const*)
.text:000000000000B110 ; ---------------------------------------------------------------------------
.text:000000000000B114                 ALIGN 8
.text:000000000000B118 ; =============== S U B R O U T I N E =======================================
.text:000000000000B118 ; Attributes: bp-based frame
.text:000000000000B118 ; __int64 __fastcall tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLUnknown *__hidden this, const tinyxml2::XMLNode *)
.text:000000000000B118                 EXPORT _ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000B118 _ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000B118                                         ; DATA XREF: LOAD:00000000000006A8↑o
.text:000000000000B118                                         ; .data.rel.ro:00000000000122B8↓o
.text:000000000000B118 var_10          = -0x10
.text:000000000000B118 var_s0          =  0
.text:000000000000B118 ; __unwind {
.text:000000000000B118                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000B11C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B120                 ADD             X29, SP, #0x10
.text:000000000000B124                 LDR             X8, [X1]
.text:000000000000B128                 MOV             X19, X0
.text:000000000000B12C                 MOV             X0, X1
.text:000000000000B130                 LDR             X8, [X8,#0x58]
.text:000000000000B134                 BLR             X8
.text:000000000000B138                 CBZ             X0, loc_B1B4
.text:000000000000B13C                 LDR             X8, [X0]
.text:000000000000B140                 MOV             X20, X0
.text:000000000000B144                 LDR             X8, [X8,#0x48]
.text:000000000000B148                 BLR             X8
.text:000000000000B14C                 CBZ             X0, loc_B158
.text:000000000000B150                 MOV             X20, XZR
.text:000000000000B154                 B               loc_B164
.text:000000000000B158 ; ---------------------------------------------------------------------------
.text:000000000000B158 loc_B158                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)+34↑j
.text:000000000000B158                 ADD             X0, X20, #0x18 ; this
.text:000000000000B15C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B160                 MOV             X20, X0
.text:000000000000B164 loc_B164                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)+3C↑j
.text:000000000000B164                 LDR             X8, [X19]
.text:000000000000B168                 MOV             X0, X19
.text:000000000000B16C                 LDR             X8, [X8,#0x48]
.text:000000000000B170                 BLR             X8
.text:000000000000B174                 CBZ             X0, loc_B19C
.text:000000000000B178                 MOV             X1, XZR ; s2
.text:000000000000B17C                 CMP             X20, X1
.text:000000000000B180                 B.EQ            loc_B1B0
.text:000000000000B184 loc_B184                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)+94↓j
.text:000000000000B184                 MOV             X0, X20 ; s1
.text:000000000000B188                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000B18C                 BL              .strncmp
.text:000000000000B190                 CMP             W0, #0
.text:000000000000B194                 CSET            W0, EQ
.text:000000000000B198                 B               loc_B1B4
.text:000000000000B19C ; ---------------------------------------------------------------------------
.text:000000000000B19C loc_B19C                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)+5C↑j
.text:000000000000B19C                 ADD             X0, X19, #0x18 ; this
.text:000000000000B1A0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B1A4                 MOV             X1, X0
.text:000000000000B1A8                 CMP             X20, X1
.text:000000000000B1AC                 B.NE            loc_B184
.text:000000000000B1B0 loc_B1B0                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)+68↑j
.text:000000000000B1B0                 MOV             W0, #1
.text:000000000000B1B4 loc_B1B4                                ; CODE XREF: tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)+20↑j
.text:000000000000B1B4                                         ; tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)+80↑j
.text:000000000000B1B4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B1B8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000B1BC                 RET
.text:000000000000B1BC ; } // starts at B118
.text:000000000000B1BC ; End of function tinyxml2::XMLUnknown::ShallowEqual(tinyxml2::XMLNode const*)
.text:000000000000B1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1C0 ; tinyxml2::XMLUnknown::Accept(tinyxml2::XMLVisitor *)const
.text:000000000000B1C0                 EXPORT _ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE
.text:000000000000B1C0 _ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE
.text:000000000000B1C0                                         ; DATA XREF: LOAD:00000000000017B8↑o
.text:000000000000B1C0                                         ; .data.rel.ro:00000000000122C0↓o
.text:000000000000B1C0 ; __unwind {
.text:000000000000B1C0                 LDR             X9, [X1]
.text:000000000000B1C4                 MOV             X8, X0
.text:000000000000B1C8                 MOV             X0, X1
.text:000000000000B1CC                 MOV             X1, X8
.text:000000000000B1D0                 LDR             X2, [X9,#0x48]
.text:000000000000B1D4                 BR              X2
.text:000000000000B1D4 ; } // starts at B1C0
.text:000000000000B1D4 ; End of function tinyxml2::XMLUnknown::Accept(tinyxml2::XMLVisitor *)
.text:000000000000B1D8 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1D8 ; __int64 __fastcall tinyxml2::XMLAttribute::Name(tinyxml2::XMLAttribute *__hidden this)
.text:000000000000B1D8                 EXPORT _ZNK8tinyxml212XMLAttribute4NameEv
.text:000000000000B1D8 _ZNK8tinyxml212XMLAttribute4NameEv      ; DATA XREF: LOAD:0000000000000EE8↑o
.text:000000000000B1D8 ; __unwind {
.text:000000000000B1D8                 ADD             X0, X0, #8 ; this
.text:000000000000B1DC                 B               ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B1DC ; } // starts at B1D8
.text:000000000000B1DC ; End of function tinyxml2::XMLAttribute::Name(void)
.text:000000000000B1E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1E0 ; __int64 __fastcall tinyxml2::XMLAttribute::Value(tinyxml2::XMLAttribute *__hidden this)
.text:000000000000B1E0                 EXPORT _ZNK8tinyxml212XMLAttribute5ValueEv
.text:000000000000B1E0 _ZNK8tinyxml212XMLAttribute5ValueEv     ; DATA XREF: LOAD:0000000000001860↑o
.text:000000000000B1E0 ; __unwind {
.text:000000000000B1E0                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B1E4                 B               ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B1E4 ; } // starts at B1E0
.text:000000000000B1E4 ; End of function tinyxml2::XMLAttribute::Value(void)
.text:000000000000B1E8 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1E8 ; Attributes: bp-based frame
.text:000000000000B1E8 ; __int64 __fastcall tinyxml2::XMLAttribute::ParseDeep(tinyxml2::XMLAttribute *__hidden this, char *, bool, int *)
.text:000000000000B1E8                 EXPORT _ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi
.text:000000000000B1E8 _ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi
.text:000000000000B1E8                                         ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+C↓j
.text:000000000000B1E8                                         ; DATA XREF: LOAD:0000000000000BD0↑o ...
.text:000000000000B1E8 var_4C          = -0x4C
.text:000000000000B1E8 var_4B          = -0x4B
.text:000000000000B1E8 var_48          = -0x48
.text:000000000000B1E8 var_40          = -0x40
.text:000000000000B1E8 var_30          = -0x30
.text:000000000000B1E8 var_20          = -0x20
.text:000000000000B1E8 var_10          = -0x10
.text:000000000000B1E8 var_s0          =  0
.text:000000000000B1E8 ; __unwind {
.text:000000000000B1E8                 SUB             SP, SP, #0x60
.text:000000000000B1EC                 STR             X25, [SP,#0x50+var_40]
.text:000000000000B1F0                 STP             X24, X23, [SP,#0x50+var_30]
.text:000000000000B1F4                 STP             X22, X21, [SP,#0x50+var_20]
.text:000000000000B1F8                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000000B1FC                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000B200                 ADD             X29, SP, #0x50
.text:000000000000B204                 MRS             X23, #3, c13, c0, #2
.text:000000000000B208                 MOV             X21, X0
.text:000000000000B20C                 LDR             X8, [X23,#0x28]
.text:000000000000B210                 ADD             X0, X0, #8 ; this
.text:000000000000B214                 MOV             X19, X3
.text:000000000000B218                 MOV             W20, W2
.text:000000000000B21C                 STR             X8, [SP,#0x50+var_48]
.text:000000000000B220                 BL              ._ZN8tinyxml27StrPair9ParseNameEPc ; tinyxml2::StrPair::ParseName(char *)
.text:000000000000B224                 CBZ             X0, loc_B2F4
.text:000000000000B228                 LDRSB           W25, [X0]
.text:000000000000B22C                 CMP             W25, #1
.text:000000000000B230                 B.LT            loc_B2F0
.text:000000000000B234                 ADD             X24, X0, #1
.text:000000000000B238 loc_B238                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+80↓j
.text:000000000000B238                 AND             W22, W25, #0xFF
.text:000000000000B23C                 MOV             W0, W22 ; int
.text:000000000000B240                 BL              .isspace
.text:000000000000B244                 CBZ             W0, loc_B270
.text:000000000000B248                 CBZ             X19, loc_B264
.text:000000000000B24C                 AND             W8, W25, #0xFF
.text:000000000000B250                 CMP             W8, #0xA
.text:000000000000B254                 B.NE            loc_B264
.text:000000000000B258                 LDR             W8, [X19]
.text:000000000000B25C                 ADD             W8, W8, #1
.text:000000000000B260                 STR             W8, [X19]
.text:000000000000B264 loc_B264                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+60↑j
.text:000000000000B264                                         ; tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+6C↑j
.text:000000000000B264                 LDRSB           W25, [X24],#1
.text:000000000000B268                 TBZ             W25, #0x1F, loc_B238
.text:000000000000B26C                 B               loc_B2F0
.text:000000000000B270 ; ---------------------------------------------------------------------------
.text:000000000000B270 loc_B270                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+5C↑j
.text:000000000000B270                 CMP             W22, #0x3D ; '='
.text:000000000000B274                 B.NE            loc_B2F0
.text:000000000000B278                 LDRSB           W22, [X24]
.text:000000000000B27C                 TBNZ            W22, #0x1F, loc_B2B0
.text:000000000000B280 loc_B280                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+C4↓j
.text:000000000000B280                 AND             W0, W22, #0xFF ; int
.text:000000000000B284                 BL              .isspace
.text:000000000000B288                 CBZ             W0, loc_B2B0
.text:000000000000B28C                 CBZ             X19, loc_B2A8
.text:000000000000B290                 AND             W8, W22, #0xFF
.text:000000000000B294                 CMP             W8, #0xA
.text:000000000000B298                 B.NE            loc_B2A8
.text:000000000000B29C                 LDR             W8, [X19]
.text:000000000000B2A0                 ADD             W8, W8, #1
.text:000000000000B2A4                 STR             W8, [X19]
.text:000000000000B2A8 loc_B2A8                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+A4↑j
.text:000000000000B2A8                                         ; tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+B0↑j
.text:000000000000B2A8                 LDRSB           W22, [X24,#1]!
.text:000000000000B2AC                 TBZ             W22, #0x1F, loc_B280
.text:000000000000B2B0 loc_B2B0                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+94↑j
.text:000000000000B2B0                                         ; tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+A0↑j
.text:000000000000B2B0                 AND             W8, W22, #0xFF
.text:000000000000B2B4                 CMP             W8, #0x27 ; '''
.text:000000000000B2B8                 B.EQ            loc_B2C4
.text:000000000000B2BC                 CMP             W8, #0x22 ; '"'
.text:000000000000B2C0                 B.NE            loc_B2F0
.text:000000000000B2C4 loc_B2C4                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+D0↑j
.text:000000000000B2C4                 TST             W20, #1
.text:000000000000B2C8                 STRB            W22, [SP,#0x50+var_4C]
.text:000000000000B2CC                 MOV             W8, #2
.text:000000000000B2D0                 STRB            WZR, [SP,#0x50+var_4B]
.text:000000000000B2D4                 ADD             X1, X24, #1 ; char *
.text:000000000000B2D8                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000B2DC                 CINC            W3, W8, NE ; int
.text:000000000000B2E0                 ADD             X2, SP, #0x50+var_4C ; char *
.text:000000000000B2E4                 MOV             X4, X19 ; int *
.text:000000000000B2E8                 BL              ._ZN8tinyxml27StrPair9ParseTextEPcPKciPi ; tinyxml2::StrPair::ParseText(char *,char const*,int,int *)
.text:000000000000B2EC                 B               loc_B2F4
.text:000000000000B2F0 ; ---------------------------------------------------------------------------
.text:000000000000B2F0 loc_B2F0                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+48↑j
.text:000000000000B2F0                                         ; tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+84↑j ...
.text:000000000000B2F0                 MOV             X0, XZR
.text:000000000000B2F4 loc_B2F4                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+3C↑j
.text:000000000000B2F4                                         ; tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+104↑j
.text:000000000000B2F4                 LDR             X8, [X23,#0x28]
.text:000000000000B2F8                 LDR             X9, [SP,#0x50+var_48]
.text:000000000000B2FC                 CMP             X8, X9
.text:000000000000B300                 B.NE            loc_B320
.text:000000000000B304                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000B308                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000000B30C                 LDP             X22, X21, [SP,#0x50+var_20]
.text:000000000000B310                 LDP             X24, X23, [SP,#0x50+var_30]
.text:000000000000B314                 LDR             X25, [SP,#0x50+var_40]
.text:000000000000B318                 ADD             SP, SP, #0x60 ; '`'
.text:000000000000B31C                 RET
.text:000000000000B320 ; ---------------------------------------------------------------------------
.text:000000000000B320 loc_B320                                ; CODE XREF: tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)+118↑j
.text:000000000000B320                 BL              .__stack_chk_fail
.text:000000000000B320 ; } // starts at B1E8
.text:000000000000B320 ; End of function tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)
.text:000000000000B320 ; ---------------------------------------------------------------------------
.text:000000000000B324                 ALIGN 8
.text:000000000000B328 ; =============== S U B R O U T I N E =======================================
.text:000000000000B328 ; _QWORD __fastcall tinyxml2::XMLAttribute::SetName(tinyxml2::XMLAttribute *__hidden this, const char *)
.text:000000000000B328                 EXPORT _ZN8tinyxml212XMLAttribute7SetNameEPKc
.text:000000000000B328 _ZN8tinyxml212XMLAttribute7SetNameEPKc  ; DATA XREF: LOAD:0000000000000540↑o
.text:000000000000B328 ; __unwind {
.text:000000000000B328                 ADD             X0, X0, #8 ; this
.text:000000000000B32C                 MOV             W2, WZR ; int
.text:000000000000B330                 B               ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B330 ; } // starts at B328
.text:000000000000B330 ; End of function tinyxml2::XMLAttribute::SetName(char const*)
.text:000000000000B330 ; ---------------------------------------------------------------------------
.text:000000000000B334                 ALIGN 8
.text:000000000000B338 ; =============== S U B R O U T I N E =======================================
.text:000000000000B338 ; Attributes: bp-based frame
.text:000000000000B338 ; __int64 __fastcall tinyxml2::XMLAttribute::QueryIntValue(tinyxml2::XMLAttribute *__hidden this, int *)
.text:000000000000B338                 EXPORT _ZNK8tinyxml212XMLAttribute13QueryIntValueEPi
.text:000000000000B338 _ZNK8tinyxml212XMLAttribute13QueryIntValueEPi
.text:000000000000B338                                         ; DATA XREF: LOAD:00000000000007F8↑o
.text:000000000000B338 var_10          = -0x10
.text:000000000000B338 var_s0          =  0
.text:000000000000B338 ; __unwind {
.text:000000000000B338                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000B33C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B340                 ADD             X29, SP, #0x10
.text:000000000000B344                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B348                 MOV             X19, X1
.text:000000000000B34C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B350                 ADRP            X1, #unk_4EA5@PAGE
.text:000000000000B354                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:000000000000B358                 MOV             X2, X19
.text:000000000000B35C                 BL              .sscanf
.text:000000000000B360                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B364                 CMP             W0, #1
.text:000000000000B368                 CSET            W8, NE
.text:000000000000B36C                 LSL             W0, W8, #1
.text:000000000000B370                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000B374                 RET
.text:000000000000B374 ; } // starts at B338
.text:000000000000B374 ; End of function tinyxml2::XMLAttribute::QueryIntValue(int *)
.text:000000000000B378 ; =============== S U B R O U T I N E =======================================
.text:000000000000B378 ; Attributes: bp-based frame
.text:000000000000B378 ; __int64 __fastcall tinyxml2::XMLAttribute::QueryUnsignedValue(tinyxml2::XMLAttribute *__hidden this, unsigned int *)
.text:000000000000B378                 EXPORT _ZNK8tinyxml212XMLAttribute18QueryUnsignedValueEPj
.text:000000000000B378 _ZNK8tinyxml212XMLAttribute18QueryUnsignedValueEPj
.text:000000000000B378                                         ; DATA XREF: LOAD:0000000000001248↑o
.text:000000000000B378 var_10          = -0x10
.text:000000000000B378 var_s0          =  0
.text:000000000000B378 ; __unwind {
.text:000000000000B378                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000B37C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B380                 ADD             X29, SP, #0x10
.text:000000000000B384                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B388                 MOV             X19, X1
.text:000000000000B38C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B390                 ADRP            X1, #unk_4EE4@PAGE
.text:000000000000B394                 ADD             X1, X1, #unk_4EE4@PAGEOFF ; format
.text:000000000000B398                 MOV             X2, X19
.text:000000000000B39C                 BL              .sscanf
.text:000000000000B3A0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B3A4                 CMP             W0, #1
.text:000000000000B3A8                 CSET            W8, NE
.text:000000000000B3AC                 LSL             W0, W8, #1
.text:000000000000B3B0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000B3B4                 RET
.text:000000000000B3B4 ; } // starts at B378
.text:000000000000B3B4 ; End of function tinyxml2::XMLAttribute::QueryUnsignedValue(uint *)
.text:000000000000B3B8 ; =============== S U B R O U T I N E =======================================
.text:000000000000B3B8 ; Attributes: bp-based frame
.text:000000000000B3B8 ; __int64 __fastcall tinyxml2::XMLAttribute::QueryInt64Value(tinyxml2::XMLAttribute *__hidden this, __int64 *)
.text:000000000000B3B8                 EXPORT _ZNK8tinyxml212XMLAttribute15QueryInt64ValueEPl
.text:000000000000B3B8 _ZNK8tinyxml212XMLAttribute15QueryInt64ValueEPl
.text:000000000000B3B8                                         ; DATA XREF: LOAD:00000000000005E8↑o
.text:000000000000B3B8 var_20          = -0x20
.text:000000000000B3B8 var_18          = -0x18
.text:000000000000B3B8 var_10          = -0x10
.text:000000000000B3B8 var_s0          =  0
.text:000000000000B3B8 ; __unwind {
.text:000000000000B3B8                 SUB             SP, SP, #0x30
.text:000000000000B3BC                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000B3C0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000B3C4                 ADD             X29, SP, #0x20
.text:000000000000B3C8                 MRS             X20, #3, c13, c0, #2
.text:000000000000B3CC                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B3D0                 LDR             X8, [X20,#0x28]
.text:000000000000B3D4                 MOV             X19, X1
.text:000000000000B3D8                 STR             X8, [SP,#0x20+var_18]
.text:000000000000B3DC                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B3E0                 ADRP            X1, #aLld@PAGE ; "%lld"
.text:000000000000B3E4                 STR             XZR, [SP,#0x20+var_20]
.text:000000000000B3E8                 ADD             X1, X1, #aLld@PAGEOFF ; "%lld"
.text:000000000000B3EC                 MOV             X2, SP
.text:000000000000B3F0                 BL              .sscanf
.text:000000000000B3F4                 CMP             W0, #1
.text:000000000000B3F8                 B.NE            loc_B40C
.text:000000000000B3FC                 LDR             X8, [SP,#0x20+var_20]
.text:000000000000B400                 MOV             W0, WZR
.text:000000000000B404                 STR             X8, [X19]
.text:000000000000B408                 B               loc_B410
.text:000000000000B40C ; ---------------------------------------------------------------------------
.text:000000000000B40C loc_B40C                                ; CODE XREF: tinyxml2::XMLAttribute::QueryInt64Value(long *)+40↑j
.text:000000000000B40C                 MOV             W0, #2
.text:000000000000B410 loc_B410                                ; CODE XREF: tinyxml2::XMLAttribute::QueryInt64Value(long *)+50↑j
.text:000000000000B410                 LDR             X8, [X20,#0x28]
.text:000000000000B414                 LDR             X9, [SP,#0x20+var_18]
.text:000000000000B418                 CMP             X8, X9
.text:000000000000B41C                 B.NE            loc_B430
.text:000000000000B420                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000B424                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000B428                 ADD             SP, SP, #0x30 ; '0'
.text:000000000000B42C                 RET
.text:000000000000B430 ; ---------------------------------------------------------------------------
.text:000000000000B430 loc_B430                                ; CODE XREF: tinyxml2::XMLAttribute::QueryInt64Value(long *)+64↑j
.text:000000000000B430                 BL              .__stack_chk_fail
.text:000000000000B430 ; } // starts at B3B8
.text:000000000000B430 ; End of function tinyxml2::XMLAttribute::QueryInt64Value(long *)
.text:000000000000B430 ; ---------------------------------------------------------------------------
.text:000000000000B434                 ALIGN 8
.text:000000000000B438 ; =============== S U B R O U T I N E =======================================
.text:000000000000B438 ; Attributes: bp-based frame
.text:000000000000B438 ; __int64 __fastcall tinyxml2::XMLAttribute::QueryBoolValue(tinyxml2::XMLAttribute *__hidden this, bool *)
.text:000000000000B438                 EXPORT _ZNK8tinyxml212XMLAttribute14QueryBoolValueEPb
.text:000000000000B438 _ZNK8tinyxml212XMLAttribute14QueryBoolValueEPb
.text:000000000000B438                                         ; DATA XREF: LOAD:0000000000000A50↑o
.text:000000000000B438 var_2C          = -0x2C
.text:000000000000B438 var_28          = -0x28
.text:000000000000B438 var_20          = -0x20
.text:000000000000B438 var_10          = -0x10
.text:000000000000B438 var_s0          =  0
.text:000000000000B438 ; __unwind {
.text:000000000000B438                 SUB             SP, SP, #0x40
.text:000000000000B43C                 STR             X21, [SP,#0x30+var_20]
.text:000000000000B440                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000B444                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000B448                 ADD             X29, SP, #0x30
.text:000000000000B44C                 MRS             X21, #3, c13, c0, #2
.text:000000000000B450                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B454                 LDR             X8, [X21,#0x28]
.text:000000000000B458                 MOV             X19, X1
.text:000000000000B45C                 STR             X8, [SP,#0x30+var_28]
.text:000000000000B460                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B464                 ADRP            X1, #unk_4EA5@PAGE
.text:000000000000B468                 STR             WZR, [SP,#0x30+var_2C]
.text:000000000000B46C                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:000000000000B470                 ADD             X2, SP, #0x30+var_2C
.text:000000000000B474                 MOV             X20, X0
.text:000000000000B478                 BL              .sscanf
.text:000000000000B47C                 CMP             W0, #1
.text:000000000000B480                 B.NE            loc_B494
.text:000000000000B484                 LDR             W8, [SP,#0x30+var_2C]
.text:000000000000B488                 CMP             W8, #0
.text:000000000000B48C                 CSET            W8, NE
.text:000000000000B490                 B               loc_B4F8
.text:000000000000B494 ; ---------------------------------------------------------------------------
.text:000000000000B494 loc_B494                                ; CODE XREF: tinyxml2::XMLAttribute::QueryBoolValue(bool *)+48↑j
.text:000000000000B494                 ADRP            X8, #aTrue@PAGE ; "true"
.text:000000000000B498                 ADD             X8, X8, #aTrue@PAGEOFF ; "true"
.text:000000000000B49C                 CMP             X20, X8
.text:000000000000B4A0                 B.EQ            loc_B4EC
.text:000000000000B4A4                 ADRP            X1, #aTrue@PAGE ; "true"
.text:000000000000B4A8                 ADD             X1, X1, #aTrue@PAGEOFF ; "true"
.text:000000000000B4AC                 MOV             X0, X20 ; s1
.text:000000000000B4B0                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000B4B4                 BL              .strncmp
.text:000000000000B4B8                 CBZ             W0, loc_B4EC
.text:000000000000B4BC                 ADRP            X8, #aFalse@PAGE ; "false"
.text:000000000000B4C0                 ADD             X8, X8, #aFalse@PAGEOFF ; "false"
.text:000000000000B4C4                 CMP             X20, X8
.text:000000000000B4C8                 B.EQ            loc_B4F4
.text:000000000000B4CC                 ADRP            X1, #aFalse@PAGE ; "false"
.text:000000000000B4D0                 ADD             X1, X1, #aFalse@PAGEOFF ; "false"
.text:000000000000B4D4                 MOV             X0, X20 ; s1
.text:000000000000B4D8                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000B4DC                 BL              .strncmp
.text:000000000000B4E0                 CBZ             W0, loc_B4F4
.text:000000000000B4E4                 MOV             W0, #2
.text:000000000000B4E8                 B               loc_B500
.text:000000000000B4EC ; ---------------------------------------------------------------------------
.text:000000000000B4EC loc_B4EC                                ; CODE XREF: tinyxml2::XMLAttribute::QueryBoolValue(bool *)+68↑j
.text:000000000000B4EC                                         ; tinyxml2::XMLAttribute::QueryBoolValue(bool *)+80↑j
.text:000000000000B4EC                 MOV             W8, #1
.text:000000000000B4F0                 B               loc_B4F8
.text:000000000000B4F4 ; ---------------------------------------------------------------------------
.text:000000000000B4F4 loc_B4F4                                ; CODE XREF: tinyxml2::XMLAttribute::QueryBoolValue(bool *)+90↑j
.text:000000000000B4F4                                         ; tinyxml2::XMLAttribute::QueryBoolValue(bool *)+A8↑j
.text:000000000000B4F4                 MOV             W8, WZR
.text:000000000000B4F8 loc_B4F8                                ; CODE XREF: tinyxml2::XMLAttribute::QueryBoolValue(bool *)+58↑j
.text:000000000000B4F8                                         ; tinyxml2::XMLAttribute::QueryBoolValue(bool *)+B8↑j
.text:000000000000B4F8                 MOV             W0, WZR
.text:000000000000B4FC                 STRB            W8, [X19]
.text:000000000000B500 loc_B500                                ; CODE XREF: tinyxml2::XMLAttribute::QueryBoolValue(bool *)+B0↑j
.text:000000000000B500                 LDR             X8, [X21,#0x28]
.text:000000000000B504                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000B508                 CMP             X8, X9
.text:000000000000B50C                 B.NE            loc_B524
.text:000000000000B510                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000B514                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000B518                 LDR             X21, [SP,#0x30+var_20]
.text:000000000000B51C                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000B520                 RET
.text:000000000000B524 ; ---------------------------------------------------------------------------
.text:000000000000B524 loc_B524                                ; CODE XREF: tinyxml2::XMLAttribute::QueryBoolValue(bool *)+D4↑j
.text:000000000000B524                 BL              .__stack_chk_fail
.text:000000000000B524 ; } // starts at B438
.text:000000000000B524 ; End of function tinyxml2::XMLAttribute::QueryBoolValue(bool *)
.text:000000000000B528 ; =============== S U B R O U T I N E =======================================
.text:000000000000B528 ; Attributes: bp-based frame
.text:000000000000B528 ; __int64 __fastcall tinyxml2::XMLAttribute::QueryFloatValue(tinyxml2::XMLAttribute *__hidden this, float *)
.text:000000000000B528                 EXPORT _ZNK8tinyxml212XMLAttribute15QueryFloatValueEPf
.text:000000000000B528 _ZNK8tinyxml212XMLAttribute15QueryFloatValueEPf
.text:000000000000B528                                         ; DATA XREF: LOAD:0000000000001350↑o
.text:000000000000B528 var_10          = -0x10
.text:000000000000B528 var_s0          =  0
.text:000000000000B528 ; __unwind {
.text:000000000000B528                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000B52C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B530                 ADD             X29, SP, #0x10
.text:000000000000B534                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B538                 MOV             X19, X1
.text:000000000000B53C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B540                 ADRP            X1, #aF@PAGE ; "%f"
.text:000000000000B544                 ADD             X1, X1, #aF@PAGEOFF ; "%f"
.text:000000000000B548                 MOV             X2, X19
.text:000000000000B54C                 BL              .sscanf
.text:000000000000B550                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B554                 CMP             W0, #1
.text:000000000000B558                 CSET            W8, NE
.text:000000000000B55C                 LSL             W0, W8, #1
.text:000000000000B560                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000B564                 RET
.text:000000000000B564 ; } // starts at B528
.text:000000000000B564 ; End of function tinyxml2::XMLAttribute::QueryFloatValue(float *)
.text:000000000000B568 ; =============== S U B R O U T I N E =======================================
.text:000000000000B568 ; Attributes: bp-based frame
.text:000000000000B568 ; __int64 __fastcall tinyxml2::XMLAttribute::QueryDoubleValue(tinyxml2::XMLAttribute *__hidden this, double *)
.text:000000000000B568                 EXPORT _ZNK8tinyxml212XMLAttribute16QueryDoubleValueEPd
.text:000000000000B568 _ZNK8tinyxml212XMLAttribute16QueryDoubleValueEPd
.text:000000000000B568                                         ; DATA XREF: LOAD:0000000000001578↑o
.text:000000000000B568 var_10          = -0x10
.text:000000000000B568 var_s0          =  0
.text:000000000000B568 ; __unwind {
.text:000000000000B568                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000B56C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B570                 ADD             X29, SP, #0x10
.text:000000000000B574                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B578                 MOV             X19, X1
.text:000000000000B57C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000B580                 ADRP            X1, #aLf@PAGE ; "%lf"
.text:000000000000B584                 ADD             X1, X1, #aLf@PAGEOFF ; format
.text:000000000000B588                 MOV             X2, X19
.text:000000000000B58C                 BL              .sscanf
.text:000000000000B590                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B594                 CMP             W0, #1
.text:000000000000B598                 CSET            W8, NE
.text:000000000000B59C                 LSL             W0, W8, #1
.text:000000000000B5A0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000B5A4                 RET
.text:000000000000B5A4 ; } // starts at B568
.text:000000000000B5A4 ; End of function tinyxml2::XMLAttribute::QueryDoubleValue(double *)
.text:000000000000B5A8 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5A8 ; _QWORD __fastcall tinyxml2::XMLAttribute::SetAttribute(tinyxml2::XMLAttribute *__hidden this, const char *)
.text:000000000000B5A8                 EXPORT _ZN8tinyxml212XMLAttribute12SetAttributeEPKc
.text:000000000000B5A8 _ZN8tinyxml212XMLAttribute12SetAttributeEPKc
.text:000000000000B5A8                                         ; DATA XREF: LOAD:0000000000000918↑o
.text:000000000000B5A8 ; __unwind {
.text:000000000000B5A8                 ADD             X0, X0, #0x20 ; ' ' ; this
.text:000000000000B5AC                 MOV             W2, WZR ; int
.text:000000000000B5B0                 B               ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B5B0 ; } // starts at B5A8
.text:000000000000B5B0 ; End of function tinyxml2::XMLAttribute::SetAttribute(char const*)
.text:000000000000B5B0 ; ---------------------------------------------------------------------------
.text:000000000000B5B4                 ALIGN 8
.text:000000000000B5B8 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5B8 ; Attributes: bp-based frame
.text:000000000000B5B8 ; __int64 __fastcall tinyxml2::XMLAttribute::SetAttribute(tinyxml2::XMLAttribute *__hidden this, int)
.text:000000000000B5B8                 EXPORT _ZN8tinyxml212XMLAttribute12SetAttributeEi
.text:000000000000B5B8 _ZN8tinyxml212XMLAttribute12SetAttributeEi
.text:000000000000B5B8                                         ; DATA XREF: LOAD:0000000000000DC8↑o
.text:000000000000B5B8 var_18          = -0x18
.text:000000000000B5B8 var_10          = -0x10
.text:000000000000B5B8 var_s0          =  0
.text:000000000000B5B8 ; __unwind {
.text:000000000000B5B8                 SUB             SP, SP, #0xF0
.text:000000000000B5BC                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B5C0                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B5C4                 ADD             X29, SP, #0xE0
.text:000000000000B5C8                 MRS             X20, #3, c13, c0, #2
.text:000000000000B5CC                 MOV             W4, W1
.text:000000000000B5D0                 LDR             X8, [X20,#0x28]
.text:000000000000B5D4                 ADRP            X3, #unk_4EA5@PAGE
.text:000000000000B5D8                 MOV             W1, #0xC8
.text:000000000000B5DC                 MOV             X19, X0
.text:000000000000B5E0                 ADD             X3, X3, #unk_4EA5@PAGEOFF
.text:000000000000B5E4                 MOV             X0, SP
.text:000000000000B5E8                 STUR            X8, [X29,#var_18]
.text:000000000000B5EC                 MOV             X2, X1
.text:000000000000B5F0                 BL              sub_8A58
.text:000000000000B5F4                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000000B5F8                 MOV             X1, SP  ; char *
.text:000000000000B5FC                 MOV             W2, WZR ; int
.text:000000000000B600                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B604                 LDR             X8, [X20,#0x28]
.text:000000000000B608                 LDUR            X9, [X29,#var_18]
.text:000000000000B60C                 CMP             X8, X9
.text:000000000000B610                 B.NE            loc_B624
.text:000000000000B614                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B618                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B61C                 ADD             SP, SP, #0xF0
.text:000000000000B620                 RET
.text:000000000000B624 ; ---------------------------------------------------------------------------
.text:000000000000B624 loc_B624                                ; CODE XREF: tinyxml2::XMLAttribute::SetAttribute(int)+58↑j
.text:000000000000B624                 BL              .__stack_chk_fail
.text:000000000000B624 ; } // starts at B5B8
.text:000000000000B624 ; End of function tinyxml2::XMLAttribute::SetAttribute(int)
.text:000000000000B628 ; =============== S U B R O U T I N E =======================================
.text:000000000000B628 ; Attributes: bp-based frame
.text:000000000000B628 ; __int64 __fastcall tinyxml2::XMLAttribute::SetAttribute(tinyxml2::XMLAttribute *__hidden this, unsigned int)
.text:000000000000B628                 EXPORT _ZN8tinyxml212XMLAttribute12SetAttributeEj
.text:000000000000B628 _ZN8tinyxml212XMLAttribute12SetAttributeEj
.text:000000000000B628                                         ; DATA XREF: LOAD:0000000000000E28↑o
.text:000000000000B628 var_18          = -0x18
.text:000000000000B628 var_10          = -0x10
.text:000000000000B628 var_s0          =  0
.text:000000000000B628 ; __unwind {
.text:000000000000B628                 SUB             SP, SP, #0xF0
.text:000000000000B62C                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B630                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B634                 ADD             X29, SP, #0xE0
.text:000000000000B638                 MRS             X20, #3, c13, c0, #2
.text:000000000000B63C                 MOV             W4, W1
.text:000000000000B640                 LDR             X8, [X20,#0x28]
.text:000000000000B644                 ADRP            X3, #unk_4EE4@PAGE
.text:000000000000B648                 MOV             W1, #0xC8
.text:000000000000B64C                 MOV             X19, X0
.text:000000000000B650                 ADD             X3, X3, #unk_4EE4@PAGEOFF
.text:000000000000B654                 MOV             X0, SP
.text:000000000000B658                 STUR            X8, [X29,#var_18]
.text:000000000000B65C                 MOV             X2, X1
.text:000000000000B660                 BL              sub_8A58
.text:000000000000B664                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000000B668                 MOV             X1, SP  ; char *
.text:000000000000B66C                 MOV             W2, WZR ; int
.text:000000000000B670                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B674                 LDR             X8, [X20,#0x28]
.text:000000000000B678                 LDUR            X9, [X29,#var_18]
.text:000000000000B67C                 CMP             X8, X9
.text:000000000000B680                 B.NE            loc_B694
.text:000000000000B684                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B688                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B68C                 ADD             SP, SP, #0xF0
.text:000000000000B690                 RET
.text:000000000000B694 ; ---------------------------------------------------------------------------
.text:000000000000B694 loc_B694                                ; CODE XREF: tinyxml2::XMLAttribute::SetAttribute(uint)+58↑j
.text:000000000000B694                 BL              .__stack_chk_fail
.text:000000000000B694 ; } // starts at B628
.text:000000000000B694 ; End of function tinyxml2::XMLAttribute::SetAttribute(uint)
.text:000000000000B698 ; =============== S U B R O U T I N E =======================================
.text:000000000000B698 ; Attributes: bp-based frame
.text:000000000000B698 ; __int64 __fastcall tinyxml2::XMLAttribute::SetAttribute(tinyxml2::XMLAttribute *__hidden this, __int64)
.text:000000000000B698                 EXPORT _ZN8tinyxml212XMLAttribute12SetAttributeEl
.text:000000000000B698 _ZN8tinyxml212XMLAttribute12SetAttributeEl
.text:000000000000B698                                         ; DATA XREF: LOAD:0000000000000F18↑o
.text:000000000000B698 var_18          = -0x18
.text:000000000000B698 var_10          = -0x10
.text:000000000000B698 var_s0          =  0
.text:000000000000B698 ; __unwind {
.text:000000000000B698                 SUB             SP, SP, #0xF0
.text:000000000000B69C                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B6A0                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B6A4                 ADD             X29, SP, #0xE0
.text:000000000000B6A8                 MRS             X20, #3, c13, c0, #2
.text:000000000000B6AC                 MOV             X4, X1
.text:000000000000B6B0                 LDR             X8, [X20,#0x28]
.text:000000000000B6B4                 ADRP            X3, #aLld@PAGE ; "%lld"
.text:000000000000B6B8                 MOV             W1, #0xC8
.text:000000000000B6BC                 MOV             X19, X0
.text:000000000000B6C0                 ADD             X3, X3, #aLld@PAGEOFF ; "%lld"
.text:000000000000B6C4                 MOV             X0, SP
.text:000000000000B6C8                 STUR            X8, [X29,#var_18]
.text:000000000000B6CC                 MOV             X2, X1
.text:000000000000B6D0                 BL              sub_8A58
.text:000000000000B6D4                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000000B6D8                 MOV             X1, SP  ; char *
.text:000000000000B6DC                 MOV             W2, WZR ; int
.text:000000000000B6E0                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B6E4                 LDR             X8, [X20,#0x28]
.text:000000000000B6E8                 LDUR            X9, [X29,#var_18]
.text:000000000000B6EC                 CMP             X8, X9
.text:000000000000B6F0                 B.NE            loc_B704
.text:000000000000B6F4                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B6F8                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B6FC                 ADD             SP, SP, #0xF0
.text:000000000000B700                 RET
.text:000000000000B704 ; ---------------------------------------------------------------------------
.text:000000000000B704 loc_B704                                ; CODE XREF: tinyxml2::XMLAttribute::SetAttribute(long)+58↑j
.text:000000000000B704                 BL              .__stack_chk_fail
.text:000000000000B704 ; } // starts at B698
.text:000000000000B704 ; End of function tinyxml2::XMLAttribute::SetAttribute(long)
.text:000000000000B708 ; =============== S U B R O U T I N E =======================================
.text:000000000000B708 ; Attributes: bp-based frame
.text:000000000000B708 ; __int64 __fastcall tinyxml2::XMLAttribute::SetAttribute(tinyxml2::XMLAttribute *__hidden this, bool)
.text:000000000000B708                 EXPORT _ZN8tinyxml212XMLAttribute12SetAttributeEb
.text:000000000000B708 _ZN8tinyxml212XMLAttribute12SetAttributeEb
.text:000000000000B708                                         ; DATA XREF: LOAD:0000000000000B58↑o
.text:000000000000B708 var_18          = -0x18
.text:000000000000B708 var_10          = -0x10
.text:000000000000B708 var_s0          =  0
.text:000000000000B708 ; __unwind {
.text:000000000000B708                 SUB             SP, SP, #0xF0
.text:000000000000B70C                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B710                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B714                 ADD             X29, SP, #0xE0
.text:000000000000B718                 ADRP            X8, #_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGE
.text:000000000000B71C                 ADRP            X9, #_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGE
.text:000000000000B720                 TST             W1, #1
.text:000000000000B724                 LDR             X8, [X8,#_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGEOFF]
.text:000000000000B728                 ADRP            X3, #aS@PAGE ; "%s"
.text:000000000000B72C                 LDR             X9, [X9,#_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGEOFF]
.text:000000000000B730                 MRS             X20, #3, c13, c0, #2
.text:000000000000B734                 LDR             X10, [X20,#0x28]
.text:000000000000B738                 MOV             W1, #0xC8
.text:000000000000B73C                 MOV             X19, X0
.text:000000000000B740                 ADD             X3, X3, #aS@PAGEOFF ; "%s"
.text:000000000000B744                 CSEL            X8, X8, X9, NE
.text:000000000000B748                 STUR            X10, [X29,#var_18]
.text:000000000000B74C                 MOV             X0, SP
.text:000000000000B750                 MOV             X2, X1
.text:000000000000B754                 LDR             X4, [X8]
.text:000000000000B758                 BL              sub_8A58
.text:000000000000B75C                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000000B760                 MOV             X1, SP  ; char *
.text:000000000000B764                 MOV             W2, WZR ; int
.text:000000000000B768                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B76C                 LDR             X8, [X20,#0x28]
.text:000000000000B770                 LDUR            X9, [X29,#var_18]
.text:000000000000B774                 CMP             X8, X9
.text:000000000000B778                 B.NE            loc_B78C
.text:000000000000B77C                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B780                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B784                 ADD             SP, SP, #0xF0
.text:000000000000B788                 RET
.text:000000000000B78C ; ---------------------------------------------------------------------------
.text:000000000000B78C loc_B78C                                ; CODE XREF: tinyxml2::XMLAttribute::SetAttribute(bool)+70↑j
.text:000000000000B78C                 BL              .__stack_chk_fail
.text:000000000000B78C ; } // starts at B708
.text:000000000000B78C ; End of function tinyxml2::XMLAttribute::SetAttribute(bool)
.text:000000000000B790 ; =============== S U B R O U T I N E =======================================
.text:000000000000B790 ; Attributes: bp-based frame
.text:000000000000B790 ; __int64 __fastcall tinyxml2::XMLAttribute::SetAttribute(tinyxml2::XMLAttribute *__hidden this, double)
.text:000000000000B790                 EXPORT _ZN8tinyxml212XMLAttribute12SetAttributeEd
.text:000000000000B790 _ZN8tinyxml212XMLAttribute12SetAttributeEd
.text:000000000000B790                                         ; DATA XREF: LOAD:0000000000000C48↑o
.text:000000000000B790 var_18          = -0x18
.text:000000000000B790 var_10          = -0x10
.text:000000000000B790 var_s0          =  0
.text:000000000000B790 ; __unwind {
.text:000000000000B790                 SUB             SP, SP, #0xF0
.text:000000000000B794                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B798                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B79C                 ADD             X29, SP, #0xE0
.text:000000000000B7A0                 MRS             X20, #3, c13, c0, #2
.text:000000000000B7A4                 ADRP            X3, #a17g@PAGE ; "%.17g"
.text:000000000000B7A8                 LDR             X8, [X20,#0x28]
.text:000000000000B7AC                 MOV             W1, #0xC8
.text:000000000000B7B0                 MOV             X19, X0
.text:000000000000B7B4                 ADD             X3, X3, #a17g@PAGEOFF ; "%.17g"
.text:000000000000B7B8                 MOV             X0, SP
.text:000000000000B7BC                 MOV             X2, X1
.text:000000000000B7C0                 STUR            X8, [X29,#var_18]
.text:000000000000B7C4                 BL              sub_8A58
.text:000000000000B7C8                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000000B7CC                 MOV             X1, SP  ; char *
.text:000000000000B7D0                 MOV             W2, WZR ; int
.text:000000000000B7D4                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B7D8                 LDR             X8, [X20,#0x28]
.text:000000000000B7DC                 LDUR            X9, [X29,#var_18]
.text:000000000000B7E0                 CMP             X8, X9
.text:000000000000B7E4                 B.NE            loc_B7F8
.text:000000000000B7E8                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B7EC                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B7F0                 ADD             SP, SP, #0xF0
.text:000000000000B7F4                 RET
.text:000000000000B7F8 ; ---------------------------------------------------------------------------
.text:000000000000B7F8 loc_B7F8                                ; CODE XREF: tinyxml2::XMLAttribute::SetAttribute(double)+54↑j
.text:000000000000B7F8                 BL              .__stack_chk_fail
.text:000000000000B7F8 ; } // starts at B790
.text:000000000000B7F8 ; End of function tinyxml2::XMLAttribute::SetAttribute(double)
.text:000000000000B7F8 ; ---------------------------------------------------------------------------
.text:000000000000B7FC                 ALIGN 0x20
.text:000000000000B800 ; =============== S U B R O U T I N E =======================================
.text:000000000000B800 ; Attributes: bp-based frame
.text:000000000000B800 ; __int64 __fastcall tinyxml2::XMLAttribute::SetAttribute(tinyxml2::XMLAttribute *__hidden this, float)
.text:000000000000B800                 EXPORT _ZN8tinyxml212XMLAttribute12SetAttributeEf
.text:000000000000B800 _ZN8tinyxml212XMLAttribute12SetAttributeEf
.text:000000000000B800                                         ; DATA XREF: LOAD:0000000000000CC0↑o
.text:000000000000B800 var_18          = -0x18
.text:000000000000B800 var_10          = -0x10
.text:000000000000B800 var_s0          =  0
.text:000000000000B800 ; __unwind {
.text:000000000000B800                 SUB             SP, SP, #0xF0
.text:000000000000B804                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B808                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B80C                 ADD             X29, SP, #0xE0
.text:000000000000B810                 FCVT            D0, S0
.text:000000000000B814                 MRS             X20, #3, c13, c0, #2
.text:000000000000B818                 LDR             X8, [X20,#0x28]
.text:000000000000B81C                 ADRP            X3, #a8g@PAGE ; "%.8g"
.text:000000000000B820                 MOV             W1, #0xC8
.text:000000000000B824                 MOV             X19, X0
.text:000000000000B828                 ADD             X3, X3, #a8g@PAGEOFF ; "%.8g"
.text:000000000000B82C                 MOV             X0, SP
.text:000000000000B830                 STUR            X8, [X29,#var_18]
.text:000000000000B834                 MOV             X2, X1
.text:000000000000B838                 BL              sub_8A58
.text:000000000000B83C                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000000B840                 MOV             X1, SP  ; char *
.text:000000000000B844                 MOV             W2, WZR ; int
.text:000000000000B848                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000B84C                 LDR             X8, [X20,#0x28]
.text:000000000000B850                 LDUR            X9, [X29,#var_18]
.text:000000000000B854                 CMP             X8, X9
.text:000000000000B858                 B.NE            loc_B86C
.text:000000000000B85C                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000B860                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000B864                 ADD             SP, SP, #0xF0
.text:000000000000B868                 RET
.text:000000000000B86C ; ---------------------------------------------------------------------------
.text:000000000000B86C loc_B86C                                ; CODE XREF: tinyxml2::XMLAttribute::SetAttribute(float)+58↑j
.text:000000000000B86C                 BL              .__stack_chk_fail
.text:000000000000B86C ; } // starts at B800
.text:000000000000B86C ; End of function tinyxml2::XMLAttribute::SetAttribute(float)
.text:000000000000B870 ; =============== S U B R O U T I N E =======================================
.text:000000000000B870 ; tinyxml2::XMLElement::XMLElement(tinyxml2::XMLDocument *)
.text:000000000000B870                 EXPORT _ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE
.text:000000000000B870 _ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE
.text:000000000000B870                                         ; DATA XREF: LOAD:0000000000001530↑o
.text:000000000000B870                                         ; LOAD:00000000000018A8↑o
.text:000000000000B870 ; __unwind {
.text:000000000000B870                 ADRP            X8, #_ZTVN8tinyxml210XMLElementE_ptr@PAGE
.text:000000000000B874                 MOVI            V0.2D, #0
.text:000000000000B878                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLElementE_ptr@PAGEOFF]
.text:000000000000B87C                 STP             X1, XZR, [X0,#8]
.text:000000000000B880                 STR             WZR, [X0,#0x18]
.text:000000000000B884                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000B888                 ADD             X8, X8, #0x10
.text:000000000000B88C                 STR             WZR, [X0,#0x30]
.text:000000000000B890                 STUR            Q0, [X0,#0x58]
.text:000000000000B894                 STUR            Q0, [X0,#0x48]
.text:000000000000B898                 STR             X8, [X0]
.text:000000000000B89C                 STUR            Q0, [X0,#0x38]
.text:000000000000B8A0                 STR             WZR, [X0,#0x68]
.text:000000000000B8A4                 STR             XZR, [X0,#0x70]
.text:000000000000B8A8                 RET
.text:000000000000B8A8 ; } // starts at B870
.text:000000000000B8A8 ; End of function tinyxml2::XMLElement::XMLElement(tinyxml2::XMLDocument *)
.text:000000000000B8A8 ; ---------------------------------------------------------------------------
.text:000000000000B8AC                 ALIGN 0x10
.text:000000000000B8B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B8B0 ; Attributes: bp-based frame
.text:000000000000B8B0 ; void __fastcall tinyxml2::XMLElement::~XMLElement(tinyxml2::XMLElement *__hidden this)
.text:000000000000B8B0                 EXPORT _ZN8tinyxml210XMLElementD2Ev
.text:000000000000B8B0 _ZN8tinyxml210XMLElementD2Ev            ; DATA XREF: LOAD:0000000000000E10↑o
.text:000000000000B8B0                                         ; LOAD:0000000000001200↑o ...
.text:000000000000B8B0 var_20          = -0x20
.text:000000000000B8B0 var_10          = -0x10
.text:000000000000B8B0 var_s0          =  0
.text:000000000000B8B0 ; __unwind {
.text:000000000000B8B0                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000B8B4                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000B8B8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000B8BC                 ADD             X29, SP, #0x20
.text:000000000000B8C0                 ADRP            X8, #_ZTVN8tinyxml210XMLElementE_ptr@PAGE
.text:000000000000B8C4                 MOV             X19, X0
.text:000000000000B8C8                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLElementE_ptr@PAGEOFF]
.text:000000000000B8CC                 LDR             X20, [X0,#0x70]
.text:000000000000B8D0                 ADD             X8, X8, #0x10
.text:000000000000B8D4                 STR             X8, [X0]
.text:000000000000B8D8                 CBZ             X20, loc_B910
.text:000000000000B8DC loc_B8DC                                ; CODE XREF: tinyxml2::XMLElement::~XMLElement()+5C↓j
.text:000000000000B8DC                 LDR             X8, [X20]
.text:000000000000B8E0                 MOV             X0, X20
.text:000000000000B8E4                 LDP             X22, X21, [X20,#0x40]
.text:000000000000B8E8                 LDR             X8, [X8]
.text:000000000000B8EC                 BLR             X8
.text:000000000000B8F0                 LDR             X8, [X21]
.text:000000000000B8F4                 MOV             X0, X21
.text:000000000000B8F8                 MOV             X1, X20
.text:000000000000B8FC                 LDR             X8, [X8,#0x20]
.text:000000000000B900                 BLR             X8
.text:000000000000B904                 MOV             X20, X22
.text:000000000000B908                 STR             X22, [X19,#0x70]
.text:000000000000B90C                 CBNZ            X22, loc_B8DC
.text:000000000000B910 loc_B910                                ; CODE XREF: tinyxml2::XMLElement::~XMLElement()+28↑j
.text:000000000000B910                 MOV             X0, X19 ; this
.text:000000000000B914                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000B918                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000B91C                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:000000000000B920                 B               ._ZN8tinyxml27XMLNodeD2Ev ; tinyxml2::XMLNode::~XMLNode()
.text:000000000000B920 ; } // starts at B8B0
.text:000000000000B920 ; End of function tinyxml2::XMLElement::~XMLElement()
.text:000000000000B920 ; ---------------------------------------------------------------------------
.text:000000000000B924                 ALIGN 8
.text:000000000000B928 ; =============== S U B R O U T I N E =======================================
.text:000000000000B928 ; Attributes: bp-based frame
.text:000000000000B928 ; tinyxml2::XMLElement::DeleteAttribute(tinyxml2::XMLAttribute *)
.text:000000000000B928                 EXPORT _ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE
.text:000000000000B928 _ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE
.text:000000000000B928                                         ; DATA XREF: LOAD:0000000000000CF0↑o
.text:000000000000B928 var_10          = -0x10
.text:000000000000B928 var_s0          =  0
.text:000000000000B928 ; __unwind {
.text:000000000000B928                 CBZ             X0, locret_B968
.text:000000000000B92C                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000B930                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B934                 ADD             X29, SP, #0x10
.text:000000000000B938                 LDR             X8, [X0]
.text:000000000000B93C                 MOV             X19, X0
.text:000000000000B940                 LDR             X20, [X0,#0x48]
.text:000000000000B944                 LDR             X8, [X8]
.text:000000000000B948                 BLR             X8
.text:000000000000B94C                 LDR             X8, [X20]
.text:000000000000B950                 MOV             X0, X20
.text:000000000000B954                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B958                 MOV             X1, X19
.text:000000000000B95C                 LDR             X2, [X8,#0x20]
.text:000000000000B960                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000B964                 BR              X2
.text:000000000000B968 ; ---------------------------------------------------------------------------
.text:000000000000B968 locret_B968                             ; CODE XREF: tinyxml2::XMLElement::DeleteAttribute(tinyxml2::XMLAttribute *)↑j
.text:000000000000B968                 RET
.text:000000000000B968 ; } // starts at B928
.text:000000000000B968 ; End of function tinyxml2::XMLElement::DeleteAttribute(tinyxml2::XMLAttribute *)
.text:000000000000B968 ; ---------------------------------------------------------------------------
.text:000000000000B96C                 ALIGN 0x10
.text:000000000000B970 ; =============== S U B R O U T I N E =======================================
.text:000000000000B970 ; Attributes: bp-based frame
.text:000000000000B970 ; void __fastcall tinyxml2::XMLElement::~XMLElement(tinyxml2::XMLElement *__hidden this)
.text:000000000000B970                 EXPORT _ZN8tinyxml210XMLElementD0Ev
.text:000000000000B970 _ZN8tinyxml210XMLElementD0Ev            ; DATA XREF: LOAD:0000000000000AF8↑o
.text:000000000000B970                                         ; .data.rel.ro:0000000000012370↓o
.text:000000000000B970 var_20          = -0x20
.text:000000000000B970 var_10          = -0x10
.text:000000000000B970 var_s0          =  0
.text:000000000000B970 ; __unwind {
.text:000000000000B970                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000B974                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000B978                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000B97C                 ADD             X29, SP, #0x20
.text:000000000000B980                 ADRP            X8, #_ZTVN8tinyxml210XMLElementE_ptr@PAGE
.text:000000000000B984                 MOV             X19, X0
.text:000000000000B988                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLElementE_ptr@PAGEOFF]
.text:000000000000B98C                 LDR             X20, [X0,#0x70]
.text:000000000000B990                 ADD             X8, X8, #0x10
.text:000000000000B994                 STR             X8, [X0]
.text:000000000000B998                 CBZ             X20, loc_B9D0
.text:000000000000B99C loc_B99C                                ; CODE XREF: tinyxml2::XMLElement::~XMLElement()+5C↓j
.text:000000000000B99C                 LDR             X8, [X20]
.text:000000000000B9A0                 MOV             X0, X20
.text:000000000000B9A4                 LDP             X22, X21, [X20,#0x40]
.text:000000000000B9A8                 LDR             X8, [X8]
.text:000000000000B9AC                 BLR             X8
.text:000000000000B9B0                 LDR             X8, [X21]
.text:000000000000B9B4                 MOV             X0, X21
.text:000000000000B9B8                 MOV             X1, X20
.text:000000000000B9BC                 LDR             X8, [X8,#0x20]
.text:000000000000B9C0                 BLR             X8
.text:000000000000B9C4                 MOV             X20, X22
.text:000000000000B9C8                 STR             X22, [X19,#0x70]
.text:000000000000B9CC                 CBNZ            X22, loc_B99C
.text:000000000000B9D0 loc_B9D0                                ; CODE XREF: tinyxml2::XMLElement::~XMLElement()+28↑j
.text:000000000000B9D0                 MOV             X0, X19 ; this
.text:000000000000B9D4                 BL              ._ZN8tinyxml27XMLNodeD2Ev ; tinyxml2::XMLNode::~XMLNode()
.text:000000000000B9D8                 MOV             X0, X19 ; void *
.text:000000000000B9DC                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000B9E0                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000B9E4                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:000000000000B9E8                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000B9E8 ; } // starts at B970
.text:000000000000B9E8 ; End of function tinyxml2::XMLElement::~XMLElement()
.text:000000000000B9E8 ; ---------------------------------------------------------------------------
.text:000000000000B9EC                 ALIGN 0x10
.text:000000000000B9F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B9F0 ; Attributes: bp-based frame
.text:000000000000B9F0 ; __int64 __fastcall tinyxml2::XMLElement::FindAttribute(tinyxml2::XMLElement *__hidden this, const char *)
.text:000000000000B9F0                 EXPORT _ZNK8tinyxml210XMLElement13FindAttributeEPKc
.text:000000000000B9F0 _ZNK8tinyxml210XMLElement13FindAttributeEPKc
.text:000000000000B9F0                                         ; DATA XREF: LOAD:0000000000000ED0↑o
.text:000000000000B9F0 var_10          = -0x10
.text:000000000000B9F0 var_s0          =  0
.text:000000000000B9F0 ; __unwind {
.text:000000000000B9F0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000B9F4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000B9F8                 ADD             X29, SP, #0x10
.text:000000000000B9FC                 LDR             X19, [X0,#0x70]
.text:000000000000BA00                 CBZ             X19, loc_BA30
.text:000000000000BA04                 MOV             X20, X1
.text:000000000000BA08 loc_BA08                                ; CODE XREF: tinyxml2::XMLElement::FindAttribute(char const*)+3C↓j
.text:000000000000BA08                 ADD             X0, X19, #8 ; this
.text:000000000000BA0C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BA10                 CMP             X0, X20
.text:000000000000BA14                 B.EQ            loc_BA30
.text:000000000000BA18                 MOV             X1, X20 ; s2
.text:000000000000BA1C                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BA20                 BL              .strncmp
.text:000000000000BA24                 CBZ             W0, loc_BA30
.text:000000000000BA28                 LDR             X19, [X19,#0x40]
.text:000000000000BA2C                 CBNZ            X19, loc_BA08
.text:000000000000BA30 loc_BA30                                ; CODE XREF: tinyxml2::XMLElement::FindAttribute(char const*)+10↑j
.text:000000000000BA30                                         ; tinyxml2::XMLElement::FindAttribute(char const*)+24↑j ...
.text:000000000000BA30                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000BA34                 MOV             X0, X19
.text:000000000000BA38                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000BA3C                 RET
.text:000000000000BA3C ; } // starts at B9F0
.text:000000000000BA3C ; End of function tinyxml2::XMLElement::FindAttribute(char const*)
.text:000000000000BA40 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA40 ; Attributes: bp-based frame
.text:000000000000BA40 ; __int64 __fastcall tinyxml2::XMLElement::Attribute(tinyxml2::XMLElement *__hidden this, const char *, const char *)
.text:000000000000BA40                 EXPORT _ZNK8tinyxml210XMLElement9AttributeEPKcS2_
.text:000000000000BA40 _ZNK8tinyxml210XMLElement9AttributeEPKcS2_
.text:000000000000BA40                                         ; DATA XREF: LOAD:00000000000006F0↑o
.text:000000000000BA40 var_20          = -0x20
.text:000000000000BA40 var_10          = -0x10
.text:000000000000BA40 var_s0          =  0
.text:000000000000BA40 ; __unwind {
.text:000000000000BA40                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000BA44                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000BA48                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000BA4C                 ADD             X29, SP, #0x20
.text:000000000000BA50                 LDR             X21, [X0,#0x70]
.text:000000000000BA54                 CBZ             X21, loc_BAB0
.text:000000000000BA58                 MOV             X19, X2
.text:000000000000BA5C                 MOV             X20, X1
.text:000000000000BA60 loc_BA60                                ; CODE XREF: tinyxml2::XMLElement::Attribute(char const*,char const*)+44↓j
.text:000000000000BA60                 ADD             X0, X21, #8 ; this
.text:000000000000BA64                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BA68                 CMP             X0, X20
.text:000000000000BA6C                 B.EQ            loc_BA8C
.text:000000000000BA70                 MOV             X1, X20 ; s2
.text:000000000000BA74                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BA78                 BL              .strncmp
.text:000000000000BA7C                 CBZ             W0, loc_BA8C
.text:000000000000BA80                 LDR             X21, [X21,#0x40]
.text:000000000000BA84                 CBNZ            X21, loc_BA60
.text:000000000000BA88                 B               loc_BAB0
.text:000000000000BA8C ; ---------------------------------------------------------------------------
.text:000000000000BA8C loc_BA8C                                ; CODE XREF: tinyxml2::XMLElement::Attribute(char const*,char const*)+2C↑j
.text:000000000000BA8C                                         ; tinyxml2::XMLElement::Attribute(char const*,char const*)+3C↑j
.text:000000000000BA8C                 CBZ             X19, loc_BAC4
.text:000000000000BA90                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000BA94                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BA98                 CMP             X0, X19
.text:000000000000BA9C                 B.EQ            loc_BAC4
.text:000000000000BAA0                 MOV             X1, X19 ; s2
.text:000000000000BAA4                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BAA8                 BL              .strncmp
.text:000000000000BAAC                 CBZ             W0, loc_BAC4
.text:000000000000BAB0 loc_BAB0                                ; CODE XREF: tinyxml2::XMLElement::Attribute(char const*,char const*)+14↑j
.text:000000000000BAB0                                         ; tinyxml2::XMLElement::Attribute(char const*,char const*)+48↑j
.text:000000000000BAB0                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000BAB4                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000BAB8                 MOV             X0, XZR
.text:000000000000BABC                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000BAC0                 RET
.text:000000000000BAC4 ; ---------------------------------------------------------------------------
.text:000000000000BAC4 loc_BAC4                                ; CODE XREF: tinyxml2::XMLElement::Attribute(char const*,char const*):loc_BA8C↑j
.text:000000000000BAC4                                         ; tinyxml2::XMLElement::Attribute(char const*,char const*)+5C↑j ...
.text:000000000000BAC4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000BAC8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000BACC                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000BAD0                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000BAD4                 B               ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BAD4 ; } // starts at BA40
.text:000000000000BAD4 ; End of function tinyxml2::XMLElement::Attribute(char const*,char const*)
.text:000000000000BAD8 ; =============== S U B R O U T I N E =======================================
.text:000000000000BAD8 ; Attributes: bp-based frame
.text:000000000000BAD8 ; __int64 __fastcall tinyxml2::XMLElement::IntAttribute(tinyxml2::XMLElement *__hidden this, const char *, int)
.text:000000000000BAD8                 EXPORT _ZNK8tinyxml210XMLElement12IntAttributeEPKci
.text:000000000000BAD8 _ZNK8tinyxml210XMLElement12IntAttributeEPKci
.text:000000000000BAD8                                         ; DATA XREF: LOAD:0000000000001308↑o
.text:000000000000BAD8 var_2C          = -0x2C
.text:000000000000BAD8 var_28          = -0x28
.text:000000000000BAD8 var_20          = -0x20
.text:000000000000BAD8 var_10          = -0x10
.text:000000000000BAD8 var_s0          =  0
.text:000000000000BAD8 ; __unwind {
.text:000000000000BAD8                 SUB             SP, SP, #0x40
.text:000000000000BADC                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BAE0                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BAE4                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BAE8                 ADD             X29, SP, #0x30
.text:000000000000BAEC                 MRS             X21, #3, c13, c0, #2
.text:000000000000BAF0                 MOV             W19, W2
.text:000000000000BAF4                 LDR             X8, [X21,#0x28]
.text:000000000000BAF8                 STR             X8, [SP,#0x30+var_28]
.text:000000000000BAFC                 LDR             X22, [X0,#0x70]
.text:000000000000BB00                 STR             W2, [SP,#0x30+var_2C]
.text:000000000000BB04                 CBZ             X22, loc_BB54
.text:000000000000BB08                 MOV             X20, X1
.text:000000000000BB0C loc_BB0C                                ; CODE XREF: tinyxml2::XMLElement::IntAttribute(char const*,int)+58↓j
.text:000000000000BB0C                 ADD             X0, X22, #8 ; this
.text:000000000000BB10                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BB14                 CMP             X0, X20
.text:000000000000BB18                 B.EQ            loc_BB38
.text:000000000000BB1C                 MOV             X1, X20 ; s2
.text:000000000000BB20                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BB24                 BL              .strncmp
.text:000000000000BB28                 CBZ             W0, loc_BB38
.text:000000000000BB2C                 LDR             X22, [X22,#0x40]
.text:000000000000BB30                 CBNZ            X22, loc_BB0C
.text:000000000000BB34                 B               loc_BB54
.text:000000000000BB38 ; ---------------------------------------------------------------------------
.text:000000000000BB38 loc_BB38                                ; CODE XREF: tinyxml2::XMLElement::IntAttribute(char const*,int)+40↑j
.text:000000000000BB38                                         ; tinyxml2::XMLElement::IntAttribute(char const*,int)+50↑j
.text:000000000000BB38                 ADD             X0, X22, #0x20 ; ' ' ; this
.text:000000000000BB3C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BB40                 ADRP            X1, #unk_4EA5@PAGE
.text:000000000000BB44                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:000000000000BB48                 ADD             X2, SP, #0x30+var_2C
.text:000000000000BB4C                 BL              .sscanf
.text:000000000000BB50                 LDR             W19, [SP,#0x30+var_2C]
.text:000000000000BB54 loc_BB54                                ; CODE XREF: tinyxml2::XMLElement::IntAttribute(char const*,int)+2C↑j
.text:000000000000BB54                                         ; tinyxml2::XMLElement::IntAttribute(char const*,int)+5C↑j
.text:000000000000BB54                 LDR             X8, [X21,#0x28]
.text:000000000000BB58                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000BB5C                 CMP             X8, X9
.text:000000000000BB60                 B.NE            loc_BB7C
.text:000000000000BB64                 MOV             W0, W19
.text:000000000000BB68                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BB6C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BB70                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BB74                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000BB78                 RET
.text:000000000000BB7C ; ---------------------------------------------------------------------------
.text:000000000000BB7C loc_BB7C                                ; CODE XREF: tinyxml2::XMLElement::IntAttribute(char const*,int)+88↑j
.text:000000000000BB7C                 BL              .__stack_chk_fail
.text:000000000000BB7C ; } // starts at BAD8
.text:000000000000BB7C ; End of function tinyxml2::XMLElement::IntAttribute(char const*,int)
.text:000000000000BB80 ; =============== S U B R O U T I N E =======================================
.text:000000000000BB80 ; Attributes: bp-based frame
.text:000000000000BB80 ; __int64 __fastcall tinyxml2::XMLElement::UnsignedAttribute(tinyxml2::XMLElement *__hidden this, const char *, unsigned int)
.text:000000000000BB80                 EXPORT _ZNK8tinyxml210XMLElement17UnsignedAttributeEPKcj
.text:000000000000BB80 _ZNK8tinyxml210XMLElement17UnsignedAttributeEPKcj
.text:000000000000BB80                                         ; DATA XREF: LOAD:0000000000001608↑o
.text:000000000000BB80 var_2C          = -0x2C
.text:000000000000BB80 var_28          = -0x28
.text:000000000000BB80 var_20          = -0x20
.text:000000000000BB80 var_10          = -0x10
.text:000000000000BB80 var_s0          =  0
.text:000000000000BB80 ; __unwind {
.text:000000000000BB80                 SUB             SP, SP, #0x40
.text:000000000000BB84                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BB88                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BB8C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BB90                 ADD             X29, SP, #0x30
.text:000000000000BB94                 MRS             X21, #3, c13, c0, #2
.text:000000000000BB98                 MOV             W19, W2
.text:000000000000BB9C                 LDR             X8, [X21,#0x28]
.text:000000000000BBA0                 STR             X8, [SP,#0x30+var_28]
.text:000000000000BBA4                 LDR             X22, [X0,#0x70]
.text:000000000000BBA8                 STR             W2, [SP,#0x30+var_2C]
.text:000000000000BBAC                 CBZ             X22, loc_BBFC
.text:000000000000BBB0                 MOV             X20, X1
.text:000000000000BBB4 loc_BBB4                                ; CODE XREF: tinyxml2::XMLElement::UnsignedAttribute(char const*,uint)+58↓j
.text:000000000000BBB4                 ADD             X0, X22, #8 ; this
.text:000000000000BBB8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BBBC                 CMP             X0, X20
.text:000000000000BBC0                 B.EQ            loc_BBE0
.text:000000000000BBC4                 MOV             X1, X20 ; s2
.text:000000000000BBC8                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BBCC                 BL              .strncmp
.text:000000000000BBD0                 CBZ             W0, loc_BBE0
.text:000000000000BBD4                 LDR             X22, [X22,#0x40]
.text:000000000000BBD8                 CBNZ            X22, loc_BBB4
.text:000000000000BBDC                 B               loc_BBFC
.text:000000000000BBE0 ; ---------------------------------------------------------------------------
.text:000000000000BBE0 loc_BBE0                                ; CODE XREF: tinyxml2::XMLElement::UnsignedAttribute(char const*,uint)+40↑j
.text:000000000000BBE0                                         ; tinyxml2::XMLElement::UnsignedAttribute(char const*,uint)+50↑j
.text:000000000000BBE0                 ADD             X0, X22, #0x20 ; ' ' ; this
.text:000000000000BBE4                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BBE8                 ADRP            X1, #unk_4EE4@PAGE
.text:000000000000BBEC                 ADD             X1, X1, #unk_4EE4@PAGEOFF ; format
.text:000000000000BBF0                 ADD             X2, SP, #0x30+var_2C
.text:000000000000BBF4                 BL              .sscanf
.text:000000000000BBF8                 LDR             W19, [SP,#0x30+var_2C]
.text:000000000000BBFC loc_BBFC                                ; CODE XREF: tinyxml2::XMLElement::UnsignedAttribute(char const*,uint)+2C↑j
.text:000000000000BBFC                                         ; tinyxml2::XMLElement::UnsignedAttribute(char const*,uint)+5C↑j
.text:000000000000BBFC                 LDR             X8, [X21,#0x28]
.text:000000000000BC00                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000BC04                 CMP             X8, X9
.text:000000000000BC08                 B.NE            loc_BC24
.text:000000000000BC0C                 MOV             W0, W19
.text:000000000000BC10                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BC14                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BC18                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BC1C                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000BC20                 RET
.text:000000000000BC24 ; ---------------------------------------------------------------------------
.text:000000000000BC24 loc_BC24                                ; CODE XREF: tinyxml2::XMLElement::UnsignedAttribute(char const*,uint)+88↑j
.text:000000000000BC24                 BL              .__stack_chk_fail
.text:000000000000BC24 ; } // starts at BB80
.text:000000000000BC24 ; End of function tinyxml2::XMLElement::UnsignedAttribute(char const*,uint)
.text:000000000000BC28 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC28 ; Attributes: bp-based frame
.text:000000000000BC28 ; __int64 __fastcall tinyxml2::XMLElement::Int64Attribute(tinyxml2::XMLElement *__hidden this, const char *, __int64)
.text:000000000000BC28                 EXPORT _ZNK8tinyxml210XMLElement14Int64AttributeEPKcl
.text:000000000000BC28 _ZNK8tinyxml210XMLElement14Int64AttributeEPKcl
.text:000000000000BC28                                         ; DATA XREF: LOAD:0000000000000828↑o
.text:000000000000BC28 var_30          = -0x30
.text:000000000000BC28 var_28          = -0x28
.text:000000000000BC28 var_20          = -0x20
.text:000000000000BC28 var_10          = -0x10
.text:000000000000BC28 var_s0          =  0
.text:000000000000BC28 ; __unwind {
.text:000000000000BC28                 SUB             SP, SP, #0x40
.text:000000000000BC2C                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BC30                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BC34                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BC38                 ADD             X29, SP, #0x30
.text:000000000000BC3C                 MRS             X21, #3, c13, c0, #2
.text:000000000000BC40                 MOV             X19, X2
.text:000000000000BC44                 LDR             X8, [X21,#0x28]
.text:000000000000BC48                 STR             X8, [SP,#0x30+var_28]
.text:000000000000BC4C                 LDR             X22, [X0,#0x70]
.text:000000000000BC50                 CBZ             X22, loc_BCAC
.text:000000000000BC54                 MOV             X20, X1
.text:000000000000BC58 loc_BC58                                ; CODE XREF: tinyxml2::XMLElement::Int64Attribute(char const*,long)+54↓j
.text:000000000000BC58                 ADD             X0, X22, #8 ; this
.text:000000000000BC5C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BC60                 CMP             X0, X20
.text:000000000000BC64                 B.EQ            loc_BC84
.text:000000000000BC68                 MOV             X1, X20 ; s2
.text:000000000000BC6C                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BC70                 BL              .strncmp
.text:000000000000BC74                 CBZ             W0, loc_BC84
.text:000000000000BC78                 LDR             X22, [X22,#0x40]
.text:000000000000BC7C                 CBNZ            X22, loc_BC58
.text:000000000000BC80                 B               loc_BCAC
.text:000000000000BC84 ; ---------------------------------------------------------------------------
.text:000000000000BC84 loc_BC84                                ; CODE XREF: tinyxml2::XMLElement::Int64Attribute(char const*,long)+3C↑j
.text:000000000000BC84                                         ; tinyxml2::XMLElement::Int64Attribute(char const*,long)+4C↑j
.text:000000000000BC84                 ADD             X0, X22, #0x20 ; ' ' ; this
.text:000000000000BC88                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BC8C                 ADRP            X1, #aLld@PAGE ; "%lld"
.text:000000000000BC90                 STR             XZR, [SP,#0x30+var_30]
.text:000000000000BC94                 ADD             X1, X1, #aLld@PAGEOFF ; "%lld"
.text:000000000000BC98                 MOV             X2, SP
.text:000000000000BC9C                 BL              .sscanf
.text:000000000000BCA0                 CMP             W0, #1
.text:000000000000BCA4                 B.NE            loc_BCAC
.text:000000000000BCA8                 LDR             X19, [SP,#0x30+var_30]
.text:000000000000BCAC loc_BCAC                                ; CODE XREF: tinyxml2::XMLElement::Int64Attribute(char const*,long)+28↑j
.text:000000000000BCAC                                         ; tinyxml2::XMLElement::Int64Attribute(char const*,long)+58↑j ...
.text:000000000000BCAC                 LDR             X8, [X21,#0x28]
.text:000000000000BCB0                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000BCB4                 CMP             X8, X9
.text:000000000000BCB8                 B.NE            loc_BCD4
.text:000000000000BCBC                 MOV             X0, X19
.text:000000000000BCC0                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BCC4                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BCC8                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BCCC                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000BCD0                 RET
.text:000000000000BCD4 ; ---------------------------------------------------------------------------
.text:000000000000BCD4 loc_BCD4                                ; CODE XREF: tinyxml2::XMLElement::Int64Attribute(char const*,long)+90↑j
.text:000000000000BCD4                 BL              .__stack_chk_fail
.text:000000000000BCD4 ; } // starts at BC28
.text:000000000000BCD4 ; End of function tinyxml2::XMLElement::Int64Attribute(char const*,long)
.text:000000000000BCD8 ; =============== S U B R O U T I N E =======================================
.text:000000000000BCD8 ; Attributes: bp-based frame
.text:000000000000BCD8 ; __int64 __fastcall tinyxml2::XMLElement::BoolAttribute(tinyxml2::XMLElement *__hidden this, const char *, bool)
.text:000000000000BCD8                 EXPORT _ZNK8tinyxml210XMLElement13BoolAttributeEPKcb
.text:000000000000BCD8 _ZNK8tinyxml210XMLElement13BoolAttributeEPKcb
.text:000000000000BCD8                                         ; DATA XREF: LOAD:00000000000005B8↑o
.text:000000000000BCD8 var_2C          = -0x2C
.text:000000000000BCD8 var_28          = -0x28
.text:000000000000BCD8 var_20          = -0x20
.text:000000000000BCD8 var_10          = -0x10
.text:000000000000BCD8 var_s0          =  0
.text:000000000000BCD8 ; __unwind {
.text:000000000000BCD8                 SUB             SP, SP, #0x40
.text:000000000000BCDC                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BCE0                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BCE4                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BCE8                 ADD             X29, SP, #0x30
.text:000000000000BCEC                 MRS             X20, #3, c13, c0, #2
.text:000000000000BCF0                 AND             W21, W2, #1
.text:000000000000BCF4                 LDR             X8, [X20,#0x28]
.text:000000000000BCF8                 STR             X8, [SP,#0x30+var_28]
.text:000000000000BCFC                 LDR             X22, [X0,#0x70]
.text:000000000000BD00                 CBZ             X22, loc_BDC8
.text:000000000000BD04                 MOV             X19, X1
.text:000000000000BD08 loc_BD08                                ; CODE XREF: tinyxml2::XMLElement::BoolAttribute(char const*,bool)+54↓j
.text:000000000000BD08                 ADD             X0, X22, #8 ; this
.text:000000000000BD0C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BD10                 CMP             X0, X19
.text:000000000000BD14                 B.EQ            loc_BD34
.text:000000000000BD18                 MOV             X1, X19 ; s2
.text:000000000000BD1C                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BD20                 BL              .strncmp
.text:000000000000BD24                 CBZ             W0, loc_BD34
.text:000000000000BD28                 LDR             X22, [X22,#0x40]
.text:000000000000BD2C                 CBNZ            X22, loc_BD08
.text:000000000000BD30                 B               loc_BDC8
.text:000000000000BD34 ; ---------------------------------------------------------------------------
.text:000000000000BD34 loc_BD34                                ; CODE XREF: tinyxml2::XMLElement::BoolAttribute(char const*,bool)+3C↑j
.text:000000000000BD34                                         ; tinyxml2::XMLElement::BoolAttribute(char const*,bool)+4C↑j
.text:000000000000BD34                 ADD             X0, X22, #0x20 ; ' ' ; this
.text:000000000000BD38                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BD3C                 ADRP            X1, #unk_4EA5@PAGE
.text:000000000000BD40                 STR             WZR, [SP,#0x30+var_2C]
.text:000000000000BD44                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:000000000000BD48                 ADD             X2, SP, #0x30+var_2C
.text:000000000000BD4C                 MOV             X19, X0
.text:000000000000BD50                 BL              .sscanf
.text:000000000000BD54                 CMP             W0, #1
.text:000000000000BD58                 B.NE            loc_BD6C
.text:000000000000BD5C                 LDR             W8, [SP,#0x30+var_2C]
.text:000000000000BD60                 CMP             W8, #0
.text:000000000000BD64                 CSET            W21, NE
.text:000000000000BD68                 B               loc_BDC8
.text:000000000000BD6C ; ---------------------------------------------------------------------------
.text:000000000000BD6C loc_BD6C                                ; CODE XREF: tinyxml2::XMLElement::BoolAttribute(char const*,bool)+80↑j
.text:000000000000BD6C                 ADRP            X8, #aTrue@PAGE ; "true"
.text:000000000000BD70                 ADD             X8, X8, #aTrue@PAGEOFF ; "true"
.text:000000000000BD74                 CMP             X19, X8
.text:000000000000BD78                 B.EQ            loc_BDC4
.text:000000000000BD7C                 ADRP            X1, #aTrue@PAGE ; "true"
.text:000000000000BD80                 ADD             X1, X1, #aTrue@PAGEOFF ; "true"
.text:000000000000BD84                 MOV             X0, X19 ; s1
.text:000000000000BD88                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BD8C                 BL              .strncmp
.text:000000000000BD90                 CBZ             W0, loc_BDC4
.text:000000000000BD94                 ADRP            X8, #aFalse@PAGE ; "false"
.text:000000000000BD98                 ADD             X8, X8, #aFalse@PAGEOFF ; "false"
.text:000000000000BD9C                 CMP             X19, X8
.text:000000000000BDA0                 B.EQ            loc_BDBC
.text:000000000000BDA4                 ADRP            X1, #aFalse@PAGE ; "false"
.text:000000000000BDA8                 ADD             X1, X1, #aFalse@PAGEOFF ; "false"
.text:000000000000BDAC                 MOV             X0, X19 ; s1
.text:000000000000BDB0                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BDB4                 BL              .strncmp
.text:000000000000BDB8                 CBNZ            W0, loc_BDC8
.text:000000000000BDBC loc_BDBC                                ; CODE XREF: tinyxml2::XMLElement::BoolAttribute(char const*,bool)+C8↑j
.text:000000000000BDBC                 MOV             W21, WZR
.text:000000000000BDC0                 B               loc_BDC8
.text:000000000000BDC4 ; ---------------------------------------------------------------------------
.text:000000000000BDC4 loc_BDC4                                ; CODE XREF: tinyxml2::XMLElement::BoolAttribute(char const*,bool)+A0↑j
.text:000000000000BDC4                                         ; tinyxml2::XMLElement::BoolAttribute(char const*,bool)+B8↑j
.text:000000000000BDC4                 MOV             W21, #1
.text:000000000000BDC8 loc_BDC8                                ; CODE XREF: tinyxml2::XMLElement::BoolAttribute(char const*,bool)+28↑j
.text:000000000000BDC8                                         ; tinyxml2::XMLElement::BoolAttribute(char const*,bool)+58↑j ...
.text:000000000000BDC8                 LDR             X8, [X20,#0x28]
.text:000000000000BDCC                 CMP             W21, #0
.text:000000000000BDD0                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000BDD4                 CSET            W0, NE
.text:000000000000BDD8                 CMP             X8, X9
.text:000000000000BDDC                 B.NE            loc_BDF4
.text:000000000000BDE0                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BDE4                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BDE8                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000BDEC                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000BDF0                 RET
.text:000000000000BDF4 ; ---------------------------------------------------------------------------
.text:000000000000BDF4 loc_BDF4                                ; CODE XREF: tinyxml2::XMLElement::BoolAttribute(char const*,bool)+104↑j
.text:000000000000BDF4                 BL              .__stack_chk_fail
.text:000000000000BDF4 ; } // starts at BCD8
.text:000000000000BDF4 ; End of function tinyxml2::XMLElement::BoolAttribute(char const*,bool)
.text:000000000000BDF8 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDF8 ; Attributes: bp-based frame
.text:000000000000BDF8 ; __int64 __fastcall tinyxml2::XMLElement::DoubleAttribute(tinyxml2::XMLElement *__hidden this, const char *, double)
.text:000000000000BDF8                 EXPORT _ZNK8tinyxml210XMLElement15DoubleAttributeEPKcd
.text:000000000000BDF8 _ZNK8tinyxml210XMLElement15DoubleAttributeEPKcd
.text:000000000000BDF8                                         ; DATA XREF: LOAD:00000000000017A0↑o
.text:000000000000BDF8 var_30          = -0x30
.text:000000000000BDF8 var_28          = -0x28
.text:000000000000BDF8 var_20          = -0x20
.text:000000000000BDF8 var_18          = -0x18
.text:000000000000BDF8 var_10          = -0x10
.text:000000000000BDF8 var_s0          =  0
.text:000000000000BDF8 ; __unwind {
.text:000000000000BDF8                 SUB             SP, SP, #0x40
.text:000000000000BDFC                 STR             D8, [SP,#0x30+var_20]
.text:000000000000BE00                 STR             X21, [SP,#0x30+var_18]
.text:000000000000BE04                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BE08                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BE0C                 ADD             X29, SP, #0x30
.text:000000000000BE10                 MRS             X20, #3, c13, c0, #2
.text:000000000000BE14                 MOV             V8.16B, V0.16B
.text:000000000000BE18                 LDR             X8, [X20,#0x28]
.text:000000000000BE1C                 STR             X8, [SP,#0x30+var_28]
.text:000000000000BE20                 LDR             X21, [X0,#0x70]
.text:000000000000BE24                 STR             D0, [SP,#0x30+var_30]
.text:000000000000BE28                 CBZ             X21, loc_BE78
.text:000000000000BE2C                 MOV             X19, X1
.text:000000000000BE30 loc_BE30                                ; CODE XREF: tinyxml2::XMLElement::DoubleAttribute(char const*,double)+5C↓j
.text:000000000000BE30                 ADD             X0, X21, #8 ; this
.text:000000000000BE34                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BE38                 CMP             X0, X19
.text:000000000000BE3C                 B.EQ            loc_BE5C
.text:000000000000BE40                 MOV             X1, X19 ; s2
.text:000000000000BE44                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BE48                 BL              .strncmp
.text:000000000000BE4C                 CBZ             W0, loc_BE5C
.text:000000000000BE50                 LDR             X21, [X21,#0x40]
.text:000000000000BE54                 CBNZ            X21, loc_BE30
.text:000000000000BE58                 B               loc_BE78
.text:000000000000BE5C ; ---------------------------------------------------------------------------
.text:000000000000BE5C loc_BE5C                                ; CODE XREF: tinyxml2::XMLElement::DoubleAttribute(char const*,double)+44↑j
.text:000000000000BE5C                                         ; tinyxml2::XMLElement::DoubleAttribute(char const*,double)+54↑j
.text:000000000000BE5C                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000BE60                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BE64                 ADRP            X1, #aLf@PAGE ; "%lf"
.text:000000000000BE68                 ADD             X1, X1, #aLf@PAGEOFF ; format
.text:000000000000BE6C                 MOV             X2, SP
.text:000000000000BE70                 BL              .sscanf
.text:000000000000BE74                 LDR             D8, [SP,#0x30+var_30]
.text:000000000000BE78 loc_BE78                                ; CODE XREF: tinyxml2::XMLElement::DoubleAttribute(char const*,double)+30↑j
.text:000000000000BE78                                         ; tinyxml2::XMLElement::DoubleAttribute(char const*,double)+60↑j
.text:000000000000BE78                 LDR             X8, [X20,#0x28]
.text:000000000000BE7C                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000BE80                 CMP             X8, X9
.text:000000000000BE84                 B.NE            loc_BEA4
.text:000000000000BE88                 MOV             V0.16B, V8.16B
.text:000000000000BE8C                 LDR             X21, [SP,#0x30+var_18]
.text:000000000000BE90                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BE94                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BE98                 LDR             D8, [SP,#0x30+var_20]
.text:000000000000BE9C                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000BEA0                 RET
.text:000000000000BEA4 ; ---------------------------------------------------------------------------
.text:000000000000BEA4 loc_BEA4                                ; CODE XREF: tinyxml2::XMLElement::DoubleAttribute(char const*,double)+8C↑j
.text:000000000000BEA4                 BL              .__stack_chk_fail
.text:000000000000BEA4 ; } // starts at BDF8
.text:000000000000BEA4 ; End of function tinyxml2::XMLElement::DoubleAttribute(char const*,double)
.text:000000000000BEA8 ; =============== S U B R O U T I N E =======================================
.text:000000000000BEA8 ; Attributes: bp-based frame
.text:000000000000BEA8 ; __int64 __fastcall tinyxml2::XMLElement::FloatAttribute(tinyxml2::XMLElement *__hidden this, const char *, float)
.text:000000000000BEA8                 EXPORT _ZNK8tinyxml210XMLElement14FloatAttributeEPKcf
.text:000000000000BEA8 _ZNK8tinyxml210XMLElement14FloatAttributeEPKcf
.text:000000000000BEA8                                         ; DATA XREF: LOAD:00000000000016B0↑o
.text:000000000000BEA8 var_2C          = -0x2C
.text:000000000000BEA8 var_28          = -0x28
.text:000000000000BEA8 var_20          = -0x20
.text:000000000000BEA8 var_18          = -0x18
.text:000000000000BEA8 var_10          = -0x10
.text:000000000000BEA8 var_s0          =  0
.text:000000000000BEA8 ; __unwind {
.text:000000000000BEA8                 SUB             SP, SP, #0x40
.text:000000000000BEAC                 STR             D8, [SP,#0x30+var_20]
.text:000000000000BEB0                 STR             X21, [SP,#0x30+var_18]
.text:000000000000BEB4                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BEB8                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BEBC                 ADD             X29, SP, #0x30
.text:000000000000BEC0                 MRS             X20, #3, c13, c0, #2
.text:000000000000BEC4                 MOV             V8.16B, V0.16B
.text:000000000000BEC8                 LDR             X8, [X20,#0x28]
.text:000000000000BECC                 STR             X8, [SP,#0x30+var_28]
.text:000000000000BED0                 LDR             X21, [X0,#0x70]
.text:000000000000BED4                 STR             S0, [SP,#0x30+var_2C]
.text:000000000000BED8                 CBZ             X21, loc_BF28
.text:000000000000BEDC                 MOV             X19, X1
.text:000000000000BEE0 loc_BEE0                                ; CODE XREF: tinyxml2::XMLElement::FloatAttribute(char const*,float)+5C↓j
.text:000000000000BEE0                 ADD             X0, X21, #8 ; this
.text:000000000000BEE4                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BEE8                 CMP             X0, X19
.text:000000000000BEEC                 B.EQ            loc_BF0C
.text:000000000000BEF0                 MOV             X1, X19 ; s2
.text:000000000000BEF4                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000BEF8                 BL              .strncmp
.text:000000000000BEFC                 CBZ             W0, loc_BF0C
.text:000000000000BF00                 LDR             X21, [X21,#0x40]
.text:000000000000BF04                 CBNZ            X21, loc_BEE0
.text:000000000000BF08                 B               loc_BF28
.text:000000000000BF0C ; ---------------------------------------------------------------------------
.text:000000000000BF0C loc_BF0C                                ; CODE XREF: tinyxml2::XMLElement::FloatAttribute(char const*,float)+44↑j
.text:000000000000BF0C                                         ; tinyxml2::XMLElement::FloatAttribute(char const*,float)+54↑j
.text:000000000000BF0C                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000BF10                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BF14                 ADRP            X1, #aF@PAGE ; "%f"
.text:000000000000BF18                 ADD             X1, X1, #aF@PAGEOFF ; "%f"
.text:000000000000BF1C                 ADD             X2, SP, #0x30+var_2C
.text:000000000000BF20                 BL              .sscanf
.text:000000000000BF24                 LDR             S8, [SP,#0x30+var_2C]
.text:000000000000BF28 loc_BF28                                ; CODE XREF: tinyxml2::XMLElement::FloatAttribute(char const*,float)+30↑j
.text:000000000000BF28                                         ; tinyxml2::XMLElement::FloatAttribute(char const*,float)+60↑j
.text:000000000000BF28                 LDR             X8, [X20,#0x28]
.text:000000000000BF2C                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000BF30                 CMP             X8, X9
.text:000000000000BF34                 B.NE            loc_BF54
.text:000000000000BF38                 MOV             V0.16B, V8.16B
.text:000000000000BF3C                 LDR             X21, [SP,#0x30+var_18]
.text:000000000000BF40                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000BF44                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000BF48                 LDR             D8, [SP,#0x30+var_20]
.text:000000000000BF4C                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000BF50                 RET
.text:000000000000BF54 ; ---------------------------------------------------------------------------
.text:000000000000BF54 loc_BF54                                ; CODE XREF: tinyxml2::XMLElement::FloatAttribute(char const*,float)+8C↑j
.text:000000000000BF54                 BL              .__stack_chk_fail
.text:000000000000BF54 ; } // starts at BEA8
.text:000000000000BF54 ; End of function tinyxml2::XMLElement::FloatAttribute(char const*,float)
.text:000000000000BF58 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF58 ; Attributes: bp-based frame
.text:000000000000BF58 ; __int64 __fastcall tinyxml2::XMLElement::GetText(tinyxml2::XMLElement *__hidden this)
.text:000000000000BF58                 EXPORT _ZNK8tinyxml210XMLElement7GetTextEv
.text:000000000000BF58 _ZNK8tinyxml210XMLElement7GetTextEv     ; DATA XREF: LOAD:0000000000001278↑o
.text:000000000000BF58 var_10          = -0x10
.text:000000000000BF58 var_s0          =  0
.text:000000000000BF58 ; __unwind {
.text:000000000000BF58                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000BF5C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000BF60                 ADD             X29, SP, #0x10
.text:000000000000BF64                 MOV             X19, X0
.text:000000000000BF68                 LDR             X0, [X0,#0x38]
.text:000000000000BF6C                 CBZ             X0, loc_BF98
.text:000000000000BF70                 LDR             X8, [X0]
.text:000000000000BF74                 LDR             X8, [X8,#0x38]
.text:000000000000BF78                 BLR             X8
.text:000000000000BF7C                 CBZ             X0, loc_BF98
.text:000000000000BF80                 LDR             X19, [X19,#0x38]
.text:000000000000BF84                 LDR             X8, [X19]
.text:000000000000BF88                 MOV             X0, X19
.text:000000000000BF8C                 LDR             X8, [X8,#0x48]
.text:000000000000BF90                 BLR             X8
.text:000000000000BF94                 CBZ             X0, loc_BFA8
.text:000000000000BF98 loc_BF98                                ; CODE XREF: tinyxml2::XMLElement::GetText(void)+14↑j
.text:000000000000BF98                                         ; tinyxml2::XMLElement::GetText(void)+24↑j
.text:000000000000BF98                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000BF9C                 MOV             X0, XZR
.text:000000000000BFA0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000BFA4                 RET
.text:000000000000BFA8 ; ---------------------------------------------------------------------------
.text:000000000000BFA8 loc_BFA8                                ; CODE XREF: tinyxml2::XMLElement::GetText(void)+3C↑j
.text:000000000000BFA8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000BFAC                 ADD             X0, X19, #0x18 ; this
.text:000000000000BFB0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000BFB4                 B               ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000BFB4 ; } // starts at BF58
.text:000000000000BFB4 ; End of function tinyxml2::XMLElement::GetText(void)
.text:000000000000BFB8 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFB8 ; Attributes: bp-based frame
.text:000000000000BFB8 ; _QWORD __fastcall tinyxml2::XMLElement::SetText(tinyxml2::XMLElement *__hidden this, const char *)
.text:000000000000BFB8                 EXPORT _ZN8tinyxml210XMLElement7SetTextEPKc
.text:000000000000BFB8 _ZN8tinyxml210XMLElement7SetTextEPKc    ; DATA XREF: LOAD:0000000000001890↑o
.text:000000000000BFB8 var_10          = -0x10
.text:000000000000BFB8 var_s0          =  0
.text:000000000000BFB8 ; __unwind {
.text:000000000000BFB8                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000BFBC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000BFC0                 ADD             X29, SP, #0x10
.text:000000000000BFC4                 MOV             X19, X0
.text:000000000000BFC8                 LDR             X0, [X0,#0x38]
.text:000000000000BFCC                 MOV             X20, X1
.text:000000000000BFD0                 CBZ             X0, loc_C000
.text:000000000000BFD4                 LDR             X8, [X0]
.text:000000000000BFD8                 LDR             X8, [X8,#8]
.text:000000000000BFDC                 BLR             X8
.text:000000000000BFE0                 CBZ             X0, loc_C000
.text:000000000000BFE4                 LDR             X8, [X19,#0x38]
.text:000000000000BFE8                 MOV             X1, X20 ; char *
.text:000000000000BFEC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000BFF0                 MOV             W2, WZR ; int
.text:000000000000BFF4                 ADD             X0, X8, #0x18 ; this
.text:000000000000BFF8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000BFFC                 B               ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000C000 ; ---------------------------------------------------------------------------
.text:000000000000C000 loc_C000                                ; CODE XREF: tinyxml2::XMLElement::SetText(char const*)+18↑j
.text:000000000000C000                                         ; tinyxml2::XMLElement::SetText(char const*)+28↑j
.text:000000000000C000                 LDR             X0, [X19,#8] ; this
.text:000000000000C004                 MOV             X1, X20 ; char *
.text:000000000000C008                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000C00C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C010                 MOV             X1, X0
.text:000000000000C014                 MOV             X0, X19
.text:000000000000C018                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000C01C                 B               ._ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:000000000000C01C ; } // starts at BFB8
.text:000000000000C01C ; End of function tinyxml2::XMLElement::SetText(char const*)
.text:000000000000C020 ; =============== S U B R O U T I N E =======================================
.text:000000000000C020 ; Attributes: bp-based frame
.text:000000000000C020 ; __int64 __fastcall tinyxml2::XMLElement::SetText(tinyxml2::XMLElement *__hidden this, int)
.text:000000000000C020                 EXPORT _ZN8tinyxml210XMLElement7SetTextEi
.text:000000000000C020 _ZN8tinyxml210XMLElement7SetTextEi      ; DATA XREF: LOAD:00000000000008D0↑o
.text:000000000000C020 var_18          = -0x18
.text:000000000000C020 var_10          = -0x10
.text:000000000000C020 var_s0          =  0
.text:000000000000C020 ; __unwind {
.text:000000000000C020                 SUB             SP, SP, #0xF0
.text:000000000000C024                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C028                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C02C                 ADD             X29, SP, #0xE0
.text:000000000000C030                 MRS             X20, #3, c13, c0, #2
.text:000000000000C034                 MOV             W4, W1
.text:000000000000C038                 LDR             X8, [X20,#0x28]
.text:000000000000C03C                 ADRP            X3, #unk_4EA5@PAGE
.text:000000000000C040                 MOV             W1, #0xC8
.text:000000000000C044                 MOV             X19, X0
.text:000000000000C048                 ADD             X3, X3, #unk_4EA5@PAGEOFF
.text:000000000000C04C                 MOV             X0, SP
.text:000000000000C050                 STUR            X8, [X29,#var_18]
.text:000000000000C054                 MOV             X2, X1
.text:000000000000C058                 BL              sub_8A58
.text:000000000000C05C                 LDR             X0, [X19,#0x38]
.text:000000000000C060                 CBZ             X0, loc_C08C
.text:000000000000C064                 LDR             X8, [X0]
.text:000000000000C068                 LDR             X8, [X8,#8]
.text:000000000000C06C                 BLR             X8
.text:000000000000C070                 CBZ             X0, loc_C08C
.text:000000000000C074                 LDR             X8, [X19,#0x38]
.text:000000000000C078                 MOV             X1, SP  ; char *
.text:000000000000C07C                 MOV             W2, WZR ; int
.text:000000000000C080                 ADD             X0, X8, #0x18 ; this
.text:000000000000C084                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000C088                 B               loc_C0A4
.text:000000000000C08C ; ---------------------------------------------------------------------------
.text:000000000000C08C loc_C08C                                ; CODE XREF: tinyxml2::XMLElement::SetText(int)+40↑j
.text:000000000000C08C                                         ; tinyxml2::XMLElement::SetText(int)+50↑j
.text:000000000000C08C                 LDR             X0, [X19,#8] ; this
.text:000000000000C090                 MOV             X1, SP  ; char *
.text:000000000000C094                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000C098                 MOV             X1, X0
.text:000000000000C09C                 MOV             X0, X19
.text:000000000000C0A0                 BL              ._ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:000000000000C0A4 loc_C0A4                                ; CODE XREF: tinyxml2::XMLElement::SetText(int)+68↑j
.text:000000000000C0A4                 LDR             X8, [X20,#0x28]
.text:000000000000C0A8                 LDUR            X9, [X29,#var_18]
.text:000000000000C0AC                 CMP             X8, X9
.text:000000000000C0B0                 B.NE            loc_C0C4
.text:000000000000C0B4                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C0B8                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C0BC                 ADD             SP, SP, #0xF0
.text:000000000000C0C0                 RET
.text:000000000000C0C4 ; ---------------------------------------------------------------------------
.text:000000000000C0C4 loc_C0C4                                ; CODE XREF: tinyxml2::XMLElement::SetText(int)+90↑j
.text:000000000000C0C4                 BL              .__stack_chk_fail
.text:000000000000C0C4 ; } // starts at C020
.text:000000000000C0C4 ; End of function tinyxml2::XMLElement::SetText(int)
.text:000000000000C0C8 ; =============== S U B R O U T I N E =======================================
.text:000000000000C0C8 ; Attributes: bp-based frame
.text:000000000000C0C8 ; __int64 __fastcall tinyxml2::XMLElement::SetText(tinyxml2::XMLElement *__hidden this, unsigned int)
.text:000000000000C0C8                 EXPORT _ZN8tinyxml210XMLElement7SetTextEj
.text:000000000000C0C8 _ZN8tinyxml210XMLElement7SetTextEj      ; DATA XREF: LOAD:0000000000000960↑o
.text:000000000000C0C8 var_18          = -0x18
.text:000000000000C0C8 var_10          = -0x10
.text:000000000000C0C8 var_s0          =  0
.text:000000000000C0C8 ; __unwind {
.text:000000000000C0C8                 SUB             SP, SP, #0xF0
.text:000000000000C0CC                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C0D0                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C0D4                 ADD             X29, SP, #0xE0
.text:000000000000C0D8                 MRS             X20, #3, c13, c0, #2
.text:000000000000C0DC                 MOV             W4, W1
.text:000000000000C0E0                 LDR             X8, [X20,#0x28]
.text:000000000000C0E4                 ADRP            X3, #unk_4EE4@PAGE
.text:000000000000C0E8                 MOV             W1, #0xC8
.text:000000000000C0EC                 MOV             X19, X0
.text:000000000000C0F0                 ADD             X3, X3, #unk_4EE4@PAGEOFF
.text:000000000000C0F4                 MOV             X0, SP
.text:000000000000C0F8                 STUR            X8, [X29,#var_18]
.text:000000000000C0FC                 MOV             X2, X1
.text:000000000000C100                 BL              sub_8A58
.text:000000000000C104                 LDR             X0, [X19,#0x38]
.text:000000000000C108                 CBZ             X0, loc_C134
.text:000000000000C10C                 LDR             X8, [X0]
.text:000000000000C110                 LDR             X8, [X8,#8]
.text:000000000000C114                 BLR             X8
.text:000000000000C118                 CBZ             X0, loc_C134
.text:000000000000C11C                 LDR             X8, [X19,#0x38]
.text:000000000000C120                 MOV             X1, SP  ; char *
.text:000000000000C124                 MOV             W2, WZR ; int
.text:000000000000C128                 ADD             X0, X8, #0x18 ; this
.text:000000000000C12C                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000C130                 B               loc_C14C
.text:000000000000C134 ; ---------------------------------------------------------------------------
.text:000000000000C134 loc_C134                                ; CODE XREF: tinyxml2::XMLElement::SetText(uint)+40↑j
.text:000000000000C134                                         ; tinyxml2::XMLElement::SetText(uint)+50↑j
.text:000000000000C134                 LDR             X0, [X19,#8] ; this
.text:000000000000C138                 MOV             X1, SP  ; char *
.text:000000000000C13C                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000C140                 MOV             X1, X0
.text:000000000000C144                 MOV             X0, X19
.text:000000000000C148                 BL              ._ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:000000000000C14C loc_C14C                                ; CODE XREF: tinyxml2::XMLElement::SetText(uint)+68↑j
.text:000000000000C14C                 LDR             X8, [X20,#0x28]
.text:000000000000C150                 LDUR            X9, [X29,#var_18]
.text:000000000000C154                 CMP             X8, X9
.text:000000000000C158                 B.NE            loc_C16C
.text:000000000000C15C                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C160                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C164                 ADD             SP, SP, #0xF0
.text:000000000000C168                 RET
.text:000000000000C16C ; ---------------------------------------------------------------------------
.text:000000000000C16C loc_C16C                                ; CODE XREF: tinyxml2::XMLElement::SetText(uint)+90↑j
.text:000000000000C16C                 BL              .__stack_chk_fail
.text:000000000000C16C ; } // starts at C0C8
.text:000000000000C16C ; End of function tinyxml2::XMLElement::SetText(uint)
.text:000000000000C170 ; =============== S U B R O U T I N E =======================================
.text:000000000000C170 ; Attributes: bp-based frame
.text:000000000000C170 ; __int64 __fastcall tinyxml2::XMLElement::SetText(tinyxml2::XMLElement *__hidden this, __int64)
.text:000000000000C170                 EXPORT _ZN8tinyxml210XMLElement7SetTextEl
.text:000000000000C170 _ZN8tinyxml210XMLElement7SetTextEl      ; DATA XREF: LOAD:0000000000000A68↑o
.text:000000000000C170 var_18          = -0x18
.text:000000000000C170 var_10          = -0x10
.text:000000000000C170 var_s0          =  0
.text:000000000000C170 ; __unwind {
.text:000000000000C170                 SUB             SP, SP, #0xF0
.text:000000000000C174                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C178                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C17C                 ADD             X29, SP, #0xE0
.text:000000000000C180                 MRS             X20, #3, c13, c0, #2
.text:000000000000C184                 MOV             X4, X1
.text:000000000000C188                 LDR             X8, [X20,#0x28]
.text:000000000000C18C                 ADRP            X3, #aLld@PAGE ; "%lld"
.text:000000000000C190                 MOV             W1, #0xC8
.text:000000000000C194                 MOV             X19, X0
.text:000000000000C198                 ADD             X3, X3, #aLld@PAGEOFF ; "%lld"
.text:000000000000C19C                 MOV             X0, SP
.text:000000000000C1A0                 STUR            X8, [X29,#var_18]
.text:000000000000C1A4                 MOV             X2, X1
.text:000000000000C1A8                 BL              sub_8A58
.text:000000000000C1AC                 LDR             X0, [X19,#0x38]
.text:000000000000C1B0                 CBZ             X0, loc_C1DC
.text:000000000000C1B4                 LDR             X8, [X0]
.text:000000000000C1B8                 LDR             X8, [X8,#8]
.text:000000000000C1BC                 BLR             X8
.text:000000000000C1C0                 CBZ             X0, loc_C1DC
.text:000000000000C1C4                 LDR             X8, [X19,#0x38]
.text:000000000000C1C8                 MOV             X1, SP  ; char *
.text:000000000000C1CC                 MOV             W2, WZR ; int
.text:000000000000C1D0                 ADD             X0, X8, #0x18 ; this
.text:000000000000C1D4                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000C1D8                 B               loc_C1F4
.text:000000000000C1DC ; ---------------------------------------------------------------------------
.text:000000000000C1DC loc_C1DC                                ; CODE XREF: tinyxml2::XMLElement::SetText(long)+40↑j
.text:000000000000C1DC                                         ; tinyxml2::XMLElement::SetText(long)+50↑j
.text:000000000000C1DC                 LDR             X0, [X19,#8] ; this
.text:000000000000C1E0                 MOV             X1, SP  ; char *
.text:000000000000C1E4                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000C1E8                 MOV             X1, X0
.text:000000000000C1EC                 MOV             X0, X19
.text:000000000000C1F0                 BL              ._ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:000000000000C1F4 loc_C1F4                                ; CODE XREF: tinyxml2::XMLElement::SetText(long)+68↑j
.text:000000000000C1F4                 LDR             X8, [X20,#0x28]
.text:000000000000C1F8                 LDUR            X9, [X29,#var_18]
.text:000000000000C1FC                 CMP             X8, X9
.text:000000000000C200                 B.NE            loc_C214
.text:000000000000C204                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C208                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C20C                 ADD             SP, SP, #0xF0
.text:000000000000C210                 RET
.text:000000000000C214 ; ---------------------------------------------------------------------------
.text:000000000000C214 loc_C214                                ; CODE XREF: tinyxml2::XMLElement::SetText(long)+90↑j
.text:000000000000C214                 BL              .__stack_chk_fail
.text:000000000000C214 ; } // starts at C170
.text:000000000000C214 ; End of function tinyxml2::XMLElement::SetText(long)
.text:000000000000C218 ; =============== S U B R O U T I N E =======================================
.text:000000000000C218 ; Attributes: bp-based frame
.text:000000000000C218 ; __int64 __fastcall tinyxml2::XMLElement::SetText(tinyxml2::XMLElement *__hidden this, bool)
.text:000000000000C218                 EXPORT _ZN8tinyxml210XMLElement7SetTextEb
.text:000000000000C218 _ZN8tinyxml210XMLElement7SetTextEb      ; DATA XREF: LOAD:0000000000000678↑o
.text:000000000000C218 var_18          = -0x18
.text:000000000000C218 var_10          = -0x10
.text:000000000000C218 var_s0          =  0
.text:000000000000C218 ; __unwind {
.text:000000000000C218                 SUB             SP, SP, #0xF0
.text:000000000000C21C                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C220                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C224                 ADD             X29, SP, #0xE0
.text:000000000000C228                 ADRP            X8, #_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGE
.text:000000000000C22C                 ADRP            X9, #_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGE
.text:000000000000C230                 TST             W1, #1
.text:000000000000C234                 LDR             X8, [X8,#_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGEOFF]
.text:000000000000C238                 ADRP            X3, #aS@PAGE ; "%s"
.text:000000000000C23C                 LDR             X9, [X9,#_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGEOFF]
.text:000000000000C240                 MRS             X20, #3, c13, c0, #2
.text:000000000000C244                 LDR             X10, [X20,#0x28]
.text:000000000000C248                 MOV             W1, #0xC8
.text:000000000000C24C                 MOV             X19, X0
.text:000000000000C250                 ADD             X3, X3, #aS@PAGEOFF ; "%s"
.text:000000000000C254                 CSEL            X8, X8, X9, NE
.text:000000000000C258                 STUR            X10, [X29,#var_18]
.text:000000000000C25C                 MOV             X0, SP
.text:000000000000C260                 MOV             X2, X1
.text:000000000000C264                 LDR             X4, [X8]
.text:000000000000C268                 BL              sub_8A58
.text:000000000000C26C                 LDR             X0, [X19,#0x38]
.text:000000000000C270                 CBZ             X0, loc_C29C
.text:000000000000C274                 LDR             X8, [X0]
.text:000000000000C278                 LDR             X8, [X8,#8]
.text:000000000000C27C                 BLR             X8
.text:000000000000C280                 CBZ             X0, loc_C29C
.text:000000000000C284                 LDR             X8, [X19,#0x38]
.text:000000000000C288                 MOV             X1, SP  ; char *
.text:000000000000C28C                 MOV             W2, WZR ; int
.text:000000000000C290                 ADD             X0, X8, #0x18 ; this
.text:000000000000C294                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000C298                 B               loc_C2B4
.text:000000000000C29C ; ---------------------------------------------------------------------------
.text:000000000000C29C loc_C29C                                ; CODE XREF: tinyxml2::XMLElement::SetText(bool)+58↑j
.text:000000000000C29C                                         ; tinyxml2::XMLElement::SetText(bool)+68↑j
.text:000000000000C29C                 LDR             X0, [X19,#8] ; this
.text:000000000000C2A0                 MOV             X1, SP  ; char *
.text:000000000000C2A4                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000C2A8                 MOV             X1, X0
.text:000000000000C2AC                 MOV             X0, X19
.text:000000000000C2B0                 BL              ._ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:000000000000C2B4 loc_C2B4                                ; CODE XREF: tinyxml2::XMLElement::SetText(bool)+80↑j
.text:000000000000C2B4                 LDR             X8, [X20,#0x28]
.text:000000000000C2B8                 LDUR            X9, [X29,#var_18]
.text:000000000000C2BC                 CMP             X8, X9
.text:000000000000C2C0                 B.NE            loc_C2D4
.text:000000000000C2C4                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C2C8                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C2CC                 ADD             SP, SP, #0xF0
.text:000000000000C2D0                 RET
.text:000000000000C2D4 ; ---------------------------------------------------------------------------
.text:000000000000C2D4 loc_C2D4                                ; CODE XREF: tinyxml2::XMLElement::SetText(bool)+A8↑j
.text:000000000000C2D4                 BL              .__stack_chk_fail
.text:000000000000C2D4 ; } // starts at C218
.text:000000000000C2D4 ; End of function tinyxml2::XMLElement::SetText(bool)
.text:000000000000C2D8 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2D8 ; Attributes: bp-based frame
.text:000000000000C2D8 ; __int64 __fastcall tinyxml2::XMLElement::SetText(tinyxml2::XMLElement *__hidden this, float)
.text:000000000000C2D8                 EXPORT _ZN8tinyxml210XMLElement7SetTextEf
.text:000000000000C2D8 _ZN8tinyxml210XMLElement7SetTextEf      ; DATA XREF: LOAD:0000000000000798↑o
.text:000000000000C2D8 var_18          = -0x18
.text:000000000000C2D8 var_10          = -0x10
.text:000000000000C2D8 var_s0          =  0
.text:000000000000C2D8 ; __unwind {
.text:000000000000C2D8                 SUB             SP, SP, #0xF0
.text:000000000000C2DC                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C2E0                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C2E4                 ADD             X29, SP, #0xE0
.text:000000000000C2E8                 FCVT            D0, S0
.text:000000000000C2EC                 MRS             X20, #3, c13, c0, #2
.text:000000000000C2F0                 LDR             X8, [X20,#0x28]
.text:000000000000C2F4                 ADRP            X3, #a8g@PAGE ; "%.8g"
.text:000000000000C2F8                 MOV             W1, #0xC8
.text:000000000000C2FC                 MOV             X19, X0
.text:000000000000C300                 ADD             X3, X3, #a8g@PAGEOFF ; "%.8g"
.text:000000000000C304                 MOV             X0, SP
.text:000000000000C308                 STUR            X8, [X29,#var_18]
.text:000000000000C30C                 MOV             X2, X1
.text:000000000000C310                 BL              sub_8A58
.text:000000000000C314                 LDR             X0, [X19,#0x38]
.text:000000000000C318                 CBZ             X0, loc_C344
.text:000000000000C31C                 LDR             X8, [X0]
.text:000000000000C320                 LDR             X8, [X8,#8]
.text:000000000000C324                 BLR             X8
.text:000000000000C328                 CBZ             X0, loc_C344
.text:000000000000C32C                 LDR             X8, [X19,#0x38]
.text:000000000000C330                 MOV             X1, SP  ; char *
.text:000000000000C334                 MOV             W2, WZR ; int
.text:000000000000C338                 ADD             X0, X8, #0x18 ; this
.text:000000000000C33C                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000C340                 B               loc_C35C
.text:000000000000C344 ; ---------------------------------------------------------------------------
.text:000000000000C344 loc_C344                                ; CODE XREF: tinyxml2::XMLElement::SetText(float)+40↑j
.text:000000000000C344                                         ; tinyxml2::XMLElement::SetText(float)+50↑j
.text:000000000000C344                 LDR             X0, [X19,#8] ; this
.text:000000000000C348                 MOV             X1, SP  ; char *
.text:000000000000C34C                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000C350                 MOV             X1, X0
.text:000000000000C354                 MOV             X0, X19
.text:000000000000C358                 BL              ._ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:000000000000C35C loc_C35C                                ; CODE XREF: tinyxml2::XMLElement::SetText(float)+68↑j
.text:000000000000C35C                 LDR             X8, [X20,#0x28]
.text:000000000000C360                 LDUR            X9, [X29,#var_18]
.text:000000000000C364                 CMP             X8, X9
.text:000000000000C368                 B.NE            loc_C37C
.text:000000000000C36C                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C370                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C374                 ADD             SP, SP, #0xF0
.text:000000000000C378                 RET
.text:000000000000C37C ; ---------------------------------------------------------------------------
.text:000000000000C37C loc_C37C                                ; CODE XREF: tinyxml2::XMLElement::SetText(float)+90↑j
.text:000000000000C37C                 BL              .__stack_chk_fail
.text:000000000000C37C ; } // starts at C2D8
.text:000000000000C37C ; End of function tinyxml2::XMLElement::SetText(float)
.text:000000000000C380 ; =============== S U B R O U T I N E =======================================
.text:000000000000C380 ; Attributes: bp-based frame
.text:000000000000C380 ; __int64 __fastcall tinyxml2::XMLElement::SetText(tinyxml2::XMLElement *__hidden this, double)
.text:000000000000C380                 EXPORT _ZN8tinyxml210XMLElement7SetTextEd
.text:000000000000C380 _ZN8tinyxml210XMLElement7SetTextEd      ; DATA XREF: LOAD:00000000000006C0↑o
.text:000000000000C380 var_18          = -0x18
.text:000000000000C380 var_10          = -0x10
.text:000000000000C380 var_s0          =  0
.text:000000000000C380 ; __unwind {
.text:000000000000C380                 SUB             SP, SP, #0xF0
.text:000000000000C384                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C388                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C38C                 ADD             X29, SP, #0xE0
.text:000000000000C390                 MRS             X20, #3, c13, c0, #2
.text:000000000000C394                 ADRP            X3, #a17g@PAGE ; "%.17g"
.text:000000000000C398                 LDR             X8, [X20,#0x28]
.text:000000000000C39C                 MOV             W1, #0xC8
.text:000000000000C3A0                 MOV             X19, X0
.text:000000000000C3A4                 ADD             X3, X3, #a17g@PAGEOFF ; "%.17g"
.text:000000000000C3A8                 MOV             X0, SP
.text:000000000000C3AC                 MOV             X2, X1
.text:000000000000C3B0                 STUR            X8, [X29,#var_18]
.text:000000000000C3B4                 BL              sub_8A58
.text:000000000000C3B8                 LDR             X0, [X19,#0x38]
.text:000000000000C3BC                 CBZ             X0, loc_C3E8
.text:000000000000C3C0                 LDR             X8, [X0]
.text:000000000000C3C4                 LDR             X8, [X8,#8]
.text:000000000000C3C8                 BLR             X8
.text:000000000000C3CC                 CBZ             X0, loc_C3E8
.text:000000000000C3D0                 LDR             X8, [X19,#0x38]
.text:000000000000C3D4                 MOV             X1, SP  ; char *
.text:000000000000C3D8                 MOV             W2, WZR ; int
.text:000000000000C3DC                 ADD             X0, X8, #0x18 ; this
.text:000000000000C3E0                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000C3E4                 B               loc_C400
.text:000000000000C3E8 ; ---------------------------------------------------------------------------
.text:000000000000C3E8 loc_C3E8                                ; CODE XREF: tinyxml2::XMLElement::SetText(double)+3C↑j
.text:000000000000C3E8                                         ; tinyxml2::XMLElement::SetText(double)+4C↑j
.text:000000000000C3E8                 LDR             X0, [X19,#8] ; this
.text:000000000000C3EC                 MOV             X1, SP  ; char *
.text:000000000000C3F0                 BL              ._ZN8tinyxml211XMLDocument7NewTextEPKc ; tinyxml2::XMLDocument::NewText(char const*)
.text:000000000000C3F4                 MOV             X1, X0
.text:000000000000C3F8                 MOV             X0, X19
.text:000000000000C3FC                 BL              ._ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ ; tinyxml2::XMLNode::InsertFirstChild(tinyxml2::XMLNode*)
.text:000000000000C400 loc_C400                                ; CODE XREF: tinyxml2::XMLElement::SetText(double)+64↑j
.text:000000000000C400                 LDR             X8, [X20,#0x28]
.text:000000000000C404                 LDUR            X9, [X29,#var_18]
.text:000000000000C408                 CMP             X8, X9
.text:000000000000C40C                 B.NE            loc_C420
.text:000000000000C410                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000C414                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000C418                 ADD             SP, SP, #0xF0
.text:000000000000C41C                 RET
.text:000000000000C420 ; ---------------------------------------------------------------------------
.text:000000000000C420 loc_C420                                ; CODE XREF: tinyxml2::XMLElement::SetText(double)+8C↑j
.text:000000000000C420                 BL              .__stack_chk_fail
.text:000000000000C420 ; } // starts at C380
.text:000000000000C420 ; End of function tinyxml2::XMLElement::SetText(double)
.text:000000000000C420 ; ---------------------------------------------------------------------------
.text:000000000000C424                 ALIGN 8
.text:000000000000C428 ; =============== S U B R O U T I N E =======================================
.text:000000000000C428 ; Attributes: bp-based frame
.text:000000000000C428 ; __int64 __fastcall tinyxml2::XMLElement::QueryIntText(tinyxml2::XMLElement *__hidden this, int *)
.text:000000000000C428                 EXPORT _ZNK8tinyxml210XMLElement12QueryIntTextEPi
.text:000000000000C428 _ZNK8tinyxml210XMLElement12QueryIntTextEPi
.text:000000000000C428                                         ; DATA XREF: LOAD:00000000000015C0↑o
.text:000000000000C428 var_10          = -0x10
.text:000000000000C428 var_s0          =  0
.text:000000000000C428 ; __unwind {
.text:000000000000C428                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000C42C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C430                 ADD             X29, SP, #0x10
.text:000000000000C434                 MOV             X20, X0
.text:000000000000C438                 LDR             X0, [X0,#0x38]
.text:000000000000C43C                 CBZ             X0, loc_C474
.text:000000000000C440                 LDR             X8, [X0]
.text:000000000000C444                 MOV             X19, X1
.text:000000000000C448                 LDR             X8, [X8,#0x38]
.text:000000000000C44C                 BLR             X8
.text:000000000000C450                 CBZ             X0, loc_C474
.text:000000000000C454                 LDR             X20, [X20,#0x38]
.text:000000000000C458                 LDR             X8, [X20]
.text:000000000000C45C                 MOV             X0, X20
.text:000000000000C460                 LDR             X8, [X8,#0x48]
.text:000000000000C464                 BLR             X8
.text:000000000000C468                 CBZ             X0, loc_C47C
.text:000000000000C46C                 MOV             X0, XZR
.text:000000000000C470                 B               loc_C484
.text:000000000000C474 ; ---------------------------------------------------------------------------
.text:000000000000C474 loc_C474                                ; CODE XREF: tinyxml2::XMLElement::QueryIntText(int *)+14↑j
.text:000000000000C474                                         ; tinyxml2::XMLElement::QueryIntText(int *)+28↑j
.text:000000000000C474                 MOV             W0, #0x11
.text:000000000000C478                 B               loc_C4A0
.text:000000000000C47C ; ---------------------------------------------------------------------------
.text:000000000000C47C loc_C47C                                ; CODE XREF: tinyxml2::XMLElement::QueryIntText(int *)+40↑j
.text:000000000000C47C                 ADD             X0, X20, #0x18 ; this
.text:000000000000C480                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C484 loc_C484                                ; CODE XREF: tinyxml2::XMLElement::QueryIntText(int *)+48↑j
.text:000000000000C484                 ADRP            X1, #unk_4EA5@PAGE
.text:000000000000C488                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:000000000000C48C                 MOV             X2, X19
.text:000000000000C490                 BL              .sscanf
.text:000000000000C494                 CMP             W0, #1
.text:000000000000C498                 CSET            W8, NE
.text:000000000000C49C                 LSL             W0, W8, #4
.text:000000000000C4A0 loc_C4A0                                ; CODE XREF: tinyxml2::XMLElement::QueryIntText(int *)+50↑j
.text:000000000000C4A0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C4A4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000C4A8                 RET
.text:000000000000C4A8 ; } // starts at C428
.text:000000000000C4A8 ; End of function tinyxml2::XMLElement::QueryIntText(int *)
.text:000000000000C4A8 ; ---------------------------------------------------------------------------
.text:000000000000C4AC                 ALIGN 0x10
.text:000000000000C4B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C4B0 ; Attributes: bp-based frame
.text:000000000000C4B0 ; __int64 __fastcall tinyxml2::XMLElement::QueryUnsignedText(tinyxml2::XMLElement *__hidden this, unsigned int *)
.text:000000000000C4B0                 EXPORT _ZNK8tinyxml210XMLElement17QueryUnsignedTextEPj
.text:000000000000C4B0 _ZNK8tinyxml210XMLElement17QueryUnsignedTextEPj
.text:000000000000C4B0                                         ; DATA XREF: LOAD:00000000000005D0↑o
.text:000000000000C4B0 var_10          = -0x10
.text:000000000000C4B0 var_s0          =  0
.text:000000000000C4B0 ; __unwind {
.text:000000000000C4B0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000C4B4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C4B8                 ADD             X29, SP, #0x10
.text:000000000000C4BC                 MOV             X20, X0
.text:000000000000C4C0                 LDR             X0, [X0,#0x38]
.text:000000000000C4C4                 CBZ             X0, loc_C4FC
.text:000000000000C4C8                 LDR             X8, [X0]
.text:000000000000C4CC                 MOV             X19, X1
.text:000000000000C4D0                 LDR             X8, [X8,#0x38]
.text:000000000000C4D4                 BLR             X8
.text:000000000000C4D8                 CBZ             X0, loc_C4FC
.text:000000000000C4DC                 LDR             X20, [X20,#0x38]
.text:000000000000C4E0                 LDR             X8, [X20]
.text:000000000000C4E4                 MOV             X0, X20
.text:000000000000C4E8                 LDR             X8, [X8,#0x48]
.text:000000000000C4EC                 BLR             X8
.text:000000000000C4F0                 CBZ             X0, loc_C504
.text:000000000000C4F4                 MOV             X0, XZR
.text:000000000000C4F8                 B               loc_C50C
.text:000000000000C4FC ; ---------------------------------------------------------------------------
.text:000000000000C4FC loc_C4FC                                ; CODE XREF: tinyxml2::XMLElement::QueryUnsignedText(uint *)+14↑j
.text:000000000000C4FC                                         ; tinyxml2::XMLElement::QueryUnsignedText(uint *)+28↑j
.text:000000000000C4FC                 MOV             W0, #0x11
.text:000000000000C500                 B               loc_C528
.text:000000000000C504 ; ---------------------------------------------------------------------------
.text:000000000000C504 loc_C504                                ; CODE XREF: tinyxml2::XMLElement::QueryUnsignedText(uint *)+40↑j
.text:000000000000C504                 ADD             X0, X20, #0x18 ; this
.text:000000000000C508                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C50C loc_C50C                                ; CODE XREF: tinyxml2::XMLElement::QueryUnsignedText(uint *)+48↑j
.text:000000000000C50C                 ADRP            X1, #unk_4EE4@PAGE
.text:000000000000C510                 ADD             X1, X1, #unk_4EE4@PAGEOFF ; format
.text:000000000000C514                 MOV             X2, X19
.text:000000000000C518                 BL              .sscanf
.text:000000000000C51C                 CMP             W0, #1
.text:000000000000C520                 CSET            W8, NE
.text:000000000000C524                 LSL             W0, W8, #4
.text:000000000000C528 loc_C528                                ; CODE XREF: tinyxml2::XMLElement::QueryUnsignedText(uint *)+50↑j
.text:000000000000C528                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C52C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000C530                 RET
.text:000000000000C530 ; } // starts at C4B0
.text:000000000000C530 ; End of function tinyxml2::XMLElement::QueryUnsignedText(uint *)
.text:000000000000C530 ; ---------------------------------------------------------------------------
.text:000000000000C534                 ALIGN 8
.text:000000000000C538 ; =============== S U B R O U T I N E =======================================
.text:000000000000C538 ; Attributes: bp-based frame
.text:000000000000C538 ; __int64 __fastcall tinyxml2::XMLElement::QueryInt64Text(tinyxml2::XMLElement *__hidden this, __int64 *)
.text:000000000000C538                 EXPORT _ZNK8tinyxml210XMLElement14QueryInt64TextEPl
.text:000000000000C538 _ZNK8tinyxml210XMLElement14QueryInt64TextEPl
.text:000000000000C538                                         ; DATA XREF: LOAD:0000000000001518↑o
.text:000000000000C538 var_30          = -0x30
.text:000000000000C538 var_28          = -0x28
.text:000000000000C538 var_20          = -0x20
.text:000000000000C538 var_10          = -0x10
.text:000000000000C538 var_s0          =  0
.text:000000000000C538 ; __unwind {
.text:000000000000C538                 SUB             SP, SP, #0x40
.text:000000000000C53C                 STR             X21, [SP,#0x30+var_20]
.text:000000000000C540                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C544                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C548                 ADD             X29, SP, #0x30
.text:000000000000C54C                 MRS             X21, #3, c13, c0, #2
.text:000000000000C550                 MOV             X20, X0
.text:000000000000C554                 LDR             X8, [X21,#0x28]
.text:000000000000C558                 STR             X8, [SP,#0x30+var_28]
.text:000000000000C55C                 LDR             X0, [X0,#0x38]
.text:000000000000C560                 CBZ             X0, loc_C598
.text:000000000000C564                 LDR             X8, [X0]
.text:000000000000C568                 MOV             X19, X1
.text:000000000000C56C                 LDR             X8, [X8,#0x38]
.text:000000000000C570                 BLR             X8
.text:000000000000C574                 CBZ             X0, loc_C598
.text:000000000000C578                 LDR             X20, [X20,#0x38]
.text:000000000000C57C                 LDR             X8, [X20]
.text:000000000000C580                 MOV             X0, X20
.text:000000000000C584                 LDR             X8, [X8,#0x48]
.text:000000000000C588                 BLR             X8
.text:000000000000C58C                 CBZ             X0, loc_C5A0
.text:000000000000C590                 MOV             X0, XZR
.text:000000000000C594                 B               loc_C5A8
.text:000000000000C598 ; ---------------------------------------------------------------------------
.text:000000000000C598 loc_C598                                ; CODE XREF: tinyxml2::XMLElement::QueryInt64Text(long *)+28↑j
.text:000000000000C598                                         ; tinyxml2::XMLElement::QueryInt64Text(long *)+3C↑j
.text:000000000000C598                 MOV             W0, #0x11
.text:000000000000C59C                 B               loc_C5D8
.text:000000000000C5A0 ; ---------------------------------------------------------------------------
.text:000000000000C5A0 loc_C5A0                                ; CODE XREF: tinyxml2::XMLElement::QueryInt64Text(long *)+54↑j
.text:000000000000C5A0                 ADD             X0, X20, #0x18 ; this
.text:000000000000C5A4                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C5A8 loc_C5A8                                ; CODE XREF: tinyxml2::XMLElement::QueryInt64Text(long *)+5C↑j
.text:000000000000C5A8                 ADRP            X1, #aLld@PAGE ; "%lld"
.text:000000000000C5AC                 STR             XZR, [SP,#0x30+var_30]
.text:000000000000C5B0                 ADD             X1, X1, #aLld@PAGEOFF ; "%lld"
.text:000000000000C5B4                 MOV             X2, SP
.text:000000000000C5B8                 BL              .sscanf
.text:000000000000C5BC                 CMP             W0, #1
.text:000000000000C5C0                 B.NE            loc_C5D4
.text:000000000000C5C4                 LDR             X8, [SP,#0x30+var_30]
.text:000000000000C5C8                 MOV             W0, WZR
.text:000000000000C5CC                 STR             X8, [X19]
.text:000000000000C5D0                 B               loc_C5D8
.text:000000000000C5D4 ; ---------------------------------------------------------------------------
.text:000000000000C5D4 loc_C5D4                                ; CODE XREF: tinyxml2::XMLElement::QueryInt64Text(long *)+88↑j
.text:000000000000C5D4                 MOV             W0, #0x10
.text:000000000000C5D8 loc_C5D8                                ; CODE XREF: tinyxml2::XMLElement::QueryInt64Text(long *)+64↑j
.text:000000000000C5D8                                         ; tinyxml2::XMLElement::QueryInt64Text(long *)+98↑j
.text:000000000000C5D8                 LDR             X8, [X21,#0x28]
.text:000000000000C5DC                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000C5E0                 CMP             X8, X9
.text:000000000000C5E4                 B.NE            loc_C5FC
.text:000000000000C5E8                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C5EC                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C5F0                 LDR             X21, [SP,#0x30+var_20]
.text:000000000000C5F4                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000C5F8                 RET
.text:000000000000C5FC ; ---------------------------------------------------------------------------
.text:000000000000C5FC loc_C5FC                                ; CODE XREF: tinyxml2::XMLElement::QueryInt64Text(long *)+AC↑j
.text:000000000000C5FC                 BL              .__stack_chk_fail
.text:000000000000C5FC ; } // starts at C538
.text:000000000000C5FC ; End of function tinyxml2::XMLElement::QueryInt64Text(long *)
.text:000000000000C600 ; =============== S U B R O U T I N E =======================================
.text:000000000000C600 ; Attributes: bp-based frame
.text:000000000000C600 ; __int64 __fastcall tinyxml2::XMLElement::QueryBoolText(tinyxml2::XMLElement *__hidden this, bool *)
.text:000000000000C600                 EXPORT _ZNK8tinyxml210XMLElement13QueryBoolTextEPb
.text:000000000000C600 _ZNK8tinyxml210XMLElement13QueryBoolTextEPb
.text:000000000000C600                                         ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+C↓j
.text:000000000000C600                                         ; DATA XREF: LOAD:0000000000001188↑o ...
.text:000000000000C600 var_2C          = -0x2C
.text:000000000000C600 var_28          = -0x28
.text:000000000000C600 var_20          = -0x20
.text:000000000000C600 var_10          = -0x10
.text:000000000000C600 var_s0          =  0
.text:000000000000C600 ; __unwind {
.text:000000000000C600                 SUB             SP, SP, #0x40
.text:000000000000C604                 STR             X21, [SP,#0x30+var_20]
.text:000000000000C608                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C60C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C610                 ADD             X29, SP, #0x30
.text:000000000000C614                 MRS             X21, #3, c13, c0, #2
.text:000000000000C618                 MOV             X20, X0
.text:000000000000C61C                 LDR             X8, [X21,#0x28]
.text:000000000000C620                 STR             X8, [SP,#0x30+var_28]
.text:000000000000C624                 LDR             X0, [X0,#0x38]
.text:000000000000C628                 CBZ             X0, loc_C660
.text:000000000000C62C                 LDR             X8, [X0]
.text:000000000000C630                 MOV             X19, X1
.text:000000000000C634                 LDR             X8, [X8,#0x38]
.text:000000000000C638                 BLR             X8
.text:000000000000C63C                 CBZ             X0, loc_C660
.text:000000000000C640                 LDR             X20, [X20,#0x38]
.text:000000000000C644                 LDR             X8, [X20]
.text:000000000000C648                 MOV             X0, X20
.text:000000000000C64C                 LDR             X8, [X8,#0x48]
.text:000000000000C650                 BLR             X8
.text:000000000000C654                 CBZ             X0, loc_C668
.text:000000000000C658                 MOV             X20, XZR
.text:000000000000C65C                 B               loc_C674
.text:000000000000C660 ; ---------------------------------------------------------------------------
.text:000000000000C660 loc_C660                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+28↑j
.text:000000000000C660                                         ; tinyxml2::XMLElement::QueryBoolText(bool *)+3C↑j
.text:000000000000C660                 MOV             W0, #0x11
.text:000000000000C664                 B               loc_C710
.text:000000000000C668 ; ---------------------------------------------------------------------------
.text:000000000000C668 loc_C668                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+54↑j
.text:000000000000C668                 ADD             X0, X20, #0x18 ; this
.text:000000000000C66C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C670                 MOV             X20, X0
.text:000000000000C674 loc_C674                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+5C↑j
.text:000000000000C674                 ADRP            X1, #unk_4EA5@PAGE
.text:000000000000C678                 STR             WZR, [SP,#0x30+var_2C]
.text:000000000000C67C                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:000000000000C680                 ADD             X2, SP, #0x30+var_2C
.text:000000000000C684                 MOV             X0, X20 ; s
.text:000000000000C688                 BL              .sscanf
.text:000000000000C68C                 CMP             W0, #1
.text:000000000000C690                 B.NE            loc_C6A4
.text:000000000000C694                 LDR             W8, [SP,#0x30+var_2C]
.text:000000000000C698                 CMP             W8, #0
.text:000000000000C69C                 CSET            W8, NE
.text:000000000000C6A0                 B               loc_C708
.text:000000000000C6A4 ; ---------------------------------------------------------------------------
.text:000000000000C6A4 loc_C6A4                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+90↑j
.text:000000000000C6A4                 ADRP            X8, #aTrue@PAGE ; "true"
.text:000000000000C6A8                 ADD             X8, X8, #aTrue@PAGEOFF ; "true"
.text:000000000000C6AC                 CMP             X20, X8
.text:000000000000C6B0                 B.EQ            loc_C6FC
.text:000000000000C6B4                 ADRP            X1, #aTrue@PAGE ; "true"
.text:000000000000C6B8                 ADD             X1, X1, #aTrue@PAGEOFF ; "true"
.text:000000000000C6BC                 MOV             X0, X20 ; s1
.text:000000000000C6C0                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000C6C4                 BL              .strncmp
.text:000000000000C6C8                 CBZ             W0, loc_C6FC
.text:000000000000C6CC                 ADRP            X8, #aFalse@PAGE ; "false"
.text:000000000000C6D0                 ADD             X8, X8, #aFalse@PAGEOFF ; "false"
.text:000000000000C6D4                 CMP             X20, X8
.text:000000000000C6D8                 B.EQ            loc_C704
.text:000000000000C6DC                 ADRP            X1, #aFalse@PAGE ; "false"
.text:000000000000C6E0                 ADD             X1, X1, #aFalse@PAGEOFF ; "false"
.text:000000000000C6E4                 MOV             X0, X20 ; s1
.text:000000000000C6E8                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000C6EC                 BL              .strncmp
.text:000000000000C6F0                 CBZ             W0, loc_C704
.text:000000000000C6F4                 MOV             W0, #0x10
.text:000000000000C6F8                 B               loc_C710
.text:000000000000C6FC ; ---------------------------------------------------------------------------
.text:000000000000C6FC loc_C6FC                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+B0↑j
.text:000000000000C6FC                                         ; tinyxml2::XMLElement::QueryBoolText(bool *)+C8↑j
.text:000000000000C6FC                 MOV             W8, #1
.text:000000000000C700                 B               loc_C708
.text:000000000000C704 ; ---------------------------------------------------------------------------
.text:000000000000C704 loc_C704                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+D8↑j
.text:000000000000C704                                         ; tinyxml2::XMLElement::QueryBoolText(bool *)+F0↑j
.text:000000000000C704                 MOV             W8, WZR
.text:000000000000C708 loc_C708                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+A0↑j
.text:000000000000C708                                         ; tinyxml2::XMLElement::QueryBoolText(bool *)+100↑j
.text:000000000000C708                 MOV             W0, WZR
.text:000000000000C70C                 STRB            W8, [X19]
.text:000000000000C710 loc_C710                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+64↑j
.text:000000000000C710                                         ; tinyxml2::XMLElement::QueryBoolText(bool *)+F8↑j
.text:000000000000C710                 LDR             X8, [X21,#0x28]
.text:000000000000C714                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000C718                 CMP             X8, X9
.text:000000000000C71C                 B.NE            loc_C734
.text:000000000000C720                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C724                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C728                 LDR             X21, [SP,#0x30+var_20]
.text:000000000000C72C                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000C730                 RET
.text:000000000000C734 ; ---------------------------------------------------------------------------
.text:000000000000C734 loc_C734                                ; CODE XREF: tinyxml2::XMLElement::QueryBoolText(bool *)+11C↑j
.text:000000000000C734                 BL              .__stack_chk_fail
.text:000000000000C734 ; } // starts at C600
.text:000000000000C734 ; End of function tinyxml2::XMLElement::QueryBoolText(bool *)
.text:000000000000C738 ; =============== S U B R O U T I N E =======================================
.text:000000000000C738 ; Attributes: bp-based frame
.text:000000000000C738 ; __int64 __fastcall tinyxml2::XMLElement::QueryDoubleText(tinyxml2::XMLElement *__hidden this, double *)
.text:000000000000C738                 EXPORT _ZNK8tinyxml210XMLElement15QueryDoubleTextEPd
.text:000000000000C738 _ZNK8tinyxml210XMLElement15QueryDoubleTextEPd
.text:000000000000C738                                         ; DATA XREF: LOAD:0000000000000A38↑o
.text:000000000000C738 var_10          = -0x10
.text:000000000000C738 var_s0          =  0
.text:000000000000C738 ; __unwind {
.text:000000000000C738                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000C73C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C740                 ADD             X29, SP, #0x10
.text:000000000000C744                 MOV             X20, X0
.text:000000000000C748                 LDR             X0, [X0,#0x38]
.text:000000000000C74C                 CBZ             X0, loc_C784
.text:000000000000C750                 LDR             X8, [X0]
.text:000000000000C754                 MOV             X19, X1
.text:000000000000C758                 LDR             X8, [X8,#0x38]
.text:000000000000C75C                 BLR             X8
.text:000000000000C760                 CBZ             X0, loc_C784
.text:000000000000C764                 LDR             X20, [X20,#0x38]
.text:000000000000C768                 LDR             X8, [X20]
.text:000000000000C76C                 MOV             X0, X20
.text:000000000000C770                 LDR             X8, [X8,#0x48]
.text:000000000000C774                 BLR             X8
.text:000000000000C778                 CBZ             X0, loc_C78C
.text:000000000000C77C                 MOV             X0, XZR
.text:000000000000C780                 B               loc_C794
.text:000000000000C784 ; ---------------------------------------------------------------------------
.text:000000000000C784 loc_C784                                ; CODE XREF: tinyxml2::XMLElement::QueryDoubleText(double *)+14↑j
.text:000000000000C784                                         ; tinyxml2::XMLElement::QueryDoubleText(double *)+28↑j
.text:000000000000C784                 MOV             W0, #0x11
.text:000000000000C788                 B               loc_C7B0
.text:000000000000C78C ; ---------------------------------------------------------------------------
.text:000000000000C78C loc_C78C                                ; CODE XREF: tinyxml2::XMLElement::QueryDoubleText(double *)+40↑j
.text:000000000000C78C                 ADD             X0, X20, #0x18 ; this
.text:000000000000C790                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C794 loc_C794                                ; CODE XREF: tinyxml2::XMLElement::QueryDoubleText(double *)+48↑j
.text:000000000000C794                 ADRP            X1, #aLf@PAGE ; "%lf"
.text:000000000000C798                 ADD             X1, X1, #aLf@PAGEOFF ; format
.text:000000000000C79C                 MOV             X2, X19
.text:000000000000C7A0                 BL              .sscanf
.text:000000000000C7A4                 CMP             W0, #1
.text:000000000000C7A8                 CSET            W8, NE
.text:000000000000C7AC                 LSL             W0, W8, #4
.text:000000000000C7B0 loc_C7B0                                ; CODE XREF: tinyxml2::XMLElement::QueryDoubleText(double *)+50↑j
.text:000000000000C7B0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C7B4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000C7B8                 RET
.text:000000000000C7B8 ; } // starts at C738
.text:000000000000C7B8 ; End of function tinyxml2::XMLElement::QueryDoubleText(double *)
.text:000000000000C7B8 ; ---------------------------------------------------------------------------
.text:000000000000C7BC                 ALIGN 0x20
.text:000000000000C7C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C7C0 ; Attributes: bp-based frame
.text:000000000000C7C0 ; __int64 __fastcall tinyxml2::XMLElement::QueryFloatText(tinyxml2::XMLElement *__hidden this, float *)
.text:000000000000C7C0                 EXPORT _ZNK8tinyxml210XMLElement14QueryFloatTextEPf
.text:000000000000C7C0 _ZNK8tinyxml210XMLElement14QueryFloatTextEPf
.text:000000000000C7C0                                         ; DATA XREF: LOAD:0000000000001728↑o
.text:000000000000C7C0 var_10          = -0x10
.text:000000000000C7C0 var_s0          =  0
.text:000000000000C7C0 ; __unwind {
.text:000000000000C7C0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000C7C4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C7C8                 ADD             X29, SP, #0x10
.text:000000000000C7CC                 MOV             X20, X0
.text:000000000000C7D0                 LDR             X0, [X0,#0x38]
.text:000000000000C7D4                 CBZ             X0, loc_C80C
.text:000000000000C7D8                 LDR             X8, [X0]
.text:000000000000C7DC                 MOV             X19, X1
.text:000000000000C7E0                 LDR             X8, [X8,#0x38]
.text:000000000000C7E4                 BLR             X8
.text:000000000000C7E8                 CBZ             X0, loc_C80C
.text:000000000000C7EC                 LDR             X20, [X20,#0x38]
.text:000000000000C7F0                 LDR             X8, [X20]
.text:000000000000C7F4                 MOV             X0, X20
.text:000000000000C7F8                 LDR             X8, [X8,#0x48]
.text:000000000000C7FC                 BLR             X8
.text:000000000000C800                 CBZ             X0, loc_C814
.text:000000000000C804                 MOV             X0, XZR
.text:000000000000C808                 B               loc_C81C
.text:000000000000C80C ; ---------------------------------------------------------------------------
.text:000000000000C80C loc_C80C                                ; CODE XREF: tinyxml2::XMLElement::QueryFloatText(float *)+14↑j
.text:000000000000C80C                                         ; tinyxml2::XMLElement::QueryFloatText(float *)+28↑j
.text:000000000000C80C                 MOV             W0, #0x11
.text:000000000000C810                 B               loc_C838
.text:000000000000C814 ; ---------------------------------------------------------------------------
.text:000000000000C814 loc_C814                                ; CODE XREF: tinyxml2::XMLElement::QueryFloatText(float *)+40↑j
.text:000000000000C814                 ADD             X0, X20, #0x18 ; this
.text:000000000000C818                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C81C loc_C81C                                ; CODE XREF: tinyxml2::XMLElement::QueryFloatText(float *)+48↑j
.text:000000000000C81C                 ADRP            X1, #aF@PAGE ; "%f"
.text:000000000000C820                 ADD             X1, X1, #aF@PAGEOFF ; "%f"
.text:000000000000C824                 MOV             X2, X19
.text:000000000000C828                 BL              .sscanf
.text:000000000000C82C                 CMP             W0, #1
.text:000000000000C830                 CSET            W8, NE
.text:000000000000C834                 LSL             W0, W8, #4
.text:000000000000C838 loc_C838                                ; CODE XREF: tinyxml2::XMLElement::QueryFloatText(float *)+50↑j
.text:000000000000C838                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000C83C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000C840                 RET
.text:000000000000C840 ; } // starts at C7C0
.text:000000000000C840 ; End of function tinyxml2::XMLElement::QueryFloatText(float *)
.text:000000000000C840 ; ---------------------------------------------------------------------------
.text:000000000000C844                 ALIGN 8
.text:000000000000C848 ; =============== S U B R O U T I N E =======================================
.text:000000000000C848 ; Attributes: bp-based frame
.text:000000000000C848 ; __int64 __fastcall tinyxml2::XMLElement::IntText(tinyxml2::XMLElement *__hidden this, int)
.text:000000000000C848                 EXPORT _ZNK8tinyxml210XMLElement7IntTextEi
.text:000000000000C848 _ZNK8tinyxml210XMLElement7IntTextEi     ; DATA XREF: LOAD:00000000000015D8↑o
.text:000000000000C848 var_2C          = -0x2C
.text:000000000000C848 var_28          = -0x28
.text:000000000000C848 var_20          = -0x20
.text:000000000000C848 var_10          = -0x10
.text:000000000000C848 var_s0          =  0
.text:000000000000C848 ; __unwind {
.text:000000000000C848                 SUB             SP, SP, #0x40
.text:000000000000C84C                 STR             X21, [SP,#0x30+var_20]
.text:000000000000C850                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C854                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C858                 ADD             X29, SP, #0x30
.text:000000000000C85C                 MRS             X21, #3, c13, c0, #2
.text:000000000000C860                 MOV             X20, X0
.text:000000000000C864                 LDR             X8, [X21,#0x28]
.text:000000000000C868                 MOV             W19, W1
.text:000000000000C86C                 STR             X8, [SP,#0x30+var_28]
.text:000000000000C870                 LDR             X0, [X0,#0x38]
.text:000000000000C874                 STR             W1, [SP,#0x30+var_2C]
.text:000000000000C878                 CBZ             X0, loc_C8C8
.text:000000000000C87C                 LDR             X8, [X0]
.text:000000000000C880                 LDR             X8, [X8,#0x38]
.text:000000000000C884                 BLR             X8
.text:000000000000C888                 CBZ             X0, loc_C8C8
.text:000000000000C88C                 LDR             X19, [X20,#0x38]
.text:000000000000C890                 LDR             X8, [X19]
.text:000000000000C894                 MOV             X0, X19
.text:000000000000C898                 LDR             X8, [X8,#0x48]
.text:000000000000C89C                 BLR             X8
.text:000000000000C8A0                 CBZ             X0, loc_C8AC
.text:000000000000C8A4                 MOV             X0, XZR
.text:000000000000C8A8                 B               loc_C8B4
.text:000000000000C8AC ; ---------------------------------------------------------------------------
.text:000000000000C8AC loc_C8AC                                ; CODE XREF: tinyxml2::XMLElement::IntText(int)+58↑j
.text:000000000000C8AC                 ADD             X0, X19, #0x18 ; this
.text:000000000000C8B0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C8B4 loc_C8B4                                ; CODE XREF: tinyxml2::XMLElement::IntText(int)+60↑j
.text:000000000000C8B4                 ADRP            X1, #unk_4EA5@PAGE
.text:000000000000C8B8                 ADD             X1, X1, #unk_4EA5@PAGEOFF ; format
.text:000000000000C8BC                 ADD             X2, SP, #0x30+var_2C
.text:000000000000C8C0                 BL              .sscanf
.text:000000000000C8C4                 LDR             W19, [SP,#0x30+var_2C]
.text:000000000000C8C8 loc_C8C8                                ; CODE XREF: tinyxml2::XMLElement::IntText(int)+30↑j
.text:000000000000C8C8                                         ; tinyxml2::XMLElement::IntText(int)+40↑j
.text:000000000000C8C8                 LDR             X8, [X21,#0x28]
.text:000000000000C8CC                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000C8D0                 CMP             X8, X9
.text:000000000000C8D4                 B.NE            loc_C8F0
.text:000000000000C8D8                 MOV             W0, W19
.text:000000000000C8DC                 LDR             X21, [SP,#0x30+var_20]
.text:000000000000C8E0                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C8E4                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C8E8                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000C8EC                 RET
.text:000000000000C8F0 ; ---------------------------------------------------------------------------
.text:000000000000C8F0 loc_C8F0                                ; CODE XREF: tinyxml2::XMLElement::IntText(int)+8C↑j
.text:000000000000C8F0                 BL              .__stack_chk_fail
.text:000000000000C8F0 ; } // starts at C848
.text:000000000000C8F0 ; End of function tinyxml2::XMLElement::IntText(int)
.text:000000000000C8F0 ; ---------------------------------------------------------------------------
.text:000000000000C8F4                 ALIGN 8
.text:000000000000C8F8 ; =============== S U B R O U T I N E =======================================
.text:000000000000C8F8 ; Attributes: bp-based frame
.text:000000000000C8F8 ; __int64 __fastcall tinyxml2::XMLElement::UnsignedText(tinyxml2::XMLElement *__hidden this, unsigned int)
.text:000000000000C8F8                 EXPORT _ZNK8tinyxml210XMLElement12UnsignedTextEj
.text:000000000000C8F8 _ZNK8tinyxml210XMLElement12UnsignedTextEj
.text:000000000000C8F8                                         ; DATA XREF: LOAD:0000000000000F90↑o
.text:000000000000C8F8 var_2C          = -0x2C
.text:000000000000C8F8 var_28          = -0x28
.text:000000000000C8F8 var_20          = -0x20
.text:000000000000C8F8 var_10          = -0x10
.text:000000000000C8F8 var_s0          =  0
.text:000000000000C8F8 ; __unwind {
.text:000000000000C8F8                 SUB             SP, SP, #0x40
.text:000000000000C8FC                 STR             X21, [SP,#0x30+var_20]
.text:000000000000C900                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C904                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C908                 ADD             X29, SP, #0x30
.text:000000000000C90C                 MRS             X21, #3, c13, c0, #2
.text:000000000000C910                 MOV             X20, X0
.text:000000000000C914                 LDR             X8, [X21,#0x28]
.text:000000000000C918                 MOV             W19, W1
.text:000000000000C91C                 STR             X8, [SP,#0x30+var_28]
.text:000000000000C920                 LDR             X0, [X0,#0x38]
.text:000000000000C924                 STR             W1, [SP,#0x30+var_2C]
.text:000000000000C928                 CBZ             X0, loc_C978
.text:000000000000C92C                 LDR             X8, [X0]
.text:000000000000C930                 LDR             X8, [X8,#0x38]
.text:000000000000C934                 BLR             X8
.text:000000000000C938                 CBZ             X0, loc_C978
.text:000000000000C93C                 LDR             X19, [X20,#0x38]
.text:000000000000C940                 LDR             X8, [X19]
.text:000000000000C944                 MOV             X0, X19
.text:000000000000C948                 LDR             X8, [X8,#0x48]
.text:000000000000C94C                 BLR             X8
.text:000000000000C950                 CBZ             X0, loc_C95C
.text:000000000000C954                 MOV             X0, XZR
.text:000000000000C958                 B               loc_C964
.text:000000000000C95C ; ---------------------------------------------------------------------------
.text:000000000000C95C loc_C95C                                ; CODE XREF: tinyxml2::XMLElement::UnsignedText(uint)+58↑j
.text:000000000000C95C                 ADD             X0, X19, #0x18 ; this
.text:000000000000C960                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000C964 loc_C964                                ; CODE XREF: tinyxml2::XMLElement::UnsignedText(uint)+60↑j
.text:000000000000C964                 ADRP            X1, #unk_4EE4@PAGE
.text:000000000000C968                 ADD             X1, X1, #unk_4EE4@PAGEOFF ; format
.text:000000000000C96C                 ADD             X2, SP, #0x30+var_2C
.text:000000000000C970                 BL              .sscanf
.text:000000000000C974                 LDR             W19, [SP,#0x30+var_2C]
.text:000000000000C978 loc_C978                                ; CODE XREF: tinyxml2::XMLElement::UnsignedText(uint)+30↑j
.text:000000000000C978                                         ; tinyxml2::XMLElement::UnsignedText(uint)+40↑j
.text:000000000000C978                 LDR             X8, [X21,#0x28]
.text:000000000000C97C                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000C980                 CMP             X8, X9
.text:000000000000C984                 B.NE            loc_C9A0
.text:000000000000C988                 MOV             W0, W19
.text:000000000000C98C                 LDR             X21, [SP,#0x30+var_20]
.text:000000000000C990                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C994                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C998                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000C99C                 RET
.text:000000000000C9A0 ; ---------------------------------------------------------------------------
.text:000000000000C9A0 loc_C9A0                                ; CODE XREF: tinyxml2::XMLElement::UnsignedText(uint)+8C↑j
.text:000000000000C9A0                 BL              .__stack_chk_fail
.text:000000000000C9A0 ; } // starts at C8F8
.text:000000000000C9A0 ; End of function tinyxml2::XMLElement::UnsignedText(uint)
.text:000000000000C9A0 ; ---------------------------------------------------------------------------
.text:000000000000C9A4                 ALIGN 8
.text:000000000000C9A8 ; =============== S U B R O U T I N E =======================================
.text:000000000000C9A8 ; Attributes: bp-based frame
.text:000000000000C9A8 ; __int64 __fastcall tinyxml2::XMLElement::Int64Text(tinyxml2::XMLElement *__hidden this, __int64)
.text:000000000000C9A8                 EXPORT _ZNK8tinyxml210XMLElement9Int64TextEl
.text:000000000000C9A8 _ZNK8tinyxml210XMLElement9Int64TextEl   ; DATA XREF: LOAD:0000000000001620↑o
.text:000000000000C9A8 var_30          = -0x30
.text:000000000000C9A8 var_28          = -0x28
.text:000000000000C9A8 var_20          = -0x20
.text:000000000000C9A8 var_10          = -0x10
.text:000000000000C9A8 var_s0          =  0
.text:000000000000C9A8 ; __unwind {
.text:000000000000C9A8                 SUB             SP, SP, #0x40
.text:000000000000C9AC                 STR             X21, [SP,#0x30+var_20]
.text:000000000000C9B0                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000C9B4                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000C9B8                 ADD             X29, SP, #0x30
.text:000000000000C9BC                 MRS             X21, #3, c13, c0, #2
.text:000000000000C9C0                 MOV             X20, X0
.text:000000000000C9C4                 LDR             X8, [X21,#0x28]
.text:000000000000C9C8                 MOV             X19, X1
.text:000000000000C9CC                 STR             X8, [SP,#0x30+var_28]
.text:000000000000C9D0                 LDR             X0, [X0,#0x38]
.text:000000000000C9D4                 CBZ             X0, loc_CA30
.text:000000000000C9D8                 LDR             X8, [X0]
.text:000000000000C9DC                 LDR             X8, [X8,#0x38]
.text:000000000000C9E0                 BLR             X8
.text:000000000000C9E4                 CBZ             X0, loc_CA30
.text:000000000000C9E8                 LDR             X20, [X20,#0x38]
.text:000000000000C9EC                 LDR             X8, [X20]
.text:000000000000C9F0                 MOV             X0, X20
.text:000000000000C9F4                 LDR             X8, [X8,#0x48]
.text:000000000000C9F8                 BLR             X8
.text:000000000000C9FC                 CBZ             X0, loc_CA08
.text:000000000000CA00                 MOV             X0, XZR
.text:000000000000CA04                 B               loc_CA10
.text:000000000000CA08 ; ---------------------------------------------------------------------------
.text:000000000000CA08 loc_CA08                                ; CODE XREF: tinyxml2::XMLElement::Int64Text(long)+54↑j
.text:000000000000CA08                 ADD             X0, X20, #0x18 ; this
.text:000000000000CA0C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000CA10 loc_CA10                                ; CODE XREF: tinyxml2::XMLElement::Int64Text(long)+5C↑j
.text:000000000000CA10                 ADRP            X1, #aLld@PAGE ; "%lld"
.text:000000000000CA14                 STR             XZR, [SP,#0x30+var_30]
.text:000000000000CA18                 ADD             X1, X1, #aLld@PAGEOFF ; "%lld"
.text:000000000000CA1C                 MOV             X2, SP
.text:000000000000CA20                 BL              .sscanf
.text:000000000000CA24                 CMP             W0, #1
.text:000000000000CA28                 B.NE            loc_CA30
.text:000000000000CA2C                 LDR             X19, [SP,#0x30+var_30]
.text:000000000000CA30 loc_CA30                                ; CODE XREF: tinyxml2::XMLElement::Int64Text(long)+2C↑j
.text:000000000000CA30                                         ; tinyxml2::XMLElement::Int64Text(long)+3C↑j ...
.text:000000000000CA30                 LDR             X8, [X21,#0x28]
.text:000000000000CA34                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000CA38                 CMP             X8, X9
.text:000000000000CA3C                 B.NE            loc_CA58
.text:000000000000CA40                 MOV             X0, X19
.text:000000000000CA44                 LDR             X21, [SP,#0x30+var_20]
.text:000000000000CA48                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CA4C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CA50                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000CA54                 RET
.text:000000000000CA58 ; ---------------------------------------------------------------------------
.text:000000000000CA58 loc_CA58                                ; CODE XREF: tinyxml2::XMLElement::Int64Text(long)+94↑j
.text:000000000000CA58                 BL              .__stack_chk_fail
.text:000000000000CA58 ; } // starts at C9A8
.text:000000000000CA58 ; End of function tinyxml2::XMLElement::Int64Text(long)
.text:000000000000CA58 ; ---------------------------------------------------------------------------
.text:000000000000CA5C                 ALIGN 0x20
.text:000000000000CA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA60 ; Attributes: bp-based frame
.text:000000000000CA60 ; __int64 __fastcall tinyxml2::XMLElement::BoolText(tinyxml2::XMLElement *__hidden this, bool)
.text:000000000000CA60                 EXPORT _ZNK8tinyxml210XMLElement8BoolTextEb
.text:000000000000CA60 _ZNK8tinyxml210XMLElement8BoolTextEb    ; DATA XREF: LOAD:0000000000000BE8↑o
.text:000000000000CA60 var_1C          = -0x1C
.text:000000000000CA60 var_18          = -0x18
.text:000000000000CA60 var_10          = -0x10
.text:000000000000CA60 var_s0          =  0
.text:000000000000CA60 ; __unwind {
.text:000000000000CA60                 SUB             SP, SP, #0x30
.text:000000000000CA64                 STR             X19, [SP,#0x20+var_10]
.text:000000000000CA68                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000CA6C                 ADD             X29, SP, #0x20
.text:000000000000CA70                 MRS             X19, #3, c13, c0, #2
.text:000000000000CA74                 AND             W9, W1, #1
.text:000000000000CA78                 LDR             X8, [X19,#0x28]
.text:000000000000CA7C                 ADD             X1, SP, #0x20+var_1C ; bool *
.text:000000000000CA80                 STR             X8, [SP,#0x20+var_18]
.text:000000000000CA84                 STRB            W9, [SP,#0x20+var_1C]
.text:000000000000CA88                 BL              ._ZNK8tinyxml210XMLElement13QueryBoolTextEPb ; tinyxml2::XMLElement::QueryBoolText(bool *)
.text:000000000000CA8C                 LDRB            W8, [SP,#0x20+var_1C]
.text:000000000000CA90                 LDR             X9, [X19,#0x28]
.text:000000000000CA94                 LDR             X10, [SP,#0x20+var_18]
.text:000000000000CA98                 CMP             W8, #0
.text:000000000000CA9C                 CSET            W0, NE
.text:000000000000CAA0                 CMP             X9, X10
.text:000000000000CAA4                 B.NE            loc_CAB8
.text:000000000000CAA8                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000CAAC                 LDR             X19, [SP,#0x20+var_10]
.text:000000000000CAB0                 ADD             SP, SP, #0x30 ; '0'
.text:000000000000CAB4                 RET
.text:000000000000CAB8 ; ---------------------------------------------------------------------------
.text:000000000000CAB8 loc_CAB8                                ; CODE XREF: tinyxml2::XMLElement::BoolText(bool)+44↑j
.text:000000000000CAB8                 BL              .__stack_chk_fail
.text:000000000000CAB8 ; } // starts at CA60
.text:000000000000CAB8 ; End of function tinyxml2::XMLElement::BoolText(bool)
.text:000000000000CAB8 ; ---------------------------------------------------------------------------
.text:000000000000CABC                 ALIGN 0x20
.text:000000000000CAC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CAC0 ; Attributes: bp-based frame
.text:000000000000CAC0 ; __int64 __fastcall tinyxml2::XMLElement::DoubleText(tinyxml2::XMLElement *__hidden this, double)
.text:000000000000CAC0                 EXPORT _ZNK8tinyxml210XMLElement10DoubleTextEd
.text:000000000000CAC0 _ZNK8tinyxml210XMLElement10DoubleTextEd ; DATA XREF: LOAD:0000000000000EB8↑o
.text:000000000000CAC0 var_30          = -0x30
.text:000000000000CAC0 var_28          = -0x28
.text:000000000000CAC0 var_20          = -0x20
.text:000000000000CAC0 var_10          = -0x10
.text:000000000000CAC0 var_s0          =  0
.text:000000000000CAC0 ; __unwind {
.text:000000000000CAC0                 SUB             SP, SP, #0x40
.text:000000000000CAC4                 STR             D8, [SP,#0x30+var_20]
.text:000000000000CAC8                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CACC                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CAD0                 ADD             X29, SP, #0x30
.text:000000000000CAD4                 MRS             X20, #3, c13, c0, #2
.text:000000000000CAD8                 MOV             V8.16B, V0.16B
.text:000000000000CADC                 LDR             X8, [X20,#0x28]
.text:000000000000CAE0                 MOV             X19, X0
.text:000000000000CAE4                 STR             X8, [SP,#0x30+var_28]
.text:000000000000CAE8                 LDR             X0, [X0,#0x38]
.text:000000000000CAEC                 STR             D0, [SP,#0x30+var_30]
.text:000000000000CAF0                 CBZ             X0, loc_CB40
.text:000000000000CAF4                 LDR             X8, [X0]
.text:000000000000CAF8                 LDR             X8, [X8,#0x38]
.text:000000000000CAFC                 BLR             X8
.text:000000000000CB00                 CBZ             X0, loc_CB40
.text:000000000000CB04                 LDR             X19, [X19,#0x38]
.text:000000000000CB08                 LDR             X8, [X19]
.text:000000000000CB0C                 MOV             X0, X19
.text:000000000000CB10                 LDR             X8, [X8,#0x48]
.text:000000000000CB14                 BLR             X8
.text:000000000000CB18                 CBZ             X0, loc_CB24
.text:000000000000CB1C                 MOV             X0, XZR
.text:000000000000CB20                 B               loc_CB2C
.text:000000000000CB24 ; ---------------------------------------------------------------------------
.text:000000000000CB24 loc_CB24                                ; CODE XREF: tinyxml2::XMLElement::DoubleText(double)+58↑j
.text:000000000000CB24                 ADD             X0, X19, #0x18 ; this
.text:000000000000CB28                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000CB2C loc_CB2C                                ; CODE XREF: tinyxml2::XMLElement::DoubleText(double)+60↑j
.text:000000000000CB2C                 ADRP            X1, #aLf@PAGE ; "%lf"
.text:000000000000CB30                 ADD             X1, X1, #aLf@PAGEOFF ; format
.text:000000000000CB34                 MOV             X2, SP
.text:000000000000CB38                 BL              .sscanf
.text:000000000000CB3C                 LDR             D8, [SP,#0x30+var_30]
.text:000000000000CB40 loc_CB40                                ; CODE XREF: tinyxml2::XMLElement::DoubleText(double)+30↑j
.text:000000000000CB40                                         ; tinyxml2::XMLElement::DoubleText(double)+40↑j
.text:000000000000CB40                 LDR             X8, [X20,#0x28]
.text:000000000000CB44                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000CB48                 CMP             X8, X9
.text:000000000000CB4C                 B.NE            loc_CB68
.text:000000000000CB50                 MOV             V0.16B, V8.16B
.text:000000000000CB54                 LDR             D8, [SP,#0x30+var_20]
.text:000000000000CB58                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CB5C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CB60                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000CB64                 RET
.text:000000000000CB68 ; ---------------------------------------------------------------------------
.text:000000000000CB68 loc_CB68                                ; CODE XREF: tinyxml2::XMLElement::DoubleText(double)+8C↑j
.text:000000000000CB68                 BL              .__stack_chk_fail
.text:000000000000CB68 ; } // starts at CAC0
.text:000000000000CB68 ; End of function tinyxml2::XMLElement::DoubleText(double)
.text:000000000000CB68 ; ---------------------------------------------------------------------------
.text:000000000000CB6C                 ALIGN 0x10
.text:000000000000CB70 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB70 ; Attributes: bp-based frame
.text:000000000000CB70 ; __int64 __fastcall tinyxml2::XMLElement::FloatText(tinyxml2::XMLElement *__hidden this, float)
.text:000000000000CB70                 EXPORT _ZNK8tinyxml210XMLElement9FloatTextEf
.text:000000000000CB70 _ZNK8tinyxml210XMLElement9FloatTextEf   ; DATA XREF: LOAD:0000000000000768↑o
.text:000000000000CB70 var_2C          = -0x2C
.text:000000000000CB70 var_28          = -0x28
.text:000000000000CB70 var_20          = -0x20
.text:000000000000CB70 var_10          = -0x10
.text:000000000000CB70 var_s0          =  0
.text:000000000000CB70 ; __unwind {
.text:000000000000CB70                 SUB             SP, SP, #0x40
.text:000000000000CB74                 STR             D8, [SP,#0x30+var_20]
.text:000000000000CB78                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CB7C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CB80                 ADD             X29, SP, #0x30
.text:000000000000CB84                 MRS             X20, #3, c13, c0, #2
.text:000000000000CB88                 MOV             V8.16B, V0.16B
.text:000000000000CB8C                 LDR             X8, [X20,#0x28]
.text:000000000000CB90                 MOV             X19, X0
.text:000000000000CB94                 STR             X8, [SP,#0x30+var_28]
.text:000000000000CB98                 LDR             X0, [X0,#0x38]
.text:000000000000CB9C                 STR             S0, [SP,#0x30+var_2C]
.text:000000000000CBA0                 CBZ             X0, loc_CBF0
.text:000000000000CBA4                 LDR             X8, [X0]
.text:000000000000CBA8                 LDR             X8, [X8,#0x38]
.text:000000000000CBAC                 BLR             X8
.text:000000000000CBB0                 CBZ             X0, loc_CBF0
.text:000000000000CBB4                 LDR             X19, [X19,#0x38]
.text:000000000000CBB8                 LDR             X8, [X19]
.text:000000000000CBBC                 MOV             X0, X19
.text:000000000000CBC0                 LDR             X8, [X8,#0x48]
.text:000000000000CBC4                 BLR             X8
.text:000000000000CBC8                 CBZ             X0, loc_CBD4
.text:000000000000CBCC                 MOV             X0, XZR
.text:000000000000CBD0                 B               loc_CBDC
.text:000000000000CBD4 ; ---------------------------------------------------------------------------
.text:000000000000CBD4 loc_CBD4                                ; CODE XREF: tinyxml2::XMLElement::FloatText(float)+58↑j
.text:000000000000CBD4                 ADD             X0, X19, #0x18 ; this
.text:000000000000CBD8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000CBDC loc_CBDC                                ; CODE XREF: tinyxml2::XMLElement::FloatText(float)+60↑j
.text:000000000000CBDC                 ADRP            X1, #aF@PAGE ; "%f"
.text:000000000000CBE0                 ADD             X1, X1, #aF@PAGEOFF ; "%f"
.text:000000000000CBE4                 ADD             X2, SP, #0x30+var_2C
.text:000000000000CBE8                 BL              .sscanf
.text:000000000000CBEC                 LDR             S8, [SP,#0x30+var_2C]
.text:000000000000CBF0 loc_CBF0                                ; CODE XREF: tinyxml2::XMLElement::FloatText(float)+30↑j
.text:000000000000CBF0                                         ; tinyxml2::XMLElement::FloatText(float)+40↑j
.text:000000000000CBF0                 LDR             X8, [X20,#0x28]
.text:000000000000CBF4                 LDR             X9, [SP,#0x30+var_28]
.text:000000000000CBF8                 CMP             X8, X9
.text:000000000000CBFC                 B.NE            loc_CC18
.text:000000000000CC00                 MOV             V0.16B, V8.16B
.text:000000000000CC04                 LDR             D8, [SP,#0x30+var_20]
.text:000000000000CC08                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CC0C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CC10                 ADD             SP, SP, #0x40 ; '@'
.text:000000000000CC14                 RET
.text:000000000000CC18 ; ---------------------------------------------------------------------------
.text:000000000000CC18 loc_CC18                                ; CODE XREF: tinyxml2::XMLElement::FloatText(float)+8C↑j
.text:000000000000CC18                 BL              .__stack_chk_fail
.text:000000000000CC18 ; } // starts at CB70
.text:000000000000CC18 ; End of function tinyxml2::XMLElement::FloatText(float)
.text:000000000000CC18 ; ---------------------------------------------------------------------------
.text:000000000000CC1C                 ALIGN 0x20
.text:000000000000CC20 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC20 ; Attributes: bp-based frame
.text:000000000000CC20 ; __int64 __fastcall tinyxml2::XMLElement::FindOrCreateAttribute(tinyxml2::XMLElement *__hidden this, const char *)
.text:000000000000CC20                 EXPORT _ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc
.text:000000000000CC20 _ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc
.text:000000000000CC20                                         ; DATA XREF: LOAD:0000000000000DF8↑o
.text:000000000000CC20 var_20          = -0x20
.text:000000000000CC20 var_10          = -0x10
.text:000000000000CC20 var_s0          =  0
.text:000000000000CC20 ; __unwind {
.text:000000000000CC20                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000CC24                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000CC28                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000CC2C                 ADD             X29, SP, #0x20
.text:000000000000CC30                 LDR             X8, [X0,#0x70]
.text:000000000000CC34                 MOV             X21, X0
.text:000000000000CC38                 MOV             X19, X1
.text:000000000000CC3C                 CBZ             X8, loc_CC80
.text:000000000000CC40 loc_CC40                                ; CODE XREF: tinyxml2::XMLElement::FindOrCreateAttribute(char const*)+48↓j
.text:000000000000CC40                 ADD             X0, X8, #8 ; this
.text:000000000000CC44                 MOV             X20, X8
.text:000000000000CC48                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000CC4C                 CMP             X0, X19
.text:000000000000CC50                 B.EQ            loc_CCA0
.text:000000000000CC54                 MOV             X1, X19 ; s2
.text:000000000000CC58                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000CC5C                 BL              .strncmp
.text:000000000000CC60                 CBZ             W0, loc_CCA0
.text:000000000000CC64                 LDR             X8, [X20,#0x40]
.text:000000000000CC68                 CBNZ            X8, loc_CC40
.text:000000000000CC6C                 MOV             X0, X21 ; this
.text:000000000000CC70                 BL              ._ZN8tinyxml210XMLElement15CreateAttributeEv ; tinyxml2::XMLElement::CreateAttribute(void)
.text:000000000000CC74                 STR             X0, [X20,#0x40]
.text:000000000000CC78                 MOV             X20, X0
.text:000000000000CC7C                 B               loc_CC90
.text:000000000000CC80 ; ---------------------------------------------------------------------------
.text:000000000000CC80 loc_CC80                                ; CODE XREF: tinyxml2::XMLElement::FindOrCreateAttribute(char const*)+1C↑j
.text:000000000000CC80                 MOV             X0, X21 ; this
.text:000000000000CC84                 BL              ._ZN8tinyxml210XMLElement15CreateAttributeEv ; tinyxml2::XMLElement::CreateAttribute(void)
.text:000000000000CC88                 MOV             X20, X0
.text:000000000000CC8C                 STR             X0, [X21,#0x70]
.text:000000000000CC90 loc_CC90                                ; CODE XREF: tinyxml2::XMLElement::FindOrCreateAttribute(char const*)+5C↑j
.text:000000000000CC90                 ADD             X0, X20, #8 ; this
.text:000000000000CC94                 MOV             X1, X19 ; char *
.text:000000000000CC98                 MOV             W2, WZR ; int
.text:000000000000CC9C                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000CCA0 loc_CCA0                                ; CODE XREF: tinyxml2::XMLElement::FindOrCreateAttribute(char const*)+30↑j
.text:000000000000CCA0                                         ; tinyxml2::XMLElement::FindOrCreateAttribute(char const*)+40↑j
.text:000000000000CCA0                 MOV             X0, X20
.text:000000000000CCA4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000CCA8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000CCAC                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000CCB0                 RET
.text:000000000000CCB0 ; } // starts at CC20
.text:000000000000CCB0 ; End of function tinyxml2::XMLElement::FindOrCreateAttribute(char const*)
.text:000000000000CCB0 ; ---------------------------------------------------------------------------
.text:000000000000CCB4                 ALIGN 8
.text:000000000000CCB8 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCB8 ; Attributes: bp-based frame
.text:000000000000CCB8 ; __int64 __fastcall tinyxml2::XMLElement::CreateAttribute(tinyxml2::XMLElement *__hidden this)
.text:000000000000CCB8                 EXPORT _ZN8tinyxml210XMLElement15CreateAttributeEv
.text:000000000000CCB8 _ZN8tinyxml210XMLElement15CreateAttributeEv
.text:000000000000CCB8                                         ; CODE XREF: tinyxml2::XMLElement::CreateAttribute(void)+C↓j
.text:000000000000CCB8                                         ; DATA XREF: LOAD:0000000000000AE0↑o ...
.text:000000000000CCB8 var_30          = -0x30
.text:000000000000CCB8 var_20          = -0x20
.text:000000000000CCB8 var_10          = -0x10
.text:000000000000CCB8 var_s0          =  0
.text:000000000000CCB8 ; __unwind {
.text:000000000000CCB8                 STP             X24, X23, [SP,#-0x10+var_30]!
.text:000000000000CCBC                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000CCC0                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CCC4                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CCC8                 ADD             X29, SP, #0x30
.text:000000000000CCCC                 LDR             X22, [X0,#8]
.text:000000000000CCD0                 MOV             X19, X0
.text:000000000000CCD4                 LDR             X20, [X22,#0x1F0]
.text:000000000000CCD8                 CBNZ            X20, loc_CD94
.text:000000000000CCDC                 MOV             W0, #0xFF0 ; unsigned __int64
.text:000000000000CCE0                 BL              ._Znwm  ; operator new(ulong)
.text:000000000000CCE4                 MOV             W1, WZR ; c
.text:000000000000CCE8                 MOV             W2, #0xFF0 ; n
.text:000000000000CCEC                 MOV             X20, X0
.text:000000000000CCF0                 BL              .memset
.text:000000000000CCF4                 LDR             W8, [X22,#0x1EC]
.text:000000000000CCF8                 LDR             W9, [X22,#0x1E8]
.text:000000000000CCFC                 CMP             W9, W8
.text:000000000000CD00                 B.LE            loc_CD0C
.text:000000000000CD04                 LDR             X21, [X22,#0x190]
.text:000000000000CD08                 B               loc_CD60
.text:000000000000CD0C ; ---------------------------------------------------------------------------
.text:000000000000CD0C loc_CD0C                                ; CODE XREF: tinyxml2::XMLElement::CreateAttribute(void)+48↑j
.text:000000000000CD0C                 LSL             W9, W8, #1
.text:000000000000CD10                 ADD             W23, W9, #2
.text:000000000000CD14                 SXTW            X9, W23
.text:000000000000CD18                 CMP             XZR, X9,LSR#61
.text:000000000000CD1C                 SBFIZ           X10, X23, #3, #0x20 ; ' '
.text:000000000000CD20                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000CD24                 SXTW            X24, W8
.text:000000000000CD28                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000CD2C                 LDR             X1, [X22,#0x190] ; src
.text:000000000000CD30                 LSL             X2, X24, #3 ; n
.text:000000000000CD34                 MOV             X21, X0
.text:000000000000CD38                 BL              .memcpy
.text:000000000000CD3C                 LDR             X0, [X22,#0x190] ; void *
.text:000000000000CD40                 ADD             X8, X22, #0x198
.text:000000000000CD44                 CMP             X0, X8
.text:000000000000CD48                 B.EQ            loc_CD54
.text:000000000000CD4C                 CBZ             X0, loc_CD54
.text:000000000000CD50                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000CD54 loc_CD54                                ; CODE XREF: tinyxml2::XMLElement::CreateAttribute(void)+90↑j
.text:000000000000CD54                                         ; tinyxml2::XMLElement::CreateAttribute(void)+94↑j
.text:000000000000CD54                 LDR             W8, [X22,#0x1EC]
.text:000000000000CD58                 STR             X21, [X22,#0x190]
.text:000000000000CD5C                 STR             W23, [X22,#0x1E8]
.text:000000000000CD60 loc_CD60                                ; CODE XREF: tinyxml2::XMLElement::CreateAttribute(void)+50↑j
.text:000000000000CD60                 STR             X20, [X21,W8,SXTW#3]
.text:000000000000CD64                 LDR             W8, [X22,#0x1EC]
.text:000000000000CD68                 ADD             W9, W8, #1
.text:000000000000CD6C                 MOV             X8, XZR
.text:000000000000CD70                 STR             W9, [X22,#0x1EC]
.text:000000000000CD74 loc_CD74                                ; CODE XREF: tinyxml2::XMLElement::CreateAttribute(void)+D0↓j
.text:000000000000CD74                 ADD             X9, X20, X8
.text:000000000000CD78                 ADD             X10, X9, #0x50 ; 'P'
.text:000000000000CD7C                 ADD             X8, X8, #0x50 ; 'P'
.text:000000000000CD80                 CMP             X8, #0xFA0
.text:000000000000CD84                 STR             X10, [X9]
.text:000000000000CD88                 B.NE            loc_CD74
.text:000000000000CD8C                 STR             XZR, [X20,#0xFA0]
.text:000000000000CD90                 STR             X20, [X22,#0x1F0]
.text:000000000000CD94 loc_CD94                                ; CODE XREF: tinyxml2::XMLElement::CreateAttribute(void)+20↑j
.text:000000000000CD94                 LDR             W9, [X22,#0x1F8]
.text:000000000000CD98                 LDR             W11, [X22,#0x200]
.text:000000000000CD9C                 LDR             X10, [X20]
.text:000000000000CDA0                 ADD             W8, W9, #1
.text:000000000000CDA4                 CMP             W9, W11
.text:000000000000CDA8                 STR             X10, [X22,#0x1F0]
.text:000000000000CDAC                 STR             W8, [X22,#0x1F8]
.text:000000000000CDB0                 B.LT            loc_CDB8
.text:000000000000CDB4                 STR             W8, [X22,#0x200]
.text:000000000000CDB8 loc_CDB8                                ; CODE XREF: tinyxml2::XMLElement::CreateAttribute(void)+F8↑j
.text:000000000000CDB8                 ADRP            X10, #_ZTVN8tinyxml212XMLAttributeE_ptr@PAGE
.text:000000000000CDBC                 LDR             W8, [X22,#0x1FC]
.text:000000000000CDC0                 LDR             W9, [X22,#0x204]
.text:000000000000CDC4                 LDR             X10, [X10,#_ZTVN8tinyxml212XMLAttributeE_ptr@PAGEOFF]
.text:000000000000CDC8                 ADD             W8, W8, #1
.text:000000000000CDCC                 ADD             W9, W9, #1
.text:000000000000CDD0                 ADD             X10, X10, #0x10
.text:000000000000CDD4                 STR             W8, [X22,#0x1FC]
.text:000000000000CDD8                 STR             W9, [X22,#0x204]
.text:000000000000CDDC                 STR             WZR, [X20,#8]
.text:000000000000CDE0                 STR             X10, [X20]
.text:000000000000CDE4                 STR             WZR, [X20,#0x20]
.text:000000000000CDE8                 STP             XZR, XZR, [X20,#0x10]
.text:000000000000CDEC                 STR             WZR, [X20,#0x38]
.text:000000000000CDF0                 STP             XZR, XZR, [X20,#0x28]
.text:000000000000CDF4                 STP             XZR, XZR, [X20,#0x40]
.text:000000000000CDF8                 LDR             X8, [X19,#8]
.text:000000000000CDFC                 ADD             X0, X8, #0x188
.text:000000000000CE00                 STR             X0, [X20,#0x48]
.text:000000000000CE04                 LDR             X8, [X8,#0x188]
.text:000000000000CE08                 LDR             X8, [X8,#0x28]
.text:000000000000CE0C                 BLR             X8
.text:000000000000CE10                 MOV             X0, X20
.text:000000000000CE14                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CE18                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CE1C                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000CE20                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:000000000000CE24                 RET
.text:000000000000CE24 ; } // starts at CCB8
.text:000000000000CE24 ; End of function tinyxml2::XMLElement::CreateAttribute(void)
.text:000000000000CE28 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE28 ; Attributes: bp-based frame
.text:000000000000CE28 ; __int64 __fastcall tinyxml2::XMLElement::DeleteAttribute(tinyxml2::XMLElement *__hidden this, const char *)
.text:000000000000CE28                 EXPORT _ZN8tinyxml210XMLElement15DeleteAttributeEPKc
.text:000000000000CE28 _ZN8tinyxml210XMLElement15DeleteAttributeEPKc
.text:000000000000CE28                                         ; DATA XREF: LOAD:0000000000001908↑o
.text:000000000000CE28 var_30          = -0x30
.text:000000000000CE28 var_20          = -0x20
.text:000000000000CE28 var_10          = -0x10
.text:000000000000CE28 var_s0          =  0
.text:000000000000CE28 ; __unwind {
.text:000000000000CE28                 STR             X23, [SP,#-0x10+var_30]!
.text:000000000000CE2C                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000CE30                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CE34                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CE38                 ADD             X29, SP, #0x30
.text:000000000000CE3C                 MOV             X19, X0
.text:000000000000CE40                 LDR             X20, [X19,#0x70]!
.text:000000000000CE44                 CBZ             X20, loc_CE9C
.text:000000000000CE48                 ADD             X0, X20, #8 ; this
.text:000000000000CE4C                 MOV             X21, X1
.text:000000000000CE50                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000CE54                 CMP             X0, X21
.text:000000000000CE58                 B.EQ            loc_CEB0
.text:000000000000CE5C                 MOV             X1, X0  ; s2
.text:000000000000CE60                 MOV             X23, XZR
.text:000000000000CE64 loc_CE64                                ; CODE XREF: tinyxml2::XMLElement::DeleteAttribute(char const*)+6C↓j
.text:000000000000CE64                 MOV             X0, X21 ; s1
.text:000000000000CE68                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000CE6C                 MOV             X22, X20
.text:000000000000CE70                 BL              .strncmp
.text:000000000000CE74                 CBZ             W0, loc_CEB8
.text:000000000000CE78                 LDR             X20, [X22,#0x40]
.text:000000000000CE7C                 CBZ             X20, loc_CE9C
.text:000000000000CE80                 ADD             X0, X20, #8 ; this
.text:000000000000CE84                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000CE88                 MOV             X1, X0
.text:000000000000CE8C                 MOV             X23, X22
.text:000000000000CE90                 CMP             X0, X21
.text:000000000000CE94                 B.NE            loc_CE64
.text:000000000000CE98                 B               loc_CEC0
.text:000000000000CE9C ; ---------------------------------------------------------------------------
.text:000000000000CE9C loc_CE9C                                ; CODE XREF: tinyxml2::XMLElement::DeleteAttribute(char const*)+1C↑j
.text:000000000000CE9C                                         ; tinyxml2::XMLElement::DeleteAttribute(char const*)+54↑j
.text:000000000000CE9C                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CEA0                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CEA4                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000CEA8                 LDR             X23, [SP+0x30+var_30],#0x40
.text:000000000000CEAC                 RET
.text:000000000000CEB0 ; ---------------------------------------------------------------------------
.text:000000000000CEB0 loc_CEB0                                ; CODE XREF: tinyxml2::XMLElement::DeleteAttribute(char const*)+30↑j
.text:000000000000CEB0                 MOV             X22, XZR
.text:000000000000CEB4                 B               loc_CEC0
.text:000000000000CEB8 ; ---------------------------------------------------------------------------
.text:000000000000CEB8 loc_CEB8                                ; CODE XREF: tinyxml2::XMLElement::DeleteAttribute(char const*)+4C↑j
.text:000000000000CEB8                 MOV             X20, X22
.text:000000000000CEBC                 MOV             X22, X23
.text:000000000000CEC0 loc_CEC0                                ; CODE XREF: tinyxml2::XMLElement::DeleteAttribute(char const*)+70↑j
.text:000000000000CEC0                                         ; tinyxml2::XMLElement::DeleteAttribute(char const*)+8C↑j
.text:000000000000CEC0                 ADD             X8, X22, #0x40 ; '@'
.text:000000000000CEC4                 LDR             X9, [X20,#0x40]
.text:000000000000CEC8                 CMP             X22, #0
.text:000000000000CECC                 CSEL            X8, X19, X8, EQ
.text:000000000000CED0                 MOV             X0, X20
.text:000000000000CED4                 STR             X9, [X8]
.text:000000000000CED8                 LDR             X8, [X20]
.text:000000000000CEDC                 LDR             X19, [X20,#0x48]
.text:000000000000CEE0                 LDR             X8, [X8]
.text:000000000000CEE4                 BLR             X8
.text:000000000000CEE8                 LDR             X8, [X19]
.text:000000000000CEEC                 MOV             X0, X19
.text:000000000000CEF0                 MOV             X1, X20
.text:000000000000CEF4                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000CEF8                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000CEFC                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000CF00                 LDR             X2, [X8,#0x20]
.text:000000000000CF04                 LDR             X23, [SP+0x30+var_30],#0x40
.text:000000000000CF08                 BR              X2
.text:000000000000CF08 ; } // starts at CE28
.text:000000000000CF08 ; End of function tinyxml2::XMLElement::DeleteAttribute(char const*)
.text:000000000000CF08 ; ---------------------------------------------------------------------------
.text:000000000000CF0C                 ALIGN 0x10
.text:000000000000CF10 ; =============== S U B R O U T I N E =======================================
.text:000000000000CF10 ; Attributes: bp-based frame
.text:000000000000CF10 ; __int64 __fastcall tinyxml2::XMLElement::ParseAttributes(tinyxml2::XMLElement *__hidden this, char *, int *)
.text:000000000000CF10                 EXPORT _ZN8tinyxml210XMLElement15ParseAttributesEPcPi
.text:000000000000CF10 _ZN8tinyxml210XMLElement15ParseAttributesEPcPi
.text:000000000000CF10                                         ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+C↓j
.text:000000000000CF10                                         ; DATA XREF: LOAD:0000000000001128↑o ...
.text:000000000000CF10 var_50          = -0x50
.text:000000000000CF10 var_40          = -0x40
.text:000000000000CF10 var_30          = -0x30
.text:000000000000CF10 var_20          = -0x20
.text:000000000000CF10 var_10          = -0x10
.text:000000000000CF10 var_s0          =  0
.text:000000000000CF10 ; __unwind {
.text:000000000000CF10                 STR             X27, [SP,#-0x10+var_50]!
.text:000000000000CF14                 STP             X26, X25, [SP,#0x50+var_40]
.text:000000000000CF18                 STP             X24, X23, [SP,#0x50+var_30]
.text:000000000000CF1C                 STP             X22, X21, [SP,#0x50+var_20]
.text:000000000000CF20                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000000CF24                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000CF28                 ADD             X29, SP, #0x50
.text:000000000000CF2C                 CBZ             X1, loc_D0C4
.text:000000000000CF30                 MOV             X20, X2
.text:000000000000CF34                 MOV             X21, X1
.text:000000000000CF38                 MOV             X19, X0
.text:000000000000CF3C                 MOV             X26, XZR
.text:000000000000CF40                 ADD             X25, X0, #0x70 ; 'p'
.text:000000000000CF44                 LDRSB           W8, [X21]
.text:000000000000CF48                 TBNZ            W8, #0x1F, loc_CFD8
.text:000000000000CF4C loc_CF4C                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+C4↓j
.text:000000000000CF4C                 ADD             X22, X21, #1
.text:000000000000CF50 loc_CF50                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+6C↓j
.text:000000000000CF50                 AND             W23, W8, #0xFF
.text:000000000000CF54                 MOV             W0, W23 ; int
.text:000000000000CF58                 BL              .isspace
.text:000000000000CF5C                 CBZ             W0, loc_CF88
.text:000000000000CF60                 CBZ             X20, loc_CF78
.text:000000000000CF64                 CMP             W23, #0xA
.text:000000000000CF68                 B.NE            loc_CF78
.text:000000000000CF6C                 LDR             W8, [X20]
.text:000000000000CF70                 ADD             W8, W8, #1
.text:000000000000CF74                 STR             W8, [X20]
.text:000000000000CF78 loc_CF78                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+50↑j
.text:000000000000CF78                                         ; tinyxml2::XMLElement::ParseAttributes(char *,int *)+58↑j
.text:000000000000CF78                 LDRSB           W8, [X22],#1
.text:000000000000CF7C                 TBZ             W8, #0x1F, loc_CF50
.text:000000000000CF80                 SUB             X21, X22, #1
.text:000000000000CF84                 B               loc_CFD8
.text:000000000000CF88 ; ---------------------------------------------------------------------------
.text:000000000000CF88 loc_CF88                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+4C↑j
.text:000000000000CF88                 CBZ             W23, loc_D0E8
.text:000000000000CF8C                 MOV             W0, W23 ; int
.text:000000000000CF90                 SUB             X21, X22, #1
.text:000000000000CF94                 BL              .isalpha
.text:000000000000CF98                 CBNZ            W0, loc_CFD8
.text:000000000000CF9C                 CMP             W23, #0x3D ; '='
.text:000000000000CFA0                 B.GT            loc_CFB0
.text:000000000000CFA4                 CMP             W23, #0x3A ; ':'
.text:000000000000CFA8                 B.EQ            loc_CFD8
.text:000000000000CFAC                 B               loc_D12C
.text:000000000000CFB0 ; ---------------------------------------------------------------------------
.text:000000000000CFB0 loc_CFB0                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+90↑j
.text:000000000000CFB0                 CMP             W23, #0x5F ; '_'
.text:000000000000CFB4                 B.EQ            loc_CFD8
.text:000000000000CFB8                 B               loc_D150
.text:000000000000CFBC ; ---------------------------------------------------------------------------
.text:000000000000CFBC loc_CFBC                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+108↓j
.text:000000000000CFBC                                         ; tinyxml2::XMLElement::ParseAttributes(char *,int *)+138↓j ...
.text:000000000000CFBC                 ADD             X8, X26, #0x40 ; '@'
.text:000000000000CFC0                 CMP             X26, #0
.text:000000000000CFC4                 CSEL            X8, X25, X8, EQ
.text:000000000000CFC8                 MOV             X26, X23
.text:000000000000CFCC                 STR             X23, [X8]
.text:000000000000CFD0                 LDRSB           W8, [X21]
.text:000000000000CFD4                 TBZ             W8, #0x1F, loc_CF4C
.text:000000000000CFD8 loc_CFD8                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+38↑j
.text:000000000000CFD8                                         ; tinyxml2::XMLElement::ParseAttributes(char *,int *)+74↑j ...
.text:000000000000CFD8                 MOV             X0, X19 ; this
.text:000000000000CFDC                 BL              ._ZN8tinyxml210XMLElement15CreateAttributeEv ; tinyxml2::XMLElement::CreateAttribute(void)
.text:000000000000CFE0                 LDR             X8, [X19,#8]
.text:000000000000CFE4                 MOV             X1, X21 ; char *
.text:000000000000CFE8                 MOV             X3, X20 ; int *
.text:000000000000CFEC                 MOV             X23, X0
.text:000000000000CFF0                 LDR             W22, [X8,#0xA0]
.text:000000000000CFF4                 STR             W22, [X0,#0x38]
.text:000000000000CFF8                 LDR             X8, [X19,#8]
.text:000000000000CFFC                 LDRB            W2, [X8,#0x69] ; bool
.text:000000000000D000                 BL              ._ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi ; tinyxml2::XMLAttribute::ParseDeep(char *,bool,int *)
.text:000000000000D004                 CBZ             X0, loc_D058
.text:000000000000D008                 MOV             X21, X0
.text:000000000000D00C                 ADD             X0, X23, #8 ; this
.text:000000000000D010                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D014                 LDR             X27, [X25]
.text:000000000000D018                 CBZ             X27, loc_CFBC
.text:000000000000D01C                 MOV             X24, X0
.text:000000000000D020 loc_D020                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+134↓j
.text:000000000000D020                 ADD             X0, X27, #8 ; this
.text:000000000000D024                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D028                 CMP             X0, X24
.text:000000000000D02C                 B.EQ            loc_D04C
.text:000000000000D030                 MOV             X1, X24 ; s2
.text:000000000000D034                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000D038                 BL              .strncmp
.text:000000000000D03C                 CBZ             W0, loc_D04C
.text:000000000000D040                 LDR             X27, [X27,#0x40]
.text:000000000000D044                 CBNZ            X27, loc_D020
.text:000000000000D048                 B               loc_CFBC
.text:000000000000D04C ; ---------------------------------------------------------------------------
.text:000000000000D04C loc_D04C                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+11C↑j
.text:000000000000D04C                                         ; tinyxml2::XMLElement::ParseAttributes(char *,int *)+12C↑j
.text:000000000000D04C                 ADD             X0, X27, #0x20 ; ' ' ; this
.text:000000000000D050                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D054                 CBZ             X0, loc_CFBC
.text:000000000000D058 loc_D058                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+F4↑j
.text:000000000000D058                 CBZ             X23, loc_D084
.text:000000000000D05C                 LDR             X8, [X23]
.text:000000000000D060                 MOV             X0, X23
.text:000000000000D064                 LDR             X20, [X23,#0x48]
.text:000000000000D068                 LDR             X8, [X8]
.text:000000000000D06C                 BLR             X8
.text:000000000000D070                 LDR             X8, [X20]
.text:000000000000D074                 MOV             X0, X20
.text:000000000000D078                 MOV             X1, X23
.text:000000000000D07C                 LDR             X8, [X8,#0x20]
.text:000000000000D080                 BLR             X8
.text:000000000000D084 loc_D084                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *):loc_D058↑j
.text:000000000000D084                 LDP             X8, X20, [X19]
.text:000000000000D088                 MOV             X0, X19
.text:000000000000D08C                 LDR             X8, [X8,#0x48]
.text:000000000000D090                 BLR             X8
.text:000000000000D094                 CBZ             X0, loc_D0A0
.text:000000000000D098                 MOV             X4, XZR
.text:000000000000D09C                 B               loc_D0AC
.text:000000000000D0A0 ; ---------------------------------------------------------------------------
.text:000000000000D0A0 loc_D0A0                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+184↑j
.text:000000000000D0A0                 ADD             X0, X19, #0x18 ; this
.text:000000000000D0A4                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D0A8                 MOV             X4, X0
.text:000000000000D0AC loc_D0AC                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+18C↑j
.text:000000000000D0AC                 ADRP            X3, #aXmlelementName@PAGE ; "XMLElement name=%s"
.text:000000000000D0B0                 ADD             X3, X3, #aXmlelementName@PAGEOFF ; "XMLElement name=%s"
.text:000000000000D0B4                 MOV             X0, X20
.text:000000000000D0B8                 MOV             W1, #7
.text:000000000000D0BC                 MOV             W2, W22
.text:000000000000D0C0 loc_D0C0                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+218↓j
.text:000000000000D0C0                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000D0C4 loc_D0C4                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+1C↑j
.text:000000000000D0C4                                         ; tinyxml2::XMLElement::ParseAttributes(char *,int *)+25C↓j
.text:000000000000D0C4                 MOV             X22, XZR
.text:000000000000D0C8 loc_D0C8                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+23C↓j
.text:000000000000D0C8                                         ; tinyxml2::XMLElement::ParseAttributes(char *,int *)+244↓j
.text:000000000000D0C8                 MOV             X0, X22
.text:000000000000D0CC                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000D0D0                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000000D0D4                 LDP             X22, X21, [SP,#0x50+var_20]
.text:000000000000D0D8                 LDP             X24, X23, [SP,#0x50+var_30]
.text:000000000000D0DC                 LDP             X26, X25, [SP,#0x50+var_40]
.text:000000000000D0E0                 LDR             X27, [SP+0x50+var_50],#0x60
.text:000000000000D0E4                 RET
.text:000000000000D0E8 ; ---------------------------------------------------------------------------
.text:000000000000D0E8 loc_D0E8                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *):loc_CF88↑j
.text:000000000000D0E8                 LDP             X8, X21, [X19]
.text:000000000000D0EC                 LDR             W20, [X19,#0x30]
.text:000000000000D0F0                 MOV             X0, X19
.text:000000000000D0F4                 LDR             X8, [X8,#0x48]
.text:000000000000D0F8                 BLR             X8
.text:000000000000D0FC                 CBZ             X0, loc_D108
.text:000000000000D100                 MOV             X4, XZR
.text:000000000000D104                 B               loc_D114
.text:000000000000D108 ; ---------------------------------------------------------------------------
.text:000000000000D108 loc_D108                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+1EC↑j
.text:000000000000D108                 ADD             X0, X19, #0x18 ; this
.text:000000000000D10C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D110                 MOV             X4, X0
.text:000000000000D114 loc_D114                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+1F4↑j
.text:000000000000D114                 ADRP            X3, #aXmlelementName@PAGE ; "XMLElement name=%s"
.text:000000000000D118                 ADD             X3, X3, #aXmlelementName@PAGEOFF ; "XMLElement name=%s"
.text:000000000000D11C                 MOV             X0, X21
.text:000000000000D120                 MOV             W1, #6
.text:000000000000D124                 MOV             W2, W20
.text:000000000000D128                 B               loc_D0C0
.text:000000000000D12C ; ---------------------------------------------------------------------------
.text:000000000000D12C loc_D12C                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+9C↑j
.text:000000000000D12C                 CMP             W23, #0x2F ; '/'
.text:000000000000D130                 B.NE            loc_D158
.text:000000000000D134                 LDRB            W8, [X22]
.text:000000000000D138                 CMP             W8, #0x3E ; '>'
.text:000000000000D13C                 B.NE            loc_D158
.text:000000000000D140                 MOV             W8, #1
.text:000000000000D144                 ADD             X22, X22, #1
.text:000000000000D148                 STR             W8, [X19,#0x68]
.text:000000000000D14C                 B               loc_D0C8
.text:000000000000D150 ; ---------------------------------------------------------------------------
.text:000000000000D150 loc_D150                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+A8↑j
.text:000000000000D150                 CMP             W23, #0x3E ; '>'
.text:000000000000D154                 B.EQ            loc_D0C8
.text:000000000000D158 loc_D158                                ; CODE XREF: tinyxml2::XMLElement::ParseAttributes(char *,int *)+220↑j
.text:000000000000D158                                         ; tinyxml2::XMLElement::ParseAttributes(char *,int *)+22C↑j
.text:000000000000D158                 LDR             X0, [X19,#8]
.text:000000000000D15C                 MOV             W1, #6
.text:000000000000D160                 LDR             W2, [X19,#0x30]
.text:000000000000D164                 MOV             X3, XZR
.text:000000000000D168                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000D16C                 B               loc_D0C4
.text:000000000000D16C ; } // starts at CF10
.text:000000000000D16C ; End of function tinyxml2::XMLElement::ParseAttributes(char *,int *)
.text:000000000000D170 ; ---------------------------------------------------------------------------
.text:000000000000D170 ; __unwind {
.text:000000000000D170                 STP             X20, X19, [SP,#-0x20]!
.text:000000000000D174                 STP             X29, X30, [SP,#0x10]
.text:000000000000D178                 ADD             X29, SP, #0x10
.text:000000000000D17C                 LDR             X20, [X0,#0x68]
.text:000000000000D180                 MOV             X19, X0
.text:000000000000D184                 CBNZ            X20, loc_D1D0
.text:000000000000D188                 MOV             W0, #0xFF0
.text:000000000000D18C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000000D190                 MOV             W1, WZR
.text:000000000000D194                 MOV             W2, #0xFF0
.text:000000000000D198                 MOV             X20, X0
.text:000000000000D19C                 BL              .memset
.text:000000000000D1A0                 ADD             X0, X19, #8
.text:000000000000D1A4                 MOV             X1, X20
.text:000000000000D1A8                 BL              sub_FF18
.text:000000000000D1AC                 MOV             X8, XZR
.text:000000000000D1B0 loc_D1B0                                ; CODE XREF: .text:000000000000D1C4↓j
.text:000000000000D1B0                 ADD             X9, X20, X8
.text:000000000000D1B4                 ADD             X10, X9, #0x50 ; 'P'
.text:000000000000D1B8                 ADD             X8, X8, #0x50 ; 'P'
.text:000000000000D1BC                 CMP             X8, #0xFA0
.text:000000000000D1C0                 STR             X10, [X9]
.text:000000000000D1C4                 B.NE            loc_D1B0
.text:000000000000D1C8                 STR             XZR, [X20,#0xFA0]
.text:000000000000D1CC                 STR             X20, [X19,#0x68]
.text:000000000000D1D0 loc_D1D0                                ; CODE XREF: .text:000000000000D184↑j
.text:000000000000D1D0                 LDR             W9, [X19,#0x70]
.text:000000000000D1D4                 LDR             W11, [X19,#0x78]
.text:000000000000D1D8                 LDR             X10, [X20]
.text:000000000000D1DC                 ADD             W8, W9, #1
.text:000000000000D1E0                 CMP             W9, W11
.text:000000000000D1E4                 STR             X10, [X19,#0x68]
.text:000000000000D1E8                 STR             W8, [X19,#0x70]
.text:000000000000D1EC                 B.LT            loc_D1F4
.text:000000000000D1F0                 STR             W8, [X19,#0x78]
.text:000000000000D1F4 loc_D1F4                                ; CODE XREF: .text:000000000000D1EC↑j
.text:000000000000D1F4                 LDR             W8, [X19,#0x74]
.text:000000000000D1F8                 MOV             X0, X20
.text:000000000000D1FC                 LDR             W9, [X19,#0x7C]
.text:000000000000D200                 ADD             W8, W8, #1
.text:000000000000D204                 ADD             W9, W9, #1
.text:000000000000D208                 STR             W8, [X19,#0x74]
.text:000000000000D20C                 STR             W9, [X19,#0x7C]
.text:000000000000D210                 LDP             X29, X30, [SP,#0x10]
.text:000000000000D214                 LDP             X20, X19, [SP],#0x20
.text:000000000000D218                 RET
.text:000000000000D218 ; } // starts at D170
.text:000000000000D218 ; ---------------------------------------------------------------------------
.text:000000000000D21C                 ALIGN 0x20
.text:000000000000D220 ; =============== S U B R O U T I N E =======================================
.text:000000000000D220 ; Attributes: bp-based frame
.text:000000000000D220 ; _QWORD __fastcall tinyxml2::XMLElement::ParseDeep(tinyxml2::XMLElement *__hidden this, char *, tinyxml2::StrPair *, int *)
.text:000000000000D220                 EXPORT _ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000D220 _ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi
.text:000000000000D220                                         ; DATA XREF: LOAD:00000000000008E8↑o
.text:000000000000D220                                         ; .data.rel.ro:0000000000012378↓o
.text:000000000000D220 var_30          = -0x30
.text:000000000000D220 var_20          = -0x20
.text:000000000000D220 var_10          = -0x10
.text:000000000000D220 var_s0          =  0
.text:000000000000D220 ; __unwind {
.text:000000000000D220                 STP             X24, X23, [SP,#-0x10+var_30]!
.text:000000000000D224                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000D228                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000D22C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000D230                 ADD             X29, SP, #0x30
.text:000000000000D234                 LDRSB           W24, [X1]
.text:000000000000D238                 MOV             X19, X3
.text:000000000000D23C                 MOV             X22, X1
.text:000000000000D240                 MOV             X20, X2
.text:000000000000D244                 MOV             X21, X0
.text:000000000000D248                 TBNZ            W24, #0x1F, loc_D2A0
.text:000000000000D24C                 ADD             X22, X22, #1
.text:000000000000D250 loc_D250                                ; CODE XREF: tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+60↓j
.text:000000000000D250                 AND             W23, W24, #0xFF
.text:000000000000D254                 MOV             W0, W23 ; int
.text:000000000000D258                 BL              .isspace
.text:000000000000D25C                 CBZ             W0, loc_D288
.text:000000000000D260                 CBZ             X19, loc_D27C
.text:000000000000D264                 AND             W8, W24, #0xFF
.text:000000000000D268                 CMP             W8, #0xA
.text:000000000000D26C                 B.NE            loc_D27C
.text:000000000000D270                 LDR             W8, [X19]
.text:000000000000D274                 ADD             W8, W8, #1
.text:000000000000D278                 STR             W8, [X19]
.text:000000000000D27C loc_D27C                                ; CODE XREF: tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+40↑j
.text:000000000000D27C                                         ; tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+4C↑j
.text:000000000000D27C                 LDRSB           W24, [X22],#1
.text:000000000000D280                 TBZ             W24, #0x1F, loc_D250
.text:000000000000D284                 B               loc_D29C
.text:000000000000D288 ; ---------------------------------------------------------------------------
.text:000000000000D288 loc_D288                                ; CODE XREF: tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+3C↑j
.text:000000000000D288                 CMP             W23, #0x2F ; '/'
.text:000000000000D28C                 B.NE            loc_D29C
.text:000000000000D290                 MOV             W8, #2
.text:000000000000D294                 STR             W8, [X21,#0x68]
.text:000000000000D298                 B               loc_D2A0
.text:000000000000D29C ; ---------------------------------------------------------------------------
.text:000000000000D29C loc_D29C                                ; CODE XREF: tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+64↑j
.text:000000000000D29C                                         ; tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+6C↑j
.text:000000000000D29C                 SUB             X22, X22, #1
.text:000000000000D2A0 loc_D2A0                                ; CODE XREF: tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+28↑j
.text:000000000000D2A0                                         ; tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+78↑j
.text:000000000000D2A0                 ADD             X0, X21, #0x18 ; this
.text:000000000000D2A4                 MOV             X1, X22 ; char *
.text:000000000000D2A8                 BL              ._ZN8tinyxml27StrPair9ParseNameEPc ; tinyxml2::StrPair::ParseName(char *)
.text:000000000000D2AC                 LDP             X8, X9, [X21,#0x20]
.text:000000000000D2B0                 CMP             X8, X9
.text:000000000000D2B4                 B.EQ            loc_D300
.text:000000000000D2B8                 MOV             X1, X0  ; char *
.text:000000000000D2BC                 MOV             X0, X21 ; this
.text:000000000000D2C0                 MOV             X2, X19 ; int *
.text:000000000000D2C4                 BL              ._ZN8tinyxml210XMLElement15ParseAttributesEPcPi ; tinyxml2::XMLElement::ParseAttributes(char *,int *)
.text:000000000000D2C8                 MOV             X1, X0  ; char *
.text:000000000000D2CC                 CBZ             X0, loc_D304
.text:000000000000D2D0                 LDRB            W8, [X1]
.text:000000000000D2D4                 CBZ             W8, loc_D304
.text:000000000000D2D8                 LDR             W8, [X21,#0x68]
.text:000000000000D2DC                 CBNZ            W8, loc_D304
.text:000000000000D2E0                 MOV             X0, X21 ; this
.text:000000000000D2E4                 MOV             X2, X20 ; tinyxml2::StrPair *
.text:000000000000D2E8                 MOV             X3, X19 ; int *
.text:000000000000D2EC                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000D2F0                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000D2F4                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000D2F8                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:000000000000D2FC                 B               ._ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi ; tinyxml2::XMLNode::ParseDeep(char *,tinyxml2::StrPair *,int *)
.text:000000000000D300 ; ---------------------------------------------------------------------------
.text:000000000000D300 loc_D300                                ; CODE XREF: tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+94↑j
.text:000000000000D300                 MOV             X1, XZR
.text:000000000000D304 loc_D304                                ; CODE XREF: tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+AC↑j
.text:000000000000D304                                         ; tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)+B4↑j ...
.text:000000000000D304                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000D308                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000D30C                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000D310                 MOV             X0, X1
.text:000000000000D314                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:000000000000D318                 RET
.text:000000000000D318 ; } // starts at D220
.text:000000000000D318 ; End of function tinyxml2::XMLElement::ParseDeep(char *,tinyxml2::StrPair *,int *)
.text:000000000000D318 ; ---------------------------------------------------------------------------
.text:000000000000D31C                 ALIGN 0x20
.text:000000000000D320 ; =============== S U B R O U T I N E =======================================
.text:000000000000D320 ; Attributes: bp-based frame
.text:000000000000D320 ; __int64 __fastcall tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLElement *__hidden this, tinyxml2::XMLDocument *)
.text:000000000000D320                 EXPORT _ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000D320 _ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE
.text:000000000000D320                                         ; DATA XREF: LOAD:0000000000001068↑o
.text:000000000000D320                                         ; .data.rel.ro:0000000000012350↓o
.text:000000000000D320 var_20          = -0x20
.text:000000000000D320 var_10          = -0x10
.text:000000000000D320 var_s0          =  0
.text:000000000000D320 ; __unwind {
.text:000000000000D320                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000D324                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D328                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D32C                 ADD             X29, SP, #0x20
.text:000000000000D330                 MOV             X20, X1
.text:000000000000D334                 MOV             X19, X0
.text:000000000000D338                 CBNZ            X1, loc_D340
.text:000000000000D33C                 LDR             X20, [X19,#8]
.text:000000000000D340 loc_D340                                ; CODE XREF: tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLDocument *)+18↑j
.text:000000000000D340                 LDR             X8, [X19]
.text:000000000000D344                 MOV             X0, X19
.text:000000000000D348                 LDR             X8, [X8,#0x48]
.text:000000000000D34C                 BLR             X8
.text:000000000000D350                 CBZ             X0, loc_D35C
.text:000000000000D354                 MOV             X1, XZR
.text:000000000000D358                 B               loc_D368
.text:000000000000D35C ; ---------------------------------------------------------------------------
.text:000000000000D35C loc_D35C                                ; CODE XREF: tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLDocument *)+30↑j
.text:000000000000D35C                 ADD             X0, X19, #0x18 ; this
.text:000000000000D360                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D364                 MOV             X1, X0  ; char *
.text:000000000000D368 loc_D368                                ; CODE XREF: tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLDocument *)+38↑j
.text:000000000000D368                 MOV             X0, X20 ; this
.text:000000000000D36C                 BL              ._ZN8tinyxml211XMLDocument10NewElementEPKc ; tinyxml2::XMLDocument::NewElement(char const*)
.text:000000000000D370                 LDR             X21, [X19,#0x70]
.text:000000000000D374                 MOV             X19, X0
.text:000000000000D378                 CBZ             X21, loc_D3A8
.text:000000000000D37C loc_D37C                                ; CODE XREF: tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLDocument *)+84↓j
.text:000000000000D37C                 ADD             X0, X21, #8 ; this
.text:000000000000D380                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D384                 MOV             X20, X0
.text:000000000000D388                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000D38C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D390                 MOV             X2, X0
.text:000000000000D394                 MOV             X0, X19 ; this
.text:000000000000D398                 MOV             X1, X20
.text:000000000000D39C                 BL              sub_D4E0
.text:000000000000D3A0                 LDR             X21, [X21,#0x40]
.text:000000000000D3A4                 CBNZ            X21, loc_D37C
.text:000000000000D3A8 loc_D3A8                                ; CODE XREF: tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLDocument *)+58↑j
.text:000000000000D3A8                 MOV             X0, X19
.text:000000000000D3AC                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D3B0                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D3B4                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000D3B8                 RET
.text:000000000000D3B8 ; } // starts at D320
.text:000000000000D3B8 ; End of function tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLDocument *)
.text:000000000000D3B8 ; ---------------------------------------------------------------------------
.text:000000000000D3BC                 ALIGN 0x20
.text:000000000000D3C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D3C0 ; Attributes: bp-based frame
.text:000000000000D3C0 ; __int64 __fastcall tinyxml2::XMLDocument::NewElement(tinyxml2::XMLDocument *__hidden this, const char *)
.text:000000000000D3C0                 EXPORT _ZN8tinyxml211XMLDocument10NewElementEPKc
.text:000000000000D3C0 _ZN8tinyxml211XMLDocument10NewElementEPKc
.text:000000000000D3C0                                         ; CODE XREF: tinyxml2::XMLDocument::NewElement(char const*)+C↓j
.text:000000000000D3C0                                         ; DATA XREF: LOAD:0000000000000900↑o ...
.text:000000000000D3C0 var_40          = -0x40
.text:000000000000D3C0 var_30          = -0x30
.text:000000000000D3C0 var_20          = -0x20
.text:000000000000D3C0 var_10          = -0x10
.text:000000000000D3C0 var_s0          =  0
.text:000000000000D3C0 ; __unwind {
.text:000000000000D3C0                 STR             X25, [SP,#-0x10+var_40]!
.text:000000000000D3C4                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000000D3C8                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000000D3CC                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000000D3D0                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000D3D4                 ADD             X29, SP, #0x40
.text:000000000000D3D8                 LDR             X8, [X0,#0x108]
.text:000000000000D3DC                 ADD             X23, X0, #0x108
.text:000000000000D3E0                 MOV             X21, X0
.text:000000000000D3E4                 MOV             X0, X23
.text:000000000000D3E8                 MOV             X19, X1
.text:000000000000D3EC                 LDR             X8, [X8,#0x18]
.text:000000000000D3F0                 BLR             X8
.text:000000000000D3F4                 ADRP            X8, #_ZTVN8tinyxml210XMLElementE_ptr@PAGE
.text:000000000000D3F8                 MOVI            V0.2D, #0
.text:000000000000D3FC                 MOV             X22, X0
.text:000000000000D400                 MOV             X20, X0
.text:000000000000D404                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLElementE_ptr@PAGEOFF]
.text:000000000000D408                 STP             X21, XZR, [X0,#8]
.text:000000000000D40C                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000D410                 STR             WZR, [X0,#0x30]
.text:000000000000D414                 ADD             X8, X8, #0x10
.text:000000000000D418                 STR             WZR, [X22,#0x18]!
.text:000000000000D41C                 STUR            Q0, [X0,#0x48]
.text:000000000000D420                 STR             X8, [X0]
.text:000000000000D424                 STUR            Q0, [X0,#0x38]
.text:000000000000D428                 STR             WZR, [X0,#0x68]
.text:000000000000D42C                 STR             XZR, [X0,#0x70]
.text:000000000000D430                 STP             XZR, X23, [X0,#0x58]
.text:000000000000D434                 LDR             W8, [X21,#0x104]
.text:000000000000D438                 LDR             W9, [X21,#0x100]
.text:000000000000D43C                 CMP             W9, W8
.text:000000000000D440                 B.LE            loc_D44C
.text:000000000000D444                 LDR             X23, [X21,#0xA8]
.text:000000000000D448                 B               loc_D4A0
.text:000000000000D44C ; ---------------------------------------------------------------------------
.text:000000000000D44C loc_D44C                                ; CODE XREF: tinyxml2::XMLDocument::NewElement(char const*)+80↑j
.text:000000000000D44C                 LSL             W9, W8, #1
.text:000000000000D450                 ADD             W24, W9, #2
.text:000000000000D454                 SXTW            X9, W24
.text:000000000000D458                 CMP             XZR, X9,LSR#61
.text:000000000000D45C                 SBFIZ           X10, X24, #3, #0x20 ; ' '
.text:000000000000D460                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000D464                 SXTW            X25, W8
.text:000000000000D468                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000D46C                 LDR             X1, [X21,#0xA8] ; src
.text:000000000000D470                 LSL             X2, X25, #3 ; n
.text:000000000000D474                 MOV             X23, X0
.text:000000000000D478                 BL              .memcpy
.text:000000000000D47C                 LDR             X0, [X21,#0xA8] ; void *
.text:000000000000D480                 ADD             X8, X21, #0xB0
.text:000000000000D484                 CMP             X0, X8
.text:000000000000D488                 B.EQ            loc_D494
.text:000000000000D48C                 CBZ             X0, loc_D494
.text:000000000000D490                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000D494 loc_D494                                ; CODE XREF: tinyxml2::XMLDocument::NewElement(char const*)+C8↑j
.text:000000000000D494                                         ; tinyxml2::XMLDocument::NewElement(char const*)+CC↑j
.text:000000000000D494                 LDR             W8, [X21,#0x104]
.text:000000000000D498                 STR             X23, [X21,#0xA8]
.text:000000000000D49C                 STR             W24, [X21,#0x100]
.text:000000000000D4A0 loc_D4A0                                ; CODE XREF: tinyxml2::XMLDocument::NewElement(char const*)+88↑j
.text:000000000000D4A0                 STR             X20, [X23,W8,SXTW#3]
.text:000000000000D4A4                 MOV             X0, X22 ; this
.text:000000000000D4A8                 LDR             W8, [X21,#0x104]
.text:000000000000D4AC                 MOV             X1, X19 ; char *
.text:000000000000D4B0                 MOV             W2, WZR ; int
.text:000000000000D4B4                 ADD             W8, W8, #1
.text:000000000000D4B8                 STR             W8, [X21,#0x104]
.text:000000000000D4BC                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000D4C0                 MOV             X0, X20
.text:000000000000D4C4                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000000D4C8                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000000D4CC                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000000D4D0                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000000D4D4                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000000D4D8                 RET
.text:000000000000D4D8 ; } // starts at D3C0
.text:000000000000D4D8 ; End of function tinyxml2::XMLDocument::NewElement(char const*)
.text:000000000000D4D8 ; ---------------------------------------------------------------------------
.text:000000000000D4DC                 ALIGN 0x20
.text:000000000000D4E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D4E0 ; Attributes: bp-based frame
.text:000000000000D4E0 ; __int64 __fastcall sub_D4E0(tinyxml2::XMLElement *this)
.text:000000000000D4E0 sub_D4E0                                ; CODE XREF: tinyxml2::XMLElement::ShallowClone(tinyxml2::XMLDocument *)+7C↑p
.text:000000000000D4E0 var_20          = -0x20
.text:000000000000D4E0 var_10          = -0x10
.text:000000000000D4E0 var_s0          =  0
.text:000000000000D4E0 ; __unwind {
.text:000000000000D4E0                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000D4E4                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D4E8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D4EC                 ADD             X29, SP, #0x20
.text:000000000000D4F0                 LDR             X8, [X0,#0x70]
.text:000000000000D4F4                 MOV             X19, X2
.text:000000000000D4F8                 MOV             X22, X0
.text:000000000000D4FC                 MOV             X20, X1
.text:000000000000D500                 CBZ             X8, loc_D544
.text:000000000000D504 loc_D504                                ; CODE XREF: sub_D4E0+4C↓j
.text:000000000000D504                 ADD             X0, X8, #8 ; this
.text:000000000000D508                 MOV             X21, X8
.text:000000000000D50C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D510                 CMP             X0, X20
.text:000000000000D514                 B.EQ            loc_D564
.text:000000000000D518                 MOV             X1, X20 ; s2
.text:000000000000D51C                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000D520                 BL              .strncmp
.text:000000000000D524                 CBZ             W0, loc_D564
.text:000000000000D528                 LDR             X8, [X21,#0x40]
.text:000000000000D52C                 CBNZ            X8, loc_D504
.text:000000000000D530                 MOV             X0, X22 ; this
.text:000000000000D534                 BL              ._ZN8tinyxml210XMLElement15CreateAttributeEv ; tinyxml2::XMLElement::CreateAttribute(void)
.text:000000000000D538                 STR             X0, [X21,#0x40]
.text:000000000000D53C                 MOV             X21, X0
.text:000000000000D540                 B               loc_D554
.text:000000000000D544 ; ---------------------------------------------------------------------------
.text:000000000000D544 loc_D544                                ; CODE XREF: sub_D4E0+20↑j
.text:000000000000D544                 MOV             X0, X22 ; this
.text:000000000000D548                 BL              ._ZN8tinyxml210XMLElement15CreateAttributeEv ; tinyxml2::XMLElement::CreateAttribute(void)
.text:000000000000D54C                 MOV             X21, X0
.text:000000000000D550                 STR             X0, [X22,#0x70]
.text:000000000000D554 loc_D554                                ; CODE XREF: sub_D4E0+60↑j
.text:000000000000D554                 ADD             X0, X21, #8 ; this
.text:000000000000D558                 MOV             X1, X20 ; char *
.text:000000000000D55C                 MOV             W2, WZR ; int
.text:000000000000D560                 BL              ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000D564 loc_D564                                ; CODE XREF: sub_D4E0+34↑j
.text:000000000000D564                                         ; sub_D4E0+44↑j
.text:000000000000D564                 MOV             X1, X19 ; char *
.text:000000000000D568                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D56C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D570                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000D574                 MOV             W2, WZR ; int
.text:000000000000D578                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:000000000000D57C                 B               ._ZN8tinyxml27StrPair6SetStrEPKci ; tinyxml2::StrPair::SetStr(char const*,int)
.text:000000000000D57C ; } // starts at D4E0
.text:000000000000D57C ; End of function sub_D4E0
.text:000000000000D580 ; =============== S U B R O U T I N E =======================================
.text:000000000000D580 ; Attributes: bp-based frame
.text:000000000000D580 ; __int64 __fastcall tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLElement *__hidden this, const tinyxml2::XMLNode *)
.text:000000000000D580                 EXPORT _ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000D580 _ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE
.text:000000000000D580                                         ; DATA XREF: LOAD:0000000000001320↑o
.text:000000000000D580                                         ; .data.rel.ro:0000000000012358↓o
.text:000000000000D580 var_20          = -0x20
.text:000000000000D580 var_10          = -0x10
.text:000000000000D580 var_s0          =  0
.text:000000000000D580 ; __unwind {
.text:000000000000D580                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000D584                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D588                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D58C                 ADD             X29, SP, #0x20
.text:000000000000D590                 LDR             X8, [X1]
.text:000000000000D594                 MOV             X19, X0
.text:000000000000D598                 MOV             X0, X1
.text:000000000000D59C                 LDR             X8, [X8,#0x30]
.text:000000000000D5A0                 BLR             X8
.text:000000000000D5A4                 CBZ             X0, loc_D698
.text:000000000000D5A8                 LDR             X8, [X0]
.text:000000000000D5AC                 MOV             X20, X0
.text:000000000000D5B0                 LDR             X8, [X8,#0x48]
.text:000000000000D5B4                 BLR             X8
.text:000000000000D5B8                 CBZ             X0, loc_D5C4
.text:000000000000D5BC                 MOV             X21, XZR
.text:000000000000D5C0                 B               loc_D5D0
.text:000000000000D5C4 ; ---------------------------------------------------------------------------
.text:000000000000D5C4 loc_D5C4                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+38↑j
.text:000000000000D5C4                 ADD             X0, X20, #0x18 ; this
.text:000000000000D5C8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D5CC                 MOV             X21, X0
.text:000000000000D5D0 loc_D5D0                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+40↑j
.text:000000000000D5D0                 LDR             X8, [X19]
.text:000000000000D5D4                 MOV             X0, X19
.text:000000000000D5D8                 LDR             X8, [X8,#0x48]
.text:000000000000D5DC                 BLR             X8
.text:000000000000D5E0                 CBZ             X0, loc_D5F4
.text:000000000000D5E4                 MOV             X1, XZR
.text:000000000000D5E8                 CMP             X21, X1
.text:000000000000D5EC                 B.NE            loc_D608
.text:000000000000D5F0                 B               loc_D618
.text:000000000000D5F4 ; ---------------------------------------------------------------------------
.text:000000000000D5F4 loc_D5F4                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+60↑j
.text:000000000000D5F4                 ADD             X0, X19, #0x18 ; this
.text:000000000000D5F8                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D5FC                 MOV             X1, X0  ; s2
.text:000000000000D600                 CMP             X21, X1
.text:000000000000D604                 B.EQ            loc_D618
.text:000000000000D608 loc_D608                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+6C↑j
.text:000000000000D608                 MOV             X0, X21 ; s1
.text:000000000000D60C                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000D610                 BL              .strncmp
.text:000000000000D614                 CBNZ            W0, loc_D694
.text:000000000000D618 loc_D618                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+70↑j
.text:000000000000D618                                         ; tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+84↑j
.text:000000000000D618                 LDR             X21, [X19,#0x70]
.text:000000000000D61C                 LDR             X20, [X20,#0x70]
.text:000000000000D620                 CMP             X21, #0
.text:000000000000D624                 CSET            W8, NE
.text:000000000000D628                 CMP             X20, #0
.text:000000000000D62C                 CSET            W9, NE
.text:000000000000D630                 CBZ             X20, loc_D688
.text:000000000000D634                 CBZ             X21, loc_D688
.text:000000000000D638 loc_D638                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+104↓j
.text:000000000000D638                 ADD             X0, X21, #0x20 ; ' ' ; this
.text:000000000000D63C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D640                 MOV             X19, X0
.text:000000000000D644                 ADD             X0, X20, #0x20 ; ' ' ; this
.text:000000000000D648                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000D64C                 CMP             X19, X0
.text:000000000000D650                 B.EQ            loc_D668
.text:000000000000D654                 MOV             X1, X0  ; s2
.text:000000000000D658                 MOV             X0, X19 ; s1
.text:000000000000D65C                 MOV             W2, #0x7FFFFFFF ; n
.text:000000000000D660                 BL              .strncmp
.text:000000000000D664                 CBNZ            W0, loc_D694
.text:000000000000D668 loc_D668                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+D0↑j
.text:000000000000D668                 LDR             X21, [X21,#0x40]
.text:000000000000D66C                 LDR             X20, [X20,#0x40]
.text:000000000000D670                 CMP             X21, #0
.text:000000000000D674                 CSET            W8, NE
.text:000000000000D678                 CMP             X20, #0
.text:000000000000D67C                 CSET            W9, NE
.text:000000000000D680                 CBZ             X20, loc_D688
.text:000000000000D684                 CBNZ            X21, loc_D638
.text:000000000000D688 loc_D688                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+B0↑j
.text:000000000000D688                                         ; tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+B4↑j ...
.text:000000000000D688                 ORR             W8, W9, W8
.text:000000000000D68C                 EOR             W0, W8, #1
.text:000000000000D690                 B               loc_D698
.text:000000000000D694 ; ---------------------------------------------------------------------------
.text:000000000000D694 loc_D694                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+94↑j
.text:000000000000D694                                         ; tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+E4↑j
.text:000000000000D694                 MOV             W0, WZR
.text:000000000000D698 loc_D698                                ; CODE XREF: tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+24↑j
.text:000000000000D698                                         ; tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)+110↑j
.text:000000000000D698                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D69C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D6A0                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000D6A4                 RET
.text:000000000000D6A4 ; } // starts at D580
.text:000000000000D6A4 ; End of function tinyxml2::XMLElement::ShallowEqual(tinyxml2::XMLNode const*)
.text:000000000000D6A8 ; =============== S U B R O U T I N E =======================================
.text:000000000000D6A8 ; Attributes: bp-based frame
.text:000000000000D6A8 ; tinyxml2::XMLElement::Accept(tinyxml2::XMLVisitor *)const
.text:000000000000D6A8                 EXPORT _ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE
.text:000000000000D6A8 _ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE
.text:000000000000D6A8                                         ; DATA XREF: LOAD:00000000000013F8↑o
.text:000000000000D6A8                                         ; .data.rel.ro:0000000000012360↓o
.text:000000000000D6A8 var_20          = -0x20
.text:000000000000D6A8 var_10          = -0x10
.text:000000000000D6A8 var_s0          =  0
.text:000000000000D6A8 ; __unwind {
.text:000000000000D6A8                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000D6AC                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D6B0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D6B4                 ADD             X29, SP, #0x20
.text:000000000000D6B8                 LDR             X8, [X1]
.text:000000000000D6BC                 MOV             X19, X0
.text:000000000000D6C0                 LDR             X2, [X0,#0x70]
.text:000000000000D6C4                 MOV             X20, X1
.text:000000000000D6C8                 MOV             X0, X1
.text:000000000000D6CC                 MOV             X1, X19
.text:000000000000D6D0                 LDR             X8, [X8,#0x20]
.text:000000000000D6D4                 BLR             X8
.text:000000000000D6D8                 TBZ             W0, #0, loc_D704
.text:000000000000D6DC                 LDR             X21, [X19,#0x38]
.text:000000000000D6E0                 CBZ             X21, loc_D704
.text:000000000000D6E4 loc_D6E4                                ; CODE XREF: tinyxml2::XMLElement::Accept(tinyxml2::XMLVisitor *)+58↓j
.text:000000000000D6E4                 LDR             X8, [X21]
.text:000000000000D6E8                 MOV             X0, X21
.text:000000000000D6EC                 MOV             X1, X20
.text:000000000000D6F0                 LDR             X8, [X8,#0x70]
.text:000000000000D6F4                 BLR             X8
.text:000000000000D6F8                 TBZ             W0, #0, loc_D704
.text:000000000000D6FC                 LDR             X21, [X21,#0x50]
.text:000000000000D700                 CBNZ            X21, loc_D6E4
.text:000000000000D704 loc_D704                                ; CODE XREF: tinyxml2::XMLElement::Accept(tinyxml2::XMLVisitor *)+30↑j
.text:000000000000D704                                         ; tinyxml2::XMLElement::Accept(tinyxml2::XMLVisitor *)+38↑j ...
.text:000000000000D704                 LDR             X8, [X20]
.text:000000000000D708                 MOV             X0, X20
.text:000000000000D70C                 MOV             X1, X19
.text:000000000000D710                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000D714                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000D718                 LDR             X2, [X8,#0x28]
.text:000000000000D71C                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000D720                 BR              X2
.text:000000000000D720 ; } // starts at D6A8
.text:000000000000D720 ; End of function tinyxml2::XMLElement::Accept(tinyxml2::XMLVisitor *)
.text:000000000000D720 ; ---------------------------------------------------------------------------
.text:000000000000D724                 ALIGN 8
.text:000000000000D728 ; =============== S U B R O U T I N E =======================================
.text:000000000000D728 ; tinyxml2::XMLDocument::XMLDocument(bool, tinyxml2::Whitespace)
.text:000000000000D728                 EXPORT _ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE
.text:000000000000D728 _ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE
.text:000000000000D728                                         ; DATA XREF: LOAD:0000000000000870↑o
.text:000000000000D728                                         ; LOAD:00000000000010C8↑o
.text:000000000000D728 ; __unwind {
.text:000000000000D728                 ADRP            X8, #_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGE ; Alternative name is 'tinyxml2::XMLDocument::XMLDocument(bool, tinyxml2::Whitespace)'
.text:000000000000D72C                 MOVI            V0.2D, #0
.text:000000000000D730                 AND             W9, W1, #1
.text:000000000000D734                 ADRP            X11, #_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGE
.text:000000000000D738                 LDR             X8, [X8,#_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGEOFF]
.text:000000000000D73C                 ADRP            X10, #qword_4E80@PAGE
.text:000000000000D740                 STRB            W9, [X0,#0x69]
.text:000000000000D744                 ADD             X9, X0, #0xB0
.text:000000000000D748                 STP             XZR, XZR, [X0,#0x20]
.text:000000000000D74C                 STR             WZR, [X0,#0x30]
.text:000000000000D750                 ADD             X8, X8, #0x10
.text:000000000000D754                 STR             X9, [X0,#0xA8]
.text:000000000000D758                 ADD             X9, X0, #0x118
.text:000000000000D75C                 STUR            Q0, [X0,#0x58]
.text:000000000000D760                 STUR            Q0, [X0,#0x48]
.text:000000000000D764                 STUR            Q0, [X0,#0x38]
.text:000000000000D768                 STR             WZR, [X0,#0x18]
.text:000000000000D76C                 STP             WZR, W2, [X0,#0x6C]
.text:000000000000D770                 LDR             X11, [X11,#_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGEOFF]
.text:000000000000D774                 LDR             D0, [X10,#qword_4E80@PAGEOFF]
.text:000000000000D778                 ADD             X10, X0, #0x174
.text:000000000000D77C                 STP             X8, X9, [X0,#0x108]
.text:000000000000D780                 ADD             X8, X0, #0x16C
.text:000000000000D784                 ADD             X9, X0, #0x17C
.text:000000000000D788                 STR             XZR, [X10]
.text:000000000000D78C                 ADD             X10, X11, #0x10
.text:000000000000D790                 STR             XZR, [X0,#0x10]
.text:000000000000D794                 STR             XZR, [X8]
.text:000000000000D798                 ADD             X8, X0, #0x198
.text:000000000000D79C                 STR             XZR, [X9]
.text:000000000000D7A0                 ADD             X9, X0, #0x1F4
.text:000000000000D7A4                 STP             X10, X8, [X0,#0x188]
.text:000000000000D7A8                 ADRP            X10, #_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGE
.text:000000000000D7AC                 ADD             X8, X0, #0x1EC
.text:000000000000D7B0                 LDR             X10, [X10,#_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGEOFF]
.text:000000000000D7B4                 STR             XZR, [X9]
.text:000000000000D7B8                 ADRP            X9, #_ZTVN8tinyxml211XMLDocumentE_ptr@PAGE
.text:000000000000D7BC                 LDR             X9, [X9,#_ZTVN8tinyxml211XMLDocumentE_ptr@PAGEOFF]
.text:000000000000D7C0                 ADD             X10, X10, #0x10
.text:000000000000D7C4                 STR             XZR, [X8]
.text:000000000000D7C8                 ADD             X8, X0, #0x1FC
.text:000000000000D7CC                 STRB            WZR, [X0,#0x68]
.text:000000000000D7D0                 STR             WZR, [X0,#0x78]
.text:000000000000D7D4                 STR             XZR, [X8]
.text:000000000000D7D8                 ADD             X8, X0, #0x218
.text:000000000000D7DC                 STR             X10, [X0,#0x208]
.text:000000000000D7E0                 ADD             X10, X0, #0x274
.text:000000000000D7E4                 STP             XZR, XZR, [X0,#0x80]
.text:000000000000D7E8                 ADD             X9, X9, #0x10
.text:000000000000D7EC                 STR             X8, [X0,#0x210]
.text:000000000000D7F0                 ADD             X8, X0, #0x26C
.text:000000000000D7F4                 STR             XZR, [X10]
.text:000000000000D7F8                 ADD             X10, X0, #0x27C
.text:000000000000D7FC                 STR             WZR, [X0,#0x90]
.text:000000000000D800                 STR             XZR, [X8]
.text:000000000000D804                 ADRP            X8, #_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGE
.text:000000000000D808                 STR             XZR, [X10]
.text:000000000000D80C                 MOV             W10, #0xA
.text:000000000000D810                 LDR             X8, [X8,#_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGEOFF]
.text:000000000000D814                 STP             XZR, XZR, [X0,#0x98]
.text:000000000000D818                 STR             D0, [X0,#0x100]
.text:000000000000D81C                 STR             W10, [X0,#0x168]
.text:000000000000D820                 ADD             X8, X8, #0x10
.text:000000000000D824                 STR             WZR, [X0,#0x184]
.text:000000000000D828                 STR             W10, [X0,#0x1E8]
.text:000000000000D82C                 STR             WZR, [X0,#0x204]
.text:000000000000D830                 STR             X8, [X0,#0x288]
.text:000000000000D834                 ADD             X8, X0, #0x298
.text:000000000000D838                 STR             W10, [X0,#0x268]
.text:000000000000D83C                 STR             W10, [X0,#0x2E8]
.text:000000000000D840                 ADD             X10, X0, #0x2EC
.text:000000000000D844                 STR             X8, [X0,#0x290]
.text:000000000000D848                 ADD             X8, X0, #0x2F4
.text:000000000000D84C                 STR             WZR, [X0,#0x284]
.text:000000000000D850                 STR             XZR, [X10]
.text:000000000000D854                 STR             XZR, [X8]
.text:000000000000D858                 ADD             X8, X0, #0x2FC
.text:000000000000D85C                 STR             WZR, [X0,#0x304]
.text:000000000000D860                 STR             XZR, [X8]
.text:000000000000D864                 STP             X9, X0, [X0]
.text:000000000000D868                 RET
.text:000000000000D868 ; } // starts at D728
.text:000000000000D868 ; End of function tinyxml2::XMLDocument::XMLDocument(bool,tinyxml2::Whitespace)
.text:000000000000D868 ; ---------------------------------------------------------------------------
.text:000000000000D86C                 ALIGN 0x10
.text:000000000000D870 ; =============== S U B R O U T I N E =======================================
.text:000000000000D870 ; Attributes: bp-based frame
.text:000000000000D870 ; void __fastcall tinyxml2::XMLDocument::~XMLDocument(tinyxml2::XMLDocument *__hidden this)
.text:000000000000D870                 EXPORT _ZN8tinyxml211XMLDocumentD2Ev
.text:000000000000D870 _ZN8tinyxml211XMLDocumentD2Ev           ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+C↓j
.text:000000000000D870                                         ; DATA XREF: LOAD:00000000000005A0↑o ...
.text:000000000000D870 var_10          = -0x10
.text:000000000000D870 var_s0          =  0
.text:000000000000D870 ; __unwind {
.text:000000000000D870                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000D874                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000D878                 ADD             X29, SP, #0x10
.text:000000000000D87C                 ADRP            X8, #_ZTVN8tinyxml211XMLDocumentE_ptr@PAGE
.text:000000000000D880                 MOV             X19, X0
.text:000000000000D884                 LDR             X8, [X8,#_ZTVN8tinyxml211XMLDocumentE_ptr@PAGEOFF]
.text:000000000000D888                 ADD             X8, X8, #0x10
.text:000000000000D88C                 STR             X8, [X0]
.text:000000000000D890                 BL              ._ZN8tinyxml211XMLDocument5ClearEv ; tinyxml2::XMLDocument::Clear(void)
.text:000000000000D894                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGE
.text:000000000000D898                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGEOFF]
.text:000000000000D89C                 LDR             W8, [X19,#0x2EC]
.text:000000000000D8A0                 ADD             X9, X9, #0x10
.text:000000000000D8A4                 STR             X9, [X19,#0x288]
.text:000000000000D8A8                 CBZ             W8, loc_D8CC
.text:000000000000D8AC loc_D8AC                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument():loc_D8C8↓j
.text:000000000000D8AC                 SUB             W8, W8, #1
.text:000000000000D8B0                 LDR             X9, [X19,#0x290]
.text:000000000000D8B4                 STR             W8, [X19,#0x2EC]
.text:000000000000D8B8                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000D8BC                 CBZ             X0, loc_D8C8
.text:000000000000D8C0                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000D8C4                 LDR             W8, [X19,#0x2EC]
.text:000000000000D8C8 loc_D8C8                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+4C↑j
.text:000000000000D8C8                 CBNZ            W8, loc_D8AC
.text:000000000000D8CC loc_D8CC                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+38↑j
.text:000000000000D8CC                 LDR             X0, [X19,#0x290] ; void *
.text:000000000000D8D0                 ADD             X8, X19, #0x298
.text:000000000000D8D4                 STR             XZR, [X19,#0x2F8]
.text:000000000000D8D8                 STR             XZR, [X19,#0x2F0]
.text:000000000000D8DC                 STR             XZR, [X19,#0x300]
.text:000000000000D8E0                 CMP             X0, X8
.text:000000000000D8E4                 B.EQ            loc_D8F0
.text:000000000000D8E8                 CBZ             X0, loc_D8F0
.text:000000000000D8EC                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000D8F0 loc_D8F0                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+74↑j
.text:000000000000D8F0                                         ; tinyxml2::XMLDocument::~XMLDocument()+78↑j
.text:000000000000D8F0                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGE
.text:000000000000D8F4                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGEOFF]
.text:000000000000D8F8                 LDR             W8, [X19,#0x26C]
.text:000000000000D8FC                 ADD             X9, X9, #0x10
.text:000000000000D900                 STR             X9, [X19,#0x208]
.text:000000000000D904                 CBZ             W8, loc_D928
.text:000000000000D908 loc_D908                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument():loc_D924↓j
.text:000000000000D908                 SUB             W8, W8, #1
.text:000000000000D90C                 LDR             X9, [X19,#0x210]
.text:000000000000D910                 STR             W8, [X19,#0x26C]
.text:000000000000D914                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000D918                 CBZ             X0, loc_D924
.text:000000000000D91C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000D920                 LDR             W8, [X19,#0x26C]
.text:000000000000D924 loc_D924                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+A8↑j
.text:000000000000D924                 CBNZ            W8, loc_D908
.text:000000000000D928 loc_D928                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+94↑j
.text:000000000000D928                 LDR             X0, [X19,#0x210] ; void *
.text:000000000000D92C                 ADD             X8, X19, #0x218
.text:000000000000D930                 STR             XZR, [X19,#0x278]
.text:000000000000D934                 STR             XZR, [X19,#0x270]
.text:000000000000D938                 STR             XZR, [X19,#0x280]
.text:000000000000D93C                 CMP             X0, X8
.text:000000000000D940                 B.EQ            loc_D94C
.text:000000000000D944                 CBZ             X0, loc_D94C
.text:000000000000D948                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000D94C loc_D94C                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+D0↑j
.text:000000000000D94C                                         ; tinyxml2::XMLDocument::~XMLDocument()+D4↑j
.text:000000000000D94C                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGE
.text:000000000000D950                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGEOFF]
.text:000000000000D954                 LDR             W8, [X19,#0x1EC]
.text:000000000000D958                 ADD             X9, X9, #0x10
.text:000000000000D95C                 STR             X9, [X19,#0x188]
.text:000000000000D960                 CBZ             W8, loc_D984
.text:000000000000D964 loc_D964                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument():loc_D980↓j
.text:000000000000D964                 SUB             W8, W8, #1
.text:000000000000D968                 LDR             X9, [X19,#0x190]
.text:000000000000D96C                 STR             W8, [X19,#0x1EC]
.text:000000000000D970                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000D974                 CBZ             X0, loc_D980
.text:000000000000D978                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000D97C                 LDR             W8, [X19,#0x1EC]
.text:000000000000D980 loc_D980                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+104↑j
.text:000000000000D980                 CBNZ            W8, loc_D964
.text:000000000000D984 loc_D984                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+F0↑j
.text:000000000000D984                 LDR             X0, [X19,#0x190] ; void *
.text:000000000000D988                 ADD             X8, X19, #0x198
.text:000000000000D98C                 STP             XZR, XZR, [X19,#0x1F0]
.text:000000000000D990                 STR             XZR, [X19,#0x200]
.text:000000000000D994                 CMP             X0, X8
.text:000000000000D998                 B.EQ            loc_D9A4
.text:000000000000D99C                 CBZ             X0, loc_D9A4
.text:000000000000D9A0                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000D9A4 loc_D9A4                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+128↑j
.text:000000000000D9A4                                         ; tinyxml2::XMLDocument::~XMLDocument()+12C↑j
.text:000000000000D9A4                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGE
.text:000000000000D9A8                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGEOFF]
.text:000000000000D9AC                 LDR             W8, [X19,#0x16C]
.text:000000000000D9B0                 ADD             X9, X9, #0x10
.text:000000000000D9B4                 STR             X9, [X19,#0x108]
.text:000000000000D9B8                 CBZ             W8, loc_D9DC
.text:000000000000D9BC loc_D9BC                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument():loc_D9D8↓j
.text:000000000000D9BC                 SUB             W8, W8, #1
.text:000000000000D9C0                 LDR             X9, [X19,#0x110]
.text:000000000000D9C4                 STR             W8, [X19,#0x16C]
.text:000000000000D9C8                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000D9CC                 CBZ             X0, loc_D9D8
.text:000000000000D9D0                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000D9D4                 LDR             W8, [X19,#0x16C]
.text:000000000000D9D8 loc_D9D8                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+15C↑j
.text:000000000000D9D8                 CBNZ            W8, loc_D9BC
.text:000000000000D9DC loc_D9DC                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+148↑j
.text:000000000000D9DC                 LDR             X0, [X19,#0x110] ; void *
.text:000000000000D9E0                 ADD             X8, X19, #0x118
.text:000000000000D9E4                 STP             XZR, XZR, [X19,#0x170]
.text:000000000000D9E8                 STR             XZR, [X19,#0x180]
.text:000000000000D9EC                 CMP             X0, X8
.text:000000000000D9F0                 B.EQ            loc_D9FC
.text:000000000000D9F4                 CBZ             X0, loc_D9FC
.text:000000000000D9F8                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000D9FC loc_D9FC                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+180↑j
.text:000000000000D9FC                                         ; tinyxml2::XMLDocument::~XMLDocument()+184↑j
.text:000000000000D9FC                 LDR             X0, [X19,#0xA8] ; void *
.text:000000000000DA00                 ADD             X8, X19, #0xB0
.text:000000000000DA04                 CMP             X0, X8
.text:000000000000DA08                 B.EQ            loc_DA14
.text:000000000000DA0C                 CBZ             X0, loc_DA14
.text:000000000000DA10                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000DA14 loc_DA14                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+198↑j
.text:000000000000DA14                                         ; tinyxml2::XMLDocument::~XMLDocument()+19C↑j
.text:000000000000DA14                 LDRB            W8, [X19,#0x79]
.text:000000000000DA18                 TBZ             W8, #1, loc_DA28
.text:000000000000DA1C                 LDR             X0, [X19,#0x80] ; void *
.text:000000000000DA20                 CBZ             X0, loc_DA28
.text:000000000000DA24                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000DA28 loc_DA28                                ; CODE XREF: tinyxml2::XMLDocument::~XMLDocument()+1A8↑j
.text:000000000000DA28                                         ; tinyxml2::XMLDocument::~XMLDocument()+1B0↑j
.text:000000000000DA28                 STR             WZR, [X19,#0x78]
.text:000000000000DA2C                 MOV             X0, X19 ; this
.text:000000000000DA30                 STP             XZR, XZR, [X19,#0x80]
.text:000000000000DA34                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DA38                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000DA3C                 B               ._ZN8tinyxml27XMLNodeD2Ev ; tinyxml2::XMLNode::~XMLNode()
.text:000000000000DA3C ; } // starts at D870
.text:000000000000DA3C ; End of function tinyxml2::XMLDocument::~XMLDocument()
.text:000000000000DA40 ; =============== S U B R O U T I N E =======================================
.text:000000000000DA40 ; Attributes: bp-based frame
.text:000000000000DA40 ; __int64 __fastcall tinyxml2::XMLDocument::Clear(tinyxml2::XMLDocument *__hidden this)
.text:000000000000DA40                 EXPORT _ZN8tinyxml211XMLDocument5ClearEv
.text:000000000000DA40 _ZN8tinyxml211XMLDocument5ClearEv       ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+C↓j
.text:000000000000DA40                                         ; DATA XREF: LOAD:0000000000000F60↑o ...
.text:000000000000DA40 var_20          = -0x20
.text:000000000000DA40 var_10          = -0x10
.text:000000000000DA40 var_s0          =  0
.text:000000000000DA40 ; __unwind {
.text:000000000000DA40                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000DA44                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000DA48                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000DA4C                 ADD             X29, SP, #0x20
.text:000000000000DA50                 MOV             X20, X0
.text:000000000000DA54                 MOV             X19, X0
.text:000000000000DA58                 LDR             X1, [X20,#0x38]!
.text:000000000000DA5C                 CBZ             X1, loc_DA70
.text:000000000000DA60 loc_DA60                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+2C↓j
.text:000000000000DA60                 MOV             X0, X19
.text:000000000000DA64                 BL              ._ZN8tinyxml27XMLNode11DeleteChildEPS0_ ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:000000000000DA68                 LDR             X1, [X19,#0x38]
.text:000000000000DA6C                 CBNZ            X1, loc_DA60
.text:000000000000DA70 loc_DA70                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+1C↑j
.text:000000000000DA70                 LDR             W8, [X19,#0x104]
.text:000000000000DA74                 STP             XZR, XZR, [X20]
.text:000000000000DA78                 CBZ             W8, loc_DB50
.text:000000000000DA7C loc_DA7C                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+58↓j
.text:000000000000DA7C                                         ; tinyxml2::XMLDocument::Clear(void)+B0↓j
.text:000000000000DA7C                 LDR             X8, [X19,#0xA8]
.text:000000000000DA80                 LDR             X20, [X8]
.text:000000000000DA84                 LDR             X0, [X20,#0x10]
.text:000000000000DA88                 CBZ             X0, loc_DAA0
.text:000000000000DA8C                 MOV             X1, X20
.text:000000000000DA90                 BL              ._ZN8tinyxml27XMLNode11DeleteChildEPS0_ ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:000000000000DA94                 LDR             W8, [X19,#0x104]
.text:000000000000DA98                 CBNZ            W8, loc_DA7C
.text:000000000000DA9C                 B               loc_DB50
.text:000000000000DAA0 ; ---------------------------------------------------------------------------
.text:000000000000DAA0 loc_DAA0                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+48↑j
.text:000000000000DAA0                 LDR             X0, [X20,#0x60]
.text:000000000000DAA4                 LDR             X8, [X0]
.text:000000000000DAA8                 LDR             X8, [X8,#0x28]
.text:000000000000DAAC                 BLR             X8
.text:000000000000DAB0                 LDR             X8, [X20]
.text:000000000000DAB4                 MOV             X0, X20
.text:000000000000DAB8                 LDR             X8, [X8,#0x18]
.text:000000000000DABC                 BLR             X8
.text:000000000000DAC0                 CBZ             X0, loc_DAF8
.text:000000000000DAC4 loc_DAC4                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+C4↓j
.text:000000000000DAC4                                         ; tinyxml2::XMLDocument::Clear(void)+F0↓j ...
.text:000000000000DAC4                 LDR             X8, [X20]
.text:000000000000DAC8                 MOV             X0, X20
.text:000000000000DACC                 LDR             X21, [X20,#0x60]
.text:000000000000DAD0                 LDR             X8, [X8,#0x78]
.text:000000000000DAD4                 BLR             X8
.text:000000000000DAD8                 LDR             X8, [X21]
.text:000000000000DADC                 MOV             X0, X21
.text:000000000000DAE0                 MOV             X1, X20
.text:000000000000DAE4                 LDR             X8, [X8,#0x20]
.text:000000000000DAE8                 BLR             X8
.text:000000000000DAEC                 LDR             W8, [X19,#0x104]
.text:000000000000DAF0                 CBNZ            W8, loc_DA7C
.text:000000000000DAF4                 B               loc_DB50
.text:000000000000DAF8 ; ---------------------------------------------------------------------------
.text:000000000000DAF8 loc_DAF8                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+80↑j
.text:000000000000DAF8                 LDR             X8, [X20,#8]
.text:000000000000DAFC                 LDRSW           X9, [X8,#0x104]
.text:000000000000DB00                 CMP             W9, #1
.text:000000000000DB04                 B.LT            loc_DAC4
.text:000000000000DB08                 LDR             X10, [X8,#0xA8]
.text:000000000000DB0C                 MOV             X11, XZR
.text:000000000000DB10                 MOV             X12, X10
.text:000000000000DB14 loc_DB14                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+EC↓j
.text:000000000000DB14                 LDR             X13, [X12]
.text:000000000000DB18                 CMP             X13, X20
.text:000000000000DB1C                 B.EQ            loc_DB34
.text:000000000000DB20                 ADD             X11, X11, #1
.text:000000000000DB24                 ADD             X12, X12, #8
.text:000000000000DB28                 CMP             X11, X9
.text:000000000000DB2C                 B.LT            loc_DB14
.text:000000000000DB30                 B               loc_DAC4
.text:000000000000DB34 ; ---------------------------------------------------------------------------
.text:000000000000DB34 loc_DB34                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+DC↑j
.text:000000000000DB34                 SUB             W9, W9, #1
.text:000000000000DB38                 LDR             X9, [X10,W9,SXTW#3]
.text:000000000000DB3C                 STR             X9, [X12]
.text:000000000000DB40                 LDR             W9, [X8,#0x104]
.text:000000000000DB44                 SUB             W9, W9, #1
.text:000000000000DB48                 STR             W9, [X8,#0x104]
.text:000000000000DB4C                 B               loc_DAC4
.text:000000000000DB50 ; ---------------------------------------------------------------------------
.text:000000000000DB50 loc_DB50                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+38↑j
.text:000000000000DB50                                         ; tinyxml2::XMLDocument::Clear(void)+5C↑j ...
.text:000000000000DB50                 MOV             X0, X19
.text:000000000000DB54                 MOV             W1, WZR
.text:000000000000DB58                 MOV             W2, WZR
.text:000000000000DB5C                 MOV             X3, XZR
.text:000000000000DB60                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000DB64                 LDR             X0, [X19,#0x98] ; void *
.text:000000000000DB68                 CBZ             X0, loc_DB70
.text:000000000000DB6C                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000DB70 loc_DB70                                ; CODE XREF: tinyxml2::XMLDocument::Clear(void)+128↑j
.text:000000000000DB70                 STR             XZR, [X19,#0x98]
.text:000000000000DB74                 STR             WZR, [X19,#0xA4]
.text:000000000000DB78                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000DB7C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000DB80                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000DB84                 RET
.text:000000000000DB84 ; } // starts at DA40
.text:000000000000DB84 ; End of function tinyxml2::XMLDocument::Clear(void)
.text:000000000000DB88 ; ---------------------------------------------------------------------------
.text:000000000000DB88 ; __unwind {
.text:000000000000DB88                 STR             X19, [SP,#-0x20]!
.text:000000000000DB8C                 STP             X29, X30, [SP,#0x10]
.text:000000000000DB90                 ADD             X29, SP, #0x10
.text:000000000000DB94                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGE
.text:000000000000DB98                 MOV             X19, X0
.text:000000000000DB9C                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGEOFF]
.text:000000000000DBA0                 LDR             W8, [X0,#0x64]
.text:000000000000DBA4                 ADD             X9, X9, #0x10
.text:000000000000DBA8                 STR             X9, [X0]
.text:000000000000DBAC                 CBZ             W8, loc_DBD0
.text:000000000000DBB0 loc_DBB0                                ; CODE XREF: .text:loc_DBCC↓j
.text:000000000000DBB0                 SUB             W8, W8, #1
.text:000000000000DBB4                 LDR             X9, [X19,#8]
.text:000000000000DBB8                 STR             W8, [X19,#0x64]
.text:000000000000DBBC                 LDR             X0, [X9,W8,SXTW#3]
.text:000000000000DBC0                 CBZ             X0, loc_DBCC
.text:000000000000DBC4                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000DBC8                 LDR             W8, [X19,#0x64]
.text:000000000000DBCC loc_DBCC                                ; CODE XREF: .text:000000000000DBC0↑j
.text:000000000000DBCC                 CBNZ            W8, loc_DBB0
.text:000000000000DBD0 loc_DBD0                                ; CODE XREF: .text:000000000000DBAC↑j
.text:000000000000DBD0                 LDR             X0, [X19,#8]
.text:000000000000DBD4                 ADD             X8, X19, #0x10
.text:000000000000DBD8                 STP             XZR, XZR, [X19,#0x68]
.text:000000000000DBDC                 STR             XZR, [X19,#0x78]
.text:000000000000DBE0                 CMP             X0, X8
.text:000000000000DBE4                 B.EQ            loc_DBF8
.text:000000000000DBE8                 CBZ             X0, loc_DBF8
.text:000000000000DBEC                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DBF0                 LDR             X19, [SP],#0x20
.text:000000000000DBF4                 B               ._ZdaPv ; operator delete[](void *)
.text:000000000000DBF8 ; ---------------------------------------------------------------------------
.text:000000000000DBF8 loc_DBF8                                ; CODE XREF: .text:000000000000DBE4↑j
.text:000000000000DBF8                                         ; .text:000000000000DBE8↑j
.text:000000000000DBF8                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DBFC                 LDR             X19, [SP],#0x20
.text:000000000000DC00                 RET
.text:000000000000DC00 ; } // starts at DB88
.text:000000000000DC00 ; ---------------------------------------------------------------------------
.text:000000000000DC04                 ALIGN 8
.text:000000000000DC08 ; __unwind {
.text:000000000000DC08                 STR             X19, [SP,#-0x20]!
.text:000000000000DC0C                 STP             X29, X30, [SP,#0x10]
.text:000000000000DC10                 ADD             X29, SP, #0x10
.text:000000000000DC14                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGE
.text:000000000000DC18                 MOV             X19, X0
.text:000000000000DC1C                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGEOFF]
.text:000000000000DC20                 LDR             W8, [X0,#0x64]
.text:000000000000DC24                 ADD             X9, X9, #0x10
.text:000000000000DC28                 STR             X9, [X0]
.text:000000000000DC2C                 CBZ             W8, loc_DC50
.text:000000000000DC30 loc_DC30                                ; CODE XREF: .text:loc_DC4C↓j
.text:000000000000DC30                 SUB             W8, W8, #1
.text:000000000000DC34                 LDR             X9, [X19,#8]
.text:000000000000DC38                 STR             W8, [X19,#0x64]
.text:000000000000DC3C                 LDR             X0, [X9,W8,SXTW#3]
.text:000000000000DC40                 CBZ             X0, loc_DC4C
.text:000000000000DC44                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000DC48                 LDR             W8, [X19,#0x64]
.text:000000000000DC4C loc_DC4C                                ; CODE XREF: .text:000000000000DC40↑j
.text:000000000000DC4C                 CBNZ            W8, loc_DC30
.text:000000000000DC50 loc_DC50                                ; CODE XREF: .text:000000000000DC2C↑j
.text:000000000000DC50                 LDR             X0, [X19,#8]
.text:000000000000DC54                 ADD             X8, X19, #0x10
.text:000000000000DC58                 STP             XZR, XZR, [X19,#0x68]
.text:000000000000DC5C                 STR             XZR, [X19,#0x78]
.text:000000000000DC60                 CMP             X0, X8
.text:000000000000DC64                 B.EQ            loc_DC78
.text:000000000000DC68                 CBZ             X0, loc_DC78
.text:000000000000DC6C                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DC70                 LDR             X19, [SP],#0x20
.text:000000000000DC74                 B               ._ZdaPv ; operator delete[](void *)
.text:000000000000DC78 ; ---------------------------------------------------------------------------
.text:000000000000DC78 loc_DC78                                ; CODE XREF: .text:000000000000DC64↑j
.text:000000000000DC78                                         ; .text:000000000000DC68↑j
.text:000000000000DC78                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DC7C                 LDR             X19, [SP],#0x20
.text:000000000000DC80                 RET
.text:000000000000DC80 ; } // starts at DC08
.text:000000000000DC80 ; ---------------------------------------------------------------------------
.text:000000000000DC84                 ALIGN 8
.text:000000000000DC88 ; __unwind {
.text:000000000000DC88                 STR             X19, [SP,#-0x20]!
.text:000000000000DC8C                 STP             X29, X30, [SP,#0x10]
.text:000000000000DC90                 ADD             X29, SP, #0x10
.text:000000000000DC94                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGE
.text:000000000000DC98                 MOV             X19, X0
.text:000000000000DC9C                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGEOFF]
.text:000000000000DCA0                 LDR             W8, [X0,#0x64]
.text:000000000000DCA4                 ADD             X9, X9, #0x10
.text:000000000000DCA8                 STR             X9, [X0]
.text:000000000000DCAC                 CBZ             W8, loc_DCD0
.text:000000000000DCB0 loc_DCB0                                ; CODE XREF: .text:loc_DCCC↓j
.text:000000000000DCB0                 SUB             W8, W8, #1
.text:000000000000DCB4                 LDR             X9, [X19,#8]
.text:000000000000DCB8                 STR             W8, [X19,#0x64]
.text:000000000000DCBC                 LDR             X0, [X9,W8,SXTW#3]
.text:000000000000DCC0                 CBZ             X0, loc_DCCC
.text:000000000000DCC4                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000DCC8                 LDR             W8, [X19,#0x64]
.text:000000000000DCCC loc_DCCC                                ; CODE XREF: .text:000000000000DCC0↑j
.text:000000000000DCCC                 CBNZ            W8, loc_DCB0
.text:000000000000DCD0 loc_DCD0                                ; CODE XREF: .text:000000000000DCAC↑j
.text:000000000000DCD0                 LDR             X0, [X19,#8]
.text:000000000000DCD4                 ADD             X8, X19, #0x10
.text:000000000000DCD8                 STP             XZR, XZR, [X19,#0x68]
.text:000000000000DCDC                 STR             XZR, [X19,#0x78]
.text:000000000000DCE0                 CMP             X0, X8
.text:000000000000DCE4                 B.EQ            loc_DCF8
.text:000000000000DCE8                 CBZ             X0, loc_DCF8
.text:000000000000DCEC                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DCF0                 LDR             X19, [SP],#0x20
.text:000000000000DCF4                 B               ._ZdaPv ; operator delete[](void *)
.text:000000000000DCF8 ; ---------------------------------------------------------------------------
.text:000000000000DCF8 loc_DCF8                                ; CODE XREF: .text:000000000000DCE4↑j
.text:000000000000DCF8                                         ; .text:000000000000DCE8↑j
.text:000000000000DCF8                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DCFC                 LDR             X19, [SP],#0x20
.text:000000000000DD00                 RET
.text:000000000000DD00 ; } // starts at DC88
.text:000000000000DD00 ; ---------------------------------------------------------------------------
.text:000000000000DD04                 ALIGN 8
.text:000000000000DD08 ; __unwind {
.text:000000000000DD08                 STR             X19, [SP,#-0x20]!
.text:000000000000DD0C                 STP             X29, X30, [SP,#0x10]
.text:000000000000DD10                 ADD             X29, SP, #0x10
.text:000000000000DD14                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGE
.text:000000000000DD18                 MOV             X19, X0
.text:000000000000DD1C                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGEOFF]
.text:000000000000DD20                 LDR             W8, [X0,#0x64]
.text:000000000000DD24                 ADD             X9, X9, #0x10
.text:000000000000DD28                 STR             X9, [X0]
.text:000000000000DD2C                 CBZ             W8, loc_DD50
.text:000000000000DD30 loc_DD30                                ; CODE XREF: .text:loc_DD4C↓j
.text:000000000000DD30                 SUB             W8, W8, #1
.text:000000000000DD34                 LDR             X9, [X19,#8]
.text:000000000000DD38                 STR             W8, [X19,#0x64]
.text:000000000000DD3C                 LDR             X0, [X9,W8,SXTW#3]
.text:000000000000DD40                 CBZ             X0, loc_DD4C
.text:000000000000DD44                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000DD48                 LDR             W8, [X19,#0x64]
.text:000000000000DD4C loc_DD4C                                ; CODE XREF: .text:000000000000DD40↑j
.text:000000000000DD4C                 CBNZ            W8, loc_DD30
.text:000000000000DD50 loc_DD50                                ; CODE XREF: .text:000000000000DD2C↑j
.text:000000000000DD50                 LDR             X0, [X19,#8]
.text:000000000000DD54                 ADD             X8, X19, #0x10
.text:000000000000DD58                 STP             XZR, XZR, [X19,#0x68]
.text:000000000000DD5C                 STR             XZR, [X19,#0x78]
.text:000000000000DD60                 CMP             X0, X8
.text:000000000000DD64                 B.EQ            loc_DD78
.text:000000000000DD68                 CBZ             X0, loc_DD78
.text:000000000000DD6C                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DD70                 LDR             X19, [SP],#0x20
.text:000000000000DD74                 B               ._ZdaPv ; operator delete[](void *)
.text:000000000000DD78 ; ---------------------------------------------------------------------------
.text:000000000000DD78 loc_DD78                                ; CODE XREF: .text:000000000000DD64↑j
.text:000000000000DD78                                         ; .text:000000000000DD68↑j
.text:000000000000DD78                 LDP             X29, X30, [SP,#0x10]
.text:000000000000DD7C                 LDR             X19, [SP],#0x20
.text:000000000000DD80                 RET
.text:000000000000DD80 ; } // starts at DD08
.text:000000000000DD80 ; ---------------------------------------------------------------------------
.text:000000000000DD84                 ALIGN 8
.text:000000000000DD88 ; =============== S U B R O U T I N E =======================================
.text:000000000000DD88 ; Attributes: bp-based frame
.text:000000000000DD88 ; void __fastcall tinyxml2::XMLDocument::~XMLDocument(tinyxml2::XMLDocument *__hidden this)
.text:000000000000DD88                 EXPORT _ZN8tinyxml211XMLDocumentD0Ev
.text:000000000000DD88 _ZN8tinyxml211XMLDocumentD0Ev           ; DATA XREF: LOAD:0000000000001698↑o
.text:000000000000DD88                                         ; .data.rel.ro:0000000000012410↓o
.text:000000000000DD88 var_10          = -0x10
.text:000000000000DD88 var_s0          =  0
.text:000000000000DD88 ; __unwind {
.text:000000000000DD88                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000DD8C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DD90                 ADD             X29, SP, #0x10
.text:000000000000DD94                 MOV             X19, X0
.text:000000000000DD98                 BL              ._ZN8tinyxml211XMLDocumentD2Ev ; tinyxml2::XMLDocument::~XMLDocument()
.text:000000000000DD9C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DDA0                 MOV             X0, X19 ; void *
.text:000000000000DDA4                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000DDA8                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000DDA8 ; } // starts at DD88
.text:000000000000DDA8 ; End of function tinyxml2::XMLDocument::~XMLDocument()
.text:000000000000DDA8 ; ---------------------------------------------------------------------------
.text:000000000000DDAC                 ALIGN 0x10
.text:000000000000DDB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDB0 ; Attributes: bp-based frame
.text:000000000000DDB0 ; __int64 __fastcall tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLDocument *__hidden this, tinyxml2::XMLNode *)
.text:000000000000DDB0                 EXPORT _ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE
.text:000000000000DDB0 _ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE
.text:000000000000DDB0                                         ; DATA XREF: LOAD:0000000000001818↑o
.text:000000000000DDB0 var_10          = -0x10
.text:000000000000DDB0 var_s0          =  0
.text:000000000000DDB0 ; __unwind {
.text:000000000000DDB0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000DDB4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DDB8                 ADD             X29, SP, #0x10
.text:000000000000DDBC                 LDR             X0, [X1,#0x10]
.text:000000000000DDC0                 MOV             X19, X1
.text:000000000000DDC4                 CBZ             X0, loc_DDD8
.text:000000000000DDC8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DDCC                 MOV             X1, X19
.text:000000000000DDD0                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000DDD4                 B               ._ZN8tinyxml27XMLNode11DeleteChildEPS0_ ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:000000000000DDD8 ; ---------------------------------------------------------------------------
.text:000000000000DDD8 loc_DDD8                                ; CODE XREF: tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLNode *)+14↑j
.text:000000000000DDD8                 LDR             X0, [X19,#0x60]
.text:000000000000DDDC                 LDR             X8, [X0]
.text:000000000000DDE0                 LDR             X8, [X8,#0x28]
.text:000000000000DDE4                 BLR             X8
.text:000000000000DDE8                 LDR             X8, [X19]
.text:000000000000DDEC                 MOV             X0, X19
.text:000000000000DDF0                 LDR             X8, [X8,#0x18]
.text:000000000000DDF4                 BLR             X8
.text:000000000000DDF8                 CBZ             X0, loc_DE2C
.text:000000000000DDFC loc_DDFC                                ; CODE XREF: tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLNode *)+88↓j
.text:000000000000DDFC                                         ; tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLNode *)+B4↓j ...
.text:000000000000DDFC                 LDR             X8, [X19]
.text:000000000000DE00                 MOV             X0, X19
.text:000000000000DE04                 LDR             X20, [X19,#0x60]
.text:000000000000DE08                 LDR             X8, [X8,#0x78]
.text:000000000000DE0C                 BLR             X8
.text:000000000000DE10                 LDR             X8, [X20]
.text:000000000000DE14                 MOV             X0, X20
.text:000000000000DE18                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DE1C                 MOV             X1, X19
.text:000000000000DE20                 LDR             X2, [X8,#0x20]
.text:000000000000DE24                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000DE28                 BR              X2
.text:000000000000DE2C ; ---------------------------------------------------------------------------
.text:000000000000DE2C loc_DE2C                                ; CODE XREF: tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLNode *)+48↑j
.text:000000000000DE2C                 LDR             X8, [X19,#8]
.text:000000000000DE30                 LDRSW           X9, [X8,#0x104]
.text:000000000000DE34                 CMP             W9, #1
.text:000000000000DE38                 B.LT            loc_DDFC
.text:000000000000DE3C                 LDR             X10, [X8,#0xA8]
.text:000000000000DE40                 MOV             X11, XZR
.text:000000000000DE44                 MOV             X12, X10
.text:000000000000DE48 loc_DE48                                ; CODE XREF: tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLNode *)+B0↓j
.text:000000000000DE48                 LDR             X13, [X12]
.text:000000000000DE4C                 CMP             X13, X19
.text:000000000000DE50                 B.EQ            loc_DE68
.text:000000000000DE54                 ADD             X11, X11, #1
.text:000000000000DE58                 ADD             X12, X12, #8
.text:000000000000DE5C                 CMP             X11, X9
.text:000000000000DE60                 B.LT            loc_DE48
.text:000000000000DE64                 B               loc_DDFC
.text:000000000000DE68 ; ---------------------------------------------------------------------------
.text:000000000000DE68 loc_DE68                                ; CODE XREF: tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLNode *)+A0↑j
.text:000000000000DE68                 SUB             W9, W9, #1
.text:000000000000DE6C                 LDR             X9, [X10,W9,SXTW#3]
.text:000000000000DE70                 STR             X9, [X12]
.text:000000000000DE74                 LDR             W9, [X8,#0x104]
.text:000000000000DE78                 SUB             W9, W9, #1
.text:000000000000DE7C                 STR             W9, [X8,#0x104]
.text:000000000000DE80                 B               loc_DDFC
.text:000000000000DE80 ; } // starts at DDB0
.text:000000000000DE80 ; End of function tinyxml2::XMLDocument::DeleteNode(tinyxml2::XMLNode *)
.text:000000000000DE80 ; ---------------------------------------------------------------------------
.text:000000000000DE84                 ALIGN 8
.text:000000000000DE88 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE88 ; Attributes: bp-based frame
.text:000000000000DE88 ; _QWORD __fastcall tinyxml2::XMLDocument::DeepCopy(tinyxml2::XMLDocument *__hidden this, tinyxml2::XMLDocument *)
.text:000000000000DE88                 EXPORT _ZNK8tinyxml211XMLDocument8DeepCopyEPS0_
.text:000000000000DE88 _ZNK8tinyxml211XMLDocument8DeepCopyEPS0_
.text:000000000000DE88                                         ; DATA XREF: LOAD:0000000000001338↑o
.text:000000000000DE88 var_10          = -0x10
.text:000000000000DE88 var_s0          =  0
.text:000000000000DE88 ; __unwind {
.text:000000000000DE88                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000DE8C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DE90                 ADD             X29, SP, #0x10
.text:000000000000DE94                 CMP             X1, X0
.text:000000000000DE98                 B.EQ            loc_DED4
.text:000000000000DE9C                 MOV             X20, X0
.text:000000000000DEA0                 MOV             X0, X1  ; this
.text:000000000000DEA4                 MOV             X19, X1
.text:000000000000DEA8                 BL              ._ZN8tinyxml211XMLDocument5ClearEv ; tinyxml2::XMLDocument::Clear(void)
.text:000000000000DEAC                 LDR             X20, [X20,#0x38]
.text:000000000000DEB0                 CBZ             X20, loc_DED4
.text:000000000000DEB4 loc_DEB4                                ; CODE XREF: tinyxml2::XMLDocument::DeepCopy(tinyxml2::XMLDocument*)+48↓j
.text:000000000000DEB4                 MOV             X0, X20 ; this
.text:000000000000DEB8                 MOV             X1, X19 ; tinyxml2::XMLDocument *
.text:000000000000DEBC                 BL              ._ZNK8tinyxml27XMLNode9DeepCloneEPNS_11XMLDocumentE ; tinyxml2::XMLNode::DeepClone(tinyxml2::XMLDocument *)
.text:000000000000DEC0                 MOV             X1, X0
.text:000000000000DEC4                 MOV             X0, X19
.text:000000000000DEC8                 BL              ._ZN8tinyxml27XMLNode14InsertEndChildEPS0_ ; tinyxml2::XMLNode::InsertEndChild(tinyxml2::XMLNode*)
.text:000000000000DECC                 LDR             X20, [X20,#0x50]
.text:000000000000DED0                 CBNZ            X20, loc_DEB4
.text:000000000000DED4 loc_DED4                                ; CODE XREF: tinyxml2::XMLDocument::DeepCopy(tinyxml2::XMLDocument*)+10↑j
.text:000000000000DED4                                         ; tinyxml2::XMLDocument::DeepCopy(tinyxml2::XMLDocument*)+28↑j
.text:000000000000DED4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000DED8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000DEDC                 RET
.text:000000000000DEDC ; } // starts at DE88
.text:000000000000DEDC ; End of function tinyxml2::XMLDocument::DeepCopy(tinyxml2::XMLDocument*)
.text:000000000000DEE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DEE0 ; Attributes: bp-based frame
.text:000000000000DEE0 ; __int64 __fastcall tinyxml2::XMLDocument::LoadFile(tinyxml2::XMLDocument *__hidden this, const char *)
.text:000000000000DEE0                 EXPORT _ZN8tinyxml211XMLDocument8LoadFileEPKc
.text:000000000000DEE0 _ZN8tinyxml211XMLDocument8LoadFileEPKc  ; DATA XREF: LOAD:00000000000007E0↑o
.text:000000000000DEE0 var_20          = -0x20
.text:000000000000DEE0 var_10          = -0x10
.text:000000000000DEE0 var_s0          =  0
.text:000000000000DEE0 ; __unwind {
.text:000000000000DEE0                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000DEE4                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000DEE8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000DEEC                 ADD             X29, SP, #0x20
.text:000000000000DEF0                 MOV             X19, X0
.text:000000000000DEF4                 CBZ             X1, loc_DF34
.text:000000000000DEF8                 MOV             X0, X19 ; this
.text:000000000000DEFC                 MOV             X20, X1
.text:000000000000DF00                 BL              ._ZN8tinyxml211XMLDocument5ClearEv ; tinyxml2::XMLDocument::Clear(void)
.text:000000000000DF04                 ADRP            X1, #aRb@PAGE ; "rb"
.text:000000000000DF08                 ADD             X1, X1, #aRb@PAGEOFF ; modes
.text:000000000000DF0C                 MOV             X0, X20 ; filename
.text:000000000000DF10                 BL              .fopen
.text:000000000000DF14                 CBZ             X0, loc_DF50
.text:000000000000DF18                 MOV             X21, X0
.text:000000000000DF1C                 MOV             X0, X19
.text:000000000000DF20                 MOV             X1, X21
.text:000000000000DF24                 BL              ._ZN8tinyxml211XMLDocument8LoadFileEP7__sFILE ; tinyxml2::XMLDocument::LoadFile(__sFILE *)
.text:000000000000DF28                 MOV             X0, X21 ; stream
.text:000000000000DF2C                 BL              .fclose
.text:000000000000DF30                 B               loc_DF6C
.text:000000000000DF34 ; ---------------------------------------------------------------------------
.text:000000000000DF34 loc_DF34                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(char const*)+14↑j
.text:000000000000DF34                 ADRP            X3, #aFilenameNull@PAGE ; "filename=<null>"
.text:000000000000DF38                 ADD             X3, X3, #aFilenameNull@PAGEOFF ; "filename=<null>"
.text:000000000000DF3C                 MOV             X0, X19
.text:000000000000DF40                 MOV             W1, #4
.text:000000000000DF44                 MOV             W2, WZR
.text:000000000000DF48                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000DF4C                 B               loc_DF6C
.text:000000000000DF50 ; ---------------------------------------------------------------------------
.text:000000000000DF50 loc_DF50                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(char const*)+34↑j
.text:000000000000DF50                 ADRP            X3, #aFilenameS@PAGE ; "filename=%s"
.text:000000000000DF54                 ADD             X3, X3, #aFilenameS@PAGEOFF ; "filename=%s"
.text:000000000000DF58                 MOV             X0, X19
.text:000000000000DF5C                 MOV             W1, #3
.text:000000000000DF60                 MOV             W2, WZR
.text:000000000000DF64                 MOV             X4, X20
.text:000000000000DF68                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000DF6C loc_DF6C                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(char const*)+50↑j
.text:000000000000DF6C                                         ; tinyxml2::XMLDocument::LoadFile(char const*)+6C↑j
.text:000000000000DF6C                 LDR             W0, [X19,#0x6C]
.text:000000000000DF70                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000DF74                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000DF78                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000DF7C                 RET
.text:000000000000DF7C ; } // starts at DEE0
.text:000000000000DF7C ; End of function tinyxml2::XMLDocument::LoadFile(char const*)
.text:000000000000DF80 ; =============== S U B R O U T I N E =======================================
.text:000000000000DF80 ; Attributes: bp-based frame
.text:000000000000DF80 ; tinyxml2::XMLDocument::LoadFile(__sFILE *)
.text:000000000000DF80                 EXPORT _ZN8tinyxml211XMLDocument8LoadFileEP7__sFILE
.text:000000000000DF80 _ZN8tinyxml211XMLDocument8LoadFileEP7__sFILE
.text:000000000000DF80                                         ; CODE XREF: tinyxml2::XMLDocument::LoadFile(__sFILE *)+C↓j
.text:000000000000DF80                                         ; DATA XREF: LOAD:0000000000001170↑o ...
.text:000000000000DF80 var_20          = -0x20
.text:000000000000DF80 var_10          = -0x10
.text:000000000000DF80 var_s0          =  0
.text:000000000000DF80 ; __unwind {
.text:000000000000DF80                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000DF84                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000DF88                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000DF8C                 ADD             X29, SP, #0x20
.text:000000000000DF90                 MOV             X20, X1
.text:000000000000DF94                 MOV             X19, X0
.text:000000000000DF98                 BL              ._ZN8tinyxml211XMLDocument5ClearEv ; tinyxml2::XMLDocument::Clear(void)
.text:000000000000DF9C                 MOV             X0, X20 ; stream
.text:000000000000DFA0                 MOV             X1, XZR ; off
.text:000000000000DFA4                 MOV             W2, WZR ; whence
.text:000000000000DFA8                 BL              .fseek
.text:000000000000DFAC                 MOV             X0, X20 ; stream
.text:000000000000DFB0                 BL              .fgetc
.text:000000000000DFB4                 CMN             W0, #1
.text:000000000000DFB8                 B.EQ            loc_E02C
.text:000000000000DFBC loc_DFBC                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(__sFILE *)+B4↓j
.text:000000000000DFBC                 MOV             X0, X20 ; stream
.text:000000000000DFC0                 MOV             X1, XZR ; off
.text:000000000000DFC4                 MOV             W2, #2  ; whence
.text:000000000000DFC8                 BL              .fseek
.text:000000000000DFCC                 MOV             X0, X20 ; stream
.text:000000000000DFD0                 BL              .ftell
.text:000000000000DFD4                 MOV             X21, X0
.text:000000000000DFD8                 MOV             X0, X20 ; stream
.text:000000000000DFDC                 MOV             X1, XZR ; off
.text:000000000000DFE0                 MOV             W2, WZR ; whence
.text:000000000000DFE4                 BL              .fseek
.text:000000000000DFE8                 CBZ             X21, loc_E040
.text:000000000000DFEC                 CMN             X21, #1
.text:000000000000DFF0                 B.EQ            loc_E038
.text:000000000000DFF4                 ADD             X0, X21, #1 ; unsigned __int64
.text:000000000000DFF8                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000DFFC                 MOV             W1, #1  ; size
.text:000000000000E000                 STR             X0, [X19,#0x98]
.text:000000000000E004                 MOV             X2, X21 ; n
.text:000000000000E008                 MOV             X3, X20 ; stream
.text:000000000000E00C                 BL              .fread
.text:000000000000E010                 CMP             X0, X21
.text:000000000000E014                 B.NE            loc_E038
.text:000000000000E018                 LDR             X8, [X19,#0x98]
.text:000000000000E01C                 MOV             X0, X19 ; this
.text:000000000000E020                 STRB            WZR, [X8,X21]
.text:000000000000E024                 BL              ._ZN8tinyxml211XMLDocument5ParseEv ; tinyxml2::XMLDocument::Parse(void)
.text:000000000000E028                 B               loc_E054
.text:000000000000E02C ; ---------------------------------------------------------------------------
.text:000000000000E02C loc_E02C                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(__sFILE *)+38↑j
.text:000000000000E02C                 MOV             X0, X20 ; stream
.text:000000000000E030                 BL              .ferror
.text:000000000000E034                 CBZ             W0, loc_DFBC
.text:000000000000E038 loc_E038                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(__sFILE *)+70↑j
.text:000000000000E038                                         ; tinyxml2::XMLDocument::LoadFile(__sFILE *)+94↑j
.text:000000000000E038                 MOV             W1, #5
.text:000000000000E03C                 B               loc_E044
.text:000000000000E040 ; ---------------------------------------------------------------------------
.text:000000000000E040 loc_E040                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(__sFILE *)+68↑j
.text:000000000000E040                 MOV             W1, #0xD
.text:000000000000E044 loc_E044                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(__sFILE *)+BC↑j
.text:000000000000E044                 MOV             X0, X19
.text:000000000000E048                 MOV             W2, WZR
.text:000000000000E04C                 MOV             X3, XZR
.text:000000000000E050                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000E054 loc_E054                                ; CODE XREF: tinyxml2::XMLDocument::LoadFile(__sFILE *)+A8↑j
.text:000000000000E054                 LDR             W0, [X19,#0x6C]
.text:000000000000E058                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000E05C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000E060                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000E064                 RET
.text:000000000000E064 ; } // starts at DF80
.text:000000000000E064 ; End of function tinyxml2::XMLDocument::LoadFile(__sFILE *)
.text:000000000000E068 ; =============== S U B R O U T I N E =======================================
.text:000000000000E068 ; Attributes: bp-based frame
.text:000000000000E068 ; __int64 __fastcall tinyxml2::XMLDocument::Parse(tinyxml2::XMLDocument *__hidden this)
.text:000000000000E068                 EXPORT _ZN8tinyxml211XMLDocument5ParseEv
.text:000000000000E068 _ZN8tinyxml211XMLDocument5ParseEv       ; CODE XREF: tinyxml2::XMLDocument::Parse(void)+C↓j
.text:000000000000E068                                         ; DATA XREF: LOAD:0000000000000978↑o ...
.text:000000000000E068 var_30          = -0x30
.text:000000000000E068 var_20          = -0x20
.text:000000000000E068 var_10          = -0x10
.text:000000000000E068 var_s0          =  0
.text:000000000000E068 ; __unwind {
.text:000000000000E068                 STR             X23, [SP,#-0x10+var_30]!
.text:000000000000E06C                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000E070                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000E074                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000E078                 ADD             X29, SP, #0x30
.text:000000000000E07C                 MOV             W8, #1
.text:000000000000E080                 MOV             X20, X0
.text:000000000000E084                 MOV             X19, X0
.text:000000000000E088                 STR             W8, [X20,#0xA0]!
.text:000000000000E08C                 LDUR            X21, [X20,#-8]
.text:000000000000E090                 STUR            W8, [X20,#-0x70]
.text:000000000000E094                 LDRSB           W8, [X21]
.text:000000000000E098                 TBNZ            W8, #0x1F, loc_E0C8
.text:000000000000E09C                 MOV             W23, #1
.text:000000000000E0A0 loc_E0A0                                ; CODE XREF: tinyxml2::XMLDocument::Parse(void)+5C↓j
.text:000000000000E0A0                 AND             W22, W8, #0xFF
.text:000000000000E0A4                 MOV             W0, W22 ; int
.text:000000000000E0A8                 BL              .isspace
.text:000000000000E0AC                 CBZ             W0, loc_E0C8
.text:000000000000E0B0                 CMP             W22, #0xA
.text:000000000000E0B4                 B.NE            loc_E0C0
.text:000000000000E0B8                 ADD             W23, W23, #1
.text:000000000000E0BC                 STR             W23, [X20]
.text:000000000000E0C0 loc_E0C0                                ; CODE XREF: tinyxml2::XMLDocument::Parse(void)+4C↑j
.text:000000000000E0C0                 LDRSB           W8, [X21,#1]!
.text:000000000000E0C4                 TBZ             W8, #0x1F, loc_E0A0
.text:000000000000E0C8 loc_E0C8                                ; CODE XREF: tinyxml2::XMLDocument::Parse(void)+30↑j
.text:000000000000E0C8                                         ; tinyxml2::XMLDocument::Parse(void)+44↑j
.text:000000000000E0C8                 STRB            WZR, [X19,#0x68]
.text:000000000000E0CC                 LDRB            W8, [X21]
.text:000000000000E0D0                 CMP             W8, #0xEF
.text:000000000000E0D4                 B.NE            loc_E0FC
.text:000000000000E0D8                 LDRB            W8, [X21,#1]
.text:000000000000E0DC                 CMP             W8, #0xBB
.text:000000000000E0E0                 B.NE            loc_E100
.text:000000000000E0E4                 LDRB            W8, [X21,#2]
.text:000000000000E0E8                 CMP             W8, #0xBF
.text:000000000000E0EC                 B.NE            loc_E100
.text:000000000000E0F0                 MOV             W8, #1
.text:000000000000E0F4                 STRB            W8, [X19,#0x68]
.text:000000000000E0F8                 LDRB            W8, [X21,#3]!
.text:000000000000E0FC loc_E0FC                                ; CODE XREF: tinyxml2::XMLDocument::Parse(void)+6C↑j
.text:000000000000E0FC                 CBZ             W8, loc_E12C
.text:000000000000E100 loc_E100                                ; CODE XREF: tinyxml2::XMLDocument::Parse(void)+78↑j
.text:000000000000E100                                         ; tinyxml2::XMLDocument::Parse(void)+84↑j
.text:000000000000E100                 LDR             X8, [X19]
.text:000000000000E104                 MOV             X0, X19
.text:000000000000E108                 MOV             X1, X21
.text:000000000000E10C                 MOV             X3, X20
.text:000000000000E110                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000E114                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000E118                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000E11C                 MOV             X2, XZR
.text:000000000000E120                 LDR             X4, [X8,#0x88]
.text:000000000000E124                 LDR             X23, [SP+0x30+var_30],#0x40
.text:000000000000E128                 BR              X4
.text:000000000000E12C ; ---------------------------------------------------------------------------
.text:000000000000E12C loc_E12C                                ; CODE XREF: tinyxml2::XMLDocument::Parse(void):loc_E0FC↑j
.text:000000000000E12C                 MOV             X0, X19
.text:000000000000E130                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000E134                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000E138                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000E13C                 MOV             W1, #0xD
.text:000000000000E140                 MOV             W2, WZR
.text:000000000000E144                 MOV             X3, XZR
.text:000000000000E148                 LDR             X23, [SP+0x30+var_30],#0x40
.text:000000000000E14C                 B               ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000E14C ; } // starts at E068
.text:000000000000E14C ; End of function tinyxml2::XMLDocument::Parse(void)
.text:000000000000E150 ; =============== S U B R O U T I N E =======================================
.text:000000000000E150 ; Attributes: bp-based frame
.text:000000000000E150 ; _QWORD __fastcall tinyxml2::XMLDocument::SaveFile(tinyxml2::XMLDocument *__hidden this, const char *, bool)
.text:000000000000E150                 EXPORT _ZN8tinyxml211XMLDocument8SaveFileEPKcb
.text:000000000000E150 _ZN8tinyxml211XMLDocument8SaveFileEPKcb ; DATA XREF: LOAD:0000000000001830↑o
.text:000000000000E150 var_20          = -0x20
.text:000000000000E150 var_10          = -0x10
.text:000000000000E150 var_s0          =  0
.text:000000000000E150 ; __unwind {
.text:000000000000E150                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000E154                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000E158                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000E15C                 ADD             X29, SP, #0x20
.text:000000000000E160                 MOV             X19, X0
.text:000000000000E164                 CBZ             X1, loc_E1A4
.text:000000000000E168                 MOV             X20, X1
.text:000000000000E16C                 ADRP            X1, #aW@PAGE ; "w"
.text:000000000000E170                 ADD             X1, X1, #aW@PAGEOFF ; "w"
.text:000000000000E174                 MOV             X0, X20 ; filename
.text:000000000000E178                 MOV             W21, W2
.text:000000000000E17C                 BL              .fopen
.text:000000000000E180                 CBZ             X0, loc_E1C0
.text:000000000000E184                 MOV             X22, X0
.text:000000000000E188                 AND             W2, W21, #1
.text:000000000000E18C                 MOV             X0, X19
.text:000000000000E190                 MOV             X1, X22
.text:000000000000E194                 BL              ._ZN8tinyxml211XMLDocument8SaveFileEP7__sFILEb ; tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)
.text:000000000000E198                 MOV             X0, X22 ; stream
.text:000000000000E19C                 BL              .fclose
.text:000000000000E1A0                 B               loc_E1DC
.text:000000000000E1A4 ; ---------------------------------------------------------------------------
.text:000000000000E1A4 loc_E1A4                                ; CODE XREF: tinyxml2::XMLDocument::SaveFile(char const*,bool)+14↑j
.text:000000000000E1A4                 ADRP            X3, #aFilenameNull@PAGE ; "filename=<null>"
.text:000000000000E1A8                 ADD             X3, X3, #aFilenameNull@PAGEOFF ; "filename=<null>"
.text:000000000000E1AC                 MOV             X0, X19
.text:000000000000E1B0                 MOV             W1, #4
.text:000000000000E1B4                 MOV             W2, WZR
.text:000000000000E1B8                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000E1BC                 B               loc_E1DC
.text:000000000000E1C0 ; ---------------------------------------------------------------------------
.text:000000000000E1C0 loc_E1C0                                ; CODE XREF: tinyxml2::XMLDocument::SaveFile(char const*,bool)+30↑j
.text:000000000000E1C0                 ADRP            X3, #aFilenameS@PAGE ; "filename=%s"
.text:000000000000E1C4                 ADD             X3, X3, #aFilenameS@PAGEOFF ; "filename=%s"
.text:000000000000E1C8                 MOV             X0, X19
.text:000000000000E1CC                 MOV             W1, #4
.text:000000000000E1D0                 MOV             W2, WZR
.text:000000000000E1D4                 MOV             X4, X20
.text:000000000000E1D8                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000E1DC loc_E1DC                                ; CODE XREF: tinyxml2::XMLDocument::SaveFile(char const*,bool)+50↑j
.text:000000000000E1DC                                         ; tinyxml2::XMLDocument::SaveFile(char const*,bool)+6C↑j
.text:000000000000E1DC                 LDR             W0, [X19,#0x6C]
.text:000000000000E1E0                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000E1E4                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000E1E8                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:000000000000E1EC                 RET
.text:000000000000E1EC ; } // starts at E150
.text:000000000000E1EC ; End of function tinyxml2::XMLDocument::SaveFile(char const*,bool)
.text:000000000000E1F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E1F0 ; Attributes: bp-based frame
.text:000000000000E1F0 ; tinyxml2::XMLDocument::SaveFile(__sFILE *, bool)
.text:000000000000E1F0                 EXPORT _ZN8tinyxml211XMLDocument8SaveFileEP7__sFILEb
.text:000000000000E1F0 _ZN8tinyxml211XMLDocument8SaveFileEP7__sFILEb
.text:000000000000E1F0                                         ; CODE XREF: tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)+C↓j
.text:000000000000E1F0                                         ; DATA XREF: LOAD:0000000000000588↑o ...
.text:000000000000E1F0 var_188         = -0x188
.text:000000000000E1F0 var_180         = -0x180
.text:000000000000E1F0 var_178         = -0x178
.text:000000000000E1F0 var_170         = -0x170
.text:000000000000E1F0 var_118         = -0x118
.text:000000000000E1F0 var_110         = -0x110
.text:000000000000E1F0 var_108         = -0x108
.text:000000000000E1F0 var_100         = -0x100
.text:000000000000E1F0 var_F8          = -0xF8
.text:000000000000E1F0 var_F7          = -0xF7
.text:000000000000E1F0 var_D4          = -0xD4
.text:000000000000E1F0 var_D0          = -0xD0
.text:000000000000E1F0 var_BA          = -0xBA
.text:000000000000E1F0 var_B8          = -0xB8
.text:000000000000E1F0 var_90          = -0x90
.text:000000000000E1F0 var_7A          = -0x7A
.text:000000000000E1F0 var_78          = -0x78
.text:000000000000E1F0 var_70          = -0x70
.text:000000000000E1F0 var_68          = -0x68
.text:000000000000E1F0 var_54          = -0x54
.text:000000000000E1F0 var_50          = -0x50
.text:000000000000E1F0 var_40          = -0x40
.text:000000000000E1F0 var_30          = -0x30
.text:000000000000E1F0 var_20          = -0x20
.text:000000000000E1F0 var_10          = -0x10
.text:000000000000E1F0 var_s0          =  0
.text:000000000000E1F0 ; __unwind {
.text:000000000000E1F0                 SUB             SP, SP, #0x1A0
.text:000000000000E1F4                 STR             X28, [SP,#0x190+var_40]
.text:000000000000E1F8                 STP             X24, X23, [SP,#0x190+var_30]
.text:000000000000E1FC                 STP             X22, X21, [SP,#0x190+var_20]
.text:000000000000E200                 STP             X20, X19, [SP,#0x190+var_10]
.text:000000000000E204                 STP             X29, X30, [SP,#0x190+var_s0]
.text:000000000000E208                 ADD             X29, SP, #0x190
.text:000000000000E20C                 MRS             X22, #3, c13, c0, #2
.text:000000000000E210                 MOV             W20, W2
.text:000000000000E214                 LDR             X8, [X22,#0x28]
.text:000000000000E218                 MOV             X21, X1
.text:000000000000E21C                 MOV             W1, WZR
.text:000000000000E220                 MOV             W2, WZR
.text:000000000000E224                 MOV             X3, XZR
.text:000000000000E228                 MOV             X19, X0
.text:000000000000E22C                 STR             X8, [SP,#0x190+var_188]
.text:000000000000E230                 ADD             X23, SP, #0x190+var_180
.text:000000000000E234                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000E238                 ADRP            X8, #_ZTVN8tinyxml210XMLPrinterE_ptr@PAGE
.text:000000000000E23C                 MOVI            D0, #0xFFFFFFFF00000000
.text:000000000000E240                 MOVI            V1.2D, #0
.text:000000000000E244                 MOV             W9, #1
.text:000000000000E248                 MOV             W10, #0x14
.text:000000000000E24C                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLPrinterE_ptr@PAGEOFF]
.text:000000000000E250                 ADD             X1, SP, #0x190+var_180
.text:000000000000E254                 MOV             X0, X19
.text:000000000000E258                 STR             D0, [SP,#0x190+var_100]
.text:000000000000E25C                 ADD             X24, X8, #0x10
.text:000000000000E260                 STUR            Q1, [X23,#0xFA]
.text:000000000000E264                 ADRP            X8, #qword_4E80@PAGE
.text:000000000000E268                 STUR            Q1, [X23,#0xEA]
.text:000000000000E26C                 STUR            Q1, [X23,#0xDA]
.text:000000000000E270                 STUR            Q1, [X23,#0xCA]
.text:000000000000E274                 LDR             D0, [X8,#qword_4E80@PAGEOFF]
.text:000000000000E278                 AND             W8, W20, #1
.text:000000000000E27C                 STUR            Q1, [X23,#0xBA]
.text:000000000000E280                 ADD             X20, X23, #0x18
.text:000000000000E284                 STR             X24, [SP,#0x190+var_180]
.text:000000000000E288                 STUR            Q1, [X23,#0xAA]
.text:000000000000E28C                 STUR            Q1, [X23,#0x9A]
.text:000000000000E290                 STUR            Q1, [X23,#0x8A]
.text:000000000000E294                 STR             X21, [SP,#0x190+var_108]
.text:000000000000E298                 ADD             X21, X23, #0x118
.text:000000000000E29C                 STRB            W8, [SP,#0x190+var_F7]
.text:000000000000E2A0                 MOV             W8, #0x101
.text:000000000000E2A4                 STRB            W9, [SP,#0x190+var_110]
.text:000000000000E2A8                 STRB            W9, [SP,#0x190+var_F8]
.text:000000000000E2AC                 STR             X21, [SP,#0x190+var_70]
.text:000000000000E2B0                 STR             W10, [SP,#0x190+var_54]
.text:000000000000E2B4                 STRB            W9, [SP,#0x190+var_D4]
.text:000000000000E2B8                 STRH            W8, [SP,#0x190+var_D0]
.text:000000000000E2BC                 STRB            W9, [SP,#0x190+var_BA]
.text:000000000000E2C0                 STRB            W9, [SP,#0x190+var_B8]
.text:000000000000E2C4                 STRB            W9, [SP,#0x190+var_90]
.text:000000000000E2C8                 STRB            W9, [SP,#0x190+var_7A]
.text:000000000000E2CC                 LDR             X8, [X19]
.text:000000000000E2D0                 STRB            W9, [SP,#0x190+var_78]
.text:000000000000E2D4                 STRB            WZR, [SP,#0x190+var_68]
.text:000000000000E2D8                 STR             W9, [SP,#0x190+var_50]
.text:000000000000E2DC                 LDR             X8, [X8,#0x70]
.text:000000000000E2E0                 STRB            WZR, [SP,#0x190+var_178]
.text:000000000000E2E4                 STR             X20, [SP,#0x190+var_170]
.text:000000000000E2E8                 STR             D0, [SP,#0x190+var_118]
.text:000000000000E2EC                 BLR             X8
.text:000000000000E2F0                 LDR             X0, [SP,#0x190+var_70] ; void *
.text:000000000000E2F4                 LDR             W19, [X19,#0x6C]
.text:000000000000E2F8                 STR             X24, [SP,#0x190+var_180]
.text:000000000000E2FC                 CMP             X0, X21
.text:000000000000E300                 B.EQ            loc_E30C
.text:000000000000E304                 CBZ             X0, loc_E30C
.text:000000000000E308                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000E30C loc_E30C                                ; CODE XREF: tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)+110↑j
.text:000000000000E30C                                         ; tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)+114↑j
.text:000000000000E30C                 LDR             X0, [SP,#0x190+var_170] ; void *
.text:000000000000E310                 CMP             X0, X20
.text:000000000000E314                 B.EQ            loc_E320
.text:000000000000E318                 CBZ             X0, loc_E320
.text:000000000000E31C                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000E320 loc_E320                                ; CODE XREF: tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)+124↑j
.text:000000000000E320                                         ; tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)+128↑j
.text:000000000000E320                 LDR             X8, [X22,#0x28]
.text:000000000000E324                 LDR             X9, [SP,#0x190+var_188]
.text:000000000000E328                 CMP             X8, X9
.text:000000000000E32C                 B.NE            loc_E350
.text:000000000000E330                 MOV             W0, W19
.text:000000000000E334                 LDR             X28, [SP,#0x190+var_40]
.text:000000000000E338                 LDP             X29, X30, [SP,#0x190+var_s0]
.text:000000000000E33C                 LDP             X20, X19, [SP,#0x190+var_10]
.text:000000000000E340                 LDP             X22, X21, [SP,#0x190+var_20]
.text:000000000000E344                 LDP             X24, X23, [SP,#0x190+var_30]
.text:000000000000E348                 ADD             SP, SP, #0x1A0
.text:000000000000E34C                 RET
.text:000000000000E350 ; ---------------------------------------------------------------------------
.text:000000000000E350 loc_E350                                ; CODE XREF: tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)+13C↑j
.text:000000000000E350                 BL              .__stack_chk_fail
.text:000000000000E350 ; } // starts at E1F0
.text:000000000000E350 ; End of function tinyxml2::XMLDocument::SaveFile(__sFILE *,bool)
.text:000000000000E350 ; ---------------------------------------------------------------------------
.text:000000000000E354                 ALIGN 8
.text:000000000000E358 ; =============== S U B R O U T I N E =======================================
.text:000000000000E358 ; Attributes: bp-based frame
.text:000000000000E358 ; tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)const
.text:000000000000E358                 EXPORT _ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE
.text:000000000000E358 _ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE
.text:000000000000E358                                         ; DATA XREF: LOAD:0000000000001740↑o
.text:000000000000E358 var_178         = -0x178
.text:000000000000E358 var_170         = -0x170
.text:000000000000E358 var_168         = -0x168
.text:000000000000E358 var_160         = -0x160
.text:000000000000E358 var_108         = -0x108
.text:000000000000E358 var_100         = -0x100
.text:000000000000E358 var_F8          = -0xF8
.text:000000000000E358 var_F0          = -0xF0
.text:000000000000E358 var_E8          = -0xE8
.text:000000000000E358 var_C4          = -0xC4
.text:000000000000E358 var_C0          = -0xC0
.text:000000000000E358 var_AA          = -0xAA
.text:000000000000E358 var_A8          = -0xA8
.text:000000000000E358 var_80          = -0x80
.text:000000000000E358 var_6A          = -0x6A
.text:000000000000E358 var_68          = -0x68
.text:000000000000E358 var_60          = -0x60
.text:000000000000E358 var_58          = -0x58
.text:000000000000E358 var_44          = -0x44
.text:000000000000E358 var_40          = -0x40
.text:000000000000E358 var_30          = -0x30
.text:000000000000E358 var_20          = -0x20
.text:000000000000E358 var_10          = -0x10
.text:000000000000E358 var_s0          =  0
.text:000000000000E358 ; __unwind {
.text:000000000000E358                 SUB             SP, SP, #0x190
.text:000000000000E35C                 STR             X28, [SP,#0x180+var_30]
.text:000000000000E360                 STP             X22, X21, [SP,#0x180+var_20]
.text:000000000000E364                 STP             X20, X19, [SP,#0x180+var_10]
.text:000000000000E368                 STP             X29, X30, [SP,#0x180+var_s0]
.text:000000000000E36C                 ADD             X29, SP, #0x180
.text:000000000000E370                 MRS             X19, #3, c13, c0, #2
.text:000000000000E374                 LDR             X8, [X19,#0x28]
.text:000000000000E378                 STR             X8, [SP,#0x180+var_178]
.text:000000000000E37C                 CBZ             X1, loc_E390
.text:000000000000E380                 LDR             X8, [X0]
.text:000000000000E384                 LDR             X8, [X8,#0x70]
.text:000000000000E388                 BLR             X8
.text:000000000000E38C                 B               loc_E478
.text:000000000000E390 ; ---------------------------------------------------------------------------
.text:000000000000E390 loc_E390                                ; CODE XREF: tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)+24↑j
.text:000000000000E390                 ADRP            X8, #stdout_ptr@PAGE
.text:000000000000E394                 MOVI            D0, #0xFFFFFFFF00000000
.text:000000000000E398                 ADRP            X9, #_ZTVN8tinyxml210XMLPrinterE_ptr@PAGE
.text:000000000000E39C                 MOVI            V1.2D, #0
.text:000000000000E3A0                 ADD             X10, SP, #0x180+var_170
.text:000000000000E3A4                 LDR             X8, [X8,#stdout_ptr@PAGEOFF]
.text:000000000000E3A8                 MOV             W11, #1
.text:000000000000E3AC                 LDR             X9, [X9,#_ZTVN8tinyxml210XMLPrinterE_ptr@PAGEOFF]
.text:000000000000E3B0                 ADD             X22, X10, #0x118
.text:000000000000E3B4                 ADD             X20, X10, #0x18
.text:000000000000E3B8                 STR             D0, [SP,#0x180+var_F0]
.text:000000000000E3BC                 ADD             X1, SP, #0x180+var_170
.text:000000000000E3C0                 LDR             X8, [X8]
.text:000000000000E3C4                 ADD             X21, X9, #0x10
.text:000000000000E3C8                 STUR            Q1, [X10,#0xFA]
.text:000000000000E3CC                 ADRP            X9, #qword_4E80@PAGE
.text:000000000000E3D0                 STUR            Q1, [X10,#0xEA]
.text:000000000000E3D4                 STUR            Q1, [X10,#0xDA]
.text:000000000000E3D8                 STR             X21, [SP,#0x180+var_170]
.text:000000000000E3DC                 STUR            Q1, [X10,#0xCA]
.text:000000000000E3E0                 STUR            Q1, [X10,#0xBA]
.text:000000000000E3E4                 STUR            Q1, [X10,#0xAA]
.text:000000000000E3E8                 STUR            Q1, [X10,#0x9A]
.text:000000000000E3EC                 STUR            Q1, [X10,#0x8A]
.text:000000000000E3F0                 LDR             D0, [X9,#qword_4E80@PAGEOFF]
.text:000000000000E3F4                 MOV             W9, #0x101
.text:000000000000E3F8                 STR             X8, [SP,#0x180+var_F8]
.text:000000000000E3FC                 MOV             W8, #0x14
.text:000000000000E400                 STRB            W11, [SP,#0x180+var_100]
.text:000000000000E404                 STRH            W11, [SP,#0x180+var_E8]
.text:000000000000E408                 STR             X22, [SP,#0x180+var_60]
.text:000000000000E40C                 STR             W8, [SP,#0x180+var_44]
.text:000000000000E410                 STRB            W11, [SP,#0x180+var_C4]
.text:000000000000E414                 STRH            W9, [SP,#0x180+var_C0]
.text:000000000000E418                 STRB            W11, [SP,#0x180+var_AA]
.text:000000000000E41C                 STRB            W11, [SP,#0x180+var_A8]
.text:000000000000E420                 STRB            W11, [SP,#0x180+var_80]
.text:000000000000E424                 STRB            W11, [SP,#0x180+var_6A]
.text:000000000000E428                 LDR             X8, [X0]
.text:000000000000E42C                 STRB            W11, [SP,#0x180+var_68]
.text:000000000000E430                 STRB            WZR, [SP,#0x180+var_58]
.text:000000000000E434                 STR             W11, [SP,#0x180+var_40]
.text:000000000000E438                 LDR             X8, [X8,#0x70]
.text:000000000000E43C                 STRB            WZR, [SP,#0x180+var_168]
.text:000000000000E440                 STR             X20, [SP,#0x180+var_160]
.text:000000000000E444                 STR             D0, [SP,#0x180+var_108]
.text:000000000000E448                 BLR             X8
.text:000000000000E44C                 LDR             X0, [SP,#0x180+var_60] ; void *
.text:000000000000E450                 STR             X21, [SP,#0x180+var_170]
.text:000000000000E454                 CMP             X0, X22
.text:000000000000E458                 B.EQ            loc_E464
.text:000000000000E45C                 CBZ             X0, loc_E464
.text:000000000000E460                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000E464 loc_E464                                ; CODE XREF: tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)+100↑j
.text:000000000000E464                                         ; tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)+104↑j
.text:000000000000E464                 LDR             X0, [SP,#0x180+var_160] ; void *
.text:000000000000E468                 CMP             X0, X20
.text:000000000000E46C                 B.EQ            loc_E478
.text:000000000000E470                 CBZ             X0, loc_E478
.text:000000000000E474                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000E478 loc_E478                                ; CODE XREF: tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)+34↑j
.text:000000000000E478                                         ; tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)+114↑j ...
.text:000000000000E478                 LDR             X8, [X19,#0x28]
.text:000000000000E47C                 LDR             X9, [SP,#0x180+var_178]
.text:000000000000E480                 CMP             X8, X9
.text:000000000000E484                 B.NE            loc_E4A0
.text:000000000000E488                 LDP             X29, X30, [SP,#0x180+var_s0]
.text:000000000000E48C                 LDP             X20, X19, [SP,#0x180+var_10]
.text:000000000000E490                 LDP             X22, X21, [SP,#0x180+var_20]
.text:000000000000E494                 LDR             X28, [SP,#0x180+var_30]
.text:000000000000E498                 ADD             SP, SP, #0x190
.text:000000000000E49C                 RET
.text:000000000000E4A0 ; ---------------------------------------------------------------------------
.text:000000000000E4A0 loc_E4A0                                ; CODE XREF: tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)+12C↑j
.text:000000000000E4A0                 BL              .__stack_chk_fail
.text:000000000000E4A0 ; } // starts at E358
.text:000000000000E4A0 ; End of function tinyxml2::XMLDocument::Print(tinyxml2::XMLPrinter *)
.text:000000000000E4A0 ; ---------------------------------------------------------------------------
.text:000000000000E4A4                 ALIGN 8
.text:000000000000E4A8 ; __unwind {
.text:000000000000E4A8                 STR             X19, [SP,#-0x20]!
.text:000000000000E4AC                 STP             X29, X30, [SP,#0x10]
.text:000000000000E4B0                 ADD             X29, SP, #0x10
.text:000000000000E4B4                 ADRP            X8, #_ZTVN8tinyxml210XMLPrinterE_ptr@PAGE
.text:000000000000E4B8                 MOV             X19, X0
.text:000000000000E4BC                 ADD             X9, X19, #0x118
.text:000000000000E4C0                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLPrinterE_ptr@PAGEOFF]
.text:000000000000E4C4                 LDR             X0, [X0,#0x110]
.text:000000000000E4C8                 ADD             X8, X8, #0x10
.text:000000000000E4CC                 CMP             X0, X9
.text:000000000000E4D0                 CCMP            X0, #0, #4, NE
.text:000000000000E4D4                 STR             X8, [X19]
.text:000000000000E4D8                 B.EQ            loc_E4E0
.text:000000000000E4DC                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000E4E0 loc_E4E0                                ; CODE XREF: .text:000000000000E4D8↑j
.text:000000000000E4E0                 LDR             X0, [X19,#0x10]
.text:000000000000E4E4                 ADD             X8, X19, #0x18
.text:000000000000E4E8                 CMP             X0, X8
.text:000000000000E4EC                 B.EQ            loc_E500
.text:000000000000E4F0                 CBZ             X0, loc_E500
.text:000000000000E4F4                 LDP             X29, X30, [SP,#0x10]
.text:000000000000E4F8                 LDR             X19, [SP],#0x20
.text:000000000000E4FC                 B               ._ZdaPv ; operator delete[](void *)
.text:000000000000E500 ; ---------------------------------------------------------------------------
.text:000000000000E500 loc_E500                                ; CODE XREF: .text:000000000000E4EC↑j
.text:000000000000E500                                         ; .text:000000000000E4F0↑j
.text:000000000000E500                 LDP             X29, X30, [SP,#0x10]
.text:000000000000E504                 LDR             X19, [SP],#0x20
.text:000000000000E508                 RET
.text:000000000000E508 ; } // starts at E4A8
.text:000000000000E508 ; ---------------------------------------------------------------------------
.text:000000000000E50C                 ALIGN 0x10
.text:000000000000E510 ; =============== S U B R O U T I N E =======================================
.text:000000000000E510 ; Attributes: bp-based frame
.text:000000000000E510 ; __int64 __fastcall tinyxml2::XMLDocument::Parse(tinyxml2::XMLDocument *__hidden this, const char *, unsigned __int64)
.text:000000000000E510                 EXPORT _ZN8tinyxml211XMLDocument5ParseEPKcm
.text:000000000000E510 _ZN8tinyxml211XMLDocument5ParseEPKcm    ; DATA XREF: LOAD:00000000000011B8↑o
.text:000000000000E510 var_20          = -0x20
.text:000000000000E510 var_10          = -0x10
.text:000000000000E510 var_s0          =  0
.text:000000000000E510 ; __unwind {
.text:000000000000E510                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000E514                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000E518                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000E51C                 ADD             X29, SP, #0x20
.text:000000000000E520                 MOV             X20, X2
.text:000000000000E524                 MOV             X21, X1
.text:000000000000E528                 MOV             X19, X0
.text:000000000000E52C                 BL              ._ZN8tinyxml211XMLDocument5ClearEv ; tinyxml2::XMLDocument::Clear(void)
.text:000000000000E530                 CBZ             X21, loc_E670
.text:000000000000E534                 CBZ             X20, loc_E670
.text:000000000000E538                 LDRB            W8, [X21]
.text:000000000000E53C                 CBZ             W8, loc_E670
.text:000000000000E540                 CMN             X20, #1
.text:000000000000E544                 B.NE            loc_E554
.text:000000000000E548                 MOV             X0, X21 ; s
.text:000000000000E54C                 BL              .strlen
.text:000000000000E550                 MOV             X20, X0
.text:000000000000E554 loc_E554                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+34↑j
.text:000000000000E554                 ADD             X0, X20, #1 ; unsigned __int64
.text:000000000000E558                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000E55C                 MOV             X1, X21 ; src
.text:000000000000E560                 STR             X0, [X19,#0x98]
.text:000000000000E564                 MOV             X2, X20 ; n
.text:000000000000E568                 BL              .memcpy
.text:000000000000E56C                 LDR             X8, [X19,#0x98]
.text:000000000000E570                 MOV             X0, X19 ; this
.text:000000000000E574                 STRB            WZR, [X8,X20]
.text:000000000000E578                 BL              ._ZN8tinyxml211XMLDocument5ParseEv ; tinyxml2::XMLDocument::Parse(void)
.text:000000000000E57C                 LDR             W8, [X19,#0x6C]
.text:000000000000E580                 CBZ             W8, loc_E684
.text:000000000000E584                 MOV             X20, X19
.text:000000000000E588                 LDR             X1, [X20,#0x38]!
.text:000000000000E58C                 CBZ             X1, loc_E5A0
.text:000000000000E590 loc_E590                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+8C↓j
.text:000000000000E590                 MOV             X0, X19
.text:000000000000E594                 BL              ._ZN8tinyxml27XMLNode11DeleteChildEPS0_ ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:000000000000E598                 LDR             X1, [X19,#0x38]
.text:000000000000E59C                 CBNZ            X1, loc_E590
.text:000000000000E5A0 loc_E5A0                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+7C↑j
.text:000000000000E5A0                 LDR             W8, [X19,#0x16C]
.text:000000000000E5A4                 STP             XZR, XZR, [X20]
.text:000000000000E5A8                 CBZ             W8, loc_E5CC
.text:000000000000E5AC loc_E5AC                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong):loc_E5C8↓j
.text:000000000000E5AC                 SUB             W8, W8, #1
.text:000000000000E5B0                 LDR             X9, [X19,#0x110]
.text:000000000000E5B4                 STR             W8, [X19,#0x16C]
.text:000000000000E5B8                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000E5BC                 CBZ             X0, loc_E5C8
.text:000000000000E5C0                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000E5C4                 LDR             W8, [X19,#0x16C]
.text:000000000000E5C8 loc_E5C8                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+AC↑j
.text:000000000000E5C8                 CBNZ            W8, loc_E5AC
.text:000000000000E5CC loc_E5CC                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+98↑j
.text:000000000000E5CC                 LDR             W8, [X19,#0x1EC]
.text:000000000000E5D0                 STP             XZR, XZR, [X19,#0x170]
.text:000000000000E5D4                 STR             XZR, [X19,#0x180]
.text:000000000000E5D8                 CBZ             W8, loc_E5FC
.text:000000000000E5DC loc_E5DC                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong):loc_E5F8↓j
.text:000000000000E5DC                 SUB             W8, W8, #1
.text:000000000000E5E0                 LDR             X9, [X19,#0x190]
.text:000000000000E5E4                 STR             W8, [X19,#0x1EC]
.text:000000000000E5E8                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000E5EC                 CBZ             X0, loc_E5F8
.text:000000000000E5F0                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000E5F4                 LDR             W8, [X19,#0x1EC]
.text:000000000000E5F8 loc_E5F8                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+DC↑j
.text:000000000000E5F8                 CBNZ            W8, loc_E5DC
.text:000000000000E5FC loc_E5FC                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+C8↑j
.text:000000000000E5FC                 LDR             W8, [X19,#0x26C]
.text:000000000000E600                 STP             XZR, XZR, [X19,#0x1F0]
.text:000000000000E604                 STR             XZR, [X19,#0x200]
.text:000000000000E608                 CBZ             W8, loc_E62C
.text:000000000000E60C loc_E60C                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong):loc_E628↓j
.text:000000000000E60C                 SUB             W8, W8, #1
.text:000000000000E610                 LDR             X9, [X19,#0x210]
.text:000000000000E614                 STR             W8, [X19,#0x26C]
.text:000000000000E618                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000E61C                 CBZ             X0, loc_E628
.text:000000000000E620                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000E624                 LDR             W8, [X19,#0x26C]
.text:000000000000E628 loc_E628                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+10C↑j
.text:000000000000E628                 CBNZ            W8, loc_E60C
.text:000000000000E62C loc_E62C                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+F8↑j
.text:000000000000E62C                 LDR             W8, [X19,#0x2EC]
.text:000000000000E630                 STR             XZR, [X19,#0x278]
.text:000000000000E634                 STR             XZR, [X19,#0x270]
.text:000000000000E638                 STR             XZR, [X19,#0x280]
.text:000000000000E63C                 CBZ             W8, loc_E660
.text:000000000000E640 loc_E640                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong):loc_E65C↓j
.text:000000000000E640                 SUB             W8, W8, #1
.text:000000000000E644                 LDR             X9, [X19,#0x290]
.text:000000000000E648                 STR             W8, [X19,#0x2EC]
.text:000000000000E64C                 LDR             X0, [X9,W8,SXTW#3] ; void *
.text:000000000000E650                 CBZ             X0, loc_E65C
.text:000000000000E654                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000000E658                 LDR             W8, [X19,#0x2EC]
.text:000000000000E65C loc_E65C                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+140↑j
.text:000000000000E65C                 CBNZ            W8, loc_E640
.text:000000000000E660 loc_E660                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+12C↑j
.text:000000000000E660                 STR             XZR, [X19,#0x2F8]
.text:000000000000E664                 STR             XZR, [X19,#0x2F0]
.text:000000000000E668                 STR             XZR, [X19,#0x300]
.text:000000000000E66C                 B               loc_E684
.text:000000000000E670 ; ---------------------------------------------------------------------------
.text:000000000000E670 loc_E670                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+20↑j
.text:000000000000E670                                         ; tinyxml2::XMLDocument::Parse(char const*,ulong)+24↑j ...
.text:000000000000E670                 MOV             W1, #0xD
.text:000000000000E674                 MOV             X0, X19
.text:000000000000E678                 MOV             W2, WZR
.text:000000000000E67C                 MOV             X3, XZR
.text:000000000000E680                 BL              ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000E684 loc_E684                                ; CODE XREF: tinyxml2::XMLDocument::Parse(char const*,ulong)+70↑j
.text:000000000000E684                                         ; tinyxml2::XMLDocument::Parse(char const*,ulong)+15C↑j
.text:000000000000E684                 LDR             W0, [X19,#0x6C]
.text:000000000000E688                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000E68C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000E690                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000E694                 RET
.text:000000000000E694 ; } // starts at E510
.text:000000000000E694 ; End of function tinyxml2::XMLDocument::Parse(char const*,ulong)
.text:000000000000E698 ; =============== S U B R O U T I N E =======================================
.text:000000000000E698 ; tinyxml2::XMLDocument::ErrorIDToName(tinyxml2::XMLError)
.text:000000000000E698                 EXPORT _ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE
.text:000000000000E698 _ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE
.text:000000000000E698                                         ; DATA XREF: LOAD:0000000000000D68↑o
.text:000000000000E698 ; __unwind {
.text:000000000000E698                 ADRP            X8, #_ZN8tinyxml211XMLDocument11_errorNamesE_ptr@PAGE
.text:000000000000E69C                 LDR             X8, [X8,#_ZN8tinyxml211XMLDocument11_errorNamesE_ptr@PAGEOFF]
.text:000000000000E6A0                 LDR             X0, [X8,W0,UXTW#3]
.text:000000000000E6A4                 RET
.text:000000000000E6A4 ; } // starts at E698
.text:000000000000E6A4 ; End of function tinyxml2::XMLDocument::ErrorIDToName(tinyxml2::XMLError)
.text:000000000000E6A8 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6A8 ; __int64 __fastcall tinyxml2::XMLDocument::ErrorStr(tinyxml2::XMLDocument *__hidden this)
.text:000000000000E6A8                 EXPORT _ZNK8tinyxml211XMLDocument8ErrorStrEv
.text:000000000000E6A8 _ZNK8tinyxml211XMLDocument8ErrorStrEv   ; DATA XREF: LOAD:00000000000008A0↑o
.text:000000000000E6A8 ; __unwind {
.text:000000000000E6A8                 LDP             X8, X9, [X0,#0x80]
.text:000000000000E6AC                 CMP             X8, X9
.text:000000000000E6B0                 B.EQ            loc_E6BC
.text:000000000000E6B4                 ADD             X0, X0, #0x78 ; 'x' ; this
.text:000000000000E6B8                 B               ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000E6BC ; ---------------------------------------------------------------------------
.text:000000000000E6BC loc_E6BC                                ; CODE XREF: tinyxml2::XMLDocument::ErrorStr(void)+8↑j
.text:000000000000E6BC                 ADRP            X0, #unk_51A1@PAGE
.text:000000000000E6C0                 ADD             X0, X0, #unk_51A1@PAGEOFF
.text:000000000000E6C4                 RET
.text:000000000000E6C4 ; } // starts at E6A8
.text:000000000000E6C4 ; End of function tinyxml2::XMLDocument::ErrorStr(void)
.text:000000000000E6C8 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6C8 ; __int64 __fastcall tinyxml2::XMLDocument::PrintError(tinyxml2::XMLDocument *__hidden this)
.text:000000000000E6C8                 EXPORT _ZNK8tinyxml211XMLDocument10PrintErrorEv
.text:000000000000E6C8 _ZNK8tinyxml211XMLDocument10PrintErrorEv
.text:000000000000E6C8                                         ; DATA XREF: LOAD:0000000000000840↑o
.text:000000000000E6C8 var_10          = -0x10
.text:000000000000E6C8 ; __unwind {
.text:000000000000E6C8                 LDP             X8, X9, [X0,#0x80]
.text:000000000000E6CC                 CMP             X8, X9
.text:000000000000E6D0                 B.EQ            loc_E6EC
.text:000000000000E6D4                 STP             X29, X30, [SP,#var_10]!
.text:000000000000E6D8                 MOV             X29, SP
.text:000000000000E6DC                 ADD             X0, X0, #0x78 ; 'x' ; this
.text:000000000000E6E0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000E6E4                 LDP             X29, X30, [SP+0x10+var_10],#0x10
.text:000000000000E6E8                 B               .puts
.text:000000000000E6EC ; ---------------------------------------------------------------------------
.text:000000000000E6EC loc_E6EC                                ; CODE XREF: tinyxml2::XMLDocument::PrintError(void)+8↑j
.text:000000000000E6EC                 ADRP            X0, #unk_51A1@PAGE
.text:000000000000E6F0                 ADD             X0, X0, #unk_51A1@PAGEOFF ; s
.text:000000000000E6F4                 B               .puts
.text:000000000000E6F4 ; } // starts at E6C8
.text:000000000000E6F4 ; End of function tinyxml2::XMLDocument::PrintError(void)
.text:000000000000E6F8 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6F8 ; __int64 __fastcall tinyxml2::XMLDocument::ErrorName(tinyxml2::XMLDocument *__hidden this)
.text:000000000000E6F8                 EXPORT _ZNK8tinyxml211XMLDocument9ErrorNameEv
.text:000000000000E6F8 _ZNK8tinyxml211XMLDocument9ErrorNameEv  ; DATA XREF: LOAD:0000000000000780↑o
.text:000000000000E6F8 ; __unwind {
.text:000000000000E6F8                 ADRP            X8, #_ZN8tinyxml211XMLDocument11_errorNamesE_ptr@PAGE
.text:000000000000E6FC                 LDR             X8, [X8,#_ZN8tinyxml211XMLDocument11_errorNamesE_ptr@PAGEOFF]
.text:000000000000E700                 LDR             W9, [X0,#0x6C]
.text:000000000000E704                 LDR             X0, [X8,X9,LSL#3]
.text:000000000000E708                 RET
.text:000000000000E708 ; } // starts at E6F8
.text:000000000000E708 ; End of function tinyxml2::XMLDocument::ErrorName(void)
.text:000000000000E708 ; ---------------------------------------------------------------------------
.text:000000000000E70C                 ALIGN 0x10
.text:000000000000E710 ; =============== S U B R O U T I N E =======================================
.text:000000000000E710 ; __int64 __fastcall tinyxml2::XMLDocument::PushDepth(tinyxml2::XMLDocument *__hidden this)
.text:000000000000E710                 EXPORT _ZN8tinyxml211XMLDocument9PushDepthEv
.text:000000000000E710 _ZN8tinyxml211XMLDocument9PushDepthEv   ; DATA XREF: LOAD:0000000000001680↑o
.text:000000000000E710 ; __unwind {
.text:000000000000E710                 LDR             W8, [X0,#0xA4]
.text:000000000000E714                 ADD             W8, W8, #1
.text:000000000000E718                 CMP             W8, #0x64 ; 'd'
.text:000000000000E71C                 STR             W8, [X0,#0xA4]
.text:000000000000E720                 B.NE            locret_E738
.text:000000000000E724                 LDR             W2, [X0,#0xA0]
.text:000000000000E728                 ADRP            X3, #aElementNesting@PAGE ; "Element nesting is too deep."
.text:000000000000E72C                 MOV             W1, #0x12
.text:000000000000E730                 ADD             X3, X3, #aElementNesting@PAGEOFF ; "Element nesting is too deep."
.text:000000000000E734                 B               ._ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz ; tinyxml2::XMLDocument::SetError(tinyxml2::XMLError,int,char const*,...)
.text:000000000000E738 ; ---------------------------------------------------------------------------
.text:000000000000E738 locret_E738                             ; CODE XREF: tinyxml2::XMLDocument::PushDepth(void)+10↑j
.text:000000000000E738                 RET
.text:000000000000E738 ; } // starts at E710
.text:000000000000E738 ; End of function tinyxml2::XMLDocument::PushDepth(void)
.text:000000000000E738 ; ---------------------------------------------------------------------------
.text:000000000000E73C                 ALIGN 0x20
.text:000000000000E740 ; =============== S U B R O U T I N E =======================================
.text:000000000000E740 ; __int64 __fastcall tinyxml2::XMLDocument::PopDepth(tinyxml2::XMLDocument *__hidden this)
.text:000000000000E740                 EXPORT _ZN8tinyxml211XMLDocument8PopDepthEv
.text:000000000000E740 _ZN8tinyxml211XMLDocument8PopDepthEv    ; DATA XREF: LOAD:0000000000000A80↑o
.text:000000000000E740 ; __unwind {
.text:000000000000E740                 LDR             W8, [X0,#0xA4]
.text:000000000000E744                 SUB             W8, W8, #1
.text:000000000000E748                 STR             W8, [X0,#0xA4]
.text:000000000000E74C                 RET
.text:000000000000E74C ; } // starts at E740
.text:000000000000E74C ; End of function tinyxml2::XMLDocument::PopDepth(void)
.text:000000000000E750 ; =============== S U B R O U T I N E =======================================
.text:000000000000E750 ; tinyxml2::XMLPrinter::XMLPrinter(__sFILE *, bool, int)
.text:000000000000E750                 EXPORT _ZN8tinyxml210XMLPrinterC2EP7__sFILEbi
.text:000000000000E750 _ZN8tinyxml210XMLPrinterC2EP7__sFILEbi  ; DATA XREF: LOAD:00000000000009D8↑o
.text:000000000000E750                                         ; LOAD:0000000000000BB8↑o
.text:000000000000E750 ; __unwind {
.text:000000000000E750                 ADRP            X9, #_ZTVN8tinyxml210XMLPrinterE_ptr@PAGE
.text:000000000000E754                 MOVI            V0.2D, #0
.text:000000000000E758                 ADRP            X8, #qword_4E80@PAGE
.text:000000000000E75C                 AND             W10, W2, #1
.text:000000000000E760                 LDR             X9, [X9,#_ZTVN8tinyxml210XMLPrinterE_ptr@PAGEOFF]
.text:000000000000E764                 MOV             W11, #0x14
.text:000000000000E768                 LDR             D1, [X8,#qword_4E80@PAGEOFF]
.text:000000000000E76C                 ADD             X8, X0, #0x18
.text:000000000000E770                 STRB            WZR, [X0,#8]
.text:000000000000E774                 STR             X1, [X0,#0x78]
.text:000000000000E778                 ADD             X9, X9, #0x10
.text:000000000000E77C                 STR             X8, [X0,#0x10]
.text:000000000000E780                 MOV             W8, #1
.text:000000000000E784                 STR             D1, [X0,#0x68]
.text:000000000000E788                 STRB            W10, [X0,#0x89]
.text:000000000000E78C                 STR             X9, [X0]
.text:000000000000E790                 MOV             W9, #0xFFFFFFFF
.text:000000000000E794                 STRB            W8, [X0,#0x70]
.text:000000000000E798                 STRB            W8, [X0,#0x88]
.text:000000000000E79C                 STP             W3, W9, [X0,#0x80]
.text:000000000000E7A0                 ADD             X9, X0, #0x118
.text:000000000000E7A4                 STR             W11, [X0,#0x12C]
.text:000000000000E7A8                 STUR            Q0, [X0,#0xFA]
.text:000000000000E7AC                 STR             X9, [X0,#0x110]
.text:000000000000E7B0                 MOV             W9, #0x101
.text:000000000000E7B4                 STUR            Q0, [X0,#0xEA]
.text:000000000000E7B8                 STUR            Q0, [X0,#0xDA]
.text:000000000000E7BC                 STUR            Q0, [X0,#0xCA]
.text:000000000000E7C0                 STUR            Q0, [X0,#0xBA]
.text:000000000000E7C4                 STUR            Q0, [X0,#0xAA]
.text:000000000000E7C8                 STUR            Q0, [X0,#0x9A]
.text:000000000000E7CC                 STUR            Q0, [X0,#0x8A]
.text:000000000000E7D0                 STRB            W8, [X0,#0xAC]
.text:000000000000E7D4                 STRH            W9, [X0,#0xB0]
.text:000000000000E7D8                 STRB            W8, [X0,#0xC6]
.text:000000000000E7DC                 STRB            W8, [X0,#0xC8]
.text:000000000000E7E0                 STRB            W8, [X0,#0xF0]
.text:000000000000E7E4                 STRB            W8, [X0,#0x106]
.text:000000000000E7E8                 STRB            W8, [X0,#0x108]
.text:000000000000E7EC                 STRB            WZR, [X0,#0x118]
.text:000000000000E7F0                 STR             W8, [X0,#0x130]
.text:000000000000E7F4                 RET
.text:000000000000E7F4 ; } // starts at E750
.text:000000000000E7F4 ; End of function tinyxml2::XMLPrinter::XMLPrinter(__sFILE *,bool,int)
.text:000000000000E7F8 ; =============== S U B R O U T I N E =======================================
.text:000000000000E7F8 ; Attributes: bp-based frame
.text:000000000000E7F8 ; _QWORD tinyxml2::XMLPrinter::Print(tinyxml2::XMLPrinter *__hidden this, const char *, ...)
.text:000000000000E7F8                 EXPORT _ZN8tinyxml210XMLPrinter5PrintEPKcz
.text:000000000000E7F8 _ZN8tinyxml210XMLPrinter5PrintEPKcz     ; DATA XREF: LOAD:00000000000013B0↑o
.text:000000000000E7F8 var_170         = -0x170
.text:000000000000E7F8 var_150         = -0x150
.text:000000000000E7F8 var_130         = -0x130
.text:000000000000E7F8 var_110         = -0x110
.text:000000000000E7F8 var_F0          = -0xF0
.text:000000000000E7F8 var_E0          = -0xE0
.text:000000000000E7F8 var_D0          = -0xD0
.text:000000000000E7F8 arg             = -0xC0
.text:000000000000E7F8 var_A0          = -0xA0
.text:000000000000E7F8 var_90          = -0x90
.text:000000000000E7F8 var_80          = -0x80
.text:000000000000E7F8 var_58          = -0x58
.text:000000000000E7F8 var_50          = -0x50
.text:000000000000E7F8 var_40          = -0x40
.text:000000000000E7F8 var_30          = -0x30
.text:000000000000E7F8 var_20          = -0x20
.text:000000000000E7F8 var_10          = -0x10
.text:000000000000E7F8 var_s0          =  0
.text:000000000000E7F8 ; __unwind {
.text:000000000000E7F8                 SUB             SP, SP, #0x180
.text:000000000000E7FC                 STR             X28, [SP,#0x170+var_50]
.text:000000000000E800                 STP             X26, X25, [SP,#0x170+var_40]
.text:000000000000E804                 STP             X24, X23, [SP,#0x170+var_30]
.text:000000000000E808                 STP             X22, X21, [SP,#0x170+var_20]
.text:000000000000E80C                 STP             X20, X19, [SP,#0x170+var_10]
.text:000000000000E810                 STP             X29, X30, [SP,#0x170+var_s0]
.text:000000000000E814                 ADD             X29, SP, #0x170
.text:000000000000E818                 MRS             X24, #3, c13, c0, #2
.text:000000000000E81C                 STP             Q6, Q7, [SP,#0x170+var_110]
.text:000000000000E820                 STP             Q4, Q5, [SP,#0x170+var_130]
.text:000000000000E824                 MOV             X20, X0
.text:000000000000E828                 STP             Q2, Q3, [SP,#0x170+var_150]
.text:000000000000E82C                 MOV             X22, #0xFFFFFFFFFFFFFFD0
.text:000000000000E830                 STP             Q0, Q1, [SP,#0x170+var_170]
.text:000000000000E834                 MOV             X9, SP
.text:000000000000E838                 STP             X6, X7, [SP,#0x170+var_D0]
.text:000000000000E83C                 MOV             X19, X1
.text:000000000000E840                 STP             X4, X5, [SP,#0x170+var_E0]
.text:000000000000E844                 MOVK            X22, #0xFF80,LSL#32
.text:000000000000E848                 STP             X2, X3, [SP,#0x170+var_F0]
.text:000000000000E84C                 ADD             X23, X9, #0x80
.text:000000000000E850                 LDR             X8, [X24,#0x28]
.text:000000000000E854                 ADD             X26, X29, #0x10
.text:000000000000E858                 STUR            X8, [X29,#var_58]
.text:000000000000E85C                 ADD             X8, SP, #0x170+var_F0
.text:000000000000E860                 LDR             X0, [X0,#0x78] ; s
.text:000000000000E864                 ADD             X25, X8, #0x30 ; '0'
.text:000000000000E868                 STP             X23, X22, [X29,#var_90]
.text:000000000000E86C                 STP             X26, X25, [X29,#var_A0]
.text:000000000000E870                 CBZ             X0, loc_E88C
.text:000000000000E874                 LDP             Q1, Q0, [X29,#var_A0]
.text:000000000000E878                 ADD             X2, SP, #0x170+arg ; arg
.text:000000000000E87C                 MOV             X1, X19 ; format
.text:000000000000E880                 STP             Q1, Q0, [SP,#0x170+arg]
.text:000000000000E884                 BL              .vfprintf
.text:000000000000E888                 B               loc_E94C
.text:000000000000E88C ; ---------------------------------------------------------------------------
.text:000000000000E88C loc_E88C                                ; CODE XREF: tinyxml2::XMLPrinter::Print(char const*,...)+78↑j
.text:000000000000E88C                 LDP             Q1, Q0, [X29,#var_A0]
.text:000000000000E890                 MOV             X3, #0xFFFFFFFFFFFFFFFF
.text:000000000000E894                 SUB             X5, X29, #-var_80
.text:000000000000E898                 MOV             X1, XZR
.text:000000000000E89C                 MOV             W2, WZR
.text:000000000000E8A0                 STP             Q1, Q0, [X29,#var_80]
.text:000000000000E8A4                 MOV             X4, X19
.text:000000000000E8A8                 BL              .__vsnprintf_chk
.text:000000000000E8AC                 LDR             W8, [X20,#0x130]
.text:000000000000E8B0                 MOV             W21, W0
.text:000000000000E8B4                 LDR             W10, [X20,#0x12C]
.text:000000000000E8B8                 STP             X23, X22, [X29,#var_90]
.text:000000000000E8BC                 STP             X26, X25, [X29,#var_A0]
.text:000000000000E8C0                 ADD             W9, W8, W0
.text:000000000000E8C4                 CMP             W10, W9
.text:000000000000E8C8                 B.GE            loc_E918
.text:000000000000E8CC                 LSL             W25, W9, #1
.text:000000000000E8D0                 SXTW            X0, W25 ; unsigned __int64
.text:000000000000E8D4                 SXTW            X23, W8
.text:000000000000E8D8                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000E8DC                 LDR             X1, [X20,#0x110] ; src
.text:000000000000E8E0                 MOV             X2, X23 ; n
.text:000000000000E8E4                 MOV             X22, X0
.text:000000000000E8E8                 BL              .memcpy
.text:000000000000E8EC                 LDR             X0, [X20,#0x110] ; void *
.text:000000000000E8F0                 ADD             X8, X20, #0x118
.text:000000000000E8F4                 CMP             X0, X8
.text:000000000000E8F8                 B.EQ            loc_E904
.text:000000000000E8FC                 CBZ             X0, loc_E904
.text:000000000000E900                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000E904 loc_E904                                ; CODE XREF: tinyxml2::XMLPrinter::Print(char const*,...)+100↑j
.text:000000000000E904                                         ; tinyxml2::XMLPrinter::Print(char const*,...)+104↑j
.text:000000000000E904                 LDR             W8, [X20,#0x130]
.text:000000000000E908                 STR             X22, [X20,#0x110]
.text:000000000000E90C                 STR             W25, [X20,#0x12C]
.text:000000000000E910                 ADD             W9, W8, W21
.text:000000000000E914                 B               loc_E91C
.text:000000000000E918 ; ---------------------------------------------------------------------------
.text:000000000000E918 loc_E918                                ; CODE XREF: tinyxml2::XMLPrinter::Print(char const*,...)+D0↑j
.text:000000000000E918                 LDR             X22, [X20,#0x110]
.text:000000000000E91C loc_E91C                                ; CODE XREF: tinyxml2::XMLPrinter::Print(char const*,...)+11C↑j
.text:000000000000E91C                 LDP             Q1, Q0, [X29,#var_A0]
.text:000000000000E920                 ADD             X8, X22, W8,SXTW
.text:000000000000E924                 ADD             W10, W21, #1
.text:000000000000E928                 STR             W9, [X20,#0x130]
.text:000000000000E92C                 SUB             X0, X8, #1
.text:000000000000E930                 MOV             X3, #0xFFFFFFFFFFFFFFFF
.text:000000000000E934                 STP             Q1, Q0, [X29,#var_80]
.text:000000000000E938                 SUB             X5, X29, #-var_80
.text:000000000000E93C                 MOV             W2, WZR
.text:000000000000E940                 MOV             X4, X19
.text:000000000000E944                 SXTW            X1, W10
.text:000000000000E948                 BL              .__vsnprintf_chk
.text:000000000000E94C loc_E94C                                ; CODE XREF: tinyxml2::XMLPrinter::Print(char const*,...)+90↑j
.text:000000000000E94C                 LDR             X8, [X24,#0x28]
.text:000000000000E950                 LDUR            X9, [X29,#var_58]
.text:000000000000E954                 CMP             X8, X9
.text:000000000000E958                 B.NE            loc_E97C
.text:000000000000E95C                 LDP             X29, X30, [SP,#0x170+var_s0]
.text:000000000000E960                 LDP             X20, X19, [SP,#0x170+var_10]
.text:000000000000E964                 LDP             X22, X21, [SP,#0x170+var_20]
.text:000000000000E968                 LDP             X24, X23, [SP,#0x170+var_30]
.text:000000000000E96C                 LDP             X26, X25, [SP,#0x170+var_40]
.text:000000000000E970                 LDR             X28, [SP,#0x170+var_50]
.text:000000000000E974                 ADD             SP, SP, #0x180
.text:000000000000E978                 RET
.text:000000000000E97C ; ---------------------------------------------------------------------------
.text:000000000000E97C loc_E97C                                ; CODE XREF: tinyxml2::XMLPrinter::Print(char const*,...)+160↑j
.text:000000000000E97C                 BL              .__stack_chk_fail
.text:000000000000E97C ; } // starts at E7F8
.text:000000000000E97C ; End of function tinyxml2::XMLPrinter::Print(char const*,...)
.text:000000000000E980 ; =============== S U B R O U T I N E =======================================
.text:000000000000E980 ; Attributes: bp-based frame
.text:000000000000E980 ; _QWORD __fastcall tinyxml2::XMLPrinter::Write(tinyxml2::XMLPrinter *__hidden this, const char *, unsigned __int64)
.text:000000000000E980                 EXPORT _ZN8tinyxml210XMLPrinter5WriteEPKcm
.text:000000000000E980 _ZN8tinyxml210XMLPrinter5WriteEPKcm     ; CODE XREF: tinyxml2::XMLPrinter::Write(char const*,ulong)+C↓j
.text:000000000000E980                                         ; DATA XREF: LOAD:00000000000017E8↑o ...
.text:000000000000E980 var_30          = -0x30
.text:000000000000E980 var_20          = -0x20
.text:000000000000E980 var_10          = -0x10
.text:000000000000E980 var_s0          =  0
.text:000000000000E980 ; __unwind {
.text:000000000000E980                 STP             X24, X23, [SP,#-0x10+var_30]!
.text:000000000000E984                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000E988                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000E98C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000E990                 ADD             X29, SP, #0x30
.text:000000000000E994                 LDR             X3, [X0,#0x78] ; s
.text:000000000000E998                 MOV             X19, X2
.text:000000000000E99C                 MOV             X20, X1
.text:000000000000E9A0                 CBZ             X3, loc_E9C4
.text:000000000000E9A4                 MOV             X0, X20 ; ptr
.text:000000000000E9A8                 MOV             X2, X19 ; n
.text:000000000000E9AC                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000E9B0                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000E9B4                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000E9B8                 MOV             W1, #1  ; size
.text:000000000000E9BC                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:000000000000E9C0                 B               .fwrite
.text:000000000000E9C4 ; ---------------------------------------------------------------------------
.text:000000000000E9C4 loc_E9C4                                ; CODE XREF: tinyxml2::XMLPrinter::Write(char const*,ulong)+20↑j
.text:000000000000E9C4                 LDR             W8, [X0,#0x130]
.text:000000000000E9C8                 MOV             X21, X0
.text:000000000000E9CC                 LDR             W10, [X0,#0x12C]
.text:000000000000E9D0                 ADD             W9, W8, W19
.text:000000000000E9D4                 CMP             W10, W9
.text:000000000000E9D8                 B.GE            loc_EA28
.text:000000000000E9DC                 LSL             W24, W9, #1
.text:000000000000E9E0                 SXTW            X0, W24 ; unsigned __int64
.text:000000000000E9E4                 SXTW            X23, W8
.text:000000000000E9E8                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000E9EC                 LDR             X1, [X21,#0x110] ; src
.text:000000000000E9F0                 MOV             X2, X23 ; n
.text:000000000000E9F4                 MOV             X22, X0
.text:000000000000E9F8                 BL              .memcpy
.text:000000000000E9FC                 LDR             X0, [X21,#0x110] ; void *
.text:000000000000EA00                 ADD             X8, X21, #0x118
.text:000000000000EA04                 CMP             X0, X8
.text:000000000000EA08                 B.EQ            loc_EA14
.text:000000000000EA0C                 CBZ             X0, loc_EA14
.text:000000000000EA10                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000EA14 loc_EA14                                ; CODE XREF: tinyxml2::XMLPrinter::Write(char const*,ulong)+88↑j
.text:000000000000EA14                                         ; tinyxml2::XMLPrinter::Write(char const*,ulong)+8C↑j
.text:000000000000EA14                 LDR             W8, [X21,#0x130]
.text:000000000000EA18                 STR             X22, [X21,#0x110]
.text:000000000000EA1C                 STR             W24, [X21,#0x12C]
.text:000000000000EA20                 ADD             W9, W8, W19
.text:000000000000EA24                 B               loc_EA2C
.text:000000000000EA28 ; ---------------------------------------------------------------------------
.text:000000000000EA28 loc_EA28                                ; CODE XREF: tinyxml2::XMLPrinter::Write(char const*,ulong)+58↑j
.text:000000000000EA28                 LDR             X22, [X21,#0x110]
.text:000000000000EA2C loc_EA2C                                ; CODE XREF: tinyxml2::XMLPrinter::Write(char const*,ulong)+A4↑j
.text:000000000000EA2C                 ADD             X8, X22, W8,SXTW
.text:000000000000EA30                 STR             W9, [X21,#0x130]
.text:000000000000EA34                 SUB             X22, X8, #1
.text:000000000000EA38                 MOV             X0, X22 ; dest
.text:000000000000EA3C                 MOV             X1, X20 ; src
.text:000000000000EA40                 MOV             X2, X19 ; n
.text:000000000000EA44                 BL              .memcpy
.text:000000000000EA48                 STRB            WZR, [X22,X19]
.text:000000000000EA4C                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000EA50                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000EA54                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000EA58                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:000000000000EA5C                 RET
.text:000000000000EA5C ; } // starts at E980
.text:000000000000EA5C ; End of function tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000EA60 ; Attributes: bp-based frame
.text:000000000000EA60 ; __int64 __fastcall tinyxml2::XMLPrinter::Putc(tinyxml2::XMLPrinter *__hidden this, char)
.text:000000000000EA60                 EXPORT _ZN8tinyxml210XMLPrinter4PutcEc
.text:000000000000EA60 _ZN8tinyxml210XMLPrinter4PutcEc         ; CODE XREF: tinyxml2::XMLPrinter::Putc(char)+C↓j
.text:000000000000EA60                                         ; DATA XREF: LOAD:0000000000000B40↑o ...
.text:000000000000EA60 var_30          = -0x30
.text:000000000000EA60 var_20          = -0x20
.text:000000000000EA60 var_10          = -0x10
.text:000000000000EA60 var_s0          =  0
.text:000000000000EA60 ; __unwind {
.text:000000000000EA60                 STR             X23, [SP,#-0x10+var_30]!
.text:000000000000EA64                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000EA68                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000EA6C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000EA70                 ADD             X29, SP, #0x30
.text:000000000000EA74                 LDR             X8, [X0,#0x78]
.text:000000000000EA78                 MOV             W19, W1
.text:000000000000EA7C                 CBZ             X8, loc_EA9C
.text:000000000000EA80                 AND             W0, W19, #0xFF ; c
.text:000000000000EA84                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000EA88                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000EA8C                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000EA90                 MOV             X1, X8  ; stream
.text:000000000000EA94                 LDR             X23, [SP+0x30+var_30],#0x40
.text:000000000000EA98                 B               .fputc
.text:000000000000EA9C ; ---------------------------------------------------------------------------
.text:000000000000EA9C loc_EA9C                                ; CODE XREF: tinyxml2::XMLPrinter::Putc(char)+1C↑j
.text:000000000000EA9C                 LDR             W8, [X0,#0x130]
.text:000000000000EAA0                 MOV             X20, X0
.text:000000000000EAA4                 LDR             W10, [X0,#0x12C]
.text:000000000000EAA8                 ADD             W9, W8, #1
.text:000000000000EAAC                 CMP             W10, W8
.text:000000000000EAB0                 B.LE            loc_EABC
.text:000000000000EAB4                 LDR             X21, [X20,#0x110]
.text:000000000000EAB8                 B               loc_EB04
.text:000000000000EABC ; ---------------------------------------------------------------------------
.text:000000000000EABC loc_EABC                                ; CODE XREF: tinyxml2::XMLPrinter::Putc(char)+50↑j
.text:000000000000EABC                 LSL             W23, W9, #1
.text:000000000000EAC0                 SXTW            X0, W23 ; unsigned __int64
.text:000000000000EAC4                 SXTW            X22, W8
.text:000000000000EAC8                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000EACC                 LDR             X1, [X20,#0x110] ; src
.text:000000000000EAD0                 MOV             X2, X22 ; n
.text:000000000000EAD4                 MOV             X21, X0
.text:000000000000EAD8                 BL              .memcpy
.text:000000000000EADC                 LDR             X0, [X20,#0x110] ; void *
.text:000000000000EAE0                 ADD             X8, X20, #0x118
.text:000000000000EAE4                 CMP             X0, X8
.text:000000000000EAE8                 B.EQ            loc_EAF4
.text:000000000000EAEC                 CBZ             X0, loc_EAF4
.text:000000000000EAF0                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000EAF4 loc_EAF4                                ; CODE XREF: tinyxml2::XMLPrinter::Putc(char)+88↑j
.text:000000000000EAF4                                         ; tinyxml2::XMLPrinter::Putc(char)+8C↑j
.text:000000000000EAF4                 LDR             W8, [X20,#0x130]
.text:000000000000EAF8                 STR             X21, [X20,#0x110]
.text:000000000000EAFC                 STR             W23, [X20,#0x12C]
.text:000000000000EB00                 ADD             W9, W8, #1
.text:000000000000EB04 loc_EB04                                ; CODE XREF: tinyxml2::XMLPrinter::Putc(char)+58↑j
.text:000000000000EB04                 ADD             X8, X21, W8,SXTW
.text:000000000000EB08                 STR             W9, [X20,#0x130]
.text:000000000000EB0C                 STURB           W19, [X8,#-1]
.text:000000000000EB10                 STRB            WZR, [X8]
.text:000000000000EB14                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000EB18                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000EB1C                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000EB20                 LDR             X23, [SP+0x30+var_30],#0x40
.text:000000000000EB24                 RET
.text:000000000000EB24 ; } // starts at EA60
.text:000000000000EB24 ; End of function tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EB28 ; =============== S U B R O U T I N E =======================================
.text:000000000000EB28 ; Attributes: bp-based frame
.text:000000000000EB28 ; __int64 __fastcall tinyxml2::XMLPrinter::PrintSpace(tinyxml2::XMLPrinter *__hidden this, int)
.text:000000000000EB28                 EXPORT _ZN8tinyxml210XMLPrinter10PrintSpaceEi
.text:000000000000EB28 _ZN8tinyxml210XMLPrinter10PrintSpaceEi  ; DATA XREF: LOAD:0000000000000D20↑o
.text:000000000000EB28                                         ; .data.rel.ro:0000000000012490↓o
.text:000000000000EB28 var_20          = -0x20
.text:000000000000EB28 var_10          = -0x10
.text:000000000000EB28 var_s0          =  0
.text:000000000000EB28 ; __unwind {
.text:000000000000EB28                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000EB2C                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000EB30                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000EB34                 ADD             X29, SP, #0x20
.text:000000000000EB38                 CMP             W1, #1
.text:000000000000EB3C                 B.LT            loc_EB78
.text:000000000000EB40                 ADRP            X22, #asc_4FA6@PAGE ; "    "
.text:000000000000EB44                 MOV             W19, W1
.text:000000000000EB48                 MOV             X20, X0
.text:000000000000EB4C                 MOV             W21, #5
.text:000000000000EB50                 ADD             X22, X22, #asc_4FA6@PAGEOFF ; "    "
.text:000000000000EB54 loc_EB54                                ; CODE XREF: tinyxml2::XMLPrinter::PrintSpace(int)+4C↓j
.text:000000000000EB54                 MOV             X0, X22
.text:000000000000EB58                 MOV             X1, X21
.text:000000000000EB5C                 BL              .__strlen_chk
.text:000000000000EB60                 MOV             X2, X0  ; unsigned __int64
.text:000000000000EB64                 MOV             X0, X20 ; this
.text:000000000000EB68                 MOV             X1, X22 ; char *
.text:000000000000EB6C                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EB70                 SUBS            W19, W19, #1
.text:000000000000EB74                 B.NE            loc_EB54
.text:000000000000EB78 loc_EB78                                ; CODE XREF: tinyxml2::XMLPrinter::PrintSpace(int)+14↑j
.text:000000000000EB78                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000EB7C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000EB80                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:000000000000EB84                 RET
.text:000000000000EB84 ; } // starts at EB28
.text:000000000000EB84 ; End of function tinyxml2::XMLPrinter::PrintSpace(int)
.text:000000000000EB88 ; =============== S U B R O U T I N E =======================================
.text:000000000000EB88 ; Attributes: bp-based frame
.text:000000000000EB88 ; __int64 __fastcall tinyxml2::XMLPrinter::PrintString(tinyxml2::XMLPrinter *__hidden this, const char *, bool)
.text:000000000000EB88                 EXPORT _ZN8tinyxml210XMLPrinter11PrintStringEPKcb
.text:000000000000EB88 _ZN8tinyxml210XMLPrinter11PrintStringEPKcb
.text:000000000000EB88                                         ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+C↓j
.text:000000000000EB88                                         ; DATA XREF: LOAD:0000000000000F48↑o ...
.text:000000000000EB88 var_50          = -0x50
.text:000000000000EB88 var_40          = -0x40
.text:000000000000EB88 var_30          = -0x30
.text:000000000000EB88 var_20          = -0x20
.text:000000000000EB88 var_10          = -0x10
.text:000000000000EB88 var_s0          =  0
.text:000000000000EB88 ; __unwind {
.text:000000000000EB88                 STP             X28, X27, [SP,#-0x10+var_50]!
.text:000000000000EB8C                 STP             X26, X25, [SP,#0x50+var_40]
.text:000000000000EB90                 STP             X24, X23, [SP,#0x50+var_30]
.text:000000000000EB94                 STP             X22, X21, [SP,#0x50+var_20]
.text:000000000000EB98                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000000EB9C                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000EBA0                 ADD             X29, SP, #0x50
.text:000000000000EBA4                 LDRB            W8, [X0,#0x88]
.text:000000000000EBA8                 MOV             X20, X0
.text:000000000000EBAC                 MOV             X19, X1
.text:000000000000EBB0                 CBZ             W8, loc_ECE8
.text:000000000000EBB4                 ADD             X9, X20, #0xCA
.text:000000000000EBB8                 LDRB            W8, [X19]
.text:000000000000EBBC                 ADD             X10, X20, #0x8A
.text:000000000000EBC0                 TST             W2, #1
.text:000000000000EBC4                 CSEL            X24, X9, X10, NE
.text:000000000000EBC8                 CBZ             W8, loc_ECCC
.text:000000000000EBCC                 ADRP            X27, #unk_4E88@PAGE
.text:000000000000EBD0                 ADRP            X28, #off_12010@PAGE ; "quot"
.text:000000000000EBD4                 MOV             W25, #0x7FFFFFFF
.text:000000000000EBD8                 MOV             W21, #0x26 ; '&'
.text:000000000000EBDC                 MOV             W22, #0x3B ; ';'
.text:000000000000EBE0                 MOV             X26, X19
.text:000000000000EBE4                 ADD             X27, X27, #unk_4E88@PAGEOFF
.text:000000000000EBE8                 ADD             X28, X28, #off_12010@PAGEOFF ; "quot"
.text:000000000000EBEC loc_EBEC                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+124↓j
.text:000000000000EBEC                 AND             W9, W8, #0xFF
.text:000000000000EBF0                 CMP             W9, #0x3F ; '?'
.text:000000000000EBF4                 B.HI            loc_ECA8
.text:000000000000EBF8                 AND             X9, X8, #0xFF
.text:000000000000EBFC                 LDRB            W9, [X24,X9]
.text:000000000000EC00                 CBZ             W9, loc_ECA8
.text:000000000000EC04                 CMP             X19, X26
.text:000000000000EC08                 B.CS            loc_EC38
.text:000000000000EC0C loc_EC0C                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+A8↓j
.text:000000000000EC0C                 SUB             X8, X26, X19
.text:000000000000EC10                 CMP             X8, X25
.text:000000000000EC14                 CSEL            X23, X8, X25, CC
.text:000000000000EC18                 MOV             X0, X20 ; this
.text:000000000000EC1C                 MOV             X1, X19 ; char *
.text:000000000000EC20                 MOV             X2, X23 ; unsigned __int64
.text:000000000000EC24                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EC28                 ADD             X19, X19, X23
.text:000000000000EC2C                 CMP             X19, X26
.text:000000000000EC30                 B.CC            loc_EC0C
.text:000000000000EC34                 LDRB            W8, [X26]
.text:000000000000EC38 loc_EC38                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+80↑j
.text:000000000000EC38                 AND             W8, W8, #0xFF
.text:000000000000EC3C                 SUB             W8, W8, #0x22 ; '"'
.text:000000000000EC40                 CMP             W8, #0x1C
.text:000000000000EC44                 B.HI            loc_ECA4
.text:000000000000EC48                 ADR             X9, loc_EC5C
.text:000000000000EC4C                 LDRB            W10, [X27,X8]
.text:000000000000EC50                 ADD             X9, X9, X10,LSL#2
.text:000000000000EC54                 MOV             X23, XZR
.text:000000000000EC58                 BR              X9
.text:000000000000EC5C ; ---------------------------------------------------------------------------
.text:000000000000EC5C loc_EC5C                                ; DATA XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+C0↑o
.text:000000000000EC5C                 MOV             W23, #1
.text:000000000000EC60                 B               loc_EC78
.text:000000000000EC64 ; ---------------------------------------------------------------------------
.text:000000000000EC64                 MOV             W23, #2
.text:000000000000EC68                 B               loc_EC78
.text:000000000000EC6C ; ---------------------------------------------------------------------------
.text:000000000000EC6C                 MOV             W23, #3
.text:000000000000EC70                 B               loc_EC78
.text:000000000000EC74 ; ---------------------------------------------------------------------------
.text:000000000000EC74                 MOV             W23, #4
.text:000000000000EC78 loc_EC78                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+D8↑j
.text:000000000000EC78                                         ; tinyxml2::XMLPrinter::PrintString(char const*,bool)+E0↑j ...
.text:000000000000EC78                 MOV             X0, X20 ; this
.text:000000000000EC7C                 MOV             W1, W21 ; char
.text:000000000000EC80                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EC84                 ADD             X8, X28, X23,LSL#4
.text:000000000000EC88                 MOV             X0, X20 ; this
.text:000000000000EC8C                 LDR             X1, [X8] ; char *
.text:000000000000EC90                 LDRSW           X2, [X8,#8] ; unsigned __int64
.text:000000000000EC94                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EC98                 MOV             X0, X20 ; this
.text:000000000000EC9C                 MOV             W1, W22 ; char
.text:000000000000ECA0                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000ECA4 loc_ECA4                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+BC↑j
.text:000000000000ECA4                 ADD             X19, X19, #1
.text:000000000000ECA8 loc_ECA8                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+6C↑j
.text:000000000000ECA8                                         ; tinyxml2::XMLPrinter::PrintString(char const*,bool)+78↑j
.text:000000000000ECA8                 LDRB            W8, [X26,#1]!
.text:000000000000ECAC                 CBNZ            W8, loc_EBEC
.text:000000000000ECB0                 CMP             X19, X26
.text:000000000000ECB4                 B.CS            loc_ECCC
.text:000000000000ECB8                 SUB             X8, X26, X19
.text:000000000000ECBC                 MOV             W9, #0x7FFFFFFF
.text:000000000000ECC0                 CMP             X8, X9
.text:000000000000ECC4                 CSEL            X2, X8, X9, CC
.text:000000000000ECC8                 B               loc_ECF4
.text:000000000000ECCC ; ---------------------------------------------------------------------------
.text:000000000000ECCC loc_ECCC                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+40↑j
.text:000000000000ECCC                                         ; tinyxml2::XMLPrinter::PrintString(char const*,bool)+12C↑j
.text:000000000000ECCC                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000ECD0                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000000ECD4                 LDP             X22, X21, [SP,#0x50+var_20]
.text:000000000000ECD8                 LDP             X24, X23, [SP,#0x50+var_30]
.text:000000000000ECDC                 LDP             X26, X25, [SP,#0x50+var_40]
.text:000000000000ECE0                 LDP             X28, X27, [SP+0x50+var_50],#0x60
.text:000000000000ECE4                 RET
.text:000000000000ECE8 ; ---------------------------------------------------------------------------
.text:000000000000ECE8 loc_ECE8                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+28↑j
.text:000000000000ECE8                 MOV             X0, X19 ; s
.text:000000000000ECEC                 BL              .strlen
.text:000000000000ECF0                 MOV             X2, X0  ; unsigned __int64
.text:000000000000ECF4 loc_ECF4                                ; CODE XREF: tinyxml2::XMLPrinter::PrintString(char const*,bool)+140↑j
.text:000000000000ECF4                 MOV             X0, X20 ; this
.text:000000000000ECF8                 MOV             X1, X19 ; char *
.text:000000000000ECFC                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000000ED00                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000000ED04                 LDP             X22, X21, [SP,#0x50+var_20]
.text:000000000000ED08                 LDP             X24, X23, [SP,#0x50+var_30]
.text:000000000000ED0C                 LDP             X26, X25, [SP,#0x50+var_40]
.text:000000000000ED10                 LDP             X28, X27, [SP+0x50+var_50],#0x60
.text:000000000000ED14                 B               ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000ED14 ; } // starts at EB88
.text:000000000000ED14 ; End of function tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000ED18 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED18 ; Attributes: bp-based frame
.text:000000000000ED18 ; __int64 __fastcall tinyxml2::XMLPrinter::PushHeader(tinyxml2::XMLPrinter *__hidden this, bool, bool)
.text:000000000000ED18                 EXPORT _ZN8tinyxml210XMLPrinter10PushHeaderEbb
.text:000000000000ED18 _ZN8tinyxml210XMLPrinter10PushHeaderEbb ; DATA XREF: LOAD:0000000000000D08↑o
.text:000000000000ED18 var_20          = -0x20
.text:000000000000ED18 var_10          = -0x10
.text:000000000000ED18 var_s0          =  0
.text:000000000000ED18 ; __unwind {
.text:000000000000ED18                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000ED1C                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000ED20                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000ED24                 ADD             X29, SP, #0x20
.text:000000000000ED28                 MOV             W20, W2
.text:000000000000ED2C                 MOV             X19, X0
.text:000000000000ED30                 TBZ             W1, #0, loc_ED58
.text:000000000000ED34                 ADRP            X21, #unk_51B2@PAGE
.text:000000000000ED38                 ADD             X21, X21, #unk_51B2@PAGEOFF
.text:000000000000ED3C                 MOV             X0, X21
.text:000000000000ED40                 MOV             W1, #4
.text:000000000000ED44                 BL              .__strlen_chk
.text:000000000000ED48                 MOV             X2, X0  ; unsigned __int64
.text:000000000000ED4C                 MOV             X0, X19 ; this
.text:000000000000ED50                 MOV             X1, X21 ; char *
.text:000000000000ED54                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000ED58 loc_ED58                                ; CODE XREF: tinyxml2::XMLPrinter::PushHeader(bool,bool)+18↑j
.text:000000000000ED58                 TBZ             W20, #0, loc_ED78
.text:000000000000ED5C                 MOV             X0, X19 ; this
.text:000000000000ED60                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000ED64                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000ED68                 ADRP            X1, #aXmlVersion10@PAGE ; "xml version=\"1.0\""
.text:000000000000ED6C                 ADD             X1, X1, #aXmlVersion10@PAGEOFF ; "xml version=\"1.0\""
.text:000000000000ED70                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000ED74                 B               ._ZN8tinyxml210XMLPrinter15PushDeclarationEPKc ; tinyxml2::XMLPrinter::PushDeclaration(char const*)
.text:000000000000ED78 ; ---------------------------------------------------------------------------
.text:000000000000ED78 loc_ED78                                ; CODE XREF: tinyxml2::XMLPrinter::PushHeader(bool,bool):loc_ED58↑j
.text:000000000000ED78                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000ED7C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000ED80                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000ED84                 RET
.text:000000000000ED84 ; } // starts at ED18
.text:000000000000ED84 ; End of function tinyxml2::XMLPrinter::PushHeader(bool,bool)
.text:000000000000ED88 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED88 ; Attributes: bp-based frame
.text:000000000000ED88 ; __int64 __fastcall tinyxml2::XMLPrinter::PushDeclaration(tinyxml2::XMLPrinter *__hidden this, const char *)
.text:000000000000ED88                 EXPORT _ZN8tinyxml210XMLPrinter15PushDeclarationEPKc
.text:000000000000ED88 _ZN8tinyxml210XMLPrinter15PushDeclarationEPKc
.text:000000000000ED88                                         ; CODE XREF: tinyxml2::XMLPrinter::PushDeclaration(char const*)+C↓j
.text:000000000000ED88                                         ; DATA XREF: LOAD:00000000000014E8↑o ...
.text:000000000000ED88 var_20          = -0x20
.text:000000000000ED88 var_10          = -0x10
.text:000000000000ED88 var_s0          =  0
.text:000000000000ED88 ; __unwind {
.text:000000000000ED88                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000ED8C                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000ED90                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000ED94                 ADD             X29, SP, #0x20
.text:000000000000ED98                 LDRB            W8, [X0,#8]
.text:000000000000ED9C                 MOV             X19, X0
.text:000000000000EDA0                 MOV             X20, X1
.text:000000000000EDA4                 CBZ             W8, loc_EDB8
.text:000000000000EDA8                 MOV             X0, X19 ; this
.text:000000000000EDAC                 STRB            WZR, [X19,#8]
.text:000000000000EDB0                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000EDB4                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EDB8 loc_EDB8                                ; CODE XREF: tinyxml2::XMLPrinter::PushDeclaration(char const*)+1C↑j
.text:000000000000EDB8                 LDR             W8, [X19,#0x84]
.text:000000000000EDBC                 TBZ             W8, #0x1F, loc_EDF0
.text:000000000000EDC0                 LDRB            W8, [X19,#0x70]
.text:000000000000EDC4                 CBNZ            W8, loc_EDF0
.text:000000000000EDC8                 LDRB            W8, [X19,#0x89]
.text:000000000000EDCC                 CBNZ            W8, loc_EDF0
.text:000000000000EDD0                 MOV             W1, #0xA ; char
.text:000000000000EDD4                 MOV             X0, X19 ; this
.text:000000000000EDD8                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EDDC                 LDR             X8, [X19]
.text:000000000000EDE0                 MOV             X0, X19
.text:000000000000EDE4                 LDR             W1, [X19,#0x80]
.text:000000000000EDE8                 LDR             X8, [X8,#0x60]
.text:000000000000EDEC                 BLR             X8
.text:000000000000EDF0 loc_EDF0                                ; CODE XREF: tinyxml2::XMLPrinter::PushDeclaration(char const*)+34↑j
.text:000000000000EDF0                                         ; tinyxml2::XMLPrinter::PushDeclaration(char const*)+3C↑j ...
.text:000000000000EDF0                 ADRP            X21, #asc_4F28@PAGE ; "<?"
.text:000000000000EDF4                 STRB            WZR, [X19,#0x70]
.text:000000000000EDF8                 ADD             X21, X21, #asc_4F28@PAGEOFF ; "<?"
.text:000000000000EDFC                 MOV             X0, X21
.text:000000000000EE00                 MOV             W1, #3
.text:000000000000EE04                 BL              .__strlen_chk
.text:000000000000EE08                 MOV             X2, X0  ; unsigned __int64
.text:000000000000EE0C                 MOV             X0, X19 ; this
.text:000000000000EE10                 MOV             X1, X21 ; char *
.text:000000000000EE14                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EE18                 MOV             X0, X20 ; s
.text:000000000000EE1C                 BL              .strlen
.text:000000000000EE20                 MOV             X2, X0  ; unsigned __int64
.text:000000000000EE24                 MOV             X0, X19 ; this
.text:000000000000EE28                 MOV             X1, X20 ; char *
.text:000000000000EE2C                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EE30                 ADRP            X20, #asc_503D@PAGE ; "?>"
.text:000000000000EE34                 ADD             X20, X20, #asc_503D@PAGEOFF ; "?>"
.text:000000000000EE38                 MOV             X0, X20
.text:000000000000EE3C                 MOV             W1, #3
.text:000000000000EE40                 BL              .__strlen_chk
.text:000000000000EE44                 MOV             X2, X0  ; unsigned __int64
.text:000000000000EE48                 MOV             X0, X19 ; this
.text:000000000000EE4C                 MOV             X1, X20 ; char *
.text:000000000000EE50                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000EE54                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000EE58                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000EE5C                 B               ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EE5C ; } // starts at ED88
.text:000000000000EE5C ; End of function tinyxml2::XMLPrinter::PushDeclaration(char const*)
.text:000000000000EE60 ; =============== S U B R O U T I N E =======================================
.text:000000000000EE60 ; Attributes: bp-based frame
.text:000000000000EE60 ; __int64 __fastcall tinyxml2::XMLPrinter::OpenElement(tinyxml2::XMLPrinter *__hidden this, const char *, bool)
.text:000000000000EE60                 EXPORT _ZN8tinyxml210XMLPrinter11OpenElementEPKcb
.text:000000000000EE60 _ZN8tinyxml210XMLPrinter11OpenElementEPKcb
.text:000000000000EE60                                         ; CODE XREF: tinyxml2::XMLPrinter::OpenElement(char const*,bool)+C↓j
.text:000000000000EE60                                         ; DATA XREF: LOAD:0000000000000690↑o ...
.text:000000000000EE60 var_30          = -0x30
.text:000000000000EE60 var_20          = -0x20
.text:000000000000EE60 var_10          = -0x10
.text:000000000000EE60 var_s0          =  0
.text:000000000000EE60 ; __unwind {
.text:000000000000EE60                 STP             X24, X23, [SP,#-0x10+var_30]!
.text:000000000000EE64                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000EE68                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000EE6C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000EE70                 ADD             X29, SP, #0x30
.text:000000000000EE74                 LDRB            W8, [X0,#8]
.text:000000000000EE78                 MOV             W21, W2
.text:000000000000EE7C                 MOV             X19, X0
.text:000000000000EE80                 MOV             X20, X1
.text:000000000000EE84                 CBZ             W8, loc_EE98
.text:000000000000EE88                 MOV             X0, X19 ; this
.text:000000000000EE8C                 STRB            WZR, [X19,#8]
.text:000000000000EE90                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000EE94                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EE98 loc_EE98                                ; CODE XREF: tinyxml2::XMLPrinter::OpenElement(char const*,bool)+24↑j
.text:000000000000EE98                 LDP             W9, W8, [X19,#0x68]
.text:000000000000EE9C                 CMP             W9, W8
.text:000000000000EEA0                 B.LE            loc_EEAC
.text:000000000000EEA4                 LDR             X22, [X19,#0x10]
.text:000000000000EEA8                 B               loc_EF00
.text:000000000000EEAC ; ---------------------------------------------------------------------------
.text:000000000000EEAC loc_EEAC                                ; CODE XREF: tinyxml2::XMLPrinter::OpenElement(char const*,bool)+40↑j
.text:000000000000EEAC                 LSL             W9, W8, #1
.text:000000000000EEB0                 ADD             W23, W9, #2
.text:000000000000EEB4                 SXTW            X9, W23
.text:000000000000EEB8                 CMP             XZR, X9,LSR#61
.text:000000000000EEBC                 SBFIZ           X10, X23, #3, #0x20 ; ' '
.text:000000000000EEC0                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000EEC4                 SXTW            X24, W8
.text:000000000000EEC8                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000EECC                 LDR             X1, [X19,#0x10] ; src
.text:000000000000EED0                 LSL             X2, X24, #3 ; n
.text:000000000000EED4                 MOV             X22, X0
.text:000000000000EED8                 BL              .memcpy
.text:000000000000EEDC                 LDR             X0, [X19,#0x10] ; void *
.text:000000000000EEE0                 ADD             X8, X19, #0x18
.text:000000000000EEE4                 CMP             X0, X8
.text:000000000000EEE8                 B.EQ            loc_EEF4
.text:000000000000EEEC                 CBZ             X0, loc_EEF4
.text:000000000000EEF0                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000EEF4 loc_EEF4                                ; CODE XREF: tinyxml2::XMLPrinter::OpenElement(char const*,bool)+88↑j
.text:000000000000EEF4                                         ; tinyxml2::XMLPrinter::OpenElement(char const*,bool)+8C↑j
.text:000000000000EEF4                 LDR             W8, [X19,#0x6C]
.text:000000000000EEF8                 STR             X22, [X19,#0x10]
.text:000000000000EEFC                 STR             W23, [X19,#0x68]
.text:000000000000EF00 loc_EF00                                ; CODE XREF: tinyxml2::XMLPrinter::OpenElement(char const*,bool)+48↑j
.text:000000000000EF00                 STR             X20, [X22,W8,SXTW#3]
.text:000000000000EF04                 LDR             W8, [X19,#0x6C]
.text:000000000000EF08                 LDR             W9, [X19,#0x84]
.text:000000000000EF0C                 ADD             W8, W8, #1
.text:000000000000EF10                 STR             W8, [X19,#0x6C]
.text:000000000000EF14                 TBZ             W9, #0x1F, loc_EF30
.text:000000000000EF18                 LDRB            W8, [X19,#0x70]
.text:000000000000EF1C                 CBNZ            W8, loc_EF30
.text:000000000000EF20                 TBNZ            W21, #0, loc_EF30
.text:000000000000EF24                 MOV             W1, #0xA ; char
.text:000000000000EF28                 MOV             X0, X19 ; this
.text:000000000000EF2C                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EF30 loc_EF30                                ; CODE XREF: tinyxml2::XMLPrinter::OpenElement(char const*,bool)+B4↑j
.text:000000000000EF30                                         ; tinyxml2::XMLPrinter::OpenElement(char const*,bool)+BC↑j ...
.text:000000000000EF30                 TBNZ            W21, #0, loc_EF48
.text:000000000000EF34                 LDR             X8, [X19]
.text:000000000000EF38                 MOV             X0, X19
.text:000000000000EF3C                 LDR             W1, [X19,#0x80]
.text:000000000000EF40                 LDR             X8, [X8,#0x60]
.text:000000000000EF44                 BLR             X8
.text:000000000000EF48 loc_EF48                                ; CODE XREF: tinyxml2::XMLPrinter::OpenElement(char const*,bool):loc_EF30↑j
.text:000000000000EF48                 ADRP            X21, #unk_4EA8@PAGE
.text:000000000000EF4C                 ADD             X21, X21, #unk_4EA8@PAGEOFF
.text:000000000000EF50                 MOV             X0, X21
.text:000000000000EF54                 MOV             W1, #2
.text:000000000000EF58                 BL              .__strlen_chk
.text:000000000000EF5C                 MOV             X2, X0  ; unsigned __int64
.text:000000000000EF60                 MOV             X0, X19 ; this
.text:000000000000EF64                 MOV             X1, X21 ; char *
.text:000000000000EF68                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EF6C                 MOV             X0, X20 ; s
.text:000000000000EF70                 BL              .strlen
.text:000000000000EF74                 MOV             X2, X0  ; unsigned __int64
.text:000000000000EF78                 MOV             X0, X19 ; this
.text:000000000000EF7C                 MOV             X1, X20 ; char *
.text:000000000000EF80                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000EF84                 LDR             W8, [X19,#0x80]
.text:000000000000EF88                 MOV             W9, #1
.text:000000000000EF8C                 STRB            WZR, [X19,#0x70]
.text:000000000000EF90                 STRB            W9, [X19,#8]
.text:000000000000EF94                 ADD             W8, W8, #1
.text:000000000000EF98                 STR             W8, [X19,#0x80]
.text:000000000000EF9C                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000EFA0                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000EFA4                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000EFA8                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:000000000000EFAC                 RET
.text:000000000000EFAC ; } // starts at EE60
.text:000000000000EFAC ; End of function tinyxml2::XMLPrinter::OpenElement(char const*,bool)
.text:000000000000EFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EFB0 ; __int64 __fastcall tinyxml2::XMLPrinter::SealElementIfJustOpened(tinyxml2::XMLPrinter *__hidden this)
.text:000000000000EFB0                 EXPORT _ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv
.text:000000000000EFB0 _ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv
.text:000000000000EFB0                                         ; DATA XREF: LOAD:00000000000007B0↑o
.text:000000000000EFB0 ; __unwind {
.text:000000000000EFB0                 LDRB            W8, [X0,#8]
.text:000000000000EFB4                 CBZ             W8, locret_EFC4
.text:000000000000EFB8                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000EFBC                 STRB            WZR, [X0,#8]
.text:000000000000EFC0                 B               ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EFC4 ; ---------------------------------------------------------------------------
.text:000000000000EFC4 locret_EFC4                             ; CODE XREF: tinyxml2::XMLPrinter::SealElementIfJustOpened(void)+4↑j
.text:000000000000EFC4                 RET
.text:000000000000EFC4 ; } // starts at EFB0
.text:000000000000EFC4 ; End of function tinyxml2::XMLPrinter::SealElementIfJustOpened(void)
.text:000000000000EFC8 ; =============== S U B R O U T I N E =======================================
.text:000000000000EFC8 ; Attributes: bp-based frame
.text:000000000000EFC8 ; __int64 __fastcall tinyxml2::XMLPrinter::PushAttribute(tinyxml2::XMLPrinter *__hidden this, const char *, const char *)
.text:000000000000EFC8                 EXPORT _ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_
.text:000000000000EFC8 _ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_
.text:000000000000EFC8                                         ; CODE XREF: tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)+C↓j
.text:000000000000EFC8                                         ; DATA XREF: LOAD:00000000000012A8↑o ...
.text:000000000000EFC8 var_20          = -0x20
.text:000000000000EFC8 var_10          = -0x10
.text:000000000000EFC8 var_s0          =  0
.text:000000000000EFC8 ; __unwind {
.text:000000000000EFC8                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000EFCC                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000EFD0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000EFD4                 ADD             X29, SP, #0x20
.text:000000000000EFD8                 MOV             X20, X1
.text:000000000000EFDC                 MOV             W1, #0x20 ; ' ' ; char
.text:000000000000EFE0                 MOV             X19, X2
.text:000000000000EFE4                 MOV             X21, X0
.text:000000000000EFE8                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000EFEC                 MOV             X0, X20 ; s
.text:000000000000EFF0                 BL              .strlen
.text:000000000000EFF4                 MOV             X2, X0  ; unsigned __int64
.text:000000000000EFF8                 MOV             X0, X21 ; this
.text:000000000000EFFC                 MOV             X1, X20 ; char *
.text:000000000000F000                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F004                 ADRP            X20, #asc_5078@PAGE ; "=\""
.text:000000000000F008                 ADD             X20, X20, #asc_5078@PAGEOFF ; "=\""
.text:000000000000F00C                 MOV             X0, X20
.text:000000000000F010                 MOV             W1, #3
.text:000000000000F014                 BL              .__strlen_chk
.text:000000000000F018                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F01C                 MOV             X0, X21 ; this
.text:000000000000F020                 MOV             X1, X20 ; char *
.text:000000000000F024                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F028                 MOV             X0, X21 ; this
.text:000000000000F02C                 MOV             X1, X19 ; char *
.text:000000000000F030                 MOV             W2, WZR ; bool
.text:000000000000F034                 BL              ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F038                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F03C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F040                 MOV             W1, #0x22 ; '"' ; char
.text:000000000000F044                 MOV             X0, X21 ; this
.text:000000000000F048                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000F04C                 B               ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F04C ; } // starts at EFC8
.text:000000000000F04C ; End of function tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)
.text:000000000000F050 ; =============== S U B R O U T I N E =======================================
.text:000000000000F050 ; Attributes: bp-based frame
.text:000000000000F050 ; __int64 __fastcall tinyxml2::XMLPrinter::PushAttribute(tinyxml2::XMLPrinter *__hidden this, const char *, int)
.text:000000000000F050                 EXPORT _ZN8tinyxml210XMLPrinter13PushAttributeEPKci
.text:000000000000F050 _ZN8tinyxml210XMLPrinter13PushAttributeEPKci
.text:000000000000F050                                         ; DATA XREF: LOAD:0000000000001380↑o
.text:000000000000F050 var_28          = -0x28
.text:000000000000F050 var_20          = -0x20
.text:000000000000F050 var_10          = -0x10
.text:000000000000F050 var_s0          =  0
.text:000000000000F050 ; __unwind {
.text:000000000000F050                 SUB             SP, SP, #0x100
.text:000000000000F054                 STR             X21, [SP,#0xF0+var_20]
.text:000000000000F058                 STP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F05C                 STP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F060                 ADD             X29, SP, #0xF0
.text:000000000000F064                 MRS             X21, #3, c13, c0, #2
.text:000000000000F068                 MOV             X19, X1
.text:000000000000F06C                 LDR             X8, [X21,#0x28]
.text:000000000000F070                 ADRP            X3, #unk_4EA5@PAGE
.text:000000000000F074                 MOV             W1, #0xC8
.text:000000000000F078                 MOV             W4, W2
.text:000000000000F07C                 MOV             X20, X0
.text:000000000000F080                 ADD             X3, X3, #unk_4EA5@PAGEOFF
.text:000000000000F084                 STUR            X8, [X29,#var_28]
.text:000000000000F088                 MOV             X0, SP
.text:000000000000F08C                 MOV             X2, X1
.text:000000000000F090                 BL              sub_8A58
.text:000000000000F094                 MOV             X2, SP  ; char *
.text:000000000000F098                 MOV             X0, X20 ; this
.text:000000000000F09C                 MOV             X1, X19 ; char *
.text:000000000000F0A0                 BL              ._ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ ; tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)
.text:000000000000F0A4                 LDR             X8, [X21,#0x28]
.text:000000000000F0A8                 LDUR            X9, [X29,#var_28]
.text:000000000000F0AC                 CMP             X8, X9
.text:000000000000F0B0                 B.NE            loc_F0C8
.text:000000000000F0B4                 LDP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F0B8                 LDP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F0BC                 LDR             X21, [SP,#0xF0+var_20]
.text:000000000000F0C0                 ADD             SP, SP, #0x100
.text:000000000000F0C4                 RET
.text:000000000000F0C8 ; ---------------------------------------------------------------------------
.text:000000000000F0C8 loc_F0C8                                ; CODE XREF: tinyxml2::XMLPrinter::PushAttribute(char const*,int)+60↑j
.text:000000000000F0C8                 BL              .__stack_chk_fail
.text:000000000000F0C8 ; } // starts at F050
.text:000000000000F0C8 ; End of function tinyxml2::XMLPrinter::PushAttribute(char const*,int)
.text:000000000000F0C8 ; ---------------------------------------------------------------------------
.text:000000000000F0CC                 ALIGN 0x10
.text:000000000000F0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F0D0 ; Attributes: bp-based frame
.text:000000000000F0D0 ; __int64 __fastcall tinyxml2::XMLPrinter::PushAttribute(tinyxml2::XMLPrinter *__hidden this, const char *, unsigned int)
.text:000000000000F0D0                 EXPORT _ZN8tinyxml210XMLPrinter13PushAttributeEPKcj
.text:000000000000F0D0 _ZN8tinyxml210XMLPrinter13PushAttributeEPKcj
.text:000000000000F0D0                                         ; DATA XREF: LOAD:0000000000001398↑o
.text:000000000000F0D0 var_28          = -0x28
.text:000000000000F0D0 var_20          = -0x20
.text:000000000000F0D0 var_10          = -0x10
.text:000000000000F0D0 var_s0          =  0
.text:000000000000F0D0 ; __unwind {
.text:000000000000F0D0                 SUB             SP, SP, #0x100
.text:000000000000F0D4                 STR             X21, [SP,#0xF0+var_20]
.text:000000000000F0D8                 STP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F0DC                 STP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F0E0                 ADD             X29, SP, #0xF0
.text:000000000000F0E4                 MRS             X21, #3, c13, c0, #2
.text:000000000000F0E8                 MOV             X19, X1
.text:000000000000F0EC                 LDR             X8, [X21,#0x28]
.text:000000000000F0F0                 ADRP            X3, #unk_4EE4@PAGE
.text:000000000000F0F4                 MOV             W1, #0xC8
.text:000000000000F0F8                 MOV             W4, W2
.text:000000000000F0FC                 MOV             X20, X0
.text:000000000000F100                 ADD             X3, X3, #unk_4EE4@PAGEOFF
.text:000000000000F104                 STUR            X8, [X29,#var_28]
.text:000000000000F108                 MOV             X0, SP
.text:000000000000F10C                 MOV             X2, X1
.text:000000000000F110                 BL              sub_8A58
.text:000000000000F114                 MOV             X2, SP  ; char *
.text:000000000000F118                 MOV             X0, X20 ; this
.text:000000000000F11C                 MOV             X1, X19 ; char *
.text:000000000000F120                 BL              ._ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ ; tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)
.text:000000000000F124                 LDR             X8, [X21,#0x28]
.text:000000000000F128                 LDUR            X9, [X29,#var_28]
.text:000000000000F12C                 CMP             X8, X9
.text:000000000000F130                 B.NE            loc_F148
.text:000000000000F134                 LDP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F138                 LDP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F13C                 LDR             X21, [SP,#0xF0+var_20]
.text:000000000000F140                 ADD             SP, SP, #0x100
.text:000000000000F144                 RET
.text:000000000000F148 ; ---------------------------------------------------------------------------
.text:000000000000F148 loc_F148                                ; CODE XREF: tinyxml2::XMLPrinter::PushAttribute(char const*,uint)+60↑j
.text:000000000000F148                 BL              .__stack_chk_fail
.text:000000000000F148 ; } // starts at F0D0
.text:000000000000F148 ; End of function tinyxml2::XMLPrinter::PushAttribute(char const*,uint)
.text:000000000000F148 ; ---------------------------------------------------------------------------
.text:000000000000F14C                 ALIGN 0x10
.text:000000000000F150 ; =============== S U B R O U T I N E =======================================
.text:000000000000F150 ; Attributes: bp-based frame
.text:000000000000F150 ; __int64 __fastcall tinyxml2::XMLPrinter::PushAttribute(tinyxml2::XMLPrinter *__hidden this, const char *, __int64)
.text:000000000000F150                 EXPORT _ZN8tinyxml210XMLPrinter13PushAttributeEPKcl
.text:000000000000F150 _ZN8tinyxml210XMLPrinter13PushAttributeEPKcl
.text:000000000000F150                                         ; DATA XREF: LOAD:00000000000014D0↑o
.text:000000000000F150 var_28          = -0x28
.text:000000000000F150 var_20          = -0x20
.text:000000000000F150 var_10          = -0x10
.text:000000000000F150 var_s0          =  0
.text:000000000000F150 ; __unwind {
.text:000000000000F150                 SUB             SP, SP, #0x100
.text:000000000000F154                 STR             X21, [SP,#0xF0+var_20]
.text:000000000000F158                 STP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F15C                 STP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F160                 ADD             X29, SP, #0xF0
.text:000000000000F164                 MRS             X21, #3, c13, c0, #2
.text:000000000000F168                 MOV             X19, X1
.text:000000000000F16C                 LDR             X8, [X21,#0x28]
.text:000000000000F170                 ADRP            X3, #aLld@PAGE ; "%lld"
.text:000000000000F174                 MOV             W1, #0xC8
.text:000000000000F178                 MOV             X4, X2
.text:000000000000F17C                 MOV             X20, X0
.text:000000000000F180                 ADD             X3, X3, #aLld@PAGEOFF ; "%lld"
.text:000000000000F184                 STUR            X8, [X29,#var_28]
.text:000000000000F188                 MOV             X0, SP
.text:000000000000F18C                 MOV             X2, X1
.text:000000000000F190                 BL              sub_8A58
.text:000000000000F194                 MOV             X2, SP  ; char *
.text:000000000000F198                 MOV             X0, X20 ; this
.text:000000000000F19C                 MOV             X1, X19 ; char *
.text:000000000000F1A0                 BL              ._ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ ; tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)
.text:000000000000F1A4                 LDR             X8, [X21,#0x28]
.text:000000000000F1A8                 LDUR            X9, [X29,#var_28]
.text:000000000000F1AC                 CMP             X8, X9
.text:000000000000F1B0                 B.NE            loc_F1C8
.text:000000000000F1B4                 LDP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F1B8                 LDP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F1BC                 LDR             X21, [SP,#0xF0+var_20]
.text:000000000000F1C0                 ADD             SP, SP, #0x100
.text:000000000000F1C4                 RET
.text:000000000000F1C8 ; ---------------------------------------------------------------------------
.text:000000000000F1C8 loc_F1C8                                ; CODE XREF: tinyxml2::XMLPrinter::PushAttribute(char const*,long)+60↑j
.text:000000000000F1C8                 BL              .__stack_chk_fail
.text:000000000000F1C8 ; } // starts at F150
.text:000000000000F1C8 ; End of function tinyxml2::XMLPrinter::PushAttribute(char const*,long)
.text:000000000000F1C8 ; ---------------------------------------------------------------------------
.text:000000000000F1CC                 ALIGN 0x10
.text:000000000000F1D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F1D0 ; Attributes: bp-based frame
.text:000000000000F1D0 ; __int64 __fastcall tinyxml2::XMLPrinter::PushAttribute(tinyxml2::XMLPrinter *__hidden this, const char *, bool)
.text:000000000000F1D0                 EXPORT _ZN8tinyxml210XMLPrinter13PushAttributeEPKcb
.text:000000000000F1D0 _ZN8tinyxml210XMLPrinter13PushAttributeEPKcb
.text:000000000000F1D0                                         ; DATA XREF: LOAD:0000000000001020↑o
.text:000000000000F1D0 var_28          = -0x28
.text:000000000000F1D0 var_20          = -0x20
.text:000000000000F1D0 var_10          = -0x10
.text:000000000000F1D0 var_s0          =  0
.text:000000000000F1D0 ; __unwind {
.text:000000000000F1D0                 SUB             SP, SP, #0x100
.text:000000000000F1D4                 STR             X21, [SP,#0xF0+var_20]
.text:000000000000F1D8                 STP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F1DC                 STP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F1E0                 ADD             X29, SP, #0xF0
.text:000000000000F1E4                 ADRP            X8, #_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGE
.text:000000000000F1E8                 MRS             X21, #3, c13, c0, #2
.text:000000000000F1EC                 ADRP            X9, #_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGE
.text:000000000000F1F0                 TST             W2, #1
.text:000000000000F1F4                 LDR             X8, [X8,#_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGEOFF]
.text:000000000000F1F8                 MOV             X19, X1
.text:000000000000F1FC                 LDR             X9, [X9,#_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGEOFF]
.text:000000000000F200                 ADRP            X3, #aS@PAGE ; "%s"
.text:000000000000F204                 LDR             X10, [X21,#0x28]
.text:000000000000F208                 MOV             W1, #0xC8
.text:000000000000F20C                 MOV             X20, X0
.text:000000000000F210                 ADD             X3, X3, #aS@PAGEOFF ; "%s"
.text:000000000000F214                 CSEL            X8, X8, X9, NE
.text:000000000000F218                 STUR            X10, [X29,#var_28]
.text:000000000000F21C                 MOV             X0, SP
.text:000000000000F220                 MOV             X2, X1
.text:000000000000F224                 LDR             X4, [X8]
.text:000000000000F228                 BL              sub_8A58
.text:000000000000F22C                 MOV             X2, SP  ; char *
.text:000000000000F230                 MOV             X0, X20 ; this
.text:000000000000F234                 MOV             X1, X19 ; char *
.text:000000000000F238                 BL              ._ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ ; tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)
.text:000000000000F23C                 LDR             X8, [X21,#0x28]
.text:000000000000F240                 LDUR            X9, [X29,#var_28]
.text:000000000000F244                 CMP             X8, X9
.text:000000000000F248                 B.NE            loc_F260
.text:000000000000F24C                 LDP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F250                 LDP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F254                 LDR             X21, [SP,#0xF0+var_20]
.text:000000000000F258                 ADD             SP, SP, #0x100
.text:000000000000F25C                 RET
.text:000000000000F260 ; ---------------------------------------------------------------------------
.text:000000000000F260 loc_F260                                ; CODE XREF: tinyxml2::XMLPrinter::PushAttribute(char const*,bool)+78↑j
.text:000000000000F260                 BL              .__stack_chk_fail
.text:000000000000F260 ; } // starts at F1D0
.text:000000000000F260 ; End of function tinyxml2::XMLPrinter::PushAttribute(char const*,bool)
.text:000000000000F260 ; ---------------------------------------------------------------------------
.text:000000000000F264                 ALIGN 8
.text:000000000000F268 ; =============== S U B R O U T I N E =======================================
.text:000000000000F268 ; Attributes: bp-based frame
.text:000000000000F268 ; __int64 __fastcall tinyxml2::XMLPrinter::PushAttribute(tinyxml2::XMLPrinter *__hidden this, const char *, double)
.text:000000000000F268                 EXPORT _ZN8tinyxml210XMLPrinter13PushAttributeEPKcd
.text:000000000000F268 _ZN8tinyxml210XMLPrinter13PushAttributeEPKcd
.text:000000000000F268                                         ; DATA XREF: LOAD:0000000000001158↑o
.text:000000000000F268 var_28          = -0x28
.text:000000000000F268 var_20          = -0x20
.text:000000000000F268 var_10          = -0x10
.text:000000000000F268 var_s0          =  0
.text:000000000000F268 ; __unwind {
.text:000000000000F268                 SUB             SP, SP, #0x100
.text:000000000000F26C                 STR             X21, [SP,#0xF0+var_20]
.text:000000000000F270                 STP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F274                 STP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F278                 ADD             X29, SP, #0xF0
.text:000000000000F27C                 MRS             X21, #3, c13, c0, #2
.text:000000000000F280                 MOV             X19, X1
.text:000000000000F284                 LDR             X8, [X21,#0x28]
.text:000000000000F288                 ADRP            X3, #a17g@PAGE ; "%.17g"
.text:000000000000F28C                 MOV             W1, #0xC8
.text:000000000000F290                 MOV             X20, X0
.text:000000000000F294                 ADD             X3, X3, #a17g@PAGEOFF ; "%.17g"
.text:000000000000F298                 MOV             X0, SP
.text:000000000000F29C                 STUR            X8, [X29,#var_28]
.text:000000000000F2A0                 MOV             X2, X1
.text:000000000000F2A4                 BL              sub_8A58
.text:000000000000F2A8                 MOV             X2, SP  ; char *
.text:000000000000F2AC                 MOV             X0, X20 ; this
.text:000000000000F2B0                 MOV             X1, X19 ; char *
.text:000000000000F2B4                 BL              ._ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ ; tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)
.text:000000000000F2B8                 LDR             X8, [X21,#0x28]
.text:000000000000F2BC                 LDUR            X9, [X29,#var_28]
.text:000000000000F2C0                 CMP             X8, X9
.text:000000000000F2C4                 B.NE            loc_F2DC
.text:000000000000F2C8                 LDP             X29, X30, [SP,#0xF0+var_s0]
.text:000000000000F2CC                 LDP             X20, X19, [SP,#0xF0+var_10]
.text:000000000000F2D0                 LDR             X21, [SP,#0xF0+var_20]
.text:000000000000F2D4                 ADD             SP, SP, #0x100
.text:000000000000F2D8                 RET
.text:000000000000F2DC ; ---------------------------------------------------------------------------
.text:000000000000F2DC loc_F2DC                                ; CODE XREF: tinyxml2::XMLPrinter::PushAttribute(char const*,double)+5C↑j
.text:000000000000F2DC                 BL              .__stack_chk_fail
.text:000000000000F2DC ; } // starts at F268
.text:000000000000F2DC ; End of function tinyxml2::XMLPrinter::PushAttribute(char const*,double)
.text:000000000000F2E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F2E0 ; Attributes: bp-based frame
.text:000000000000F2E0 ; __int64 __fastcall tinyxml2::XMLPrinter::CloseElement(tinyxml2::XMLPrinter *__hidden this, bool)
.text:000000000000F2E0                 EXPORT _ZN8tinyxml210XMLPrinter12CloseElementEb
.text:000000000000F2E0 _ZN8tinyxml210XMLPrinter12CloseElementEb
.text:000000000000F2E0                                         ; DATA XREF: LOAD:0000000000000570↑o
.text:000000000000F2E0                                         ; .data.rel.ro:0000000000012480↓o
.text:000000000000F2E0 var_20          = -0x20
.text:000000000000F2E0 var_10          = -0x10
.text:000000000000F2E0 var_s0          =  0
.text:000000000000F2E0 ; __unwind {
.text:000000000000F2E0                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000F2E4                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F2E8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F2EC                 ADD             X29, SP, #0x20
.text:000000000000F2F0                 LDR             W8, [X0,#0x80]
.text:000000000000F2F4                 MOV             W20, W1
.text:000000000000F2F8                 LDRSW           X9, [X0,#0x6C]
.text:000000000000F2FC                 MOV             X19, X0
.text:000000000000F300                 LDRB            W10, [X0,#8]
.text:000000000000F304                 SUB             W11, W8, #1
.text:000000000000F308                 SUB             X8, X9, #1
.text:000000000000F30C                 STR             W11, [X0,#0x80]
.text:000000000000F310                 STR             W8, [X0,#0x6C]
.text:000000000000F314                 CBZ             W10, loc_F32C
.text:000000000000F318                 ADRP            X21, #asc_4FAB@PAGE ; "/>"
.text:000000000000F31C                 ADD             X21, X21, #asc_4FAB@PAGEOFF ; "/>"
.text:000000000000F320                 MOV             X0, X21
.text:000000000000F324                 MOV             W1, #3
.text:000000000000F328                 B               loc_F3AC
.text:000000000000F32C ; ---------------------------------------------------------------------------
.text:000000000000F32C loc_F32C                                ; CODE XREF: tinyxml2::XMLPrinter::CloseElement(bool)+34↑j
.text:000000000000F32C                 LDR             X9, [X19,#0x10]
.text:000000000000F330                 LDR             W10, [X19,#0x84]
.text:000000000000F334                 LDR             X21, [X9,X8,LSL#3]
.text:000000000000F338                 TBZ             W10, #0x1F, loc_F360
.text:000000000000F33C                 TBNZ            W20, #0, loc_F360
.text:000000000000F340                 MOV             W1, #0xA ; char
.text:000000000000F344                 MOV             X0, X19 ; this
.text:000000000000F348                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F34C                 LDR             X8, [X19]
.text:000000000000F350                 MOV             X0, X19
.text:000000000000F354                 LDR             W1, [X19,#0x80]
.text:000000000000F358                 LDR             X8, [X8,#0x60]
.text:000000000000F35C                 BLR             X8
.text:000000000000F360 loc_F360                                ; CODE XREF: tinyxml2::XMLPrinter::CloseElement(bool)+58↑j
.text:000000000000F360                                         ; tinyxml2::XMLPrinter::CloseElement(bool)+5C↑j
.text:000000000000F360                 ADRP            X22, #asc_5036@PAGE ; "</"
.text:000000000000F364                 ADD             X22, X22, #asc_5036@PAGEOFF ; "</"
.text:000000000000F368                 MOV             X0, X22
.text:000000000000F36C                 MOV             W1, #3
.text:000000000000F370                 BL              .__strlen_chk
.text:000000000000F374                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F378                 MOV             X0, X19 ; this
.text:000000000000F37C                 MOV             X1, X22 ; char *
.text:000000000000F380                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F384                 MOV             X0, X21 ; s
.text:000000000000F388                 BL              .strlen
.text:000000000000F38C                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F390                 MOV             X0, X19 ; this
.text:000000000000F394                 MOV             X1, X21 ; char *
.text:000000000000F398                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F39C                 ADRP            X21, #asc_4FF7@PAGE ; ">"
.text:000000000000F3A0                 ADD             X21, X21, #asc_4FF7@PAGEOFF ; ">"
.text:000000000000F3A4                 MOV             X0, X21
.text:000000000000F3A8                 MOV             W1, #2
.text:000000000000F3AC loc_F3AC                                ; CODE XREF: tinyxml2::XMLPrinter::CloseElement(bool)+48↑j
.text:000000000000F3AC                 BL              .__strlen_chk
.text:000000000000F3B0                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F3B4                 MOV             X0, X19 ; this
.text:000000000000F3B8                 MOV             X1, X21 ; char *
.text:000000000000F3BC                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F3C0                 LDP             W8, W9, [X19,#0x80]
.text:000000000000F3C4                 CMP             W9, W8
.text:000000000000F3C8                 B.NE            loc_F3D4
.text:000000000000F3CC                 MOV             W9, #0xFFFFFFFF
.text:000000000000F3D0                 STR             W9, [X19,#0x84]
.text:000000000000F3D4 loc_F3D4                                ; CODE XREF: tinyxml2::XMLPrinter::CloseElement(bool)+E8↑j
.text:000000000000F3D4                 CBNZ            W8, loc_F3E8
.text:000000000000F3D8                 TBNZ            W20, #0, loc_F3E8
.text:000000000000F3DC                 MOV             W1, #0xA ; char
.text:000000000000F3E0                 MOV             X0, X19 ; this
.text:000000000000F3E4                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F3E8 loc_F3E8                                ; CODE XREF: tinyxml2::XMLPrinter::CloseElement(bool):loc_F3D4↑j
.text:000000000000F3E8                                         ; tinyxml2::XMLPrinter::CloseElement(bool)+F8↑j
.text:000000000000F3E8                 STRB            WZR, [X19,#8]
.text:000000000000F3EC                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F3F0                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F3F4                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:000000000000F3F8                 RET
.text:000000000000F3F8 ; } // starts at F2E0
.text:000000000000F3F8 ; End of function tinyxml2::XMLPrinter::CloseElement(bool)
.text:000000000000F3F8 ; ---------------------------------------------------------------------------
.text:000000000000F3FC                 ALIGN 0x20
.text:000000000000F400 ; =============== S U B R O U T I N E =======================================
.text:000000000000F400 ; Attributes: bp-based frame
.text:000000000000F400 ; __int64 __fastcall tinyxml2::XMLPrinter::PushText(tinyxml2::XMLPrinter *__hidden this, const char *, bool)
.text:000000000000F400                 EXPORT _ZN8tinyxml210XMLPrinter8PushTextEPKcb
.text:000000000000F400 _ZN8tinyxml210XMLPrinter8PushTextEPKcb  ; CODE XREF: tinyxml2::XMLPrinter::PushText(char const*,bool)+C↓j
.text:000000000000F400                                         ; DATA XREF: LOAD:0000000000001800↑o ...
.text:000000000000F400 var_20          = -0x20
.text:000000000000F400 var_10          = -0x10
.text:000000000000F400 var_s0          =  0
.text:000000000000F400 ; __unwind {
.text:000000000000F400                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000F404                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F408                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F40C                 ADD             X29, SP, #0x20
.text:000000000000F410                 LDR             W8, [X0,#0x80]
.text:000000000000F414                 MOV             W21, W2
.text:000000000000F418                 LDRB            W9, [X0,#8]
.text:000000000000F41C                 MOV             X19, X0
.text:000000000000F420                 MOV             X20, X1
.text:000000000000F424                 SUB             W8, W8, #1
.text:000000000000F428                 STR             W8, [X0,#0x84]
.text:000000000000F42C                 CBZ             W9, loc_F440
.text:000000000000F430                 MOV             X0, X19 ; this
.text:000000000000F434                 STRB            WZR, [X19,#8]
.text:000000000000F438                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F43C                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F440 loc_F440                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(char const*,bool)+2C↑j
.text:000000000000F440                 TBZ             W21, #0, loc_F4B0
.text:000000000000F444                 ADRP            X21, #aCdata@PAGE ; "<![CDATA["
.text:000000000000F448                 ADD             X21, X21, #aCdata@PAGEOFF ; "<![CDATA["
.text:000000000000F44C                 MOV             W1, #0xA
.text:000000000000F450                 MOV             X0, X21
.text:000000000000F454                 BL              .__strlen_chk
.text:000000000000F458                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F45C                 MOV             X0, X19 ; this
.text:000000000000F460                 MOV             X1, X21 ; char *
.text:000000000000F464                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F468                 MOV             X0, X20 ; s
.text:000000000000F46C                 BL              .strlen
.text:000000000000F470                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F474                 MOV             X0, X19 ; this
.text:000000000000F478                 MOV             X1, X20 ; char *
.text:000000000000F47C                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F480                 ADRP            X20, #asc_4F2B@PAGE ; "]]>"
.text:000000000000F484                 ADD             X20, X20, #asc_4F2B@PAGEOFF ; "]]>"
.text:000000000000F488                 MOV             X0, X20
.text:000000000000F48C                 MOV             W1, #4
.text:000000000000F490                 BL              .__strlen_chk
.text:000000000000F494                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F498                 MOV             X0, X19 ; this
.text:000000000000F49C                 MOV             X1, X20 ; char *
.text:000000000000F4A0                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F4A4                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F4A8                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000F4AC                 B               ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F4B0 ; ---------------------------------------------------------------------------
.text:000000000000F4B0 loc_F4B0                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(char const*,bool):loc_F440↑j
.text:000000000000F4B0                 MOV             X0, X19 ; this
.text:000000000000F4B4                 MOV             X1, X20 ; char *
.text:000000000000F4B8                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F4BC                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F4C0                 MOV             W2, #1  ; bool
.text:000000000000F4C4                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000F4C8                 B               ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F4C8 ; } // starts at F400
.text:000000000000F4C8 ; End of function tinyxml2::XMLPrinter::PushText(char const*,bool)
.text:000000000000F4C8 ; ---------------------------------------------------------------------------
.text:000000000000F4CC                 ALIGN 0x10
.text:000000000000F4D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F4D0 ; Attributes: bp-based frame
.text:000000000000F4D0 ; __int64 __fastcall tinyxml2::XMLPrinter::PushText(tinyxml2::XMLPrinter *__hidden this, __int64)
.text:000000000000F4D0                 EXPORT _ZN8tinyxml210XMLPrinter8PushTextEl
.text:000000000000F4D0 _ZN8tinyxml210XMLPrinter8PushTextEl     ; DATA XREF: LOAD:0000000000000FC0↑o
.text:000000000000F4D0 var_18          = -0x18
.text:000000000000F4D0 var_10          = -0x10
.text:000000000000F4D0 var_s0          =  0
.text:000000000000F4D0 ; __unwind {
.text:000000000000F4D0                 SUB             SP, SP, #0xF0
.text:000000000000F4D4                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F4D8                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F4DC                 ADD             X29, SP, #0xE0
.text:000000000000F4E0                 MRS             X20, #3, c13, c0, #2
.text:000000000000F4E4                 MOV             X4, X1
.text:000000000000F4E8                 LDR             X8, [X20,#0x28]
.text:000000000000F4EC                 ADRP            X3, #aLld@PAGE ; "%lld"
.text:000000000000F4F0                 MOV             W1, #0xC8
.text:000000000000F4F4                 MOV             X19, X0
.text:000000000000F4F8                 ADD             X3, X3, #aLld@PAGEOFF ; "%lld"
.text:000000000000F4FC                 MOV             X0, SP
.text:000000000000F500                 STUR            X8, [X29,#var_18]
.text:000000000000F504                 MOV             X2, X1
.text:000000000000F508                 BL              sub_8A58
.text:000000000000F50C                 LDR             W8, [X19,#0x80]
.text:000000000000F510                 LDRB            W9, [X19,#8]
.text:000000000000F514                 SUB             W8, W8, #1
.text:000000000000F518                 STR             W8, [X19,#0x84]
.text:000000000000F51C                 CBZ             W9, loc_F530
.text:000000000000F520                 MOV             X0, X19 ; this
.text:000000000000F524                 STRB            WZR, [X19,#8]
.text:000000000000F528                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F52C                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F530 loc_F530                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(long)+4C↑j
.text:000000000000F530                 MOV             X1, SP  ; char *
.text:000000000000F534                 MOV             X0, X19 ; this
.text:000000000000F538                 MOV             W2, #1  ; bool
.text:000000000000F53C                 BL              ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F540                 LDR             X8, [X20,#0x28]
.text:000000000000F544                 LDUR            X9, [X29,#var_18]
.text:000000000000F548                 CMP             X8, X9
.text:000000000000F54C                 B.NE            loc_F560
.text:000000000000F550                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F554                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F558                 ADD             SP, SP, #0xF0
.text:000000000000F55C                 RET
.text:000000000000F560 ; ---------------------------------------------------------------------------
.text:000000000000F560 loc_F560                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(long)+7C↑j
.text:000000000000F560                 BL              .__stack_chk_fail
.text:000000000000F560 ; } // starts at F4D0
.text:000000000000F560 ; End of function tinyxml2::XMLPrinter::PushText(long)
.text:000000000000F560 ; ---------------------------------------------------------------------------
.text:000000000000F564                 ALIGN 8
.text:000000000000F568 ; =============== S U B R O U T I N E =======================================
.text:000000000000F568 ; Attributes: bp-based frame
.text:000000000000F568 ; __int64 __fastcall tinyxml2::XMLPrinter::PushText(tinyxml2::XMLPrinter *__hidden this, int)
.text:000000000000F568                 EXPORT _ZN8tinyxml210XMLPrinter8PushTextEi
.text:000000000000F568 _ZN8tinyxml210XMLPrinter8PushTextEi     ; DATA XREF: LOAD:0000000000000E58↑o
.text:000000000000F568 var_18          = -0x18
.text:000000000000F568 var_10          = -0x10
.text:000000000000F568 var_s0          =  0
.text:000000000000F568 ; __unwind {
.text:000000000000F568                 SUB             SP, SP, #0xF0
.text:000000000000F56C                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F570                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F574                 ADD             X29, SP, #0xE0
.text:000000000000F578                 MRS             X20, #3, c13, c0, #2
.text:000000000000F57C                 MOV             W4, W1
.text:000000000000F580                 LDR             X8, [X20,#0x28]
.text:000000000000F584                 ADRP            X3, #unk_4EA5@PAGE
.text:000000000000F588                 MOV             W1, #0xC8
.text:000000000000F58C                 MOV             X19, X0
.text:000000000000F590                 ADD             X3, X3, #unk_4EA5@PAGEOFF
.text:000000000000F594                 MOV             X0, SP
.text:000000000000F598                 STUR            X8, [X29,#var_18]
.text:000000000000F59C                 MOV             X2, X1
.text:000000000000F5A0                 BL              sub_8A58
.text:000000000000F5A4                 LDR             W8, [X19,#0x80]
.text:000000000000F5A8                 LDRB            W9, [X19,#8]
.text:000000000000F5AC                 SUB             W8, W8, #1
.text:000000000000F5B0                 STR             W8, [X19,#0x84]
.text:000000000000F5B4                 CBZ             W9, loc_F5C8
.text:000000000000F5B8                 MOV             X0, X19 ; this
.text:000000000000F5BC                 STRB            WZR, [X19,#8]
.text:000000000000F5C0                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F5C4                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F5C8 loc_F5C8                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(int)+4C↑j
.text:000000000000F5C8                 MOV             X1, SP  ; char *
.text:000000000000F5CC                 MOV             X0, X19 ; this
.text:000000000000F5D0                 MOV             W2, #1  ; bool
.text:000000000000F5D4                 BL              ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F5D8                 LDR             X8, [X20,#0x28]
.text:000000000000F5DC                 LDUR            X9, [X29,#var_18]
.text:000000000000F5E0                 CMP             X8, X9
.text:000000000000F5E4                 B.NE            loc_F5F8
.text:000000000000F5E8                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F5EC                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F5F0                 ADD             SP, SP, #0xF0
.text:000000000000F5F4                 RET
.text:000000000000F5F8 ; ---------------------------------------------------------------------------
.text:000000000000F5F8 loc_F5F8                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(int)+7C↑j
.text:000000000000F5F8                 BL              .__stack_chk_fail
.text:000000000000F5F8 ; } // starts at F568
.text:000000000000F5F8 ; End of function tinyxml2::XMLPrinter::PushText(int)
.text:000000000000F5F8 ; ---------------------------------------------------------------------------
.text:000000000000F5FC                 ALIGN 0x20
.text:000000000000F600 ; =============== S U B R O U T I N E =======================================
.text:000000000000F600 ; Attributes: bp-based frame
.text:000000000000F600 ; __int64 __fastcall tinyxml2::XMLPrinter::PushText(tinyxml2::XMLPrinter *__hidden this, unsigned int)
.text:000000000000F600                 EXPORT _ZN8tinyxml210XMLPrinter8PushTextEj
.text:000000000000F600 _ZN8tinyxml210XMLPrinter8PushTextEj     ; DATA XREF: LOAD:0000000000000F00↑o
.text:000000000000F600 var_18          = -0x18
.text:000000000000F600 var_10          = -0x10
.text:000000000000F600 var_s0          =  0
.text:000000000000F600 ; __unwind {
.text:000000000000F600                 SUB             SP, SP, #0xF0
.text:000000000000F604                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F608                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F60C                 ADD             X29, SP, #0xE0
.text:000000000000F610                 MRS             X20, #3, c13, c0, #2
.text:000000000000F614                 MOV             W4, W1
.text:000000000000F618                 LDR             X8, [X20,#0x28]
.text:000000000000F61C                 ADRP            X3, #unk_4EE4@PAGE
.text:000000000000F620                 MOV             W1, #0xC8
.text:000000000000F624                 MOV             X19, X0
.text:000000000000F628                 ADD             X3, X3, #unk_4EE4@PAGEOFF
.text:000000000000F62C                 MOV             X0, SP
.text:000000000000F630                 STUR            X8, [X29,#var_18]
.text:000000000000F634                 MOV             X2, X1
.text:000000000000F638                 BL              sub_8A58
.text:000000000000F63C                 LDR             W8, [X19,#0x80]
.text:000000000000F640                 LDRB            W9, [X19,#8]
.text:000000000000F644                 SUB             W8, W8, #1
.text:000000000000F648                 STR             W8, [X19,#0x84]
.text:000000000000F64C                 CBZ             W9, loc_F660
.text:000000000000F650                 MOV             X0, X19 ; this
.text:000000000000F654                 STRB            WZR, [X19,#8]
.text:000000000000F658                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F65C                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F660 loc_F660                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(uint)+4C↑j
.text:000000000000F660                 MOV             X1, SP  ; char *
.text:000000000000F664                 MOV             X0, X19 ; this
.text:000000000000F668                 MOV             W2, #1  ; bool
.text:000000000000F66C                 BL              ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F670                 LDR             X8, [X20,#0x28]
.text:000000000000F674                 LDUR            X9, [X29,#var_18]
.text:000000000000F678                 CMP             X8, X9
.text:000000000000F67C                 B.NE            loc_F690
.text:000000000000F680                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F684                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F688                 ADD             SP, SP, #0xF0
.text:000000000000F68C                 RET
.text:000000000000F690 ; ---------------------------------------------------------------------------
.text:000000000000F690 loc_F690                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(uint)+7C↑j
.text:000000000000F690                 BL              .__stack_chk_fail
.text:000000000000F690 ; } // starts at F600
.text:000000000000F690 ; End of function tinyxml2::XMLPrinter::PushText(uint)
.text:000000000000F690 ; ---------------------------------------------------------------------------
.text:000000000000F694                 ALIGN 8
.text:000000000000F698 ; =============== S U B R O U T I N E =======================================
.text:000000000000F698 ; Attributes: bp-based frame
.text:000000000000F698 ; __int64 __fastcall tinyxml2::XMLPrinter::PushText(tinyxml2::XMLPrinter *__hidden this, bool)
.text:000000000000F698                 EXPORT _ZN8tinyxml210XMLPrinter8PushTextEb
.text:000000000000F698 _ZN8tinyxml210XMLPrinter8PushTextEb     ; DATA XREF: LOAD:0000000000000C18↑o
.text:000000000000F698 var_18          = -0x18
.text:000000000000F698 var_10          = -0x10
.text:000000000000F698 var_s0          =  0
.text:000000000000F698 ; __unwind {
.text:000000000000F698                 SUB             SP, SP, #0xF0
.text:000000000000F69C                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F6A0                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F6A4                 ADD             X29, SP, #0xE0
.text:000000000000F6A8                 ADRP            X8, #_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGE
.text:000000000000F6AC                 ADRP            X9, #_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGE
.text:000000000000F6B0                 TST             W1, #1
.text:000000000000F6B4                 LDR             X8, [X8,#_ZN8tinyxml27XMLUtil13writeBoolTrueE_ptr@PAGEOFF]
.text:000000000000F6B8                 ADRP            X3, #aS@PAGE ; "%s"
.text:000000000000F6BC                 LDR             X9, [X9,#_ZN8tinyxml27XMLUtil14writeBoolFalseE_ptr@PAGEOFF]
.text:000000000000F6C0                 MRS             X20, #3, c13, c0, #2
.text:000000000000F6C4                 LDR             X10, [X20,#0x28]
.text:000000000000F6C8                 MOV             W1, #0xC8
.text:000000000000F6CC                 MOV             X19, X0
.text:000000000000F6D0                 ADD             X3, X3, #aS@PAGEOFF ; "%s"
.text:000000000000F6D4                 CSEL            X8, X8, X9, NE
.text:000000000000F6D8                 STUR            X10, [X29,#var_18]
.text:000000000000F6DC                 MOV             X0, SP
.text:000000000000F6E0                 MOV             X2, X1
.text:000000000000F6E4                 LDR             X4, [X8]
.text:000000000000F6E8                 BL              sub_8A58
.text:000000000000F6EC                 LDR             W8, [X19,#0x80]
.text:000000000000F6F0                 LDRB            W9, [X19,#8]
.text:000000000000F6F4                 SUB             W8, W8, #1
.text:000000000000F6F8                 STR             W8, [X19,#0x84]
.text:000000000000F6FC                 CBZ             W9, loc_F710
.text:000000000000F700                 MOV             X0, X19 ; this
.text:000000000000F704                 STRB            WZR, [X19,#8]
.text:000000000000F708                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F70C                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F710 loc_F710                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(bool)+64↑j
.text:000000000000F710                 MOV             X1, SP  ; char *
.text:000000000000F714                 MOV             X0, X19 ; this
.text:000000000000F718                 MOV             W2, #1  ; bool
.text:000000000000F71C                 BL              ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F720                 LDR             X8, [X20,#0x28]
.text:000000000000F724                 LDUR            X9, [X29,#var_18]
.text:000000000000F728                 CMP             X8, X9
.text:000000000000F72C                 B.NE            loc_F740
.text:000000000000F730                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F734                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F738                 ADD             SP, SP, #0xF0
.text:000000000000F73C                 RET
.text:000000000000F740 ; ---------------------------------------------------------------------------
.text:000000000000F740 loc_F740                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(bool)+94↑j
.text:000000000000F740                 BL              .__stack_chk_fail
.text:000000000000F740 ; } // starts at F698
.text:000000000000F740 ; End of function tinyxml2::XMLPrinter::PushText(bool)
.text:000000000000F740 ; ---------------------------------------------------------------------------
.text:000000000000F744                 ALIGN 8
.text:000000000000F748 ; =============== S U B R O U T I N E =======================================
.text:000000000000F748 ; Attributes: bp-based frame
.text:000000000000F748 ; __int64 __fastcall tinyxml2::XMLPrinter::PushText(tinyxml2::XMLPrinter *__hidden this, float)
.text:000000000000F748                 EXPORT _ZN8tinyxml210XMLPrinter8PushTextEf
.text:000000000000F748 _ZN8tinyxml210XMLPrinter8PushTextEf     ; DATA XREF: LOAD:0000000000000D50↑o
.text:000000000000F748 var_18          = -0x18
.text:000000000000F748 var_10          = -0x10
.text:000000000000F748 var_s0          =  0
.text:000000000000F748 ; __unwind {
.text:000000000000F748                 SUB             SP, SP, #0xF0
.text:000000000000F74C                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F750                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F754                 ADD             X29, SP, #0xE0
.text:000000000000F758                 FCVT            D0, S0
.text:000000000000F75C                 MRS             X20, #3, c13, c0, #2
.text:000000000000F760                 LDR             X8, [X20,#0x28]
.text:000000000000F764                 ADRP            X3, #a8g@PAGE ; "%.8g"
.text:000000000000F768                 MOV             W1, #0xC8
.text:000000000000F76C                 MOV             X19, X0
.text:000000000000F770                 ADD             X3, X3, #a8g@PAGEOFF ; "%.8g"
.text:000000000000F774                 MOV             X0, SP
.text:000000000000F778                 STUR            X8, [X29,#var_18]
.text:000000000000F77C                 MOV             X2, X1
.text:000000000000F780                 BL              sub_8A58
.text:000000000000F784                 LDR             W8, [X19,#0x80]
.text:000000000000F788                 LDRB            W9, [X19,#8]
.text:000000000000F78C                 SUB             W8, W8, #1
.text:000000000000F790                 STR             W8, [X19,#0x84]
.text:000000000000F794                 CBZ             W9, loc_F7A8
.text:000000000000F798                 MOV             X0, X19 ; this
.text:000000000000F79C                 STRB            WZR, [X19,#8]
.text:000000000000F7A0                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F7A4                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F7A8 loc_F7A8                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(float)+4C↑j
.text:000000000000F7A8                 MOV             X1, SP  ; char *
.text:000000000000F7AC                 MOV             X0, X19 ; this
.text:000000000000F7B0                 MOV             W2, #1  ; bool
.text:000000000000F7B4                 BL              ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F7B8                 LDR             X8, [X20,#0x28]
.text:000000000000F7BC                 LDUR            X9, [X29,#var_18]
.text:000000000000F7C0                 CMP             X8, X9
.text:000000000000F7C4                 B.NE            loc_F7D8
.text:000000000000F7C8                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F7CC                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F7D0                 ADD             SP, SP, #0xF0
.text:000000000000F7D4                 RET
.text:000000000000F7D8 ; ---------------------------------------------------------------------------
.text:000000000000F7D8 loc_F7D8                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(float)+7C↑j
.text:000000000000F7D8                 BL              .__stack_chk_fail
.text:000000000000F7D8 ; } // starts at F748
.text:000000000000F7D8 ; End of function tinyxml2::XMLPrinter::PushText(float)
.text:000000000000F7D8 ; ---------------------------------------------------------------------------
.text:000000000000F7DC                 ALIGN 0x20
.text:000000000000F7E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F7E0 ; Attributes: bp-based frame
.text:000000000000F7E0 ; __int64 __fastcall tinyxml2::XMLPrinter::PushText(tinyxml2::XMLPrinter *__hidden this, double)
.text:000000000000F7E0                 EXPORT _ZN8tinyxml210XMLPrinter8PushTextEd
.text:000000000000F7E0 _ZN8tinyxml210XMLPrinter8PushTextEd     ; DATA XREF: LOAD:0000000000000CA8↑o
.text:000000000000F7E0 var_18          = -0x18
.text:000000000000F7E0 var_10          = -0x10
.text:000000000000F7E0 var_s0          =  0
.text:000000000000F7E0 ; __unwind {
.text:000000000000F7E0                 SUB             SP, SP, #0xF0
.text:000000000000F7E4                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F7E8                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F7EC                 ADD             X29, SP, #0xE0
.text:000000000000F7F0                 MRS             X20, #3, c13, c0, #2
.text:000000000000F7F4                 ADRP            X3, #a17g@PAGE ; "%.17g"
.text:000000000000F7F8                 LDR             X8, [X20,#0x28]
.text:000000000000F7FC                 MOV             W1, #0xC8
.text:000000000000F800                 MOV             X19, X0
.text:000000000000F804                 ADD             X3, X3, #a17g@PAGEOFF ; "%.17g"
.text:000000000000F808                 MOV             X0, SP
.text:000000000000F80C                 MOV             X2, X1
.text:000000000000F810                 STUR            X8, [X29,#var_18]
.text:000000000000F814                 BL              sub_8A58
.text:000000000000F818                 LDR             W8, [X19,#0x80]
.text:000000000000F81C                 LDRB            W9, [X19,#8]
.text:000000000000F820                 SUB             W8, W8, #1
.text:000000000000F824                 STR             W8, [X19,#0x84]
.text:000000000000F828                 CBZ             W9, loc_F83C
.text:000000000000F82C                 MOV             X0, X19 ; this
.text:000000000000F830                 STRB            WZR, [X19,#8]
.text:000000000000F834                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F838                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F83C loc_F83C                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(double)+48↑j
.text:000000000000F83C                 MOV             X1, SP  ; char *
.text:000000000000F840                 MOV             X0, X19 ; this
.text:000000000000F844                 MOV             W2, #1  ; bool
.text:000000000000F848                 BL              ._ZN8tinyxml210XMLPrinter11PrintStringEPKcb ; tinyxml2::XMLPrinter::PrintString(char const*,bool)
.text:000000000000F84C                 LDR             X8, [X20,#0x28]
.text:000000000000F850                 LDUR            X9, [X29,#var_18]
.text:000000000000F854                 CMP             X8, X9
.text:000000000000F858                 B.NE            loc_F86C
.text:000000000000F85C                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000000F860                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000000F864                 ADD             SP, SP, #0xF0
.text:000000000000F868                 RET
.text:000000000000F86C ; ---------------------------------------------------------------------------
.text:000000000000F86C loc_F86C                                ; CODE XREF: tinyxml2::XMLPrinter::PushText(double)+78↑j
.text:000000000000F86C                 BL              .__stack_chk_fail
.text:000000000000F86C ; } // starts at F7E0
.text:000000000000F86C ; End of function tinyxml2::XMLPrinter::PushText(double)
.text:000000000000F870 ; =============== S U B R O U T I N E =======================================
.text:000000000000F870 ; Attributes: bp-based frame
.text:000000000000F870 ; __int64 __fastcall tinyxml2::XMLPrinter::PushComment(tinyxml2::XMLPrinter *__hidden this, const char *)
.text:000000000000F870                 EXPORT _ZN8tinyxml210XMLPrinter11PushCommentEPKc
.text:000000000000F870 _ZN8tinyxml210XMLPrinter11PushCommentEPKc
.text:000000000000F870                                         ; CODE XREF: tinyxml2::XMLPrinter::PushComment(char const*)+C↓j
.text:000000000000F870                                         ; DATA XREF: LOAD:0000000000000810↑o ...
.text:000000000000F870 var_20          = -0x20
.text:000000000000F870 var_10          = -0x10
.text:000000000000F870 var_s0          =  0
.text:000000000000F870 ; __unwind {
.text:000000000000F870                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000F874                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F878                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F87C                 ADD             X29, SP, #0x20
.text:000000000000F880                 LDRB            W8, [X0,#8]
.text:000000000000F884                 MOV             X19, X0
.text:000000000000F888                 MOV             X20, X1
.text:000000000000F88C                 CBZ             W8, loc_F8A0
.text:000000000000F890                 MOV             X0, X19 ; this
.text:000000000000F894                 STRB            WZR, [X19,#8]
.text:000000000000F898                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F89C                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F8A0 loc_F8A0                                ; CODE XREF: tinyxml2::XMLPrinter::PushComment(char const*)+1C↑j
.text:000000000000F8A0                 LDR             W8, [X19,#0x84]
.text:000000000000F8A4                 TBZ             W8, #0x1F, loc_F8D8
.text:000000000000F8A8                 LDRB            W8, [X19,#0x70]
.text:000000000000F8AC                 CBNZ            W8, loc_F8D8
.text:000000000000F8B0                 LDRB            W8, [X19,#0x89]
.text:000000000000F8B4                 CBNZ            W8, loc_F8D8
.text:000000000000F8B8                 MOV             W1, #0xA ; char
.text:000000000000F8BC                 MOV             X0, X19 ; this
.text:000000000000F8C0                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F8C4                 LDR             X8, [X19]
.text:000000000000F8C8                 MOV             X0, X19
.text:000000000000F8CC                 LDR             W1, [X19,#0x80]
.text:000000000000F8D0                 LDR             X8, [X8,#0x60]
.text:000000000000F8D4                 BLR             X8
.text:000000000000F8D8 loc_F8D8                                ; CODE XREF: tinyxml2::XMLPrinter::PushComment(char const*)+34↑j
.text:000000000000F8D8                                         ; tinyxml2::XMLPrinter::PushComment(char const*)+3C↑j ...
.text:000000000000F8D8                 ADRP            X21, #asc_505F@PAGE ; "<!--"
.text:000000000000F8DC                 STRB            WZR, [X19,#0x70]
.text:000000000000F8E0                 ADD             X21, X21, #asc_505F@PAGEOFF ; "<!--"
.text:000000000000F8E4                 MOV             W1, #5
.text:000000000000F8E8                 MOV             X0, X21
.text:000000000000F8EC                 BL              .__strlen_chk
.text:000000000000F8F0                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F8F4                 MOV             X0, X19 ; this
.text:000000000000F8F8                 MOV             X1, X21 ; char *
.text:000000000000F8FC                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F900                 MOV             X0, X20 ; s
.text:000000000000F904                 BL              .strlen
.text:000000000000F908                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F90C                 MOV             X0, X19 ; this
.text:000000000000F910                 MOV             X1, X20 ; char *
.text:000000000000F914                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F918                 ADRP            X20, #asc_4F5A@PAGE ; "-->"
.text:000000000000F91C                 ADD             X20, X20, #asc_4F5A@PAGEOFF ; "-->"
.text:000000000000F920                 MOV             X0, X20
.text:000000000000F924                 MOV             W1, #4
.text:000000000000F928                 BL              .__strlen_chk
.text:000000000000F92C                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F930                 MOV             X0, X19 ; this
.text:000000000000F934                 MOV             X1, X20 ; char *
.text:000000000000F938                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F93C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F940                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000F944                 B               ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F944 ; } // starts at F870
.text:000000000000F944 ; End of function tinyxml2::XMLPrinter::PushComment(char const*)
.text:000000000000F948 ; =============== S U B R O U T I N E =======================================
.text:000000000000F948 ; Attributes: bp-based frame
.text:000000000000F948 ; __int64 __fastcall tinyxml2::XMLPrinter::PushUnknown(tinyxml2::XMLPrinter *__hidden this, const char *)
.text:000000000000F948                 EXPORT _ZN8tinyxml210XMLPrinter11PushUnknownEPKc
.text:000000000000F948 _ZN8tinyxml210XMLPrinter11PushUnknownEPKc
.text:000000000000F948                                         ; CODE XREF: tinyxml2::XMLPrinter::PushUnknown(char const*)+C↓j
.text:000000000000F948                                         ; DATA XREF: LOAD:0000000000001140↑o ...
.text:000000000000F948 var_20          = -0x20
.text:000000000000F948 var_10          = -0x10
.text:000000000000F948 var_s0          =  0
.text:000000000000F948 ; __unwind {
.text:000000000000F948                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000000F94C                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F950                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F954                 ADD             X29, SP, #0x20
.text:000000000000F958                 LDRB            W8, [X0,#8]
.text:000000000000F95C                 MOV             X19, X0
.text:000000000000F960                 MOV             X20, X1
.text:000000000000F964                 CBZ             W8, loc_F978
.text:000000000000F968                 MOV             X0, X19 ; this
.text:000000000000F96C                 STRB            WZR, [X19,#8]
.text:000000000000F970                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000F974                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F978 loc_F978                                ; CODE XREF: tinyxml2::XMLPrinter::PushUnknown(char const*)+1C↑j
.text:000000000000F978                 LDR             W8, [X19,#0x84]
.text:000000000000F97C                 TBZ             W8, #0x1F, loc_F9B0
.text:000000000000F980                 LDRB            W8, [X19,#0x70]
.text:000000000000F984                 CBNZ            W8, loc_F9B0
.text:000000000000F988                 LDRB            W8, [X19,#0x89]
.text:000000000000F98C                 CBNZ            W8, loc_F9B0
.text:000000000000F990                 MOV             W1, #0xA ; char
.text:000000000000F994                 MOV             X0, X19 ; this
.text:000000000000F998                 BL              ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000F99C                 LDR             X8, [X19]
.text:000000000000F9A0                 MOV             X0, X19
.text:000000000000F9A4                 LDR             W1, [X19,#0x80]
.text:000000000000F9A8                 LDR             X8, [X8,#0x60]
.text:000000000000F9AC                 BLR             X8
.text:000000000000F9B0 loc_F9B0                                ; CODE XREF: tinyxml2::XMLPrinter::PushUnknown(char const*)+34↑j
.text:000000000000F9B0                                         ; tinyxml2::XMLPrinter::PushUnknown(char const*)+3C↑j ...
.text:000000000000F9B0                 ADRP            X21, #asc_5168@PAGE ; "<!"
.text:000000000000F9B4                 STRB            WZR, [X19,#0x70]
.text:000000000000F9B8                 ADD             X21, X21, #asc_5168@PAGEOFF ; "<!"
.text:000000000000F9BC                 MOV             X0, X21
.text:000000000000F9C0                 MOV             W1, #3
.text:000000000000F9C4                 BL              .__strlen_chk
.text:000000000000F9C8                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F9CC                 MOV             X0, X19 ; this
.text:000000000000F9D0                 MOV             X1, X21 ; char *
.text:000000000000F9D4                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F9D8                 MOV             X0, X20 ; s
.text:000000000000F9DC                 BL              .strlen
.text:000000000000F9E0                 MOV             X2, X0  ; unsigned __int64
.text:000000000000F9E4                 MOV             X0, X19 ; this
.text:000000000000F9E8                 MOV             X1, X20 ; char *
.text:000000000000F9EC                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000F9F0                 MOV             X0, X19 ; this
.text:000000000000F9F4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000F9F8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000F9FC                 MOV             W1, #0x3E ; '>' ; char
.text:000000000000FA00                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000000FA04                 B               ._ZN8tinyxml210XMLPrinter4PutcEc ; tinyxml2::XMLPrinter::Putc(char)
.text:000000000000FA04 ; } // starts at F948
.text:000000000000FA04 ; End of function tinyxml2::XMLPrinter::PushUnknown(char const*)
.text:000000000000FA08 ; =============== S U B R O U T I N E =======================================
.text:000000000000FA08 ; Attributes: bp-based frame
.text:000000000000FA08 ; __int64 __fastcall tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLPrinter *__hidden this, const tinyxml2::XMLDocument *)
.text:000000000000FA08                 EXPORT _ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE
.text:000000000000FA08 _ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE
.text:000000000000FA08                                         ; DATA XREF: LOAD:0000000000000DB0↑o
.text:000000000000FA08                                         ; .data.rel.ro:0000000000012440↓o
.text:000000000000FA08 var_10          = -0x10
.text:000000000000FA08 var_s0          =  0
.text:000000000000FA08 ; __unwind {
.text:000000000000FA08                 LDRB            W8, [X1,#0x69]
.text:000000000000FA0C                 STRB            W8, [X0,#0x88]
.text:000000000000FA10                 LDRB            W8, [X1,#0x68]
.text:000000000000FA14                 CBZ             W8, loc_FA54
.text:000000000000FA18                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000FA1C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FA20                 ADD             X29, SP, #0x10
.text:000000000000FA24                 ADRP            X20, #unk_51B2@PAGE
.text:000000000000FA28                 ADD             X20, X20, #unk_51B2@PAGEOFF
.text:000000000000FA2C                 MOV             X19, X0
.text:000000000000FA30                 MOV             X0, X20
.text:000000000000FA34                 MOV             W1, #4
.text:000000000000FA38                 BL              .__strlen_chk
.text:000000000000FA3C                 MOV             X2, X0  ; unsigned __int64
.text:000000000000FA40                 MOV             X0, X19 ; this
.text:000000000000FA44                 MOV             X1, X20 ; char *
.text:000000000000FA48                 BL              ._ZN8tinyxml210XMLPrinter5WriteEPKcm ; tinyxml2::XMLPrinter::Write(char const*,ulong)
.text:000000000000FA4C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FA50                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000FA54 loc_FA54                                ; CODE XREF: tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLDocument const&)+C↑j
.text:000000000000FA54                 MOV             W0, #1
.text:000000000000FA58                 RET
.text:000000000000FA58 ; } // starts at FA08
.text:000000000000FA58 ; End of function tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLDocument const&)
.text:000000000000FA58 ; ---------------------------------------------------------------------------
.text:000000000000FA5C                 ALIGN 0x20
.text:000000000000FA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000FA60 ; Attributes: bp-based frame
.text:000000000000FA60 ; __int64 __fastcall tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLPrinter *__hidden this, const tinyxml2::XMLElement *, const tinyxml2::XMLAttribute *)
.text:000000000000FA60                 EXPORT _ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE
.text:000000000000FA60 _ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE
.text:000000000000FA60                                         ; DATA XREF: LOAD:0000000000000E40↑o
.text:000000000000FA60                                         ; .data.rel.ro:0000000000012450↓o
.text:000000000000FA60 var_20          = -0x20
.text:000000000000FA60 var_10          = -0x10
.text:000000000000FA60 var_s0          =  0
.text:000000000000FA60 ; __unwind {
.text:000000000000FA60                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000000FA64                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000000FA68                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000FA6C                 ADD             X29, SP, #0x20
.text:000000000000FA70                 LDR             X8, [X1,#0x10]
.text:000000000000FA74                 MOV             X19, X2
.text:000000000000FA78                 MOV             X21, X1
.text:000000000000FA7C                 MOV             X20, X0
.text:000000000000FA80                 CBZ             X8, loc_FAB4
.text:000000000000FA84                 LDR             X9, [X8]
.text:000000000000FA88                 MOV             X0, X8
.text:000000000000FA8C                 LDR             X9, [X9,#0x30]
.text:000000000000FA90                 BLR             X9
.text:000000000000FA94                 CBZ             X0, loc_FAB4
.text:000000000000FA98                 LDR             X8, [X20]
.text:000000000000FA9C                 MOV             X1, X0
.text:000000000000FAA0                 MOV             X0, X20
.text:000000000000FAA4                 LDR             X8, [X8,#0x58]
.text:000000000000FAA8                 BLR             X8
.text:000000000000FAAC                 MOV             W22, W0
.text:000000000000FAB0                 B               loc_FAC0
.text:000000000000FAB4 ; ---------------------------------------------------------------------------
.text:000000000000FAB4 loc_FAB4                                ; CODE XREF: tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)+20↑j
.text:000000000000FAB4                                         ; tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)+34↑j
.text:000000000000FAB4                 LDRB            W8, [X20,#0x89]
.text:000000000000FAB8                 CMP             W8, #0
.text:000000000000FABC                 CSET            W22, NE
.text:000000000000FAC0 loc_FAC0                                ; CODE XREF: tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)+50↑j
.text:000000000000FAC0                 LDR             X8, [X21]
.text:000000000000FAC4                 MOV             X0, X21
.text:000000000000FAC8                 LDR             X8, [X8,#0x48]
.text:000000000000FACC                 BLR             X8
.text:000000000000FAD0                 CBZ             X0, loc_FADC
.text:000000000000FAD4                 MOV             X1, XZR
.text:000000000000FAD8                 B               loc_FAE8
.text:000000000000FADC ; ---------------------------------------------------------------------------
.text:000000000000FADC loc_FADC                                ; CODE XREF: tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)+70↑j
.text:000000000000FADC                 ADD             X0, X21, #0x18 ; this
.text:000000000000FAE0                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000FAE4                 MOV             X1, X0  ; char *
.text:000000000000FAE8 loc_FAE8                                ; CODE XREF: tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)+78↑j
.text:000000000000FAE8                 AND             W2, W22, #1 ; bool
.text:000000000000FAEC                 MOV             X0, X20 ; this
.text:000000000000FAF0                 BL              ._ZN8tinyxml210XMLPrinter11OpenElementEPKcb ; tinyxml2::XMLPrinter::OpenElement(char const*,bool)
.text:000000000000FAF4                 CBZ             X19, loc_FB24
.text:000000000000FAF8 loc_FAF8                                ; CODE XREF: tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)+C0↓j
.text:000000000000FAF8                 ADD             X0, X19, #8 ; this
.text:000000000000FAFC                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000FB00                 MOV             X21, X0
.text:000000000000FB04                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000000FB08                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000FB0C                 MOV             X2, X0  ; char *
.text:000000000000FB10                 MOV             X0, X20 ; this
.text:000000000000FB14                 MOV             X1, X21 ; char *
.text:000000000000FB18                 BL              ._ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ ; tinyxml2::XMLPrinter::PushAttribute(char const*,char const*)
.text:000000000000FB1C                 LDR             X19, [X19,#0x40]
.text:000000000000FB20                 CBNZ            X19, loc_FAF8
.text:000000000000FB24 loc_FB24                                ; CODE XREF: tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)+94↑j
.text:000000000000FB24                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000FB28                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000000FB2C                 MOV             W0, #1
.text:000000000000FB30                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:000000000000FB34                 RET
.text:000000000000FB34 ; } // starts at FA60
.text:000000000000FB34 ; End of function tinyxml2::XMLPrinter::VisitEnter(tinyxml2::XMLElement const&,tinyxml2::XMLAttribute const*)
.text:000000000000FB38 ; =============== S U B R O U T I N E =======================================
.text:000000000000FB38 ; Attributes: bp-based frame
.text:000000000000FB38 ; tinyxml2::XMLPrinter::VisitExit(tinyxml2::XMLElement const&)
.text:000000000000FB38                 EXPORT _ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE
.text:000000000000FB38 _ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE
.text:000000000000FB38                                         ; DATA XREF: LOAD:00000000000013C8↑o
.text:000000000000FB38                                         ; .data.rel.ro:0000000000012458↓o
.text:000000000000FB38 var_10          = -0x10
.text:000000000000FB38 var_s0          =  0
.text:000000000000FB38 ; __unwind {
.text:000000000000FB38                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000FB3C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FB40                 ADD             X29, SP, #0x10
.text:000000000000FB44                 LDR             X8, [X0]
.text:000000000000FB48                 MOV             X19, X0
.text:000000000000FB4C                 LDR             X8, [X8,#0x58]
.text:000000000000FB50                 BLR             X8
.text:000000000000FB54                 LDR             X8, [X19]
.text:000000000000FB58                 AND             W1, W0, #1
.text:000000000000FB5C                 MOV             X0, X19
.text:000000000000FB60                 LDR             X8, [X8,#0x50]
.text:000000000000FB64                 BLR             X8
.text:000000000000FB68                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FB6C                 MOV             W0, #1
.text:000000000000FB70                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000FB74                 RET
.text:000000000000FB74 ; } // starts at FB38
.text:000000000000FB74 ; End of function tinyxml2::XMLPrinter::VisitExit(tinyxml2::XMLElement const&)
.text:000000000000FB78 ; =============== S U B R O U T I N E =======================================
.text:000000000000FB78 ; Attributes: bp-based frame
.text:000000000000FB78 ; __int64 __fastcall tinyxml2::XMLPrinter::Visit(tinyxml2::XMLPrinter *__hidden this, const tinyxml2::XMLText *)
.text:000000000000FB78                 EXPORT _ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE
.text:000000000000FB78 _ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE
.text:000000000000FB78                                         ; DATA XREF: LOAD:0000000000000D38↑o
.text:000000000000FB78                                         ; .data.rel.ro:0000000000012468↓o
.text:000000000000FB78 var_10          = -0x10
.text:000000000000FB78 var_s0          =  0
.text:000000000000FB78 ; __unwind {
.text:000000000000FB78                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000FB7C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FB80                 ADD             X29, SP, #0x10
.text:000000000000FB84                 LDR             X8, [X1]
.text:000000000000FB88                 MOV             X20, X0
.text:000000000000FB8C                 MOV             X0, X1
.text:000000000000FB90                 MOV             X19, X1
.text:000000000000FB94                 LDR             X8, [X8,#0x48]
.text:000000000000FB98                 BLR             X8
.text:000000000000FB9C                 CBZ             X0, loc_FBA8
.text:000000000000FBA0                 MOV             X1, XZR
.text:000000000000FBA4                 B               loc_FBB4
.text:000000000000FBA8 ; ---------------------------------------------------------------------------
.text:000000000000FBA8 loc_FBA8                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLText const&)+24↑j
.text:000000000000FBA8                 ADD             X0, X19, #0x18 ; this
.text:000000000000FBAC                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000FBB0                 MOV             X1, X0  ; char *
.text:000000000000FBB4 loc_FBB4                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLText const&)+2C↑j
.text:000000000000FBB4                 LDRB            W2, [X19,#0x68] ; bool
.text:000000000000FBB8                 MOV             X0, X20 ; this
.text:000000000000FBBC                 BL              ._ZN8tinyxml210XMLPrinter8PushTextEPKcb ; tinyxml2::XMLPrinter::PushText(char const*,bool)
.text:000000000000FBC0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FBC4                 MOV             W0, #1
.text:000000000000FBC8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000FBCC                 RET
.text:000000000000FBCC ; } // starts at FB78
.text:000000000000FBCC ; End of function tinyxml2::XMLPrinter::Visit(tinyxml2::XMLText const&)
.text:000000000000FBD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FBD0 ; Attributes: bp-based frame
.text:000000000000FBD0 ; __int64 __fastcall tinyxml2::XMLPrinter::Visit(tinyxml2::XMLPrinter *__hidden this, const tinyxml2::XMLComment *)
.text:000000000000FBD0                 EXPORT _ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE
.text:000000000000FBD0 _ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE
.text:000000000000FBD0                                         ; DATA XREF: LOAD:0000000000001650↑o
.text:000000000000FBD0                                         ; .data.rel.ro:0000000000012470↓o
.text:000000000000FBD0 var_10          = -0x10
.text:000000000000FBD0 var_s0          =  0
.text:000000000000FBD0 ; __unwind {
.text:000000000000FBD0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000FBD4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FBD8                 ADD             X29, SP, #0x10
.text:000000000000FBDC                 LDR             X8, [X1]
.text:000000000000FBE0                 MOV             X19, X0
.text:000000000000FBE4                 MOV             X0, X1
.text:000000000000FBE8                 MOV             X20, X1
.text:000000000000FBEC                 LDR             X8, [X8,#0x48]
.text:000000000000FBF0                 BLR             X8
.text:000000000000FBF4                 CBZ             X0, loc_FC00
.text:000000000000FBF8                 MOV             X1, XZR
.text:000000000000FBFC                 B               loc_FC0C
.text:000000000000FC00 ; ---------------------------------------------------------------------------
.text:000000000000FC00 loc_FC00                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLComment const&)+24↑j
.text:000000000000FC00                 ADD             X0, X20, #0x18 ; this
.text:000000000000FC04                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000FC08                 MOV             X1, X0  ; char *
.text:000000000000FC0C loc_FC0C                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLComment const&)+2C↑j
.text:000000000000FC0C                 MOV             X0, X19 ; this
.text:000000000000FC10                 BL              ._ZN8tinyxml210XMLPrinter11PushCommentEPKc ; tinyxml2::XMLPrinter::PushComment(char const*)
.text:000000000000FC14                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FC18                 MOV             W0, #1
.text:000000000000FC1C                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000FC20                 RET
.text:000000000000FC20 ; } // starts at FBD0
.text:000000000000FC20 ; End of function tinyxml2::XMLPrinter::Visit(tinyxml2::XMLComment const&)
.text:000000000000FC20 ; ---------------------------------------------------------------------------
.text:000000000000FC24                 ALIGN 8
.text:000000000000FC28 ; =============== S U B R O U T I N E =======================================
.text:000000000000FC28 ; Attributes: bp-based frame
.text:000000000000FC28 ; __int64 __fastcall tinyxml2::XMLPrinter::Visit(tinyxml2::XMLPrinter *__hidden this, const tinyxml2::XMLDeclaration *)
.text:000000000000FC28                 EXPORT _ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE
.text:000000000000FC28 _ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE
.text:000000000000FC28                                         ; DATA XREF: LOAD:0000000000000BA0↑o
.text:000000000000FC28                                         ; .data.rel.ro:0000000000012460↓o
.text:000000000000FC28 var_10          = -0x10
.text:000000000000FC28 var_s0          =  0
.text:000000000000FC28 ; __unwind {
.text:000000000000FC28                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000FC2C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FC30                 ADD             X29, SP, #0x10
.text:000000000000FC34                 LDR             X8, [X1]
.text:000000000000FC38                 MOV             X19, X0
.text:000000000000FC3C                 MOV             X0, X1
.text:000000000000FC40                 MOV             X20, X1
.text:000000000000FC44                 LDR             X8, [X8,#0x48]
.text:000000000000FC48                 BLR             X8
.text:000000000000FC4C                 CBZ             X0, loc_FC58
.text:000000000000FC50                 MOV             X1, XZR
.text:000000000000FC54                 B               loc_FC64
.text:000000000000FC58 ; ---------------------------------------------------------------------------
.text:000000000000FC58 loc_FC58                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLDeclaration const&)+24↑j
.text:000000000000FC58                 ADD             X0, X20, #0x18 ; this
.text:000000000000FC5C                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000FC60                 MOV             X1, X0  ; char *
.text:000000000000FC64 loc_FC64                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLDeclaration const&)+2C↑j
.text:000000000000FC64                 MOV             X0, X19 ; this
.text:000000000000FC68                 BL              ._ZN8tinyxml210XMLPrinter15PushDeclarationEPKc ; tinyxml2::XMLPrinter::PushDeclaration(char const*)
.text:000000000000FC6C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FC70                 MOV             W0, #1
.text:000000000000FC74                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000FC78                 RET
.text:000000000000FC78 ; } // starts at FC28
.text:000000000000FC78 ; End of function tinyxml2::XMLPrinter::Visit(tinyxml2::XMLDeclaration const&)
.text:000000000000FC78 ; ---------------------------------------------------------------------------
.text:000000000000FC7C                 ALIGN 0x20
.text:000000000000FC80 ; =============== S U B R O U T I N E =======================================
.text:000000000000FC80 ; Attributes: bp-based frame
.text:000000000000FC80 ; __int64 __fastcall tinyxml2::XMLPrinter::Visit(tinyxml2::XMLPrinter *__hidden this, const tinyxml2::XMLUnknown *)
.text:000000000000FC80                 EXPORT _ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE
.text:000000000000FC80 _ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE
.text:000000000000FC80                                         ; DATA XREF: LOAD:00000000000007C8↑o
.text:000000000000FC80                                         ; .data.rel.ro:0000000000012478↓o
.text:000000000000FC80 var_10          = -0x10
.text:000000000000FC80 var_s0          =  0
.text:000000000000FC80 ; __unwind {
.text:000000000000FC80                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000000FC84                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FC88                 ADD             X29, SP, #0x10
.text:000000000000FC8C                 LDR             X8, [X1]
.text:000000000000FC90                 MOV             X19, X0
.text:000000000000FC94                 MOV             X0, X1
.text:000000000000FC98                 MOV             X20, X1
.text:000000000000FC9C                 LDR             X8, [X8,#0x48]
.text:000000000000FCA0                 BLR             X8
.text:000000000000FCA4                 CBZ             X0, loc_FCB0
.text:000000000000FCA8                 MOV             X1, XZR
.text:000000000000FCAC                 B               loc_FCBC
.text:000000000000FCB0 ; ---------------------------------------------------------------------------
.text:000000000000FCB0 loc_FCB0                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLUnknown const&)+24↑j
.text:000000000000FCB0                 ADD             X0, X20, #0x18 ; this
.text:000000000000FCB4                 BL              ._ZN8tinyxml27StrPair6GetStrEv ; tinyxml2::StrPair::GetStr(void)
.text:000000000000FCB8                 MOV             X1, X0  ; char *
.text:000000000000FCBC loc_FCBC                                ; CODE XREF: tinyxml2::XMLPrinter::Visit(tinyxml2::XMLUnknown const&)+2C↑j
.text:000000000000FCBC                 MOV             X0, X19 ; this
.text:000000000000FCC0                 BL              ._ZN8tinyxml210XMLPrinter11PushUnknownEPKc ; tinyxml2::XMLPrinter::PushUnknown(char const*)
.text:000000000000FCC4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FCC8                 MOV             W0, #1
.text:000000000000FCCC                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000FCD0                 RET
.text:000000000000FCD0 ; } // starts at FC80
.text:000000000000FCD0 ; End of function tinyxml2::XMLPrinter::Visit(tinyxml2::XMLUnknown const&)
.text:000000000000FCD0 ; ---------------------------------------------------------------------------
.text:000000000000FCD4                 ALIGN 8
.text:000000000000FCD8 ; __unwind {
.text:000000000000FCD8                 MOV             X0, XZR
.text:000000000000FCDC                 RET
.text:000000000000FCDC ; } // starts at FCD8
.text:000000000000FCE0 ; ---------------------------------------------------------------------------
.text:000000000000FCE0 ; __unwind {
.text:000000000000FCE0                 RET
.text:000000000000FCE0 ; } // starts at FCE0
.text:000000000000FCE0 ; ---------------------------------------------------------------------------
.text:000000000000FCE4                 ALIGN 8
.text:000000000000FCE8 ; =============== S U B R O U T I N E =======================================
.text:000000000000FCE8 ; Attributes: bp-based frame
.text:000000000000FCE8 ; void __fastcall tinyxml2::XMLNode::~XMLNode(tinyxml2::XMLNode *__hidden this)
.text:000000000000FCE8                 EXPORT _ZN8tinyxml27XMLNodeD2Ev
.text:000000000000FCE8 _ZN8tinyxml27XMLNodeD2Ev                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+C↓j
.text:000000000000FCE8                                         ; DATA XREF: LOAD:0000000000000738↑o ...
.text:000000000000FCE8 var_10          = -0x10
.text:000000000000FCE8 var_s0          =  0
.text:000000000000FCE8 ; __unwind {
.text:000000000000FCE8                 STP             X20, X19, [SP,#-0x10+var_10]! ; Alternative name is 'tinyxml2::XMLUnknown::~XMLUnknown()'
.text:000000000000FCEC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FCF0                 ADD             X29, SP, #0x10
.text:000000000000FCF4                 ADRP            X8, #_ZTVN8tinyxml27XMLNodeE_ptr@PAGE
.text:000000000000FCF8                 MOV             X20, X0
.text:000000000000FCFC                 MOV             X19, X0
.text:000000000000FD00                 LDR             X8, [X8,#_ZTVN8tinyxml27XMLNodeE_ptr@PAGEOFF]
.text:000000000000FD04                 ADD             X8, X8, #0x10
.text:000000000000FD08                 STR             X8, [X0]
.text:000000000000FD0C                 LDR             X1, [X20,#0x38]!
.text:000000000000FD10                 CBZ             X1, loc_FD24
.text:000000000000FD14 loc_FD14                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+38↓j
.text:000000000000FD14                 MOV             X0, X19
.text:000000000000FD18                 BL              ._ZN8tinyxml27XMLNode11DeleteChildEPS0_ ; tinyxml2::XMLNode::DeleteChild(tinyxml2::XMLNode*)
.text:000000000000FD1C                 LDR             X1, [X19,#0x38]
.text:000000000000FD20                 CBNZ            X1, loc_FD14
.text:000000000000FD24 loc_FD24                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+28↑j
.text:000000000000FD24                 LDR             X8, [X19,#0x10]
.text:000000000000FD28                 STP             XZR, XZR, [X20]
.text:000000000000FD2C                 CBZ             X8, loc_FD84
.text:000000000000FD30                 LDR             X9, [X8,#0x38]
.text:000000000000FD34                 CMP             X9, X19
.text:000000000000FD38                 B.NE            loc_FD44
.text:000000000000FD3C                 LDR             X9, [X19,#0x50]
.text:000000000000FD40                 STR             X9, [X8,#0x38]
.text:000000000000FD44 loc_FD44                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+50↑j
.text:000000000000FD44                 LDR             X9, [X8,#0x40]
.text:000000000000FD48                 CMP             X9, X19
.text:000000000000FD4C                 B.NE            loc_FD58
.text:000000000000FD50                 LDR             X9, [X19,#0x48]
.text:000000000000FD54                 STR             X9, [X8,#0x40]
.text:000000000000FD58 loc_FD58                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+64↑j
.text:000000000000FD58                 MOV             X8, X19
.text:000000000000FD5C                 LDR             X9, [X8,#0x48]!
.text:000000000000FD60                 CBZ             X9, loc_FD6C
.text:000000000000FD64                 LDR             X10, [X19,#0x50]
.text:000000000000FD68                 STR             X10, [X9,#0x50]
.text:000000000000FD6C loc_FD6C                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+78↑j
.text:000000000000FD6C                 LDR             X9, [X19,#0x50]
.text:000000000000FD70                 CBZ             X9, loc_FD7C
.text:000000000000FD74                 LDR             X10, [X8]
.text:000000000000FD78                 STR             X10, [X9,#0x48]
.text:000000000000FD7C loc_FD7C                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+88↑j
.text:000000000000FD7C                 STR             XZR, [X19,#0x10]
.text:000000000000FD80                 STP             XZR, XZR, [X8]
.text:000000000000FD84 loc_FD84                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+44↑j
.text:000000000000FD84                 LDRB            W8, [X19,#0x19]
.text:000000000000FD88                 TBZ             W8, #1, loc_FD98
.text:000000000000FD8C                 LDR             X0, [X19,#0x20] ; void *
.text:000000000000FD90                 CBZ             X0, loc_FD98
.text:000000000000FD94                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FD98 loc_FD98                                ; CODE XREF: tinyxml2::XMLNode::~XMLNode()+A0↑j
.text:000000000000FD98                                         ; tinyxml2::XMLNode::~XMLNode()+A8↑j
.text:000000000000FD98                 STR             WZR, [X19,#0x18]
.text:000000000000FD9C                 STP             XZR, XZR, [X19,#0x20]
.text:000000000000FDA0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FDA4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000FDA8                 RET
.text:000000000000FDA8 ; } // starts at FCE8
.text:000000000000FDA8 ; End of function tinyxml2::XMLNode::~XMLNode()
.text:000000000000FDA8 ; ---------------------------------------------------------------------------
.text:000000000000FDAC                 ALIGN 0x10
.text:000000000000FDB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FDB0 ; Attributes: bp-based frame
.text:000000000000FDB0 sub_FDB0                                ; DATA XREF: .data.rel.ro:0000000000012528↓o
.text:000000000000FDB0 var_10          = -0x10
.text:000000000000FDB0 var_s0          =  0
.text:000000000000FDB0 ; __unwind {
.text:000000000000FDB0                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000000FDB4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FDB8                 ADD             X29, SP, #0x10
.text:000000000000FDBC                 MOV             X19, X0
.text:000000000000FDC0                 BL              ._ZN8tinyxml27XMLNodeD2Ev ; tinyxml2::XMLNode::~XMLNode()
.text:000000000000FDC4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000FDC8                 MOV             X0, X19 ; void *
.text:000000000000FDCC                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000000FDD0                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000FDD0 ; } // starts at FDB0
.text:000000000000FDD0 ; End of function sub_FDB0
.text:000000000000FDD0 ; ---------------------------------------------------------------------------
.text:000000000000FDD4                 ALIGN 8
.text:000000000000FDD8 ; __unwind {
.text:000000000000FDD8                 STR             X19, [SP,#-0x20]!
.text:000000000000FDDC                 STP             X29, X30, [SP,#0x10]
.text:000000000000FDE0                 ADD             X29, SP, #0x10
.text:000000000000FDE4                 ADRP            X8, #_ZTVN8tinyxml210XMLPrinterE_ptr@PAGE
.text:000000000000FDE8                 MOV             X19, X0
.text:000000000000FDEC                 ADD             X9, X19, #0x118
.text:000000000000FDF0                 LDR             X8, [X8,#_ZTVN8tinyxml210XMLPrinterE_ptr@PAGEOFF]
.text:000000000000FDF4                 LDR             X0, [X0,#0x110]
.text:000000000000FDF8                 ADD             X8, X8, #0x10
.text:000000000000FDFC                 CMP             X0, X9
.text:000000000000FE00                 CCMP            X0, #0, #4, NE
.text:000000000000FE04                 STR             X8, [X19]
.text:000000000000FE08                 B.EQ            loc_FE10
.text:000000000000FE0C                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FE10 loc_FE10                                ; CODE XREF: .text:000000000000FE08↑j
.text:000000000000FE10                 LDR             X0, [X19,#0x10]
.text:000000000000FE14                 ADD             X8, X19, #0x18
.text:000000000000FE18                 CMP             X0, X8
.text:000000000000FE1C                 B.EQ            loc_FE28
.text:000000000000FE20                 CBZ             X0, loc_FE28
.text:000000000000FE24                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FE28 loc_FE28                                ; CODE XREF: .text:000000000000FE1C↑j
.text:000000000000FE28                                         ; .text:000000000000FE20↑j
.text:000000000000FE28                 LDP             X29, X30, [SP,#0x10]
.text:000000000000FE2C                 MOV             X0, X19
.text:000000000000FE30                 LDR             X19, [SP],#0x20
.text:000000000000FE34                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000FE34 ; } // starts at FDD8
.text:000000000000FE38 ; =============== S U B R O U T I N E =======================================
.text:000000000000FE38 sub_FE38                                ; DATA XREF: .data.rel.ro:0000000000012448↓o
.text:000000000000FE38 ; __unwind {
.text:000000000000FE38                 MOV             W0, #1
.text:000000000000FE3C                 RET
.text:000000000000FE3C ; } // starts at FE38
.text:000000000000FE3C ; End of function sub_FE38
.text:000000000000FE40 ; =============== S U B R O U T I N E =======================================
.text:000000000000FE40 sub_FE40                                ; DATA XREF: .data.rel.ro:0000000000012488↓o
.text:000000000000FE40 ; __unwind {
.text:000000000000FE40                 LDRB            W0, [X0,#0x89]
.text:000000000000FE44                 RET
.text:000000000000FE44 ; } // starts at FE40
.text:000000000000FE44 ; End of function sub_FE40
.text:000000000000FE48 ; ---------------------------------------------------------------------------
.text:000000000000FE48 ; __unwind {
.text:000000000000FE48                 MOV             W0, WZR
.text:000000000000FE4C                 RET
.text:000000000000FE4C ; } // starts at FE48
.text:000000000000FE50 ; ---------------------------------------------------------------------------
.text:000000000000FE50 ; __unwind {
.text:000000000000FE50                 STR             X19, [SP,#-0x20]!
.text:000000000000FE54                 STP             X29, X30, [SP,#0x10]
.text:000000000000FE58                 ADD             X29, SP, #0x10
.text:000000000000FE5C                 ADRP            X8, #_ZTVN8tinyxml212XMLAttributeE_ptr@PAGE
.text:000000000000FE60                 MOV             X19, X0
.text:000000000000FE64                 LDR             X8, [X8,#_ZTVN8tinyxml212XMLAttributeE_ptr@PAGEOFF]
.text:000000000000FE68                 LDRB            W9, [X0,#0x21]
.text:000000000000FE6C                 ADD             X8, X8, #0x10
.text:000000000000FE70                 STR             X8, [X0]
.text:000000000000FE74                 TBZ             W9, #1, loc_FE84
.text:000000000000FE78                 LDR             X0, [X19,#0x28]
.text:000000000000FE7C                 CBZ             X0, loc_FE84
.text:000000000000FE80                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FE84 loc_FE84                                ; CODE XREF: .text:000000000000FE74↑j
.text:000000000000FE84                                         ; .text:000000000000FE7C↑j
.text:000000000000FE84                 LDRB            W8, [X19,#9]
.text:000000000000FE88                 STR             WZR, [X19,#0x20]
.text:000000000000FE8C                 STP             XZR, XZR, [X19,#0x28]
.text:000000000000FE90                 TBZ             W8, #1, loc_FEA0
.text:000000000000FE94                 LDR             X0, [X19,#0x10]
.text:000000000000FE98                 CBZ             X0, loc_FEA0
.text:000000000000FE9C                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FEA0 loc_FEA0                                ; CODE XREF: .text:000000000000FE90↑j
.text:000000000000FEA0                                         ; .text:000000000000FE98↑j
.text:000000000000FEA0                 STR             WZR, [X19,#8]
.text:000000000000FEA4                 STP             XZR, XZR, [X19,#0x10]
.text:000000000000FEA8                 LDP             X29, X30, [SP,#0x10]
.text:000000000000FEAC                 LDR             X19, [SP],#0x20
.text:000000000000FEB0                 RET
.text:000000000000FEB0 ; } // starts at FE50
.text:000000000000FEB0 ; ---------------------------------------------------------------------------
.text:000000000000FEB4                 ALIGN 8
.text:000000000000FEB8 ; __unwind {
.text:000000000000FEB8                 STR             X19, [SP,#-0x20]!
.text:000000000000FEBC                 STP             X29, X30, [SP,#0x10]
.text:000000000000FEC0                 ADD             X29, SP, #0x10
.text:000000000000FEC4                 ADRP            X8, #_ZTVN8tinyxml212XMLAttributeE_ptr@PAGE
.text:000000000000FEC8                 MOV             X19, X0
.text:000000000000FECC                 LDR             X8, [X8,#_ZTVN8tinyxml212XMLAttributeE_ptr@PAGEOFF]
.text:000000000000FED0                 LDRB            W9, [X0,#0x21]
.text:000000000000FED4                 ADD             X8, X8, #0x10
.text:000000000000FED8                 STR             X8, [X0]
.text:000000000000FEDC                 TBZ             W9, #1, loc_FEEC
.text:000000000000FEE0                 LDR             X0, [X19,#0x28]
.text:000000000000FEE4                 CBZ             X0, loc_FEEC
.text:000000000000FEE8                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FEEC loc_FEEC                                ; CODE XREF: .text:000000000000FEDC↑j
.text:000000000000FEEC                                         ; .text:000000000000FEE4↑j
.text:000000000000FEEC                 LDRB            W8, [X19,#9]
.text:000000000000FEF0                 STR             WZR, [X19,#0x20]
.text:000000000000FEF4                 STP             XZR, XZR, [X19,#0x28]
.text:000000000000FEF8                 TBZ             W8, #1, loc_FF08
.text:000000000000FEFC                 LDR             X0, [X19,#0x10]
.text:000000000000FF00                 CBZ             X0, loc_FF08
.text:000000000000FF04                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FF08 loc_FF08                                ; CODE XREF: .text:000000000000FEF8↑j
.text:000000000000FF08                                         ; .text:000000000000FF00↑j
.text:000000000000FF08                 LDP             X29, X30, [SP,#0x10]
.text:000000000000FF0C                 MOV             X0, X19
.text:000000000000FF10                 LDR             X19, [SP],#0x20
.text:000000000000FF14                 B               ._ZdlPv ; operator delete(void *)
.text:000000000000FF14 ; } // starts at FEB8
.text:000000000000FF18 ; =============== S U B R O U T I N E =======================================
.text:000000000000FF18 ; Attributes: bp-based frame
.text:000000000000FF18 sub_FF18                                ; CODE XREF: .text:000000000000D1A8↑p
.text:000000000000FF18 var_30          = -0x30
.text:000000000000FF18 var_20          = -0x20
.text:000000000000FF18 var_10          = -0x10
.text:000000000000FF18 var_s0          =  0
.text:000000000000FF18 ; __unwind {
.text:000000000000FF18                 STR             X23, [SP,#-0x10+var_30]!
.text:000000000000FF1C                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000000FF20                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000000FF24                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000FF28                 ADD             X29, SP, #0x30
.text:000000000000FF2C                 LDP             W9, W8, [X0,#0x58]
.text:000000000000FF30                 MOV             X19, X0
.text:000000000000FF34                 MOV             X20, X1
.text:000000000000FF38                 CMP             W9, W8
.text:000000000000FF3C                 B.LE            loc_FF48
.text:000000000000FF40                 LDR             X21, [X19]
.text:000000000000FF44                 B               loc_FF9C
.text:000000000000FF48 ; ---------------------------------------------------------------------------
.text:000000000000FF48 loc_FF48                                ; CODE XREF: sub_FF18+24↑j
.text:000000000000FF48                 LSL             W9, W8, #1
.text:000000000000FF4C                 ADD             W22, W9, #2
.text:000000000000FF50                 SXTW            X9, W22
.text:000000000000FF54                 CMP             XZR, X9,LSR#61
.text:000000000000FF58                 SBFIZ           X10, X22, #3, #0x20 ; ' '
.text:000000000000FF5C                 CSINV           X0, X10, XZR, EQ ; unsigned __int64
.text:000000000000FF60                 SXTW            X23, W8
.text:000000000000FF64                 BL              ._Znam  ; operator new[](ulong)
.text:000000000000FF68                 LDR             X1, [X19] ; src
.text:000000000000FF6C                 LSL             X2, X23, #3 ; n
.text:000000000000FF70                 MOV             X21, X0
.text:000000000000FF74                 BL              .memcpy
.text:000000000000FF78                 MOV             X8, X19
.text:000000000000FF7C                 LDR             X0, [X8],#8 ; void *
.text:000000000000FF80                 CMP             X0, X8
.text:000000000000FF84                 B.EQ            loc_FF90
.text:000000000000FF88                 CBZ             X0, loc_FF90
.text:000000000000FF8C                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000000FF90 loc_FF90                                ; CODE XREF: sub_FF18+6C↑j
.text:000000000000FF90                                         ; sub_FF18+70↑j
.text:000000000000FF90                 LDR             W8, [X19,#0x5C]
.text:000000000000FF94                 STR             X21, [X19]
.text:000000000000FF98                 STR             W22, [X19,#0x58]
.text:000000000000FF9C loc_FF9C                                ; CODE XREF: sub_FF18+2C↑j
.text:000000000000FF9C                 STR             X20, [X21,W8,SXTW#3]
.text:000000000000FFA0                 LDR             W8, [X19,#0x5C]
.text:000000000000FFA4                 ADD             W8, W8, #1
.text:000000000000FFA8                 STR             W8, [X19,#0x5C]
.text:000000000000FFAC                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000FFB0                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000000FFB4                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000000FFB8                 LDR             X23, [SP+0x30+var_30],#0x40
.text:000000000000FFBC                 RET
.text:000000000000FFBC ; } // starts at FF18
.text:000000000000FFBC ; End of function sub_FF18
.text:000000000000FFC0 ; ---------------------------------------------------------------------------
.text:000000000000FFC0 ; __unwind {
.text:000000000000FFC0                 STR             X19, [SP,#-0x20]!
.text:000000000000FFC4                 STP             X29, X30, [SP,#0x10]
.text:000000000000FFC8                 ADD             X29, SP, #0x10
.text:000000000000FFCC                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGE
.text:000000000000FFD0                 MOV             X19, X0
.text:000000000000FFD4                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi120EEE_ptr@PAGEOFF]
.text:000000000000FFD8                 LDR             W8, [X0,#0x64]
.text:000000000000FFDC                 ADD             X9, X9, #0x10
.text:000000000000FFE0                 STR             X9, [X0]
.text:000000000000FFE4                 CBZ             W8, loc_10008
.text:000000000000FFE8 loc_FFE8                                ; CODE XREF: .text:loc_10004↓j
.text:000000000000FFE8                 SUB             W8, W8, #1
.text:000000000000FFEC                 LDR             X9, [X19,#8]
.text:000000000000FFF0                 STR             W8, [X19,#0x64]
.text:000000000000FFF4                 LDR             X0, [X9,W8,SXTW#3]
.text:000000000000FFF8                 CBZ             X0, loc_10004
.text:000000000000FFFC                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000010000                 LDR             W8, [X19,#0x64]
.text:0000000000010004 loc_10004                               ; CODE XREF: .text:000000000000FFF8↑j
.text:0000000000010004                 CBNZ            W8, loc_FFE8
.text:0000000000010008 loc_10008                               ; CODE XREF: .text:000000000000FFE4↑j
.text:0000000000010008                 LDR             X0, [X19,#8]
.text:000000000001000C                 ADD             X8, X19, #0x10
.text:0000000000010010                 STP             XZR, XZR, [X19,#0x68]
.text:0000000000010014                 STR             XZR, [X19,#0x78]
.text:0000000000010018                 CMP             X0, X8
.text:000000000001001C                 B.EQ            loc_10028
.text:0000000000010020                 CBZ             X0, loc_10028
.text:0000000000010024                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000010028 loc_10028                               ; CODE XREF: .text:000000000001001C↑j
.text:0000000000010028                                         ; .text:0000000000010020↑j
.text:0000000000010028                 LDP             X29, X30, [SP,#0x10]
.text:000000000001002C                 MOV             X0, X19
.text:0000000000010030                 LDR             X19, [SP],#0x20
.text:0000000000010034                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000010034 ; } // starts at FFC0
.text:0000000000010038 ; ---------------------------------------------------------------------------
.text:0000000000010038 ; __unwind {
.text:0000000000010038                 MOV             W0, #0x78 ; 'x'
.text:000000000001003C                 RET
.text:000000000001003C ; } // starts at 10038
.text:0000000000010040 ; ---------------------------------------------------------------------------
.text:0000000000010040 ; __unwind {
.text:0000000000010040                 STR             X23, [SP,#-0x40]!
.text:0000000000010044                 STP             X22, X21, [SP,#0x10]
.text:0000000000010048                 STP             X20, X19, [SP,#0x20]
.text:000000000001004C                 STP             X29, X30, [SP,#0x30]
.text:0000000000010050                 ADD             X29, SP, #0x30 ; '0'
.text:0000000000010054                 LDR             X20, [X0,#0x68]
.text:0000000000010058                 MOV             X19, X0
.text:000000000001005C                 CBNZ            X20, loc_10200
.text:0000000000010060                 MOV             W0, #0xFF0
.text:0000000000010064                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000010068                 MOV             W1, WZR
.text:000000000001006C                 MOV             W2, #0xFF0
.text:0000000000010070                 MOV             X20, X0
.text:0000000000010074                 BL              .memset
.text:0000000000010078                 LDP             W9, W8, [X19,#0x60]
.text:000000000001007C                 CMP             W9, W8
.text:0000000000010080                 B.LE            loc_1008C
.text:0000000000010084                 LDR             X21, [X19,#8]
.text:0000000000010088                 B               loc_100E0
.text:000000000001008C ; ---------------------------------------------------------------------------
.text:000000000001008C loc_1008C                               ; CODE XREF: .text:0000000000010080↑j
.text:000000000001008C                 LSL             W9, W8, #1
.text:0000000000010090                 ADD             W22, W9, #2
.text:0000000000010094                 SXTW            X9, W22
.text:0000000000010098                 CMP             XZR, X9,LSR#61
.text:000000000001009C                 SBFIZ           X10, X22, #3, #0x20 ; ' '
.text:00000000000100A0                 CSINV           X0, X10, XZR, EQ
.text:00000000000100A4                 SXTW            X23, W8
.text:00000000000100A8                 BL              ._Znam  ; operator new[](ulong)
.text:00000000000100AC                 LDR             X1, [X19,#8]
.text:00000000000100B0                 LSL             X2, X23, #3
.text:00000000000100B4                 MOV             X21, X0
.text:00000000000100B8                 BL              .memcpy
.text:00000000000100BC                 LDR             X0, [X19,#8]
.text:00000000000100C0                 ADD             X8, X19, #0x10
.text:00000000000100C4                 CMP             X0, X8
.text:00000000000100C8                 B.EQ            loc_100D4
.text:00000000000100CC                 CBZ             X0, loc_100D4
.text:00000000000100D0                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000100D4 loc_100D4                               ; CODE XREF: .text:00000000000100C8↑j
.text:00000000000100D4                                         ; .text:00000000000100CC↑j
.text:00000000000100D4                 LDR             W8, [X19,#0x64]
.text:00000000000100D8                 STR             X21, [X19,#8]
.text:00000000000100DC                 STR             W22, [X19,#0x60]
.text:00000000000100E0 loc_100E0                               ; CODE XREF: .text:0000000000010088↑j
.text:00000000000100E0                 ADD             X9, X20, #0x78 ; 'x'
.text:00000000000100E4                 STR             X20, [X21,W8,SXTW#3]
.text:00000000000100E8                 MOV             X10, X20
.text:00000000000100EC                 LDR             W11, [X19,#0x64]
.text:00000000000100F0                 ADD             X8, X20, #0x168
.text:00000000000100F4                 STR             X9, [X10],#0xF0
.text:00000000000100F8                 ADD             X9, X20, #0x1E0
.text:00000000000100FC                 STR             X8, [X10]
.text:0000000000010100                 ADD             X8, X20, #0x258
.text:0000000000010104                 STR             X10, [X20,#0x78]
.text:0000000000010108                 ADD             W10, W11, #1
.text:000000000001010C                 STR             X9, [X20,#0x168]
.text:0000000000010110                 ADD             X9, X20, #0x2D0
.text:0000000000010114                 STR             X8, [X20,#0x1E0]
.text:0000000000010118                 ADD             X8, X20, #0x348
.text:000000000001011C                 STR             W10, [X19,#0x64]
.text:0000000000010120                 ADD             X10, X20, #0x3C0
.text:0000000000010124                 STR             X9, [X20,#0x258]
.text:0000000000010128                 ADD             X9, X20, #0x438
.text:000000000001012C                 STR             X8, [X20,#0x2D0]
.text:0000000000010130                 ADD             X8, X20, #0x4B0
.text:0000000000010134                 STR             X10, [X20,#0x348]
.text:0000000000010138                 ADD             X10, X20, #0x528
.text:000000000001013C                 STR             X9, [X20,#0x3C0]
.text:0000000000010140                 ADD             X9, X20, #0x5A0
.text:0000000000010144                 STR             X8, [X20,#0x438]
.text:0000000000010148                 ADD             X8, X20, #0x618
.text:000000000001014C                 STR             X10, [X20,#0x4B0]
.text:0000000000010150                 ADD             X10, X20, #0x690
.text:0000000000010154                 STR             X9, [X20,#0x528]
.text:0000000000010158                 ADD             X9, X20, #0x708
.text:000000000001015C                 STR             X8, [X20,#0x5A0]
.text:0000000000010160                 ADD             X8, X20, #0x780
.text:0000000000010164                 STR             X10, [X20,#0x618]
.text:0000000000010168                 ADD             X10, X20, #0x7F8
.text:000000000001016C                 STR             X9, [X20,#0x690]
.text:0000000000010170                 ADD             X9, X20, #0x870
.text:0000000000010174                 STR             X8, [X20,#0x708]
.text:0000000000010178                 ADD             X8, X20, #0x8E8
.text:000000000001017C                 STR             X10, [X20,#0x780]
.text:0000000000010180                 ADD             X10, X20, #0x960
.text:0000000000010184                 STR             X9, [X20,#0x7F8]
.text:0000000000010188                 ADD             X9, X20, #0x9D8
.text:000000000001018C                 STR             X8, [X20,#0x870]
.text:0000000000010190                 ADD             X8, X20, #0xA50
.text:0000000000010194                 STR             X10, [X20,#0x8E8]
.text:0000000000010198                 ADD             X10, X20, #0xAC8
.text:000000000001019C                 STR             X9, [X20,#0x960]
.text:00000000000101A0                 ADD             X9, X20, #0xB40
.text:00000000000101A4                 STR             X8, [X20,#0x9D8]
.text:00000000000101A8                 ADD             X8, X20, #0xBB8
.text:00000000000101AC                 STR             X10, [X20,#0xA50]
.text:00000000000101B0                 ADD             X10, X20, #0xC30
.text:00000000000101B4                 STR             X9, [X20,#0xAC8]
.text:00000000000101B8                 ADD             X9, X20, #0xCA8
.text:00000000000101BC                 STR             X8, [X20,#0xB40]
.text:00000000000101C0                 ADD             X8, X20, #0xD20
.text:00000000000101C4                 STR             X10, [X20,#0xBB8]
.text:00000000000101C8                 ADD             X10, X20, #0xD98
.text:00000000000101CC                 STR             X9, [X20,#0xC30]
.text:00000000000101D0                 ADD             X9, X20, #0xE10
.text:00000000000101D4                 STR             X8, [X20,#0xCA8]
.text:00000000000101D8                 ADD             X8, X20, #0xE88
.text:00000000000101DC                 STR             X10, [X20,#0xD20]
.text:00000000000101E0                 ADD             X10, X20, #0xF00
.text:00000000000101E4                 STR             X9, [X20,#0xD98]
.text:00000000000101E8                 ADD             X9, X20, #0xF78
.text:00000000000101EC                 STR             X8, [X20,#0xE10]
.text:00000000000101F0                 STR             X10, [X20,#0xE88]
.text:00000000000101F4                 STR             X9, [X20,#0xF00]
.text:00000000000101F8                 STR             XZR, [X20,#0xF78]
.text:00000000000101FC                 STR             X20, [X19,#0x68]
.text:0000000000010200 loc_10200                               ; CODE XREF: .text:000000000001005C↑j
.text:0000000000010200                 LDR             W9, [X19,#0x70]
.text:0000000000010204                 LDR             W11, [X19,#0x78]
.text:0000000000010208                 LDR             X10, [X20]
.text:000000000001020C                 ADD             W8, W9, #1
.text:0000000000010210                 CMP             W9, W11
.text:0000000000010214                 STR             X10, [X19,#0x68]
.text:0000000000010218                 STR             W8, [X19,#0x70]
.text:000000000001021C                 B.LT            loc_10224
.text:0000000000010220                 STR             W8, [X19,#0x78]
.text:0000000000010224 loc_10224                               ; CODE XREF: .text:000000000001021C↑j
.text:0000000000010224                 LDR             W8, [X19,#0x74]
.text:0000000000010228                 MOV             X0, X20
.text:000000000001022C                 LDR             W9, [X19,#0x7C]
.text:0000000000010230                 ADD             W8, W8, #1
.text:0000000000010234                 ADD             W9, W9, #1
.text:0000000000010238                 STR             W8, [X19,#0x74]
.text:000000000001023C                 STR             W9, [X19,#0x7C]
.text:0000000000010240                 LDP             X29, X30, [SP,#0x30]
.text:0000000000010244                 LDP             X20, X19, [SP,#0x20]
.text:0000000000010248                 LDP             X22, X21, [SP,#0x10]
.text:000000000001024C                 LDR             X23, [SP],#0x40
.text:0000000000010250                 RET
.text:0000000000010250 ; } // starts at 10040
.text:0000000000010250 ; ---------------------------------------------------------------------------
.text:0000000000010254                 ALIGN 8
.text:0000000000010258 ; __unwind {
.text:0000000000010258                 CBZ             X1, locret_10274
.text:000000000001025C                 LDR             W8, [X0,#0x70]
.text:0000000000010260                 LDR             X9, [X0,#0x68]
.text:0000000000010264                 SUB             W8, W8, #1
.text:0000000000010268                 STR             W8, [X0,#0x70]
.text:000000000001026C                 STR             X9, [X1]
.text:0000000000010270                 STR             X1, [X0,#0x68]
.text:0000000000010274 locret_10274                            ; CODE XREF: .text:0000000000010258↑j
.text:0000000000010274                 RET
.text:0000000000010274 ; } // starts at 10258
.text:0000000000010278 ; ---------------------------------------------------------------------------
.text:0000000000010278 ; __unwind {
.text:0000000000010278                 LDR             W8, [X0,#0x7C]
.text:000000000001027C                 SUB             W8, W8, #1
.text:0000000000010280                 STR             W8, [X0,#0x7C]
.text:0000000000010284                 RET
.text:0000000000010284 ; } // starts at 10278
.text:0000000000010288 ; ---------------------------------------------------------------------------
.text:0000000000010288 ; __unwind {
.text:0000000000010288                 STR             X19, [SP,#-0x20]!
.text:000000000001028C                 STP             X29, X30, [SP,#0x10]
.text:0000000000010290                 ADD             X29, SP, #0x10
.text:0000000000010294                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGE
.text:0000000000010298                 MOV             X19, X0
.text:000000000001029C                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi80EEE_ptr@PAGEOFF]
.text:00000000000102A0                 LDR             W8, [X0,#0x64]
.text:00000000000102A4                 ADD             X9, X9, #0x10
.text:00000000000102A8                 STR             X9, [X0]
.text:00000000000102AC                 CBZ             W8, loc_102D0
.text:00000000000102B0 loc_102B0                               ; CODE XREF: .text:loc_102CC↓j
.text:00000000000102B0                 SUB             W8, W8, #1
.text:00000000000102B4                 LDR             X9, [X19,#8]
.text:00000000000102B8                 STR             W8, [X19,#0x64]
.text:00000000000102BC                 LDR             X0, [X9,W8,SXTW#3]
.text:00000000000102C0                 CBZ             X0, loc_102CC
.text:00000000000102C4                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000102C8                 LDR             W8, [X19,#0x64]
.text:00000000000102CC loc_102CC                               ; CODE XREF: .text:00000000000102C0↑j
.text:00000000000102CC                 CBNZ            W8, loc_102B0
.text:00000000000102D0 loc_102D0                               ; CODE XREF: .text:00000000000102AC↑j
.text:00000000000102D0                 LDR             X0, [X19,#8]
.text:00000000000102D4                 ADD             X8, X19, #0x10
.text:00000000000102D8                 STP             XZR, XZR, [X19,#0x68]
.text:00000000000102DC                 STR             XZR, [X19,#0x78]
.text:00000000000102E0                 CMP             X0, X8
.text:00000000000102E4                 B.EQ            loc_102F0
.text:00000000000102E8                 CBZ             X0, loc_102F0
.text:00000000000102EC                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000102F0 loc_102F0                               ; CODE XREF: .text:00000000000102E4↑j
.text:00000000000102F0                                         ; .text:00000000000102E8↑j
.text:00000000000102F0                 LDP             X29, X30, [SP,#0x10]
.text:00000000000102F4                 MOV             X0, X19
.text:00000000000102F8                 LDR             X19, [SP],#0x20
.text:00000000000102FC                 B               ._ZdlPv ; operator delete(void *)
.text:00000000000102FC ; } // starts at 10288
.text:0000000000010300 ; ---------------------------------------------------------------------------
.text:0000000000010300 ; __unwind {
.text:0000000000010300                 MOV             W0, #0x50 ; 'P'
.text:0000000000010304                 RET
.text:0000000000010304 ; } // starts at 10300
.text:0000000000010308 ; ---------------------------------------------------------------------------
.text:0000000000010308 ; __unwind {
.text:0000000000010308                 STR             X19, [SP,#-0x20]!
.text:000000000001030C                 STP             X29, X30, [SP,#0x10]
.text:0000000000010310                 ADD             X29, SP, #0x10
.text:0000000000010314                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGE
.text:0000000000010318                 MOV             X19, X0
.text:000000000001031C                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi112EEE_ptr@PAGEOFF]
.text:0000000000010320                 LDR             W8, [X0,#0x64]
.text:0000000000010324                 ADD             X9, X9, #0x10
.text:0000000000010328                 STR             X9, [X0]
.text:000000000001032C                 CBZ             W8, loc_10350
.text:0000000000010330 loc_10330                               ; CODE XREF: .text:loc_1034C↓j
.text:0000000000010330                 SUB             W8, W8, #1
.text:0000000000010334                 LDR             X9, [X19,#8]
.text:0000000000010338                 STR             W8, [X19,#0x64]
.text:000000000001033C                 LDR             X0, [X9,W8,SXTW#3]
.text:0000000000010340                 CBZ             X0, loc_1034C
.text:0000000000010344                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000010348                 LDR             W8, [X19,#0x64]
.text:000000000001034C loc_1034C                               ; CODE XREF: .text:0000000000010340↑j
.text:000000000001034C                 CBNZ            W8, loc_10330
.text:0000000000010350 loc_10350                               ; CODE XREF: .text:000000000001032C↑j
.text:0000000000010350                 LDR             X0, [X19,#8]
.text:0000000000010354                 ADD             X8, X19, #0x10
.text:0000000000010358                 STP             XZR, XZR, [X19,#0x68]
.text:000000000001035C                 STR             XZR, [X19,#0x78]
.text:0000000000010360                 CMP             X0, X8
.text:0000000000010364                 B.EQ            loc_10370
.text:0000000000010368                 CBZ             X0, loc_10370
.text:000000000001036C                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000010370 loc_10370                               ; CODE XREF: .text:0000000000010364↑j
.text:0000000000010370                                         ; .text:0000000000010368↑j
.text:0000000000010370                 LDP             X29, X30, [SP,#0x10]
.text:0000000000010374                 MOV             X0, X19
.text:0000000000010378                 LDR             X19, [SP],#0x20
.text:000000000001037C                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001037C ; } // starts at 10308
.text:0000000000010380 ; ---------------------------------------------------------------------------
.text:0000000000010380 ; __unwind {
.text:0000000000010380                 MOV             W0, #0x70 ; 'p'
.text:0000000000010384                 RET
.text:0000000000010384 ; } // starts at 10380
.text:0000000000010388 ; ---------------------------------------------------------------------------
.text:0000000000010388 ; __unwind {
.text:0000000000010388                 STR             X23, [SP,#-0x40]!
.text:000000000001038C                 STP             X22, X21, [SP,#0x10]
.text:0000000000010390                 STP             X20, X19, [SP,#0x20]
.text:0000000000010394                 STP             X29, X30, [SP,#0x30]
.text:0000000000010398                 ADD             X29, SP, #0x30 ; '0'
.text:000000000001039C                 LDR             X20, [X0,#0x68]
.text:00000000000103A0                 MOV             X19, X0
.text:00000000000103A4                 CBNZ            X20, loc_10558
.text:00000000000103A8                 MOV             W0, #0xFC0
.text:00000000000103AC                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000103B0                 MOV             W1, WZR
.text:00000000000103B4                 MOV             W2, #0xFC0
.text:00000000000103B8                 MOV             X20, X0
.text:00000000000103BC                 BL              .memset
.text:00000000000103C0                 LDP             W9, W8, [X19,#0x60]
.text:00000000000103C4                 CMP             W9, W8
.text:00000000000103C8                 B.LE            loc_103D4
.text:00000000000103CC                 LDR             X21, [X19,#8]
.text:00000000000103D0                 B               loc_10428
.text:00000000000103D4 ; ---------------------------------------------------------------------------
.text:00000000000103D4 loc_103D4                               ; CODE XREF: .text:00000000000103C8↑j
.text:00000000000103D4                 LSL             W9, W8, #1
.text:00000000000103D8                 ADD             W22, W9, #2
.text:00000000000103DC                 SXTW            X9, W22
.text:00000000000103E0                 CMP             XZR, X9,LSR#61
.text:00000000000103E4                 SBFIZ           X10, X22, #3, #0x20 ; ' '
.text:00000000000103E8                 CSINV           X0, X10, XZR, EQ
.text:00000000000103EC                 SXTW            X23, W8
.text:00000000000103F0                 BL              ._Znam  ; operator new[](ulong)
.text:00000000000103F4                 LDR             X1, [X19,#8]
.text:00000000000103F8                 LSL             X2, X23, #3
.text:00000000000103FC                 MOV             X21, X0
.text:0000000000010400                 BL              .memcpy
.text:0000000000010404                 LDR             X0, [X19,#8]
.text:0000000000010408                 ADD             X8, X19, #0x10
.text:000000000001040C                 CMP             X0, X8
.text:0000000000010410                 B.EQ            loc_1041C
.text:0000000000010414                 CBZ             X0, loc_1041C
.text:0000000000010418                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000001041C loc_1041C                               ; CODE XREF: .text:0000000000010410↑j
.text:000000000001041C                                         ; .text:0000000000010414↑j
.text:000000000001041C                 LDR             W8, [X19,#0x64]
.text:0000000000010420                 STR             X21, [X19,#8]
.text:0000000000010424                 STR             W22, [X19,#0x60]
.text:0000000000010428 loc_10428                               ; CODE XREF: .text:00000000000103D0↑j
.text:0000000000010428                 STR             X20, [X21,W8,SXTW#3]
.text:000000000001042C                 ADD             X9, X20, #0x70 ; 'p'
.text:0000000000010430                 MOV             X10, X20
.text:0000000000010434                 LDR             W11, [X19,#0x64]
.text:0000000000010438                 ADD             X8, X20, #0x150
.text:000000000001043C                 STR             X9, [X10],#0xE0
.text:0000000000010440                 ADD             X9, X20, #0x1C0
.text:0000000000010444                 STR             X8, [X10]
.text:0000000000010448                 ADD             X8, X20, #0x230
.text:000000000001044C                 STR             X10, [X20,#0x70]
.text:0000000000010450                 ADD             W10, W11, #1
.text:0000000000010454                 STR             X9, [X20,#0x150]
.text:0000000000010458                 ADD             X9, X20, #0x2A0
.text:000000000001045C                 STR             X8, [X20,#0x1C0]
.text:0000000000010460                 ADD             X8, X20, #0x310
.text:0000000000010464                 STR             W10, [X19,#0x64]
.text:0000000000010468                 ADD             X10, X20, #0x380
.text:000000000001046C                 STR             X9, [X20,#0x230]
.text:0000000000010470                 ADD             X9, X20, #0x3F0
.text:0000000000010474                 STR             X8, [X20,#0x2A0]
.text:0000000000010478                 ADD             X8, X20, #0x460
.text:000000000001047C                 STR             X10, [X20,#0x310]
.text:0000000000010480                 ADD             X10, X20, #0x4D0
.text:0000000000010484                 STR             X9, [X20,#0x380]
.text:0000000000010488                 ADD             X9, X20, #0x540
.text:000000000001048C                 STR             X8, [X20,#0x3F0]
.text:0000000000010490                 ADD             X8, X20, #0x5B0
.text:0000000000010494                 STR             X10, [X20,#0x460]
.text:0000000000010498                 ADD             X10, X20, #0x620
.text:000000000001049C                 STR             X9, [X20,#0x4D0]
.text:00000000000104A0                 ADD             X9, X20, #0x690
.text:00000000000104A4                 STR             X8, [X20,#0x540]
.text:00000000000104A8                 ADD             X8, X20, #0x700
.text:00000000000104AC                 STR             X10, [X20,#0x5B0]
.text:00000000000104B0                 ADD             X10, X20, #0x770
.text:00000000000104B4                 STR             X9, [X20,#0x620]
.text:00000000000104B8                 ADD             X9, X20, #0x7E0
.text:00000000000104BC                 STR             X8, [X20,#0x690]
.text:00000000000104C0                 ADD             X8, X20, #0x850
.text:00000000000104C4                 STR             X10, [X20,#0x700]
.text:00000000000104C8                 ADD             X10, X20, #0x8C0
.text:00000000000104CC                 STR             X9, [X20,#0x770]
.text:00000000000104D0                 ADD             X9, X20, #0x930
.text:00000000000104D4                 STR             X8, [X20,#0x7E0]
.text:00000000000104D8                 ADD             X8, X20, #0x9A0
.text:00000000000104DC                 STR             X10, [X20,#0x850]
.text:00000000000104E0                 ADD             X10, X20, #0xA10
.text:00000000000104E4                 STR             X9, [X20,#0x8C0]
.text:00000000000104E8                 ADD             X9, X20, #0xA80
.text:00000000000104EC                 STR             X8, [X20,#0x930]
.text:00000000000104F0                 ADD             X8, X20, #0xAF0
.text:00000000000104F4                 STR             X10, [X20,#0x9A0]
.text:00000000000104F8                 ADD             X10, X20, #0xB60
.text:00000000000104FC                 STR             X9, [X20,#0xA10]
.text:0000000000010500                 ADD             X9, X20, #0xBD0
.text:0000000000010504                 STR             X8, [X20,#0xA80]
.text:0000000000010508                 ADD             X8, X20, #0xC40
.text:000000000001050C                 STR             X10, [X20,#0xAF0]
.text:0000000000010510                 ADD             X10, X20, #0xCB0
.text:0000000000010514                 STR             X9, [X20,#0xB60]
.text:0000000000010518                 ADD             X9, X20, #0xD20
.text:000000000001051C                 STR             X8, [X20,#0xBD0]
.text:0000000000010520                 ADD             X8, X20, #0xD90
.text:0000000000010524                 STR             X10, [X20,#0xC40]
.text:0000000000010528                 ADD             X10, X20, #0xE00
.text:000000000001052C                 STR             X9, [X20,#0xCB0]
.text:0000000000010530                 ADD             X9, X20, #0xE70
.text:0000000000010534                 STR             X8, [X20,#0xD20]
.text:0000000000010538                 ADD             X8, X20, #0xEE0
.text:000000000001053C                 STR             X10, [X20,#0xD90]
.text:0000000000010540                 ADD             X10, X20, #0xF50
.text:0000000000010544                 STR             X9, [X20,#0xE00]
.text:0000000000010548                 STR             X8, [X20,#0xE70]
.text:000000000001054C                 STR             X10, [X20,#0xEE0]
.text:0000000000010550                 STR             XZR, [X20,#0xF50]
.text:0000000000010554                 STR             X20, [X19,#0x68]
.text:0000000000010558 loc_10558                               ; CODE XREF: .text:00000000000103A4↑j
.text:0000000000010558                 LDR             W9, [X19,#0x70]
.text:000000000001055C                 LDR             W11, [X19,#0x78]
.text:0000000000010560                 LDR             X10, [X20]
.text:0000000000010564                 ADD             W8, W9, #1
.text:0000000000010568                 CMP             W9, W11
.text:000000000001056C                 STR             X10, [X19,#0x68]
.text:0000000000010570                 STR             W8, [X19,#0x70]
.text:0000000000010574                 B.LT            loc_1057C
.text:0000000000010578                 STR             W8, [X19,#0x78]
.text:000000000001057C loc_1057C                               ; CODE XREF: .text:0000000000010574↑j
.text:000000000001057C                 LDR             W8, [X19,#0x74]
.text:0000000000010580                 MOV             X0, X20
.text:0000000000010584                 LDR             W9, [X19,#0x7C]
.text:0000000000010588                 ADD             W8, W8, #1
.text:000000000001058C                 ADD             W9, W9, #1
.text:0000000000010590                 STR             W8, [X19,#0x74]
.text:0000000000010594                 STR             W9, [X19,#0x7C]
.text:0000000000010598                 LDP             X29, X30, [SP,#0x30]
.text:000000000001059C                 LDP             X20, X19, [SP,#0x20]
.text:00000000000105A0                 LDP             X22, X21, [SP,#0x10]
.text:00000000000105A4                 LDR             X23, [SP],#0x40
.text:00000000000105A8                 RET
.text:00000000000105A8 ; } // starts at 10388
.text:00000000000105A8 ; ---------------------------------------------------------------------------
.text:00000000000105AC                 ALIGN 0x10
.text:00000000000105B0 ; __unwind {
.text:00000000000105B0                 STR             X19, [SP,#-0x20]!
.text:00000000000105B4                 STP             X29, X30, [SP,#0x10]
.text:00000000000105B8                 ADD             X29, SP, #0x10
.text:00000000000105BC                 ADRP            X9, #_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGE
.text:00000000000105C0                 MOV             X19, X0
.text:00000000000105C4                 LDR             X9, [X9,#_ZTVN8tinyxml28MemPoolTILi104EEE_ptr@PAGEOFF]
.text:00000000000105C8                 LDR             W8, [X0,#0x64]
.text:00000000000105CC                 ADD             X9, X9, #0x10
.text:00000000000105D0                 STR             X9, [X0]
.text:00000000000105D4                 CBZ             W8, loc_105F8
.text:00000000000105D8 loc_105D8                               ; CODE XREF: .text:loc_105F4↓j
.text:00000000000105D8                 SUB             W8, W8, #1
.text:00000000000105DC                 LDR             X9, [X19,#8]
.text:00000000000105E0                 STR             W8, [X19,#0x64]
.text:00000000000105E4                 LDR             X0, [X9,W8,SXTW#3]
.text:00000000000105E8                 CBZ             X0, loc_105F4
.text:00000000000105EC                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000105F0                 LDR             W8, [X19,#0x64]
.text:00000000000105F4 loc_105F4                               ; CODE XREF: .text:00000000000105E8↑j
.text:00000000000105F4                 CBNZ            W8, loc_105D8
.text:00000000000105F8 loc_105F8                               ; CODE XREF: .text:00000000000105D4↑j
.text:00000000000105F8                 LDR             X0, [X19,#8]
.text:00000000000105FC                 ADD             X8, X19, #0x10
.text:0000000000010600                 STP             XZR, XZR, [X19,#0x68]
.text:0000000000010604                 STR             XZR, [X19,#0x78]
.text:0000000000010608                 CMP             X0, X8
.text:000000000001060C                 B.EQ            loc_10618
.text:0000000000010610                 CBZ             X0, loc_10618
.text:0000000000010614                 BL              ._ZdaPv ; operator delete[](void *)
.text:0000000000010618 loc_10618                               ; CODE XREF: .text:000000000001060C↑j
.text:0000000000010618                                         ; .text:0000000000010610↑j
.text:0000000000010618                 LDP             X29, X30, [SP,#0x10]
.text:000000000001061C                 MOV             X0, X19
.text:0000000000010620                 LDR             X19, [SP],#0x20
.text:0000000000010624                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000010624 ; } // starts at 105B0
.text:0000000000010628 ; ---------------------------------------------------------------------------
.text:0000000000010628 ; __unwind {
.text:0000000000010628                 MOV             W0, #0x68 ; 'h'
.text:000000000001062C                 RET
.text:000000000001062C ; } // starts at 10628
.text:0000000000010630 ; ---------------------------------------------------------------------------
.text:0000000000010630 ; __unwind {
.text:0000000000010630                 STR             X23, [SP,#-0x40]!
.text:0000000000010634                 STP             X22, X21, [SP,#0x10]
.text:0000000000010638                 STP             X20, X19, [SP,#0x20]
.text:000000000001063C                 STP             X29, X30, [SP,#0x30]
.text:0000000000010640                 ADD             X29, SP, #0x30 ; '0'
.text:0000000000010644                 LDR             X20, [X0,#0x68]
.text:0000000000010648                 MOV             X19, X0
.text:000000000001064C                 CBNZ            X20, loc_10708
.text:0000000000010650                 MOV             W21, #0xFD8
.text:0000000000010654                 MOV             X0, X21
.text:0000000000010658                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001065C                 MOV             W1, WZR
.text:0000000000010660                 MOV             X2, X21
.text:0000000000010664                 MOV             X20, X0
.text:0000000000010668                 BL              .memset
.text:000000000001066C                 LDP             W9, W8, [X19,#0x60]
.text:0000000000010670                 CMP             W9, W8
.text:0000000000010674                 B.LE            loc_10680
.text:0000000000010678                 LDR             X21, [X19,#8]
.text:000000000001067C                 B               loc_106D4
.text:0000000000010680 ; ---------------------------------------------------------------------------
.text:0000000000010680 loc_10680                               ; CODE XREF: .text:0000000000010674↑j
.text:0000000000010680                 LSL             W9, W8, #1
.text:0000000000010684                 ADD             W22, W9, #2
.text:0000000000010688                 SXTW            X9, W22
.text:000000000001068C                 CMP             XZR, X9,LSR#61
.text:0000000000010690                 SBFIZ           X10, X22, #3, #0x20 ; ' '
.text:0000000000010694                 CSINV           X0, X10, XZR, EQ
.text:0000000000010698                 SXTW            X23, W8
.text:000000000001069C                 BL              ._Znam  ; operator new[](ulong)
.text:00000000000106A0                 LDR             X1, [X19,#8]
.text:00000000000106A4                 LSL             X2, X23, #3
.text:00000000000106A8                 MOV             X21, X0
.text:00000000000106AC                 BL              .memcpy
.text:00000000000106B0                 LDR             X0, [X19,#8]
.text:00000000000106B4                 ADD             X8, X19, #0x10
.text:00000000000106B8                 CMP             X0, X8
.text:00000000000106BC                 B.EQ            loc_106C8
.text:00000000000106C0                 CBZ             X0, loc_106C8
.text:00000000000106C4                 BL              ._ZdaPv ; operator delete[](void *)
.text:00000000000106C8 loc_106C8                               ; CODE XREF: .text:00000000000106BC↑j
.text:00000000000106C8                                         ; .text:00000000000106C0↑j
.text:00000000000106C8                 LDR             W8, [X19,#0x64]
.text:00000000000106CC                 STR             X21, [X19,#8]
.text:00000000000106D0                 STR             W22, [X19,#0x60]
.text:00000000000106D4 loc_106D4                               ; CODE XREF: .text:000000000001067C↑j
.text:00000000000106D4                 STR             X20, [X21,W8,SXTW#3]
.text:00000000000106D8                 LDR             W8, [X19,#0x64]
.text:00000000000106DC                 ADD             W9, W8, #1
.text:00000000000106E0                 MOV             X8, XZR
.text:00000000000106E4                 STR             W9, [X19,#0x64]
.text:00000000000106E8 loc_106E8                               ; CODE XREF: .text:00000000000106FC↓j
.text:00000000000106E8                 ADD             X9, X20, X8
.text:00000000000106EC                 ADD             X10, X9, #0x68 ; 'h'
.text:00000000000106F0                 ADD             X8, X8, #0x68 ; 'h'
.text:00000000000106F4                 CMP             X8, #0xF70
.text:00000000000106F8                 STR             X10, [X9]
.text:00000000000106FC                 B.NE            loc_106E8
.text:0000000000010700                 STR             XZR, [X20,#0xF70]
.text:0000000000010704                 STR             X20, [X19,#0x68]
.text:0000000000010708 loc_10708                               ; CODE XREF: .text:000000000001064C↑j
.text:0000000000010708                 LDR             W9, [X19,#0x70]
.text:000000000001070C                 LDR             W11, [X19,#0x78]
.text:0000000000010710                 LDR             X10, [X20]
.text:0000000000010714                 ADD             W8, W9, #1
.text:0000000000010718                 CMP             W9, W11
.text:000000000001071C                 STR             X10, [X19,#0x68]
.text:0000000000010720                 STR             W8, [X19,#0x70]
.text:0000000000010724                 B.LT            loc_1072C
.text:0000000000010728                 STR             W8, [X19,#0x78]
.text:000000000001072C loc_1072C                               ; CODE XREF: .text:0000000000010724↑j
.text:000000000001072C                 LDR             W8, [X19,#0x74]
.text:0000000000010730                 MOV             X0, X20
.text:0000000000010734                 LDR             W9, [X19,#0x7C]
.text:0000000000010738                 ADD             W8, W8, #1
.text:000000000001073C                 ADD             W9, W9, #1
.text:0000000000010740                 STR             W8, [X19,#0x74]
.text:0000000000010744                 STR             W9, [X19,#0x7C]
.text:0000000000010748                 LDP             X29, X30, [SP,#0x30]
.text:000000000001074C                 LDP             X20, X19, [SP,#0x20]
.text:0000000000010750                 LDP             X22, X21, [SP,#0x10]
.text:0000000000010754                 LDR             X23, [SP],#0x40
.text:0000000000010758                 RET
.text:0000000000010758 ; } // starts at 10630
.text:0000000000010758 ; .text         ends
