.text:000000000001C000 ; ===========================================================================
.text:000000000001C000 ; Segment type: Pure code
.text:000000000001C000                 AREA .text, CODE, ALIGN=3
.text:000000000001C000                 ; ORG 0x1C000
.text:000000000001C000                 CODE64
.text:000000000001C000 ; =============== S U B R O U T I N E =======================================
.text:000000000001C000                 EXPORT start
.text:000000000001C000 start                                   ; DATA XREF: LOAD:0000000000000018↑o
.text:000000000001C000                                         ; LOAD:00000000000000C0↑o ...
.text:000000000001C000 ; __unwind {
.text:000000000001C000                 ADRP            X0, #off_2F000@PAGE
.text:000000000001C004                 ADD             X0, X0, #off_2F000@PAGEOFF ; void *
.text:000000000001C008                 B               .__cxa_finalize
.text:000000000001C008 ; } // starts at 1C000
.text:000000000001C008 ; End of function start
.text:000000000001C008 ; ---------------------------------------------------------------------------
.text:000000000001C00C                 ALIGN 0x10
.text:000000000001C010 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:000000000001C014                 ALIGN 8
.text:000000000001C018 ; [00000004 BYTES: COLLAPSED FUNCTION j_nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:000000000001C01C                 ALIGN 0x20
.text:000000000001C020 ; =============== S U B R O U T I N E =======================================
.text:000000000001C020 ; __int64 __fastcall core::BaseLayer::attach(core::BaseLayer *__hidden this)
.text:000000000001C020                 EXPORT _ZN4core9BaseLayer6attachEv
.text:000000000001C020 _ZN4core9BaseLayer6attachEv             ; DATA XREF: LOAD:00000000000013E0↑o
.text:000000000001C020 ; __unwind {
.text:000000000001C020                 LDRB            W8, [X0,#8]
.text:000000000001C024                 CBZ             W8, loc_1C02C
.text:000000000001C028                 RET
.text:000000000001C02C ; ---------------------------------------------------------------------------
.text:000000000001C02C loc_1C02C                               ; CODE XREF: core::BaseLayer::attach(void)+4↑j
.text:000000000001C02C                 MOV             W8, #1
.text:000000000001C030                 LDR             X9, [X0]
.text:000000000001C034                 STRB            W8, [X0,#8]
.text:000000000001C038                 LDR             X1, [X9,#0x18]
.text:000000000001C03C                 BR              X1
.text:000000000001C03C ; } // starts at 1C020
.text:000000000001C03C ; End of function core::BaseLayer::attach(void)
.text:000000000001C040 ; =============== S U B R O U T I N E =======================================
.text:000000000001C040 ; __int64 __fastcall core::BaseLayer::detach(core::BaseLayer *__hidden this)
.text:000000000001C040                 EXPORT _ZN4core9BaseLayer6detachEv
.text:000000000001C040 _ZN4core9BaseLayer6detachEv             ; DATA XREF: LOAD:0000000000001470↑o
.text:000000000001C040 ; __unwind {
.text:000000000001C040                 LDRB            W8, [X0,#8]
.text:000000000001C044                 CBZ             W8, locret_1C058
.text:000000000001C048                 LDR             X8, [X0]
.text:000000000001C04C                 STRB            WZR, [X0,#8]
.text:000000000001C050                 LDR             X1, [X8,#0x20]
.text:000000000001C054                 BR              X1
.text:000000000001C058 ; ---------------------------------------------------------------------------
.text:000000000001C058 locret_1C058                            ; CODE XREF: core::BaseLayer::detach(void)+4↑j
.text:000000000001C058                 RET
.text:000000000001C058 ; } // starts at 1C040
.text:000000000001C058 ; End of function core::BaseLayer::detach(void)
.text:000000000001C058 ; ---------------------------------------------------------------------------
.text:000000000001C05C                 ALIGN 0x20
.text:000000000001C060 ; =============== S U B R O U T I N E =======================================
.text:000000000001C060 ; __int64 __fastcall core::BaseLayer::onPreDraw(core::BaseLayer *__hidden this)
.text:000000000001C060                 EXPORT _ZN4core9BaseLayer9onPreDrawEv
.text:000000000001C060 _ZN4core9BaseLayer9onPreDrawEv          ; DATA XREF: LOAD:00000000000018D8↑o
.text:000000000001C060                                         ; .data.rel.ro:0000000000030030↓o
.text:000000000001C060 ; __unwind {
.text:000000000001C060                 RET
.text:000000000001C060 ; } // starts at 1C060
.text:000000000001C060 ; End of function core::BaseLayer::onPreDraw(void)
.text:000000000001C060 ; ---------------------------------------------------------------------------
.text:000000000001C064                 ALIGN 8
.text:000000000001C068 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:000000000001C06C                 ALIGN 0x10
.text:000000000001C070 ; __unwind {
.text:000000000001C070 qword_1C070     DCQ 0xD4200020          ; DATA XREF: .data.rel.ro:0000000000030088↓o
.text:000000000001C078 ; ---------------------------------------------------------------------------
.text:000000000001C078 loc_1C078                               ; DATA XREF: sub_1CD30+D4↓o
.text:000000000001C078                                         ; sub_1CD30+E0↓o ...
.text:000000000001C078 ; __unwind {
.text:000000000001C078                 STR             X21, [SP,#-0x30]!
.text:000000000001C07C                 STP             X20, X19, [SP,#0x10]
.text:000000000001C080                 STP             X29, X30, [SP,#0x20]
.text:000000000001C084                 ADD             X29, SP, #0x20 ; ' '
.text:000000000001C088                 LDR             X20, [X0]
.text:000000000001C08C                 CBZ             X20, loc_1C0F0
.text:000000000001C090                 LDR             X21, [X0,#8]
.text:000000000001C094                 MOV             X19, X0
.text:000000000001C098                 MOV             X0, X20
.text:000000000001C09C                 CMP             X21, X20
.text:000000000001C0A0                 B.EQ            loc_1C0DC
.text:000000000001C0A4 loc_1C0A4                               ; CODE XREF: .text:000000000001C0D4↓j
.text:000000000001C0A4                 LDUR            X0, [X21,#-0x10]
.text:000000000001C0A8                 SUB             X21, X21, #0x30 ; '0'
.text:000000000001C0AC                 CMP             X21, X0
.text:000000000001C0B0                 B.EQ            loc_1C0C4
.text:000000000001C0B4                 CBZ             X0, loc_1C0D0
.text:000000000001C0B8                 LDR             X8, [X0]
.text:000000000001C0BC                 LDR             X8, [X8,#0x28]
.text:000000000001C0C0                 B               loc_1C0CC
.text:000000000001C0C4 ; ---------------------------------------------------------------------------
.text:000000000001C0C4 loc_1C0C4                               ; CODE XREF: .text:000000000001C0B0↑j
.text:000000000001C0C4                 LDR             X8, [X0]
.text:000000000001C0C8                 LDR             X8, [X8,#0x20]
.text:000000000001C0CC loc_1C0CC                               ; CODE XREF: .text:000000000001C0C0↑j
.text:000000000001C0CC                 BLR             X8
.text:000000000001C0D0 loc_1C0D0                               ; CODE XREF: .text:000000000001C0B4↑j
.text:000000000001C0D0                 CMP             X20, X21
.text:000000000001C0D4                 B.NE            loc_1C0A4
.text:000000000001C0D8                 LDR             X0, [X19]
.text:000000000001C0DC loc_1C0DC                               ; CODE XREF: .text:000000000001C0A0↑j
.text:000000000001C0DC                 STR             X20, [X19,#8]
.text:000000000001C0E0                 LDP             X29, X30, [SP,#0x20]
.text:000000000001C0E4                 LDP             X20, X19, [SP,#0x10]
.text:000000000001C0E8                 LDR             X21, [SP],#0x30
.text:000000000001C0EC                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001C0F0 ; ---------------------------------------------------------------------------
.text:000000000001C0F0 loc_1C0F0                               ; CODE XREF: .text:000000000001C08C↑j
.text:000000000001C0F0                 LDP             X29, X30, [SP,#0x20]
.text:000000000001C0F4                 LDP             X20, X19, [SP,#0x10]
.text:000000000001C0F8                 LDR             X21, [SP],#0x30
.text:000000000001C0FC                 RET
.text:000000000001C0FC ; } // starts at 1C078
.text:000000000001C100 ; ---------------------------------------------------------------------------
.text:000000000001C100 loc_1C100                               ; DATA XREF: sub_1CD30+124↓o
.text:000000000001C100                                         ; sub_1CD30+130↓o ...
.text:000000000001C100 ; __unwind {
.text:000000000001C100                 MOV             X8, X0
.text:000000000001C104                 LDR             X0, [X0]
.text:000000000001C108                 CBZ             X0, locret_1C114
.text:000000000001C10C                 STR             X0, [X8,#8]
.text:000000000001C110                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001C114 ; ---------------------------------------------------------------------------
.text:000000000001C114 locret_1C114                            ; CODE XREF: .text:000000000001C108↑j
.text:000000000001C114                 RET
.text:000000000001C114 ; } // starts at 1C100
.text:000000000001C118 ; =============== S U B R O U T I N E =======================================
.text:000000000001C118 ; Attributes: bp-based frame
.text:000000000001C118 sub_1C118                               ; CODE XREF: sub_1CD30+1A4↓p
.text:000000000001C118                                         ; sub_1CD30+220↓p ...
.text:000000000001C118 var_41          = -0x41
.text:000000000001C118 var_38          = -0x38
.text:000000000001C118 var_31          = -0x31
.text:000000000001C118 var_28          = -0x28
.text:000000000001C118 var_20          = -0x20
.text:000000000001C118 var_10          = -0x10
.text:000000000001C118 var_s0          =  0
.text:000000000001C118 ; __unwind {
.text:000000000001C118                 SUB             SP, SP, #0x60
.text:000000000001C11C                 STP             X22, X21, [SP,#0x50+var_20]
.text:000000000001C120                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000001C124                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001C128                 ADD             X29, SP, #0x50
.text:000000000001C12C                 MRS             X21, #3, c13, c0, #2
.text:000000000001C130                 MOV             X20, X0
.text:000000000001C134                 LDR             X8, [X21,#0x28]
.text:000000000001C138                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000001C13C                 AND             W22, W1, #1
.text:000000000001C140                 STR             X8, [SP,#0x50+var_28]
.text:000000000001C144                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001C148                 LDP             X8, X11, [X20,#8]
.text:000000000001C14C                 LDUR            X9, [X20,#1]
.text:000000000001C150                 MOV             X12, X0
.text:000000000001C154                 LDRB            W10, [X20]
.text:000000000001C158                 MOV             X19, X0
.text:000000000001C15C                 STUR            X8, [SP,#0x50+var_41]
.text:000000000001C160                 STR             X9, [SP,#8]
.text:000000000001C164                 LDUR            X8, [SP,#0x50+var_41]
.text:000000000001C168                 STP             XZR, XZR, [X20]
.text:000000000001C16C                 TST             W10, #1
.text:000000000001C170                 STR             XZR, [X20,#0x10]
.text:000000000001C174                 STRB            W10, [X0,#8]
.text:000000000001C178                 STUR            X8, [SP,#0x50+var_31]
.text:000000000001C17C                 STR             X9, [SP,#0x18]
.text:000000000001C180                 LDUR            X8, [SP,#0x50+var_31]
.text:000000000001C184                 STUR            XZR, [SP,#0x50+var_41]
.text:000000000001C188                 STR             XZR, [SP,#8]
.text:000000000001C18C                 STP             X8, X11, [X0,#0x10]
.text:000000000001C190                 ADRP            X8, #off_30058@PAGE
.text:000000000001C194                 ADD             X8, X8, #off_30058@PAGEOFF
.text:000000000001C198                 STR             X9, [X12,#9]!
.text:000000000001C19C                 STR             XZR, [X0,#0x20]
.text:000000000001C1A0                 STR             X8, [X0]
.text:000000000001C1A4                 CSEL            X0, X12, X11, EQ
.text:000000000001C1A8                 STRB            W22, [X19,#0x28]
.text:000000000001C1AC                 STRB            W22, [X19,#0x29]
.text:000000000001C1B0                 BL              .__system_property_find
.text:000000000001C1B4                 STR             X0, [X19,#0x20]
.text:000000000001C1B8                 CBZ             X0, loc_1C1CC
.text:000000000001C1BC                 ADRP            X1, #sub_1CAA0@PAGE
.text:000000000001C1C0                 ADD             X1, X1, #sub_1CAA0@PAGEOFF
.text:000000000001C1C4                 MOV             X2, X19
.text:000000000001C1C8                 BL              .__system_property_read_callback
.text:000000000001C1CC loc_1C1CC                               ; CODE XREF: sub_1C118+A0↑j
.text:000000000001C1CC                 ADRP            X0, #unk_31010@PAGE
.text:000000000001C1D0                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001C1D4                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001C1D8                 ADRP            X9, #qword_31068@PAGE
.text:000000000001C1DC                 STR             X19, [SP,#0x18]
.text:000000000001C1E0                 ADD             X9, X9, #qword_31068@PAGEOFF
.text:000000000001C1E4                 LDP             X8, X9, [X9]
.text:000000000001C1E8                 CMP             X8, X9
.text:000000000001C1EC                 B.CS            loc_1C208
.text:000000000001C1F0                 ADRP            X9, #qword_31068@PAGE
.text:000000000001C1F4                 STR             X19, [X8]
.text:000000000001C1F8                 LDR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000001C1FC                 ADD             X8, X8, #8
.text:000000000001C200                 STR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000001C204                 B               loc_1C218
.text:000000000001C208 ; ---------------------------------------------------------------------------
.text:000000000001C208 loc_1C208                               ; CODE XREF: sub_1C118+D4↑j
.text:000000000001C208                 ADRP            X0, #unk_31060@PAGE
.text:000000000001C20C                 ADD             X0, X0, #unk_31060@PAGEOFF
.text:000000000001C210                 ADD             X1, SP, #0x50+var_38
.text:000000000001C214                 BL              loc_1CAB0
.text:000000000001C218 loc_1C218                               ; CODE XREF: sub_1C118+EC↑j
.text:000000000001C218                 ADRP            X0, #unk_31010@PAGE
.text:000000000001C21C                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001C220                 BL              ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001C224                 LDR             X8, [X21,#0x28]
.text:000000000001C228                 LDR             X9, [SP,#0x50+var_28]
.text:000000000001C22C                 CMP             X8, X9
.text:000000000001C230                 B.NE            loc_1C24C
.text:000000000001C234                 MOV             X0, X19
.text:000000000001C238                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001C23C                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000001C240                 LDP             X22, X21, [SP,#0x50+var_20]
.text:000000000001C244                 ADD             SP, SP, #0x60 ; '`'
.text:000000000001C248                 RET
.text:000000000001C24C ; ---------------------------------------------------------------------------
.text:000000000001C24C loc_1C24C                               ; CODE XREF: sub_1C118+118↑j
.text:000000000001C24C                 BL              .__stack_chk_fail
.text:000000000001C24C ; } // starts at 1C118
.text:000000000001C24C ; End of function sub_1C118
.text:000000000001C250 ; =============== S U B R O U T I N E =======================================
.text:000000000001C250 ; Attributes: bp-based frame
.text:000000000001C250 sub_1C250                               ; CODE XREF: sub_1CD30+330↓p
.text:000000000001C250                                         ; sub_1F828+330↓p ...
.text:000000000001C250 var_41          = -0x41
.text:000000000001C250 var_38          = -0x38
.text:000000000001C250 var_31          = -0x31
.text:000000000001C250 var_28          = -0x28
.text:000000000001C250 var_20          = -0x20
.text:000000000001C250 var_10          = -0x10
.text:000000000001C250 var_s0          =  0
.text:000000000001C250 ; __unwind {
.text:000000000001C250                 SUB             SP, SP, #0x60
.text:000000000001C254                 STP             X22, X21, [SP,#0x50+var_20]
.text:000000000001C258                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000001C25C                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001C260                 ADD             X29, SP, #0x50
.text:000000000001C264                 MRS             X22, #3, c13, c0, #2
.text:000000000001C268                 MOV             X21, X0
.text:000000000001C26C                 LDR             X8, [X22,#0x28]
.text:000000000001C270                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000001C274                 MOV             W20, W1
.text:000000000001C278                 STR             X8, [SP,#0x50+var_28]
.text:000000000001C27C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001C280                 LDP             X8, X11, [X21,#8]
.text:000000000001C284                 LDUR            X9, [X21,#1]
.text:000000000001C288                 MOV             X12, X0
.text:000000000001C28C                 LDRB            W10, [X21]
.text:000000000001C290                 MOV             X19, X0
.text:000000000001C294                 STUR            X8, [SP,#0x50+var_41]
.text:000000000001C298                 STR             X9, [SP,#8]
.text:000000000001C29C                 LDUR            X8, [SP,#0x50+var_41]
.text:000000000001C2A0                 STP             XZR, XZR, [X21]
.text:000000000001C2A4                 TST             W10, #1
.text:000000000001C2A8                 STR             XZR, [X21,#0x10]
.text:000000000001C2AC                 STRB            W10, [X0,#8]
.text:000000000001C2B0                 STUR            X8, [SP,#0x50+var_31]
.text:000000000001C2B4                 STR             X9, [SP,#0x18]
.text:000000000001C2B8                 LDUR            X8, [SP,#0x50+var_31]
.text:000000000001C2BC                 STUR            XZR, [SP,#0x50+var_41]
.text:000000000001C2C0                 STR             XZR, [SP,#8]
.text:000000000001C2C4                 STP             X8, X11, [X0,#0x10]
.text:000000000001C2C8                 ADRP            X8, #off_300A8@PAGE
.text:000000000001C2CC                 ADD             X8, X8, #off_300A8@PAGEOFF
.text:000000000001C2D0                 STR             X9, [X12,#9]!
.text:000000000001C2D4                 STR             XZR, [X0,#0x20]
.text:000000000001C2D8                 STR             X8, [X0]
.text:000000000001C2DC                 CSEL            X0, X12, X11, EQ
.text:000000000001C2E0                 STP             W20, W20, [X19,#0x28]
.text:000000000001C2E4                 BL              .__system_property_find
.text:000000000001C2E8                 STR             X0, [X19,#0x20]
.text:000000000001C2EC                 CBZ             X0, loc_1C300
.text:000000000001C2F0                 ADRP            X1, #sub_1CAA0@PAGE
.text:000000000001C2F4                 ADD             X1, X1, #sub_1CAA0@PAGEOFF
.text:000000000001C2F8                 MOV             X2, X19
.text:000000000001C2FC                 BL              .__system_property_read_callback
.text:000000000001C300 loc_1C300                               ; CODE XREF: sub_1C250+9C↑j
.text:000000000001C300                 ADRP            X0, #unk_31010@PAGE
.text:000000000001C304                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001C308                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001C30C                 ADRP            X9, #qword_31068@PAGE
.text:000000000001C310                 STR             X19, [SP,#0x18]
.text:000000000001C314                 ADD             X9, X9, #qword_31068@PAGEOFF
.text:000000000001C318                 LDP             X8, X9, [X9]
.text:000000000001C31C                 CMP             X8, X9
.text:000000000001C320                 B.CS            loc_1C33C
.text:000000000001C324                 ADRP            X9, #qword_31068@PAGE
.text:000000000001C328                 STR             X19, [X8]
.text:000000000001C32C                 LDR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000001C330                 ADD             X8, X8, #8
.text:000000000001C334                 STR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000001C338                 B               loc_1C34C
.text:000000000001C33C ; ---------------------------------------------------------------------------
.text:000000000001C33C loc_1C33C                               ; CODE XREF: sub_1C250+D0↑j
.text:000000000001C33C                 ADRP            X0, #unk_31060@PAGE
.text:000000000001C340                 ADD             X0, X0, #unk_31060@PAGEOFF
.text:000000000001C344                 ADD             X1, SP, #0x50+var_38
.text:000000000001C348                 BL              loc_1CAB0
.text:000000000001C34C loc_1C34C                               ; CODE XREF: sub_1C250+E8↑j
.text:000000000001C34C                 ADRP            X0, #unk_31010@PAGE
.text:000000000001C350                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001C354                 BL              ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001C358                 LDR             X8, [X22,#0x28]
.text:000000000001C35C                 LDR             X9, [SP,#0x50+var_28]
.text:000000000001C360                 CMP             X8, X9
.text:000000000001C364                 B.NE            loc_1C380
.text:000000000001C368                 MOV             X0, X19
.text:000000000001C36C                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001C370                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000001C374                 LDP             X22, X21, [SP,#0x50+var_20]
.text:000000000001C378                 ADD             SP, SP, #0x60 ; '`'
.text:000000000001C37C                 RET
.text:000000000001C380 ; ---------------------------------------------------------------------------
.text:000000000001C380 loc_1C380                               ; CODE XREF: sub_1C250+114↑j
.text:000000000001C380                 BL              .__stack_chk_fail
.text:000000000001C380 ; } // starts at 1C250
.text:000000000001C380 ; End of function sub_1C250
.text:000000000001C380 ; ---------------------------------------------------------------------------
.text:000000000001C384                 ALIGN 8
.text:000000000001C388 ; =============== S U B R O U T I N E =======================================
.text:000000000001C388 ; Attributes: bp-based frame
.text:000000000001C388 sub_1C388                               ; CODE XREF: sub_1CD30+3C0↓p
.text:000000000001C388                                         ; sub_1F828+3C0↓p ...
.text:000000000001C388 var_51          = -0x51
.text:000000000001C388 var_41          = -0x41
.text:000000000001C388 var_38          = -0x38
.text:000000000001C388 var_31          = -0x31
.text:000000000001C388 var_28          = -0x28
.text:000000000001C388 var_20          = -0x20
.text:000000000001C388 var_10          = -0x10
.text:000000000001C388 var_s0          =  0
.text:000000000001C388 ; __unwind {
.text:000000000001C388                 SUB             SP, SP, #0x70
.text:000000000001C38C                 STP             X22, X21, [SP,#0x60+var_20]
.text:000000000001C390                 STP             X20, X19, [SP,#0x60+var_10]
.text:000000000001C394                 STP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001C398                 ADD             X29, SP, #0x60
.text:000000000001C39C                 MRS             X22, #3, c13, c0, #2
.text:000000000001C3A0                 MOV             X21, X0
.text:000000000001C3A4                 LDR             X8, [X22,#0x28]
.text:000000000001C3A8                 MOV             W0, #0x68 ; 'h' ; unsigned __int64
.text:000000000001C3AC                 MOV             X20, X1
.text:000000000001C3B0                 STUR            X8, [X29,#var_28]
.text:000000000001C3B4                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001C3B8                 LDP             X8, X11, [X21,#8]
.text:000000000001C3BC                 LDUR            X9, [X21,#1]
.text:000000000001C3C0                 MOV             X14, X0
.text:000000000001C3C4                 LDRB            W10, [X21]
.text:000000000001C3C8                 MOVI            V0.2D, #0
.text:000000000001C3CC                 STUR            X8, [SP,#0x60+var_41]
.text:000000000001C3D0                 MOV             X19, X0
.text:000000000001C3D4                 STR             X9, [SP,#0x18]
.text:000000000001C3D8                 STP             XZR, XZR, [X21,#8]
.text:000000000001C3DC                 STR             XZR, [X21]
.text:000000000001C3E0                 TST             W10, #1
.text:000000000001C3E4                 LDP             X8, X13, [X20,#8]
.text:000000000001C3E8                 LDUR            X9, [X20,#1]
.text:000000000001C3EC                 LDRB            W12, [X20]
.text:000000000001C3F0                 STUR            X8, [SP,#0x60+var_51]
.text:000000000001C3F4                 STR             X9, [SP,#8]
.text:000000000001C3F8                 STP             XZR, XZR, [X20,#8]
.text:000000000001C3FC                 LDUR            X8, [SP,#0x60+var_41]
.text:000000000001C400                 LDR             X9, [SP,#0x18]
.text:000000000001C404                 STR             XZR, [X20]
.text:000000000001C408                 STRB            W10, [X0,#8]
.text:000000000001C40C                 STUR            X8, [SP,#0x60+var_31]
.text:000000000001C410                 STR             X9, [SP,#0x28]
.text:000000000001C414                 LDUR            X8, [SP,#0x60+var_31]
.text:000000000001C418                 STUR            XZR, [SP,#0x60+var_41]
.text:000000000001C41C                 STR             XZR, [SP,#0x18]
.text:000000000001C420                 STP             X8, X11, [X0,#0x10]
.text:000000000001C424                 ADRP            X8, #off_300D0@PAGE
.text:000000000001C428                 ADD             X8, X8, #off_300D0@PAGEOFF
.text:000000000001C42C                 STR             X9, [X14,#9]!
.text:000000000001C430                 LDR             X9, [SP,#8]
.text:000000000001C434                 STR             X8, [X0]
.text:000000000001C438                 LDUR            X8, [SP,#0x60+var_51]
.text:000000000001C43C                 STRB            W12, [X0,#0x28]
.text:000000000001C440                 STR             XZR, [X0,#0x20]
.text:000000000001C444                 STR             XZR, [X0,#0x60]
.text:000000000001C448                 STP             X8, X13, [X0,#0x30]
.text:000000000001C44C                 STUR            X9, [X0,#0x29]
.text:000000000001C450                 CSEL            X0, X14, X11, EQ
.text:000000000001C454                 STUR            XZR, [SP,#0x60+var_51]
.text:000000000001C458                 STR             XZR, [SP,#8]
.text:000000000001C45C                 STP             Q0, Q0, [X19,#0x40]
.text:000000000001C460                 BL              .__system_property_find
.text:000000000001C464                 STR             X0, [X19,#0x20]
.text:000000000001C468                 CBZ             X0, loc_1C47C
.text:000000000001C46C                 ADRP            X1, #sub_1CAA0@PAGE
.text:000000000001C470                 ADD             X1, X1, #sub_1CAA0@PAGEOFF
.text:000000000001C474                 MOV             X2, X19
.text:000000000001C478                 BL              .__system_property_read_callback
.text:000000000001C47C loc_1C47C                               ; CODE XREF: sub_1C388+E0↑j
.text:000000000001C47C                 ADRP            X0, #unk_31010@PAGE
.text:000000000001C480                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001C484                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001C488                 ADRP            X9, #qword_31068@PAGE
.text:000000000001C48C                 STR             X19, [SP,#0x28]
.text:000000000001C490                 ADD             X9, X9, #qword_31068@PAGEOFF
.text:000000000001C494                 LDP             X8, X9, [X9]
.text:000000000001C498                 CMP             X8, X9
.text:000000000001C49C                 B.CS            loc_1C4B8
.text:000000000001C4A0                 ADRP            X9, #qword_31068@PAGE
.text:000000000001C4A4                 STR             X19, [X8]
.text:000000000001C4A8                 LDR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000001C4AC                 ADD             X8, X8, #8
.text:000000000001C4B0                 STR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000001C4B4                 B               loc_1C4C8
.text:000000000001C4B8 ; ---------------------------------------------------------------------------
.text:000000000001C4B8 loc_1C4B8                               ; CODE XREF: sub_1C388+114↑j
.text:000000000001C4B8                 ADRP            X0, #unk_31060@PAGE
.text:000000000001C4BC                 ADD             X0, X0, #unk_31060@PAGEOFF
.text:000000000001C4C0                 ADD             X1, SP, #0x60+var_38
.text:000000000001C4C4                 BL              loc_1CAB0
.text:000000000001C4C8 loc_1C4C8                               ; CODE XREF: sub_1C388+12C↑j
.text:000000000001C4C8                 ADRP            X0, #unk_31010@PAGE
.text:000000000001C4CC                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001C4D0                 BL              ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001C4D4                 LDR             X8, [X22,#0x28]
.text:000000000001C4D8                 LDUR            X9, [X29,#var_28]
.text:000000000001C4DC                 CMP             X8, X9
.text:000000000001C4E0                 B.NE            loc_1C4FC
.text:000000000001C4E4                 MOV             X0, X19
.text:000000000001C4E8                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001C4EC                 LDP             X20, X19, [SP,#0x60+var_10]
.text:000000000001C4F0                 LDP             X22, X21, [SP,#0x60+var_20]
.text:000000000001C4F4                 ADD             SP, SP, #0x70 ; 'p'
.text:000000000001C4F8                 RET
.text:000000000001C4FC ; ---------------------------------------------------------------------------
.text:000000000001C4FC loc_1C4FC                               ; CODE XREF: sub_1C388+158↑j
.text:000000000001C4FC                 BL              .__stack_chk_fail
.text:000000000001C4FC ; } // starts at 1C388
.text:000000000001C4FC ; End of function sub_1C388
.text:000000000001C500 ; =============== S U B R O U T I N E =======================================
.text:000000000001C500 ; Attributes: bp-based frame
.text:000000000001C500 sub_1C500                               ; CODE XREF: core::HWcounterThread::init(void)+C8↓p
.text:000000000001C500 var_10          = -0x10
.text:000000000001C500 var_s0          =  0
.text:000000000001C500 ; __unwind {
.text:000000000001C500                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000001C504                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001C508                 ADD             X29, SP, #0x10
.text:000000000001C50C                 MOV             X19, X0
.text:000000000001C510                 LDR             W0, [X0] ; this
.text:000000000001C514                 ORR             W8, W0, #2
.text:000000000001C518                 CMP             W8, #3
.text:000000000001C51C                 B.EQ            loc_1C5A8
.text:000000000001C520                 BL              ._ZN18MaliCounterCapture10InitManualEv ; MaliCounterCapture::InitManual(void)
.text:000000000001C524                 CBZ             W0, loc_1C598
.text:000000000001C528                 CMP             W0, #1
.text:000000000001C52C                 B.NE            loc_1C5A4
.text:000000000001C530                 ADRP            X20, #aFrameworksBase@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C534                 ADD             X20, X20, #aFrameworksBase@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C538                 MOV             W1, #0x2F ; '/'
.text:000000000001C53C                 MOV             W2, #0x48 ; 'H'
.text:000000000001C540                 MOV             X0, X20
.text:000000000001C544                 BL              .__strrchr_chk
.text:000000000001C548                 CBZ             X0, loc_1C564
.text:000000000001C54C                 ADRP            X0, #aFrameworksBase@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C550                 ADD             X0, X0, #aFrameworksBase@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C554                 MOV             W1, #0x2F ; '/'
.text:000000000001C558                 MOV             W2, #0x48 ; 'H'
.text:000000000001C55C                 BL              .__strrchr_chk
.text:000000000001C560                 ADD             X20, X0, #1
.text:000000000001C564 loc_1C564                               ; CODE XREF: sub_1C500+48↑j
.text:000000000001C564                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:000000000001C568                 ADRP            X2, #aSSDInitFail@PAGE ; "%s:%s(%d) Init fail"
.text:000000000001C56C                 ADRP            X4, #aInit@PAGE ; "init"
.text:000000000001C570                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:000000000001C574                 ADD             X2, X2, #aSSDInitFail@PAGEOFF ; "%s:%s(%d) Init fail"
.text:000000000001C578                 ADD             X4, X4, #aInit@PAGEOFF ; "init"
.text:000000000001C57C                 MOV             W5, #0x23 ; '#'
.text:000000000001C580                 MOV             W0, #6
.text:000000000001C584                 MOV             X3, X20
.text:000000000001C588                 BL              .__android_log_print
.text:000000000001C58C                 BL              ._ZN18MaliCounterCapture6deInitEv ; MaliCounterCapture::deInit(void)
.text:000000000001C590                 MOV             W0, #2
.text:000000000001C594                 B               loc_1C59C
.text:000000000001C598 ; ---------------------------------------------------------------------------
.text:000000000001C598 loc_1C598                               ; CODE XREF: sub_1C500+24↑j
.text:000000000001C598                 MOV             W0, #1
.text:000000000001C59C loc_1C59C                               ; CODE XREF: sub_1C500+94↑j
.text:000000000001C59C                 STR             W0, [X19]
.text:000000000001C5A0                 B               loc_1C5A8
.text:000000000001C5A4 ; ---------------------------------------------------------------------------
.text:000000000001C5A4 loc_1C5A4                               ; CODE XREF: sub_1C500+2C↑j
.text:000000000001C5A4                 LDR             W0, [X19]
.text:000000000001C5A8 loc_1C5A8                               ; CODE XREF: sub_1C500+1C↑j
.text:000000000001C5A8                                         ; sub_1C500+A0↑j
.text:000000000001C5A8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001C5AC                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000001C5B0                 RET
.text:000000000001C5B0 ; } // starts at 1C500
.text:000000000001C5B0 ; End of function sub_1C500
.text:000000000001C5B0 ; ---------------------------------------------------------------------------
.text:000000000001C5B4                 ALIGN 8
.text:000000000001C5B8 ; =============== S U B R O U T I N E =======================================
.text:000000000001C5B8 sub_1C5B8                               ; CODE XREF: core::HWcounterThread::~HWcounterThread()+30↓p
.text:000000000001C5B8                                         ; core::HWcounterThread::~HWcounterThread()+8C↓j ...
.text:000000000001C5B8 ; __unwind {
.text:000000000001C5B8                 LDR             W8, [X0]
.text:000000000001C5BC                 CMP             W8, #1
.text:000000000001C5C0                 B.NE            locret_1C5CC
.text:000000000001C5C4                 STR             WZR, [X0]
.text:000000000001C5C8                 B               ._ZN18MaliCounterCapture6deInitEv ; MaliCounterCapture::deInit(void)
.text:000000000001C5CC ; ---------------------------------------------------------------------------
.text:000000000001C5CC locret_1C5CC                            ; CODE XREF: sub_1C5B8+8↑j
.text:000000000001C5CC                 RET
.text:000000000001C5CC ; } // starts at 1C5B8
.text:000000000001C5CC ; End of function sub_1C5B8
.text:000000000001C5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000001C5D0 sub_1C5D0                               ; CODE XREF: core::HWcounterThread::HWcounterThread(core::RenderingApiType)+10↓p
.text:000000000001C5D0 ; __unwind {
.text:000000000001C5D0                 STR             WZR, [X0]
.text:000000000001C5D4                 RET
.text:000000000001C5D4 ; } // starts at 1C5D0
.text:000000000001C5D4 ; End of function sub_1C5D0
.text:000000000001C5D8 ; ---------------------------------------------------------------------------
.text:000000000001C5D8 ; START OF FUNCTION CHUNK FOR _ZN4core15HWcounterThread11getGpuUsageERd
.text:000000000001C5D8 loc_1C5D8                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &):loc_1D55C↓j
.text:000000000001C5D8 ; __unwind {
.text:000000000001C5D8                 SUB             SP, SP, #0x80
.text:000000000001C5DC                 STR             D8, [SP,#0x80+var_40]
.text:000000000001C5E0                 STR             X23, [SP,#0x80+var_38]
.text:000000000001C5E4                 STP             X22, X21, [SP,#0x80+var_30]
.text:000000000001C5E8                 STP             X20, X19, [SP,#0x80+var_20]
.text:000000000001C5EC                 STP             X29, X30, [SP,#0x80+var_10]
.text:000000000001C5F0                 ADD             X29, SP, #0x80+var_10
.text:000000000001C5F4                 MRS             X22, #3, c13, c0, #2
.text:000000000001C5F8                 MOV             X19, X1
.text:000000000001C5FC                 LDR             X8, [X22,#0x28]
.text:000000000001C600                 STR             X8, [SP,#0x80+var_4C+4]
.text:000000000001C604                 LDR             W8, [X0]
.text:000000000001C608                 CMP             W8, #1
.text:000000000001C60C                 B.NE            loc_1C71C
.text:000000000001C610                 ADD             X0, SP, #0x80+var_60 ; this
.text:000000000001C614                 ADD             X1, SP, #0x80+var_4C ; unsigned __int64 *
.text:000000000001C618                 ADD             X2, SP, #0x80+var_50 ; int *
.text:000000000001C61C                 ADD             X3, SP, #0x80+var_54 ; int *
.text:000000000001C620                 BL              ._ZN18MaliCounterCapture18readGpuUsageManualEPyPiS1_S1_ ; MaliCounterCapture::readGpuUsageManual(ulong long *,int *,int *,int *)
.text:000000000001C624                 TBZ             W0, #0, loc_1C6C0 ; this
.text:000000000001C628                 BL              ._ZN4core9StateInfo11getGPUClockEv ; core::StateInfo::getGPUClock(void)
.text:000000000001C62C                 MOV             V8.16B, V0.16B
.text:000000000001C630                 BL              .__extendsftf2
.text:000000000001C634                 FMOV            S1, #-1.0
.text:000000000001C638                 FCMP            S8, S1
.text:000000000001C63C                 B.EQ            loc_1C71C
.text:000000000001C640                 ADRP            X8, #unk_310D8@PAGE
.text:000000000001C644                 ADD             X8, X8, #unk_310D8@PAGEOFF
.text:000000000001C648                 LDARB           W8, [X8]
.text:000000000001C64C                 TBZ             W8, #0, loc_1C750
.text:000000000001C650 loc_1C650                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-DCC↓j
.text:000000000001C650                                         ; core::HWcounterThread::getGpuUsage(double &)-DAC↓j
.text:000000000001C650                 ADRP            X23, #qword_310D0@PAGE
.text:000000000001C654                 LDR             X20, [SP,#0x80+var_60]
.text:000000000001C658                 LDR             X21, [X23,#qword_310D0@PAGEOFF]
.text:000000000001C65C                 CBZ             X21, loc_1C6B4
.text:000000000001C660                 MOV             X0, X20
.text:000000000001C664                 STR             Q0, [SP,#0x80+var_70]
.text:000000000001C668                 BL              .__floatunditf
.text:000000000001C66C                 MOV             X0, X21
.text:000000000001C670                 STR             Q0, [SP,#0x80+var_80]
.text:000000000001C674                 BL              .__floatunditf
.text:000000000001C678                 MOV             V1.16B, V0.16B
.text:000000000001C67C                 LDR             Q0, [SP,#0x80+var_80]
.text:000000000001C680                 BL              .__subtf3
.text:000000000001C684                 LDR             Q1, [SP,#0x80+var_70]
.text:000000000001C688                 BL              .__multf3
.text:000000000001C68C                 LDR             W0, [SP,#0x80+var_4C]
.text:000000000001C690                 STR             Q0, [SP,#0x80+var_70]
.text:000000000001C694                 BL              .__floatsitf
.text:000000000001C698                 LDR             Q1, [SP,#0x80+var_70]
.text:000000000001C69C                 BL              .__divtf3
.text:000000000001C6A0                 BL              .__trunctfdf2
.text:000000000001C6A4                 ADRP            X8, #qword_7968@PAGE
.text:000000000001C6A8                 LDR             D1, [X8,#qword_7968@PAGEOFF]
.text:000000000001C6AC                 FMUL            D0, D0, D1
.text:000000000001C6B0                 STR             D0, [X19]
.text:000000000001C6B4 loc_1C6B4                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-ED4↑j
.text:000000000001C6B4                 MOV             W0, #1
.text:000000000001C6B8                 STR             X20, [X23,#qword_310D0@PAGEOFF]
.text:000000000001C6BC                 B               loc_1C724
.text:000000000001C6C0 ; ---------------------------------------------------------------------------
.text:000000000001C6C0 loc_1C6C0                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-F0C↑j
.text:000000000001C6C0                 ADRP            X20, #aFrameworksBase@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C6C4                 ADD             X20, X20, #aFrameworksBase@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C6C8                 MOV             W1, #0x2F ; '/'
.text:000000000001C6CC                 MOV             W2, #0x48 ; 'H'
.text:000000000001C6D0                 MOV             X0, X20
.text:000000000001C6D4                 BL              .__strrchr_chk
.text:000000000001C6D8                 CBZ             X0, loc_1C6F4
.text:000000000001C6DC                 ADRP            X0, #aFrameworksBase@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C6E0                 ADD             X0, X0, #aFrameworksBase@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001C6E4                 MOV             W1, #0x2F ; '/'
.text:000000000001C6E8                 MOV             W2, #0x48 ; 'H'
.text:000000000001C6EC                 BL              .__strrchr_chk
.text:000000000001C6F0                 ADD             X20, X0, #1
.text:000000000001C6F4 loc_1C6F4                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-E58↑j
.text:000000000001C6F4                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:000000000001C6F8                 ADRP            X2, #aSSDReadgpuusag@PAGE ; "%s:%s(%d) readGpuUsage FAILED"
.text:000000000001C6FC                 ADRP            X4, #aReadgpuusage@PAGE ; "readGpuUsage"
.text:000000000001C700                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:000000000001C704                 ADD             X2, X2, #aSSDReadgpuusag@PAGEOFF ; "%s:%s(%d) readGpuUsage FAILED"
.text:000000000001C708                 ADD             X4, X4, #aReadgpuusage@PAGEOFF ; "readGpuUsage"
.text:000000000001C70C                 MOV             W5, #0x6F ; 'o'
.text:000000000001C710                 MOV             W0, #6
.text:000000000001C714                 MOV             X3, X20
.text:000000000001C718                 BL              .__android_log_print
.text:000000000001C71C loc_1C71C                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-F24↑j
.text:000000000001C71C                                         ; core::HWcounterThread::getGpuUsage(double &)-EF4↑j
.text:000000000001C71C                 MOV             W0, WZR
.text:000000000001C720                 STR             XZR, [X19]
.text:000000000001C724 loc_1C724                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-E74↑j
.text:000000000001C724                 LDR             X8, [X22,#0x28]
.text:000000000001C728                 LDR             X9, [SP,#0x80+var_4C+4]
.text:000000000001C72C                 CMP             X8, X9
.text:000000000001C730                 B.NE            loc_1C788
.text:000000000001C734                 LDP             X29, X30, [SP,#0x80+var_10]
.text:000000000001C738                 LDP             X20, X19, [SP,#0x80+var_20]
.text:000000000001C73C                 LDP             X22, X21, [SP,#0x80+var_30]
.text:000000000001C740                 LDR             X23, [SP,#0x80+var_38]
.text:000000000001C744                 LDR             D8, [SP,#0x80+var_40]
.text:000000000001C748                 ADD             SP, SP, #0x80
.text:000000000001C74C                 RET
.text:000000000001C750 ; ---------------------------------------------------------------------------
.text:000000000001C750 loc_1C750                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-EE4↑j
.text:000000000001C750                 ADRP            X0, #unk_310D8@PAGE
.text:000000000001C754                 STR             Q0, [SP,#0x80+var_70]
.text:000000000001C758                 ADD             X0, X0, #unk_310D8@PAGEOFF ; __guard *
.text:000000000001C75C                 BL              .__cxa_guard_acquire
.text:000000000001C760                 LDR             Q0, [SP,#0x80+var_70]
.text:000000000001C764                 CBZ             W0, loc_1C650
.text:000000000001C768                 LDR             X8, [SP,#0x80+var_60]
.text:000000000001C76C                 ADRP            X0, #unk_310D8@PAGE
.text:000000000001C770                 ADRP            X9, #qword_310D0@PAGE
.text:000000000001C774                 ADD             X0, X0, #unk_310D8@PAGEOFF ; __guard *
.text:000000000001C778                 STR             X8, [X9,#qword_310D0@PAGEOFF]
.text:000000000001C77C                 BL              .__cxa_guard_release
.text:000000000001C780                 LDR             Q0, [SP,#0x80+var_70]
.text:000000000001C784                 B               loc_1C650
.text:000000000001C788 ; ---------------------------------------------------------------------------
.text:000000000001C788 loc_1C788                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)-E00↑j
.text:000000000001C788                 BL              .__stack_chk_fail
.text:000000000001C788 ; } // starts at 1C5D8
.text:000000000001C788 ; END OF FUNCTION CHUNK FOR _ZN4core15HWcounterThread11getGpuUsageERd
.text:000000000001C788 ; ---------------------------------------------------------------------------
.text:000000000001C78C                 ALIGN 0x10
.text:000000000001C790 ; =============== S U B R O U T I N E =======================================
.text:000000000001C790 ; Attributes: bp-based frame
.text:000000000001C790 sub_1C790                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+C8↓p
.text:000000000001C790 var_80          = -0x80
.text:000000000001C790 var_70          = -0x70
.text:000000000001C790 var_54          = -0x54
.text:000000000001C790 var_50          = -0x50
.text:000000000001C790 var_4C          = -0x4C
.text:000000000001C790 var_40          = -0x40
.text:000000000001C790 var_38          = -0x38
.text:000000000001C790 var_30          = -0x30
.text:000000000001C790 var_20          = -0x20
.text:000000000001C790 var_10          = -0x10
.text:000000000001C790 var_s0          =  0
.text:000000000001C790 ; __unwind {
.text:000000000001C790                 SUB             SP, SP, #0x90
.text:000000000001C794                 STR             D8, [SP,#0x80+var_40]
.text:000000000001C798                 STR             X25, [SP,#0x80+var_38]
.text:000000000001C79C                 STP             X24, X23, [SP,#0x80+var_30]
.text:000000000001C7A0                 STP             X22, X21, [SP,#0x80+var_20]
.text:000000000001C7A4                 STP             X20, X19, [SP,#0x80+var_10]
.text:000000000001C7A8                 STP             X29, X30, [SP,#0x80+var_s0]
.text:000000000001C7AC                 ADD             X29, SP, #0x80
.text:000000000001C7B0                 MRS             X24, #3, c13, c0, #2
.text:000000000001C7B4                 LDR             X8, [X24,#0x28]
.text:000000000001C7B8                 STR             X8, [SP,#0x80+var_4C+4]
.text:000000000001C7BC                 LDR             W8, [X0]
.text:000000000001C7C0                 CMP             W8, #1
.text:000000000001C7C4                 B.NE            loc_1C814
.text:000000000001C7C8                 MOV             X21, X1
.text:000000000001C7CC                 MOV             X22, X3
.text:000000000001C7D0                 MOV             X19, X2
.text:000000000001C7D4                 ADD             X1, SP, #0x80+var_4C ; unsigned __int64 *
.text:000000000001C7D8                 ADD             X2, SP, #0x80+var_50 ; int *
.text:000000000001C7DC                 ADD             X3, SP, #0x80+var_54 ; int *
.text:000000000001C7E0                 MOV             X0, X21 ; this
.text:000000000001C7E4                 MOV             X20, X4
.text:000000000001C7E8                 BL              ._ZN18MaliCounterCapture18readGpuUsageManualEPyPiS1_S1_ ; MaliCounterCapture::readGpuUsageManual(ulong long *,int *,int *,int *)
.text:000000000001C7EC                 TBZ             W0, #0, loc_1C814 ; this
.text:000000000001C7F0                 BL              ._ZN4core9StateInfo11getGPUClockEv ; core::StateInfo::getGPUClock(void)
.text:000000000001C7F4                 MOV             V8.16B, V0.16B
.text:000000000001C7F8                 BL              .__extendsftf2
.text:000000000001C7FC                 FMOV            S1, #-1.0
.text:000000000001C800                 FCMP            S8, S1
.text:000000000001C804                 B.NE            loc_1C848
.text:000000000001C808                 MOV             W0, WZR
.text:000000000001C80C                 STR             XZR, [X19]
.text:000000000001C810                 B               loc_1C818
.text:000000000001C814 ; ---------------------------------------------------------------------------
.text:000000000001C814 loc_1C814                               ; CODE XREF: sub_1C790+34↑j
.text:000000000001C814                                         ; sub_1C790+5C↑j
.text:000000000001C814                 MOV             W0, WZR
.text:000000000001C818 loc_1C818                               ; CODE XREF: sub_1C790+80↑j
.text:000000000001C818                                         ; sub_1C790+184↓j
.text:000000000001C818                 LDR             X8, [X24,#0x28]
.text:000000000001C81C                 LDR             X9, [SP,#0x80+var_4C+4]
.text:000000000001C820                 CMP             X8, X9
.text:000000000001C824                 B.NE            loc_1C950
.text:000000000001C828                 LDP             X29, X30, [SP,#0x80+var_s0]
.text:000000000001C82C                 LDP             X20, X19, [SP,#0x80+var_10]
.text:000000000001C830                 LDP             X22, X21, [SP,#0x80+var_20]
.text:000000000001C834                 LDP             X24, X23, [SP,#0x80+var_30]
.text:000000000001C838                 LDR             X25, [SP,#0x80+var_38]
.text:000000000001C83C                 LDR             D8, [SP,#0x80+var_40]
.text:000000000001C840                 ADD             SP, SP, #0x90
.text:000000000001C844                 RET
.text:000000000001C848 ; ---------------------------------------------------------------------------
.text:000000000001C848 loc_1C848                               ; CODE XREF: sub_1C790+74↑j
.text:000000000001C848                 ADRP            X8, #unk_310E8@PAGE
.text:000000000001C84C                 ADD             X8, X8, #unk_310E8@PAGEOFF
.text:000000000001C850                 LDARB           W8, [X8]
.text:000000000001C854                 TBZ             W8, #0, loc_1C918
.text:000000000001C858 loc_1C858                               ; CODE XREF: sub_1C790+19C↓j
.text:000000000001C858                                         ; sub_1C790+1BC↓j
.text:000000000001C858                 ADRP            X25, #qword_310E0@PAGE
.text:000000000001C85C                 LDR             X23, [X25,#qword_310E0@PAGEOFF]
.text:000000000001C860                 CBZ             X23, loc_1C908
.text:000000000001C864                 LDR             X0, [X21]
.text:000000000001C868                 STR             Q0, [SP,#0x80+var_70]
.text:000000000001C86C                 BL              .__floatunditf
.text:000000000001C870                 MOV             X0, X23
.text:000000000001C874                 STR             Q0, [SP,#0x80+var_80]
.text:000000000001C878                 BL              .__floatunditf
.text:000000000001C87C                 MOV             V1.16B, V0.16B
.text:000000000001C880                 LDR             Q0, [SP,#0x80+var_80]
.text:000000000001C884                 BL              .__subtf3
.text:000000000001C888                 LDR             Q1, [SP,#0x80+var_70]
.text:000000000001C88C                 BL              .__multf3
.text:000000000001C890                 LDR             W0, [SP,#0x80+var_50]
.text:000000000001C894                 STR             Q0, [SP,#0x80+var_70]
.text:000000000001C898                 BL              .__floatsitf
.text:000000000001C89C                 LDR             Q1, [SP,#0x80+var_70]
.text:000000000001C8A0                 BL              .__divtf3
.text:000000000001C8A4                 BL              .__trunctfdf2
.text:000000000001C8A8                 LDR             W0, [SP,#0x80+var_54]
.text:000000000001C8AC                 STR             D0, [X22]
.text:000000000001C8B0                 BL              .__floatsitf
.text:000000000001C8B4                 LDR             Q1, [SP,#0x80+var_70]
.text:000000000001C8B8                 BL              .__divtf3
.text:000000000001C8BC                 BL              .__trunctfdf2
.text:000000000001C8C0                 LDR             W0, [SP,#0x80+var_4C]
.text:000000000001C8C4                 STR             D0, [X20]
.text:000000000001C8C8                 BL              .__floatsitf
.text:000000000001C8CC                 LDR             Q1, [SP,#0x80+var_70]
.text:000000000001C8D0                 BL              .__divtf3
.text:000000000001C8D4                 BL              .__trunctfdf2
.text:000000000001C8D8                 ADRP            X8, #qword_7968@PAGE
.text:000000000001C8DC                 STR             D0, [X19]
.text:000000000001C8E0                 LDR             D0, [X22]
.text:000000000001C8E4                 LDR             D1, [X8,#qword_7968@PAGEOFF]
.text:000000000001C8E8                 FMUL            D0, D0, D1
.text:000000000001C8EC                 STR             D0, [X22]
.text:000000000001C8F0                 LDR             D0, [X20]
.text:000000000001C8F4                 FMUL            D3, D0, D1
.text:000000000001C8F8                 STR             D3, [X20]
.text:000000000001C8FC                 LDR             D0, [X19]
.text:000000000001C900                 FMUL            D0, D0, D1
.text:000000000001C904                 STR             D0, [X19]
.text:000000000001C908 loc_1C908                               ; CODE XREF: sub_1C790+D0↑j
.text:000000000001C908                 LDR             X8, [X21]
.text:000000000001C90C                 MOV             W0, #1
.text:000000000001C910                 STR             X8, [X25,#qword_310E0@PAGEOFF]
.text:000000000001C914                 B               loc_1C818
.text:000000000001C918 ; ---------------------------------------------------------------------------
.text:000000000001C918 loc_1C918                               ; CODE XREF: sub_1C790+C4↑j
.text:000000000001C918                 ADRP            X0, #unk_310E8@PAGE
.text:000000000001C91C                 STR             Q0, [SP,#0x80+var_70]
.text:000000000001C920                 ADD             X0, X0, #unk_310E8@PAGEOFF ; __guard *
.text:000000000001C924                 BL              .__cxa_guard_acquire
.text:000000000001C928                 LDR             Q0, [SP,#0x80+var_70]
.text:000000000001C92C                 CBZ             W0, loc_1C858
.text:000000000001C930                 LDR             X8, [X21]
.text:000000000001C934                 ADRP            X0, #unk_310E8@PAGE
.text:000000000001C938                 ADRP            X9, #qword_310E0@PAGE
.text:000000000001C93C                 ADD             X0, X0, #unk_310E8@PAGEOFF ; __guard *
.text:000000000001C940                 STR             X8, [X9,#qword_310E0@PAGEOFF]
.text:000000000001C944                 BL              .__cxa_guard_release
.text:000000000001C948                 LDR             Q0, [SP,#0x80+var_70]
.text:000000000001C94C                 B               loc_1C858
.text:000000000001C950 ; ---------------------------------------------------------------------------
.text:000000000001C950 loc_1C950                               ; CODE XREF: sub_1C790+94↑j
.text:000000000001C950                 BL              .__stack_chk_fail
.text:000000000001C950 ; } // starts at 1C790
.text:000000000001C950 ; End of function sub_1C790
.text:000000000001C950 ; ---------------------------------------------------------------------------
.text:000000000001C954                 ALIGN 8
.text:000000000001C958 ; =============== S U B R O U T I N E =======================================
.text:000000000001C958 ; Attributes: bp-based frame
.text:000000000001C958 sub_1C958                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+68↓p
.text:000000000001C958 var_20          = -0x20
.text:000000000001C958 var_18          = -0x18
.text:000000000001C958 var_10          = -0x10
.text:000000000001C958 var_s0          =  0
.text:000000000001C958 ; __unwind {
.text:000000000001C958                 SUB             SP, SP, #0x30
.text:000000000001C95C                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001C960                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001C964                 ADD             X29, SP, #0x20
.text:000000000001C968                 MRS             X20, #3, c13, c0, #2
.text:000000000001C96C                 MOV             X19, X1
.text:000000000001C970                 LDR             X8, [X20,#0x28]
.text:000000000001C974                 STR             X8, [SP,#0x20+var_18]
.text:000000000001C978                 LDR             W8, [X0]
.text:000000000001C97C                 CMP             W8, #1
.text:000000000001C980                 B.NE            loc_1C99C
.text:000000000001C984                 MOV             X0, SP  ; this
.text:000000000001C988                 STR             XZR, [SP,#0x20+var_20]
.text:000000000001C98C                 BL              ._ZN18MaliCounterCapture17getCpuGpuTimeDiffEPl ; MaliCounterCapture::getCpuGpuTimeDiff(long *)
.text:000000000001C990                 LDR             X8, [SP,#0x20+var_20]
.text:000000000001C994                 STR             X8, [X19]
.text:000000000001C998                 B               loc_1C9A4
.text:000000000001C99C ; ---------------------------------------------------------------------------
.text:000000000001C99C loc_1C99C                               ; CODE XREF: sub_1C958+28↑j
.text:000000000001C99C                 MOV             W0, WZR
.text:000000000001C9A0                 STR             XZR, [X19]
.text:000000000001C9A4 loc_1C9A4                               ; CODE XREF: sub_1C958+40↑j
.text:000000000001C9A4                 LDR             X8, [X20,#0x28]
.text:000000000001C9A8                 LDR             X9, [SP,#0x20+var_18]
.text:000000000001C9AC                 CMP             X8, X9
.text:000000000001C9B0                 B.NE            loc_1C9C8
.text:000000000001C9B4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001C9B8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001C9BC                 AND             W0, W0, #1
.text:000000000001C9C0                 ADD             SP, SP, #0x30 ; '0'
.text:000000000001C9C4                 RET
.text:000000000001C9C8 ; ---------------------------------------------------------------------------
.text:000000000001C9C8 loc_1C9C8                               ; CODE XREF: sub_1C958+58↑j
.text:000000000001C9C8                 BL              .__stack_chk_fail
.text:000000000001C9C8 ; } // starts at 1C958
.text:000000000001C9C8 ; End of function sub_1C958
.text:000000000001C9C8 ; ---------------------------------------------------------------------------
.text:000000000001C9CC                 ALIGN 0x10
.text:000000000001C9D0 ; =============== S U B R O U T I N E =======================================
.text:000000000001C9D0 sub_1C9D0                               ; DATA XREF: .data.rel.ro:off_30058↓o
.text:000000000001C9D0                                         ; .data.rel.ro:off_30080↓o ...
.text:000000000001C9D0 ; __unwind {
.text:000000000001C9D0                 LDRB            W8, [X0,#8]
.text:000000000001C9D4                 ADRP            X9, #off_30080@PAGE
.text:000000000001C9D8                 ADD             X9, X9, #off_30080@PAGEOFF
.text:000000000001C9DC                 STR             X9, [X0]
.text:000000000001C9E0                 TBNZ            W8, #0, loc_1C9E8
.text:000000000001C9E4                 RET
.text:000000000001C9E8 ; ---------------------------------------------------------------------------
.text:000000000001C9E8 loc_1C9E8                               ; CODE XREF: sub_1C9D0+10↑j
.text:000000000001C9E8                 LDR             X0, [X0,#0x18] ; void *
.text:000000000001C9EC                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001C9EC ; } // starts at 1C9D0
.text:000000000001C9EC ; End of function sub_1C9D0
.text:000000000001C9F0 ; =============== S U B R O U T I N E =======================================
.text:000000000001C9F0 ; Attributes: bp-based frame
.text:000000000001C9F0 ; __int64 __fastcall sub_1C9F0(void *)
.text:000000000001C9F0 sub_1C9F0                               ; DATA XREF: .data.rel.ro:0000000000030060↓o
.text:000000000001C9F0                                         ; .data.rel.ro:00000000000300B0↓o ...
.text:000000000001C9F0 var_10          = -0x10
.text:000000000001C9F0 var_s0          =  0
.text:000000000001C9F0 ; __unwind {
.text:000000000001C9F0                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001C9F4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001C9F8                 ADD             X29, SP, #0x10
.text:000000000001C9FC                 LDRB            W8, [X0,#8]
.text:000000000001CA00                 ADRP            X9, #off_30080@PAGE
.text:000000000001CA04                 MOV             X19, X0
.text:000000000001CA08                 ADD             X9, X9, #off_30080@PAGEOFF
.text:000000000001CA0C                 STR             X9, [X0]
.text:000000000001CA10                 TBZ             W8, #0, loc_1CA1C
.text:000000000001CA14                 LDR             X0, [X19,#0x18] ; void *
.text:000000000001CA18                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001CA1C loc_1CA1C                               ; CODE XREF: sub_1C9F0+20↑j
.text:000000000001CA1C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001CA20                 MOV             X0, X19 ; void *
.text:000000000001CA24                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001CA28                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001CA28 ; } // starts at 1C9F0
.text:000000000001CA28 ; End of function sub_1C9F0
.text:000000000001CA28 ; ---------------------------------------------------------------------------
.text:000000000001CA2C                 ALIGN 0x10
.text:000000000001CA30 ; =============== S U B R O U T I N E =======================================
.text:000000000001CA30 ; Attributes: bp-based frame
.text:000000000001CA30 sub_1CA30                               ; DATA XREF: .data.rel.ro:0000000000030068↓o
.text:000000000001CA30 var_20          = -0x20
.text:000000000001CA30 var_10          = -0x10
.text:000000000001CA30 var_s0          =  0
.text:000000000001CA30 ; __unwind {
.text:000000000001CA30                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000001CA34                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001CA38                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001CA3C                 ADD             X29, SP, #0x20
.text:000000000001CA40                 MOV             X20, X1
.text:000000000001CA44                 ADRP            X1, #aTrue@PAGE ; "true"
.text:000000000001CA48                 MOV             X19, X0
.text:000000000001CA4C                 ADD             X1, X1, #aTrue@PAGEOFF ; "true"
.text:000000000001CA50                 MOV             X0, X20 ; s1
.text:000000000001CA54                 BL              .strcmp
.text:000000000001CA58                 CBZ             W0, loc_1CA88
.text:000000000001CA5C                 LDRB            W8, [X19,#0x29]
.text:000000000001CA60                 ADRP            X1, #aFalse@PAGE ; "false"
.text:000000000001CA64                 ADD             X1, X1, #aFalse@PAGEOFF ; "false"
.text:000000000001CA68                 MOV             X0, X20 ; s1
.text:000000000001CA6C                 CMP             W8, #0
.text:000000000001CA70                 CSET            W21, NE
.text:000000000001CA74                 BL              .strcmp
.text:000000000001CA78                 CMP             W0, #0
.text:000000000001CA7C                 CSET            W8, NE
.text:000000000001CA80                 AND             W8, W21, W8
.text:000000000001CA84                 B               loc_1CA8C
.text:000000000001CA88 ; ---------------------------------------------------------------------------
.text:000000000001CA88 loc_1CA88                               ; CODE XREF: sub_1CA30+28↑j
.text:000000000001CA88                 MOV             W8, #1
.text:000000000001CA8C loc_1CA8C                               ; CODE XREF: sub_1CA30+54↑j
.text:000000000001CA8C                 STRB            W8, [X19,#0x28]
.text:000000000001CA90                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001CA94                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001CA98                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000001CA9C                 RET
.text:000000000001CA9C ; } // starts at 1CA30
.text:000000000001CA9C ; End of function sub_1CA30
.text:000000000001CAA0 ; =============== S U B R O U T I N E =======================================
.text:000000000001CAA0 sub_1CAA0                               ; DATA XREF: sub_1C118+A4↑o
.text:000000000001CAA0                                         ; sub_1C118+A8↑o ...
.text:000000000001CAA0 ; __unwind {
.text:000000000001CAA0                 LDR             X8, [X0]
.text:000000000001CAA4                 MOV             X1, X2
.text:000000000001CAA8                 LDR             X2, [X8,#0x10]
.text:000000000001CAAC                 BR              X2
.text:000000000001CAAC ; } // starts at 1CAA0
.text:000000000001CAAC ; End of function sub_1CAA0
.text:000000000001CAB0 ; ---------------------------------------------------------------------------
.text:000000000001CAB0 loc_1CAB0                               ; CODE XREF: sub_1C118+FC↑p
.text:000000000001CAB0                                         ; sub_1C250+F8↑p ...
.text:000000000001CAB0 ; __unwind {
.text:000000000001CAB0                 STR             X25, [SP,#-0x50]!
.text:000000000001CAB4                 STP             X24, X23, [SP,#0x10]
.text:000000000001CAB8                 STP             X22, X21, [SP,#0x20]
.text:000000000001CABC                 STP             X20, X19, [SP,#0x30]
.text:000000000001CAC0                 STP             X29, X30, [SP,#0x40]
.text:000000000001CAC4                 ADD             X29, SP, #0x40 ; '@'
.text:000000000001CAC8                 LDP             X20, X8, [X0]
.text:000000000001CACC                 MOV             X19, X0
.text:000000000001CAD0                 SUB             X21, X8, X20
.text:000000000001CAD4                 ASR             X24, X21, #3
.text:000000000001CAD8                 ADD             X8, X24, #1
.text:000000000001CADC                 LSR             X9, X8, #0x3D ; '='
.text:000000000001CAE0                 CBNZ            X9, loc_1CB9C
.text:000000000001CAE4                 LDR             X9, [X19,#0x10]
.text:000000000001CAE8                 MOV             X22, X1
.text:000000000001CAEC                 MOV             X10, #0xFFFFFFFFFFFFFFE
.text:000000000001CAF0                 SUB             X9, X9, X20
.text:000000000001CAF4                 CMP             X10, X9,ASR#3
.text:000000000001CAF8                 B.CC            loc_1CB18
.text:000000000001CAFC                 ASR             X9, X9, #2
.text:000000000001CB00                 CMP             X9, X8
.text:000000000001CB04                 CSEL            X25, X8, X9, CC
.text:000000000001CB08                 CBZ             X25, loc_1CB94
.text:000000000001CB0C                 LSR             X8, X25, #0x3D ; '='
.text:000000000001CB10                 CBZ             X8, loc_1CB1C
.text:000000000001CB14                 BL              .abort
.text:000000000001CB18 ; ---------------------------------------------------------------------------
.text:000000000001CB18 loc_1CB18                               ; CODE XREF: .text:000000000001CAF8↑j
.text:000000000001CB18                 MOV             X25, #0x1FFFFFFFFFFFFFFF
.text:000000000001CB1C loc_1CB1C                               ; CODE XREF: .text:000000000001CB10↑j
.text:000000000001CB1C                 LSL             X0, X25, #3
.text:000000000001CB20                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001CB24                 MOV             X23, X0
.text:000000000001CB28 loc_1CB28                               ; CODE XREF: .text:000000000001CB98↓j
.text:000000000001CB28                 LDR             X8, [X22]
.text:000000000001CB2C                 ADD             X22, X23, X24,LSL#3
.text:000000000001CB30                 ADD             X24, X23, X25,LSL#3
.text:000000000001CB34                 CMP             X21, #1
.text:000000000001CB38                 STR             X8, [X22],#8
.text:000000000001CB3C                 B.LT            loc_1CB54
.text:000000000001CB40                 MOV             X0, X23
.text:000000000001CB44                 MOV             X1, X20
.text:000000000001CB48                 MOV             X2, X21
.text:000000000001CB4C                 BL              .memcpy
.text:000000000001CB50                 LDR             X20, [X19]
.text:000000000001CB54 loc_1CB54                               ; CODE XREF: .text:000000000001CB3C↑j
.text:000000000001CB54                 STP             X23, X22, [X19]
.text:000000000001CB58                 STR             X24, [X19,#0x10]
.text:000000000001CB5C                 CBZ             X20, loc_1CB7C
.text:000000000001CB60                 MOV             X0, X20
.text:000000000001CB64                 LDP             X29, X30, [SP,#0x40]
.text:000000000001CB68                 LDP             X20, X19, [SP,#0x30]
.text:000000000001CB6C                 LDP             X22, X21, [SP,#0x20]
.text:000000000001CB70                 LDP             X24, X23, [SP,#0x10]
.text:000000000001CB74                 LDR             X25, [SP],#0x50
.text:000000000001CB78                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001CB7C ; ---------------------------------------------------------------------------
.text:000000000001CB7C loc_1CB7C                               ; CODE XREF: .text:000000000001CB5C↑j
.text:000000000001CB7C                 LDP             X29, X30, [SP,#0x40]
.text:000000000001CB80                 LDP             X20, X19, [SP,#0x30]
.text:000000000001CB84                 LDP             X22, X21, [SP,#0x20]
.text:000000000001CB88                 LDP             X24, X23, [SP,#0x10]
.text:000000000001CB8C                 LDR             X25, [SP],#0x50
.text:000000000001CB90                 RET
.text:000000000001CB94 ; ---------------------------------------------------------------------------
.text:000000000001CB94 loc_1CB94                               ; CODE XREF: .text:000000000001CB08↑j
.text:000000000001CB94                 MOV             X23, XZR
.text:000000000001CB98                 B               loc_1CB28
.text:000000000001CB9C ; ---------------------------------------------------------------------------
.text:000000000001CB9C loc_1CB9C                               ; CODE XREF: .text:000000000001CAE0↑j
.text:000000000001CB9C                 MOV             X0, X19
.text:000000000001CBA0                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:000000000001CBA0 ; } // starts at 1CAB0
.text:000000000001CBA0 ; ---------------------------------------------------------------------------
.text:000000000001CBA4                 DCD 0
.text:000000000001CBA8 ; =============== S U B R O U T I N E =======================================
.text:000000000001CBA8 ; Attributes: bp-based frame
.text:000000000001CBA8 sub_1CBA8                               ; DATA XREF: .data.rel.ro:00000000000300B8↓o
.text:000000000001CBA8 var_30          = -0x30
.text:000000000001CBA8 var_28          = -0x28
.text:000000000001CBA8 var_20          = -0x20
.text:000000000001CBA8 var_10          = -0x10
.text:000000000001CBA8 var_s0          =  0
.text:000000000001CBA8 ; __unwind {
.text:000000000001CBA8                 SUB             SP, SP, #0x40
.text:000000000001CBAC                 STR             X21, [SP,#0x30+var_20]
.text:000000000001CBB0                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000001CBB4                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001CBB8                 ADD             X29, SP, #0x30
.text:000000000001CBBC                 MRS             X20, #3, c13, c0, #2
.text:000000000001CBC0                 MOV             X19, X0
.text:000000000001CBC4                 LDR             X8, [X20,#0x28]
.text:000000000001CBC8                 MOV             X2, SP
.text:000000000001CBCC                 STR             X8, [SP,#0x30+var_28]
.text:000000000001CBD0                 LDR             W21, [X0,#0x2C]
.text:000000000001CBD4                 MOV             X0, X1  ; s
.text:000000000001CBD8                 ADRP            X1, #aJd@PAGE ; "%jd"
.text:000000000001CBDC                 STR             XZR, [SP,#0x30+var_30]
.text:000000000001CBE0                 ADD             X1, X1, #aJd@PAGEOFF ; "%jd"
.text:000000000001CBE4                 BL              .sscanf
.text:000000000001CBE8                 LDR             W8, [SP,#0x30+var_30]
.text:000000000001CBEC                 CMP             W0, #1
.text:000000000001CBF0                 CSEL            W8, W8, W21, EQ
.text:000000000001CBF4                 STR             W8, [X19,#0x28]
.text:000000000001CBF8                 LDR             X8, [X20,#0x28]
.text:000000000001CBFC                 LDR             X9, [SP,#0x30+var_28]
.text:000000000001CC00                 CMP             X8, X9
.text:000000000001CC04                 B.NE            loc_1CC1C
.text:000000000001CC08                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001CC0C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000001CC10                 LDR             X21, [SP,#0x30+var_20]
.text:000000000001CC14                 ADD             SP, SP, #0x40 ; '@'
.text:000000000001CC18                 RET
.text:000000000001CC1C ; ---------------------------------------------------------------------------
.text:000000000001CC1C loc_1CC1C                               ; CODE XREF: sub_1CBA8+5C↑j
.text:000000000001CC1C                 BL              .__stack_chk_fail
.text:000000000001CC1C ; } // starts at 1CBA8
.text:000000000001CC1C ; End of function sub_1CBA8
.text:000000000001CC20 ; =============== S U B R O U T I N E =======================================
.text:000000000001CC20 ; Attributes: bp-based frame
.text:000000000001CC20 sub_1CC20                               ; DATA XREF: .data.rel.ro:off_300D0↓o
.text:000000000001CC20 var_10          = -0x10
.text:000000000001CC20 var_s0          =  0
.text:000000000001CC20 ; __unwind {
.text:000000000001CC20                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001CC24                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001CC28                 ADD             X29, SP, #0x10
.text:000000000001CC2C                 ADRP            X8, #off_300D0@PAGE
.text:000000000001CC30                 MOV             X19, X0
.text:000000000001CC34                 ADD             X0, X0, #0x40 ; '@' ; this
.text:000000000001CC38                 ADD             X8, X8, #off_300D0@PAGEOFF
.text:000000000001CC3C                 STR             X8, [X19]
.text:000000000001CC40                 BL              ._ZNSt3__15mutexD1Ev ; std::__1::mutex::~mutex()
.text:000000000001CC44                 LDRB            W8, [X19,#0x28]
.text:000000000001CC48                 TBZ             W8, #0, loc_1CC54
.text:000000000001CC4C                 LDR             X0, [X19,#0x38] ; void *
.text:000000000001CC50                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001CC54 loc_1CC54                               ; CODE XREF: sub_1CC20+28↑j
.text:000000000001CC54                 LDRB            W8, [X19,#8]
.text:000000000001CC58                 ADRP            X9, #off_30080@PAGE
.text:000000000001CC5C                 ADD             X9, X9, #off_30080@PAGEOFF
.text:000000000001CC60                 STR             X9, [X19]
.text:000000000001CC64                 TBNZ            W8, #0, loc_1CC74
.text:000000000001CC68                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001CC6C                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001CC70                 RET
.text:000000000001CC74 ; ---------------------------------------------------------------------------
.text:000000000001CC74 loc_1CC74                               ; CODE XREF: sub_1CC20+44↑j
.text:000000000001CC74                 LDR             X0, [X19,#0x18] ; void *
.text:000000000001CC78                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001CC7C                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001CC80                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001CC80 ; } // starts at 1CC20
.text:000000000001CC80 ; End of function sub_1CC20
.text:000000000001CC80 ; ---------------------------------------------------------------------------
.text:000000000001CC84                 ALIGN 8
.text:000000000001CC88 ; =============== S U B R O U T I N E =======================================
.text:000000000001CC88 ; Attributes: bp-based frame
.text:000000000001CC88 sub_1CC88                               ; DATA XREF: .data.rel.ro:00000000000300D8↓o
.text:000000000001CC88 var_10          = -0x10
.text:000000000001CC88 var_s0          =  0
.text:000000000001CC88 ; __unwind {
.text:000000000001CC88                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001CC8C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001CC90                 ADD             X29, SP, #0x10
.text:000000000001CC94                 ADRP            X8, #off_300D0@PAGE
.text:000000000001CC98                 MOV             X19, X0
.text:000000000001CC9C                 ADD             X0, X0, #0x40 ; '@' ; this
.text:000000000001CCA0                 ADD             X8, X8, #off_300D0@PAGEOFF
.text:000000000001CCA4                 STR             X8, [X19]
.text:000000000001CCA8                 BL              ._ZNSt3__15mutexD1Ev ; std::__1::mutex::~mutex()
.text:000000000001CCAC                 LDRB            W8, [X19,#0x28]
.text:000000000001CCB0                 TBZ             W8, #0, loc_1CCBC
.text:000000000001CCB4                 LDR             X0, [X19,#0x38] ; void *
.text:000000000001CCB8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001CCBC loc_1CCBC                               ; CODE XREF: sub_1CC88+28↑j
.text:000000000001CCBC                 LDRB            W8, [X19,#8]
.text:000000000001CCC0                 ADRP            X9, #off_30080@PAGE
.text:000000000001CCC4                 ADD             X9, X9, #off_30080@PAGEOFF
.text:000000000001CCC8                 STR             X9, [X19]
.text:000000000001CCCC                 TBZ             W8, #0, loc_1CCD8
.text:000000000001CCD0                 LDR             X0, [X19,#0x18] ; void *
.text:000000000001CCD4                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001CCD8 loc_1CCD8                               ; CODE XREF: sub_1CC88+44↑j
.text:000000000001CCD8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001CCDC                 MOV             X0, X19 ; void *
.text:000000000001CCE0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001CCE4                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001CCE4 ; } // starts at 1CC88
.text:000000000001CCE4 ; End of function sub_1CC88
.text:000000000001CCE8 ; =============== S U B R O U T I N E =======================================
.text:000000000001CCE8 ; Attributes: bp-based frame
.text:000000000001CCE8 sub_1CCE8                               ; DATA XREF: .data.rel.ro:00000000000300E0↓o
.text:000000000001CCE8 var_20          = -0x20
.text:000000000001CCE8 var_10          = -0x10
.text:000000000001CCE8 var_s0          =  0
.text:000000000001CCE8 ; __unwind {
.text:000000000001CCE8                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000001CCEC                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001CCF0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001CCF4                 ADD             X29, SP, #0x20
.text:000000000001CCF8                 ADD             X21, X0, #0x40 ; '@'
.text:000000000001CCFC                 MOV             X20, X0
.text:000000000001CD00                 MOV             X0, X21 ; this
.text:000000000001CD04                 MOV             X19, X1
.text:000000000001CD08                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001CD0C                 ADD             X0, X20, #0x28 ; '('
.text:000000000001CD10                 MOV             X1, X19
.text:000000000001CD14                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::assign(char const*)
.text:000000000001CD18                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001CD1C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001CD20                 MOV             X0, X21 ; this
.text:000000000001CD24                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000001CD28                 B               ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001CD28 ; } // starts at 1CCE8
.text:000000000001CD28 ; End of function sub_1CCE8
.text:000000000001CD28 ; ---------------------------------------------------------------------------
.text:000000000001CD2C                 ALIGN 0x10
.text:000000000001CD30 ; =============== S U B R O U T I N E =======================================
.text:000000000001CD30 ; Attributes: bp-based frame
.text:000000000001CD30 sub_1CD30                               ; DATA XREF: .init_array:0000000000030590↓o
.text:000000000001CD30 var_48          = -0x48
.text:000000000001CD30 var_38          = -0x38
.text:000000000001CD30 var_30          = -0x30
.text:000000000001CD30 var_20          = -0x20
.text:000000000001CD30 var_18          = -0x18
.text:000000000001CD30 var_10          = -0x10
.text:000000000001CD30 var_s0          =  0
.text:000000000001CD30 ; FUNCTION CHUNK AT .text:000000000002D7A4 SIZE 00000008 BYTES
.text:000000000001CD30 ; __unwind {
.text:000000000001CD30                 SUB             SP, SP, #0x60
.text:000000000001CD34                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000001CD38                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001CD3C                 ADD             X29, SP, #0x50
.text:000000000001CD40                 MRS             X20, #3, c13, c0, #2
.text:000000000001CD44                 LDR             X8, [X20,#0x28]
.text:000000000001CD48                 STUR            X8, [X29,#var_18]
.text:000000000001CD4C                 ADRP            X8, #unk_31008@PAGE
.text:000000000001CD50                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:000000000001CD54                 LDARB           W8, [X8]
.text:000000000001CD58                 TBNZ            W8, #0, loc_1CD98
.text:000000000001CD5C                 ADRP            X0, #unk_31008@PAGE
.text:000000000001CD60                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000001CD64                 BL              .__cxa_guard_acquire
.text:000000000001CD68                 CBZ             W0, loc_1CD98
.text:000000000001CD6C                 ADRP            X1, #qword_31000@PAGE
.text:000000000001CD70                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:000000000001CD74                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:000000000001CD78                 ADRP            X2, #off_2F000@PAGE
.text:000000000001CD7C                 STR             XZR, [X1]
.text:000000000001CD80                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001CD84                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000001CD88                 BL              .__cxa_atexit
.text:000000000001CD8C                 ADRP            X0, #unk_31008@PAGE
.text:000000000001CD90                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000001CD94                 BL              .__cxa_guard_release
.text:000000000001CD98 loc_1CD98                               ; CODE XREF: sub_1CD30+28↑j
.text:000000000001CD98                                         ; sub_1CD30+38↑j
.text:000000000001CD98                 ADRP            X8, #unk_31038@PAGE
.text:000000000001CD9C                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:000000000001CDA0                 LDARB           W8, [X8]
.text:000000000001CDA4                 TBNZ            W8, #0, loc_1CDE0
.text:000000000001CDA8                 ADRP            X0, #unk_31038@PAGE
.text:000000000001CDAC                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000001CDB0                 BL              .__cxa_guard_acquire
.text:000000000001CDB4                 CBZ             W0, loc_1CDE0
.text:000000000001CDB8                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:000000000001CDBC                 ADRP            X1, #unk_31010@PAGE
.text:000000000001CDC0                 ADRP            X2, #off_2F000@PAGE
.text:000000000001CDC4                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000001CDC8                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:000000000001CDCC                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001CDD0                 BL              .__cxa_atexit
.text:000000000001CDD4                 ADRP            X0, #unk_31038@PAGE
.text:000000000001CDD8                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000001CDDC                 BL              .__cxa_guard_release
.text:000000000001CDE0 loc_1CDE0                               ; CODE XREF: sub_1CD30+74↑j
.text:000000000001CDE0                                         ; sub_1CD30+84↑j
.text:000000000001CDE0                 ADRP            X8, #unk_31058@PAGE
.text:000000000001CDE4                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:000000000001CDE8                 LDARB           W8, [X8]
.text:000000000001CDEC                 TBNZ            W8, #0, loc_1CE30
.text:000000000001CDF0                 ADRP            X0, #unk_31058@PAGE
.text:000000000001CDF4                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000001CDF8                 BL              .__cxa_guard_acquire
.text:000000000001CDFC                 CBZ             W0, loc_1CE30
.text:000000000001CE00                 ADRP            X1, #unk_31040@PAGE
.text:000000000001CE04                 ADRP            X0, #loc_1C078@PAGE
.text:000000000001CE08                 ADRP            X2, #off_2F000@PAGE
.text:000000000001CE0C                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:000000000001CE10                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:000000000001CE14                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001CE18                 STP             XZR, XZR, [X1]
.text:000000000001CE1C                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:000000000001CE20                 BL              .__cxa_atexit
.text:000000000001CE24                 ADRP            X0, #unk_31058@PAGE
.text:000000000001CE28                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000001CE2C                 BL              .__cxa_guard_release
.text:000000000001CE30 loc_1CE30                               ; CODE XREF: sub_1CD30+BC↑j
.text:000000000001CE30                                         ; sub_1CD30+CC↑j
.text:000000000001CE30                 ADRP            X8, #unk_31078@PAGE
.text:000000000001CE34                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000001CE38                 LDARB           W8, [X8]
.text:000000000001CE3C                 TBNZ            W8, #0, loc_1CE80
.text:000000000001CE40                 ADRP            X0, #unk_31078@PAGE
.text:000000000001CE44                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000001CE48                 BL              .__cxa_guard_acquire
.text:000000000001CE4C                 CBZ             W0, loc_1CE80
.text:000000000001CE50                 ADRP            X1, #unk_31060@PAGE
.text:000000000001CE54                 ADRP            X0, #loc_1C100@PAGE
.text:000000000001CE58                 ADRP            X2, #off_2F000@PAGE
.text:000000000001CE5C                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:000000000001CE60                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:000000000001CE64                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001CE68                 STP             XZR, XZR, [X1]
.text:000000000001CE6C                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:000000000001CE70                 BL              .__cxa_atexit
.text:000000000001CE74                 ADRP            X0, #unk_31078@PAGE
.text:000000000001CE78                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000001CE7C                 BL              .__cxa_guard_release
.text:000000000001CE80 loc_1CE80                               ; CODE XREF: sub_1CD30+10C↑j
.text:000000000001CE80                                         ; sub_1CD30+11C↑j
.text:000000000001CE80                 ADRP            X8, #_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001CE84                 LDR             X8, [X8,#_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGEOFF]
.text:000000000001CE88                 LDARB           W8, [X8]
.text:000000000001CE8C                 TBNZ            W8, #0, loc_1CF04
.text:000000000001CE90                 ADRP            X0, #_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001CE94                 LDR             X0, [X0,#_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001CE98                 BL              .__cxa_guard_acquire
.text:000000000001CE9C                 CBZ             W0, loc_1CF04
.text:000000000001CEA0                 ADRP            X8, #aDebugGpuwatchS@PAGE ; "debug.gpuwatch.status"
.text:000000000001CEA4                 STP             XZR, XZR, [SP,#0x50+var_30]
.text:000000000001CEA8                 ADD             X8, X8, #aDebugGpuwatchS@PAGEOFF ; "debug.gpuwatch.status"
.text:000000000001CEAC                 STR             XZR, [SP,#0x50+var_20]
.text:000000000001CEB0                 MOV             W10, #0x2A ; '*'
.text:000000000001CEB4                 STRB            WZR, [SP,#0x50+var_20+6]
.text:000000000001CEB8                 ADD             X0, SP, #0x50+var_30
.text:000000000001CEBC                 LDUR            X9, [X8,#0xD]
.text:000000000001CEC0                 MOV             W1, WZR
.text:000000000001CEC4                 LDR             Q0, [X8] ; "debug.gpuwatch.status"
.text:000000000001CEC8                 STRB            W10, [SP,#0x50+var_30]
.text:000000000001CECC                 STUR            X9, [SP,#0x50+var_30+0xE]
.text:000000000001CED0                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001CED4                 BL              sub_1C118
.text:000000000001CED8                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001CEDC                 MOV             X19, X0
.text:000000000001CEE0                 TBZ             W8, #0, loc_1CEEC
.text:000000000001CEE4                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001CEE8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001CEEC loc_1CEEC                               ; CODE XREF: sub_1CD30+1B0↑j
.text:000000000001CEEC                 ADRP            X8, #_ZN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001CEF0                 ADRP            X0, #_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001CEF4                 LDR             X8, [X8,#_ZN4core9StateInfo11mStatusPropE_ptr@PAGEOFF]
.text:000000000001CEF8                 STR             X19, [X8] ; core::StateInfo::mStatusProp
.text:000000000001CEFC                 LDR             X0, [X0,#_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001CF00                 BL              .__cxa_guard_release
.text:000000000001CF04 loc_1CF04                               ; CODE XREF: sub_1CD30+15C↑j
.text:000000000001CF04                                         ; sub_1CD30+16C↑j
.text:000000000001CF04                 ADRP            X8, #_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001CF08                 LDR             X8, [X8,#_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGEOFF]
.text:000000000001CF0C                 LDARB           W8, [X8]
.text:000000000001CF10                 TBNZ            W8, #0, loc_1CF80
.text:000000000001CF14                 ADRP            X0, #_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001CF18                 LDR             X0, [X0,#_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001CF1C                 BL              .__cxa_guard_acquire
.text:000000000001CF20                 CBZ             W0, loc_1CF80
.text:000000000001CF24                 ADRP            X8, #aDebugGpuwatchD@PAGE ; "debug.gpuwatch.devmode"
.text:000000000001CF28                 STRB            WZR, [SP,#0x50+var_20+7]
.text:000000000001CF2C                 ADD             X8, X8, #aDebugGpuwatchD@PAGEOFF ; "debug.gpuwatch.devmode"
.text:000000000001CF30                 MOV             W9, #0x2C ; ','
.text:000000000001CF34                 ADD             X0, SP, #0x50+var_30
.text:000000000001CF38                 LDUR            X10, [X8,#0xE]
.text:000000000001CF3C                 MOV             W1, WZR
.text:000000000001CF40                 LDR             Q0, [X8] ; "debug.gpuwatch.devmode"
.text:000000000001CF44                 STRB            W9, [SP,#0x50+var_30]
.text:000000000001CF48                 STUR            X10, [SP,#0x50+var_30+0xF]
.text:000000000001CF4C                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001CF50                 BL              sub_1C118
.text:000000000001CF54                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001CF58                 MOV             X19, X0
.text:000000000001CF5C                 TBZ             W8, #0, loc_1CF68
.text:000000000001CF60                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001CF64                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001CF68 loc_1CF68                               ; CODE XREF: sub_1CD30+22C↑j
.text:000000000001CF68                 ADRP            X8, #_ZN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001CF6C                 ADRP            X0, #_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001CF70                 LDR             X8, [X8,#_ZN4core9StateInfo12mDevModePropE_ptr@PAGEOFF]
.text:000000000001CF74                 STR             X19, [X8] ; core::StateInfo::mDevModeProp
.text:000000000001CF78                 LDR             X0, [X0,#_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001CF7C                 BL              .__cxa_guard_release
.text:000000000001CF80 loc_1CF80                               ; CODE XREF: sub_1CD30+1E0↑j
.text:000000000001CF80                                         ; sub_1CD30+1F0↑j
.text:000000000001CF80                 ADRP            X8, #_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001CF84                 LDR             X8, [X8,#_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF]
.text:000000000001CF88                 LDARB           W8, [X8]
.text:000000000001CF8C                 TBNZ            W8, #0, loc_1D00C
.text:000000000001CF90                 ADRP            X0, #_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001CF94                 LDR             X0, [X0,#_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001CF98                 BL              .__cxa_guard_acquire
.text:000000000001CF9C                 CBZ             W0, loc_1D00C
.text:000000000001CFA0                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000001CFA4                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001CFA8                 ADRP            X9, #aDebugGpuwatchF@PAGE ; "debug.gpuwatch.fixclock"
.text:000000000001CFAC                 STR             X0, [SP,#0x50+var_20]
.text:000000000001CFB0                 ADD             X9, X9, #aDebugGpuwatchF@PAGEOFF ; "debug.gpuwatch.fixclock"
.text:000000000001CFB4                 STRB            WZR, [X0,#0x17]
.text:000000000001CFB8                 ADRP            X8, #xmmword_7AF0@PAGE
.text:000000000001CFBC                 MOV             W1, WZR
.text:000000000001CFC0                 LDUR            X10, [X9,#0xF]
.text:000000000001CFC4                 LDR             Q0, [X9] ; "debug.gpuwatch.fixclock"
.text:000000000001CFC8                 LDR             Q1, [X8,#xmmword_7AF0@PAGEOFF]
.text:000000000001CFCC                 STUR            X10, [X0,#0xF]
.text:000000000001CFD0                 STR             Q0, [X0]
.text:000000000001CFD4                 ADD             X0, SP, #0x50+var_30
.text:000000000001CFD8                 STR             Q1, [SP,#0x50+var_30]
.text:000000000001CFDC                 BL              sub_1C118
.text:000000000001CFE0                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001CFE4                 MOV             X19, X0
.text:000000000001CFE8                 TBZ             W8, #0, loc_1CFF4
.text:000000000001CFEC                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001CFF0                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001CFF4 loc_1CFF4                               ; CODE XREF: sub_1CD30+2B8↑j
.text:000000000001CFF4                 ADRP            X8, #_ZN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001CFF8                 ADRP            X0, #_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001CFFC                 LDR             X8, [X8,#_ZN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF]
.text:000000000001D000                 STR             X19, [X8] ; core::StateInfo::mFixClockProp
.text:000000000001D004                 B               loc_2D7A4
.text:000000000001D008 ; ---------------------------------------------------------------------------
.text:000000000001D008 loc_1D008                               ; CODE XREF: sub_1CD30+10A78↓j
.text:000000000001D008                 BL              .__cxa_guard_release
.text:000000000001D00C loc_1D00C                               ; CODE XREF: sub_1CD30+25C↑j
.text:000000000001D00C                                         ; sub_1CD30+26C↑j
.text:000000000001D00C                 ADRP            X8, #_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001D010                 LDR             X8, [X8,#_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF]
.text:000000000001D014                 LDARB           W8, [X8]
.text:000000000001D018                 TBNZ            W8, #0, loc_1D090
.text:000000000001D01C                 ADRP            X0, #_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001D020                 LDR             X0, [X0,#_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001D024                 BL              .__cxa_guard_acquire
.text:000000000001D028                 CBZ             W0, loc_1D090
.text:000000000001D02C                 ADRP            X8, #aDebugGpuwatchA@PAGE ; "debug.gpuwatch.api"
.text:000000000001D030                 STP             XZR, XZR, [SP,#0x50+var_30]
.text:000000000001D034                 ADD             X8, X8, #aDebugGpuwatchA@PAGEOFF ; "debug.gpuwatch.api"
.text:000000000001D038                 STR             XZR, [SP,#0x50+var_20]
.text:000000000001D03C                 MOV             W9, #0x24 ; '$'
.text:000000000001D040                 STRB            WZR, [SP,#0x50+var_20+3]
.text:000000000001D044                 ADD             X0, SP, #0x50+var_30
.text:000000000001D048                 LDR             Q0, [X8] ; "debug.gpuwatch.api"
.text:000000000001D04C                 MOV             W8, #0x6970
.text:000000000001D050                 MOV             W1, WZR
.text:000000000001D054                 STRB            W9, [SP,#0x50+var_30]
.text:000000000001D058                 STURH           W8, [SP,#0x50+var_20+1]
.text:000000000001D05C                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001D060                 BL              sub_1C250
.text:000000000001D064                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001D068                 MOV             X19, X0
.text:000000000001D06C                 TBZ             W8, #0, loc_1D078
.text:000000000001D070                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001D074                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D078 loc_1D078                               ; CODE XREF: sub_1CD30+33C↑j
.text:000000000001D078                 ADRP            X8, #_ZN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001D07C                 ADRP            X0, #_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001D080                 LDR             X8, [X8,#_ZN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF]
.text:000000000001D084                 STR             X19, [X8] ; core::StateInfo::mRenderApiProp
.text:000000000001D088                 LDR             X0, [X0,#_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001D08C                 BL              .__cxa_guard_release
.text:000000000001D090 loc_1D090                               ; CODE XREF: sub_1CD30+2E8↑j
.text:000000000001D090                                         ; sub_1CD30+2F8↑j
.text:000000000001D090                 ADRP            X8, #_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001D094                 LDR             X8, [X8,#_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF]
.text:000000000001D098                 LDARB           W8, [X8]
.text:000000000001D09C                 TBNZ            W8, #0, loc_1D130
.text:000000000001D0A0                 ADRP            X0, #_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001D0A4                 LDR             X0, [X0,#_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001D0A8                 BL              .__cxa_guard_acquire
.text:000000000001D0AC                 CBZ             W0, loc_1D130
.text:000000000001D0B0                 ADRP            X8, #aDebugGpuwatchP@PAGE ; "debug.gpuwatch.proc"
.text:000000000001D0B4                 STP             XZR, XZR, [SP,#0x50+var_30]
.text:000000000001D0B8                 ADD             X8, X8, #aDebugGpuwatchP@PAGEOFF ; "debug.gpuwatch.proc"
.text:000000000001D0BC                 STR             XZR, [SP,#0x50+var_20]
.text:000000000001D0C0                 MOV             W9, #0x26 ; '&'
.text:000000000001D0C4                 STRB            WZR, [SP,#0x50+var_20+4]
.text:000000000001D0C8                 ADD             X0, SP, #0x50+var_30
.text:000000000001D0CC                 STP             XZR, XZR, [SP,#0x50+var_48]
.text:000000000001D0D0                 LDR             Q0, [X8] ; "debug.gpuwatch.proc"
.text:000000000001D0D4                 MOV             W8, #0x636F7270
.text:000000000001D0DC                 STRB            W9, [SP,#0x50+var_30]
.text:000000000001D0E0                 ADD             X1, SP, #0x50+var_48
.text:000000000001D0E4                 STR             XZR, [SP,#0x50+var_38]
.text:000000000001D0E8                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001D0EC                 STR             W8, [SP,#0x50+var_20]
.text:000000000001D0F0                 BL              sub_1C388
.text:000000000001D0F4                 LDRB            W8, [SP,#0x50+var_48]
.text:000000000001D0F8                 MOV             X19, X0
.text:000000000001D0FC                 TBZ             W8, #0, loc_1D108
.text:000000000001D100                 LDR             X0, [SP,#0x50+var_38] ; void *
.text:000000000001D104                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D108 loc_1D108                               ; CODE XREF: sub_1CD30+3CC↑j
.text:000000000001D108                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001D10C                 TBZ             W8, #0, loc_1D118
.text:000000000001D110                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001D114                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D118 loc_1D118                               ; CODE XREF: sub_1CD30+3DC↑j
.text:000000000001D118                 ADRP            X8, #_ZN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001D11C                 ADRP            X0, #_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001D120                 LDR             X8, [X8,#_ZN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF]
.text:000000000001D124                 STR             X19, [X8] ; core::StateInfo::mDebugProcessNameProp
.text:000000000001D128                 LDR             X0, [X0,#_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001D12C                 BL              .__cxa_guard_release
.text:000000000001D130 loc_1D130                               ; CODE XREF: sub_1CD30+36C↑j
.text:000000000001D130                                         ; sub_1CD30+37C↑j
.text:000000000001D130                 LDR             X8, [X20,#0x28]
.text:000000000001D134                 LDUR            X9, [X29,#var_18]
.text:000000000001D138                 CMP             X8, X9
.text:000000000001D13C                 B.NE            loc_1D150
.text:000000000001D140                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001D144                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000001D148                 ADD             SP, SP, #0x60 ; '`'
.text:000000000001D14C                 RET
.text:000000000001D150 ; ---------------------------------------------------------------------------
.text:000000000001D150 loc_1D150                               ; CODE XREF: sub_1CD30+40C↑j
.text:000000000001D150                 BL              .__stack_chk_fail
.text:000000000001D150 ; } // starts at 1CD30
.text:000000000001D150 ; End of function sub_1CD30
.text:000000000001D150 ; ---------------------------------------------------------------------------
.text:000000000001D154                 ALIGN 8
.text:000000000001D158 ; =============== S U B R O U T I N E =======================================
.text:000000000001D158 ; Attributes: bp-based frame
.text:000000000001D158 ; core::HWcounterThread::HWcounterThread(core::RenderingApiType)
.text:000000000001D158                 EXPORT _ZN4core15HWcounterThreadC2ENS_16RenderingApiTypeE
.text:000000000001D158 _ZN4core15HWcounterThreadC2ENS_16RenderingApiTypeE
.text:000000000001D158                                         ; DATA XREF: LOAD:00000000000014A0↑o
.text:000000000001D158                                         ; LOAD:0000000000002190↑o
.text:000000000001D158 var_10          = -0x10
.text:000000000001D158 var_s0          =  0
.text:000000000001D158 ; __unwind {
.text:000000000001D158                 STR             X19, [SP,#-0x10+var_10]! ; Alternative name is 'core::HWcounterThread::HWcounterThread(core::RenderingApiType)'
.text:000000000001D15C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D160                 ADD             X29, SP, #0x10
.text:000000000001D164                 MOV             X19, X0
.text:000000000001D168                 BL              sub_1C5D0
.text:000000000001D16C                 MOVI            V0.2D, #0
.text:000000000001D170                 MOV             W8, #1
.text:000000000001D174                 STR             WZR, [X19,#4]
.text:000000000001D178                 STR             XZR, [X19,#8]
.text:000000000001D17C                 STR             XZR, [X19,#0xA8]
.text:000000000001D180                 STRH            W8, [X19,#0x10]
.text:000000000001D184                 STUR            Q0, [X19,#0x98]
.text:000000000001D188                 STUR            Q0, [X19,#0x88]
.text:000000000001D18C                 STUR            Q0, [X19,#0x78]
.text:000000000001D190                 STUR            Q0, [X19,#0x68]
.text:000000000001D194                 STUR            Q0, [X19,#0x58]
.text:000000000001D198                 STUR            Q0, [X19,#0x48]
.text:000000000001D19C                 STUR            Q0, [X19,#0x38]
.text:000000000001D1A0                 STUR            Q0, [X19,#0x28]
.text:000000000001D1A4                 STUR            Q0, [X19,#0x18]
.text:000000000001D1A8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D1AC                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001D1B0                 RET
.text:000000000001D1B0 ; } // starts at 1D158
.text:000000000001D1B0 ; End of function core::HWcounterThread::HWcounterThread(core::RenderingApiType)
.text:000000000001D1B0 ; ---------------------------------------------------------------------------
.text:000000000001D1B4                 ALIGN 8
.text:000000000001D1B8 ; =============== S U B R O U T I N E =======================================
.text:000000000001D1B8 ; Attributes: bp-based frame
.text:000000000001D1B8 ; void __fastcall core::HWcounterThread::~HWcounterThread(core::HWcounterThread *__hidden this)
.text:000000000001D1B8                 EXPORT _ZN4core15HWcounterThreadD2Ev
.text:000000000001D1B8 _ZN4core15HWcounterThreadD2Ev           ; DATA XREF: LOAD:0000000000001248↑o
.text:000000000001D1B8                                         ; LOAD:0000000000001C80↑o
.text:000000000001D1B8 var_10          = -0x10
.text:000000000001D1B8 var_s0          =  0
.text:000000000001D1B8 ; __unwind {
.text:000000000001D1B8                 STP             X20, X19, [SP,#-0x10+var_10]! ; Alternative name is 'core::HWcounterThread::~HWcounterThread()'
.text:000000000001D1BC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D1C0                 ADD             X29, SP, #0x10
.text:000000000001D1C4                 MOV             X20, X0
.text:000000000001D1C8                 MOV             X19, X0
.text:000000000001D1CC                 MOV             W9, #1
.text:000000000001D1D0                 LDR             X8, [X20,#8]!
.text:000000000001D1D4                 STRB            W9, [X20,#8]
.text:000000000001D1D8                 CBZ             X8, loc_1D1E4
.text:000000000001D1DC                 MOV             X0, X20 ; this
.text:000000000001D1E0                 BL              ._ZNSt3__16thread4joinEv ; std::__1::thread::join(void)
.text:000000000001D1E4 loc_1D1E4                               ; CODE XREF: core::HWcounterThread::~HWcounterThread()+20↑j
.text:000000000001D1E4                 MOV             X0, X19
.text:000000000001D1E8                 BL              sub_1C5B8
.text:000000000001D1EC                 LDR             X0, [X19,#0x98] ; void *
.text:000000000001D1F0                 STR             WZR, [X19,#4]
.text:000000000001D1F4                 CBZ             X0, loc_1D200
.text:000000000001D1F8                 STR             X0, [X19,#0xA0]
.text:000000000001D1FC                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D200 loc_1D200                               ; CODE XREF: core::HWcounterThread::~HWcounterThread()+3C↑j
.text:000000000001D200                 LDR             X0, [X19,#0x80] ; void *
.text:000000000001D204                 CBZ             X0, loc_1D210
.text:000000000001D208                 STR             X0, [X19,#0x88]
.text:000000000001D20C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D210 loc_1D210                               ; CODE XREF: core::HWcounterThread::~HWcounterThread()+4C↑j
.text:000000000001D210                 LDR             X0, [X19,#0x50] ; void *
.text:000000000001D214                 CBZ             X0, loc_1D220
.text:000000000001D218                 STR             X0, [X19,#0x58]
.text:000000000001D21C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D220 loc_1D220                               ; CODE XREF: core::HWcounterThread::~HWcounterThread()+5C↑j
.text:000000000001D220                 LDR             X0, [X19,#0x38] ; void *
.text:000000000001D224                 CBZ             X0, loc_1D230
.text:000000000001D228                 STR             X0, [X19,#0x40]
.text:000000000001D22C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D230 loc_1D230                               ; CODE XREF: core::HWcounterThread::~HWcounterThread()+6C↑j
.text:000000000001D230                 MOV             X0, X20 ; this
.text:000000000001D234                 BL              ._ZNSt3__16threadD1Ev ; std::__1::thread::~thread()
.text:000000000001D238                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D23C                 MOV             X0, X19
.text:000000000001D240                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000001D244                 B               sub_1C5B8
.text:000000000001D244 ; } // starts at 1D1B8
.text:000000000001D244 ; End of function core::HWcounterThread::~HWcounterThread()
.text:000000000001D248 ; =============== S U B R O U T I N E =======================================
.text:000000000001D248 ; Attributes: bp-based frame
.text:000000000001D248 ; __int64 __fastcall core::HWcounterThread::destroy(core::HWcounterThread *__hidden this)
.text:000000000001D248                 EXPORT _ZN4core15HWcounterThread7destroyEv
.text:000000000001D248 _ZN4core15HWcounterThread7destroyEv     ; DATA XREF: LOAD:0000000000000E70↑o
.text:000000000001D248 var_10          = -0x10
.text:000000000001D248 var_s0          =  0
.text:000000000001D248 ; __unwind {
.text:000000000001D248                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001D24C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D250                 ADD             X29, SP, #0x10
.text:000000000001D254                 MOV             X19, X0
.text:000000000001D258                 LDR             X8, [X0,#8]! ; this
.text:000000000001D25C                 MOV             W9, #1
.text:000000000001D260                 STRB            W9, [X0,#8]
.text:000000000001D264                 CBZ             X8, loc_1D26C
.text:000000000001D268                 BL              ._ZNSt3__16thread4joinEv ; std::__1::thread::join(void)
.text:000000000001D26C loc_1D26C                               ; CODE XREF: core::HWcounterThread::destroy(void)+1C↑j
.text:000000000001D26C                 MOV             X0, X19
.text:000000000001D270                 BL              sub_1C5B8
.text:000000000001D274                 STR             WZR, [X19,#4]
.text:000000000001D278                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D27C                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001D280                 RET
.text:000000000001D280 ; } // starts at 1D248
.text:000000000001D280 ; End of function core::HWcounterThread::destroy(void)
.text:000000000001D280 ; ---------------------------------------------------------------------------
.text:000000000001D284                 ALIGN 8
.text:000000000001D288 ; =============== S U B R O U T I N E =======================================
.text:000000000001D288 ; __int64 __fastcall core::HWcounterThread::init(core::HWcounterThread *__hidden this)
.text:000000000001D288                 EXPORT _ZN4core15HWcounterThread4initEv
.text:000000000001D288 _ZN4core15HWcounterThread4initEv        ; CODE XREF: core::HWcounterThread::init(void)+C↓j
.text:000000000001D288                                         ; DATA XREF: LOAD:0000000000001500↑o ...
.text:000000000001D288 var_30          = -0x30
.text:000000000001D288 var_20          = -0x20
.text:000000000001D288 var_10          = -0x10
.text:000000000001D288 ; __unwind {
.text:000000000001D288                 LDR             W8, [X0,#4]
.text:000000000001D28C                 ORR             W8, W8, #2
.text:000000000001D290                 CMP             W8, #3
.text:000000000001D294                 B.NE            loc_1D29C
.text:000000000001D298                 RET
.text:000000000001D29C ; ---------------------------------------------------------------------------
.text:000000000001D29C loc_1D29C                               ; CODE XREF: core::HWcounterThread::init(void)+C↑j
.text:000000000001D29C                 STP             X22, X21, [SP,#var_30]!
.text:000000000001D2A0                 STP             X20, X19, [SP,#0x30+var_20]
.text:000000000001D2A4                 STP             X29, X30, [SP,#0x30+var_10]
.text:000000000001D2A8                 ADD             X29, SP, #0x30+var_10
.text:000000000001D2AC                 MOV             X20, X0
.text:000000000001D2B0                 MOV             X19, X0
.text:000000000001D2B4                 LDR             X0, [X20,#0x38]! ; void *
.text:000000000001D2B8                 STP             XZR, XZR, [X20,#-0x18]
.text:000000000001D2BC                 STUR            XZR, [X20,#-8]
.text:000000000001D2C0                 CBZ             X0, loc_1D2D4
.text:000000000001D2C4                 STR             X0, [X19,#0x40]
.text:000000000001D2C8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D2CC                 STP             XZR, XZR, [X20]
.text:000000000001D2D0                 STR             XZR, [X20,#0x10]
.text:000000000001D2D4 loc_1D2D4                               ; CODE XREF: core::HWcounterThread::init(void)+38↑j
.text:000000000001D2D4                 MOV             X21, X19
.text:000000000001D2D8                 LDR             X0, [X21,#0x50]! ; void *
.text:000000000001D2DC                 STP             XZR, XZR, [X20]
.text:000000000001D2E0                 STR             XZR, [X20,#0x10]
.text:000000000001D2E4                 CBZ             X0, loc_1D2F8
.text:000000000001D2E8                 STR             X0, [X19,#0x58]
.text:000000000001D2EC                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D2F0                 STP             XZR, XZR, [X21]
.text:000000000001D2F4                 STR             XZR, [X21,#0x10]
.text:000000000001D2F8 loc_1D2F8                               ; CODE XREF: core::HWcounterThread::init(void)+5C↑j
.text:000000000001D2F8                 MOV             X22, X19
.text:000000000001D2FC                 MOVI            V0.2D, #0
.text:000000000001D300                 LDR             X0, [X22,#0x80]! ; void *
.text:000000000001D304                 STP             Q0, Q0, [X21,#0x10]
.text:000000000001D308                 STR             Q0, [X21]
.text:000000000001D30C                 CBZ             X0, loc_1D320
.text:000000000001D310                 STR             X0, [X19,#0x88]
.text:000000000001D314                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D318                 STP             XZR, XZR, [X22]
.text:000000000001D31C                 STR             XZR, [X22,#0x10]
.text:000000000001D320 loc_1D320                               ; CODE XREF: core::HWcounterThread::init(void)+84↑j
.text:000000000001D320                 MOV             X20, X19
.text:000000000001D324                 LDR             X0, [X20,#0x98]! ; void *
.text:000000000001D328                 STP             XZR, XZR, [X22]
.text:000000000001D32C                 STR             XZR, [X22,#0x10]
.text:000000000001D330                 CBZ             X0, loc_1D344
.text:000000000001D334                 STR             X0, [X19,#0xA0]
.text:000000000001D338                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D33C                 STP             XZR, XZR, [X20]
.text:000000000001D340                 STR             XZR, [X20,#0x10]
.text:000000000001D344 loc_1D344                               ; CODE XREF: core::HWcounterThread::init(void)+A8↑j
.text:000000000001D344                 MOV             X0, X19
.text:000000000001D348                 STP             XZR, XZR, [X20]
.text:000000000001D34C                 STR             XZR, [X20,#0x10]
.text:000000000001D350                 BL              sub_1C500
.text:000000000001D354                 STR             W0, [X19,#4]
.text:000000000001D358                 LDP             X29, X30, [SP,#0x30+var_10]
.text:000000000001D35C                 LDP             X20, X19, [SP,#0x30+var_20]
.text:000000000001D360                 LDP             X22, X21, [SP+0x30+var_30],#0x30
.text:000000000001D364                 RET
.text:000000000001D364 ; } // starts at 1D288
.text:000000000001D364 ; End of function core::HWcounterThread::init(void)
.text:000000000001D368 ; =============== S U B R O U T I N E =======================================
.text:000000000001D368 ; __int64 __fastcall core::HWcounterThread::joinThread(core::HWcounterThread *__hidden this)
.text:000000000001D368                 EXPORT _ZN4core15HWcounterThread10joinThreadEv
.text:000000000001D368 _ZN4core15HWcounterThread10joinThreadEv ; DATA XREF: LOAD:00000000000013F8↑o
.text:000000000001D368 ; __unwind {
.text:000000000001D368                 LDR             X8, [X0,#8]! ; this
.text:000000000001D36C                 MOV             W9, #1
.text:000000000001D370                 STRB            W9, [X0,#8]
.text:000000000001D374                 CBZ             X8, locret_1D37C
.text:000000000001D378                 B               ._ZNSt3__16thread4joinEv ; std::__1::thread::join(void)
.text:000000000001D37C ; ---------------------------------------------------------------------------
.text:000000000001D37C locret_1D37C                            ; CODE XREF: core::HWcounterThread::joinThread(void)+C↑j
.text:000000000001D37C                 RET
.text:000000000001D37C ; } // starts at 1D368
.text:000000000001D37C ; End of function core::HWcounterThread::joinThread(void)
.text:000000000001D380 ; =============== S U B R O U T I N E =======================================
.text:000000000001D380 ; __int64 __fastcall core::HWcounterThread::stopCapturing(core::HWcounterThread *__hidden this)
.text:000000000001D380                 EXPORT _ZN4core15HWcounterThread13stopCapturingEv
.text:000000000001D380 _ZN4core15HWcounterThread13stopCapturingEv
.text:000000000001D380                                         ; DATA XREF: LOAD:0000000000001A88↑o
.text:000000000001D380 ; __unwind {
.text:000000000001D380                 MOV             W8, #1
.text:000000000001D384                 STRB            W8, [X0,#0x10]
.text:000000000001D388                 RET
.text:000000000001D388 ; } // starts at 1D380
.text:000000000001D388 ; End of function core::HWcounterThread::stopCapturing(void)
.text:000000000001D388 ; ---------------------------------------------------------------------------
.text:000000000001D38C                 ALIGN 0x10
.text:000000000001D390 ; =============== S U B R O U T I N E =======================================
.text:000000000001D390 ; Attributes: bp-based frame
.text:000000000001D390 ; __int64 __fastcall core::HWcounterThread::startCapturing(core::HWcounterThread *__hidden this, unsigned __int64)
.text:000000000001D390                 EXPORT _ZN4core15HWcounterThread14startCapturingEm
.text:000000000001D390 _ZN4core15HWcounterThread14startCapturingEm
.text:000000000001D390                                         ; DATA XREF: LOAD:0000000000001770↑o
.text:000000000001D390 var_40          = -0x40
.text:000000000001D390 var_38          = -0x38
.text:000000000001D390 var_30          = -0x30
.text:000000000001D390 var_20          = -0x20
.text:000000000001D390 var_10          = -0x10
.text:000000000001D390 var_s0          =  0
.text:000000000001D390 ; __unwind {
.text:000000000001D390                 SUB             SP, SP, #0x50
.text:000000000001D394                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000001D398                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000001D39C                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000001D3A0                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001D3A4                 ADD             X29, SP, #0x40
.text:000000000001D3A8                 MRS             X22, #3, c13, c0, #2
.text:000000000001D3AC                 LDR             X8, [X22,#0x28]
.text:000000000001D3B0                 STR             X8, [SP,#0x40+var_38]
.text:000000000001D3B4                 LDR             W8, [X0,#4]
.text:000000000001D3B8                 CMP             W8, #3
.text:000000000001D3BC                 B.EQ            loc_1D49C
.text:000000000001D3C0                 LDRB            W8, [X0,#0x11]
.text:000000000001D3C4                 MOV             X20, X0
.text:000000000001D3C8                 CBNZ            W8, loc_1D49C
.text:000000000001D3CC                 MOV             X19, X20
.text:000000000001D3D0                 MOV             X21, X1
.text:000000000001D3D4                 LDR             X8, [X19,#8]!
.text:000000000001D3D8                 CBZ             X8, loc_1D3E4
.text:000000000001D3DC                 MOV             X0, X19 ; this
.text:000000000001D3E0                 BL              ._ZNSt3__16thread6detachEv ; std::__1::thread::detach(void)
.text:000000000001D3E4 loc_1D3E4                               ; CODE XREF: core::HWcounterThread::startCapturing(ulong)+48↑j
.text:000000000001D3E4                 MOV             X24, X20
.text:000000000001D3E8                 LDR             X0, [X24,#0x80]! ; void *
.text:000000000001D3EC                 STP             XZR, XZR, [X24,#-0x18]
.text:000000000001D3F0                 STUR            XZR, [X24,#-8]
.text:000000000001D3F4                 CBZ             X0, loc_1D408
.text:000000000001D3F8                 STR             X0, [X20,#0x88]
.text:000000000001D3FC                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D400                 STP             XZR, XZR, [X24]
.text:000000000001D404                 STR             XZR, [X24,#0x10]
.text:000000000001D408 loc_1D408                               ; CODE XREF: core::HWcounterThread::startCapturing(ulong)+64↑j
.text:000000000001D408                 MOV             X23, X20
.text:000000000001D40C                 LDR             X0, [X23,#0x98]! ; void *
.text:000000000001D410                 STP             XZR, XZR, [X24]
.text:000000000001D414                 STR             XZR, [X24,#0x10]
.text:000000000001D418                 CBZ             X0, loc_1D42C
.text:000000000001D41C                 STR             X0, [X20,#0xA0]
.text:000000000001D420                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D424                 STP             XZR, XZR, [X23]
.text:000000000001D428                 STR             XZR, [X23,#0x10]
.text:000000000001D42C loc_1D42C                               ; CODE XREF: core::HWcounterThread::startCapturing(ulong)+88↑j
.text:000000000001D42C                 MOV             W8, #0x3E8
.text:000000000001D430                 STP             XZR, XZR, [X23]
.text:000000000001D434                 MOV             W9, #0x100
.text:000000000001D438                 STR             XZR, [X23,#0x10]
.text:000000000001D43C                 MUL             X8, X21, X8
.text:000000000001D440                 MOV             W0, #8  ; unsigned __int64
.text:000000000001D444                 STRH            W9, [X20,#0x10]
.text:000000000001D448                 STR             X8, [X20,#0x18]
.text:000000000001D44C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001D450                 MOV             X21, X0
.text:000000000001D454                 BL              ._ZNSt3__115__thread_structC1Ev ; std::__1::__thread_struct::__thread_struct(void)
.text:000000000001D458                 MOV             W0, #0x10 ; unsigned __int64
.text:000000000001D45C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001D460                 ADRP            X2, #loc_1D7E8@PAGE
.text:000000000001D464                 STP             X21, X20, [X0]
.text:000000000001D468                 MOV             X3, X0  ; arg
.text:000000000001D46C                 ADD             X2, X2, #loc_1D7E8@PAGEOFF ; start_routine
.text:000000000001D470                 MOV             X0, SP  ; newthread
.text:000000000001D474                 MOV             X1, XZR ; attr
.text:000000000001D478                 BL              .pthread_create
.text:000000000001D47C                 CBNZ            W0, loc_1D4C8
.text:000000000001D480                 LDR             X8, [X19]
.text:000000000001D484                 CBNZ            X8, loc_1D4D4
.text:000000000001D488                 LDR             X8, [SP,#0x40+var_40]
.text:000000000001D48C                 MOV             X0, SP  ; this
.text:000000000001D490                 STR             XZR, [SP,#0x40+var_40]
.text:000000000001D494                 STR             X8, [X19]
.text:000000000001D498                 BL              ._ZNSt3__16threadD1Ev ; std::__1::thread::~thread()
.text:000000000001D49C loc_1D49C                               ; CODE XREF: core::HWcounterThread::startCapturing(ulong)+2C↑j
.text:000000000001D49C                                         ; core::HWcounterThread::startCapturing(ulong)+38↑j
.text:000000000001D49C                 LDR             X8, [X22,#0x28]
.text:000000000001D4A0                 LDR             X9, [SP,#0x40+var_38]
.text:000000000001D4A4                 CMP             X8, X9
.text:000000000001D4A8                 B.NE            loc_1D4C4
.text:000000000001D4AC                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001D4B0                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000001D4B4                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000001D4B8                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000001D4BC                 ADD             SP, SP, #0x50 ; 'P'
.text:000000000001D4C0                 RET
.text:000000000001D4C4 ; ---------------------------------------------------------------------------
.text:000000000001D4C4 loc_1D4C4                               ; CODE XREF: core::HWcounterThread::startCapturing(ulong)+118↑j
.text:000000000001D4C4                 BL              .__stack_chk_fail
.text:000000000001D4C8 ; ---------------------------------------------------------------------------
.text:000000000001D4C8 loc_1D4C8                               ; CODE XREF: core::HWcounterThread::startCapturing(ulong)+EC↑j
.text:000000000001D4C8                 ADRP            X1, #aThreadConstruc@PAGE ; "thread constructor failed"
.text:000000000001D4CC                 ADD             X1, X1, #aThreadConstruc@PAGEOFF ; "thread constructor failed"
.text:000000000001D4D0                 BL              ._ZNSt3__120__throw_system_errorEiPKc ; std::__1::__throw_system_error(int,char const*)
.text:000000000001D4D4 loc_1D4D4                               ; CODE XREF: core::HWcounterThread::startCapturing(ulong)+F4↑j
.text:000000000001D4D4                 BL              ._ZSt9terminatev ; std::terminate(void)
.text:000000000001D4D4 ; } // starts at 1D390
.text:000000000001D4D4 ; End of function core::HWcounterThread::startCapturing(ulong)
.text:000000000001D4D8 ; =============== S U B R O U T I N E =======================================
.text:000000000001D4D8 ; Attributes: bp-based frame
.text:000000000001D4D8 ; __int64 __fastcall core::HWcounterThread::finishCapturing(core::HWcounterThread *__hidden this)
.text:000000000001D4D8                 EXPORT _ZN4core15HWcounterThread15finishCapturingEv
.text:000000000001D4D8 _ZN4core15HWcounterThread15finishCapturingEv
.text:000000000001D4D8                                         ; DATA XREF: LOAD:0000000000001ED8↑o
.text:000000000001D4D8 var_10          = -0x10
.text:000000000001D4D8 var_s0          =  0
.text:000000000001D4D8 ; __unwind {
.text:000000000001D4D8                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001D4DC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D4E0                 ADD             X29, SP, #0x10
.text:000000000001D4E4                 MOV             X19, X0
.text:000000000001D4E8                 LDR             X8, [X0,#8]! ; this
.text:000000000001D4EC                 MOV             W9, #1
.text:000000000001D4F0                 STRB            W9, [X0,#8]
.text:000000000001D4F4                 CBZ             X8, loc_1D4FC
.text:000000000001D4F8                 BL              ._ZNSt3__16thread4joinEv ; std::__1::thread::join(void)
.text:000000000001D4FC loc_1D4FC                               ; CODE XREF: core::HWcounterThread::finishCapturing(void)+1C↑j
.text:000000000001D4FC                 LDUR            Q0, [X19,#0x68]
.text:000000000001D500                 ADD             X0, X19, #0x38 ; '8'
.text:000000000001D504                 LDP             X8, X1, [X19,#0x78]
.text:000000000001D508                 LDR             X2, [X19,#0x88]
.text:000000000001D50C                 STR             Q0, [X19,#0x20]
.text:000000000001D510                 STR             X8, [X19,#0x30]
.text:000000000001D514                 BL              sub_1D850
.text:000000000001D518                 LDP             X1, X2, [X19,#0x98]
.text:000000000001D51C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D520                 ADD             X0, X19, #0x50 ; 'P'
.text:000000000001D524                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001D528                 B               sub_1D850
.text:000000000001D528 ; } // starts at 1D4D8
.text:000000000001D528 ; End of function core::HWcounterThread::finishCapturing(void)
.text:000000000001D528 ; ---------------------------------------------------------------------------
.text:000000000001D52C                 ALIGN 0x10
.text:000000000001D530 ; =============== S U B R O U T I N E =======================================
.text:000000000001D530 ; __int64 __fastcall core::HWcounterThread::getGpuUsage(core::HWcounterThread *__hidden this, double *)
.text:000000000001D530                 EXPORT _ZN4core15HWcounterThread11getGpuUsageERd
.text:000000000001D530 _ZN4core15HWcounterThread11getGpuUsageERd
.text:000000000001D530                                         ; DATA XREF: LOAD:0000000000002118↑o
.text:000000000001D530 var_80          = -0x80
.text:000000000001D530 var_70          = -0x70
.text:000000000001D530 var_60          = -0x60
.text:000000000001D530 var_54          = -0x54
.text:000000000001D530 var_50          = -0x50
.text:000000000001D530 var_4C          = -0x4C
.text:000000000001D530 var_40          = -0x40
.text:000000000001D530 var_38          = -0x38
.text:000000000001D530 var_30          = -0x30
.text:000000000001D530 var_20          = -0x20
.text:000000000001D530 var_10          = -0x10
.text:000000000001D530 ; FUNCTION CHUNK AT .text:000000000001C5D8 SIZE 000001B4 BYTES
.text:000000000001D530 ; __unwind {
.text:000000000001D530                 LDR             W8, [X0,#4]
.text:000000000001D534                 CMP             W8, #1
.text:000000000001D538                 B.NE            loc_1D554
.text:000000000001D53C                 LDRB            W8, [X0,#0x11]
.text:000000000001D540                 CBZ             W8, loc_1D55C
.text:000000000001D544                 LDR             X8, [X0,#0x68]
.text:000000000001D548                 MOV             W0, #1
.text:000000000001D54C                 STR             X8, [X1]
.text:000000000001D550                 RET
.text:000000000001D554 ; ---------------------------------------------------------------------------
.text:000000000001D554 loc_1D554                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)+8↑j
.text:000000000001D554                 MOV             W0, WZR
.text:000000000001D558                 RET
.text:000000000001D55C ; ---------------------------------------------------------------------------
.text:000000000001D55C loc_1D55C                               ; CODE XREF: core::HWcounterThread::getGpuUsage(double &)+10↑j
.text:000000000001D55C                 B               loc_1C5D8
.text:000000000001D55C ; } // starts at 1D530
.text:000000000001D55C ; End of function core::HWcounterThread::getGpuUsage(double &)
.text:000000000001D560 ; =============== S U B R O U T I N E =======================================
.text:000000000001D560 ; Attributes: bp-based frame
.text:000000000001D560 ; core::HWcounterThread::getGpuActivity(std::__1::vector<core::ShaderActivity, std::__1::allocator<core::ShaderActivity>> &, std::__1::vector<core::ShaderActivity, std::__1::allocator<core::ShaderActivity>> &)
.text:000000000001D560                 EXPORT _ZN4core15HWcounterThread14getGpuActivityERNSt3__16vectorINS_14ShaderActivityENS1_9allocatorIS3_EEEES7_
.text:000000000001D560 _ZN4core15HWcounterThread14getGpuActivityERNSt3__16vectorINS_14ShaderActivityENS1_9allocatorIS3_EEEES7_
.text:000000000001D560                                         ; DATA XREF: LOAD:00000000000017E8↑o
.text:000000000001D560 var_10          = -0x10
.text:000000000001D560 var_s0          =  0
.text:000000000001D560 ; __unwind {
.text:000000000001D560                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000001D564                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D568                 ADD             X29, SP, #0x10
.text:000000000001D56C                 MOV             X19, X2
.text:000000000001D570                 MOV             X20, X0
.text:000000000001D574                 ADD             X8, X0, #0x38 ; '8'
.text:000000000001D578                 CMP             X8, X1
.text:000000000001D57C                 B.EQ            loc_1D590
.text:000000000001D580                 LDP             X8, X2, [X20,#0x38]
.text:000000000001D584                 MOV             X0, X1
.text:000000000001D588                 MOV             X1, X8
.text:000000000001D58C                 BL              sub_1D850
.text:000000000001D590 loc_1D590                               ; CODE XREF: core::HWcounterThread::getGpuActivity(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> &,std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> &)+1C↑j
.text:000000000001D590                 ADD             X8, X20, #0x50 ; 'P'
.text:000000000001D594                 CMP             X8, X19
.text:000000000001D598                 B.EQ            loc_1D5B0
.text:000000000001D59C                 LDP             X1, X2, [X20,#0x50]
.text:000000000001D5A0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D5A4                 MOV             X0, X19
.text:000000000001D5A8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000001D5AC                 B               sub_1D850
.text:000000000001D5B0 ; ---------------------------------------------------------------------------
.text:000000000001D5B0 loc_1D5B0                               ; CODE XREF: core::HWcounterThread::getGpuActivity(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> &,std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> &)+38↑j
.text:000000000001D5B0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001D5B4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000001D5B8                 RET
.text:000000000001D5B8 ; } // starts at 1D560
.text:000000000001D5B8 ; End of function core::HWcounterThread::getGpuActivity(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> &,std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> &)
.text:000000000001D5B8 ; ---------------------------------------------------------------------------
.text:000000000001D5BC                 ALIGN 0x20
.text:000000000001D5C0 ; =============== S U B R O U T I N E =======================================
.text:000000000001D5C0 ; __int64 __fastcall core::HWcounterThread::getCpuGpuTimeDiff(core::HWcounterThread *__hidden this, unsigned __int64 *)
.text:000000000001D5C0                 EXPORT _ZN4core15HWcounterThread17getCpuGpuTimeDiffEPy
.text:000000000001D5C0 _ZN4core15HWcounterThread17getCpuGpuTimeDiffEPy
.text:000000000001D5C0                                         ; DATA XREF: LOAD:00000000000011E8↑o
.text:000000000001D5C0 ; __unwind {
.text:000000000001D5C0                 LDR             X8, [X0,#0x28]
.text:000000000001D5C4                 STR             X8, [X1]
.text:000000000001D5C8                 RET
.text:000000000001D5C8 ; } // starts at 1D5C0
.text:000000000001D5C8 ; End of function core::HWcounterThread::getCpuGpuTimeDiff(ulong long *)
.text:000000000001D5C8 ; ---------------------------------------------------------------------------
.text:000000000001D5CC                 ALIGN 0x10
.text:000000000001D5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000001D5D0 ; __int64 __fastcall core::HWcounterThread::getRealtimeMonotonictimeDiff(core::HWcounterThread *__hidden this, unsigned __int64 *)
.text:000000000001D5D0                 EXPORT _ZN4core15HWcounterThread28getRealtimeMonotonictimeDiffEPy
.text:000000000001D5D0 _ZN4core15HWcounterThread28getRealtimeMonotonictimeDiffEPy
.text:000000000001D5D0                                         ; DATA XREF: LOAD:00000000000019F8↑o
.text:000000000001D5D0 ; __unwind {
.text:000000000001D5D0                 LDR             X8, [X0,#0x30]
.text:000000000001D5D4                 STR             X8, [X1]
.text:000000000001D5D8                 RET
.text:000000000001D5D8 ; } // starts at 1D5D0
.text:000000000001D5D8 ; End of function core::HWcounterThread::getRealtimeMonotonictimeDiff(ulong long *)
.text:000000000001D5D8 ; ---------------------------------------------------------------------------
.text:000000000001D5DC                 ALIGN 0x20
.text:000000000001D5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000001D5E0 ; Attributes: bp-based frame
.text:000000000001D5E0 ; __int64 __fastcall core::HWcounterThread::threadFunction(core::HWcounterThread *__hidden this)
.text:000000000001D5E0                 EXPORT _ZN4core15HWcounterThread14threadFunctionEv
.text:000000000001D5E0 _ZN4core15HWcounterThread14threadFunctionEv
.text:000000000001D5E0                                         ; CODE XREF: core::HWcounterThread::threadFunction(void)+C↓j
.text:000000000001D5E0                                         ; DATA XREF: LOAD:0000000000001410↑o ...
.text:000000000001D5E0 var_B0          = -0xB0
.text:000000000001D5E0 var_A0          = -0xA0
.text:000000000001D5E0 var_90          = -0x90
.text:000000000001D5E0 var_80          = -0x80
.text:000000000001D5E0 var_70          = -0x70
.text:000000000001D5E0 var_68          = -0x68
.text:000000000001D5E0 var_60          = -0x60
.text:000000000001D5E0 var_58          = -0x58
.text:000000000001D5E0 var_50          = -0x50
.text:000000000001D5E0 var_40          = -0x40
.text:000000000001D5E0 var_30          = -0x30
.text:000000000001D5E0 var_20          = -0x20
.text:000000000001D5E0 var_10          = -0x10
.text:000000000001D5E0 var_s0          =  0
.text:000000000001D5E0 ; __unwind {
.text:000000000001D5E0                 SUB             SP, SP, #0xC0
.text:000000000001D5E4                 STR             D8, [SP,#0xB0+var_50]
.text:000000000001D5E8                 STP             X26, X25, [SP,#0xB0+var_40]
.text:000000000001D5EC                 STP             X24, X23, [SP,#0xB0+var_30]
.text:000000000001D5F0                 STP             X22, X21, [SP,#0xB0+var_20]
.text:000000000001D5F4                 STP             X20, X19, [SP,#0xB0+var_10]
.text:000000000001D5F8                 STP             X29, X30, [SP,#0xB0+var_s0]
.text:000000000001D5FC                 ADD             X29, SP, #0xB0
.text:000000000001D600                 MRS             X25, #3, c13, c0, #2
.text:000000000001D604                 MOV             X19, X0
.text:000000000001D608                 LDR             X8, [X25,#0x28]
.text:000000000001D60C                 STR             X8, [SP,#0xB0+var_58]
.text:000000000001D610                 LDR             W8, [X0,#4]
.text:000000000001D614                 CMP             W8, #1
.text:000000000001D618                 B.EQ            loc_1D630
.text:000000000001D61C                 MOV             X0, X19 ; this
.text:000000000001D620                 BL              ._ZN4core15HWcounterThread4initEv ; core::HWcounterThread::init(void)
.text:000000000001D624                 LDR             W8, [X19,#4]
.text:000000000001D628                 CMP             W8, #1
.text:000000000001D62C                 B.NE            loc_1D754
.text:000000000001D630 loc_1D630                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+38↑j
.text:000000000001D630                 BL              ._ZN5utils15getUtcTime_usecEv ; utils::getUtcTime_usec(void)
.text:000000000001D634                 MOV             X24, X0
.text:000000000001D638                 MOV             X20, X19
.text:000000000001D63C                 ADD             X1, X19, #0x70 ; 'p'
.text:000000000001D640                 MOV             X0, X19
.text:000000000001D644                 STR             XZR, [X20,#0x68]!
.text:000000000001D648                 BL              sub_1C958
.text:000000000001D64C                 LDRB            W8, [X19,#0x10]
.text:000000000001D650                 CBNZ            W8, loc_1D7AC
.text:000000000001D654                 ADRP            X8, #xmmword_7B10@PAGE
.text:000000000001D658                 MOV             X26, XZR
.text:000000000001D65C                 ADD             X21, X19, #0x80
.text:000000000001D660                 LDR             Q0, [X8,#xmmword_7B10@PAGEOFF]
.text:000000000001D664                 ADD             X22, X19, #0x98
.text:000000000001D668                 STR             Q0, [SP,#0xB0+var_A0]
.text:000000000001D66C loc_1D66C                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+16C↓j
.text:000000000001D66C                 BL              ._ZN5utils15getUtcTime_usecEv ; utils::getUtcTime_usec(void)
.text:000000000001D670                 SUB             X8, X0, X24
.text:000000000001D674                 CMP             X8, #0x1F4
.text:000000000001D678                 B.CC            loc_1D748
.text:000000000001D67C                 LDR             X9, [X19,#0x18]
.text:000000000001D680                 ADD             X26, X8, X26
.text:000000000001D684                 CMP             X26, X9
.text:000000000001D688                 B.HI            loc_1D7AC
.text:000000000001D68C                 MOV             X23, X0
.text:000000000001D690                 STP             XZR, XZR, [SP,#0xB0+var_70]
.text:000000000001D694                 ADD             X1, SP, #0xB0+var_60
.text:000000000001D698                 ADD             X3, SP, #0xB0+var_68
.text:000000000001D69C                 ADD             X4, SP, #0xB0+var_70
.text:000000000001D6A0                 MOV             X0, X19
.text:000000000001D6A4                 MOV             X2, X20
.text:000000000001D6A8                 BL              sub_1C790
.text:000000000001D6AC                 TBZ             W0, #0, loc_1D744
.text:000000000001D6B0                 LDR             X0, [SP,#0xB0+var_60]
.text:000000000001D6B4                 BL              .__floatunditf
.text:000000000001D6B8                 LDR             Q1, [SP,#0xB0+var_A0]
.text:000000000001D6BC                 BL              .__divtf3
.text:000000000001D6C0                 LDP             D1, D2, [SP,#0xB0+var_70]
.text:000000000001D6C4                 LDP             X8, X9, [X19,#0x88]
.text:000000000001D6C8                 FCVT            S2, D2
.text:000000000001D6CC                 STR             Q0, [SP,#0xB0+var_90]
.text:000000000001D6D0                 FCVT            S8, D1
.text:000000000001D6D4                 CMP             X8, X9
.text:000000000001D6D8                 STR             S2, [SP,#0xB0+var_80]
.text:000000000001D6DC                 B.CS            loc_1D6F8
.text:000000000001D6E0                 LDP             Q2, Q1, [SP,#0xB0+var_90]
.text:000000000001D6E4                 STP             Q2, Q1, [X8]
.text:000000000001D6E8                 LDR             X8, [X19,#0x88]
.text:000000000001D6EC                 ADD             X8, X8, #0x20 ; ' '
.text:000000000001D6F0                 STR             X8, [X19,#0x88]
.text:000000000001D6F4                 B               loc_1D70C
.text:000000000001D6F8 ; ---------------------------------------------------------------------------
.text:000000000001D6F8 loc_1D6F8                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+FC↑j
.text:000000000001D6F8                 ADD             X1, SP, #0xB0+var_90
.text:000000000001D6FC                 STR             Q0, [SP,#0xB0+var_B0]
.text:000000000001D700                 MOV             X0, X21
.text:000000000001D704                 BL              sub_1D9A0
.text:000000000001D708                 LDR             Q0, [SP,#0xB0+var_B0]
.text:000000000001D70C loc_1D70C                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+114↑j
.text:000000000001D70C                 LDP             X8, X9, [X19,#0xA0]
.text:000000000001D710                 STR             Q0, [SP,#0xB0+var_90]
.text:000000000001D714                 STR             S8, [SP,#0xB0+var_80]
.text:000000000001D718                 CMP             X8, X9
.text:000000000001D71C                 B.CS            loc_1D738
.text:000000000001D720                 LDP             Q0, Q1, [SP,#0xB0+var_90]
.text:000000000001D724                 STP             Q0, Q1, [X8]
.text:000000000001D728                 LDR             X8, [X19,#0xA0]
.text:000000000001D72C                 ADD             X8, X8, #0x20 ; ' '
.text:000000000001D730                 STR             X8, [X19,#0xA0]
.text:000000000001D734                 B               loc_1D744
.text:000000000001D738 ; ---------------------------------------------------------------------------
.text:000000000001D738 loc_1D738                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+13C↑j
.text:000000000001D738                 ADD             X1, SP, #0xB0+var_90
.text:000000000001D73C                 MOV             X0, X22
.text:000000000001D740                 BL              sub_1D9A0
.text:000000000001D744 loc_1D744                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+CC↑j
.text:000000000001D744                                         ; core::HWcounterThread::threadFunction(void)+154↑j
.text:000000000001D744                 MOV             X24, X23
.text:000000000001D748 loc_1D748                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+98↑j
.text:000000000001D748                 LDRB            W8, [X19,#0x10]
.text:000000000001D74C                 CBZ             W8, loc_1D66C
.text:000000000001D750                 B               loc_1D7AC
.text:000000000001D754 ; ---------------------------------------------------------------------------
.text:000000000001D754 loc_1D754                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+4C↑j
.text:000000000001D754                 MOV             X20, X19
.text:000000000001D758                 LDR             X0, [X20,#0x80]! ; void *
.text:000000000001D75C                 STP             XZR, XZR, [X20,#-0x18]
.text:000000000001D760                 STUR            XZR, [X20,#-8]
.text:000000000001D764                 CBZ             X0, loc_1D778
.text:000000000001D768                 STR             X0, [X19,#0x88]
.text:000000000001D76C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D770                 STP             XZR, XZR, [X20]
.text:000000000001D774                 STR             XZR, [X20,#0x10]
.text:000000000001D778 loc_1D778                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+184↑j
.text:000000000001D778                 MOV             X21, X19
.text:000000000001D77C                 LDR             X0, [X21,#0x98]! ; void *
.text:000000000001D780                 STP             XZR, XZR, [X20]
.text:000000000001D784                 STR             XZR, [X20,#0x10]
.text:000000000001D788                 CBZ             X0, loc_1D79C
.text:000000000001D78C                 STR             X0, [X19,#0xA0]
.text:000000000001D790                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D794                 STP             XZR, XZR, [X21]
.text:000000000001D798                 STR             XZR, [X21,#0x10]
.text:000000000001D79C loc_1D79C                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+1A8↑j
.text:000000000001D79C                 MOV             W8, #1
.text:000000000001D7A0                 STP             XZR, XZR, [X21]
.text:000000000001D7A4                 STR             XZR, [X21,#0x10]
.text:000000000001D7A8                 STRB            W8, [X19,#0x10]
.text:000000000001D7AC loc_1D7AC                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+70↑j
.text:000000000001D7AC                                         ; core::HWcounterThread::threadFunction(void)+A8↑j ...
.text:000000000001D7AC                 STRB            WZR, [X19,#0x11]
.text:000000000001D7B0                 LDR             X8, [X25,#0x28]
.text:000000000001D7B4                 LDR             X9, [SP,#0xB0+var_58]
.text:000000000001D7B8                 CMP             X8, X9
.text:000000000001D7BC                 B.NE            loc_1D7E0
.text:000000000001D7C0                 LDP             X29, X30, [SP,#0xB0+var_s0]
.text:000000000001D7C4                 LDP             X20, X19, [SP,#0xB0+var_10]
.text:000000000001D7C8                 LDP             X22, X21, [SP,#0xB0+var_20]
.text:000000000001D7CC                 LDP             X24, X23, [SP,#0xB0+var_30]
.text:000000000001D7D0                 LDP             X26, X25, [SP,#0xB0+var_40]
.text:000000000001D7D4                 LDR             D8, [SP,#0xB0+var_50]
.text:000000000001D7D8                 ADD             SP, SP, #0xC0
.text:000000000001D7DC                 RET
.text:000000000001D7E0 ; ---------------------------------------------------------------------------
.text:000000000001D7E0 loc_1D7E0                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+1DC↑j
.text:000000000001D7E0                 BL              .__stack_chk_fail
.text:000000000001D7E0 ; } // starts at 1D5E0
.text:000000000001D7E0 ; End of function core::HWcounterThread::threadFunction(void)
.text:000000000001D7E0 ; ---------------------------------------------------------------------------
.text:000000000001D7E4                 ALIGN 8
.text:000000000001D7E8 loc_1D7E8                               ; DATA XREF: core::HWcounterThread::startCapturing(ulong)+D0↑o
.text:000000000001D7E8                                         ; core::HWcounterThread::startCapturing(ulong)+DC↑o
.text:000000000001D7E8 ; __unwind {
.text:000000000001D7E8                 STP             X20, X19, [SP,#-0x20]!
.text:000000000001D7EC                 STP             X29, X30, [SP,#0x10]
.text:000000000001D7F0                 ADD             X29, SP, #0x10
.text:000000000001D7F4                 MOV             X19, X0
.text:000000000001D7F8                 BL              ._ZNSt3__119__thread_local_dataEv ; std::__1::__thread_local_data(void)
.text:000000000001D7FC                 LDR             X1, [X19]
.text:000000000001D800                 STR             XZR, [X19]
.text:000000000001D804                 LDR             W0, [X0]
.text:000000000001D808                 BL              .pthread_setspecific
.text:000000000001D80C                 LDR             X0, [X19,#8]
.text:000000000001D810                 BL              ._ZN4core15HWcounterThread14threadFunctionEv ; core::HWcounterThread::threadFunction(void)
.text:000000000001D814                 CBZ             X19, loc_1D83C
.text:000000000001D818                 LDR             X20, [X19]
.text:000000000001D81C                 STR             XZR, [X19]
.text:000000000001D820                 CBZ             X20, loc_1D834
.text:000000000001D824                 MOV             X0, X20
.text:000000000001D828                 BL              ._ZNSt3__115__thread_structD1Ev ; std::__1::__thread_struct::~__thread_struct()
.text:000000000001D82C                 MOV             X0, X20
.text:000000000001D830                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D834 loc_1D834                               ; CODE XREF: .text:000000000001D820↑j
.text:000000000001D834                 MOV             X0, X19
.text:000000000001D838                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D83C loc_1D83C                               ; CODE XREF: .text:000000000001D814↑j
.text:000000000001D83C                 LDP             X29, X30, [SP,#0x10]
.text:000000000001D840                 MOV             X0, XZR
.text:000000000001D844                 LDP             X20, X19, [SP],#0x20
.text:000000000001D848                 RET
.text:000000000001D848 ; } // starts at 1D7E8
.text:000000000001D848 ; ---------------------------------------------------------------------------
.text:000000000001D84C                 ALIGN 0x10
.text:000000000001D850 ; =============== S U B R O U T I N E =======================================
.text:000000000001D850 ; Attributes: bp-based frame
.text:000000000001D850 sub_1D850                               ; CODE XREF: core::HWcounterThread::finishCapturing(void)+3C↑p
.text:000000000001D850                                         ; core::HWcounterThread::finishCapturing(void)+50↑j ...
.text:000000000001D850 var_40          = -0x40
.text:000000000001D850 var_30          = -0x30
.text:000000000001D850 var_20          = -0x20
.text:000000000001D850 var_10          = -0x10
.text:000000000001D850 var_s0          =  0
.text:000000000001D850 ; __unwind {
.text:000000000001D850                 STP             X26, X25, [SP,#-0x10+var_40]!
.text:000000000001D854                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000001D858                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000001D85C                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000001D860                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001D864                 ADD             X29, SP, #0x40
.text:000000000001D868                 LDR             X8, [X0,#0x10]
.text:000000000001D86C                 MOV             X19, X0
.text:000000000001D870                 LDR             X22, [X0]
.text:000000000001D874                 MOV             X20, X1
.text:000000000001D878                 SUB             X21, X2, X1
.text:000000000001D87C                 ASR             X25, X21, #5
.text:000000000001D880                 SUB             X9, X8, X22
.text:000000000001D884                 CMP             X25, X9,ASR#5
.text:000000000001D888                 B.LS            loc_1D8DC
.text:000000000001D88C                 CBZ             X22, loc_1D8A8
.text:000000000001D890                 MOV             X0, X22 ; void *
.text:000000000001D894                 STR             X22, [X19,#8]
.text:000000000001D898                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001D89C                 MOV             X8, XZR
.text:000000000001D8A0                 STP             XZR, XZR, [X19]
.text:000000000001D8A4                 STR             XZR, [X19,#0x10]
.text:000000000001D8A8 loc_1D8A8                               ; CODE XREF: sub_1D850+3C↑j
.text:000000000001D8A8                 LSR             X9, X25, #0x3B ; ';'
.text:000000000001D8AC                 CBNZ            X9, loc_1D8D4
.text:000000000001D8B0                 MOV             X9, #0x3FFFFFFFFFFFFFE
.text:000000000001D8B4                 CMP             X9, X8,ASR#5
.text:000000000001D8B8                 B.CC            loc_1D94C
.text:000000000001D8BC                 ASR             X8, X8, #4
.text:000000000001D8C0                 CMP             X8, X25
.text:000000000001D8C4                 B.CC            loc_1D950
.text:000000000001D8C8                 MOV             X25, X8
.text:000000000001D8CC                 LSR             X9, X8, #0x3B ; ';'
.text:000000000001D8D0                 CBZ             X9, loc_1D950
.text:000000000001D8D4 loc_1D8D4                               ; CODE XREF: sub_1D850+5C↑j
.text:000000000001D8D4                 MOV             X0, X19
.text:000000000001D8D8                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:000000000001D8DC loc_1D8DC                               ; CODE XREF: sub_1D850+38↑j
.text:000000000001D8DC                 LDR             X8, [X19,#8]
.text:000000000001D8E0                 MOV             X23, X2
.text:000000000001D8E4                 SUB             X8, X8, X22
.text:000000000001D8E8                 ASR             X26, X8, #5
.text:000000000001D8EC                 ADD             X8, X20, X8
.text:000000000001D8F0                 CMP             X25, X26
.text:000000000001D8F4                 CSEL            X21, X8, X2, HI
.text:000000000001D8F8                 SUBS            X24, X21, X20
.text:000000000001D8FC                 B.EQ            loc_1D910
.text:000000000001D900                 MOV             X0, X22 ; dest
.text:000000000001D904                 MOV             X1, X20 ; src
.text:000000000001D908                 MOV             X2, X24 ; n
.text:000000000001D90C                 BL              .memmove
.text:000000000001D910 loc_1D910                               ; CODE XREF: sub_1D850+AC↑j
.text:000000000001D910                 CMP             X25, X26
.text:000000000001D914                 B.LS            loc_1D940
.text:000000000001D918                 SUB             X20, X23, X21
.text:000000000001D91C                 CMP             X20, #1
.text:000000000001D920                 B.LT            loc_1D988
.text:000000000001D924                 LDR             X0, [X19,#8] ; dest
.text:000000000001D928                 MOV             X1, X21 ; src
.text:000000000001D92C                 MOV             X2, X20 ; n
.text:000000000001D930                 BL              .memcpy
.text:000000000001D934                 LDR             X8, [X19,#8]
.text:000000000001D938                 ADD             X8, X8, X20
.text:000000000001D93C                 B               loc_1D984
.text:000000000001D940 ; ---------------------------------------------------------------------------
.text:000000000001D940 loc_1D940                               ; CODE XREF: sub_1D850+C4↑j
.text:000000000001D940                 ASR             X8, X24, #5
.text:000000000001D944                 ADD             X8, X22, X8,LSL#5
.text:000000000001D948                 B               loc_1D984
.text:000000000001D94C ; ---------------------------------------------------------------------------
.text:000000000001D94C loc_1D94C                               ; CODE XREF: sub_1D850+68↑j
.text:000000000001D94C                 MOV             X25, #0x7FFFFFFFFFFFFFF
.text:000000000001D950 loc_1D950                               ; CODE XREF: sub_1D850+74↑j
.text:000000000001D950                                         ; sub_1D850+80↑j
.text:000000000001D950                 LSL             X22, X25, #5
.text:000000000001D954                 MOV             X0, X22 ; unsigned __int64
.text:000000000001D958                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001D95C                 ADD             X8, X0, X22
.text:000000000001D960                 STP             X0, X0, [X19]
.text:000000000001D964                 CMP             X21, #1
.text:000000000001D968                 STR             X8, [X19,#0x10]
.text:000000000001D96C                 B.LT            loc_1D988
.text:000000000001D970                 MOV             X1, X20 ; src
.text:000000000001D974                 MOV             X2, X21 ; n
.text:000000000001D978                 BL              .memcpy
.text:000000000001D97C                 LDR             X8, [X19,#8]
.text:000000000001D980                 ADD             X8, X8, X21
.text:000000000001D984 loc_1D984                               ; CODE XREF: sub_1D850+EC↑j
.text:000000000001D984                                         ; sub_1D850+F8↑j
.text:000000000001D984                 STR             X8, [X19,#8]
.text:000000000001D988 loc_1D988                               ; CODE XREF: sub_1D850+D0↑j
.text:000000000001D988                                         ; sub_1D850+11C↑j
.text:000000000001D988                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001D98C                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000001D990                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000001D994                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000001D998                 LDP             X26, X25, [SP+0x40+var_40],#0x50
.text:000000000001D99C                 RET
.text:000000000001D99C ; } // starts at 1D850
.text:000000000001D99C ; End of function sub_1D850
.text:000000000001D9A0 ; =============== S U B R O U T I N E =======================================
.text:000000000001D9A0 ; Attributes: bp-based frame
.text:000000000001D9A0 sub_1D9A0                               ; CODE XREF: core::HWcounterThread::threadFunction(void)+124↑p
.text:000000000001D9A0                                         ; core::HWcounterThread::threadFunction(void)+160↑p
.text:000000000001D9A0 var_40          = -0x40
.text:000000000001D9A0 var_30          = -0x30
.text:000000000001D9A0 var_20          = -0x20
.text:000000000001D9A0 var_10          = -0x10
.text:000000000001D9A0 var_s0          =  0
.text:000000000001D9A0 ; __unwind {
.text:000000000001D9A0                 STR             X25, [SP,#-0x10+var_40]!
.text:000000000001D9A4                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000001D9A8                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000001D9AC                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000001D9B0                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001D9B4                 ADD             X29, SP, #0x40
.text:000000000001D9B8                 LDP             X20, X8, [X0]
.text:000000000001D9BC                 MOV             X19, X0
.text:000000000001D9C0                 SUB             X21, X8, X20
.text:000000000001D9C4                 ASR             X24, X21, #5
.text:000000000001D9C8                 ADD             X8, X24, #1
.text:000000000001D9CC                 LSR             X9, X8, #0x3B ; ';'
.text:000000000001D9D0                 CBNZ            X9, loc_1DA90
.text:000000000001D9D4                 LDR             X9, [X19,#0x10]
.text:000000000001D9D8                 MOV             X22, X1
.text:000000000001D9DC                 MOV             X10, #0x3FFFFFFFFFFFFFE
.text:000000000001D9E0                 SUB             X9, X9, X20
.text:000000000001D9E4                 CMP             X10, X9,ASR#5
.text:000000000001D9E8                 B.CC            loc_1DA08
.text:000000000001D9EC                 ASR             X9, X9, #4
.text:000000000001D9F0                 CMP             X9, X8
.text:000000000001D9F4                 CSEL            X25, X8, X9, CC
.text:000000000001D9F8                 CBZ             X25, loc_1DA88
.text:000000000001D9FC                 LSR             X8, X25, #0x3B ; ';'
.text:000000000001DA00                 CBZ             X8, loc_1DA0C
.text:000000000001DA04                 BL              .abort
.text:000000000001DA08 ; ---------------------------------------------------------------------------
.text:000000000001DA08 loc_1DA08                               ; CODE XREF: sub_1D9A0+48↑j
.text:000000000001DA08                 MOV             X25, #0x7FFFFFFFFFFFFFF
.text:000000000001DA0C loc_1DA0C                               ; CODE XREF: sub_1D9A0+60↑j
.text:000000000001DA0C                 LSL             X0, X25, #5 ; unsigned __int64
.text:000000000001DA10                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001DA14                 MOV             X23, X0
.text:000000000001DA18 loc_1DA18                               ; CODE XREF: sub_1D9A0+EC↓j
.text:000000000001DA18                 LDP             Q1, Q0, [X22]
.text:000000000001DA1C                 ADD             X8, X23, X24,LSL#5
.text:000000000001DA20                 ADD             X22, X23, X25,LSL#5
.text:000000000001DA24                 ADD             X24, X8, #0x20 ; ' '
.text:000000000001DA28                 CMP             X21, #1
.text:000000000001DA2C                 STP             Q1, Q0, [X8]
.text:000000000001DA30                 B.LT            loc_1DA48
.text:000000000001DA34                 MOV             X0, X23 ; dest
.text:000000000001DA38                 MOV             X1, X20 ; src
.text:000000000001DA3C                 MOV             X2, X21 ; n
.text:000000000001DA40                 BL              .memcpy
.text:000000000001DA44                 LDR             X20, [X19]
.text:000000000001DA48 loc_1DA48                               ; CODE XREF: sub_1D9A0+90↑j
.text:000000000001DA48                 STP             X23, X24, [X19]
.text:000000000001DA4C                 STR             X22, [X19,#0x10]
.text:000000000001DA50                 CBZ             X20, loc_1DA70
.text:000000000001DA54                 MOV             X0, X20 ; void *
.text:000000000001DA58                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001DA5C                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000001DA60                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000001DA64                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000001DA68                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000001DA6C                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001DA70 ; ---------------------------------------------------------------------------
.text:000000000001DA70 loc_1DA70                               ; CODE XREF: sub_1D9A0+B0↑j
.text:000000000001DA70                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001DA74                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000001DA78                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000001DA7C                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000001DA80                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000001DA84                 RET
.text:000000000001DA88 ; ---------------------------------------------------------------------------
.text:000000000001DA88 loc_1DA88                               ; CODE XREF: sub_1D9A0+58↑j
.text:000000000001DA88                 MOV             X23, XZR
.text:000000000001DA8C                 B               loc_1DA18
.text:000000000001DA90 ; ---------------------------------------------------------------------------
.text:000000000001DA90 loc_1DA90                               ; CODE XREF: sub_1D9A0+30↑j
.text:000000000001DA90                 MOV             X0, X19
.text:000000000001DA94                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:000000000001DA94 ; } // starts at 1D9A0
.text:000000000001DA94 ; End of function sub_1D9A0
.text:000000000001DA98 ; =============== S U B R O U T I N E =======================================
.text:000000000001DA98 ; __int64 __fastcall KeyEventInterceptor::getInstance(KeyEventInterceptor *__hidden this)
.text:000000000001DA98                 EXPORT _ZN19KeyEventInterceptor11getInstanceEv
.text:000000000001DA98 _ZN19KeyEventInterceptor11getInstanceEv ; CODE XREF: KeyEventInterceptor::getInstance(void)+C↓j
.text:000000000001DA98                                         ; DATA XREF: LOAD:0000000000001D40↑o ...
.text:000000000001DA98 ; __unwind {
.text:000000000001DA98                 ADRP            X0, #unk_310F0@PAGE
.text:000000000001DA9C                 ADD             X0, X0, #unk_310F0@PAGEOFF
.text:000000000001DAA0                 RET
.text:000000000001DAA0 ; } // starts at 1DA98
.text:000000000001DAA0 ; End of function KeyEventInterceptor::getInstance(void)
.text:000000000001DAA0 ; ---------------------------------------------------------------------------
.text:000000000001DAA4                 ALIGN 8
.text:000000000001DAA8 ; =============== S U B R O U T I N E =======================================
.text:000000000001DAA8 ; Attributes: bp-based frame
.text:000000000001DAA8 ; __int64 __fastcall KeyEventInterceptor::updateState(KeyEventInterceptor *__hidden this)
.text:000000000001DAA8                 EXPORT _ZN19KeyEventInterceptor11updateStateEv
.text:000000000001DAA8 _ZN19KeyEventInterceptor11updateStateEv ; CODE XREF: KeyEventInterceptor::updateState(void)+C↓j
.text:000000000001DAA8                                         ; DATA XREF: LOAD:0000000000001CC8↑o ...
.text:000000000001DAA8 var_30          = -0x30
.text:000000000001DAA8 var_28          = -0x28
.text:000000000001DAA8 var_18          = -0x18
.text:000000000001DAA8 var_10          = -0x10
.text:000000000001DAA8 var_s0          =  0
.text:000000000001DAA8 ; __unwind {
.text:000000000001DAA8                 SUB             SP, SP, #0x40
.text:000000000001DAAC                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000001DAB0                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001DAB4                 ADD             X29, SP, #0x30
.text:000000000001DAB8                 MRS             X20, #3, c13, c0, #2
.text:000000000001DABC                 MOV             X19, X0
.text:000000000001DAC0                 LDR             X8, [X20,#0x28]
.text:000000000001DAC4                 STR             X8, [SP,#0x30+var_18]
.text:000000000001DAC8                 MOV             X8, SP
.text:000000000001DACC                 STRH            WZR, [X0]
.text:000000000001DAD0                 BL              ._ZN5Hwobs16receiveKeyEventsEv ; Hwobs::receiveKeyEvents(void)
.text:000000000001DAD4                 LDP             X0, X8, [SP,#0x30+var_30] ; void *
.text:000000000001DAD8                 CMP             X0, X8
.text:000000000001DADC                 B.EQ            loc_1DB2C
.text:000000000001DAE0                 MOV             W9, #1
.text:000000000001DAE4                 MOV             X10, X0
.text:000000000001DAE8 loc_1DAE8                               ; CODE XREF: KeyEventInterceptor::updateState(void)+80↓j
.text:000000000001DAE8                 LDR             W11, [X10]
.text:000000000001DAEC                 CMP             W11, #0x18
.text:000000000001DAF0                 B.EQ            loc_1DB10
.text:000000000001DAF4                 CMP             W11, #0x19
.text:000000000001DAF8                 B.NE            loc_1DB20
.text:000000000001DAFC                 LDR             W11, [X10,#4]
.text:000000000001DB00                 CMP             W11, #1
.text:000000000001DB04                 B.NE            loc_1DB20
.text:000000000001DB08                 STRB            W9, [X19]
.text:000000000001DB0C                 B               loc_1DB20
.text:000000000001DB10 ; ---------------------------------------------------------------------------
.text:000000000001DB10 loc_1DB10                               ; CODE XREF: KeyEventInterceptor::updateState(void)+48↑j
.text:000000000001DB10                 LDR             W11, [X10,#4]
.text:000000000001DB14                 CMP             W11, #1
.text:000000000001DB18                 B.NE            loc_1DB20
.text:000000000001DB1C                 STRB            W9, [X19,#1]
.text:000000000001DB20 loc_1DB20                               ; CODE XREF: KeyEventInterceptor::updateState(void)+50↑j
.text:000000000001DB20                                         ; KeyEventInterceptor::updateState(void)+5C↑j ...
.text:000000000001DB20                 ADD             X10, X10, #8
.text:000000000001DB24                 CMP             X8, X10
.text:000000000001DB28                 B.NE            loc_1DAE8
.text:000000000001DB2C loc_1DB2C                               ; CODE XREF: KeyEventInterceptor::updateState(void)+34↑j
.text:000000000001DB2C                 CBZ             X0, loc_1DB38
.text:000000000001DB30                 STR             X0, [SP,#0x30+var_28]
.text:000000000001DB34                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001DB38 loc_1DB38                               ; CODE XREF: KeyEventInterceptor::updateState(void):loc_1DB2C↑j
.text:000000000001DB38                 LDR             X8, [X20,#0x28]
.text:000000000001DB3C                 LDR             X9, [SP,#0x30+var_18]
.text:000000000001DB40                 CMP             X8, X9
.text:000000000001DB44                 B.NE            loc_1DB58
.text:000000000001DB48                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001DB4C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000001DB50                 ADD             SP, SP, #0x40 ; '@'
.text:000000000001DB54                 RET
.text:000000000001DB58 ; ---------------------------------------------------------------------------
.text:000000000001DB58 loc_1DB58                               ; CODE XREF: KeyEventInterceptor::updateState(void)+9C↑j
.text:000000000001DB58                 BL              .__stack_chk_fail
.text:000000000001DB58 ; } // starts at 1DAA8
.text:000000000001DB58 ; End of function KeyEventInterceptor::updateState(void)
.text:000000000001DB58 ; ---------------------------------------------------------------------------
.text:000000000001DB5C                 ALIGN 0x20
.text:000000000001DB60 ; =============== S U B R O U T I N E =======================================
.text:000000000001DB60 ; __int64 __fastcall core::RenderPassInfo::RenderPassInfo(core::RenderPassInfo *__hidden this)
.text:000000000001DB60                 EXPORT _ZN4core14RenderPassInfoC2Ev
.text:000000000001DB60 _ZN4core14RenderPassInfoC2Ev            ; DATA XREF: LOAD:0000000000001170↑o
.text:000000000001DB60                                         ; LOAD:0000000000001E30↑o
.text:000000000001DB60 ; __unwind {
.text:000000000001DB60                 MOVI            V0.2D, #0
.text:000000000001DB64                 STR             WZR, [X0]
.text:000000000001DB68                 STUR            Q0, [X0,#0x28]
.text:000000000001DB6C                 STUR            Q0, [X0,#0x18]
.text:000000000001DB70                 STUR            Q0, [X0,#8]
.text:000000000001DB74                 RET
.text:000000000001DB74 ; } // starts at 1DB60
.text:000000000001DB74 ; End of function core::RenderPassInfo::RenderPassInfo(void)
.text:000000000001DB78 ; =============== S U B R O U T I N E =======================================
.text:000000000001DB78 ; Attributes: bp-based frame
.text:000000000001DB78 ; void __fastcall core::RenderPassInfo::~RenderPassInfo(core::RenderPassInfo *__hidden this)
.text:000000000001DB78                 EXPORT _ZN4core14RenderPassInfoD2Ev
.text:000000000001DB78 _ZN4core14RenderPassInfoD2Ev            ; DATA XREF: LOAD:0000000000001560↑o
.text:000000000001DB78                                         ; LOAD:0000000000001FB0↑o
.text:000000000001DB78 var_10          = -0x10
.text:000000000001DB78 var_s0          =  0
.text:000000000001DB78 ; __unwind {
.text:000000000001DB78                 STR             X19, [SP,#-0x10+var_10]! ; Alternative name is 'core::RenderPassInfo::~RenderPassInfo()'
.text:000000000001DB7C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001DB80                 ADD             X29, SP, #0x10
.text:000000000001DB84                 MOV             X19, X0
.text:000000000001DB88                 LDR             X0, [X0,#0x20] ; void *
.text:000000000001DB8C                 CBZ             X0, loc_1DB98
.text:000000000001DB90                 STR             X0, [X19,#0x28]
.text:000000000001DB94                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001DB98 loc_1DB98                               ; CODE XREF: core::RenderPassInfo::~RenderPassInfo()+14↑j
.text:000000000001DB98                 LDR             X0, [X19,#8] ; void *
.text:000000000001DB9C                 CBZ             X0, loc_1DBB0
.text:000000000001DBA0                 STR             X0, [X19,#0x10]
.text:000000000001DBA4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001DBA8                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001DBAC                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001DBB0 ; ---------------------------------------------------------------------------
.text:000000000001DBB0 loc_1DBB0                               ; CODE XREF: core::RenderPassInfo::~RenderPassInfo()+24↑j
.text:000000000001DBB0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001DBB4                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001DBB8                 RET
.text:000000000001DBB8 ; } // starts at 1DB78
.text:000000000001DBB8 ; End of function core::RenderPassInfo::~RenderPassInfo()
.text:000000000001DBB8 ; ---------------------------------------------------------------------------
.text:000000000001DBBC                 ALIGN 0x20
.text:000000000001DBC0 ; =============== S U B R O U T I N E =======================================
.text:000000000001DBC0 ; __int64 __fastcall core::RenderPassInfo::reset(core::RenderPassInfo *__hidden this)
.text:000000000001DBC0                 EXPORT _ZN4core14RenderPassInfo5resetEv
.text:000000000001DBC0 _ZN4core14RenderPassInfo5resetEv        ; DATA XREF: LOAD:0000000000001BA8↑o
.text:000000000001DBC0 ; __unwind {
.text:000000000001DBC0                 LDR             X8, [X0,#8]
.text:000000000001DBC4                 LDR             X9, [X0,#0x20]
.text:000000000001DBC8                 STR             WZR, [X0]
.text:000000000001DBCC                 STR             X8, [X0,#0x10]
.text:000000000001DBD0                 STR             X9, [X0,#0x28]
.text:000000000001DBD4                 RET
.text:000000000001DBD4 ; } // starts at 1DBC0
.text:000000000001DBD4 ; End of function core::RenderPassInfo::reset(void)
.text:000000000001DBD8 ; =============== S U B R O U T I N E =======================================
.text:000000000001DBD8 ; __int64 __fastcall core::RenderPassInfo::getRenderPassCount(core::RenderPassInfo *__hidden this)
.text:000000000001DBD8                 EXPORT _ZN4core14RenderPassInfo18getRenderPassCountEv
.text:000000000001DBD8 _ZN4core14RenderPassInfo18getRenderPassCountEv
.text:000000000001DBD8                                         ; DATA XREF: LOAD:0000000000002250↑o
.text:000000000001DBD8 ; __unwind {
.text:000000000001DBD8                 LDR             W0, [X0]
.text:000000000001DBDC                 RET
.text:000000000001DBDC ; } // starts at 1DBD8
.text:000000000001DBDC ; End of function core::RenderPassInfo::getRenderPassCount(void)
.text:000000000001DBE0 ; =============== S U B R O U T I N E =======================================
.text:000000000001DBE0 ; __int64 __fastcall core::RenderPassInfo::setRenderPassCount(core::RenderPassInfo *__hidden this, int)
.text:000000000001DBE0                 EXPORT _ZN4core14RenderPassInfo18setRenderPassCountEi
.text:000000000001DBE0 _ZN4core14RenderPassInfo18setRenderPassCountEi
.text:000000000001DBE0                                         ; DATA XREF: LOAD:0000000000000C00↑o
.text:000000000001DBE0 ; __unwind {
.text:000000000001DBE0                 STR             W1, [X0]
.text:000000000001DBE4                 RET
.text:000000000001DBE4 ; } // starts at 1DBE0
.text:000000000001DBE4 ; End of function core::RenderPassInfo::setRenderPassCount(int)
.text:000000000001DBE8 ; =============== S U B R O U T I N E =======================================
.text:000000000001DBE8 ; Attributes: bp-based frame
.text:000000000001DBE8 ; __int64 __fastcall core::RenderPassInfo::addRenderPassInfo(core::RenderPassInfo *__hidden this, unsigned int, unsigned int)
.text:000000000001DBE8                 EXPORT _ZN4core14RenderPassInfo17addRenderPassInfoEjj
.text:000000000001DBE8 _ZN4core14RenderPassInfo17addRenderPassInfoEjj
.text:000000000001DBE8                                         ; DATA XREF: LOAD:0000000000000E88↑o
.text:000000000001DBE8 var_20          = -0x20
.text:000000000001DBE8 var_1C          = -0x1C
.text:000000000001DBE8 var_18          = -0x18
.text:000000000001DBE8 var_10          = -0x10
.text:000000000001DBE8 var_s0          =  0
.text:000000000001DBE8 ; __unwind {
.text:000000000001DBE8                 SUB             SP, SP, #0x30
.text:000000000001DBEC                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001DBF0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001DBF4                 ADD             X29, SP, #0x20
.text:000000000001DBF8                 MRS             X20, #3, c13, c0, #2
.text:000000000001DBFC                 MOV             X19, X0
.text:000000000001DC00                 LDR             X8, [X20,#0x28]
.text:000000000001DC04                 STR             X8, [SP,#0x20+var_18]
.text:000000000001DC08                 LDR             W9, [X0]
.text:000000000001DC0C                 LDP             X8, X10, [X0,#0x10]
.text:000000000001DC10                 STP             W2, W1, [SP,#0x20+var_20]
.text:000000000001DC14                 ADD             W9, W9, #1
.text:000000000001DC18                 CMP             X8, X10
.text:000000000001DC1C                 STR             W9, [X0]
.text:000000000001DC20                 B.EQ            loc_1DC38
.text:000000000001DC24                 STR             W1, [X8]
.text:000000000001DC28                 LDR             X8, [X19,#0x10]
.text:000000000001DC2C                 ADD             X8, X8, #4
.text:000000000001DC30                 STR             X8, [X19,#0x10]
.text:000000000001DC34                 B               loc_1DC44
.text:000000000001DC38 ; ---------------------------------------------------------------------------
.text:000000000001DC38 loc_1DC38                               ; CODE XREF: core::RenderPassInfo::addRenderPassInfo(uint,uint)+38↑j
.text:000000000001DC38                 ADD             X0, X19, #8
.text:000000000001DC3C                 ADD             X1, SP, #0x20+var_1C
.text:000000000001DC40                 BL              loc_1DCB8
.text:000000000001DC44 loc_1DC44                               ; CODE XREF: core::RenderPassInfo::addRenderPassInfo(uint,uint)+4C↑j
.text:000000000001DC44                 LDP             X8, X9, [X19,#0x28]
.text:000000000001DC48                 CMP             X8, X9
.text:000000000001DC4C                 B.EQ            loc_1DC68
.text:000000000001DC50                 LDR             W9, [SP,#0x20+var_20]
.text:000000000001DC54                 STR             W9, [X8]
.text:000000000001DC58                 LDR             X8, [X19,#0x28]
.text:000000000001DC5C                 ADD             X8, X8, #4
.text:000000000001DC60                 STR             X8, [X19,#0x28]
.text:000000000001DC64                 B               loc_1DC74
.text:000000000001DC68 ; ---------------------------------------------------------------------------
.text:000000000001DC68 loc_1DC68                               ; CODE XREF: core::RenderPassInfo::addRenderPassInfo(uint,uint)+64↑j
.text:000000000001DC68                 ADD             X0, X19, #0x20 ; ' '
.text:000000000001DC6C                 MOV             X1, SP
.text:000000000001DC70                 BL              loc_1DCB8
.text:000000000001DC74 loc_1DC74                               ; CODE XREF: core::RenderPassInfo::addRenderPassInfo(uint,uint)+7C↑j
.text:000000000001DC74                 LDR             X8, [X20,#0x28]
.text:000000000001DC78                 LDR             X9, [SP,#0x20+var_18]
.text:000000000001DC7C                 CMP             X8, X9
.text:000000000001DC80                 B.NE            loc_1DC94
.text:000000000001DC84                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001DC88                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001DC8C                 ADD             SP, SP, #0x30 ; '0'
.text:000000000001DC90                 RET
.text:000000000001DC94 ; ---------------------------------------------------------------------------
.text:000000000001DC94 loc_1DC94                               ; CODE XREF: core::RenderPassInfo::addRenderPassInfo(uint,uint)+98↑j
.text:000000000001DC94                 BL              .__stack_chk_fail
.text:000000000001DC94 ; } // starts at 1DBE8
.text:000000000001DC94 ; End of function core::RenderPassInfo::addRenderPassInfo(uint,uint)
.text:000000000001DC98 ; =============== S U B R O U T I N E =======================================
.text:000000000001DC98 ; __int64 __fastcall core::RenderPassInfo::getDrawCallCount(core::RenderPassInfo *__hidden this, int)
.text:000000000001DC98                 EXPORT _ZN4core14RenderPassInfo16getDrawCallCountEi
.text:000000000001DC98 _ZN4core14RenderPassInfo16getDrawCallCountEi
.text:000000000001DC98                                         ; DATA XREF: LOAD:0000000000000C48↑o
.text:000000000001DC98 ; __unwind {
.text:000000000001DC98                 LDR             X8, [X0,#8]
.text:000000000001DC9C                 LDR             W0, [X8,W1,SXTW#2]
.text:000000000001DCA0                 RET
.text:000000000001DCA0 ; } // starts at 1DC98
.text:000000000001DCA0 ; End of function core::RenderPassInfo::getDrawCallCount(int)
.text:000000000001DCA0 ; ---------------------------------------------------------------------------
.text:000000000001DCA4                 ALIGN 8
.text:000000000001DCA8 ; =============== S U B R O U T I N E =======================================
.text:000000000001DCA8 ; __int64 __fastcall core::RenderPassInfo::getPayloadCount(core::RenderPassInfo *__hidden this, int)
.text:000000000001DCA8                 EXPORT _ZN4core14RenderPassInfo15getPayloadCountEi
.text:000000000001DCA8 _ZN4core14RenderPassInfo15getPayloadCountEi
.text:000000000001DCA8                                         ; DATA XREF: LOAD:00000000000022F8↑o
.text:000000000001DCA8 ; __unwind {
.text:000000000001DCA8                 LDR             X8, [X0,#0x20]
.text:000000000001DCAC                 LDR             W0, [X8,W1,SXTW#2]
.text:000000000001DCB0                 RET
.text:000000000001DCB0 ; } // starts at 1DCA8
.text:000000000001DCB0 ; End of function core::RenderPassInfo::getPayloadCount(int)
.text:000000000001DCB0 ; ---------------------------------------------------------------------------
.text:000000000001DCB4                 ALIGN 8
.text:000000000001DCB8 loc_1DCB8                               ; CODE XREF: core::RenderPassInfo::addRenderPassInfo(uint,uint)+58↑p
.text:000000000001DCB8                                         ; core::RenderPassInfo::addRenderPassInfo(uint,uint)+88↑p ...
.text:000000000001DCB8 ; __unwind {
.text:000000000001DCB8                 STR             X25, [SP,#-0x50]!
.text:000000000001DCBC                 STP             X24, X23, [SP,#0x10]
.text:000000000001DCC0                 STP             X22, X21, [SP,#0x20]
.text:000000000001DCC4                 STP             X20, X19, [SP,#0x30]
.text:000000000001DCC8                 STP             X29, X30, [SP,#0x40]
.text:000000000001DCCC                 ADD             X29, SP, #0x40 ; '@'
.text:000000000001DCD0                 LDP             X20, X8, [X0]
.text:000000000001DCD4                 MOV             X19, X0
.text:000000000001DCD8                 SUB             X21, X8, X20
.text:000000000001DCDC                 ASR             X24, X21, #2
.text:000000000001DCE0                 ADD             X8, X24, #1
.text:000000000001DCE4                 LSR             X9, X8, #0x3E ; '>'
.text:000000000001DCE8                 CBNZ            X9, loc_1DDA4
.text:000000000001DCEC                 LDR             X9, [X19,#0x10]
.text:000000000001DCF0                 MOV             X22, X1
.text:000000000001DCF4                 MOV             X10, #0x1FFFFFFFFFFFFFFE
.text:000000000001DCF8                 SUB             X9, X9, X20
.text:000000000001DCFC                 CMP             X10, X9,ASR#2
.text:000000000001DD00                 B.CC            loc_1DD20
.text:000000000001DD04                 ASR             X9, X9, #1
.text:000000000001DD08                 CMP             X9, X8
.text:000000000001DD0C                 CSEL            X25, X8, X9, CC
.text:000000000001DD10                 CBZ             X25, loc_1DD9C
.text:000000000001DD14                 LSR             X8, X25, #0x3E ; '>'
.text:000000000001DD18                 CBZ             X8, loc_1DD24
.text:000000000001DD1C                 BL              .abort
.text:000000000001DD20 ; ---------------------------------------------------------------------------
.text:000000000001DD20 loc_1DD20                               ; CODE XREF: .text:000000000001DD00↑j
.text:000000000001DD20                 MOV             X25, #0x3FFFFFFFFFFFFFFF
.text:000000000001DD24 loc_1DD24                               ; CODE XREF: .text:000000000001DD18↑j
.text:000000000001DD24                 LSL             X0, X25, #2
.text:000000000001DD28                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001DD2C                 MOV             X23, X0
.text:000000000001DD30 loc_1DD30                               ; CODE XREF: .text:000000000001DDA0↓j
.text:000000000001DD30                 LDR             W8, [X22]
.text:000000000001DD34                 ADD             X22, X23, X24,LSL#2
.text:000000000001DD38                 ADD             X24, X23, X25,LSL#2
.text:000000000001DD3C                 CMP             X21, #1
.text:000000000001DD40                 STR             W8, [X22],#4
.text:000000000001DD44                 B.LT            loc_1DD5C
.text:000000000001DD48                 MOV             X0, X23
.text:000000000001DD4C                 MOV             X1, X20
.text:000000000001DD50                 MOV             X2, X21
.text:000000000001DD54                 BL              .memcpy
.text:000000000001DD58                 LDR             X20, [X19]
.text:000000000001DD5C loc_1DD5C                               ; CODE XREF: .text:000000000001DD44↑j
.text:000000000001DD5C                 STP             X23, X22, [X19]
.text:000000000001DD60                 STR             X24, [X19,#0x10]
.text:000000000001DD64                 CBZ             X20, loc_1DD84
.text:000000000001DD68                 MOV             X0, X20
.text:000000000001DD6C                 LDP             X29, X30, [SP,#0x40]
.text:000000000001DD70                 LDP             X20, X19, [SP,#0x30]
.text:000000000001DD74                 LDP             X22, X21, [SP,#0x20]
.text:000000000001DD78                 LDP             X24, X23, [SP,#0x10]
.text:000000000001DD7C                 LDR             X25, [SP],#0x50
.text:000000000001DD80                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001DD84 ; ---------------------------------------------------------------------------
.text:000000000001DD84 loc_1DD84                               ; CODE XREF: .text:000000000001DD64↑j
.text:000000000001DD84                 LDP             X29, X30, [SP,#0x40]
.text:000000000001DD88                 LDP             X20, X19, [SP,#0x30]
.text:000000000001DD8C                 LDP             X22, X21, [SP,#0x20]
.text:000000000001DD90                 LDP             X24, X23, [SP,#0x10]
.text:000000000001DD94                 LDR             X25, [SP],#0x50
.text:000000000001DD98                 RET
.text:000000000001DD9C ; ---------------------------------------------------------------------------
.text:000000000001DD9C loc_1DD9C                               ; CODE XREF: .text:000000000001DD10↑j
.text:000000000001DD9C                 MOV             X23, XZR
.text:000000000001DDA0                 B               loc_1DD30
.text:000000000001DDA4 ; ---------------------------------------------------------------------------
.text:000000000001DDA4 loc_1DDA4                               ; CODE XREF: .text:000000000001DCE8↑j
.text:000000000001DDA4                 MOV             X0, X19
.text:000000000001DDA8                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:000000000001DDA8 ; } // starts at 1DCB8
.text:000000000001DDA8 ; ---------------------------------------------------------------------------
.text:000000000001DDAC                 DCD 0
.text:000000000001DDB0 ; =============== S U B R O U T I N E =======================================
.text:000000000001DDB0 ; __int64 __fastcall core::StateInfo::StateInfo(core::StateInfo *__hidden this)
.text:000000000001DDB0                 EXPORT _ZN4core9StateInfoC2Ev
.text:000000000001DDB0 _ZN4core9StateInfoC2Ev                  ; DATA XREF: LOAD:0000000000001830↑o
.text:000000000001DDB0                                         ; LOAD:0000000000002310↑o
.text:000000000001DDB0 ; __unwind {
.text:000000000001DDB0                 B               ._ZN4core9StateInfo4initEv ; Alternative name is 'core::StateInfo::StateInfo(void)'
.text:000000000001DDB0 ; } // starts at 1DDB0
.text:000000000001DDB0 ; End of function core::StateInfo::StateInfo(void)
.text:000000000001DDB0 ; ---------------------------------------------------------------------------
.text:000000000001DDB4                 ALIGN 8
.text:000000000001DDB8 ; =============== S U B R O U T I N E =======================================
.text:000000000001DDB8 ; Attributes: bp-based frame
.text:000000000001DDB8 ; _QWORD core::StateInfo::init(core::StateInfo *__hidden this)
.text:000000000001DDB8                 EXPORT _ZN4core9StateInfo4initEv
.text:000000000001DDB8 _ZN4core9StateInfo4initEv               ; CODE XREF: core::StateInfo::init(void)+C↓j
.text:000000000001DDB8                                         ; DATA XREF: LOAD:0000000000001350↑o ...
.text:000000000001DDB8 haystack        = -0x6C
.text:000000000001DDB8 var_3B          = -0x3B
.text:000000000001DDB8 var_38          = -0x38
.text:000000000001DDB8 var_30          = -0x30
.text:000000000001DDB8 var_20          = -0x20
.text:000000000001DDB8 var_10          = -0x10
.text:000000000001DDB8 var_s0          =  0
.text:000000000001DDB8 ; __unwind {
.text:000000000001DDB8                 SUB             SP, SP, #0x80
.text:000000000001DDBC                 STR             X23, [SP,#0x70+var_30]
.text:000000000001DDC0                 STP             X22, X21, [SP,#0x70+var_20]
.text:000000000001DDC4                 STP             X20, X19, [SP,#0x70+var_10]
.text:000000000001DDC8                 STP             X29, X30, [SP,#0x70+var_s0]
.text:000000000001DDCC                 ADD             X29, SP, #0x70
.text:000000000001DDD0                 MRS             X20, #3, c13, c0, #2
.text:000000000001DDD4                 ADRP            X9, #_ZN5utils11deviceModelE_ptr@PAGE
.text:000000000001DDD8                 LDR             X8, [X20,#0x28]
.text:000000000001DDDC                 MOV             W10, #0x42700000
.text:000000000001DDE0                 MOV             W2, #0x2778 ; n
.text:000000000001DDE4                 LDR             X9, [X9,#_ZN5utils11deviceModelE_ptr@PAGEOFF]
.text:000000000001DDE8                 MOV             W1, WZR ; c
.text:000000000001DDEC                 FMOV            S0, W10
.text:000000000001DDF0                 STR             X8, [SP,#0x70+var_38]
.text:000000000001DDF4                 MOV             W8, #0x42F00000
.text:000000000001DDF8                 LDR             W9, [X9] ; utils::deviceModel
.text:000000000001DDFC                 FMOV            S1, W8
.text:000000000001DE00                 ADD             X8, X0, #0x18
.text:000000000001DE04                 STR             XZR, [X0,#8]
.text:000000000001DE08                 STR             WZR, [X0,#0x10]
.text:000000000001DE0C                 CMP             W9, #6
.text:000000000001DE10                 FCSEL           S0, S1, S0, EQ
.text:000000000001DE14                 STR             S0, [X0]
.text:000000000001DE18                 MOV             X0, X8  ; s
.text:000000000001DE1C                 BL              .memset
.text:000000000001DE20                 BL              ._ZN4core9StateInfo17checkGPUClockUnitEv ; core::StateInfo::checkGPUClockUnit(void)
.text:000000000001DE24                 ADRP            X21, #dword_2F010@PAGE
.text:000000000001DE28                 LDR             W8, [X21,#dword_2F010@PAGEOFF]
.text:000000000001DE2C                 CMP             W8, #2
.text:000000000001DE30                 B.NE            loc_1DF58
.text:000000000001DE34                 ADRP            X0, #aSysKernelGpuGp@PAGE ; "/sys/kernel/gpu/gpu_model"
.text:000000000001DE38                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001DE3C                 ADD             X0, X0, #aSysKernelGpuGp@PAGEOFF ; "/sys/kernel/gpu/gpu_model"
.text:000000000001DE40                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001DE44                 BL              .fopen
.text:000000000001DE48                 CBZ             X0, loc_1DED4
.text:000000000001DE4C                 ADRP            X1, #aS@PAGE ; "%[^\n]s"
.text:000000000001DE50                 ADD             X1, X1, #aS@PAGEOFF ; "%[^\n]s"
.text:000000000001DE54                 ADD             X2, SP, #0x70+haystack
.text:000000000001DE58                 MOV             X19, X0
.text:000000000001DE5C                 ADD             X22, SP, #0x70+haystack
.text:000000000001DE60                 BL              .fscanf
.text:000000000001DE64                 MOV             X0, X19 ; stream
.text:000000000001DE68                 BL              .fclose
.text:000000000001DE6C                 MOV             W1, #0x32 ; '2'
.text:000000000001DE70                 STRB            WZR, [SP,#0x70+var_3B]
.text:000000000001DE74                 ADD             X0, SP, #0x70+haystack
.text:000000000001DE78                 BL              .__strlen_chk
.text:000000000001DE7C                 CBZ             X0, loc_1DEB8
.text:000000000001DE80                 MOV             X23, XZR
.text:000000000001DE84                 MOV             W19, #0x32 ; '2'
.text:000000000001DE88 loc_1DE88                               ; CODE XREF: core::StateInfo::init(void)+FC↓j
.text:000000000001DE88                 LDRB            W8, [X22,X23]
.text:000000000001DE8C                 SUB             W9, W8, #0x61 ; 'a'
.text:000000000001DE90                 CMP             W9, #0x19
.text:000000000001DE94                 B.HI            loc_1DEA0
.text:000000000001DE98                 SUB             W8, W8, #0x20 ; ' '
.text:000000000001DE9C                 STRB            W8, [X22,X23]
.text:000000000001DEA0 loc_1DEA0                               ; CODE XREF: core::StateInfo::init(void)+DC↑j
.text:000000000001DEA0                 ADD             X0, SP, #0x70+haystack
.text:000000000001DEA4                 MOV             X1, X19
.text:000000000001DEA8                 ADD             X23, X23, #1
.text:000000000001DEAC                 BL              .__strlen_chk
.text:000000000001DEB0                 CMP             X23, X0
.text:000000000001DEB4                 B.CC            loc_1DE88
.text:000000000001DEB8 loc_1DEB8                               ; CODE XREF: core::StateInfo::init(void)+C4↑j
.text:000000000001DEB8                 ADRP            X1, #aMali@PAGE ; "MALI"
.text:000000000001DEBC                 ADD             X1, X1, #aMali@PAGEOFF ; "MALI"
.text:000000000001DEC0                 ADD             X0, SP, #0x70+haystack ; haystack
.text:000000000001DEC4                 BL              .strstr
.text:000000000001DEC8                 CBZ             X0, loc_1DF38
.text:000000000001DECC                 MOV             W8, WZR
.text:000000000001DED0                 B               loc_1DF54
.text:000000000001DED4 ; ---------------------------------------------------------------------------
.text:000000000001DED4 loc_1DED4                               ; CODE XREF: core::StateInfo::init(void)+90↑j
.text:000000000001DED4                 ADRP            X19, #aFrameworksBase_0@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001DED8                 ADD             X19, X19, #aFrameworksBase_0@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001DEDC                 MOV             W1, #0x2F ; '/'
.text:000000000001DEE0                 MOV             W2, #0x4A ; 'J'
.text:000000000001DEE4                 MOV             X0, X19
.text:000000000001DEE8                 BL              .__strrchr_chk
.text:000000000001DEEC                 CBZ             X0, loc_1DF08
.text:000000000001DEF0                 ADRP            X0, #aFrameworksBase_0@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001DEF4                 ADD             X0, X0, #aFrameworksBase_0@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001DEF8                 MOV             W1, #0x2F ; '/'
.text:000000000001DEFC                 MOV             W2, #0x4A ; 'J'
.text:000000000001DF00                 BL              .__strrchr_chk
.text:000000000001DF04                 ADD             X19, X0, #1
.text:000000000001DF08 loc_1DF08                               ; CODE XREF: core::StateInfo::init(void)+134↑j
.text:000000000001DF08                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:000000000001DF0C                 ADRP            X2, #aSSDFailToReadV@PAGE ; "%s:%s(%d) Fail to read Vendor"
.text:000000000001DF10                 ADRP            X4, #aCheckvendor@PAGE ; "checkVendor"
.text:000000000001DF14                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:000000000001DF18                 ADD             X2, X2, #aSSDFailToReadV@PAGEOFF ; "%s:%s(%d) Fail to read Vendor"
.text:000000000001DF1C                 ADD             X4, X4, #aCheckvendor@PAGEOFF ; "checkVendor"
.text:000000000001DF20                 MOV             W0, #6
.text:000000000001DF24                 MOV             X3, X19
.text:000000000001DF28                 MOV             W5, #0x40 ; '@'
.text:000000000001DF2C                 BL              .__android_log_print
.text:000000000001DF30                 MOV             W8, #2
.text:000000000001DF34                 B               loc_1DF58
.text:000000000001DF38 ; ---------------------------------------------------------------------------
.text:000000000001DF38 loc_1DF38                               ; CODE XREF: core::StateInfo::init(void)+110↑j
.text:000000000001DF38                 ADRP            X1, #aAdreno@PAGE ; "ADRENO"
.text:000000000001DF3C                 ADD             X1, X1, #aAdreno@PAGEOFF ; "ADRENO"
.text:000000000001DF40                 ADD             X0, SP, #0x70+haystack ; haystack
.text:000000000001DF44                 BL              .strstr
.text:000000000001DF48                 CMP             X0, #0
.text:000000000001DF4C                 MOV             W8, #1
.text:000000000001DF50                 CINC            W8, W8, EQ
.text:000000000001DF54 loc_1DF54                               ; CODE XREF: core::StateInfo::init(void)+118↑j
.text:000000000001DF54                 STR             W8, [X21,#dword_2F010@PAGEOFF]
.text:000000000001DF58 loc_1DF58                               ; CODE XREF: core::StateInfo::init(void)+78↑j
.text:000000000001DF58                                         ; core::StateInfo::init(void)+17C↑j
.text:000000000001DF58                 ADRP            X9, #_ZN4core9StateInfo7mVendorE_ptr@PAGE
.text:000000000001DF5C                 LDR             X9, [X9,#_ZN4core9StateInfo7mVendorE_ptr@PAGEOFF]
.text:000000000001DF60                 STR             W8, [X9] ; core::StateInfo::mVendor
.text:000000000001DF64                 LDR             X8, [X20,#0x28]
.text:000000000001DF68                 LDR             X9, [SP,#0x70+var_38]
.text:000000000001DF6C                 CMP             X8, X9
.text:000000000001DF70                 B.NE            loc_1DF8C
.text:000000000001DF74                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:000000000001DF78                 LDP             X20, X19, [SP,#0x70+var_10]
.text:000000000001DF7C                 LDP             X22, X21, [SP,#0x70+var_20]
.text:000000000001DF80                 LDR             X23, [SP,#0x70+var_30]
.text:000000000001DF84                 ADD             SP, SP, #0x80
.text:000000000001DF88                 RET
.text:000000000001DF8C ; ---------------------------------------------------------------------------
.text:000000000001DF8C loc_1DF8C                               ; CODE XREF: core::StateInfo::init(void)+1B8↑j
.text:000000000001DF8C                 BL              .__stack_chk_fail
.text:000000000001DF8C ; } // starts at 1DDB8
.text:000000000001DF8C ; End of function core::StateInfo::init(void)
.text:000000000001DF90 ; =============== S U B R O U T I N E =======================================
.text:000000000001DF90 ; void __fastcall core::StateInfo::~StateInfo(core::StateInfo *__hidden this)
.text:000000000001DF90                 EXPORT _ZN4core9StateInfoD2Ev
.text:000000000001DF90 _ZN4core9StateInfoD2Ev                  ; DATA XREF: LOAD:0000000000001080↑o
.text:000000000001DF90                                         ; LOAD:0000000000001908↑o
.text:000000000001DF90 ; __unwind {
.text:000000000001DF90                 RET                     ; Alternative name is 'core::StateInfo::~StateInfo()'
.text:000000000001DF90 ; } // starts at 1DF90
.text:000000000001DF90 ; End of function core::StateInfo::~StateInfo()
.text:000000000001DF90 ; ---------------------------------------------------------------------------
.text:000000000001DF94                 ALIGN 8
.text:000000000001DF98 ; =============== S U B R O U T I N E =======================================
.text:000000000001DF98 ; Attributes: bp-based frame
.text:000000000001DF98 ; _QWORD core::StateInfo::resetFps(core::StateInfo *__hidden this)
.text:000000000001DF98                 EXPORT _ZN4core9StateInfo8resetFpsEv
.text:000000000001DF98 _ZN4core9StateInfo8resetFpsEv           ; DATA XREF: LOAD:0000000000001188↑o
.text:000000000001DF98 var_s0          =  0
.text:000000000001DF98 ; __unwind {
.text:000000000001DF98                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000001DF9C                 MOV             X29, SP
.text:000000000001DFA0                 ADD             X8, X0, #0x18
.text:000000000001DFA4                 STR             XZR, [X0,#8]
.text:000000000001DFA8                 STR             WZR, [X0,#0x10]
.text:000000000001DFAC                 MOV             W2, #0x2728 ; n
.text:000000000001DFB0                 MOV             X0, X8  ; s
.text:000000000001DFB4                 MOV             W1, WZR ; c
.text:000000000001DFB8                 BL              .memset
.text:000000000001DFBC                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000001DFC0                 RET
.text:000000000001DFC0 ; } // starts at 1DF98
.text:000000000001DFC0 ; End of function core::StateInfo::resetFps(void)
.text:000000000001DFC0 ; ---------------------------------------------------------------------------
.text:000000000001DFC4                 ALIGN 8
.text:000000000001DFC8 ; =============== S U B R O U T I N E =======================================
.text:000000000001DFC8 ; Attributes: bp-based frame
.text:000000000001DFC8 ; __int64 __fastcall core::StateInfo::checkGPUClockUnit(core::StateInfo *__hidden this)
.text:000000000001DFC8                 EXPORT _ZN4core9StateInfo17checkGPUClockUnitEv
.text:000000000001DFC8 _ZN4core9StateInfo17checkGPUClockUnitEv ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+C↓j
.text:000000000001DFC8                                         ; DATA XREF: LOAD:0000000000000EB8↑o ...
.text:000000000001DFC8 var_40          = -0x40
.text:000000000001DFC8 var_38          = -0x38
.text:000000000001DFC8 var_30          = -0x30
.text:000000000001DFC8 var_20          = -0x20
.text:000000000001DFC8 var_10          = -0x10
.text:000000000001DFC8 var_s0          =  0
.text:000000000001DFC8 ; __unwind {
.text:000000000001DFC8                 SUB             SP, SP, #0x50
.text:000000000001DFCC                 STR             X23, [SP,#0x40+var_30]
.text:000000000001DFD0                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000001DFD4                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000001DFD8                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001DFDC                 ADD             X29, SP, #0x40
.text:000000000001DFE0                 MRS             X21, #3, c13, c0, #2
.text:000000000001DFE4                 ADRP            X22, #byte_31105@PAGE
.text:000000000001DFE8                 LDR             X8, [X21,#0x28]
.text:000000000001DFEC                 STR             X8, [SP,#0x40+var_38]
.text:000000000001DFF0                 LDRB            W8, [X22,#byte_31105@PAGEOFF]
.text:000000000001DFF4                 TBZ             W8, #0, loc_1E000
.text:000000000001DFF8                 MOV             W0, #1
.text:000000000001DFFC                 B               loc_1E0C0
.text:000000000001E000 ; ---------------------------------------------------------------------------
.text:000000000001E000 loc_1E000                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+2C↑j
.text:000000000001E000                 ADRP            X0, #aSysKernelGpuGp_0@PAGE ; "/sys/kernel/gpu/gpu_freq_table"
.text:000000000001E004                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001E008                 ADD             X0, X0, #aSysKernelGpuGp_0@PAGEOFF ; "/sys/kernel/gpu/gpu_freq_table"
.text:000000000001E00C                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001E010                 BL              .fopen
.text:000000000001E014                 CBZ             X0, loc_1E068
.text:000000000001E018                 ADRP            X1, #aZu@PAGE ; "%zu "
.text:000000000001E01C                 ADD             X1, X1, #aZu@PAGEOFF ; "%zu "
.text:000000000001E020                 MOV             X2, SP
.text:000000000001E024                 MOV             X19, X0
.text:000000000001E028                 BL              .fscanf
.text:000000000001E02C                 CMN             W0, #1
.text:000000000001E030                 B.EQ            loc_1E070
.text:000000000001E034                 ADRP            X20, #aZu@PAGE ; "%zu "
.text:000000000001E038                 MOV             X23, XZR
.text:000000000001E03C                 ADD             X20, X20, #aZu@PAGEOFF ; "%zu "
.text:000000000001E040 loc_1E040                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+98↓j
.text:000000000001E040                 LDR             X8, [SP,#0x40+var_40]
.text:000000000001E044                 MOV             X2, SP
.text:000000000001E048                 MOV             X0, X19 ; stream
.text:000000000001E04C                 MOV             X1, X20 ; format
.text:000000000001E050                 CMP             X8, X23
.text:000000000001E054                 CSEL            X23, X8, X23, HI
.text:000000000001E058                 BL              .fscanf
.text:000000000001E05C                 CMN             W0, #1
.text:000000000001E060                 B.NE            loc_1E040
.text:000000000001E064                 B               loc_1E074
.text:000000000001E068 ; ---------------------------------------------------------------------------
.text:000000000001E068 loc_1E068                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+4C↑j
.text:000000000001E068                 LDRB            W0, [X22,#byte_31105@PAGEOFF]
.text:000000000001E06C                 B               loc_1E0C0
.text:000000000001E070 ; ---------------------------------------------------------------------------
.text:000000000001E070 loc_1E070                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+68↑j
.text:000000000001E070                 MOV             X23, XZR
.text:000000000001E074 loc_1E074                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+9C↑j
.text:000000000001E074                 MOV             X0, X19 ; stream
.text:000000000001E078                 BL              .fclose
.text:000000000001E07C                 ADRP            X8, #_ZN4core9StateInfo12mMaxGpuClockE_ptr@PAGE
.text:000000000001E080                 UCVTF           S0, X23
.text:000000000001E084                 MOV             W9, #0x2711
.text:000000000001E088                 CMP             X23, X9
.text:000000000001E08C                 LDR             X8, [X8,#_ZN4core9StateInfo12mMaxGpuClockE_ptr@PAGEOFF]
.text:000000000001E090                 STR             S0, [X8] ; core::StateInfo::mMaxGpuClock
.text:000000000001E094                 B.CC            loc_1E0B8
.text:000000000001E098                 MOV             W9, #0x447A0000
.text:000000000001E09C                 MOV             W10, #1
.text:000000000001E0A0                 FMOV            S1, W9
.text:000000000001E0A4                 ADRP            X9, #_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGE
.text:000000000001E0A8                 LDR             X9, [X9,#_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGEOFF]
.text:000000000001E0AC                 FDIV            S0, S0, S1
.text:000000000001E0B0                 STRB            W10, [X9] ; core::StateInfo::mIsGpuClockKHz
.text:000000000001E0B4                 STR             S0, [X8] ; core::StateInfo::mMaxGpuClock
.text:000000000001E0B8 loc_1E0B8                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+CC↑j
.text:000000000001E0B8                 MOV             W0, #1
.text:000000000001E0BC                 STRB            W0, [X22,#byte_31105@PAGEOFF]
.text:000000000001E0C0 loc_1E0C0                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+34↑j
.text:000000000001E0C0                                         ; core::StateInfo::checkGPUClockUnit(void)+A4↑j
.text:000000000001E0C0                 LDR             X8, [X21,#0x28]
.text:000000000001E0C4                 LDR             X9, [SP,#0x40+var_38]
.text:000000000001E0C8                 CMP             X8, X9
.text:000000000001E0CC                 B.NE            loc_1E0E8
.text:000000000001E0D0                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001E0D4                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000001E0D8                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000001E0DC                 LDR             X23, [SP,#0x40+var_30]
.text:000000000001E0E0                 ADD             SP, SP, #0x50 ; 'P'
.text:000000000001E0E4                 RET
.text:000000000001E0E8 ; ---------------------------------------------------------------------------
.text:000000000001E0E8 loc_1E0E8                               ; CODE XREF: core::StateInfo::checkGPUClockUnit(void)+104↑j
.text:000000000001E0E8                 BL              .__stack_chk_fail
.text:000000000001E0E8 ; } // starts at 1DFC8
.text:000000000001E0E8 ; End of function core::StateInfo::checkGPUClockUnit(void)
.text:000000000001E0E8 ; ---------------------------------------------------------------------------
.text:000000000001E0EC                 ALIGN 0x10
.text:000000000001E0F0 ; =============== S U B R O U T I N E =======================================
.text:000000000001E0F0 ; Attributes: bp-based frame
.text:000000000001E0F0 ; _QWORD __fastcall core::StateInfo::getFPS(core::StateInfo *__hidden this, unsigned __int64, double)
.text:000000000001E0F0                 EXPORT _ZN4core9StateInfo6getFPSEmd
.text:000000000001E0F0 _ZN4core9StateInfo6getFPSEmd            ; DATA XREF: LOAD:0000000000001650↑o
.text:000000000001E0F0 var_20          = -0x20
.text:000000000001E0F0 var_10          = -0x10
.text:000000000001E0F0 var_s0          =  0
.text:000000000001E0F0 ; __unwind {
.text:000000000001E0F0                 STR             D8, [SP,#-0x10+var_20]!
.text:000000000001E0F4                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001E0F8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001E0FC                 ADD             X29, SP, #0x20
.text:000000000001E100                 ADRP            X8, #_ZN4core9StateInfo17mIsNeedToResetFpsE_ptr@PAGE
.text:000000000001E104                 MOV             V8.16B, V0.16B
.text:000000000001E108                 MOV             X20, X1
.text:000000000001E10C                 MOV             X19, X0
.text:000000000001E110                 LDR             X8, [X8,#_ZN4core9StateInfo17mIsNeedToResetFpsE_ptr@PAGEOFF]
.text:000000000001E114                 LDRB            W9, [X8] ; core::StateInfo::mIsNeedToResetFps
.text:000000000001E118                 CBZ             W9, loc_1E138
.text:000000000001E11C                 ADD             X0, X19, #0x18 ; s
.text:000000000001E120                 STRB            WZR, [X8] ; core::StateInfo::mIsNeedToResetFps
.text:000000000001E124                 MOV             W2, #0x2728 ; n
.text:000000000001E128                 STR             XZR, [X19,#8]
.text:000000000001E12C                 MOV             W1, WZR ; c
.text:000000000001E130                 STR             WZR, [X19,#0x10]
.text:000000000001E134                 BL              .memset
.text:000000000001E138 loc_1E138                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+28↑j
.text:000000000001E138                 FCMP            D8, #0.0
.text:000000000001E13C                 B.LS            loc_1E1B4
.text:000000000001E140                 ADRP            X8, #qword_7928@PAGE
.text:000000000001E144                 UCVTF           D0, X20
.text:000000000001E148                 LDR             X11, [X19,#8]
.text:000000000001E14C                 ADRP            X9, #byte_31104@PAGE
.text:000000000001E150                 LDR             D1, [X8,#qword_7928@PAGEOFF]
.text:000000000001E154                 ADRP            X8, #dword_31100@PAGE
.text:000000000001E158                 LDRB            W12, [X9,#byte_31104@PAGEOFF]
.text:000000000001E15C                 ADD             X13, X11, #1
.text:000000000001E160                 LDRSW           X10, [X8,#dword_31100@PAGEOFF]
.text:000000000001E164                 FMUL            D0, D0, D1
.text:000000000001E168                 LDR             S1, [X19,#0x10]
.text:000000000001E16C                 CMP             W12, #1
.text:000000000001E170                 STR             X13, [X19,#8]
.text:000000000001E174                 ADD             X11, X19, X10,LSL#2
.text:000000000001E178                 ADD             X11, X11, #0x24 ; '$'
.text:000000000001E17C                 FDIV            D0, D0, D8
.text:000000000001E180                 FCVT            S0, D0
.text:000000000001E184                 FADD            S1, S1, S0
.text:000000000001E188                 STR             S1, [X19,#0x10]
.text:000000000001E18C                 B.NE            loc_1E1BC
.text:000000000001E190                 LDR             S1, [X11]
.text:000000000001E194                 MOV             W12, #0x64 ; 'd'
.text:000000000001E198                 LDR             S2, [X19,#0x20]
.text:000000000001E19C                 FSUB            S1, S2, S1
.text:000000000001E1A0                 FADD            S1, S1, S0
.text:000000000001E1A4                 STR             S1, [X19,#0x20]
.text:000000000001E1A8                 STR             S0, [X11]
.text:000000000001E1AC                 STR             X12, [X19,#0x18]
.text:000000000001E1B0                 B               loc_1E1D8
.text:000000000001E1B4 ; ---------------------------------------------------------------------------
.text:000000000001E1B4 loc_1E1B4                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+4C↑j
.text:000000000001E1B4                 FMOV            S0, WZR
.text:000000000001E1B8                 B               loc_1E2A0
.text:000000000001E1BC ; ---------------------------------------------------------------------------
.text:000000000001E1BC loc_1E1BC                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+9C↑j
.text:000000000001E1BC                 STR             S0, [X11]
.text:000000000001E1C0                 LDR             S1, [X19,#0x20]
.text:000000000001E1C4                 LDR             X11, [X19,#0x18]
.text:000000000001E1C8                 FADD            S1, S1, S0
.text:000000000001E1CC                 ADD             X11, X11, #1
.text:000000000001E1D0                 STR             X11, [X19,#0x18]
.text:000000000001E1D4                 STR             S1, [X19,#0x20]
.text:000000000001E1D8 loc_1E1D8                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+C0↑j
.text:000000000001E1D8                 FMOV            S1, #10.0
.text:000000000001E1DC                 LDR             X13, [X19,#8]
.text:000000000001E1E0                 MOV             W15, #0x4B0
.text:000000000001E1E4                 MOV             X11, XZR
.text:000000000001E1E8                 MOV             X12, XZR
.text:000000000001E1EC                 UCVTF           S2, X13
.text:000000000001E1F0                 FMUL            S1, S0, S1
.text:000000000001E1F4                 FCVTAS          W14, S1
.text:000000000001E1F8                 FMOV            S1, #0.5
.text:000000000001E1FC                 CMP             W14, #0x4B0
.text:000000000001E200                 CSEL            W14, W14, W15, LT
.text:000000000001E204                 FMUL            S2, S2, S1
.text:000000000001E208                 ADD             X15, X19, #0x1B8
.text:000000000001E20C                 BIC             W14, W14, W14,ASR#31
.text:000000000001E210                 LSL             X17, X14, #3
.text:000000000001E214                 LDR             X16, [X15,X17]
.text:000000000001E218                 FCVTZU          X14, S2
.text:000000000001E21C                 ADD             X0, X16, #1
.text:000000000001E220                 MOV             X16, XZR
.text:000000000001E224                 STR             X0, [X15,X17]
.text:000000000001E228 loc_1E228                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+15C↓j
.text:000000000001E228                 LDR             X0, [X15,X11,LSL#3]
.text:000000000001E22C                 ADD             X17, X0, X16
.text:000000000001E230                 CMP             X17, X14
.text:000000000001E234                 B.HI            loc_1E254
.text:000000000001E238                 CMP             X0, #0
.text:000000000001E23C                 CSEL            X12, X12, X11, EQ
.text:000000000001E240                 ADD             X11, X11, #1
.text:000000000001E244                 MOV             X16, X17
.text:000000000001E248                 CMP             X11, #0x4B1
.text:000000000001E24C                 B.CC            loc_1E228
.text:000000000001E250                 B               loc_1E278
.text:000000000001E254 ; ---------------------------------------------------------------------------
.text:000000000001E254 loc_1E254                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+144↑j
.text:000000000001E254                 TBNZ            W13, #0, loc_1E270
.text:000000000001E258                 CMP             X16, X14
.text:000000000001E25C                 B.NE            loc_1E270
.text:000000000001E260                 ADD             X11, X12, X11
.text:000000000001E264                 UCVTF           S2, X11
.text:000000000001E268                 FMUL            S1, S2, S1
.text:000000000001E26C                 B               loc_1E274
.text:000000000001E270 ; ---------------------------------------------------------------------------
.text:000000000001E270 loc_1E270                               ; CODE XREF: core::StateInfo::getFPS(ulong,double):loc_1E254↑j
.text:000000000001E270                                         ; core::StateInfo::getFPS(ulong,double)+16C↑j
.text:000000000001E270                 SCVTF           S1, W11
.text:000000000001E274 loc_1E274                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+17C↑j
.text:000000000001E274                 STR             S1, [X19,#0x1B4]
.text:000000000001E278 loc_1E278                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+160↑j
.text:000000000001E278                 ADD             W11, W10, #1
.text:000000000001E27C                 CMP             W10, #0x63 ; 'c'
.text:000000000001E280                 STR             W11, [X8,#dword_31100@PAGEOFF]
.text:000000000001E284                 B.LT            loc_1E294
.text:000000000001E288                 MOV             W10, #1
.text:000000000001E28C                 STR             WZR, [X8,#dword_31100@PAGEOFF]
.text:000000000001E290                 STRB            W10, [X9,#byte_31104@PAGEOFF]
.text:000000000001E294 loc_1E294                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+194↑j
.text:000000000001E294                 LDR             S1, [X19]
.text:000000000001E298                 FCMP            S1, S0
.text:000000000001E29C                 FCSEL           S0, S1, S0, MI
.text:000000000001E2A0 loc_1E2A0                               ; CODE XREF: core::StateInfo::getFPS(ulong,double)+C8↑j
.text:000000000001E2A0                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001E2A4                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001E2A8                 LDR             D8, [SP+0x20+var_20],#0x30
.text:000000000001E2AC                 RET
.text:000000000001E2AC ; } // starts at 1E0F0
.text:000000000001E2AC ; End of function core::StateInfo::getFPS(ulong,double)
.text:000000000001E2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000001E2B0 ; __int64 __fastcall core::StateInfo::getAverageFPS(core::StateInfo *__hidden this)
.text:000000000001E2B0                 EXPORT _ZN4core9StateInfo13getAverageFPSEv
.text:000000000001E2B0 _ZN4core9StateInfo13getAverageFPSEv     ; DATA XREF: LOAD:00000000000012A8↑o
.text:000000000001E2B0 ; __unwind {
.text:000000000001E2B0                 LDR             X8, [X0,#8]
.text:000000000001E2B4                 CBZ             X8, loc_1E2D4
.text:000000000001E2B8                 UCVTF           S0, X8
.text:000000000001E2BC                 LDR             S1, [X0,#0x10]
.text:000000000001E2C0                 FDIV            S0, S1, S0
.text:000000000001E2C4                 LDR             S1, [X0]
.text:000000000001E2C8                 FCMP            S1, S0
.text:000000000001E2CC                 FCSEL           S0, S1, S0, MI
.text:000000000001E2D0                 RET
.text:000000000001E2D4 ; ---------------------------------------------------------------------------
.text:000000000001E2D4 loc_1E2D4                               ; CODE XREF: core::StateInfo::getAverageFPS(void)+4↑j
.text:000000000001E2D4                 FMOV            S0, WZR
.text:000000000001E2D8                 RET
.text:000000000001E2D8 ; } // starts at 1E2B0
.text:000000000001E2D8 ; End of function core::StateInfo::getAverageFPS(void)
.text:000000000001E2D8 ; ---------------------------------------------------------------------------
.text:000000000001E2DC                 ALIGN 0x20
.text:000000000001E2E0 ; =============== S U B R O U T I N E =======================================
.text:000000000001E2E0 ; __int64 __fastcall core::StateInfo::getMaxFPS(core::StateInfo *__hidden this)
.text:000000000001E2E0                 EXPORT _ZN4core9StateInfo9getMaxFPSEv
.text:000000000001E2E0 _ZN4core9StateInfo9getMaxFPSEv          ; DATA XREF: LOAD:0000000000001200↑o
.text:000000000001E2E0 ; __unwind {
.text:000000000001E2E0                 LDR             S0, [X0]
.text:000000000001E2E4                 RET
.text:000000000001E2E4 ; } // starts at 1E2E0
.text:000000000001E2E4 ; End of function core::StateInfo::getMaxFPS(void)
.text:000000000001E2E8 ; =============== S U B R O U T I N E =======================================
.text:000000000001E2E8 ; __int64 __fastcall core::StateInfo::getWindowAverageFPS(core::StateInfo *__hidden this)
.text:000000000001E2E8                 EXPORT _ZN4core9StateInfo19getWindowAverageFPSEv
.text:000000000001E2E8 _ZN4core9StateInfo19getWindowAverageFPSEv
.text:000000000001E2E8                                         ; DATA XREF: LOAD:0000000000000FC0↑o
.text:000000000001E2E8 ; __unwind {
.text:000000000001E2E8                 LDR             X8, [X0,#0x18]
.text:000000000001E2EC                 CBZ             X8, loc_1E30C
.text:000000000001E2F0                 UCVTF           S0, X8
.text:000000000001E2F4                 LDR             S1, [X0,#0x20]
.text:000000000001E2F8                 FDIV            S0, S1, S0
.text:000000000001E2FC                 LDR             S1, [X0]
.text:000000000001E300                 FCMP            S1, S0
.text:000000000001E304                 FCSEL           S0, S1, S0, MI
.text:000000000001E308                 RET
.text:000000000001E30C ; ---------------------------------------------------------------------------
.text:000000000001E30C loc_1E30C                               ; CODE XREF: core::StateInfo::getWindowAverageFPS(void)+4↑j
.text:000000000001E30C                 FMOV            S0, WZR
.text:000000000001E310                 RET
.text:000000000001E310 ; } // starts at 1E2E8
.text:000000000001E310 ; End of function core::StateInfo::getWindowAverageFPS(void)
.text:000000000001E310 ; ---------------------------------------------------------------------------
.text:000000000001E314                 ALIGN 8
.text:000000000001E318 ; =============== S U B R O U T I N E =======================================
.text:000000000001E318 ; __int64 __fastcall core::StateInfo::getMedianFPS(core::StateInfo *__hidden this)
.text:000000000001E318                 EXPORT _ZN4core9StateInfo12getMedianFPSEv
.text:000000000001E318 _ZN4core9StateInfo12getMedianFPSEv      ; DATA XREF: LOAD:0000000000001E90↑o
.text:000000000001E318 ; __unwind {
.text:000000000001E318                 ADRP            X8, #dword_856C@PAGE
.text:000000000001E31C                 LDR             S0, [X0,#0x1B4]
.text:000000000001E320                 LDR             S1, [X8,#dword_856C@PAGEOFF]
.text:000000000001E324                 FMUL            S0, S0, S1
.text:000000000001E328                 RET
.text:000000000001E328 ; } // starts at 1E318
.text:000000000001E328 ; End of function core::StateInfo::getMedianFPS(void)
.text:000000000001E328 ; ---------------------------------------------------------------------------
.text:000000000001E32C                 ALIGN 0x10
.text:000000000001E330 ; =============== S U B R O U T I N E =======================================
.text:000000000001E330 ; __int64 __fastcall core::StateInfo::getFpsStability(core::StateInfo *__hidden this)
.text:000000000001E330                 EXPORT _ZN4core9StateInfo15getFpsStabilityEv
.text:000000000001E330 _ZN4core9StateInfo15getFpsStabilityEv   ; DATA XREF: LOAD:0000000000001440↑o
.text:000000000001E330 ; __unwind {
.text:000000000001E330                 ADRP            X8, #dword_8588@PAGE
.text:000000000001E334                 LDR             S0, [X0,#0x1B4]
.text:000000000001E338                 LDR             S1, [X8,#dword_8588@PAGEOFF]
.text:000000000001E33C                 FMUL            S1, S0, S1
.text:000000000001E340                 FADD            S2, S0, S1
.text:000000000001E344                 FSUB            S0, S0, S1
.text:000000000001E348                 FCVTZU          X9, S2
.text:000000000001E34C                 FCVTZU          X8, S0
.text:000000000001E350                 UCVTF           S3, X9
.text:000000000001E354                 FCMP            S2, S3
.text:000000000001E358                 CSET            W10, GT
.text:000000000001E35C                 CMP             X8, #0x4AF
.text:000000000001E360                 B.LS            loc_1E370
.text:000000000001E364                 MOV             W8, #0x42C80000
.text:000000000001E368                 FMOV            S0, W8
.text:000000000001E36C                 RET
.text:000000000001E370 ; ---------------------------------------------------------------------------
.text:000000000001E370 loc_1E370                               ; CODE XREF: core::StateInfo::getFpsStability(void)+30↑j
.text:000000000001E370                 ADD             X9, X10, X9
.text:000000000001E374                 CMP             X9, X8
.text:000000000001E378                 B.CS            loc_1E384
.text:000000000001E37C                 FMOV            S0, WZR
.text:000000000001E380                 B               loc_1E41C
.text:000000000001E384 ; ---------------------------------------------------------------------------
.text:000000000001E384 loc_1E384                               ; CODE XREF: core::StateInfo::getFpsStability(void)+48↑j
.text:000000000001E384                 MVN             X10, X9
.text:000000000001E388                 ADD             X10, X10, X8
.text:000000000001E38C                 SUB             X11, X8, #0x4B1
.text:000000000001E390                 CMP             X10, X11
.text:000000000001E394                 CSEL            X10, X10, X11, HI
.text:000000000001E398                 NEG             X10, X10
.text:000000000001E39C                 CMP             X10, #3
.text:000000000001E3A0                 B.HI            loc_1E3AC
.text:000000000001E3A4                 MOV             X11, XZR
.text:000000000001E3A8                 B               loc_1E3F4
.text:000000000001E3AC ; ---------------------------------------------------------------------------
.text:000000000001E3AC loc_1E3AC                               ; CODE XREF: core::StateInfo::getFpsStability(void)+70↑j
.text:000000000001E3AC                 MOVI            V0.2D, #0
.text:000000000001E3B0                 ADD             X11, X0, X8,LSL#3
.text:000000000001E3B4                 AND             X12, X10, #0xFFFFFFFFFFFFFFFC
.text:000000000001E3B8                 ADD             X8, X12, X8
.text:000000000001E3BC                 ADD             X11, X11, #0x1C8
.text:000000000001E3C0                 MOV             X13, X12
.text:000000000001E3C4                 MOV             V1.16B, V0.16B
.text:000000000001E3C8 loc_1E3C8                               ; CODE XREF: core::StateInfo::getFpsStability(void)+AC↓j
.text:000000000001E3C8                 LDP             Q2, Q3, [X11,#-0x10]
.text:000000000001E3CC                 ADD             X11, X11, #0x20 ; ' '
.text:000000000001E3D0                 SUBS            X13, X13, #4
.text:000000000001E3D4                 ADD             V0.2D, V2.2D, V0.2D
.text:000000000001E3D8                 ADD             V1.2D, V3.2D, V1.2D
.text:000000000001E3DC                 B.NE            loc_1E3C8
.text:000000000001E3E0                 ADD             V0.2D, V1.2D, V0.2D
.text:000000000001E3E4                 CMP             X12, X10
.text:000000000001E3E8                 ADDP            D0, V0.2D
.text:000000000001E3EC                 FMOV            X11, D0
.text:000000000001E3F0                 B.EQ            loc_1E418
.text:000000000001E3F4 loc_1E3F4                               ; CODE XREF: core::StateInfo::getFpsStability(void)+78↑j
.text:000000000001E3F4                 ADD             X10, X0, #0x1B8
.text:000000000001E3F8 loc_1E3F8                               ; CODE XREF: core::StateInfo::getFpsStability(void)+E4↓j
.text:000000000001E3F8                 LDR             X12, [X10,X8,LSL#3]
.text:000000000001E3FC                 ADD             X11, X12, X11
.text:000000000001E400                 ADD             X12, X8, #1
.text:000000000001E404                 CMP             X12, #0x4B0
.text:000000000001E408                 B.HI            loc_1E418
.text:000000000001E40C                 CMP             X8, X9
.text:000000000001E410                 MOV             X8, X12
.text:000000000001E414                 B.CC            loc_1E3F8
.text:000000000001E418 loc_1E418                               ; CODE XREF: core::StateInfo::getFpsStability(void)+C0↑j
.text:000000000001E418                                         ; core::StateInfo::getFpsStability(void)+D8↑j
.text:000000000001E418                 UCVTF           S0, X11
.text:000000000001E41C loc_1E41C                               ; CODE XREF: core::StateInfo::getFpsStability(void)+50↑j
.text:000000000001E41C                 LDR             X8, [X0,#8]
.text:000000000001E420                 UCVTF           S1, X8
.text:000000000001E424                 MOV             W8, #0x42C80000
.text:000000000001E428                 FDIV            S0, S0, S1
.text:000000000001E42C                 FMOV            S1, W8
.text:000000000001E430                 FMUL            S0, S0, S1
.text:000000000001E434                 RET
.text:000000000001E434 ; } // starts at 1E330
.text:000000000001E434 ; End of function core::StateInfo::getFpsStability(void)
.text:000000000001E438 ; =============== S U B R O U T I N E =======================================
.text:000000000001E438 ; Attributes: bp-based frame
.text:000000000001E438 ; __int64 __fastcall core::StateInfo::getCurrentCPUUsage(core::StateInfo *__hidden this, double)
.text:000000000001E438                 EXPORT _ZN4core9StateInfo18getCurrentCPUUsageEd
.text:000000000001E438 _ZN4core9StateInfo18getCurrentCPUUsageEd
.text:000000000001E438                                         ; DATA XREF: LOAD:00000000000015F0↑o
.text:000000000001E438 var_D0          = -0xD0
.text:000000000001E438 var_C8          = -0xC8
.text:000000000001E438 var_B8          = -0xB8
.text:000000000001E438 var_A8          = -0xA8
.text:000000000001E438 var_98          = -0x98
.text:000000000001E438 var_80          = -0x80
.text:000000000001E438 var_78          = -0x78
.text:000000000001E438 var_70          = -0x70
.text:000000000001E438 var_68          = -0x68
.text:000000000001E438 var_5C          = -0x5C
.text:000000000001E438 filename        = -0x48
.text:000000000001E438 var_32          = -0x32
.text:000000000001E438 var_28          = -0x28
.text:000000000001E438 var_20          = -0x20
.text:000000000001E438 var_18          = -0x18
.text:000000000001E438 var_10          = -0x10
.text:000000000001E438 var_s0          =  0
.text:000000000001E438 ; __unwind {
.text:000000000001E438                 SUB             SP, SP, #0xE0
.text:000000000001E43C                 STR             D8, [SP,#0xD0+var_20]
.text:000000000001E440                 STR             X21, [SP,#0xD0+var_18]
.text:000000000001E444                 STP             X20, X19, [SP,#0xD0+var_10]
.text:000000000001E448                 STP             X29, X30, [SP,#0xD0+var_s0]
.text:000000000001E44C                 ADD             X29, SP, #0xD0
.text:000000000001E450                 MRS             X21, #3, c13, c0, #2
.text:000000000001E454                 MOV             X19, X0
.text:000000000001E458                 LDR             X8, [X21,#0x28]
.text:000000000001E45C                 SUB             X0, X29, #-filename
.text:000000000001E460                 MOV             V8.16B, V0.16B
.text:000000000001E464                 STUR            X8, [X29,#var_28]
.text:000000000001E468                 STP             XZR, XZR, [X29,#filename]
.text:000000000001E46C                 STUR            XZR, [X29,#var_32]
.text:000000000001E470                 STUR            XZR, [X29,#-0x38]
.text:000000000001E474                 BL              sub_1E590
.text:000000000001E478                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001E47C                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001E480                 SUB             X0, X29, #-filename ; filename
.text:000000000001E484                 BL              .fopen
.text:000000000001E488                 CBZ             X0, loc_1E524
.text:000000000001E48C                 ADRP            X1, #aZuSSZuZuZuZuZu@PAGE ; "%zu  %s %s  %zu  %zu  %zu  %zu  %zu  %z"...
.text:000000000001E490                 ADD             X8, SP, #0xD0+var_80
.text:000000000001E494                 ADD             X9, SP, #0xD0+var_78
.text:000000000001E498                 ADD             X10, SP, #0xD0+var_70
.text:000000000001E49C                 ADD             X1, X1, #aZuSSZuZuZuZuZu@PAGEOFF ; "%zu  %s %s  %zu  %zu  %zu  %zu  %zu  %z"...
.text:000000000001E4A0                 ADD             X2, SP, #0xD0+var_70
.text:000000000001E4A4                 STP             X9, X8, [SP,#0xD0+var_98]
.text:000000000001E4A8                 SUB             X3, X29, #-var_5C
.text:000000000001E4AC                 STP             X10, X10, [SP,#0xD0+var_A8]
.text:000000000001E4B0                 ADD             X4, SP, #0xD0+var_68
.text:000000000001E4B4                 STP             X10, X10, [SP,#0xD0+var_B8]
.text:000000000001E4B8                 ADD             X5, SP, #0xD0+var_70
.text:000000000001E4BC                 STP             X10, X10, [SP,#0xD0+var_C8]
.text:000000000001E4C0                 ADD             X6, SP, #0xD0+var_70
.text:000000000001E4C4                 STR             X10, [SP,#0xD0+var_D0]
.text:000000000001E4C8                 ADD             X7, SP, #0xD0+var_70
.text:000000000001E4CC                 MOV             X20, X0
.text:000000000001E4D0                 BL              .fscanf
.text:000000000001E4D4                 LDR             X10, [X19,#0x2770]
.text:000000000001E4D8                 CBNZ            X10, loc_1E4E4
.text:000000000001E4DC                 LDR             X8, [X19,#0x2778]
.text:000000000001E4E0                 CBZ             X8, loc_1E56C
.text:000000000001E4E4 loc_1E4E4                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+A0↑j
.text:000000000001E4E4                 FCMP            D8, #0.0
.text:000000000001E4E8                 LDP             X9, X8, [SP,#0xD0+var_80]
.text:000000000001E4EC                 STR             X8, [X19,#0x2780]
.text:000000000001E4F0                 STR             X9, [X19,#0x2788]
.text:000000000001E4F4                 B.LE            loc_1E52C
.text:000000000001E4F8                 LDR             X11, [X19,#0x2778]
.text:000000000001E4FC                 SUB             X10, X8, X10
.text:000000000001E500                 ADD             X10, X10, X9
.text:000000000001E504                 SUB             X10, X10, X11
.text:000000000001E508                 ADRP            X11, #qword_7960@PAGE
.text:000000000001E50C                 UCVTF           D0, X10
.text:000000000001E510                 LDR             D1, [X11,#qword_7960@PAGEOFF]
.text:000000000001E514                 FMUL            D0, D0, D1
.text:000000000001E518                 FDIV            D0, D0, D8
.text:000000000001E51C                 FCVT            S8, D0
.text:000000000001E520                 B               loc_1E530
.text:000000000001E524 ; ---------------------------------------------------------------------------
.text:000000000001E524 loc_1E524                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+50↑j
.text:000000000001E524                 FMOV            S8, #-1.0
.text:000000000001E528                 B               loc_1E540
.text:000000000001E52C ; ---------------------------------------------------------------------------
.text:000000000001E52C loc_1E52C                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+BC↑j
.text:000000000001E52C                 FMOV            S8, WZR
.text:000000000001E530 loc_1E530                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+E8↑j
.text:000000000001E530                 MOV             X0, X20 ; stream
.text:000000000001E534                 STR             X9, [X19,#0x2778]
.text:000000000001E538                 STR             X8, [X19,#0x2770]
.text:000000000001E53C                 BL              .fclose
.text:000000000001E540 loc_1E540                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+F0↑j
.text:000000000001E540                                         ; core::StateInfo::getCurrentCPUUsage(double)+14C↓j
.text:000000000001E540                 LDR             X8, [X21,#0x28]
.text:000000000001E544                 LDUR            X9, [X29,#var_28]
.text:000000000001E548                 CMP             X8, X9
.text:000000000001E54C                 B.NE            loc_1E588
.text:000000000001E550                 MOV             V0.16B, V8.16B
.text:000000000001E554                 LDR             X21, [SP,#0xD0+var_18]
.text:000000000001E558                 LDP             X29, X30, [SP,#0xD0+var_s0]
.text:000000000001E55C                 LDP             X20, X19, [SP,#0xD0+var_10]
.text:000000000001E560                 LDR             D8, [SP,#0xD0+var_20]
.text:000000000001E564                 ADD             SP, SP, #0xE0
.text:000000000001E568                 RET
.text:000000000001E56C ; ---------------------------------------------------------------------------
.text:000000000001E56C loc_1E56C                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+A8↑j
.text:000000000001E56C                 LDP             X9, X8, [SP,#0xD0+var_80]
.text:000000000001E570                 MOV             X0, X20 ; stream
.text:000000000001E574                 STR             X8, [X19,#0x2770]
.text:000000000001E578                 STR             X9, [X19,#0x2778]
.text:000000000001E57C                 BL              .fclose
.text:000000000001E580                 FMOV            S8, #-1.0
.text:000000000001E584                 B               loc_1E540
.text:000000000001E588 ; ---------------------------------------------------------------------------
.text:000000000001E588 loc_1E588                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+114↑j
.text:000000000001E588                 BL              .__stack_chk_fail
.text:000000000001E588 ; } // starts at 1E438
.text:000000000001E588 ; End of function core::StateInfo::getCurrentCPUUsage(double)
.text:000000000001E588 ; ---------------------------------------------------------------------------
.text:000000000001E58C                 ALIGN 0x10
.text:000000000001E590 ; =============== S U B R O U T I N E =======================================
.text:000000000001E590 ; Attributes: bp-based frame
.text:000000000001E590 sub_1E590                               ; CODE XREF: core::StateInfo::getCurrentCPUUsage(double)+3C↑p
.text:000000000001E590 var_118         = -0x118
.text:000000000001E590 var_110         = -0x110
.text:000000000001E590 var_F0          = -0xF0
.text:000000000001E590 var_D0          = -0xD0
.text:000000000001E590 var_B0          = -0xB0
.text:000000000001E590 var_88          = -0x88
.text:000000000001E590 var_80          = -0x80
.text:000000000001E590 var_70          = -0x70
.text:000000000001E590 var_60          = -0x60
.text:000000000001E590 var_38          = -0x38
.text:000000000001E590 var_28          = -0x28
.text:000000000001E590 var_10          = -0x10
.text:000000000001E590 var_s0          =  0
.text:000000000001E590 ; __unwind {
.text:000000000001E590                 SUB             SP, SP, #0x130
.text:000000000001E594                 STP             X28, X19, [SP,#0x120+var_10]
.text:000000000001E598                 STP             X29, X30, [SP,#0x120+var_s0]
.text:000000000001E59C                 ADD             X29, SP, #0x120
.text:000000000001E5A0                 MRS             X19, #3, c13, c0, #2
.text:000000000001E5A4                 STP             Q6, Q7, [SP,#0x120+var_B0]
.text:000000000001E5A8                 STP             Q4, Q5, [SP,#0x120+var_D0]
.text:000000000001E5AC                 MOV             X8, #0xFFFFFFFFFFFFFFD8
.text:000000000001E5B0                 STP             Q2, Q3, [SP,#0x120+var_F0]
.text:000000000001E5B4                 ADD             X10, SP, #0x120+var_110
.text:000000000001E5B8                 STP             Q0, Q1, [SP,#0x120+var_110]
.text:000000000001E5BC                 MOVK            X8, #0xFF80,LSL#32
.text:000000000001E5C0                 STP             X6, X7, [X29,#var_70]
.text:000000000001E5C4                 ADD             X10, X10, #0x80
.text:000000000001E5C8                 STP             X4, X5, [X29,#var_80]
.text:000000000001E5CC                 SUB             X11, X29, #-var_88
.text:000000000001E5D0                 STUR            X3, [X29,#var_88]
.text:000000000001E5D4                 ADRP            X3, #aProcSelfStat@PAGE ; "proc/self/stat"
.text:000000000001E5D8                 LDR             X9, [X19,#0x28]
.text:000000000001E5DC                 ADD             X3, X3, #aProcSelfStat@PAGEOFF ; "proc/self/stat"
.text:000000000001E5E0                 SUB             X4, X29, #-var_60
.text:000000000001E5E4                 MOV             W1, WZR
.text:000000000001E5E8                 MOV             W2, #0x1E
.text:000000000001E5EC                 STR             X9, [SP,#0x120+var_118]
.text:000000000001E5F0                 ADD             X9, X11, #0x28 ; '('
.text:000000000001E5F4                 ADD             X11, X29, #0x10
.text:000000000001E5F8                 STP             X10, X8, [X29,#var_28]
.text:000000000001E5FC                 SUB             X8, X29, #-var_38
.text:000000000001E600                 STP             X11, X9, [X29,#var_38]
.text:000000000001E604                 LDP             Q1, Q0, [X8]
.text:000000000001E608                 STP             Q1, Q0, [X29,#var_60]
.text:000000000001E60C                 BL              .__vsprintf_chk
.text:000000000001E610                 LDR             X8, [X19,#0x28]
.text:000000000001E614                 LDR             X9, [SP,#0x120+var_118]
.text:000000000001E618                 CMP             X8, X9
.text:000000000001E61C                 B.NE            loc_1E630
.text:000000000001E620                 LDP             X29, X30, [SP,#0x120+var_s0]
.text:000000000001E624                 LDP             X28, X19, [SP,#0x120+var_10]
.text:000000000001E628                 ADD             SP, SP, #0x130
.text:000000000001E62C                 RET
.text:000000000001E630 ; ---------------------------------------------------------------------------
.text:000000000001E630 loc_1E630                               ; CODE XREF: sub_1E590+8C↑j
.text:000000000001E630                 BL              .__stack_chk_fail
.text:000000000001E630 ; } // starts at 1E590
.text:000000000001E630 ; End of function sub_1E590
.text:000000000001E630 ; ---------------------------------------------------------------------------
.text:000000000001E634                 ALIGN 8
.text:000000000001E638 ; =============== S U B R O U T I N E =======================================
.text:000000000001E638 ; __int64 __fastcall core::StateInfo::file_open(core::StateInfo *__hidden this, const char *, const char *)
.text:000000000001E638                 EXPORT _ZN4core9StateInfo9file_openEPKcS2_
.text:000000000001E638 _ZN4core9StateInfo9file_openEPKcS2_     ; DATA XREF: LOAD:0000000000000EE8↑o
.text:000000000001E638 ; __unwind {
.text:000000000001E638                 B               .fopen
.text:000000000001E638 ; } // starts at 1E638
.text:000000000001E638 ; End of function core::StateInfo::file_open(char const*,char const*)
.text:000000000001E638 ; ---------------------------------------------------------------------------
.text:000000000001E63C                 ALIGN 0x20
.text:000000000001E640 ; =============== S U B R O U T I N E =======================================
.text:000000000001E640 ; core::StateInfo::file_close(__sFILE *)
.text:000000000001E640                 EXPORT _ZN4core9StateInfo10file_closeEP7__sFILE
.text:000000000001E640 _ZN4core9StateInfo10file_closeEP7__sFILE
.text:000000000001E640                                         ; DATA XREF: LOAD:0000000000001BC0↑o
.text:000000000001E640 ; __unwind {
.text:000000000001E640                 B               .fclose
.text:000000000001E640 ; } // starts at 1E640
.text:000000000001E640 ; End of function core::StateInfo::file_close(__sFILE *)
.text:000000000001E640 ; ---------------------------------------------------------------------------
.text:000000000001E644                 ALIGN 8
.text:000000000001E648 ; =============== S U B R O U T I N E =======================================
.text:000000000001E648 ; Attributes: bp-based frame
.text:000000000001E648 ; __int64 __fastcall core::StateInfo::file_read(FILE *stream, void *ptr, size_t n)
.text:000000000001E648                 EXPORT _ZN4core9StateInfo9file_readEP7__sFILEPhj
.text:000000000001E648 _ZN4core9StateInfo9file_readEP7__sFILEPhj
.text:000000000001E648                                         ; DATA XREF: LOAD:0000000000001F20↑o
.text:000000000001E648 var_s0          =  0
.text:000000000001E648 ; __unwind {
.text:000000000001E648                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000001E64C                 MOV             X29, SP
.text:000000000001E650                 MOV             X3, X0  ; stream
.text:000000000001E654                 MOV             W2, W2  ; n
.text:000000000001E658                 MOV             X0, X1  ; ptr
.text:000000000001E65C                 MOV             W1, #1  ; size
.text:000000000001E660                 BL              .fread
.text:000000000001E664                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000001E668                 RET
.text:000000000001E668 ; } // starts at 1E648
.text:000000000001E668 ; End of function core::StateInfo::file_read(__sFILE *,uchar *,uint)
.text:000000000001E668 ; ---------------------------------------------------------------------------
.text:000000000001E66C                 ALIGN 0x10
.text:000000000001E670 ; =============== S U B R O U T I N E =======================================
.text:000000000001E670 ; Attributes: bp-based frame
.text:000000000001E670 ; __int64 __fastcall core::StateInfo::getCPUTemperature(core::StateInfo *__hidden this)
.text:000000000001E670                 EXPORT _ZN4core9StateInfo17getCPUTemperatureEv
.text:000000000001E670 _ZN4core9StateInfo17getCPUTemperatureEv ; DATA XREF: LOAD:0000000000000ED0↑o
.text:000000000001E670 var_20          = -0x20
.text:000000000001E670 var_18          = -0x18
.text:000000000001E670 var_10          = -0x10
.text:000000000001E670 var_s0          =  0
.text:000000000001E670 ; __unwind {
.text:000000000001E670                 SUB             SP, SP, #0x30
.text:000000000001E674                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001E678                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001E67C                 ADD             X29, SP, #0x20
.text:000000000001E680                 MRS             X20, #3, c13, c0, #2
.text:000000000001E684                 ADRP            X0, #aSysClassTherma@PAGE ; "sys/class/thermal/thermal_zone0/temp"
.text:000000000001E688                 LDR             X8, [X20,#0x28]
.text:000000000001E68C                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001E690                 ADD             X0, X0, #aSysClassTherma@PAGEOFF ; "sys/class/thermal/thermal_zone0/temp"
.text:000000000001E694                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001E698                 STR             X8, [SP,#0x20+var_18]
.text:000000000001E69C                 BL              .fopen
.text:000000000001E6A0                 CBZ             X0, loc_1E6D8
.text:000000000001E6A4                 ADRP            X1, #aZu@PAGE ; "%zu "
.text:000000000001E6A8                 ADD             X1, X1, #aZu@PAGEOFF ; "%zu "
.text:000000000001E6AC                 MOV             X2, SP
.text:000000000001E6B0                 MOV             X19, X0
.text:000000000001E6B4                 BL              .fscanf
.text:000000000001E6B8                 MOV             X0, X19 ; stream
.text:000000000001E6BC                 BL              .fclose
.text:000000000001E6C0                 LDR             X8, [SP,#0x20+var_20]
.text:000000000001E6C4                 ADRP            X9, #dword_858C@PAGE
.text:000000000001E6C8                 LDR             S1, [X9,#dword_858C@PAGEOFF]
.text:000000000001E6CC                 UCVTF           S0, X8
.text:000000000001E6D0                 FMUL            S0, S0, S1
.text:000000000001E6D4                 B               loc_1E6DC
.text:000000000001E6D8 ; ---------------------------------------------------------------------------
.text:000000000001E6D8 loc_1E6D8                               ; CODE XREF: core::StateInfo::getCPUTemperature(void)+30↑j
.text:000000000001E6D8                 FMOV            S0, #-1.0
.text:000000000001E6DC loc_1E6DC                               ; CODE XREF: core::StateInfo::getCPUTemperature(void)+64↑j
.text:000000000001E6DC                 LDR             X8, [X20,#0x28]
.text:000000000001E6E0                 LDR             X9, [SP,#0x20+var_18]
.text:000000000001E6E4                 CMP             X8, X9
.text:000000000001E6E8                 B.NE            loc_1E6FC
.text:000000000001E6EC                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001E6F0                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001E6F4                 ADD             SP, SP, #0x30 ; '0'
.text:000000000001E6F8                 RET
.text:000000000001E6FC ; ---------------------------------------------------------------------------
.text:000000000001E6FC loc_1E6FC                               ; CODE XREF: core::StateInfo::getCPUTemperature(void)+78↑j
.text:000000000001E6FC                 BL              .__stack_chk_fail
.text:000000000001E6FC ; } // starts at 1E670
.text:000000000001E6FC ; End of function core::StateInfo::getCPUTemperature(void)
.text:000000000001E700 ; =============== S U B R O U T I N E =======================================
.text:000000000001E700 ; Attributes: bp-based frame
.text:000000000001E700 ; __int64 __fastcall core::StateInfo::getGPUUsage(core::StateInfo *__hidden this)
.text:000000000001E700                 EXPORT _ZN4core9StateInfo11getGPUUsageEv
.text:000000000001E700 _ZN4core9StateInfo11getGPUUsageEv       ; DATA XREF: LOAD:00000000000018C0↑o
.text:000000000001E700 var_20          = -0x20
.text:000000000001E700 var_18          = -0x18
.text:000000000001E700 var_10          = -0x10
.text:000000000001E700 var_s0          =  0
.text:000000000001E700 ; __unwind {
.text:000000000001E700                 SUB             SP, SP, #0x30
.text:000000000001E704                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001E708                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001E70C                 ADD             X29, SP, #0x20
.text:000000000001E710                 MRS             X20, #3, c13, c0, #2
.text:000000000001E714                 ADRP            X0, #aSysKernelGpuGp_1@PAGE ; "/sys/kernel/gpu/gpu_busy"
.text:000000000001E718                 LDR             X8, [X20,#0x28]
.text:000000000001E71C                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001E720                 ADD             X0, X0, #aSysKernelGpuGp_1@PAGEOFF ; "/sys/kernel/gpu/gpu_busy"
.text:000000000001E724                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001E728                 STR             X8, [SP,#0x20+var_18]
.text:000000000001E72C                 BL              .fopen
.text:000000000001E730                 CBZ             X0, loc_1E75C
.text:000000000001E734                 ADRP            X1, #aZu@PAGE ; "%zu "
.text:000000000001E738                 ADD             X1, X1, #aZu@PAGEOFF ; "%zu "
.text:000000000001E73C                 MOV             X2, SP
.text:000000000001E740                 MOV             X19, X0
.text:000000000001E744                 BL              .fscanf
.text:000000000001E748                 MOV             X0, X19 ; stream
.text:000000000001E74C                 BL              .fclose
.text:000000000001E750                 LDR             X8, [SP,#0x20+var_20]
.text:000000000001E754                 UCVTF           S0, X8
.text:000000000001E758                 B               loc_1E760
.text:000000000001E75C ; ---------------------------------------------------------------------------
.text:000000000001E75C loc_1E75C                               ; CODE XREF: core::StateInfo::getGPUUsage(void)+30↑j
.text:000000000001E75C                 FMOV            S0, #-1.0
.text:000000000001E760 loc_1E760                               ; CODE XREF: core::StateInfo::getGPUUsage(void)+58↑j
.text:000000000001E760                 LDR             X8, [X20,#0x28]
.text:000000000001E764                 LDR             X9, [SP,#0x20+var_18]
.text:000000000001E768                 CMP             X8, X9
.text:000000000001E76C                 B.NE            loc_1E780
.text:000000000001E770                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001E774                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001E778                 ADD             SP, SP, #0x30 ; '0'
.text:000000000001E77C                 RET
.text:000000000001E780 ; ---------------------------------------------------------------------------
.text:000000000001E780 loc_1E780                               ; CODE XREF: core::StateInfo::getGPUUsage(void)+6C↑j
.text:000000000001E780                 BL              .__stack_chk_fail
.text:000000000001E780 ; } // starts at 1E700
.text:000000000001E780 ; End of function core::StateInfo::getGPUUsage(void)
.text:000000000001E780 ; ---------------------------------------------------------------------------
.text:000000000001E784                 ALIGN 8
.text:000000000001E788 ; =============== S U B R O U T I N E =======================================
.text:000000000001E788 ; Attributes: bp-based frame
.text:000000000001E788 ; __int64 __fastcall core::StateInfo::getGPUClock(core::StateInfo *__hidden this)
.text:000000000001E788                 EXPORT _ZN4core9StateInfo11getGPUClockEv
.text:000000000001E788 _ZN4core9StateInfo11getGPUClockEv       ; CODE XREF: core::StateInfo::getGPUClock(void)+C↓j
.text:000000000001E788                                         ; DATA XREF: LOAD:0000000000001B90↑o ...
.text:000000000001E788 var_30          = -0x30
.text:000000000001E788 var_28          = -0x28
.text:000000000001E788 var_20          = -0x20
.text:000000000001E788 var_10          = -0x10
.text:000000000001E788 var_s0          =  0
.text:000000000001E788 ; __unwind {
.text:000000000001E788                 SUB             SP, SP, #0x40
.text:000000000001E78C                 STR             D8, [SP,#0x30+var_20]
.text:000000000001E790                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000001E794                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001E798                 ADD             X29, SP, #0x30
.text:000000000001E79C                 MRS             X20, #3, c13, c0, #2
.text:000000000001E7A0                 FMOV            S8, #-1.0
.text:000000000001E7A4                 LDR             X8, [X20,#0x28]
.text:000000000001E7A8                 STR             X8, [SP,#0x30+var_28]
.text:000000000001E7AC                 BL              ._ZN4core9StateInfo17checkGPUClockUnitEv ; core::StateInfo::checkGPUClockUnit(void)
.text:000000000001E7B0                 TBZ             W0, #0, loc_1E810
.text:000000000001E7B4                 ADRP            X0, #aSysKernelGpuGp_2@PAGE ; "/sys/kernel/gpu/gpu_clock"
.text:000000000001E7B8                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001E7BC                 ADD             X0, X0, #aSysKernelGpuGp_2@PAGEOFF ; "/sys/kernel/gpu/gpu_clock"
.text:000000000001E7C0                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001E7C4                 BL              .fopen
.text:000000000001E7C8                 CBZ             X0, loc_1E810
.text:000000000001E7CC                 ADRP            X1, #aZu@PAGE ; "%zu "
.text:000000000001E7D0                 ADD             X1, X1, #aZu@PAGEOFF ; "%zu "
.text:000000000001E7D4                 MOV             X2, SP
.text:000000000001E7D8                 MOV             X19, X0
.text:000000000001E7DC                 BL              .fscanf
.text:000000000001E7E0                 MOV             X0, X19 ; stream
.text:000000000001E7E4                 BL              .fclose
.text:000000000001E7E8                 LDR             X8, [SP,#0x30+var_30]
.text:000000000001E7EC                 UCVTF           S0, X8
.text:000000000001E7F0                 MOV             W8, #0x447A0000
.text:000000000001E7F4                 FMOV            S1, W8
.text:000000000001E7F8                 ADRP            X8, #_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGE
.text:000000000001E7FC                 LDR             X8, [X8,#_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGEOFF]
.text:000000000001E800                 FDIV            S1, S0, S1
.text:000000000001E804                 LDRB            W8, [X8] ; core::StateInfo::mIsGpuClockKHz
.text:000000000001E808                 CMP             W8, #0
.text:000000000001E80C                 FCSEL           S8, S0, S1, EQ
.text:000000000001E810 loc_1E810                               ; CODE XREF: core::StateInfo::getGPUClock(void)+28↑j
.text:000000000001E810                                         ; core::StateInfo::getGPUClock(void)+40↑j
.text:000000000001E810                 LDR             X8, [X20,#0x28]
.text:000000000001E814                 LDR             X9, [SP,#0x30+var_28]
.text:000000000001E818                 CMP             X8, X9
.text:000000000001E81C                 B.NE            loc_1E838
.text:000000000001E820                 MOV             V0.16B, V8.16B
.text:000000000001E824                 LDR             D8, [SP,#0x30+var_20]
.text:000000000001E828                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001E82C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000001E830                 ADD             SP, SP, #0x40 ; '@'
.text:000000000001E834                 RET
.text:000000000001E838 ; ---------------------------------------------------------------------------
.text:000000000001E838 loc_1E838                               ; CODE XREF: core::StateInfo::getGPUClock(void)+94↑j
.text:000000000001E838                 BL              .__stack_chk_fail
.text:000000000001E838 ; } // starts at 1E788
.text:000000000001E838 ; End of function core::StateInfo::getGPUClock(void)
.text:000000000001E838 ; ---------------------------------------------------------------------------
.text:000000000001E83C                 ALIGN 0x20
.text:000000000001E840 ; =============== S U B R O U T I N E =======================================
.text:000000000001E840 ; Attributes: bp-based frame
.text:000000000001E840 ; __int64 __fastcall core::StateInfo::getGPUMaxClock(core::StateInfo *__hidden this)
.text:000000000001E840                 EXPORT _ZN4core9StateInfo14getGPUMaxClockEv
.text:000000000001E840 _ZN4core9StateInfo14getGPUMaxClockEv    ; DATA XREF: LOAD:0000000000002340↑o
.text:000000000001E840 var_s0          =  0
.text:000000000001E840 ; __unwind {
.text:000000000001E840                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000001E844                 MOV             X29, SP
.text:000000000001E848                 BL              ._ZN4core9StateInfo17checkGPUClockUnitEv ; core::StateInfo::checkGPUClockUnit(void)
.text:000000000001E84C                 ADRP            X8, #_ZN4core9StateInfo12mMaxGpuClockE_ptr@PAGE
.text:000000000001E850                 FMOV            S0, #-1.0
.text:000000000001E854                 TST             W0, #1
.text:000000000001E858                 LDR             X8, [X8,#_ZN4core9StateInfo12mMaxGpuClockE_ptr@PAGEOFF]
.text:000000000001E85C                 LDR             S1, [X8] ; core::StateInfo::mMaxGpuClock
.text:000000000001E860                 FCSEL           S0, S1, S0, NE
.text:000000000001E864                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000001E868                 RET
.text:000000000001E868 ; } // starts at 1E840
.text:000000000001E868 ; End of function core::StateInfo::getGPUMaxClock(void)
.text:000000000001E868 ; ---------------------------------------------------------------------------
.text:000000000001E86C                 ALIGN 0x10
.text:000000000001E870 ; =============== S U B R O U T I N E =======================================
.text:000000000001E870 ; __int64 __fastcall core::StateInfo::getCPUFixClock(core::StateInfo *__hidden this)
.text:000000000001E870                 EXPORT _ZN4core9StateInfo14getCPUFixClockEv
.text:000000000001E870 _ZN4core9StateInfo14getCPUFixClockEv    ; DATA XREF: LOAD:0000000000000EA0↑o
.text:000000000001E870 ; __unwind {
.text:000000000001E870                 ADRP            X8, #_ZN4core9StateInfo7mVendorE_ptr@PAGE
.text:000000000001E874                 LDR             X8, [X8,#_ZN4core9StateInfo7mVendorE_ptr@PAGEOFF]
.text:000000000001E878                 LDRSW           X8, [X8] ; core::StateInfo::mVendor
.text:000000000001E87C                 CMP             W8, #1
.text:000000000001E880                 B.HI            loc_1E8B0
.text:000000000001E884                 ADRP            X9, #_ZN5utils11deviceModelE_ptr@PAGE
.text:000000000001E888                 LDR             X9, [X9,#_ZN5utils11deviceModelE_ptr@PAGEOFF]
.text:000000000001E88C                 LDRSW           X9, [X9] ; utils::deviceModel
.text:000000000001E890                 CMP             W9, #6
.text:000000000001E894                 B.HI            loc_1E8B8
.text:000000000001E898                 ADRP            X10, #unk_8590@PAGE
.text:000000000001E89C                 ADD             X10, X10, #unk_8590@PAGEOFF
.text:000000000001E8A0                 ADD             X9, X10, X9,LSL#5
.text:000000000001E8A4                 LSL             X8, X8, #4
.text:000000000001E8A8                 LDR             X0, [X9,X8]
.text:000000000001E8AC                 RET
.text:000000000001E8B0 ; ---------------------------------------------------------------------------
.text:000000000001E8B0 loc_1E8B0                               ; CODE XREF: core::StateInfo::getCPUFixClock(void)+10↑j
.text:000000000001E8B0                 MOV             X0, XZR
.text:000000000001E8B4                 RET
.text:000000000001E8B8 ; ---------------------------------------------------------------------------
.text:000000000001E8B8 loc_1E8B8                               ; CODE XREF: core::StateInfo::getCPUFixClock(void)+24↑j
.text:000000000001E8B8                 MOV             X0, XZR
.text:000000000001E8BC                 RET
.text:000000000001E8BC ; } // starts at 1E870
.text:000000000001E8BC ; End of function core::StateInfo::getCPUFixClock(void)
.text:000000000001E8C0 ; =============== S U B R O U T I N E =======================================
.text:000000000001E8C0 ; Attributes: bp-based frame
.text:000000000001E8C0 ; __int64 __fastcall core::StateInfo::getGPUFixClock(core::StateInfo *__hidden this)
.text:000000000001E8C0                 EXPORT _ZN4core9StateInfo14getGPUFixClockEv
.text:000000000001E8C0 _ZN4core9StateInfo14getGPUFixClockEv    ; DATA XREF: LOAD:0000000000001EA8↑o
.text:000000000001E8C0 var_10          = -0x10
.text:000000000001E8C0 var_s0          =  0
.text:000000000001E8C0 ; __unwind {
.text:000000000001E8C0                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001E8C4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001E8C8                 ADD             X29, SP, #0x10
.text:000000000001E8CC                 ADRP            X19, #_ZN4core9StateInfo7mVendorE_ptr@PAGE
.text:000000000001E8D0                 LDR             X19, [X19,#_ZN4core9StateInfo7mVendorE_ptr@PAGEOFF]
.text:000000000001E8D4                 LDR             W8, [X19] ; core::StateInfo::mVendor
.text:000000000001E8D8                 CBZ             W8, loc_1E8EC
.text:000000000001E8DC                 MOV             W9, #1
.text:000000000001E8E0                 CMP             W8, #1
.text:000000000001E8E4                 B.HI            loc_1E950
.text:000000000001E8E8                 B               loc_1E920
.text:000000000001E8EC ; ---------------------------------------------------------------------------
.text:000000000001E8EC loc_1E8EC                               ; CODE XREF: core::StateInfo::getGPUFixClock(void)+18↑j
.text:000000000001E8EC                 BL              ._ZN4core9StateInfo17checkGPUClockUnitEv ; core::StateInfo::checkGPUClockUnit(void)
.text:000000000001E8F0                 ADRP            X9, #_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGE
.text:000000000001E8F4                 LDR             W8, [X19] ; core::StateInfo::mVendor
.text:000000000001E8F8                 LDR             X9, [X9,#_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGEOFF]
.text:000000000001E8FC                 LDRB            W9, [X9] ; core::StateInfo::mIsGpuClockKHz
.text:000000000001E900                 CMP             W9, #0
.text:000000000001E904                 CSET            W9, EQ
.text:000000000001E908                 ORN             W9, W9, W0
.text:000000000001E90C                 TST             W9, #1
.text:000000000001E910                 MOV             W9, #0x3E8
.text:000000000001E914                 CSINC           X9, X9, XZR, EQ
.text:000000000001E918                 CMP             W8, #1
.text:000000000001E91C                 B.HI            loc_1E950
.text:000000000001E920 loc_1E920                               ; CODE XREF: core::StateInfo::getGPUFixClock(void)+28↑j
.text:000000000001E920                 ADRP            X10, #_ZN5utils11deviceModelE_ptr@PAGE
.text:000000000001E924                 LDR             X10, [X10,#_ZN5utils11deviceModelE_ptr@PAGEOFF]
.text:000000000001E928                 LDRSW           X10, [X10] ; utils::deviceModel
.text:000000000001E92C                 CMP             W10, #6
.text:000000000001E930                 B.HI            loc_1E950
.text:000000000001E934                 ADRP            X11, #unk_8590@PAGE
.text:000000000001E938                 ADD             X11, X11, #unk_8590@PAGEOFF
.text:000000000001E93C                 ADD             X10, X11, X10,LSL#5
.text:000000000001E940                 ADD             X8, X10, W8,SXTW#4
.text:000000000001E944                 LDR             X8, [X8,#8]
.text:000000000001E948                 MUL             X0, X8, X9
.text:000000000001E94C                 B               loc_1E954
.text:000000000001E950 ; ---------------------------------------------------------------------------
.text:000000000001E950 loc_1E950                               ; CODE XREF: core::StateInfo::getGPUFixClock(void)+24↑j
.text:000000000001E950                                         ; core::StateInfo::getGPUFixClock(void)+5C↑j ...
.text:000000000001E950                 MOV             X0, XZR
.text:000000000001E954 loc_1E954                               ; CODE XREF: core::StateInfo::getGPUFixClock(void)+8C↑j
.text:000000000001E954                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001E958                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001E95C                 RET
.text:000000000001E95C ; } // starts at 1E8C0
.text:000000000001E95C ; End of function core::StateInfo::getGPUFixClock(void)
.text:000000000001E960 ; =============== S U B R O U T I N E =======================================
.text:000000000001E960 ; Attributes: bp-based frame
.text:000000000001E960 ; __int64 __fastcall core::StateInfo::fixClock(core::StateInfo *__hidden this)
.text:000000000001E960                 EXPORT _ZN4core9StateInfo8fixClockEv
.text:000000000001E960 _ZN4core9StateInfo8fixClockEv           ; DATA XREF: LOAD:0000000000001818↑o
.text:000000000001E960 var_20          = -0x20
.text:000000000001E960 var_10          = -0x10
.text:000000000001E960 var_s0          =  0
.text:000000000001E960 ; __unwind {
.text:000000000001E960                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000001E964                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001E968                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001E96C                 ADD             X29, SP, #0x20
.text:000000000001E970                 ADRP            X21, #_ZN4core9StateInfo7mVendorE_ptr@PAGE
.text:000000000001E974                 LDR             X21, [X21,#_ZN4core9StateInfo7mVendorE_ptr@PAGEOFF]
.text:000000000001E978                 LDRSW           X9, [X21] ; core::StateInfo::mVendor
.text:000000000001E97C                 CMP             W9, #1
.text:000000000001E980                 B.HI            loc_1E9C8
.text:000000000001E984                 ADRP            X20, #_ZN5utils11deviceModelE_ptr@PAGE
.text:000000000001E988                 LDR             X20, [X20,#_ZN5utils11deviceModelE_ptr@PAGEOFF]
.text:000000000001E98C                 LDR             W8, [X20] ; utils::deviceModel
.text:000000000001E990                 CMP             W8, #6
.text:000000000001E994                 B.HI            loc_1E9D4
.text:000000000001E998                 ADRP            X11, #unk_8590@PAGE
.text:000000000001E99C                 SXTW            X10, W8
.text:000000000001E9A0                 ADD             X11, X11, #unk_8590@PAGEOFF
.text:000000000001E9A4                 ADD             X10, X11, X10,LSL#5
.text:000000000001E9A8                 LSL             X11, X9, #4
.text:000000000001E9AC                 LDR             X19, [X10,X11]
.text:000000000001E9B0                 CBZ             W9, loc_1E9DC
.text:000000000001E9B4 loc_1E9B4                               ; CODE XREF: core::StateInfo::fixClock(void)+78↓j
.text:000000000001E9B4                 MOV             W10, #1
.text:000000000001E9B8                 MOV             W9, #1
.text:000000000001E9BC                 CMP             W8, #6
.text:000000000001E9C0                 B.HI            loc_1E9CC
.text:000000000001E9C4                 B               loc_1EA1C
.text:000000000001E9C8 ; ---------------------------------------------------------------------------
.text:000000000001E9C8 loc_1E9C8                               ; CODE XREF: core::StateInfo::fixClock(void)+20↑j
.text:000000000001E9C8                 MOV             X19, XZR
.text:000000000001E9CC loc_1E9CC                               ; CODE XREF: core::StateInfo::fixClock(void)+60↑j
.text:000000000001E9CC                                         ; core::StateInfo::fixClock(void)+88↓j ...
.text:000000000001E9CC                 MOV             X1, XZR
.text:000000000001E9D0                 B               loc_1EA38
.text:000000000001E9D4 ; ---------------------------------------------------------------------------
.text:000000000001E9D4 loc_1E9D4                               ; CODE XREF: core::StateInfo::fixClock(void)+34↑j
.text:000000000001E9D4                 MOV             X19, XZR
.text:000000000001E9D8                 CBNZ            W9, loc_1E9B4
.text:000000000001E9DC loc_1E9DC                               ; CODE XREF: core::StateInfo::fixClock(void)+50↑j
.text:000000000001E9DC                 BL              ._ZN4core9StateInfo17checkGPUClockUnitEv ; core::StateInfo::checkGPUClockUnit(void)
.text:000000000001E9E0                 LDRSW           X9, [X21] ; core::StateInfo::mVendor
.text:000000000001E9E4                 CMP             W9, #1
.text:000000000001E9E8                 B.HI            loc_1E9CC
.text:000000000001E9EC                 ADRP            X8, #_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGE
.text:000000000001E9F0                 MOV             W10, #0x3E8
.text:000000000001E9F4                 LDR             X8, [X8,#_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGEOFF]
.text:000000000001E9F8                 LDRB            W8, [X8] ; core::StateInfo::mIsGpuClockKHz
.text:000000000001E9FC                 CMP             W8, #0
.text:000000000001EA00                 CSET            W8, EQ
.text:000000000001EA04                 ORN             W8, W8, W0
.text:000000000001EA08                 TST             W8, #1
.text:000000000001EA0C                 LDR             W8, [X20] ; utils::deviceModel
.text:000000000001EA10                 CSINC           X10, X10, XZR, EQ
.text:000000000001EA14                 CMP             W8, #6
.text:000000000001EA18                 B.HI            loc_1E9CC
.text:000000000001EA1C loc_1EA1C                               ; CODE XREF: core::StateInfo::fixClock(void)+64↑j
.text:000000000001EA1C                 ADRP            X11, #unk_8590@PAGE
.text:000000000001EA20                 SXTW            X8, W8
.text:000000000001EA24                 ADD             X11, X11, #unk_8590@PAGEOFF
.text:000000000001EA28                 ADD             X8, X11, X8,LSL#5
.text:000000000001EA2C                 ADD             X8, X8, X9,LSL#4
.text:000000000001EA30                 LDR             X8, [X8,#8]
.text:000000000001EA34                 MUL             X1, X8, X10 ; unsigned __int64
.text:000000000001EA38 loc_1EA38                               ; CODE XREF: core::StateInfo::fixClock(void)+70↑j
.text:000000000001EA38                 MOV             X0, X19 ; this
.text:000000000001EA3C                 BL              ._ZN5Hwobs8fixClockEmm ; Hwobs::fixClock(ulong,ulong)
.text:000000000001EA40                 ADRP            X9, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001EA44                 MOV             W8, #1
.text:000000000001EA48                 TST             W0, #1
.text:000000000001EA4C                 LDR             X9, [X9,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001EA50                 CINC            W8, W8, EQ
.text:000000000001EA54                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001EA58                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001EA5C                 STR             W8, [X9] ; core::StateInfo::mFixClockState
.text:000000000001EA60                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000001EA64                 RET
.text:000000000001EA64 ; } // starts at 1E960
.text:000000000001EA64 ; End of function core::StateInfo::fixClock(void)
.text:000000000001EA68 ; =============== S U B R O U T I N E =======================================
.text:000000000001EA68 ; Attributes: bp-based frame
.text:000000000001EA68 ; __int64 __fastcall core::StateInfo::unfixClock(core::StateInfo *__hidden this)
.text:000000000001EA68                 EXPORT _ZN4core9StateInfo10unfixClockEv
.text:000000000001EA68 _ZN4core9StateInfo10unfixClockEv        ; DATA XREF: LOAD:0000000000001DB8↑o
.text:000000000001EA68 var_s0          =  0
.text:000000000001EA68 ; __unwind {
.text:000000000001EA68                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000001EA6C                 MOV             X29, SP
.text:000000000001EA70                 BL              ._ZN5Hwobs10unfixClockEv ; Hwobs::unfixClock(void)
.text:000000000001EA74                 ADRP            X8, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001EA78                 LDR             X8, [X8,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001EA7C                 STR             WZR, [X8] ; core::StateInfo::mFixClockState
.text:000000000001EA80                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000001EA84                 RET
.text:000000000001EA84 ; } // starts at 1EA68
.text:000000000001EA84 ; End of function core::StateInfo::unfixClock(void)
.text:000000000001EA88 ; =============== S U B R O U T I N E =======================================
.text:000000000001EA88 ; __int64 __fastcall core::StateInfo::getFixClockState(core::StateInfo *__hidden this)
.text:000000000001EA88                 EXPORT _ZN4core9StateInfo16getFixClockStateEv
.text:000000000001EA88 _ZN4core9StateInfo16getFixClockStateEv  ; DATA XREF: LOAD:0000000000001398↑o
.text:000000000001EA88 ; __unwind {
.text:000000000001EA88                 ADRP            X8, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001EA8C                 LDR             X8, [X8,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001EA90                 LDR             W0, [X8] ; core::StateInfo::mFixClockState
.text:000000000001EA94                 RET
.text:000000000001EA94 ; } // starts at 1EA88
.text:000000000001EA94 ; End of function core::StateInfo::getFixClockState(void)
.text:000000000001EA98 ; =============== S U B R O U T I N E =======================================
.text:000000000001EA98 ; Attributes: bp-based frame
.text:000000000001EA98 ; __int64 __fastcall core::StateInfo::getGPUTemperature(core::StateInfo *__hidden this)
.text:000000000001EA98                 EXPORT _ZN4core9StateInfo17getGPUTemperatureEv
.text:000000000001EA98 _ZN4core9StateInfo17getGPUTemperatureEv ; DATA XREF: LOAD:00000000000021D8↑o
.text:000000000001EA98 var_1C          = -0x1C
.text:000000000001EA98 var_18          = -0x18
.text:000000000001EA98 var_10          = -0x10
.text:000000000001EA98 var_s0          =  0
.text:000000000001EA98 ; __unwind {
.text:000000000001EA98                 SUB             SP, SP, #0x30
.text:000000000001EA9C                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001EAA0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001EAA4                 ADD             X29, SP, #0x20
.text:000000000001EAA8                 MRS             X20, #3, c13, c0, #2
.text:000000000001EAAC                 ADRP            X0, #aSysKernelGpuGp_3@PAGE ; "/sys/kernel/gpu/gpu_tmu"
.text:000000000001EAB0                 LDR             X8, [X20,#0x28]
.text:000000000001EAB4                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001EAB8                 ADD             X0, X0, #aSysKernelGpuGp_3@PAGEOFF ; "/sys/kernel/gpu/gpu_tmu"
.text:000000000001EABC                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001EAC0                 STR             X8, [SP,#0x20+var_18]
.text:000000000001EAC4                 BL              .fopen
.text:000000000001EAC8                 CBZ             X0, loc_1EB14
.text:000000000001EACC                 ADRP            X1, #aF@PAGE ; "%f "
.text:000000000001EAD0                 ADD             X1, X1, #aF@PAGEOFF ; "%f "
.text:000000000001EAD4                 ADD             X2, SP, #0x20+var_1C
.text:000000000001EAD8                 MOV             X19, X0
.text:000000000001EADC                 BL              .fscanf
.text:000000000001EAE0                 MOV             X0, X19 ; stream
.text:000000000001EAE4                 BL              .fclose
.text:000000000001EAE8                 ADRP            X8, #_ZN4core9StateInfo7mVendorE_ptr@PAGE
.text:000000000001EAEC                 LDR             X8, [X8,#_ZN4core9StateInfo7mVendorE_ptr@PAGEOFF]
.text:000000000001EAF0                 LDR             S0, [SP,#0x20+var_1C]
.text:000000000001EAF4                 LDR             W8, [X8] ; core::StateInfo::mVendor
.text:000000000001EAF8                 CMP             W8, #1
.text:000000000001EAFC                 B.NE            loc_1EB18
.text:000000000001EB00                 ADRP            X8, #dword_856C@PAGE
.text:000000000001EB04                 LDR             S1, [X8,#dword_856C@PAGEOFF]
.text:000000000001EB08                 FMUL            S0, S0, S1
.text:000000000001EB0C                 STR             S0, [SP,#0x20+var_1C]
.text:000000000001EB10                 B               loc_1EB18
.text:000000000001EB14 ; ---------------------------------------------------------------------------
.text:000000000001EB14 loc_1EB14                               ; CODE XREF: core::StateInfo::getGPUTemperature(void)+30↑j
.text:000000000001EB14                 FMOV            S0, #-1.0
.text:000000000001EB18 loc_1EB18                               ; CODE XREF: core::StateInfo::getGPUTemperature(void)+64↑j
.text:000000000001EB18                                         ; core::StateInfo::getGPUTemperature(void)+78↑j
.text:000000000001EB18                 LDR             X8, [X20,#0x28]
.text:000000000001EB1C                 LDR             X9, [SP,#0x20+var_18]
.text:000000000001EB20                 CMP             X8, X9
.text:000000000001EB24                 B.NE            loc_1EB38
.text:000000000001EB28                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001EB2C                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001EB30                 ADD             SP, SP, #0x30 ; '0'
.text:000000000001EB34                 RET
.text:000000000001EB38 ; ---------------------------------------------------------------------------
.text:000000000001EB38 loc_1EB38                               ; CODE XREF: core::StateInfo::getGPUTemperature(void)+8C↑j
.text:000000000001EB38                 BL              .__stack_chk_fail
.text:000000000001EB38 ; } // starts at 1EA98
.text:000000000001EB38 ; End of function core::StateInfo::getGPUTemperature(void)
.text:000000000001EB38 ; ---------------------------------------------------------------------------
.text:000000000001EB3C                 ALIGN 0x20
.text:000000000001EB40 ; =============== S U B R O U T I N E =======================================
.text:000000000001EB40 ; Attributes: bp-based frame
.text:000000000001EB40 ; __int64 __fastcall core::StateInfo::getMemoryUsage(core::StateInfo *__hidden this)
.text:000000000001EB40                 EXPORT _ZN4core9StateInfo14getMemoryUsageEv
.text:000000000001EB40 _ZN4core9StateInfo14getMemoryUsageEv    ; DATA XREF: LOAD:0000000000001E48↑o
.text:000000000001EB40 var_60          = -0x60
.text:000000000001EB40 var_40          = -0x40
.text:000000000001EB40 var_38          = -0x38
.text:000000000001EB40 var_30          = -0x30
.text:000000000001EB40 var_20          = -0x20
.text:000000000001EB40 var_10          = -0x10
.text:000000000001EB40 var_s0          =  0
.text:000000000001EB40 ; __unwind {
.text:000000000001EB40                 SUB             SP, SP, #0x70
.text:000000000001EB44                 STP             X24, X23, [SP,#0x60+var_30]
.text:000000000001EB48                 STP             X22, X21, [SP,#0x60+var_20]
.text:000000000001EB4C                 STP             X20, X19, [SP,#0x60+var_10]
.text:000000000001EB50                 STP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001EB54                 ADD             X29, SP, #0x60
.text:000000000001EB58                 MRS             X23, #3, c13, c0, #2
.text:000000000001EB5C                 ADRP            X0, #aProcMeminfo@PAGE ; "/proc/meminfo"
.text:000000000001EB60                 LDR             X8, [X23,#0x28]
.text:000000000001EB64                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001EB68                 ADD             X0, X0, #aProcMeminfo@PAGEOFF ; "/proc/meminfo"
.text:000000000001EB6C                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001EB70                 STR             X8, [SP,#0x60+var_38]
.text:000000000001EB74                 BL              .fopen
.text:000000000001EB78                 CBZ             X0, loc_1EC48
.text:000000000001EB7C                 MOV             X19, X0
.text:000000000001EB80                 MOV             W0, #0xF ; unsigned __int64
.text:000000000001EB84                 BL              ._Znam  ; operator new[](ulong)
.text:000000000001EB88                 MOV             X20, X0
.text:000000000001EB8C                 MOV             W0, #5  ; unsigned __int64
.text:000000000001EB90                 BL              ._Znam  ; operator new[](ulong)
.text:000000000001EB94                 ADRP            X22, #aSZuS@PAGE ; "%s %zu %s"
.text:000000000001EB98                 MOV             X21, X0
.text:000000000001EB9C                 ADD             X22, X22, #aSZuS@PAGEOFF ; "%s %zu %s"
.text:000000000001EBA0                 MOV             X3, SP
.text:000000000001EBA4                 MOV             X0, X19 ; stream
.text:000000000001EBA8                 MOV             X1, X22 ; format
.text:000000000001EBAC                 MOV             X2, X20
.text:000000000001EBB0                 MOV             X4, X21
.text:000000000001EBB4                 MOV             X24, SP
.text:000000000001EBB8                 BL              .fscanf
.text:000000000001EBBC                 ADD             X3, X24, #8
.text:000000000001EBC0                 MOV             X0, X19 ; stream
.text:000000000001EBC4                 MOV             X1, X22 ; format
.text:000000000001EBC8                 MOV             X2, X20
.text:000000000001EBCC                 MOV             X4, X21
.text:000000000001EBD0                 BL              .fscanf
.text:000000000001EBD4                 ADD             X3, X24, #0x10
.text:000000000001EBD8                 MOV             X0, X19 ; stream
.text:000000000001EBDC                 MOV             X1, X22 ; format
.text:000000000001EBE0                 MOV             X2, X20
.text:000000000001EBE4                 MOV             X4, X21
.text:000000000001EBE8                 BL              .fscanf
.text:000000000001EBEC                 ADD             X3, X24, #0x18
.text:000000000001EBF0                 MOV             X0, X19 ; stream
.text:000000000001EBF4                 MOV             X1, X22 ; format
.text:000000000001EBF8                 MOV             X2, X20
.text:000000000001EBFC                 MOV             X4, X21
.text:000000000001EC00                 BL              .fscanf
.text:000000000001EC04                 ADD             X3, X24, #0x20 ; ' '
.text:000000000001EC08                 MOV             X0, X19 ; stream
.text:000000000001EC0C                 MOV             X1, X22 ; format
.text:000000000001EC10                 MOV             X2, X20
.text:000000000001EC14                 MOV             X4, X21
.text:000000000001EC18                 BL              .fscanf
.text:000000000001EC1C                 MOV             X0, X19 ; stream
.text:000000000001EC20                 BL              .fclose
.text:000000000001EC24                 MOV             X0, X20 ; void *
.text:000000000001EC28                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000001EC2C                 MOV             X0, X21 ; void *
.text:000000000001EC30                 BL              ._ZdaPv ; operator delete[](void *)
.text:000000000001EC34                 LDP             X8, X9, [SP,#0x60+var_60]
.text:000000000001EC38                 LDR             X10, [SP,#0x60+var_40]
.text:000000000001EC3C                 SUB             X8, X8, X9
.text:000000000001EC40                 SUB             X0, X8, X10
.text:000000000001EC44                 B               loc_1EC4C
.text:000000000001EC48 ; ---------------------------------------------------------------------------
.text:000000000001EC48 loc_1EC48                               ; CODE XREF: core::StateInfo::getMemoryUsage(void)+38↑j
.text:000000000001EC48                 MOV             X0, #0xFFFFFFFFFFFFFFFF
.text:000000000001EC4C loc_1EC4C                               ; CODE XREF: core::StateInfo::getMemoryUsage(void)+104↑j
.text:000000000001EC4C                 LDR             X8, [X23,#0x28]
.text:000000000001EC50                 LDR             X9, [SP,#0x60+var_38]
.text:000000000001EC54                 CMP             X8, X9
.text:000000000001EC58                 B.NE            loc_1EC74
.text:000000000001EC5C                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001EC60                 LDP             X20, X19, [SP,#0x60+var_10]
.text:000000000001EC64                 LDP             X22, X21, [SP,#0x60+var_20]
.text:000000000001EC68                 LDP             X24, X23, [SP,#0x60+var_30]
.text:000000000001EC6C                 ADD             SP, SP, #0x70 ; 'p'
.text:000000000001EC70                 RET
.text:000000000001EC74 ; ---------------------------------------------------------------------------
.text:000000000001EC74 loc_1EC74                               ; CODE XREF: core::StateInfo::getMemoryUsage(void)+118↑j
.text:000000000001EC74                 BL              .__stack_chk_fail
.text:000000000001EC74 ; } // starts at 1EB40
.text:000000000001EC74 ; End of function core::StateInfo::getMemoryUsage(void)
.text:000000000001EC78 ; =============== S U B R O U T I N E =======================================
.text:000000000001EC78 ; Attributes: bp-based frame
.text:000000000001EC78 ; core::StateInfo::onPreSwapBuffers(core::RenderingApiType)
.text:000000000001EC78                 EXPORT _ZN4core9StateInfo16onPreSwapBuffersENS_16RenderingApiTypeE
.text:000000000001EC78 _ZN4core9StateInfo16onPreSwapBuffersENS_16RenderingApiTypeE
.text:000000000001EC78                                         ; DATA XREF: LOAD:0000000000000D98↑o
.text:000000000001EC78 var_20          = -0x20
.text:000000000001EC78 var_10          = -0x10
.text:000000000001EC78 var_s0          =  0
.text:000000000001EC78 ; __unwind {
.text:000000000001EC78                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000001EC7C                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000001EC80                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001EC84                 ADD             X29, SP, #0x20
.text:000000000001EC88                 MOV             W19, W0
.text:000000000001EC8C                 BL              ._ZN3gui13LayoutManager11getInstanceEv ; gui::LayoutManager::getInstance(void)
.text:000000000001EC90                 BL              ._ZN3gui13LayoutManager12updateConfigEv ; gui::LayoutManager::updateConfig(void)
.text:000000000001EC94                 ADRP            X20, #_ZN4core9StateInfo17mIsWidgetsUpdatedE_ptr@PAGE
.text:000000000001EC98                 AND             W8, W0, #1
.text:000000000001EC9C                 MOV             W0, W19
.text:000000000001ECA0                 LDR             X20, [X20,#_ZN4core9StateInfo17mIsWidgetsUpdatedE_ptr@PAGEOFF]
.text:000000000001ECA4                 STRB            W8, [X20] ; core::StateInfo::mIsWidgetsUpdated
.text:000000000001ECA8                 BL              ._ZN4core9StateInfo16isOverlayEnabledENS_16RenderingApiTypeE ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)
.text:000000000001ECAC                 LDRB            W8, [X20] ; core::StateInfo::mIsWidgetsUpdated
.text:000000000001ECB0                 MOV             W19, W0
.text:000000000001ECB4                 CBZ             W8, loc_1ED38
.text:000000000001ECB8                 TBZ             W19, #0, loc_1ED28
.text:000000000001ECBC                 ADRP            X8, #_ZN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001ECC0                 LDR             X8, [X8,#_ZN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF]
.text:000000000001ECC4                 LDR             X8, [X8] ; core::StateInfo::mFixClockProp
.text:000000000001ECC8                 LDRB            W8, [X8,#0x28]
.text:000000000001ECCC                 CBZ             W8, loc_1ED28
.text:000000000001ECD0                 ADRP            X21, #_ZN4core9StateInfo7mVendorE_ptr@PAGE
.text:000000000001ECD4                 LDR             X21, [X21,#_ZN4core9StateInfo7mVendorE_ptr@PAGEOFF]
.text:000000000001ECD8                 LDRSW           X9, [X21] ; core::StateInfo::mVendor
.text:000000000001ECDC                 CMP             W9, #1
.text:000000000001ECE0                 B.HI            loc_1ED4C
.text:000000000001ECE4                 ADRP            X20, #_ZN5utils11deviceModelE_ptr@PAGE
.text:000000000001ECE8                 LDR             X20, [X20,#_ZN5utils11deviceModelE_ptr@PAGEOFF]
.text:000000000001ECEC                 LDR             W8, [X20] ; utils::deviceModel
.text:000000000001ECF0                 CMP             W8, #6
.text:000000000001ECF4                 B.HI            loc_1ED58
.text:000000000001ECF8                 ADRP            X11, #unk_8590@PAGE
.text:000000000001ECFC                 SXTW            X10, W8
.text:000000000001ED00                 ADD             X11, X11, #unk_8590@PAGEOFF
.text:000000000001ED04                 ADD             X10, X11, X10,LSL#5
.text:000000000001ED08                 LSL             X11, X9, #4
.text:000000000001ED0C                 LDR             X19, [X10,X11]
.text:000000000001ED10                 CBZ             W9, loc_1ED60
.text:000000000001ED14 loc_1ED14                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+E4↓j
.text:000000000001ED14                 MOV             W10, #1
.text:000000000001ED18                 MOV             W9, #1
.text:000000000001ED1C                 CMP             W8, #6
.text:000000000001ED20                 B.HI            loc_1ED50
.text:000000000001ED24                 B               loc_1EDA0
.text:000000000001ED28 ; ---------------------------------------------------------------------------
.text:000000000001ED28 loc_1ED28                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+40↑j
.text:000000000001ED28                                         ; core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+54↑j
.text:000000000001ED28                 BL              ._ZN5Hwobs10unfixClockEv ; Hwobs::unfixClock(void)
.text:000000000001ED2C                 ADRP            X8, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001ED30                 LDR             X8, [X8,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001ED34                 STR             WZR, [X8] ; core::StateInfo::mFixClockState
.text:000000000001ED38 loc_1ED38                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+3C↑j
.text:000000000001ED38                 TBNZ            W19, #0, loc_1EDDC
.text:000000000001ED3C                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001ED40                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001ED44                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000001ED48                 RET
.text:000000000001ED4C ; ---------------------------------------------------------------------------
.text:000000000001ED4C loc_1ED4C                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+68↑j
.text:000000000001ED4C                 MOV             X19, XZR
.text:000000000001ED50 loc_1ED50                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+A8↑j
.text:000000000001ED50                                         ; core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+F4↓j ...
.text:000000000001ED50                 MOV             X1, XZR
.text:000000000001ED54                 B               loc_1EDBC
.text:000000000001ED58 ; ---------------------------------------------------------------------------
.text:000000000001ED58 loc_1ED58                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+7C↑j
.text:000000000001ED58                 MOV             X19, XZR
.text:000000000001ED5C                 CBNZ            W9, loc_1ED14
.text:000000000001ED60 loc_1ED60                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+98↑j
.text:000000000001ED60                 BL              ._ZN4core9StateInfo17checkGPUClockUnitEv ; core::StateInfo::checkGPUClockUnit(void)
.text:000000000001ED64                 LDRSW           X9, [X21] ; core::StateInfo::mVendor
.text:000000000001ED68                 CMP             W9, #1
.text:000000000001ED6C                 B.HI            loc_1ED50
.text:000000000001ED70                 ADRP            X8, #_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGE
.text:000000000001ED74                 MOV             W10, #0x3E8
.text:000000000001ED78                 LDR             X8, [X8,#_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGEOFF]
.text:000000000001ED7C                 LDRB            W8, [X8] ; core::StateInfo::mIsGpuClockKHz
.text:000000000001ED80                 CMP             W8, #0
.text:000000000001ED84                 CSET            W8, EQ
.text:000000000001ED88                 ORN             W8, W8, W0
.text:000000000001ED8C                 TST             W8, #1
.text:000000000001ED90                 LDR             W8, [X20] ; utils::deviceModel
.text:000000000001ED94                 CSINC           X10, X10, XZR, EQ
.text:000000000001ED98                 CMP             W8, #6
.text:000000000001ED9C                 B.HI            loc_1ED50
.text:000000000001EDA0 loc_1EDA0                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+AC↑j
.text:000000000001EDA0                 ADRP            X11, #unk_8590@PAGE
.text:000000000001EDA4                 SXTW            X8, W8
.text:000000000001EDA8                 ADD             X11, X11, #unk_8590@PAGEOFF
.text:000000000001EDAC                 ADD             X8, X11, X8,LSL#5
.text:000000000001EDB0                 ADD             X8, X8, X9,LSL#4
.text:000000000001EDB4                 LDR             X8, [X8,#8]
.text:000000000001EDB8                 MUL             X1, X8, X10 ; unsigned __int64
.text:000000000001EDBC loc_1EDBC                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType)+DC↑j
.text:000000000001EDBC                 MOV             X0, X19 ; this
.text:000000000001EDC0                 BL              ._ZN5Hwobs8fixClockEmm ; Hwobs::fixClock(ulong,ulong)
.text:000000000001EDC4                 ADRP            X9, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001EDC8                 MOV             W8, #1
.text:000000000001EDCC                 TST             W0, #1
.text:000000000001EDD0                 LDR             X9, [X9,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001EDD4                 CINC            W8, W8, EQ
.text:000000000001EDD8                 STR             W8, [X9] ; core::StateInfo::mFixClockState
.text:000000000001EDDC loc_1EDDC                               ; CODE XREF: core::StateInfo::onPreSwapBuffers(core::RenderingApiType):loc_1ED38↑j
.text:000000000001EDDC                 BL              ._ZN19KeyEventInterceptor11getInstanceEv ; KeyEventInterceptor::getInstance(void)
.text:000000000001EDE0                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000001EDE4                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000001EDE8                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000001EDEC                 B               ._ZN19KeyEventInterceptor11updateStateEv ; KeyEventInterceptor::updateState(void)
.text:000000000001EDEC ; } // starts at 1EC78
.text:000000000001EDEC ; End of function core::StateInfo::onPreSwapBuffers(core::RenderingApiType)
.text:000000000001EDF0 ; =============== S U B R O U T I N E =======================================
.text:000000000001EDF0 ; Attributes: bp-based frame
.text:000000000001EDF0 ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)
.text:000000000001EDF0                 EXPORT _ZN4core9StateInfo16isOverlayEnabledENS_16RenderingApiTypeE
.text:000000000001EDF0 _ZN4core9StateInfo16isOverlayEnabledENS_16RenderingApiTypeE
.text:000000000001EDF0                                         ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+C↓j
.text:000000000001EDF0                                         ; DATA XREF: LOAD:0000000000000DF8↑o ...
.text:000000000001EDF0 var_70          = -0x70
.text:000000000001EDF0 var_68          = -0x68
.text:000000000001EDF0 var_60          = -0x60
.text:000000000001EDF0 var_58          = -0x58
.text:000000000001EDF0 var_50          = -0x50
.text:000000000001EDF0 var_48          = -0x48
.text:000000000001EDF0 var_40          = -0x40
.text:000000000001EDF0 var_38          = -0x38
.text:000000000001EDF0 var_30          = -0x30
.text:000000000001EDF0 var_20          = -0x20
.text:000000000001EDF0 var_10          = -0x10
.text:000000000001EDF0 var_s0          =  0
.text:000000000001EDF0 ; __unwind {
.text:000000000001EDF0                 SUB             SP, SP, #0x80
.text:000000000001EDF4                 STP             X24, X23, [SP,#0x70+var_30]
.text:000000000001EDF8                 STP             X22, X21, [SP,#0x70+var_20]
.text:000000000001EDFC                 STP             X20, X19, [SP,#0x70+var_10]
.text:000000000001EE00                 STP             X29, X30, [SP,#0x70+var_s0]
.text:000000000001EE04                 ADD             X29, SP, #0x70
.text:000000000001EE08                 MRS             X20, #3, c13, c0, #2
.text:000000000001EE0C                 MOV             W19, W0
.text:000000000001EE10                 LDR             X8, [X20,#0x28]
.text:000000000001EE14                 STR             X8, [SP,#0x70+var_38]
.text:000000000001EE18                 ADRP            X8, #unk_31118@PAGE
.text:000000000001EE1C                 ADD             X8, X8, #unk_31118@PAGEOFF
.text:000000000001EE20                 LDAR            X8, [X8]
.text:000000000001EE24                 CMN             X8, #1
.text:000000000001EE28                 B.EQ            loc_1EE54
.text:000000000001EE2C                 ADRP            X0, #unk_31118@PAGE
.text:000000000001EE30                 ADRP            X2, #loc_1F820@PAGE
.text:000000000001EE34                 ADD             X8, SP, #0x70+var_40
.text:000000000001EE38                 ADD             X9, SP, #0x70+var_58
.text:000000000001EE3C                 ADD             X0, X0, #unk_31118@PAGEOFF ; this
.text:000000000001EE40                 ADD             X2, X2, #loc_1F820@PAGEOFF ; void *
.text:000000000001EE44                 STR             X8, [SP,#0x70+var_58]
.text:000000000001EE48                 MOV             X1, SP  ; volatile unsigned __int64 *
.text:000000000001EE4C                 STR             X9, [SP,#0x70+var_70]
.text:000000000001EE50                 BL              ._ZNSt3__111__call_onceERVmPvPFvS2_E ; std::__1::__call_once(ulong volatile&,void *,void (*)(void *))
.text:000000000001EE54 loc_1EE54                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+38↑j
.text:000000000001EE54                 ADRP            X8, #_ZN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001EE58                 LDR             X8, [X8,#_ZN4core9StateInfo11mStatusPropE_ptr@PAGEOFF]
.text:000000000001EE5C                 LDR             X8, [X8] ; core::StateInfo::mStatusProp
.text:000000000001EE60                 LDRB            W8, [X8,#0x28]
.text:000000000001EE64                 CBZ             W8, loc_1EF40
.text:000000000001EE68                 ADRP            X8, #_ZN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001EE6C                 LDR             X8, [X8,#_ZN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF]
.text:000000000001EE70                 LDR             X8, [X8] ; core::StateInfo::mRenderApiProp
.text:000000000001EE74                 LDR             W8, [X8,#0x28]
.text:000000000001EE78                 CMP             W8, W19
.text:000000000001EE7C                 B.NE            loc_1EF40
.text:000000000001EE80                 ADD             X8, SP, #0x70+var_58
.text:000000000001EE84                 ADD             X23, SP, #0x70+var_58
.text:000000000001EE88                 BL              sub_1F338
.text:000000000001EE8C                 ADRP            X8, #_ZN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001EE90                 LDR             X8, [X8,#_ZN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF]
.text:000000000001EE94                 LDR             X21, [X8] ; core::StateInfo::mDebugProcessNameProp
.text:000000000001EE98                 ADD             X19, X21, #0x40 ; '@'
.text:000000000001EE9C                 MOV             X0, X19 ; this
.text:000000000001EEA0                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001EEA4                 ADD             X1, X21, #0x28 ; '('
.text:000000000001EEA8                 MOV             X0, SP
.text:000000000001EEAC                 MOV             X24, SP
.text:000000000001EEB0                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:000000000001EEB4                 MOV             X0, X19 ; this
.text:000000000001EEB8                 BL              ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001EEBC                 LDRB            W8, [SP,#0x70+var_58]
.text:000000000001EEC0                 LDRB            W22, [SP,#0x70+var_70]
.text:000000000001EEC4                 LDR             X10, [SP,#0x70+var_50]
.text:000000000001EEC8                 LDR             X11, [SP,#0x70+var_68]
.text:000000000001EECC                 TST             W8, #1
.text:000000000001EED0                 AND             W21, W8, #1
.text:000000000001EED4                 LSR             X9, X8, #1
.text:000000000001EED8                 LSR             X8, X22, #1
.text:000000000001EEDC                 CSEL            X2, X9, X10, EQ ; n
.text:000000000001EEE0                 TST             W22, #1
.text:000000000001EEE4                 CSEL            X8, X8, X11, EQ
.text:000000000001EEE8                 CMP             X2, X8
.text:000000000001EEEC                 B.NE            loc_1EF48
.text:000000000001EEF0                 LDR             X10, [SP,#0x70+var_48]
.text:000000000001EEF4                 ORR             X8, X23, #1
.text:000000000001EEF8                 LDR             X11, [SP,#0x70+var_60]
.text:000000000001EEFC                 CMP             W21, #0
.text:000000000001EF00                 ORR             X12, X24, #1
.text:000000000001EF04                 CSEL            X0, X8, X10, EQ ; s1
.text:000000000001EF08                 TST             W22, #1
.text:000000000001EF0C                 CSEL            X1, X12, X11, EQ ; s2
.text:000000000001EF10                 CBNZ            W21, loc_1EF98
.text:000000000001EF14                 CBZ             X2, loc_1EFB0
.text:000000000001EF18                 NEG             X9, X9
.text:000000000001EF1C loc_1EF1C                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+148↓j
.text:000000000001EF1C                 LDRB            W10, [X8]
.text:000000000001EF20                 LDRB            W11, [X1]
.text:000000000001EF24                 CMP             W10, W11
.text:000000000001EF28                 B.NE            loc_1EF48
.text:000000000001EF2C                 ADD             X8, X8, #1
.text:000000000001EF30                 ADD             X1, X1, #1
.text:000000000001EF34                 ADDS            X9, X9, #1
.text:000000000001EF38                 B.CC            loc_1EF1C
.text:000000000001EF3C                 B               loc_1EFB0
.text:000000000001EF40 ; ---------------------------------------------------------------------------
.text:000000000001EF40 loc_1EF40                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+74↑j
.text:000000000001EF40                                         ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)+8C↑j
.text:000000000001EF40                 MOV             W19, WZR
.text:000000000001EF44                 B               loc_1EF6C
.text:000000000001EF48 ; ---------------------------------------------------------------------------
.text:000000000001EF48 loc_1EF48                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+FC↑j
.text:000000000001EF48                                         ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)+138↑j
.text:000000000001EF48                 MOV             W19, WZR
.text:000000000001EF4C                 TBZ             W22, #0, loc_1EF60
.text:000000000001EF50 loc_1EF50                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+1B8↓j
.text:000000000001EF50                                         ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)+1C4↓j
.text:000000000001EF50                 LDR             X0, [SP,#0x70+var_60] ; void *
.text:000000000001EF54                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001EF58                 LDRB            W8, [SP,#0x70+var_58]
.text:000000000001EF5C                 AND             W21, W8, #1
.text:000000000001EF60 loc_1EF60                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+15C↑j
.text:000000000001EF60                                         ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)+1BC↓j ...
.text:000000000001EF60                 CBZ             W21, loc_1EF6C
.text:000000000001EF64                 LDR             X0, [SP,#0x70+var_48] ; void *
.text:000000000001EF68                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001EF6C loc_1EF6C                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+154↑j
.text:000000000001EF6C                                         ; core::StateInfo::isOverlayEnabled(core::RenderingApiType):loc_1EF60↑j
.text:000000000001EF6C                 LDR             X8, [X20,#0x28]
.text:000000000001EF70                 LDR             X9, [SP,#0x70+var_38]
.text:000000000001EF74                 CMP             X8, X9
.text:000000000001EF78                 B.NE            loc_1EFBC
.text:000000000001EF7C                 MOV             W0, W19
.text:000000000001EF80                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:000000000001EF84                 LDP             X20, X19, [SP,#0x70+var_10]
.text:000000000001EF88                 LDP             X22, X21, [SP,#0x70+var_20]
.text:000000000001EF8C                 LDP             X24, X23, [SP,#0x70+var_30]
.text:000000000001EF90                 ADD             SP, SP, #0x80
.text:000000000001EF94                 RET
.text:000000000001EF98 ; ---------------------------------------------------------------------------
.text:000000000001EF98 loc_1EF98                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+120↑j
.text:000000000001EF98                 CBZ             X2, loc_1EFB0
.text:000000000001EF9C                 BL              .memcmp
.text:000000000001EFA0                 CMP             W0, #0
.text:000000000001EFA4                 CSET            W19, EQ
.text:000000000001EFA8                 TBNZ            W22, #0, loc_1EF50
.text:000000000001EFAC                 B               loc_1EF60
.text:000000000001EFB0 ; ---------------------------------------------------------------------------
.text:000000000001EFB0 loc_1EFB0                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+124↑j
.text:000000000001EFB0                                         ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)+14C↑j ...
.text:000000000001EFB0                 MOV             W19, #1
.text:000000000001EFB4                 TBNZ            W22, #0, loc_1EF50
.text:000000000001EFB8                 B               loc_1EF60
.text:000000000001EFBC ; ---------------------------------------------------------------------------
.text:000000000001EFBC loc_1EFBC                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+188↑j
.text:000000000001EFBC                 BL              .__stack_chk_fail
.text:000000000001EFBC ; } // starts at 1EDF0
.text:000000000001EFBC ; End of function core::StateInfo::isOverlayEnabled(core::RenderingApiType)
.text:000000000001EFC0 ; =============== S U B R O U T I N E =======================================
.text:000000000001EFC0 ; Attributes: bp-based frame
.text:000000000001EFC0 ; core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *, std::__1::allocator<drawer::Drawer *>> const&)
.text:000000000001EFC0                 EXPORT _ZN4core9StateInfo17onPostSwapBuffersERKNSt3__16vectorIPN6drawer6DrawerENS1_9allocatorIS5_EEEE
.text:000000000001EFC0 _ZN4core9StateInfo17onPostSwapBuffersERKNSt3__16vectorIPN6drawer6DrawerENS1_9allocatorIS5_EEEE
.text:000000000001EFC0                                         ; DATA XREF: LOAD:0000000000001458↑o
.text:000000000001EFC0 var_88          = -0x88
.text:000000000001EFC0 var_78          = -0x78
.text:000000000001EFC0 var_70          = -0x70
.text:000000000001EFC0 var_68          = -0x68
.text:000000000001EFC0 var_58          = -0x58
.text:000000000001EFC0 var_48          = -0x48
.text:000000000001EFC0 var_38          = -0x38
.text:000000000001EFC0 var_30          = -0x30
.text:000000000001EFC0 var_20          = -0x20
.text:000000000001EFC0 var_10          = -0x10
.text:000000000001EFC0 var_s0          =  0
.text:000000000001EFC0 ; __unwind {
.text:000000000001EFC0                 SUB             SP, SP, #0xA0
.text:000000000001EFC4                 STR             X23, [SP,#0x90+var_30]
.text:000000000001EFC8                 STP             X22, X21, [SP,#0x90+var_20]
.text:000000000001EFCC                 STP             X20, X19, [SP,#0x90+var_10]
.text:000000000001EFD0                 STP             X29, X30, [SP,#0x90+var_s0]
.text:000000000001EFD4                 ADD             X29, SP, #0x90
.text:000000000001EFD8                 MRS             X20, #3, c13, c0, #2
.text:000000000001EFDC                 ADRP            X22, #_ZN4core9StateInfo12mFrameNumberE_ptr@PAGE
.text:000000000001EFE0                 LDR             X8, [X20,#0x28]
.text:000000000001EFE4                 ADRP            X21, #_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGE
.text:000000000001EFE8                 MOV             X19, X0
.text:000000000001EFEC                 LDR             X22, [X22,#_ZN4core9StateInfo12mFrameNumberE_ptr@PAGEOFF]
.text:000000000001EFF0                 STUR            X8, [X29,#var_38]
.text:000000000001EFF4                 LDR             X21, [X21,#_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGEOFF]
.text:000000000001EFF8                 LDR             X8, [X22] ; core::StateInfo::mFrameNumber
.text:000000000001EFFC                 LDRB            W9, [X21] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F000                 ADD             X8, X8, #1
.text:000000000001F004                 STR             X8, [X22] ; core::StateInfo::mFrameNumber
.text:000000000001F008                 CBZ             W9, loc_1F0C0
.text:000000000001F00C                 BL              ._ZNSt3__16chrono12system_clock3nowEv ; std::__1::chrono::system_clock::now(void)
.text:000000000001F010                 ADRP            X8, #_ZN3gui12gWidgetsMetaE_ptr@PAGE
.text:000000000001F014                 MOVI            V0.2D, #0
.text:000000000001F018                 MOV             X9, #0xE353F7CF
.text:000000000001F020                 LDR             X8, [X8,#_ZN3gui12gWidgetsMetaE_ptr@PAGEOFF]
.text:000000000001F024                 MOVK            X9, #0x9BA5,LSL#32
.text:000000000001F028                 MOVK            X9, #0x20C4,LSL#48
.text:000000000001F02C                 LDR             X10, [X22] ; core::StateInfo::mFrameNumber
.text:000000000001F030                 STR             XZR, [SP,#0x90+var_78]
.text:000000000001F034                 SMULH           X9, X0, X9
.text:000000000001F038                 STUR            Q0, [SP,#0x90+var_48]
.text:000000000001F03C                 LDP             X11, X8, [X8]
.text:000000000001F040                 ASR             X12, X9, #7
.text:000000000001F044                 ADD             X9, X12, X9,LSR#63
.text:000000000001F048                 STUR            Q0, [SP,#0x90+var_58]
.text:000000000001F04C                 STUR            Q0, [SP,#0x90+var_68]
.text:000000000001F050                 SUBS            X8, X8, X11
.text:000000000001F054                 STR             WZR, [SP,#0x90+var_70]
.text:000000000001F058                 STP             X10, X9, [SP,#0x90+var_88]
.text:000000000001F05C                 B.EQ            loc_1F070
.text:000000000001F060                 ADD             X9, SP, #0x90+var_88
.text:000000000001F064                 ADD             X0, X9, #0x20 ; ' '
.text:000000000001F068                 ASR             X1, X8, #4
.text:000000000001F06C                 BL              sub_1F4F0
.text:000000000001F070 loc_1F070                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+9C↑j
.text:000000000001F070                 LDP             X22, X23, [X19]
.text:000000000001F074                 CMP             X22, X23
.text:000000000001F078                 B.EQ            loc_1F098
.text:000000000001F07C loc_1F07C                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+D4↓j
.text:000000000001F07C                 LDR             X0, [X22],#8
.text:000000000001F080                 LDR             X8, [X0]
.text:000000000001F084                 ADD             X1, SP, #0x90+var_88
.text:000000000001F088                 LDR             X8, [X8,#0x18]
.text:000000000001F08C                 BLR             X8
.text:000000000001F090                 CMP             X23, X22
.text:000000000001F094                 B.NE            loc_1F07C
.text:000000000001F098 loc_1F098                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+B8↑j
.text:000000000001F098                 ADD             X0, SP, #0x90+var_88
.text:000000000001F09C                 BL              ._ZN5Hwobs7addDumpERKNS_9FrameDumpE ; Hwobs::addDump(Hwobs::FrameDump const&)
.text:000000000001F0A0                 LDR             X0, [SP,#0x90+var_58+8] ; void *
.text:000000000001F0A4                 CBZ             X0, loc_1F0B0
.text:000000000001F0A8                 STR             X0, [SP,#0x90+var_48]
.text:000000000001F0AC                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001F0B0 loc_1F0B0                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+E4↑j
.text:000000000001F0B0                 LDR             X0, [SP,#0x90+var_68] ; void *
.text:000000000001F0B4                 CBZ             X0, loc_1F0C0
.text:000000000001F0B8                 STR             X0, [SP,#0x90+var_68+8]
.text:000000000001F0BC                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001F0C0 loc_1F0C0                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+48↑j
.text:000000000001F0C0                                         ; core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+F4↑j
.text:000000000001F0C0                 ADRP            X8, #_ZN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001F0C4                 LDR             X8, [X8,#_ZN4core9StateInfo12mDevModePropE_ptr@PAGEOFF]
.text:000000000001F0C8                 LDR             X8, [X8] ; core::StateInfo::mDevModeProp
.text:000000000001F0CC                 LDRB            W8, [X8,#0x28]
.text:000000000001F0D0                 CBZ             W8, loc_1F138
.text:000000000001F0D4                 BL              ._ZN19KeyEventInterceptor11getInstanceEv ; KeyEventInterceptor::getInstance(void)
.text:000000000001F0D8                 LDRB            W8, [X0,#1]
.text:000000000001F0DC                 CBZ             W8, loc_1F138
.text:000000000001F0E0                 LDRB            W8, [X21] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F0E4                 EOR             W9, W8, #1
.text:000000000001F0E8                 STRB            W9, [X21] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F0EC                 CBZ             W8, loc_1F0F8
.text:000000000001F0F0                 BL              ._ZN5Hwobs13finishDumpingEv ; Hwobs::finishDumping(void)
.text:000000000001F0F4                 B               loc_1F138
.text:000000000001F0F8 ; ---------------------------------------------------------------------------
.text:000000000001F0F8 loc_1F0F8                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+12C↑j
.text:000000000001F0F8                 ADRP            X8, #_ZN4core9StateInfo17mIsNeedToResetFpsE_ptr@PAGE
.text:000000000001F0FC                 LDP             X21, X19, [X19]
.text:000000000001F100                 MOV             W9, #1
.text:000000000001F104                 LDR             X8, [X8,#_ZN4core9StateInfo17mIsNeedToResetFpsE_ptr@PAGEOFF]
.text:000000000001F108                 CMP             X21, X19
.text:000000000001F10C                 STRB            W9, [X8] ; core::StateInfo::mIsNeedToResetFps
.text:000000000001F110                 B.EQ            loc_1F12C
.text:000000000001F114 loc_1F114                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+168↓j
.text:000000000001F114                 LDR             X0, [X21],#8
.text:000000000001F118                 LDR             X8, [X0]
.text:000000000001F11C                 LDR             X8, [X8,#0x20]
.text:000000000001F120                 BLR             X8
.text:000000000001F124                 CMP             X19, X21
.text:000000000001F128                 B.NE            loc_1F114
.text:000000000001F12C loc_1F12C                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+150↑j
.text:000000000001F12C                 ADRP            X0, #_ZN3gui12gWidgetsMetaE_ptr@PAGE
.text:000000000001F130                 LDR             X0, [X0,#_ZN3gui12gWidgetsMetaE_ptr@PAGEOFF]
.text:000000000001F134                 BL              ._ZN5Hwobs12startDumpingERKNSt3__16vectorINS_14DumpWidgetMetaENS0_9allocatorIS2_EEEE ; Hwobs::startDumping(std::__1::vector<Hwobs::DumpWidgetMeta,std::__1::allocator<Hwobs::DumpWidgetMeta>> const&)
.text:000000000001F138 loc_1F138                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+110↑j
.text:000000000001F138                                         ; core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+11C↑j ...
.text:000000000001F138                 LDR             X8, [X20,#0x28]
.text:000000000001F13C                 LDUR            X9, [X29,#var_38]
.text:000000000001F140                 CMP             X8, X9
.text:000000000001F144                 B.NE            loc_1F160
.text:000000000001F148                 LDP             X29, X30, [SP,#0x90+var_s0]
.text:000000000001F14C                 LDP             X20, X19, [SP,#0x90+var_10]
.text:000000000001F150                 LDP             X22, X21, [SP,#0x90+var_20]
.text:000000000001F154                 LDR             X23, [SP,#0x90+var_30]
.text:000000000001F158                 ADD             SP, SP, #0xA0
.text:000000000001F15C                 RET
.text:000000000001F160 ; ---------------------------------------------------------------------------
.text:000000000001F160 loc_1F160                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+184↑j
.text:000000000001F160                 BL              .__stack_chk_fail
.text:000000000001F160 ; } // starts at 1EFC0
.text:000000000001F160 ; End of function core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)
.text:000000000001F160 ; ---------------------------------------------------------------------------
.text:000000000001F164                 ALIGN 8
.text:000000000001F168 ; =============== S U B R O U T I N E =======================================
.text:000000000001F168 ; Attributes: bp-based frame
.text:000000000001F168 ; __int64 __fastcall core::StateInfo::onAttached(core::StateInfo *__hidden this, std::__1::mutex *)
.text:000000000001F168                 EXPORT _ZN4core9StateInfo10onAttachedERNSt3__15mutexE
.text:000000000001F168 _ZN4core9StateInfo10onAttachedERNSt3__15mutexE
.text:000000000001F168                                         ; DATA XREF: LOAD:0000000000001290↑o
.text:000000000001F168 var_60          = -0x60
.text:000000000001F168 var_40          = -0x40
.text:000000000001F168 var_28          = -0x28
.text:000000000001F168 var_20          = -0x20
.text:000000000001F168 var_10          = -0x10
.text:000000000001F168 var_s0          =  0
.text:000000000001F168 ; __unwind {
.text:000000000001F168                 SUB             SP, SP, #0x70
.text:000000000001F16C                 STP             X22, X21, [SP,#0x60+var_20]
.text:000000000001F170                 STP             X20, X19, [SP,#0x60+var_10]
.text:000000000001F174                 STP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001F178                 ADD             X29, SP, #0x60
.text:000000000001F17C                 MRS             X20, #3, c13, c0, #2
.text:000000000001F180                 ADRP            X9, #off_300F8@PAGE
.text:000000000001F184                 LDR             X8, [X20,#0x28]
.text:000000000001F188                 ADD             X9, X9, #off_300F8@PAGEOFF
.text:000000000001F18C                 MOV             X19, SP
.text:000000000001F190                 STUR            X8, [X29,#var_28]
.text:000000000001F194                 STP             X9, X0, [SP,#0x60+var_60]
.text:000000000001F198                 MOV             X0, SP
.text:000000000001F19C                 STR             X19, [SP,#0x60+var_40]
.text:000000000001F1A0                 BL              ._ZN5Hwobs35registerAppBecomeBackgroundListenerENSt3__18functionIFvvEEE ; Hwobs::registerAppBecomeBackgroundListener(std::__1::function<void ()(void)>)
.text:000000000001F1A4                 LDR             X0, [SP,#0x60+var_40]
.text:000000000001F1A8                 CMP             X19, X0
.text:000000000001F1AC                 B.EQ            loc_1F1C0
.text:000000000001F1B0                 CBZ             X0, loc_1F1CC
.text:000000000001F1B4                 LDR             X8, [X0]
.text:000000000001F1B8                 LDR             X8, [X8,#0x28]
.text:000000000001F1BC                 B               loc_1F1C8
.text:000000000001F1C0 ; ---------------------------------------------------------------------------
.text:000000000001F1C0 loc_1F1C0                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+44↑j
.text:000000000001F1C0                 LDR             X8, [X0]
.text:000000000001F1C4                 LDR             X8, [X8,#0x20]
.text:000000000001F1C8 loc_1F1C8                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+54↑j
.text:000000000001F1C8                 BLR             X8
.text:000000000001F1CC loc_1F1CC                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+48↑j
.text:000000000001F1CC                 ADRP            X8, #_ZN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001F1D0                 LDR             X8, [X8,#_ZN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF]
.text:000000000001F1D4                 LDR             X8, [X8] ; core::StateInfo::mFixClockProp
.text:000000000001F1D8                 LDRB            W8, [X8,#0x28]
.text:000000000001F1DC                 CBZ             W8, loc_1F238
.text:000000000001F1E0                 ADRP            X22, #_ZN4core9StateInfo7mVendorE_ptr@PAGE
.text:000000000001F1E4                 LDR             X22, [X22,#_ZN4core9StateInfo7mVendorE_ptr@PAGEOFF]
.text:000000000001F1E8                 LDRSW           X9, [X22] ; core::StateInfo::mVendor
.text:000000000001F1EC                 CMP             W9, #1
.text:000000000001F1F0                 B.HI            loc_1F244
.text:000000000001F1F4                 ADRP            X21, #_ZN5utils11deviceModelE_ptr@PAGE
.text:000000000001F1F8                 LDR             X21, [X21,#_ZN5utils11deviceModelE_ptr@PAGEOFF]
.text:000000000001F1FC                 LDR             W8, [X21] ; utils::deviceModel
.text:000000000001F200                 CMP             W8, #6
.text:000000000001F204                 B.HI            loc_1F250
.text:000000000001F208                 ADRP            X11, #unk_8590@PAGE
.text:000000000001F20C                 SXTW            X10, W8
.text:000000000001F210                 ADD             X11, X11, #unk_8590@PAGEOFF
.text:000000000001F214                 ADD             X10, X11, X10,LSL#5
.text:000000000001F218                 LSL             X11, X9, #4
.text:000000000001F21C                 LDR             X19, [X10,X11]
.text:000000000001F220                 CBZ             W9, loc_1F258
.text:000000000001F224 loc_1F224                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+EC↓j
.text:000000000001F224                 MOV             W10, #1
.text:000000000001F228                 MOV             W9, #1
.text:000000000001F22C                 CMP             W8, #6
.text:000000000001F230                 B.HI            loc_1F248
.text:000000000001F234                 B               loc_1F298
.text:000000000001F238 ; ---------------------------------------------------------------------------
.text:000000000001F238 loc_1F238                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+74↑j
.text:000000000001F238                 BL              ._ZN5Hwobs10unfixClockEv ; Hwobs::unfixClock(void)
.text:000000000001F23C                 MOV             W8, WZR
.text:000000000001F240                 B               loc_1F2C8
.text:000000000001F244 ; ---------------------------------------------------------------------------
.text:000000000001F244 loc_1F244                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+88↑j
.text:000000000001F244                 MOV             X19, XZR
.text:000000000001F248 loc_1F248                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+C8↑j
.text:000000000001F248                                         ; core::StateInfo::onAttached(std::__1::mutex &)+FC↓j ...
.text:000000000001F248                 MOV             X1, XZR
.text:000000000001F24C                 B               loc_1F2B4
.text:000000000001F250 ; ---------------------------------------------------------------------------
.text:000000000001F250 loc_1F250                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+9C↑j
.text:000000000001F250                 MOV             X19, XZR
.text:000000000001F254                 CBNZ            W9, loc_1F224
.text:000000000001F258 loc_1F258                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+B8↑j
.text:000000000001F258                 BL              ._ZN4core9StateInfo17checkGPUClockUnitEv ; core::StateInfo::checkGPUClockUnit(void)
.text:000000000001F25C                 LDRSW           X9, [X22] ; core::StateInfo::mVendor
.text:000000000001F260                 CMP             W9, #1
.text:000000000001F264                 B.HI            loc_1F248
.text:000000000001F268                 ADRP            X8, #_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGE
.text:000000000001F26C                 MOV             W10, #0x3E8
.text:000000000001F270                 LDR             X8, [X8,#_ZN4core9StateInfo14mIsGpuClockKHzE_ptr@PAGEOFF]
.text:000000000001F274                 LDRB            W8, [X8] ; core::StateInfo::mIsGpuClockKHz
.text:000000000001F278                 CMP             W8, #0
.text:000000000001F27C                 CSET            W8, EQ
.text:000000000001F280                 ORN             W8, W8, W0
.text:000000000001F284                 TST             W8, #1
.text:000000000001F288                 LDR             W8, [X21] ; utils::deviceModel
.text:000000000001F28C                 CSINC           X10, X10, XZR, EQ
.text:000000000001F290                 CMP             W8, #6
.text:000000000001F294                 B.HI            loc_1F248
.text:000000000001F298 loc_1F298                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+CC↑j
.text:000000000001F298                 ADRP            X11, #unk_8590@PAGE
.text:000000000001F29C                 SXTW            X8, W8
.text:000000000001F2A0                 ADD             X11, X11, #unk_8590@PAGEOFF
.text:000000000001F2A4                 ADD             X8, X11, X8,LSL#5
.text:000000000001F2A8                 ADD             X8, X8, X9,LSL#4
.text:000000000001F2AC                 LDR             X8, [X8,#8]
.text:000000000001F2B0                 MUL             X1, X8, X10 ; unsigned __int64
.text:000000000001F2B4 loc_1F2B4                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+E4↑j
.text:000000000001F2B4                 MOV             X0, X19 ; this
.text:000000000001F2B8                 BL              ._ZN5Hwobs8fixClockEmm ; Hwobs::fixClock(ulong,ulong)
.text:000000000001F2BC                 TST             W0, #1
.text:000000000001F2C0                 MOV             W8, #1
.text:000000000001F2C4                 CINC            W8, W8, EQ
.text:000000000001F2C8 loc_1F2C8                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+D8↑j
.text:000000000001F2C8                 ADRP            X9, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001F2CC                 LDR             X9, [X9,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001F2D0                 STR             W8, [X9] ; core::StateInfo::mFixClockState
.text:000000000001F2D4                 LDR             X8, [X20,#0x28]
.text:000000000001F2D8                 LDUR            X9, [X29,#var_28]
.text:000000000001F2DC                 CMP             X8, X9
.text:000000000001F2E0                 B.NE            loc_1F2F8
.text:000000000001F2E4                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001F2E8                 LDP             X20, X19, [SP,#0x60+var_10]
.text:000000000001F2EC                 LDP             X22, X21, [SP,#0x60+var_20]
.text:000000000001F2F0                 ADD             SP, SP, #0x70 ; 'p'
.text:000000000001F2F4                 RET
.text:000000000001F2F8 ; ---------------------------------------------------------------------------
.text:000000000001F2F8 loc_1F2F8                               ; CODE XREF: core::StateInfo::onAttached(std::__1::mutex &)+178↑j
.text:000000000001F2F8                 BL              .__stack_chk_fail
.text:000000000001F2F8 ; } // starts at 1F168
.text:000000000001F2F8 ; End of function core::StateInfo::onAttached(std::__1::mutex &)
.text:000000000001F2F8 ; ---------------------------------------------------------------------------
.text:000000000001F2FC                 ALIGN 0x20
.text:000000000001F300 ; =============== S U B R O U T I N E =======================================
.text:000000000001F300 ; Attributes: bp-based frame
.text:000000000001F300 ; __int64 __fastcall core::StateInfo::onDetached(core::StateInfo *__hidden this)
.text:000000000001F300                 EXPORT _ZN4core9StateInfo10onDetachedEv
.text:000000000001F300 _ZN4core9StateInfo10onDetachedEv        ; DATA XREF: LOAD:0000000000001428↑o
.text:000000000001F300 var_s0          =  0
.text:000000000001F300 ; __unwind {
.text:000000000001F300                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000001F304                 MOV             X29, SP
.text:000000000001F308                 ADRP            X8, #_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGE
.text:000000000001F30C                 LDR             X8, [X8,#_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGEOFF]
.text:000000000001F310                 LDRB            W9, [X8] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F314                 CBZ             W9, loc_1F320
.text:000000000001F318                 STRB            WZR, [X8] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F31C                 BL              ._ZN5Hwobs13finishDumpingEv ; Hwobs::finishDumping(void)
.text:000000000001F320 loc_1F320                               ; CODE XREF: core::StateInfo::onDetached(void)+14↑j
.text:000000000001F320                 BL              ._ZN5Hwobs10unfixClockEv ; Hwobs::unfixClock(void)
.text:000000000001F324                 ADRP            X8, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001F328                 LDR             X8, [X8,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001F32C                 STR             WZR, [X8] ; core::StateInfo::mFixClockState
.text:000000000001F330                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000001F334                 RET
.text:000000000001F334 ; } // starts at 1F300
.text:000000000001F334 ; End of function core::StateInfo::onDetached(void)
.text:000000000001F338 ; =============== S U B R O U T I N E =======================================
.text:000000000001F338 ; Attributes: bp-based frame
.text:000000000001F338 sub_1F338                               ; CODE XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+98↑p
.text:000000000001F338 var_130         = -0x130
.text:000000000001F338 var_110         = -0x110
.text:000000000001F338 var_F0          = -0xF0
.text:000000000001F338 var_D0          = -0xD0
.text:000000000001F338 var_B0          = -0xB0
.text:000000000001F338 var_90          = -0x90
.text:000000000001F338 var_70          = -0x70
.text:000000000001F338 var_50          = -0x50
.text:000000000001F338 var_28          = -0x28
.text:000000000001F338 var_20          = -0x20
.text:000000000001F338 var_10          = -0x10
.text:000000000001F338 var_s0          =  0
.text:000000000001F338 ; __unwind {
.text:000000000001F338                 SUB             SP, SP, #0x140
.text:000000000001F33C                 STP             X28, X21, [SP,#0x130+var_20]
.text:000000000001F340                 STP             X20, X19, [SP,#0x130+var_10]
.text:000000000001F344                 STP             X29, X30, [SP,#0x130+var_s0]
.text:000000000001F348                 ADD             X29, SP, #0x130
.text:000000000001F34C                 MRS             X21, #3, c13, c0, #2
.text:000000000001F350                 MOV             X19, X8
.text:000000000001F354                 LDR             X8, [X21,#0x28]
.text:000000000001F358                 ADRP            X0, #aProcSelfCmdlin@PAGE ; "/proc/self/cmdline"
.text:000000000001F35C                 ADRP            X1, #aR@PAGE ; "r"
.text:000000000001F360                 ADD             X0, X0, #aProcSelfCmdlin@PAGEOFF ; "/proc/self/cmdline"
.text:000000000001F364                 ADD             X1, X1, #aR@PAGEOFF ; modes
.text:000000000001F368                 STUR            X8, [X29,#var_28]
.text:000000000001F36C                 STP             XZR, XZR, [X19]
.text:000000000001F370                 STR             XZR, [X19,#0x10]
.text:000000000001F374                 BL              .fopen
.text:000000000001F378                 CBZ             X0, loc_1F3D4
.text:000000000001F37C                 MOVI            V0.2D, #0
.text:000000000001F380                 MOV             X20, X0
.text:000000000001F384                 MOV             X0, SP
.text:000000000001F388                 MOV             W1, #0x100
.text:000000000001F38C                 MOV             X2, X20
.text:000000000001F390                 MOV             W3, #0x100
.text:000000000001F394                 STP             Q0, Q0, [SP,#0x130+var_50]
.text:000000000001F398                 STP             Q0, Q0, [SP,#0x130+var_70]
.text:000000000001F39C                 STP             Q0, Q0, [SP,#0x130+var_90]
.text:000000000001F3A0                 STP             Q0, Q0, [SP,#0x130+var_B0]
.text:000000000001F3A4                 STP             Q0, Q0, [SP,#0x130+var_D0]
.text:000000000001F3A8                 STP             Q0, Q0, [SP,#0x130+var_F0]
.text:000000000001F3AC                 STP             Q0, Q0, [SP,#0x130+var_110]
.text:000000000001F3B0                 STP             Q0, Q0, [SP,#0x130+var_130]
.text:000000000001F3B4                 BL              .__fgets_chk
.text:000000000001F3B8                 CBZ             X0, loc_1F3C8
.text:000000000001F3BC                 MOV             X1, SP
.text:000000000001F3C0                 MOV             X0, X19
.text:000000000001F3C4                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::assign(char const*)
.text:000000000001F3C8 loc_1F3C8                               ; CODE XREF: sub_1F338+80↑j
.text:000000000001F3C8                 MOV             X0, X20 ; stream
.text:000000000001F3CC                 BL              .fclose
.text:000000000001F3D0                 B               loc_1F448
.text:000000000001F3D4 ; ---------------------------------------------------------------------------
.text:000000000001F3D4 loc_1F3D4                               ; CODE XREF: sub_1F338+40↑j
.text:000000000001F3D4                 ADRP            X20, #aFrameworksBase_0@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001F3D8                 ADD             X20, X20, #aFrameworksBase_0@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001F3DC                 MOV             W1, #0x2F ; '/'
.text:000000000001F3E0                 MOV             W2, #0x4A ; 'J'
.text:000000000001F3E4                 MOV             X0, X20
.text:000000000001F3E8                 BL              .__strrchr_chk
.text:000000000001F3EC                 CBZ             X0, loc_1F408
.text:000000000001F3F0                 ADRP            X0, #aFrameworksBase_0@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001F3F4                 ADD             X0, X0, #aFrameworksBase_0@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:000000000001F3F8                 MOV             W1, #0x2F ; '/'
.text:000000000001F3FC                 MOV             W2, #0x4A ; 'J'
.text:000000000001F400                 BL              .__strrchr_chk
.text:000000000001F404                 ADD             X20, X0, #1
.text:000000000001F408 loc_1F408                               ; CODE XREF: sub_1F338+B4↑j
.text:000000000001F408                 BL              .__errno
.text:000000000001F40C                 LDR             W0, [X0] ; errnum
.text:000000000001F410                 BL              .strerror
.text:000000000001F414                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:000000000001F418                 ADRP            X2, #aSSDFaieldToOpe@PAGE ; "%s:%s(%d) Faield to open %s,  error: %s"
.text:000000000001F41C                 ADRP            X4, #aGetprocessname@PAGE ; "getProcessName"
.text:000000000001F420                 ADRP            X6, #aProcSelfCmdlin@PAGE ; "/proc/self/cmdline"
.text:000000000001F424                 MOV             X7, X0
.text:000000000001F428                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:000000000001F42C                 ADD             X2, X2, #aSSDFaieldToOpe@PAGEOFF ; "%s:%s(%d) Faield to open %s,  error: %s"
.text:000000000001F430                 ADD             X4, X4, #aGetprocessname@PAGEOFF ; "getProcessName"
.text:000000000001F434                 ADD             X6, X6, #aProcSelfCmdlin@PAGEOFF ; "/proc/self/cmdline"
.text:000000000001F438                 MOV             W5, #0x2D ; '-'
.text:000000000001F43C                 MOV             W0, #6
.text:000000000001F440                 MOV             X3, X20
.text:000000000001F444                 BL              .__android_log_print
.text:000000000001F448 loc_1F448                               ; CODE XREF: sub_1F338+98↑j
.text:000000000001F448                 MOV             X0, X19
.text:000000000001F44C                 BL              sub_1F650
.text:000000000001F450                 LDR             X8, [X21,#0x28]
.text:000000000001F454                 LDUR            X9, [X29,#var_28]
.text:000000000001F458                 CMP             X8, X9
.text:000000000001F45C                 B.NE            loc_1F474
.text:000000000001F460                 LDP             X29, X30, [SP,#0x130+var_s0]
.text:000000000001F464                 LDP             X20, X19, [SP,#0x130+var_10]
.text:000000000001F468                 LDP             X28, X21, [SP,#0x130+var_20]
.text:000000000001F46C                 ADD             SP, SP, #0x140
.text:000000000001F470                 RET
.text:000000000001F474 ; ---------------------------------------------------------------------------
.text:000000000001F474 loc_1F474                               ; CODE XREF: sub_1F338+124↑j
.text:000000000001F474                 BL              .__stack_chk_fail
.text:000000000001F474 ; } // starts at 1F338
.text:000000000001F474 ; End of function sub_1F338
.text:000000000001F478 ; =============== S U B R O U T I N E =======================================
.text:000000000001F478 ; __int64 __fastcall core::StateInfo::isDumpingEnabled(core::StateInfo *__hidden this)
.text:000000000001F478                 EXPORT _ZN4core9StateInfo16isDumpingEnabledEv
.text:000000000001F478 _ZN4core9StateInfo16isDumpingEnabledEv  ; DATA XREF: LOAD:0000000000001800↑o
.text:000000000001F478 ; __unwind {
.text:000000000001F478                 ADRP            X8, #_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGE
.text:000000000001F47C                 LDR             X8, [X8,#_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGEOFF]
.text:000000000001F480                 LDRB            W0, [X8] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F484                 RET
.text:000000000001F484 ; } // starts at 1F478
.text:000000000001F484 ; End of function core::StateInfo::isDumpingEnabled(void)
.text:000000000001F488 ; =============== S U B R O U T I N E =======================================
.text:000000000001F488 ; Attributes: bp-based frame
.text:000000000001F488 ; __int64 __fastcall core::StateInfo::isNeedToCaptureData(core::StateInfo *__hidden this)
.text:000000000001F488                 EXPORT _ZN4core9StateInfo19isNeedToCaptureDataEv
.text:000000000001F488 _ZN4core9StateInfo19isNeedToCaptureDataEv
.text:000000000001F488                                         ; DATA XREF: LOAD:0000000000000C60↑o
.text:000000000001F488 var_s0          =  0
.text:000000000001F488 ; __unwind {
.text:000000000001F488                 ADRP            X8, #_ZN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001F48C                 LDR             X8, [X8,#_ZN4core9StateInfo12mDevModePropE_ptr@PAGEOFF]
.text:000000000001F490                 LDR             X8, [X8] ; core::StateInfo::mDevModeProp
.text:000000000001F494                 LDRB            W8, [X8,#0x28]
.text:000000000001F498                 CBZ             W8, loc_1F4BC
.text:000000000001F49C                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000001F4A0                 MOV             X29, SP
.text:000000000001F4A4                 BL              ._ZN19KeyEventInterceptor11getInstanceEv ; KeyEventInterceptor::getInstance(void)
.text:000000000001F4A8                 LDRB            W8, [X0]
.text:000000000001F4AC                 CMP             W8, #0
.text:000000000001F4B0                 CSET            W0, NE
.text:000000000001F4B4                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000001F4B8                 RET
.text:000000000001F4BC ; ---------------------------------------------------------------------------
.text:000000000001F4BC loc_1F4BC                               ; CODE XREF: core::StateInfo::isNeedToCaptureData(void)+10↑j
.text:000000000001F4BC                 MOV             W0, WZR
.text:000000000001F4C0                 RET
.text:000000000001F4C0 ; } // starts at 1F488
.text:000000000001F4C0 ; End of function core::StateInfo::isNeedToCaptureData(void)
.text:000000000001F4C0 ; ---------------------------------------------------------------------------
.text:000000000001F4C4                 ALIGN 8
.text:000000000001F4C8 ; =============== S U B R O U T I N E =======================================
.text:000000000001F4C8 ; __int64 __fastcall core::StateInfo::isWidgetsUpdated(core::StateInfo *__hidden this)
.text:000000000001F4C8                 EXPORT _ZN4core9StateInfo16isWidgetsUpdatedEv
.text:000000000001F4C8 _ZN4core9StateInfo16isWidgetsUpdatedEv  ; DATA XREF: LOAD:00000000000021A8↑o
.text:000000000001F4C8 ; __unwind {
.text:000000000001F4C8                 ADRP            X8, #_ZN4core9StateInfo17mIsWidgetsUpdatedE_ptr@PAGE
.text:000000000001F4CC                 LDR             X8, [X8,#_ZN4core9StateInfo17mIsWidgetsUpdatedE_ptr@PAGEOFF]
.text:000000000001F4D0                 LDRB            W0, [X8] ; core::StateInfo::mIsWidgetsUpdated
.text:000000000001F4D4                 RET
.text:000000000001F4D4 ; } // starts at 1F4C8
.text:000000000001F4D4 ; End of function core::StateInfo::isWidgetsUpdated(void)
.text:000000000001F4D8 ; =============== S U B R O U T I N E =======================================
.text:000000000001F4D8 ; __int64 __fastcall core::StateInfo::invalidateWidgets(core::StateInfo *__hidden this)
.text:000000000001F4D8                 EXPORT _ZN4core9StateInfo17invalidateWidgetsEv
.text:000000000001F4D8 _ZN4core9StateInfo17invalidateWidgetsEv ; DATA XREF: LOAD:0000000000000E10↑o
.text:000000000001F4D8 ; __unwind {
.text:000000000001F4D8                 ADRP            X8, #_ZN4core9StateInfo17mIsWidgetsUpdatedE_ptr@PAGE
.text:000000000001F4DC                 MOV             W9, #1
.text:000000000001F4E0                 LDR             X8, [X8,#_ZN4core9StateInfo17mIsWidgetsUpdatedE_ptr@PAGEOFF]
.text:000000000001F4E4                 STRB            W9, [X8] ; core::StateInfo::mIsWidgetsUpdated
.text:000000000001F4E8                 RET
.text:000000000001F4E8 ; } // starts at 1F4D8
.text:000000000001F4E8 ; End of function core::StateInfo::invalidateWidgets(void)
.text:000000000001F4E8 ; ---------------------------------------------------------------------------
.text:000000000001F4EC                 ALIGN 0x10
.text:000000000001F4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F4F0 ; Attributes: bp-based frame
.text:000000000001F4F0 sub_1F4F0                               ; CODE XREF: core::StateInfo::onPostSwapBuffers(std::__1::vector<drawer::Drawer *,std::__1::allocator<drawer::Drawer *>> const&)+AC↑p
.text:000000000001F4F0 var_40          = -0x40
.text:000000000001F4F0 var_30          = -0x30
.text:000000000001F4F0 var_20          = -0x20
.text:000000000001F4F0 var_10          = -0x10
.text:000000000001F4F0 var_s0          =  0
.text:000000000001F4F0 ; __unwind {
.text:000000000001F4F0                 STR             X25, [SP,#-0x10+var_40]!
.text:000000000001F4F4                 STP             X24, X23, [SP,#0x40+var_30]
.text:000000000001F4F8                 STP             X22, X21, [SP,#0x40+var_20]
.text:000000000001F4FC                 STP             X20, X19, [SP,#0x40+var_10]
.text:000000000001F500                 STP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001F504                 ADD             X29, SP, #0x40
.text:000000000001F508                 LDP             X8, X9, [X0,#8]
.text:000000000001F50C                 MOV             X19, X0
.text:000000000001F510                 MOV             X22, X1
.text:000000000001F514                 SUB             X10, X9, X8
.text:000000000001F518                 CMP             X1, X10,ASR#3
.text:000000000001F51C                 B.LS            loc_1F564
.text:000000000001F520                 LDR             X20, [X19]
.text:000000000001F524                 SUB             X21, X8, X20
.text:000000000001F528                 ASR             X24, X21, #3
.text:000000000001F52C                 ADD             X8, X24, X22
.text:000000000001F530                 LSR             X10, X8, #0x3D ; '='
.text:000000000001F534                 CBNZ            X10, loc_1F648
.text:000000000001F538                 SUB             X9, X9, X20
.text:000000000001F53C                 MOV             X10, #0xFFFFFFFFFFFFFFE
.text:000000000001F540                 CMP             X10, X9,ASR#3
.text:000000000001F544                 B.CC            loc_1F580
.text:000000000001F548                 ASR             X9, X9, #2
.text:000000000001F54C                 CMP             X9, X8
.text:000000000001F550                 CSEL            X25, X8, X9, CC
.text:000000000001F554                 CBZ             X25, loc_1F640
.text:000000000001F558                 LSR             X8, X25, #0x3D ; '='
.text:000000000001F55C                 CBZ             X8, loc_1F584
.text:000000000001F560                 BL              .abort
.text:000000000001F564 ; ---------------------------------------------------------------------------
.text:000000000001F564 loc_1F564                               ; CODE XREF: sub_1F4F0+2C↑j
.text:000000000001F564                                         ; sub_1F4F0+88↓j
.text:000000000001F564                 STR             XZR, [X8]
.text:000000000001F568                 SUBS            X22, X22, #1
.text:000000000001F56C                 LDR             X8, [X19,#8]
.text:000000000001F570                 ADD             X8, X8, #8
.text:000000000001F574                 STR             X8, [X19,#8]
.text:000000000001F578                 B.NE            loc_1F564
.text:000000000001F57C                 B               loc_1F628
.text:000000000001F580 ; ---------------------------------------------------------------------------
.text:000000000001F580 loc_1F580                               ; CODE XREF: sub_1F4F0+54↑j
.text:000000000001F580                 MOV             X25, #0x1FFFFFFFFFFFFFFF
.text:000000000001F584 loc_1F584                               ; CODE XREF: sub_1F4F0+6C↑j
.text:000000000001F584                 LSL             X0, X25, #3 ; unsigned __int64
.text:000000000001F588                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001F58C                 MOV             X23, X0
.text:000000000001F590 loc_1F590                               ; CODE XREF: sub_1F4F0+154↓j
.text:000000000001F590                 ADD             X24, X23, X24,LSL#3
.text:000000000001F594                 MOV             X0, X24 ; s
.text:000000000001F598                 MOV             W1, WZR ; c
.text:000000000001F59C                 LSL             X2, X22, #3 ; n
.text:000000000001F5A0                 BL              .memset
.text:000000000001F5A4                 CMP             X22, #2
.text:000000000001F5A8                 B.CS            loc_1F5B4
.text:000000000001F5AC                 MOV             X8, X22
.text:000000000001F5B0                 B               loc_1F5D4
.text:000000000001F5B4 ; ---------------------------------------------------------------------------
.text:000000000001F5B4 loc_1F5B4                               ; CODE XREF: sub_1F4F0+B8↑j
.text:000000000001F5B4                 AND             X9, X22, #0xFFFFFFFFFFFFFFFE
.text:000000000001F5B8                 SUB             X8, X22, X9
.text:000000000001F5BC                 ADD             X24, X24, X9,LSL#3
.text:000000000001F5C0                 MOV             X10, X9
.text:000000000001F5C4 loc_1F5C4                               ; CODE XREF: sub_1F4F0+D8↓j
.text:000000000001F5C4                 SUBS            X10, X10, #2
.text:000000000001F5C8                 B.NE            loc_1F5C4
.text:000000000001F5CC                 CMP             X9, X22
.text:000000000001F5D0                 B.EQ            loc_1F5E0
.text:000000000001F5D4 loc_1F5D4                               ; CODE XREF: sub_1F4F0+C0↑j
.text:000000000001F5D4                                         ; sub_1F4F0+EC↓j
.text:000000000001F5D4                 ADD             X24, X24, #8
.text:000000000001F5D8                 SUBS            X8, X8, #1
.text:000000000001F5DC                 B.NE            loc_1F5D4
.text:000000000001F5E0 loc_1F5E0                               ; CODE XREF: sub_1F4F0+E0↑j
.text:000000000001F5E0                 ADD             X22, X23, X25,LSL#3
.text:000000000001F5E4                 CMP             X21, #1
.text:000000000001F5E8                 B.LT            loc_1F600
.text:000000000001F5EC                 MOV             X0, X23 ; dest
.text:000000000001F5F0                 MOV             X1, X20 ; src
.text:000000000001F5F4                 MOV             X2, X21 ; n
.text:000000000001F5F8                 BL              .memcpy
.text:000000000001F5FC                 LDR             X20, [X19]
.text:000000000001F600 loc_1F600                               ; CODE XREF: sub_1F4F0+F8↑j
.text:000000000001F600                 STP             X23, X24, [X19]
.text:000000000001F604                 STR             X22, [X19,#0x10]
.text:000000000001F608                 CBZ             X20, loc_1F628
.text:000000000001F60C                 MOV             X0, X20 ; void *
.text:000000000001F610                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001F614                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000001F618                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000001F61C                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000001F620                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000001F624                 B               ._ZdlPv ; operator delete(void *)
.text:000000000001F628 ; ---------------------------------------------------------------------------
.text:000000000001F628 loc_1F628                               ; CODE XREF: sub_1F4F0+8C↑j
.text:000000000001F628                                         ; sub_1F4F0+118↑j
.text:000000000001F628                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:000000000001F62C                 LDP             X20, X19, [SP,#0x40+var_10]
.text:000000000001F630                 LDP             X22, X21, [SP,#0x40+var_20]
.text:000000000001F634                 LDP             X24, X23, [SP,#0x40+var_30]
.text:000000000001F638                 LDR             X25, [SP+0x40+var_40],#0x50
.text:000000000001F63C                 RET
.text:000000000001F640 ; ---------------------------------------------------------------------------
.text:000000000001F640 loc_1F640                               ; CODE XREF: sub_1F4F0+64↑j
.text:000000000001F640                 MOV             X23, XZR
.text:000000000001F644                 B               loc_1F590
.text:000000000001F648 ; ---------------------------------------------------------------------------
.text:000000000001F648 loc_1F648                               ; CODE XREF: sub_1F4F0+44↑j
.text:000000000001F648                 MOV             X0, X19
.text:000000000001F64C                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:000000000001F64C ; } // starts at 1F4F0
.text:000000000001F64C ; End of function sub_1F4F0
.text:000000000001F650 ; =============== S U B R O U T I N E =======================================
.text:000000000001F650 ; Attributes: bp-based frame
.text:000000000001F650 sub_1F650                               ; CODE XREF: sub_1F338+114↑p
.text:000000000001F650 var_30          = -0x30
.text:000000000001F650 var_20          = -0x20
.text:000000000001F650 var_10          = -0x10
.text:000000000001F650 var_s0          =  0
.text:000000000001F650 ; __unwind {
.text:000000000001F650                 STP             X24, X23, [SP,#-0x10+var_30]!
.text:000000000001F654                 STP             X22, X21, [SP,#0x30+var_20]
.text:000000000001F658                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000001F65C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001F660                 ADD             X29, SP, #0x30
.text:000000000001F664                 LDRB            W8, [X0]
.text:000000000001F668                 MOV             X19, X0
.text:000000000001F66C                 LDP             X10, X9, [X0,#8]
.text:000000000001F670                 ADD             X20, X0, #1
.text:000000000001F674                 TST             W8, #1
.text:000000000001F678                 CSINC           X21, X9, X0, NE
.text:000000000001F67C                 LSR             X8, X8, #1
.text:000000000001F680                 CSEL            X24, X8, X10, EQ
.text:000000000001F684                 MOV             X22, X21
.text:000000000001F688                 CBZ             X24, loc_1F6C8
.text:000000000001F68C                 LDRB            W0, [X21] ; int
.text:000000000001F690                 BL              .isspace
.text:000000000001F694                 CBZ             W0, loc_1F6C8
.text:000000000001F698                 ADD             X23, X21, X24
.text:000000000001F69C                 SUB             X24, X24, #1
.text:000000000001F6A0                 MOV             X8, X21
.text:000000000001F6A4 loc_1F6A4                               ; CODE XREF: sub_1F650+6C↓j
.text:000000000001F6A4                 CBZ             X24, loc_1F6C4
.text:000000000001F6A8                 LDRB            W0, [X8,#1] ; int
.text:000000000001F6AC                 ADD             X22, X8, #1
.text:000000000001F6B0                 BL              .isspace
.text:000000000001F6B4                 SUB             X24, X24, #1
.text:000000000001F6B8                 MOV             X8, X22
.text:000000000001F6BC                 CBNZ            W0, loc_1F6A4
.text:000000000001F6C0                 B               loc_1F6C8
.text:000000000001F6C4 ; ---------------------------------------------------------------------------
.text:000000000001F6C4 loc_1F6C4                               ; CODE XREF: sub_1F650:loc_1F6A4↑j
.text:000000000001F6C4                 MOV             X22, X23
.text:000000000001F6C8 loc_1F6C8                               ; CODE XREF: sub_1F650+38↑j
.text:000000000001F6C8                                         ; sub_1F650+44↑j ...
.text:000000000001F6C8                 SUB             X1, X21, X21
.text:000000000001F6CC                 SUB             X2, X22, X21
.text:000000000001F6D0                 MOV             X0, X19
.text:000000000001F6D4                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEmm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::erase(ulong,ulong)
.text:000000000001F6D8                 LDRB            W22, [X19]
.text:000000000001F6DC                 TBNZ            W22, #0, loc_1F6F8
.text:000000000001F6E0                 ADD             X8, X19, X22,LSR#1
.text:000000000001F6E4                 ADD             X24, X8, #1
.text:000000000001F6E8                 MOV             X21, X20
.text:000000000001F6EC                 CMP             X24, X21
.text:000000000001F6F0                 B.NE            loc_1F708
.text:000000000001F6F4                 B               loc_1F744
.text:000000000001F6F8 ; ---------------------------------------------------------------------------
.text:000000000001F6F8 loc_1F6F8                               ; CODE XREF: sub_1F650+8C↑j
.text:000000000001F6F8                 LDP             X8, X21, [X19,#8]
.text:000000000001F6FC                 ADD             X24, X21, X8
.text:000000000001F700                 CMP             X24, X21
.text:000000000001F704                 B.EQ            loc_1F744
.text:000000000001F708 loc_1F708                               ; CODE XREF: sub_1F650+A0↑j
.text:000000000001F708                 MOV             X23, X24
.text:000000000001F70C                 LDRB            W0, [X23,#-1]! ; int
.text:000000000001F710                 BL              .isspace
.text:000000000001F714                 CBZ             W0, loc_1F744
.text:000000000001F718 loc_1F718                               ; CODE XREF: sub_1F650+D8↓j
.text:000000000001F718                 CMP             X21, X23
.text:000000000001F71C                 B.EQ            loc_1F730
.text:000000000001F720                 LDRB            W0, [X23,#-1]! ; int
.text:000000000001F724                 BL              .isspace
.text:000000000001F728                 CBNZ            W0, loc_1F718
.text:000000000001F72C                 ADD             X21, X23, #1
.text:000000000001F730 loc_1F730                               ; CODE XREF: sub_1F650+CC↑j
.text:000000000001F730                 TBNZ            W22, #0, loc_1F74C
.text:000000000001F734 loc_1F734                               ; CODE XREF: sub_1F650+F8↓j
.text:000000000001F734                 UBFX            X8, X22, #1, #0x1F
.text:000000000001F738                 ADD             X8, X19, X8
.text:000000000001F73C                 ADD             X8, X8, #1
.text:000000000001F740                 B               loc_1F754
.text:000000000001F744 ; ---------------------------------------------------------------------------
.text:000000000001F744 loc_1F744                               ; CODE XREF: sub_1F650+A4↑j
.text:000000000001F744                                         ; sub_1F650+B4↑j ...
.text:000000000001F744                 MOV             X21, X24
.text:000000000001F748                 TBZ             W22, #0, loc_1F734
.text:000000000001F74C loc_1F74C                               ; CODE XREF: sub_1F650:loc_1F730↑j
.text:000000000001F74C                 LDP             X8, X20, [X19,#8]
.text:000000000001F750                 ADD             X8, X20, X8
.text:000000000001F754 loc_1F754                               ; CODE XREF: sub_1F650+F0↑j
.text:000000000001F754                 SUB             X1, X21, X20
.text:000000000001F758                 SUB             X2, X8, X21
.text:000000000001F75C                 MOV             X0, X19
.text:000000000001F760                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000001F764                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000001F768                 LDP             X22, X21, [SP,#0x30+var_20]
.text:000000000001F76C                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:000000000001F770                 B               ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEmm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::erase(ulong,ulong)
.text:000000000001F770 ; } // starts at 1F650
.text:000000000001F770 ; End of function sub_1F650
.text:000000000001F770 ; ---------------------------------------------------------------------------
.text:000000000001F774                 ALIGN 8
.text:000000000001F778 ; [00000004 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:000000000001F77C                 ALIGN 0x20
.text:000000000001F780 ; =============== S U B R O U T I N E =======================================
.text:000000000001F780 ; Attributes: bp-based frame
.text:000000000001F780 sub_1F780                               ; DATA XREF: .data.rel.ro:0000000000030108↓o
.text:000000000001F780 var_10          = -0x10
.text:000000000001F780 var_s0          =  0
.text:000000000001F780 ; __unwind {
.text:000000000001F780                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001F784                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001F788                 ADD             X29, SP, #0x10
.text:000000000001F78C                 MOV             X19, X0
.text:000000000001F790                 MOV             W0, #0x10 ; unsigned __int64
.text:000000000001F794                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001F798                 LDR             X8, [X19,#8]
.text:000000000001F79C                 ADRP            X9, #off_300F8@PAGE
.text:000000000001F7A0                 ADD             X9, X9, #off_300F8@PAGEOFF
.text:000000000001F7A4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001F7A8                 STP             X9, X8, [X0]
.text:000000000001F7AC                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001F7B0                 RET
.text:000000000001F7B0 ; } // starts at 1F780
.text:000000000001F7B0 ; End of function sub_1F780
.text:000000000001F7B0 ; ---------------------------------------------------------------------------
.text:000000000001F7B4                 ALIGN 8
.text:000000000001F7B8 ; =============== S U B R O U T I N E =======================================
.text:000000000001F7B8 sub_1F7B8                               ; DATA XREF: .data.rel.ro:0000000000030110↓o
.text:000000000001F7B8 ; __unwind {
.text:000000000001F7B8                 ADRP            X8, #off_300F8@PAGE
.text:000000000001F7BC                 ADD             X8, X8, #off_300F8@PAGEOFF
.text:000000000001F7C0                 STR             X8, [X1]
.text:000000000001F7C4                 LDR             X8, [X0,#8]
.text:000000000001F7C8                 STR             X8, [X1,#8]
.text:000000000001F7CC                 RET
.text:000000000001F7CC ; } // starts at 1F7B8
.text:000000000001F7CC ; End of function sub_1F7B8
.text:000000000001F7D0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F7D0 ; Attributes: bp-based frame
.text:000000000001F7D0 sub_1F7D0                               ; DATA XREF: .data.rel.ro:0000000000030128↓o
.text:000000000001F7D0 var_10          = -0x10
.text:000000000001F7D0 var_s0          =  0
.text:000000000001F7D0 ; __unwind {
.text:000000000001F7D0                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001F7D4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001F7D8                 ADD             X29, SP, #0x10
.text:000000000001F7DC                 LDR             X19, [X0,#8]
.text:000000000001F7E0                 MOV             X0, X19 ; this
.text:000000000001F7E4                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001F7E8                 ADRP            X8, #_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGE
.text:000000000001F7EC                 LDR             X8, [X8,#_ZN4core9StateInfo17mIsDumpingEnabledE_ptr@PAGEOFF]
.text:000000000001F7F0                 LDRB            W9, [X8] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F7F4                 CBZ             W9, loc_1F800
.text:000000000001F7F8                 STRB            WZR, [X8] ; core::StateInfo::mIsDumpingEnabled
.text:000000000001F7FC                 BL              ._ZN5Hwobs13finishDumpingEv ; Hwobs::finishDumping(void)
.text:000000000001F800 loc_1F800                               ; CODE XREF: sub_1F7D0+24↑j
.text:000000000001F800                 BL              ._ZN5Hwobs10unfixClockEv ; Hwobs::unfixClock(void)
.text:000000000001F804                 ADRP            X8, #_ZN4core9StateInfo14mFixClockStateE_ptr@PAGE
.text:000000000001F808                 MOV             X0, X19 ; this
.text:000000000001F80C                 LDR             X8, [X8,#_ZN4core9StateInfo14mFixClockStateE_ptr@PAGEOFF]
.text:000000000001F810                 STR             WZR, [X8] ; core::StateInfo::mFixClockState
.text:000000000001F814                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001F818                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001F81C                 B               ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001F81C ; } // starts at 1F7D0
.text:000000000001F81C ; End of function sub_1F7D0
.text:000000000001F820 ; ---------------------------------------------------------------------------
.text:000000000001F820 loc_1F820                               ; DATA XREF: core::StateInfo::isOverlayEnabled(core::RenderingApiType)+40↑o
.text:000000000001F820                                         ; core::StateInfo::isOverlayEnabled(core::RenderingApiType)+50↑o
.text:000000000001F820 ; __unwind {
.text:000000000001F820                 B               loc_1FD60
.text:000000000001F820 ; } // starts at 1F820
.text:000000000001F820 ; ---------------------------------------------------------------------------
.text:000000000001F824                 ALIGN 8
.text:000000000001F828 ; =============== S U B R O U T I N E =======================================
.text:000000000001F828 ; Attributes: bp-based frame
.text:000000000001F828 sub_1F828                               ; DATA XREF: .init_array:0000000000030598↓o
.text:000000000001F828 var_48          = -0x48
.text:000000000001F828 var_38          = -0x38
.text:000000000001F828 var_30          = -0x30
.text:000000000001F828 var_20          = -0x20
.text:000000000001F828 var_18          = -0x18
.text:000000000001F828 var_10          = -0x10
.text:000000000001F828 var_s0          =  0
.text:000000000001F828 ; __unwind {
.text:000000000001F828                 SUB             SP, SP, #0x60
.text:000000000001F82C                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000001F830                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001F834                 ADD             X29, SP, #0x50
.text:000000000001F838                 MRS             X20, #3, c13, c0, #2
.text:000000000001F83C                 LDR             X8, [X20,#0x28]
.text:000000000001F840                 STUR            X8, [X29,#var_18]
.text:000000000001F844                 ADRP            X8, #unk_31008@PAGE
.text:000000000001F848                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:000000000001F84C                 LDARB           W8, [X8]
.text:000000000001F850                 TBNZ            W8, #0, loc_1F890
.text:000000000001F854                 ADRP            X0, #unk_31008@PAGE
.text:000000000001F858                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000001F85C                 BL              .__cxa_guard_acquire
.text:000000000001F860                 CBZ             W0, loc_1F890
.text:000000000001F864                 ADRP            X1, #qword_31000@PAGE
.text:000000000001F868                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:000000000001F86C                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:000000000001F870                 ADRP            X2, #off_2F000@PAGE
.text:000000000001F874                 STR             XZR, [X1]
.text:000000000001F878                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001F87C                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000001F880                 BL              .__cxa_atexit
.text:000000000001F884                 ADRP            X0, #unk_31008@PAGE
.text:000000000001F888                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000001F88C                 BL              .__cxa_guard_release
.text:000000000001F890 loc_1F890                               ; CODE XREF: sub_1F828+28↑j
.text:000000000001F890                                         ; sub_1F828+38↑j
.text:000000000001F890                 ADRP            X8, #unk_31038@PAGE
.text:000000000001F894                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:000000000001F898                 LDARB           W8, [X8]
.text:000000000001F89C                 TBNZ            W8, #0, loc_1F8D8
.text:000000000001F8A0                 ADRP            X0, #unk_31038@PAGE
.text:000000000001F8A4                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000001F8A8                 BL              .__cxa_guard_acquire
.text:000000000001F8AC                 CBZ             W0, loc_1F8D8
.text:000000000001F8B0                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:000000000001F8B4                 ADRP            X1, #unk_31010@PAGE
.text:000000000001F8B8                 ADRP            X2, #off_2F000@PAGE
.text:000000000001F8BC                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000001F8C0                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:000000000001F8C4                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001F8C8                 BL              .__cxa_atexit
.text:000000000001F8CC                 ADRP            X0, #unk_31038@PAGE
.text:000000000001F8D0                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000001F8D4                 BL              .__cxa_guard_release
.text:000000000001F8D8 loc_1F8D8                               ; CODE XREF: sub_1F828+74↑j
.text:000000000001F8D8                                         ; sub_1F828+84↑j
.text:000000000001F8D8                 ADRP            X8, #unk_31058@PAGE
.text:000000000001F8DC                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:000000000001F8E0                 LDARB           W8, [X8]
.text:000000000001F8E4                 TBNZ            W8, #0, loc_1F928
.text:000000000001F8E8                 ADRP            X0, #unk_31058@PAGE
.text:000000000001F8EC                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000001F8F0                 BL              .__cxa_guard_acquire
.text:000000000001F8F4                 CBZ             W0, loc_1F928
.text:000000000001F8F8                 ADRP            X1, #unk_31040@PAGE
.text:000000000001F8FC                 ADRP            X0, #loc_1C078@PAGE
.text:000000000001F900                 ADRP            X2, #off_2F000@PAGE
.text:000000000001F904                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:000000000001F908                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:000000000001F90C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001F910                 STP             XZR, XZR, [X1]
.text:000000000001F914                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:000000000001F918                 BL              .__cxa_atexit
.text:000000000001F91C                 ADRP            X0, #unk_31058@PAGE
.text:000000000001F920                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000001F924                 BL              .__cxa_guard_release
.text:000000000001F928 loc_1F928                               ; CODE XREF: sub_1F828+BC↑j
.text:000000000001F928                                         ; sub_1F828+CC↑j
.text:000000000001F928                 ADRP            X8, #unk_31078@PAGE
.text:000000000001F92C                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000001F930                 LDARB           W8, [X8]
.text:000000000001F934                 TBNZ            W8, #0, loc_1F978
.text:000000000001F938                 ADRP            X0, #unk_31078@PAGE
.text:000000000001F93C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000001F940                 BL              .__cxa_guard_acquire
.text:000000000001F944                 CBZ             W0, loc_1F978
.text:000000000001F948                 ADRP            X1, #unk_31060@PAGE
.text:000000000001F94C                 ADRP            X0, #loc_1C100@PAGE
.text:000000000001F950                 ADRP            X2, #off_2F000@PAGE
.text:000000000001F954                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:000000000001F958                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:000000000001F95C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000001F960                 STP             XZR, XZR, [X1]
.text:000000000001F964                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:000000000001F968                 BL              .__cxa_atexit
.text:000000000001F96C                 ADRP            X0, #unk_31078@PAGE
.text:000000000001F970                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000001F974                 BL              .__cxa_guard_release
.text:000000000001F978 loc_1F978                               ; CODE XREF: sub_1F828+10C↑j
.text:000000000001F978                                         ; sub_1F828+11C↑j
.text:000000000001F978                 ADRP            X8, #_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001F97C                 LDR             X8, [X8,#_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGEOFF]
.text:000000000001F980                 LDARB           W8, [X8]
.text:000000000001F984                 TBNZ            W8, #0, loc_1F9FC
.text:000000000001F988                 ADRP            X0, #_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001F98C                 LDR             X0, [X0,#_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001F990                 BL              .__cxa_guard_acquire
.text:000000000001F994                 CBZ             W0, loc_1F9FC
.text:000000000001F998                 ADRP            X8, #aDebugGpuwatchS@PAGE ; "debug.gpuwatch.status"
.text:000000000001F99C                 STP             XZR, XZR, [SP,#0x50+var_30]
.text:000000000001F9A0                 ADD             X8, X8, #aDebugGpuwatchS@PAGEOFF ; "debug.gpuwatch.status"
.text:000000000001F9A4                 STR             XZR, [SP,#0x50+var_20]
.text:000000000001F9A8                 MOV             W10, #0x2A ; '*'
.text:000000000001F9AC                 STRB            WZR, [SP,#0x50+var_20+6]
.text:000000000001F9B0                 ADD             X0, SP, #0x50+var_30
.text:000000000001F9B4                 LDUR            X9, [X8,#0xD]
.text:000000000001F9B8                 MOV             W1, WZR
.text:000000000001F9BC                 LDR             Q0, [X8] ; "debug.gpuwatch.status"
.text:000000000001F9C0                 STRB            W10, [SP,#0x50+var_30]
.text:000000000001F9C4                 STUR            X9, [SP,#0x2E]
.text:000000000001F9C8                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001F9CC                 BL              sub_1C118
.text:000000000001F9D0                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001F9D4                 MOV             X19, X0
.text:000000000001F9D8                 TBZ             W8, #0, loc_1F9E4
.text:000000000001F9DC                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001F9E0                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001F9E4 loc_1F9E4                               ; CODE XREF: sub_1F828+1B0↑j
.text:000000000001F9E4                 ADRP            X8, #_ZN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001F9E8                 ADRP            X0, #_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGE
.text:000000000001F9EC                 LDR             X8, [X8,#_ZN4core9StateInfo11mStatusPropE_ptr@PAGEOFF]
.text:000000000001F9F0                 STR             X19, [X8] ; core::StateInfo::mStatusProp
.text:000000000001F9F4                 LDR             X0, [X0,#_ZGVN4core9StateInfo11mStatusPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001F9F8                 BL              .__cxa_guard_release
.text:000000000001F9FC loc_1F9FC                               ; CODE XREF: sub_1F828+15C↑j
.text:000000000001F9FC                                         ; sub_1F828+16C↑j
.text:000000000001F9FC                 ADRP            X8, #_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001FA00                 LDR             X8, [X8,#_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGEOFF]
.text:000000000001FA04                 LDARB           W8, [X8]
.text:000000000001FA08                 TBNZ            W8, #0, loc_1FA78
.text:000000000001FA0C                 ADRP            X0, #_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001FA10                 LDR             X0, [X0,#_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FA14                 BL              .__cxa_guard_acquire
.text:000000000001FA18                 CBZ             W0, loc_1FA78
.text:000000000001FA1C                 ADRP            X8, #aDebugGpuwatchD@PAGE ; "debug.gpuwatch.devmode"
.text:000000000001FA20                 STRB            WZR, [SP,#0x50+var_20+7]
.text:000000000001FA24                 ADD             X8, X8, #aDebugGpuwatchD@PAGEOFF ; "debug.gpuwatch.devmode"
.text:000000000001FA28                 MOV             W9, #0x2C ; ','
.text:000000000001FA2C                 ADD             X0, SP, #0x50+var_30
.text:000000000001FA30                 LDUR            X10, [X8,#0xE]
.text:000000000001FA34                 MOV             W1, WZR
.text:000000000001FA38                 LDR             Q0, [X8] ; "debug.gpuwatch.devmode"
.text:000000000001FA3C                 STRB            W9, [SP,#0x50+var_30]
.text:000000000001FA40                 STUR            X10, [SP,#0x50+var_30+0xF]
.text:000000000001FA44                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001FA48                 BL              sub_1C118
.text:000000000001FA4C                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001FA50                 MOV             X19, X0
.text:000000000001FA54                 TBZ             W8, #0, loc_1FA60
.text:000000000001FA58                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001FA5C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001FA60 loc_1FA60                               ; CODE XREF: sub_1F828+22C↑j
.text:000000000001FA60                 ADRP            X8, #_ZN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001FA64                 ADRP            X0, #_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGE
.text:000000000001FA68                 LDR             X8, [X8,#_ZN4core9StateInfo12mDevModePropE_ptr@PAGEOFF]
.text:000000000001FA6C                 STR             X19, [X8] ; core::StateInfo::mDevModeProp
.text:000000000001FA70                 LDR             X0, [X0,#_ZGVN4core9StateInfo12mDevModePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FA74                 BL              .__cxa_guard_release
.text:000000000001FA78 loc_1FA78                               ; CODE XREF: sub_1F828+1E0↑j
.text:000000000001FA78                                         ; sub_1F828+1F0↑j
.text:000000000001FA78                 ADRP            X8, #_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001FA7C                 LDR             X8, [X8,#_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF]
.text:000000000001FA80                 LDARB           W8, [X8]
.text:000000000001FA84                 TBNZ            W8, #0, loc_1FB04
.text:000000000001FA88                 ADRP            X0, #_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001FA8C                 LDR             X0, [X0,#_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FA90                 BL              .__cxa_guard_acquire
.text:000000000001FA94                 CBZ             W0, loc_1FB04
.text:000000000001FA98                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000001FA9C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001FAA0                 ADRP            X9, #aDebugGpuwatchF@PAGE ; "debug.gpuwatch.fixclock"
.text:000000000001FAA4                 STR             X0, [SP,#0x50+var_20]
.text:000000000001FAA8                 ADD             X9, X9, #aDebugGpuwatchF@PAGEOFF ; "debug.gpuwatch.fixclock"
.text:000000000001FAAC                 STRB            WZR, [X0,#0x17]
.text:000000000001FAB0                 ADRP            X8, #xmmword_7AF0@PAGE
.text:000000000001FAB4                 MOV             W1, WZR
.text:000000000001FAB8                 LDUR            X10, [X9,#0xF]
.text:000000000001FABC                 LDR             Q0, [X9] ; "debug.gpuwatch.fixclock"
.text:000000000001FAC0                 LDR             Q1, [X8,#xmmword_7AF0@PAGEOFF]
.text:000000000001FAC4                 STUR            X10, [X0,#0xF]
.text:000000000001FAC8                 STR             Q0, [X0]
.text:000000000001FACC                 ADD             X0, SP, #0x50+var_30
.text:000000000001FAD0                 STR             Q1, [SP,#0x50+var_30]
.text:000000000001FAD4                 BL              sub_1C118
.text:000000000001FAD8                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001FADC                 MOV             X19, X0
.text:000000000001FAE0                 TBZ             W8, #0, loc_1FAEC
.text:000000000001FAE4                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001FAE8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001FAEC loc_1FAEC                               ; CODE XREF: sub_1F828+2B8↑j
.text:000000000001FAEC                 ADRP            X8, #_ZN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001FAF0                 ADRP            X0, #_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGE
.text:000000000001FAF4                 LDR             X8, [X8,#_ZN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF]
.text:000000000001FAF8                 STR             X19, [X8] ; core::StateInfo::mFixClockProp
.text:000000000001FAFC                 LDR             X0, [X0,#_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FB00                 BL              .__cxa_guard_release
.text:000000000001FB04 loc_1FB04                               ; CODE XREF: sub_1F828+25C↑j
.text:000000000001FB04                                         ; sub_1F828+26C↑j
.text:000000000001FB04                 ADRP            X8, #_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001FB08                 LDR             X8, [X8,#_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF]
.text:000000000001FB0C                 LDARB           W8, [X8]
.text:000000000001FB10                 TBNZ            W8, #0, loc_1FB88
.text:000000000001FB14                 ADRP            X0, #_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001FB18                 LDR             X0, [X0,#_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FB1C                 BL              .__cxa_guard_acquire
.text:000000000001FB20                 CBZ             W0, loc_1FB88
.text:000000000001FB24                 ADRP            X8, #aDebugGpuwatchA@PAGE ; "debug.gpuwatch.api"
.text:000000000001FB28                 STP             XZR, XZR, [SP,#0x50+var_30]
.text:000000000001FB2C                 ADD             X8, X8, #aDebugGpuwatchA@PAGEOFF ; "debug.gpuwatch.api"
.text:000000000001FB30                 STR             XZR, [SP,#0x50+var_20]
.text:000000000001FB34                 MOV             W9, #0x24 ; '$'
.text:000000000001FB38                 STRB            WZR, [SP,#0x50+var_20+3]
.text:000000000001FB3C                 ADD             X0, SP, #0x50+var_30
.text:000000000001FB40                 LDR             Q0, [X8] ; "debug.gpuwatch.api"
.text:000000000001FB44                 MOV             W8, #0x6970
.text:000000000001FB48                 MOV             W1, WZR
.text:000000000001FB4C                 STRB            W9, [SP,#0x50+var_30]
.text:000000000001FB50                 STURH           W8, [SP,#0x50+var_20+1]
.text:000000000001FB54                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001FB58                 BL              sub_1C250
.text:000000000001FB5C                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001FB60                 MOV             X19, X0
.text:000000000001FB64                 TBZ             W8, #0, loc_1FB70
.text:000000000001FB68                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001FB6C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001FB70 loc_1FB70                               ; CODE XREF: sub_1F828+33C↑j
.text:000000000001FB70                 ADRP            X8, #_ZN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001FB74                 ADRP            X0, #_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGE
.text:000000000001FB78                 LDR             X8, [X8,#_ZN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF]
.text:000000000001FB7C                 STR             X19, [X8] ; core::StateInfo::mRenderApiProp
.text:000000000001FB80                 LDR             X0, [X0,#_ZGVN4core9StateInfo14mRenderApiPropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FB84                 BL              .__cxa_guard_release
.text:000000000001FB88 loc_1FB88                               ; CODE XREF: sub_1F828+2E8↑j
.text:000000000001FB88                                         ; sub_1F828+2F8↑j
.text:000000000001FB88                 ADRP            X8, #_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001FB8C                 LDR             X8, [X8,#_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF]
.text:000000000001FB90                 LDARB           W8, [X8]
.text:000000000001FB94                 TBNZ            W8, #0, loc_1FC28
.text:000000000001FB98                 ADRP            X0, #_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001FB9C                 LDR             X0, [X0,#_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FBA0                 BL              .__cxa_guard_acquire
.text:000000000001FBA4                 CBZ             W0, loc_1FC28
.text:000000000001FBA8                 ADRP            X8, #aDebugGpuwatchP@PAGE ; "debug.gpuwatch.proc"
.text:000000000001FBAC                 STP             XZR, XZR, [SP,#0x50+var_30]
.text:000000000001FBB0                 ADD             X8, X8, #aDebugGpuwatchP@PAGEOFF ; "debug.gpuwatch.proc"
.text:000000000001FBB4                 STR             XZR, [SP,#0x50+var_20]
.text:000000000001FBB8                 MOV             W9, #0x26 ; '&'
.text:000000000001FBBC                 STRB            WZR, [SP,#0x50+var_20+4]
.text:000000000001FBC0                 ADD             X0, SP, #0x50+var_30
.text:000000000001FBC4                 STP             XZR, XZR, [SP,#0x50+var_48]
.text:000000000001FBC8                 LDR             Q0, [X8] ; "debug.gpuwatch.proc"
.text:000000000001FBCC                 MOV             W8, #0x636F7270
.text:000000000001FBD4                 STRB            W9, [SP,#0x50+var_30]
.text:000000000001FBD8                 ADD             X1, SP, #0x50+var_48
.text:000000000001FBDC                 STR             XZR, [SP,#0x50+var_38]
.text:000000000001FBE0                 STUR            Q0, [SP,#0x50+var_30+1]
.text:000000000001FBE4                 STR             W8, [SP,#0x50+var_20]
.text:000000000001FBE8                 BL              sub_1C388
.text:000000000001FBEC                 LDRB            W8, [SP,#0x50+var_48]
.text:000000000001FBF0                 MOV             X19, X0
.text:000000000001FBF4                 TBZ             W8, #0, loc_1FC00
.text:000000000001FBF8                 LDR             X0, [SP,#0x50+var_38] ; void *
.text:000000000001FBFC                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001FC00 loc_1FC00                               ; CODE XREF: sub_1F828+3CC↑j
.text:000000000001FC00                 LDRB            W8, [SP,#0x50+var_30]
.text:000000000001FC04                 TBZ             W8, #0, loc_1FC10
.text:000000000001FC08                 LDR             X0, [SP,#0x50+var_20] ; void *
.text:000000000001FC0C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000001FC10 loc_1FC10                               ; CODE XREF: sub_1F828+3DC↑j
.text:000000000001FC10                 ADRP            X8, #_ZN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001FC14                 ADRP            X0, #_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGE
.text:000000000001FC18                 LDR             X8, [X8,#_ZN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF]
.text:000000000001FC1C                 STR             X19, [X8] ; core::StateInfo::mDebugProcessNameProp
.text:000000000001FC20                 LDR             X0, [X0,#_ZGVN4core9StateInfo21mDebugProcessNamePropE_ptr@PAGEOFF] ; __guard *
.text:000000000001FC24                 BL              .__cxa_guard_release
.text:000000000001FC28 loc_1FC28                               ; CODE XREF: sub_1F828+36C↑j
.text:000000000001FC28                                         ; sub_1F828+37C↑j
.text:000000000001FC28                 LDR             X8, [X20,#0x28]
.text:000000000001FC2C                 LDUR            X9, [X29,#var_18]
.text:000000000001FC30                 CMP             X8, X9
.text:000000000001FC34                 B.NE            loc_1FC48
.text:000000000001FC38                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001FC3C                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000001FC40                 ADD             SP, SP, #0x60 ; '`'
.text:000000000001FC44                 RET
.text:000000000001FC48 ; ---------------------------------------------------------------------------
.text:000000000001FC48 loc_1FC48                               ; CODE XREF: sub_1F828+40C↑j
.text:000000000001FC48                 BL              .__stack_chk_fail
.text:000000000001FC48 ; } // starts at 1F828
.text:000000000001FC48 ; End of function sub_1F828
.text:000000000001FC48 ; ---------------------------------------------------------------------------
.text:000000000001FC4C                 ALIGN 0x10
.text:000000000001FC50 ; =============== S U B R O U T I N E =======================================
.text:000000000001FC50 ; Attributes: bp-based frame
.text:000000000001FC50 sub_1FC50                               ; CODE XREF: gui::WidgetsSettings::load(void)+B0↓p
.text:000000000001FC50 var_51          = -0x51
.text:000000000001FC50 newthread       = -0x48
.text:000000000001FC50 var_38          = -0x38
.text:000000000001FC50 var_30          = -0x30
.text:000000000001FC50 var_20          = -0x20
.text:000000000001FC50 var_10          = -0x10
.text:000000000001FC50 var_s0          =  0
.text:000000000001FC50 ; __unwind {
.text:000000000001FC50                 SUB             SP, SP, #0x70
.text:000000000001FC54                 STP             X24, X23, [SP,#0x60+var_30]
.text:000000000001FC58                 STP             X22, X21, [SP,#0x60+var_20]
.text:000000000001FC5C                 STP             X20, X19, [SP,#0x60+var_10]
.text:000000000001FC60                 STP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001FC64                 ADD             X29, SP, #0x60
.text:000000000001FC68                 MRS             X21, #3, c13, c0, #2
.text:000000000001FC6C                 ADRP            X22, #qword_31000@PAGE
.text:000000000001FC70                 LDR             X8, [X21,#0x28]
.text:000000000001FC74                 STR             X8, [SP,#0x60+var_38]
.text:000000000001FC78                 LDR             X8, [X22,#qword_31000@PAGEOFF]
.text:000000000001FC7C                 CBNZ            X8, loc_1FD20
.text:000000000001FC80                 LDP             X8, X24, [X0,#8]
.text:000000000001FC84                 LDUR            X9, [X0,#1]
.text:000000000001FC88                 MOV             X19, X1
.text:000000000001FC8C                 LDRB            W23, [X0]
.text:000000000001FC90                 STUR            X8, [SP,#0x60+var_51]
.text:000000000001FC94                 STR             X9, [SP,#8]
.text:000000000001FC98                 STP             XZR, XZR, [X0]
.text:000000000001FC9C                 STR             XZR, [X0,#0x10]
.text:000000000001FCA0                 MOV             W0, #8  ; unsigned __int64
.text:000000000001FCA4                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001FCA8                 MOV             X20, X0
.text:000000000001FCAC                 BL              ._ZNSt3__115__thread_structC1Ev ; std::__1::__thread_struct::__thread_struct(void)
.text:000000000001FCB0                 MOV             W0, #0x28 ; '(' ; unsigned __int64
.text:000000000001FCB4                 BL              ._Znwm  ; operator new(ulong)
.text:000000000001FCB8                 LDUR            X8, [SP,#0x60+var_51]
.text:000000000001FCBC                 ADRP            X2, #loc_1FEA0@PAGE
.text:000000000001FCC0                 LDR             X9, [SP,#8]
.text:000000000001FCC4                 MOV             X3, X0  ; arg
.text:000000000001FCC8                 STR             X20, [X0]
.text:000000000001FCCC                 ADD             X2, X2, #loc_1FEA0@PAGEOFF ; start_routine
.text:000000000001FCD0                 STRB            W23, [X0,#8]
.text:000000000001FCD4                 MOV             X1, XZR ; attr
.text:000000000001FCD8                 STUR            X8, [SP,#0x60+newthread+7]
.text:000000000001FCDC                 STR             X9, [SP,#0x18]
.text:000000000001FCE0                 LDUR            X8, [SP,#0x60+newthread+7]
.text:000000000001FCE4                 STR             X19, [X0,#0x20]
.text:000000000001FCE8                 STUR            XZR, [SP,#0x60+var_51]
.text:000000000001FCEC                 STR             XZR, [SP,#8]
.text:000000000001FCF0                 STP             X8, X24, [X0,#0x10]
.text:000000000001FCF4                 STUR            X9, [X0,#9]
.text:000000000001FCF8                 ADD             X0, SP, #0x60+newthread ; newthread
.text:000000000001FCFC                 BL              .pthread_create
.text:000000000001FD00                 CBNZ            W0, loc_1FD4C
.text:000000000001FD04                 LDR             X8, [X22,#qword_31000@PAGEOFF]
.text:000000000001FD08                 CBNZ            X8, loc_1FD58
.text:000000000001FD0C                 LDR             X8, [SP,#0x60+newthread]
.text:000000000001FD10                 ADD             X0, SP, #0x60+newthread ; this
.text:000000000001FD14                 STR             XZR, [SP,#0x60+newthread]
.text:000000000001FD18                 STR             X8, [X22,#qword_31000@PAGEOFF]
.text:000000000001FD1C                 BL              ._ZNSt3__16threadD1Ev ; std::__1::thread::~thread()
.text:000000000001FD20 loc_1FD20                               ; CODE XREF: sub_1FC50+2C↑j
.text:000000000001FD20                 LDR             X8, [X21,#0x28]
.text:000000000001FD24                 LDR             X9, [SP,#0x60+var_38]
.text:000000000001FD28                 CMP             X8, X9
.text:000000000001FD2C                 B.NE            loc_1FD48
.text:000000000001FD30                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:000000000001FD34                 LDP             X20, X19, [SP,#0x60+var_10]
.text:000000000001FD38                 LDP             X22, X21, [SP,#0x60+var_20]
.text:000000000001FD3C                 LDP             X24, X23, [SP,#0x60+var_30]
.text:000000000001FD40                 ADD             SP, SP, #0x70 ; 'p'
.text:000000000001FD44                 RET
.text:000000000001FD48 ; ---------------------------------------------------------------------------
.text:000000000001FD48 loc_1FD48                               ; CODE XREF: sub_1FC50+DC↑j
.text:000000000001FD48                 BL              .__stack_chk_fail
.text:000000000001FD4C ; ---------------------------------------------------------------------------
.text:000000000001FD4C loc_1FD4C                               ; CODE XREF: sub_1FC50+B0↑j
.text:000000000001FD4C                 ADRP            X1, #aThreadConstruc@PAGE ; "thread constructor failed"
.text:000000000001FD50                 ADD             X1, X1, #aThreadConstruc@PAGEOFF ; "thread constructor failed"
.text:000000000001FD54                 BL              ._ZNSt3__120__throw_system_errorEiPKc ; std::__1::__throw_system_error(int,char const*)
.text:000000000001FD58 loc_1FD58                               ; CODE XREF: sub_1FC50+B8↑j
.text:000000000001FD58                 BL              ._ZSt9terminatev ; std::terminate(void)
.text:000000000001FD58 ; } // starts at 1FC50
.text:000000000001FD58 ; End of function sub_1FC50
.text:000000000001FD58 ; ---------------------------------------------------------------------------
.text:000000000001FD5C                 ALIGN 0x20
.text:000000000001FD60 loc_1FD60                               ; CODE XREF: .text:loc_1F820↑j
.text:000000000001FD60 ; __unwind {
.text:000000000001FD60                 STP             X22, X21, [SP,#-0x30]!
.text:000000000001FD64                 STP             X20, X19, [SP,#0x10]
.text:000000000001FD68                 STP             X29, X30, [SP,#0x20]
.text:000000000001FD6C                 ADD             X29, SP, #0x20 ; ' '
.text:000000000001FD70                 ADRP            X0, #unk_31010@PAGE
.text:000000000001FD74                 ADD             X0, X0, #unk_31010@PAGEOFF
.text:000000000001FD78                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001FD7C                 ADRP            X8, #unk_31060@PAGE
.text:000000000001FD80                 ADD             X8, X8, #unk_31060@PAGEOFF
.text:000000000001FD84                 LDP             X21, X22, [X8]
.text:000000000001FD88                 CMP             X21, X22
.text:000000000001FD8C                 B.EQ            loc_1FDE0
.text:000000000001FD90                 ADRP            X19, #sub_1CAA0@PAGE
.text:000000000001FD94                 ADD             X19, X19, #sub_1CAA0@PAGEOFF
.text:000000000001FD98 loc_1FD98                               ; CODE XREF: .text:000000000001FDDC↓j
.text:000000000001FD98                 LDR             X20, [X21]
.text:000000000001FD9C                 LDR             X0, [X20,#0x20]
.text:000000000001FDA0                 CBNZ            X0, loc_1FDC8
.text:000000000001FDA4                 MOV             X8, X20
.text:000000000001FDA8                 LDRB            W9, [X8,#8]!
.text:000000000001FDAC                 TBNZ            W9, #0, loc_1FDB8
.text:000000000001FDB0                 ADD             X0, X8, #1
.text:000000000001FDB4                 B               loc_1FDBC
.text:000000000001FDB8 ; ---------------------------------------------------------------------------
.text:000000000001FDB8 loc_1FDB8                               ; CODE XREF: .text:000000000001FDAC↑j
.text:000000000001FDB8                 LDR             X0, [X20,#0x18]
.text:000000000001FDBC loc_1FDBC                               ; CODE XREF: .text:000000000001FDB4↑j
.text:000000000001FDBC                 BL              .__system_property_find
.text:000000000001FDC0                 STR             X0, [X20,#0x20]
.text:000000000001FDC4                 CBZ             X0, loc_1FDD4
.text:000000000001FDC8 loc_1FDC8                               ; CODE XREF: .text:000000000001FDA0↑j
.text:000000000001FDC8                 MOV             X1, X19
.text:000000000001FDCC                 MOV             X2, X20
.text:000000000001FDD0                 BL              .__system_property_read_callback
.text:000000000001FDD4 loc_1FDD4                               ; CODE XREF: .text:000000000001FDC4↑j
.text:000000000001FDD4                 ADD             X21, X21, #8
.text:000000000001FDD8                 CMP             X22, X21
.text:000000000001FDDC                 B.NE            loc_1FD98
.text:000000000001FDE0 loc_1FDE0                               ; CODE XREF: .text:000000000001FD8C↑j
.text:000000000001FDE0                 LDP             X29, X30, [SP,#0x20]
.text:000000000001FDE4                 LDP             X20, X19, [SP,#0x10]
.text:000000000001FDE8                 ADRP            X0, #unk_31010@PAGE
.text:000000000001FDEC                 ADD             X0, X0, #unk_31010@PAGEOFF
.text:000000000001FDF0                 LDP             X22, X21, [SP],#0x30
.text:000000000001FDF4                 B               ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001FDF4 ; } // starts at 1FD60
.text:000000000001FDF8 ; =============== S U B R O U T I N E =======================================
.text:000000000001FDF8 ; Attributes: bp-based frame
.text:000000000001FDF8 sub_1FDF8                               ; CODE XREF: gui::WidgetsSettings::load(void)+4C↓p
.text:000000000001FDF8 var_10          = -0x10
.text:000000000001FDF8 var_s0          =  0
.text:000000000001FDF8 ; __unwind {
.text:000000000001FDF8                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000001FDFC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001FE00                 ADD             X29, SP, #0x10
.text:000000000001FE04                 MOV             X19, X0
.text:000000000001FE08                 ADRP            X0, #unk_31010@PAGE
.text:000000000001FE0C                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001FE10                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001FE14                 ADRP            X8, #qword_31048@PAGE
.text:000000000001FE18                 ADD             X8, X8, #qword_31048@PAGEOFF
.text:000000000001FE1C                 LDP             X1, X8, [X8]
.text:000000000001FE20                 CMP             X1, X8
.text:000000000001FE24                 B.CS            loc_1FE44
.text:000000000001FE28                 LDR             X8, [X19,#0x20]
.text:000000000001FE2C                 CBZ             X8, loc_1FE58
.text:000000000001FE30                 CMP             X19, X8
.text:000000000001FE34                 B.EQ            loc_1FE60
.text:000000000001FE38                 STR             X8, [X1,#0x20]
.text:000000000001FE3C                 STR             XZR, [X19,#0x20]
.text:000000000001FE40                 B               loc_1FE7C
.text:000000000001FE44 ; ---------------------------------------------------------------------------
.text:000000000001FE44 loc_1FE44                               ; CODE XREF: sub_1FDF8+2C↑j
.text:000000000001FE44                 ADRP            X0, #unk_31040@PAGE
.text:000000000001FE48                 ADD             X0, X0, #unk_31040@PAGEOFF
.text:000000000001FE4C                 MOV             X1, X19
.text:000000000001FE50                 BL              loc_20058
.text:000000000001FE54                 B               loc_1FE88
.text:000000000001FE58 ; ---------------------------------------------------------------------------
.text:000000000001FE58 loc_1FE58                               ; CODE XREF: sub_1FDF8+34↑j
.text:000000000001FE58                 STR             XZR, [X1,#0x20]
.text:000000000001FE5C                 B               loc_1FE7C
.text:000000000001FE60 ; ---------------------------------------------------------------------------
.text:000000000001FE60 loc_1FE60                               ; CODE XREF: sub_1FDF8+3C↑j
.text:000000000001FE60                 STR             X1, [X1,#0x20]
.text:000000000001FE64                 LDR             X0, [X19,#0x20]
.text:000000000001FE68                 LDR             X8, [X0]
.text:000000000001FE6C                 LDR             X8, [X8,#0x18]
.text:000000000001FE70                 BLR             X8
.text:000000000001FE74                 ADRP            X8, #qword_31048@PAGE
.text:000000000001FE78                 LDR             X1, [X8,#qword_31048@PAGEOFF]
.text:000000000001FE7C loc_1FE7C                               ; CODE XREF: sub_1FDF8+48↑j
.text:000000000001FE7C                                         ; sub_1FDF8+64↑j
.text:000000000001FE7C                 ADD             X8, X1, #0x30 ; '0'
.text:000000000001FE80                 ADRP            X9, #qword_31048@PAGE
.text:000000000001FE84                 STR             X8, [X9,#qword_31048@PAGEOFF]
.text:000000000001FE88 loc_1FE88                               ; CODE XREF: sub_1FDF8+5C↑j
.text:000000000001FE88                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000001FE8C                 ADRP            X0, #unk_31010@PAGE
.text:000000000001FE90                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000001FE94                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000001FE98                 B               ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001FE98 ; } // starts at 1FDF8
.text:000000000001FE98 ; End of function sub_1FDF8
.text:000000000001FE98 ; ---------------------------------------------------------------------------
.text:000000000001FE9C                 ALIGN 0x20
.text:000000000001FEA0 loc_1FEA0                               ; DATA XREF: sub_1FC50+6C↑o
.text:000000000001FEA0                                         ; sub_1FC50+7C↑o
.text:000000000001FEA0 ; __unwind {
.text:000000000001FEA0                 STR             X19, [SP,#-0x20]!
.text:000000000001FEA4                 STP             X29, X30, [SP,#0x10]
.text:000000000001FEA8                 ADD             X29, SP, #0x10
.text:000000000001FEAC                 MOV             X19, X0
.text:000000000001FEB0                 BL              ._ZNSt3__119__thread_local_dataEv ; std::__1::__thread_local_data(void)
.text:000000000001FEB4                 LDR             X1, [X19]
.text:000000000001FEB8                 STR             XZR, [X19]
.text:000000000001FEBC                 BL              sub_1FEC8
.text:000000000001FEC0                 MOV             X0, X19
.text:000000000001FEC4                 BL              sub_1FED0
.text:000000000001FEC4 ; } // starts at 1FEA0
.text:000000000001FEC8 ; =============== S U B R O U T I N E =======================================
.text:000000000001FEC8 sub_1FEC8                               ; CODE XREF: .text:000000000001FEBC↑p
.text:000000000001FEC8 ; __unwind {
.text:000000000001FEC8                 LDR             W0, [X0]
.text:000000000001FECC                 B               .pthread_setspecific
.text:000000000001FECC ; } // starts at 1FEC8
.text:000000000001FECC ; End of function sub_1FEC8
.text:000000000001FED0 ; =============== S U B R O U T I N E =======================================
.text:000000000001FED0 ; Attributes: bp-based frame
.text:000000000001FED0 sub_1FED0                               ; CODE XREF: .text:000000000001FEC4↑p
.text:000000000001FED0 var_s0          =  0
.text:000000000001FED0 ; __unwind {
.text:000000000001FED0                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000001FED4                 MOV             X29, SP
.text:000000000001FED8                 ADD             X0, X0, #8
.text:000000000001FEDC                 BL              loc_1FEE0
.text:000000000001FEDC ; } // starts at 1FED0
.text:000000000001FEDC ; End of function sub_1FED0
.text:000000000001FEE0 loc_1FEE0                               ; CODE XREF: sub_1FED0+C↑p
.text:000000000001FEE0 ; __unwind {
.text:000000000001FEE0                 STP             X29, X30, [SP,#-0x10]!
.text:000000000001FEE4                 MOV             X29, SP
.text:000000000001FEE8                 BL              sub_1FEF0
.text:000000000001FEE8 ; } // starts at 1FEE0
.text:000000000001FEE8 ; ---------------------------------------------------------------------------
.text:000000000001FEEC                 DCD 0
.text:000000000001FEF0 ; =============== S U B R O U T I N E =======================================
.text:000000000001FEF0 ; Attributes: bp-based frame
.text:000000000001FEF0 sub_1FEF0                               ; CODE XREF: .text:000000000001FEE8↑p
.text:000000000001FEF0 var_4C          = -0x4C
.text:000000000001FEF0 var_48          = -0x48
.text:000000000001FEF0 var_40          = -0x40
.text:000000000001FEF0 var_30          = -0x30
.text:000000000001FEF0 var_20          = -0x20
.text:000000000001FEF0 var_10          = -0x10
.text:000000000001FEF0 var_s0          =  0
.text:000000000001FEF0 ; __unwind {
.text:000000000001FEF0                 SUB             SP, SP, #0x60
.text:000000000001FEF4                 STP             X26, X25, [SP,#0x50+var_40]
.text:000000000001FEF8                 STP             X24, X23, [SP,#0x50+var_30]
.text:000000000001FEFC                 STP             X22, X21, [SP,#0x50+var_20]
.text:000000000001FF00                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000001FF04                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000001FF08                 ADD             X29, SP, #0x50
.text:000000000001FF0C                 MOV             X22, #0x5AF7
.text:000000000001FF10                 STR             WZR, [SP,#0x50+var_4C]
.text:000000000001FF14                 MOV             W21, #0x4240
.text:000000000001FF18                 MOVK            X22, #0x7BD0,LSL#16
.text:000000000001FF1C                 MOV             X20, X0
.text:000000000001FF20                 MOVK            W21, #0xF,LSL#16
.text:000000000001FF24                 MOVK            X22, #0x863,LSL#32
.text:000000000001FF28                 ADD             X23, X0, #1
.text:000000000001FF2C                 MOV             X24, #0x7FFFFFFFFFFFFFFF
.text:000000000001FF30 loc_1FF30                               ; CODE XREF: sub_1FEF0+78↓j
.text:000000000001FF30                 LDR             X8, [X20,#0x18]
.text:000000000001FF34                 CMP             X8, #1
.text:000000000001FF38                 B.LT            loc_1FF54
.text:000000000001FF3C                 MUL             X9, X8, X21
.text:000000000001FF40                 CMP             X8, X22
.text:000000000001FF44                 ADD             X0, SP, #0x50+var_48
.text:000000000001FF48                 CSEL            X8, X9, X24, LT
.text:000000000001FF4C                 STR             X8, [SP,#0x50+var_48]
.text:000000000001FF50                 BL              ._ZNSt3__111this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILl1ELl1000000000EEEEE ; std::__1::this_thread::sleep_for(std::__1::chrono::duration<long long,std::__1::ratio<1l,1000000000l>> const&)
.text:000000000001FF54 loc_1FF54                               ; CODE XREF: sub_1FEF0+48↑j
.text:000000000001FF54                 LDRB            W8, [X20]
.text:000000000001FF58                 MOV             X0, X23
.text:000000000001FF5C                 TBZ             W8, #0, loc_1FF64
.text:000000000001FF60                 LDR             X0, [X20,#0x10]
.text:000000000001FF64 loc_1FF64                               ; CODE XREF: sub_1FEF0+6C↑j
.text:000000000001FF64                 BL              .__system_property_find
.text:000000000001FF68                 CBZ             X0, loc_1FF30
.text:000000000001FF6C                 ADRP            X20, #unk_31010@PAGE
.text:000000000001FF70                 ADRP            X23, #unk_31060@PAGE
.text:000000000001FF74                 ADRP            X24, #unk_31040@PAGE
.text:000000000001FF78                 ADRP            X21, #sub_1CAA0@PAGE
.text:000000000001FF7C                 MOV             X19, X0
.text:000000000001FF80                 ADD             X20, X20, #unk_31010@PAGEOFF
.text:000000000001FF84                 ADD             X23, X23, #unk_31060@PAGEOFF
.text:000000000001FF88                 ADD             X24, X24, #unk_31040@PAGEOFF
.text:000000000001FF8C                 ADD             X21, X21, #sub_1CAA0@PAGEOFF
.text:000000000001FF90                 B               loc_1FF9C
.text:000000000001FF94 ; ---------------------------------------------------------------------------
.text:000000000001FF94 loc_1FF94                               ; CODE XREF: sub_1FEF0+128↓j
.text:000000000001FF94                                         ; sub_1FEF0+14C↓j
.text:000000000001FF94                 MOV             X0, X20 ; this
.text:000000000001FF98                 BL              ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000001FF9C loc_1FF9C                               ; CODE XREF: sub_1FEF0+A0↑j
.text:000000000001FF9C                                         ; sub_1FEF0+C0↓j
.text:000000000001FF9C                 LDR             W1, [SP,#0x50+var_4C]
.text:000000000001FFA0                 ADD             X2, SP, #0x50+var_4C
.text:000000000001FFA4                 MOV             X0, X19
.text:000000000001FFA8                 MOV             X3, XZR
.text:000000000001FFAC                 BL              .__system_property_wait
.text:000000000001FFB0                 TBZ             W0, #0, loc_1FF9C
.text:000000000001FFB4                 MOV             X0, X20 ; this
.text:000000000001FFB8                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000001FFBC                 LDP             X25, X26, [X23]
.text:000000000001FFC0                 CMP             X25, X26
.text:000000000001FFC4                 B.EQ            loc_20010
.text:000000000001FFC8 loc_1FFC8                               ; CODE XREF: sub_1FEF0+11C↓j
.text:000000000001FFC8                 LDR             X22, [X25]
.text:000000000001FFCC                 LDR             X0, [X22,#0x20]
.text:000000000001FFD0                 CBNZ            X0, loc_1FFF8
.text:000000000001FFD4                 MOV             X8, X22
.text:000000000001FFD8                 LDRB            W9, [X8,#8]!
.text:000000000001FFDC                 TBNZ            W9, #0, loc_1FFE8
.text:000000000001FFE0                 ADD             X0, X8, #1
.text:000000000001FFE4                 B               loc_1FFEC
.text:000000000001FFE8 ; ---------------------------------------------------------------------------
.text:000000000001FFE8 loc_1FFE8                               ; CODE XREF: sub_1FEF0+EC↑j
.text:000000000001FFE8                 LDR             X0, [X22,#0x18]
.text:000000000001FFEC loc_1FFEC                               ; CODE XREF: sub_1FEF0+F4↑j
.text:000000000001FFEC                 BL              .__system_property_find
.text:000000000001FFF0                 STR             X0, [X22,#0x20]
.text:000000000001FFF4                 CBZ             X0, loc_20004
.text:000000000001FFF8 loc_1FFF8                               ; CODE XREF: sub_1FEF0+E0↑j
.text:000000000001FFF8                 MOV             X1, X21
.text:000000000001FFFC                 MOV             X2, X22
.text:0000000000020000                 BL              .__system_property_read_callback
.text:0000000000020004 loc_20004                               ; CODE XREF: sub_1FEF0+104↑j
.text:0000000000020004                 ADD             X25, X25, #8
.text:0000000000020008                 CMP             X26, X25
.text:000000000002000C                 B.NE            loc_1FFC8
.text:0000000000020010 loc_20010                               ; CODE XREF: sub_1FEF0+D4↑j
.text:0000000000020010                 LDP             X22, X25, [X24]
.text:0000000000020014                 CMP             X22, X25
.text:0000000000020018                 B.EQ            loc_1FF94
.text:000000000002001C loc_2001C                               ; CODE XREF: sub_1FEF0+148↓j
.text:000000000002001C                 LDR             X0, [X22,#0x20]
.text:0000000000020020                 CBZ             X0, loc_20040
.text:0000000000020024                 LDR             X8, [X0]
.text:0000000000020028                 LDR             X8, [X8,#0x30]
.text:000000000002002C                 BLR             X8
.text:0000000000020030                 ADD             X22, X22, #0x30 ; '0'
.text:0000000000020034                 CMP             X25, X22
.text:0000000000020038                 B.NE            loc_2001C
.text:000000000002003C                 B               loc_1FF94
.text:0000000000020040 ; ---------------------------------------------------------------------------
.text:0000000000020040 loc_20040                               ; CODE XREF: sub_1FEF0+130↑j
.text:0000000000020040                 BL              sub_20048
.text:0000000000020040 ; } // starts at 1FEF0
.text:0000000000020040 ; End of function sub_1FEF0
.text:0000000000020040 ; ---------------------------------------------------------------------------
.text:0000000000020044                 ALIGN 8
.text:0000000000020048 ; =============== S U B R O U T I N E =======================================
.text:0000000000020048 ; Attributes: noreturn bp-based frame
.text:0000000000020048 sub_20048                               ; CODE XREF: sub_1FEF0:loc_20040↑p
.text:0000000000020048 var_s0          =  0
.text:0000000000020048 ; __unwind {
.text:0000000000020048                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002004C                 MOV             X29, SP
.text:0000000000020050                 BL              .abort
.text:0000000000020050 ; } // starts at 20048
.text:0000000000020050 ; End of function sub_20048
.text:0000000000020050 ; ---------------------------------------------------------------------------
.text:0000000000020054                 ALIGN 8
.text:0000000000020058 loc_20058                               ; CODE XREF: sub_1FDF8+58↑p
.text:0000000000020058 ; __unwind {
.text:0000000000020058                 STR             X25, [SP,#-0x50]!
.text:000000000002005C                 STP             X24, X23, [SP,#0x10]
.text:0000000000020060                 STP             X22, X21, [SP,#0x20]
.text:0000000000020064                 STP             X20, X19, [SP,#0x30]
.text:0000000000020068                 STP             X29, X30, [SP,#0x40]
.text:000000000002006C                 ADD             X29, SP, #0x40 ; '@'
.text:0000000000020070                 LDP             X10, X8, [X0]
.text:0000000000020074                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:000000000002007C                 MOV             X23, #0x5555555555555555
.text:0000000000020080                 SUB             X8, X8, X10
.text:0000000000020084                 ASR             X8, X8, #4
.text:0000000000020088                 MUL             X24, X8, X9
.text:000000000002008C                 MOV             X19, X0
.text:0000000000020090                 MOVK            X23, #0x555,LSL#48
.text:0000000000020094                 ADD             X8, X24, #1
.text:0000000000020098                 CMP             X8, X23
.text:000000000002009C                 B.HI            loc_2023C
.text:00000000000200A0                 LDR             X11, [X19,#0x10]
.text:00000000000200A4                 MOV             X21, X1
.text:00000000000200A8                 SUB             X10, X11, X10
.text:00000000000200AC                 ASR             X10, X10, #4
.text:00000000000200B0                 MUL             X9, X10, X9
.text:00000000000200B4                 MOV             X10, #0x2AAAAAAAAAAAAA9
.text:00000000000200C0                 CMP             X9, X10
.text:00000000000200C4                 B.HI            loc_200D8
.text:00000000000200C8                 LSL             X9, X9, #1
.text:00000000000200CC                 CMP             X9, X8
.text:00000000000200D0                 CSEL            X23, X8, X9, CC
.text:00000000000200D4                 CBZ             X23, loc_20234
.text:00000000000200D8 loc_200D8                               ; CODE XREF: .text:00000000000200C4↑j
.text:00000000000200D8                 ADD             X8, X23, X23,LSL#1
.text:00000000000200DC                 LSL             X0, X8, #4
.text:00000000000200E0                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000200E4                 MOV             X22, X0
.text:00000000000200E8 loc_200E8                               ; CODE XREF: .text:0000000000020238↓j
.text:00000000000200E8                 MOV             W25, #0x30 ; '0'
.text:00000000000200EC                 LDR             X0, [X21,#0x20]
.text:00000000000200F0                 MOV             W8, #0x30 ; '0'
.text:00000000000200F4                 MADD            X20, X24, X25, X22
.text:00000000000200F8                 MADD            X8, X24, X8, X22
.text:00000000000200FC                 CBZ             X0, loc_20114
.text:0000000000020100                 CMP             X21, X0
.text:0000000000020104                 B.EQ            loc_2011C
.text:0000000000020108                 STR             X0, [X8,#0x20]
.text:000000000002010C                 STR             XZR, [X21,#0x20]
.text:0000000000020110                 B               loc_20130
.text:0000000000020114 ; ---------------------------------------------------------------------------
.text:0000000000020114 loc_20114                               ; CODE XREF: .text:00000000000200FC↑j
.text:0000000000020114                 STR             XZR, [X8,#0x20]
.text:0000000000020118                 B               loc_20130
.text:000000000002011C ; ---------------------------------------------------------------------------
.text:000000000002011C loc_2011C                               ; CODE XREF: .text:0000000000020104↑j
.text:000000000002011C                 STR             X20, [X8,#0x20]
.text:0000000000020120                 MOV             X1, X20
.text:0000000000020124                 LDR             X8, [X0]
.text:0000000000020128                 LDR             X8, [X8,#0x18]
.text:000000000002012C                 BLR             X8
.text:0000000000020130 loc_20130                               ; CODE XREF: .text:0000000000020110↑j
.text:0000000000020130                                         ; .text:0000000000020118↑j
.text:0000000000020130                 LDP             X21, X24, [X19]
.text:0000000000020134                 NOP
.text:0000000000020138                 MADD            X22, X23, X25, X22
.text:000000000002013C                 ADD             X23, X20, #0x30 ; '0'
.text:0000000000020140                 CMP             X24, X21
.text:0000000000020144                 B.EQ            loc_20210
.text:0000000000020148                 MOV             X25, XZR
.text:000000000002014C                 SUB             X21, X21, X24
.text:0000000000020150 loc_20150                               ; CODE XREF: .text:00000000000201A0↓j
.text:0000000000020150                 ADD             X8, X24, X25
.text:0000000000020154                 ADD             X9, X20, X25
.text:0000000000020158                 LDUR            X10, [X8,#-0x10]
.text:000000000002015C                 CBZ             X10, loc_20178
.text:0000000000020160                 SUB             X11, X8, #0x30 ; '0'
.text:0000000000020164                 CMP             X11, X10
.text:0000000000020168                 B.EQ            loc_20180
.text:000000000002016C                 STUR            X10, [X9,#-0x10]
.text:0000000000020170                 STUR            XZR, [X8,#-0x10]
.text:0000000000020174                 B               loc_20198
.text:0000000000020178 ; ---------------------------------------------------------------------------
.text:0000000000020178 loc_20178                               ; CODE XREF: .text:000000000002015C↑j
.text:0000000000020178                 STUR            XZR, [X9,#-0x10]
.text:000000000002017C                 B               loc_20198
.text:0000000000020180 ; ---------------------------------------------------------------------------
.text:0000000000020180 loc_20180                               ; CODE XREF: .text:0000000000020168↑j
.text:0000000000020180                 SUB             X1, X9, #0x30 ; '0'
.text:0000000000020184                 STUR            X1, [X9,#-0x10]
.text:0000000000020188                 LDUR            X0, [X8,#-0x10]
.text:000000000002018C                 LDR             X8, [X0]
.text:0000000000020190                 LDR             X8, [X8,#0x18]
.text:0000000000020194                 BLR             X8
.text:0000000000020198 loc_20198                               ; CODE XREF: .text:0000000000020174↑j
.text:0000000000020198                                         ; .text:000000000002017C↑j
.text:0000000000020198                 SUB             X25, X25, #0x30 ; '0'
.text:000000000002019C                 CMP             X21, X25
.text:00000000000201A0                 B.NE            loc_20150
.text:00000000000201A4                 LDP             X21, X24, [X19]
.text:00000000000201A8                 ADD             X8, X20, X25
.text:00000000000201AC                 STR             X22, [X19,#0x10]
.text:00000000000201B0                 CMP             X24, X21
.text:00000000000201B4                 STP             X8, X23, [X19]
.text:00000000000201B8                 B.EQ            loc_201F0
.text:00000000000201BC loc_201BC                               ; CODE XREF: .text:00000000000201EC↓j
.text:00000000000201BC                 LDUR            X0, [X24,#-0x10]
.text:00000000000201C0                 SUB             X24, X24, #0x30 ; '0'
.text:00000000000201C4                 CMP             X24, X0
.text:00000000000201C8                 B.EQ            loc_201DC
.text:00000000000201CC                 CBZ             X0, loc_201E8
.text:00000000000201D0                 LDR             X8, [X0]
.text:00000000000201D4                 LDR             X8, [X8,#0x28]
.text:00000000000201D8                 B               loc_201E4
.text:00000000000201DC ; ---------------------------------------------------------------------------
.text:00000000000201DC loc_201DC                               ; CODE XREF: .text:00000000000201C8↑j
.text:00000000000201DC                 LDR             X8, [X0]
.text:00000000000201E0                 LDR             X8, [X8,#0x20]
.text:00000000000201E4 loc_201E4                               ; CODE XREF: .text:00000000000201D8↑j
.text:00000000000201E4                 BLR             X8
.text:00000000000201E8 loc_201E8                               ; CODE XREF: .text:00000000000201CC↑j
.text:00000000000201E8                 CMP             X21, X24
.text:00000000000201EC                 B.NE            loc_201BC
.text:00000000000201F0 loc_201F0                               ; CODE XREF: .text:00000000000201B8↑j
.text:00000000000201F0                 CBZ             X21, loc_2021C
.text:00000000000201F4 loc_201F4                               ; CODE XREF: .text:0000000000020218↓j
.text:00000000000201F4                 MOV             X0, X21
.text:00000000000201F8                 LDP             X29, X30, [SP,#0x40]
.text:00000000000201FC                 LDP             X20, X19, [SP,#0x30]
.text:0000000000020200                 LDP             X22, X21, [SP,#0x20]
.text:0000000000020204                 LDP             X24, X23, [SP,#0x10]
.text:0000000000020208                 LDR             X25, [SP],#0x50
.text:000000000002020C                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000020210 ; ---------------------------------------------------------------------------
.text:0000000000020210 loc_20210                               ; CODE XREF: .text:0000000000020144↑j
.text:0000000000020210                 STP             X20, X23, [X19]
.text:0000000000020214                 STR             X22, [X19,#0x10]
.text:0000000000020218                 CBNZ            X21, loc_201F4
.text:000000000002021C loc_2021C                               ; CODE XREF: .text:loc_201F0↑j
.text:000000000002021C                 LDP             X29, X30, [SP,#0x40]
.text:0000000000020220                 LDP             X20, X19, [SP,#0x30]
.text:0000000000020224                 LDP             X22, X21, [SP,#0x20]
.text:0000000000020228                 LDP             X24, X23, [SP,#0x10]
.text:000000000002022C                 LDR             X25, [SP],#0x50
.text:0000000000020230                 RET
.text:0000000000020234 ; ---------------------------------------------------------------------------
.text:0000000000020234 loc_20234                               ; CODE XREF: .text:00000000000200D4↑j
.text:0000000000020234                 MOV             X22, XZR
.text:0000000000020238                 B               loc_200E8
.text:000000000002023C ; ---------------------------------------------------------------------------
.text:000000000002023C loc_2023C                               ; CODE XREF: .text:000000000002009C↑j
.text:000000000002023C                 MOV             X0, X19
.text:0000000000020240                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000020240 ; } // starts at 20058
.text:0000000000020240 ; ---------------------------------------------------------------------------
.text:0000000000020244                 DCD 0
.text:0000000000020248 ; =============== S U B R O U T I N E =======================================
.text:0000000000020248 ; Attributes: bp-based frame
.text:0000000000020248 sub_20248                               ; DATA XREF: .init_array:00000000000305A0↓o
.text:0000000000020248 var_s0          =  0
.text:0000000000020248 ; __unwind {
.text:0000000000020248                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002024C                 MOV             X29, SP
.text:0000000000020250                 ADRP            X8, #unk_31008@PAGE
.text:0000000000020254                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000020258                 LDARB           W8, [X8]
.text:000000000002025C                 TBNZ            W8, #0, loc_2029C
.text:0000000000020260                 ADRP            X0, #unk_31008@PAGE
.text:0000000000020264                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000020268                 BL              .__cxa_guard_acquire
.text:000000000002026C                 CBZ             W0, loc_2029C
.text:0000000000020270                 ADRP            X1, #qword_31000@PAGE
.text:0000000000020274                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000020278                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:000000000002027C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000020280                 STR             XZR, [X1]
.text:0000000000020284                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000020288                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002028C                 BL              .__cxa_atexit
.text:0000000000020290                 ADRP            X0, #unk_31008@PAGE
.text:0000000000020294                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000020298                 BL              .__cxa_guard_release
.text:000000000002029C loc_2029C                               ; CODE XREF: sub_20248+14↑j
.text:000000000002029C                                         ; sub_20248+24↑j
.text:000000000002029C                 ADRP            X8, #unk_31038@PAGE
.text:00000000000202A0                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:00000000000202A4                 LDARB           W8, [X8]
.text:00000000000202A8                 TBNZ            W8, #0, loc_202E4
.text:00000000000202AC                 ADRP            X0, #unk_31038@PAGE
.text:00000000000202B0                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000202B4                 BL              .__cxa_guard_acquire
.text:00000000000202B8                 CBZ             W0, loc_202E4
.text:00000000000202BC                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:00000000000202C0                 ADRP            X1, #unk_31010@PAGE
.text:00000000000202C4                 ADRP            X2, #off_2F000@PAGE
.text:00000000000202C8                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:00000000000202CC                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:00000000000202D0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000202D4                 BL              .__cxa_atexit
.text:00000000000202D8                 ADRP            X0, #unk_31038@PAGE
.text:00000000000202DC                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000202E0                 BL              .__cxa_guard_release
.text:00000000000202E4 loc_202E4                               ; CODE XREF: sub_20248+60↑j
.text:00000000000202E4                                         ; sub_20248+70↑j
.text:00000000000202E4                 ADRP            X8, #unk_31058@PAGE
.text:00000000000202E8                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:00000000000202EC                 LDARB           W8, [X8]
.text:00000000000202F0                 TBNZ            W8, #0, loc_20334
.text:00000000000202F4                 ADRP            X0, #unk_31058@PAGE
.text:00000000000202F8                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:00000000000202FC                 BL              .__cxa_guard_acquire
.text:0000000000020300                 CBZ             W0, loc_20334
.text:0000000000020304                 ADRP            X1, #unk_31040@PAGE
.text:0000000000020308                 ADRP            X0, #loc_1C078@PAGE
.text:000000000002030C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000020310                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:0000000000020314                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000020318                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002031C                 STP             XZR, XZR, [X1]
.text:0000000000020320                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:0000000000020324                 BL              .__cxa_atexit
.text:0000000000020328                 ADRP            X0, #unk_31058@PAGE
.text:000000000002032C                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000020330                 BL              .__cxa_guard_release
.text:0000000000020334 loc_20334                               ; CODE XREF: sub_20248+A8↑j
.text:0000000000020334                                         ; sub_20248+B8↑j
.text:0000000000020334                 ADRP            X8, #unk_31078@PAGE
.text:0000000000020338                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000002033C                 LDARB           W8, [X8]
.text:0000000000020340                 TBNZ            W8, #0, loc_20388
.text:0000000000020344                 ADRP            X0, #unk_31078@PAGE
.text:0000000000020348                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002034C                 BL              .__cxa_guard_acquire
.text:0000000000020350                 CBZ             W0, loc_20388
.text:0000000000020354                 ADRP            X1, #unk_31060@PAGE
.text:0000000000020358                 ADRP            X0, #loc_1C100@PAGE
.text:000000000002035C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000020360                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:0000000000020364                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000020368                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002036C                 STP             XZR, XZR, [X1]
.text:0000000000020370                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:0000000000020374                 BL              .__cxa_atexit
.text:0000000000020378                 ADRP            X0, #unk_31078@PAGE
.text:000000000002037C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000020380                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000020384                 B               .__cxa_guard_release
.text:0000000000020388 ; ---------------------------------------------------------------------------
.text:0000000000020388 loc_20388                               ; CODE XREF: sub_20248+F8↑j
.text:0000000000020388                                         ; sub_20248+108↑j
.text:0000000000020388                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002038C                 RET
.text:000000000002038C ; } // starts at 20248
.text:000000000002038C ; End of function sub_20248
.text:0000000000020390 ; =============== S U B R O U T I N E =======================================
.text:0000000000020390 ; UpdateHelper *__fastcall UpdateHelper::UpdateHelper(UpdateHelper *__hidden this)
.text:0000000000020390                 EXPORT _ZN12UpdateHelperC2Ev
.text:0000000000020390 _ZN12UpdateHelperC2Ev                   ; DATA XREF: LOAD:00000000000014B8↑o
.text:0000000000020390                                         ; LOAD:0000000000001EF0↑o
.text:0000000000020390 ; __unwind {
.text:0000000000020390                 STP             XZR, XZR, [X0] ; Alternative name is 'UpdateHelper::UpdateHelper(void)'
.text:0000000000020394                 STR             XZR, [X0,#0x10]
.text:0000000000020398                 RET
.text:0000000000020398 ; } // starts at 20390
.text:0000000000020398 ; End of function UpdateHelper::UpdateHelper(void)
.text:0000000000020398 ; ---------------------------------------------------------------------------
.text:000000000002039C                 ALIGN 0x20
.text:00000000000203A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000203A0 ; __int64 __fastcall UpdateHelper::initUpdateHelper(UpdateHelper *__hidden this)
.text:00000000000203A0                 EXPORT _ZN12UpdateHelper16initUpdateHelperEv
.text:00000000000203A0 _ZN12UpdateHelper16initUpdateHelperEv   ; DATA XREF: LOAD:0000000000000F60↑o
.text:00000000000203A0 ; __unwind {
.text:00000000000203A0                 STP             XZR, XZR, [X0]
.text:00000000000203A4                 STR             XZR, [X0,#0x10]
.text:00000000000203A8                 RET
.text:00000000000203A8 ; } // starts at 203A0
.text:00000000000203A8 ; End of function UpdateHelper::initUpdateHelper(void)
.text:00000000000203A8 ; ---------------------------------------------------------------------------
.text:00000000000203AC                 ALIGN 0x10
.text:00000000000203B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000203B0 ; void __fastcall UpdateHelper::~UpdateHelper(UpdateHelper *__hidden this)
.text:00000000000203B0                 EXPORT _ZN12UpdateHelperD2Ev
.text:00000000000203B0 _ZN12UpdateHelperD2Ev                   ; DATA XREF: LOAD:0000000000000C78↑o
.text:00000000000203B0                                         ; LOAD:0000000000001668↑o
.text:00000000000203B0 ; __unwind {
.text:00000000000203B0                 RET                     ; Alternative name is 'UpdateHelper::~UpdateHelper()'
.text:00000000000203B0 ; } // starts at 203B0
.text:00000000000203B0 ; End of function UpdateHelper::~UpdateHelper()
.text:00000000000203B0 ; ---------------------------------------------------------------------------
.text:00000000000203B4                 ALIGN 8
.text:00000000000203B8 ; =============== S U B R O U T I N E =======================================
.text:00000000000203B8 ; __int64 __fastcall UpdateHelper::incFrameCount(UpdateHelper *__hidden this)
.text:00000000000203B8                 EXPORT _ZN12UpdateHelper13incFrameCountEv
.text:00000000000203B8 _ZN12UpdateHelper13incFrameCountEv      ; DATA XREF: LOAD:0000000000001FC8↑o
.text:00000000000203B8 ; __unwind {
.text:00000000000203B8                 LDR             X8, [X0]
.text:00000000000203BC                 ADD             X8, X8, #1
.text:00000000000203C0                 STR             X8, [X0]
.text:00000000000203C4                 RET
.text:00000000000203C4 ; } // starts at 203B8
.text:00000000000203C4 ; End of function UpdateHelper::incFrameCount(void)
.text:00000000000203C8 ; =============== S U B R O U T I N E =======================================
.text:00000000000203C8 ; Attributes: bp-based frame
.text:00000000000203C8 ; __int64 __fastcall UpdateHelper::isUpdateDuration(UpdateHelper *__hidden this)
.text:00000000000203C8                 EXPORT _ZN12UpdateHelper16isUpdateDurationEv
.text:00000000000203C8 _ZN12UpdateHelper16isUpdateDurationEv   ; DATA XREF: LOAD:0000000000001920↑o
.text:00000000000203C8 var_10          = -0x10
.text:00000000000203C8 var_s0          =  0
.text:00000000000203C8 ; __unwind {
.text:00000000000203C8                 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000203CC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000203D0                 ADD             X29, SP, #0x10
.text:00000000000203D4                 MOV             X19, X0
.text:00000000000203D8                 BL              ._ZN5utils15getUtcTime_usecEv ; utils::getUtcTime_usec(void)
.text:00000000000203DC                 LDR             X8, [X19,#8]
.text:00000000000203E0                 CBNZ            X8, loc_203EC
.text:00000000000203E4                 MOV             X8, X0
.text:00000000000203E8                 STR             X0, [X19,#8]
.text:00000000000203EC loc_203EC                               ; CODE XREF: UpdateHelper::isUpdateDuration(void)+18↑j
.text:00000000000203EC                 SUB             X9, X0, X8
.text:00000000000203F0                 LSR             X9, X9, #6
.text:00000000000203F4                 CMP             X9, #0x753
.text:00000000000203F8                 B.CS            loc_20404
.text:00000000000203FC                 MOV             W8, WZR
.text:0000000000020400                 B               loc_2041C
.text:0000000000020404 ; ---------------------------------------------------------------------------
.text:0000000000020404 loc_20404                               ; CODE XREF: UpdateHelper::isUpdateDuration(void)+30↑j
.text:0000000000020404                 UCVTF           D0, X0
.text:0000000000020408                 STR             X0, [X19,#8]
.text:000000000002040C                 UCVTF           D1, X8
.text:0000000000020410                 MOV             W8, #1
.text:0000000000020414                 FSUB            D0, D0, D1
.text:0000000000020418                 STR             D0, [X19,#0x10]
.text:000000000002041C loc_2041C                               ; CODE XREF: UpdateHelper::isUpdateDuration(void)+38↑j
.text:000000000002041C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020420                 MOV             W0, W8
.text:0000000000020424                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000020428                 RET
.text:0000000000020428 ; } // starts at 203C8
.text:0000000000020428 ; End of function UpdateHelper::isUpdateDuration(void)
.text:0000000000020428 ; ---------------------------------------------------------------------------
.text:000000000002042C                 ALIGN 0x10
.text:0000000000020430 ; =============== S U B R O U T I N E =======================================
.text:0000000000020430 ; __int64 __fastcall UpdateHelper::resetUpdateDuration(UpdateHelper *__hidden this)
.text:0000000000020430                 EXPORT _ZN12UpdateHelper19resetUpdateDurationEv
.text:0000000000020430 _ZN12UpdateHelper19resetUpdateDurationEv
.text:0000000000020430                                         ; DATA XREF: LOAD:00000000000011A0↑o
.text:0000000000020430 ; __unwind {
.text:0000000000020430                 STR             XZR, [X0]
.text:0000000000020434                 STR             XZR, [X0,#0x10]
.text:0000000000020438                 RET
.text:0000000000020438 ; } // starts at 20430
.text:0000000000020438 ; End of function UpdateHelper::resetUpdateDuration(void)
.text:0000000000020438 ; ---------------------------------------------------------------------------
.text:000000000002043C                 ALIGN 0x20
.text:0000000000020440 ; =============== S U B R O U T I N E =======================================
.text:0000000000020440 ; Attributes: bp-based frame
.text:0000000000020440 ; __int64 __fastcall drawer::AnimatedRenderPassDrawer::AnimatedRenderPassDrawer(drawer::AnimatedRenderPassDrawer *__hidden this)
.text:0000000000020440                 EXPORT _ZN6drawer24AnimatedRenderPassDrawerC2Ev
.text:0000000000020440 _ZN6drawer24AnimatedRenderPassDrawerC2Ev
.text:0000000000020440                                         ; DATA XREF: LOAD:0000000000000E28↑o
.text:0000000000020440 var_10          = -0x10
.text:0000000000020440 var_s0          =  0
.text:0000000000020440 ; __unwind {
.text:0000000000020440                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000020444                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020448                 ADD             X29, SP, #0x10
.text:000000000002044C                 MOV             X19, X0
.text:0000000000020450                 BL              ._ZN6drawer16RenderPassDrawerC2Ev ; drawer::RenderPassDrawer::RenderPassDrawer(void)
.text:0000000000020454                 ADRP            X8, #_ZTVN6drawer24AnimatedRenderPassDrawerE_ptr@PAGE
.text:0000000000020458                 MOV             W9, #0xFFFFFFFF
.text:000000000002045C                 LDR             X8, [X8,#_ZTVN6drawer24AnimatedRenderPassDrawerE_ptr@PAGEOFF]
.text:0000000000020460                 STR             WZR, [X19,#0xE0]
.text:0000000000020464                 STP             XZR, XZR, [X19,#0xC8]
.text:0000000000020468                 STUR            XZR, [X19,#0xD5]
.text:000000000002046C                 ADD             X8, X8, #0x10
.text:0000000000020470                 STP             XZR, XZR, [X19,#0xE8]
.text:0000000000020474                 STR             W9, [X19,#0xF8]
.text:0000000000020478                 STR             X8, [X19]
.text:000000000002047C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020480                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000020484                 RET
.text:0000000000020484 ; } // starts at 20440
.text:0000000000020484 ; End of function drawer::AnimatedRenderPassDrawer::AnimatedRenderPassDrawer(void)
.text:0000000000020488 ; =============== S U B R O U T I N E =======================================
.text:0000000000020488 ; Attributes: bp-based frame
.text:0000000000020488 ; drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)
.text:0000000000020488                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer4dumpERN5Hwobs9FrameDumpE
.text:0000000000020488 _ZN6drawer24AnimatedRenderPassDrawer4dumpERN5Hwobs9FrameDumpE
.text:0000000000020488                                         ; DATA XREF: LOAD:0000000000001AA0↑o
.text:0000000000020488                                         ; .data.rel.ro:0000000000030158↓o
.text:0000000000020488 var_50          = -0x50
.text:0000000000020488 var_40          = -0x40
.text:0000000000020488 var_38          = -0x38
.text:0000000000020488 var_30          = -0x30
.text:0000000000020488 var_20          = -0x20
.text:0000000000020488 var_10          = -0x10
.text:0000000000020488 var_s0          =  0
.text:0000000000020488 ; __unwind {
.text:0000000000020488                 SUB             SP, SP, #0x60
.text:000000000002048C                 STR             X23, [SP,#0x50+var_30]
.text:0000000000020490                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000020494                 STP             X20, X19, [SP,#0x50+var_10]
.text:0000000000020498                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000002049C                 ADD             X29, SP, #0x50
.text:00000000000204A0                 MRS             X21, #3, c13, c0, #2
.text:00000000000204A4                 LDR             X8, [X21,#0x28]
.text:00000000000204A8                 STR             X8, [SP,#0x50+var_38]
.text:00000000000204AC                 LDR             W8, [X0,#0x60]
.text:00000000000204B0                 LDR             W9, [X0,#0xF8]
.text:00000000000204B4                 CMP             W9, W8
.text:00000000000204B8                 B.EQ            loc_20558
.text:00000000000204BC                 SXTW            X9, W8
.text:00000000000204C0                 STR             W8, [X0,#0xF8]
.text:00000000000204C4                 MOV             X20, X0
.text:00000000000204C8                 STR             X9, [X1,#0x10]
.text:00000000000204CC                 MOV             X19, X1
.text:00000000000204D0                 LDP             Q1, Q0, [X0,#0x80]
.text:00000000000204D4                 BL              .__subtf3
.text:00000000000204D8                 BL              .__trunctfsf2
.text:00000000000204DC                 STR             S0, [X19,#0x18]
.text:00000000000204E0                 LDP             X22, X23, [X20,#0x68]
.text:00000000000204E4                 CMP             X22, X23
.text:00000000000204E8                 B.EQ            loc_20558
.text:00000000000204EC                 ADD             X20, X19, #0x38 ; '8'
.text:00000000000204F0 loc_204F0                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)+CC↓j
.text:00000000000204F0                 LDR             X8, [X22,#8]
.text:00000000000204F4                 LDR             W9, [X8]
.text:00000000000204F8                 STR             X9, [SP,#0x50+var_50]
.text:00000000000204FC                 LDR             W8, [X8,#4]
.text:0000000000020500                 STR             X8, [SP,#0x50+var_50+8]
.text:0000000000020504                 LDP             Q1, Q0, [X22,#0x20]
.text:0000000000020508                 BL              .__subtf3
.text:000000000002050C                 BL              .__trunctfdf2
.text:0000000000020510                 LDP             X8, X9, [X19,#0x40]
.text:0000000000020514                 STR             D0, [SP,#0x50+var_40]
.text:0000000000020518                 CMP             X8, X9
.text:000000000002051C                 B.EQ            loc_20540
.text:0000000000020520                 LDR             X9, [SP,#0x50+var_40]
.text:0000000000020524                 LDR             Q0, [SP,#0x50+var_50]
.text:0000000000020528                 STR             X9, [X8,#0x10]
.text:000000000002052C                 STR             Q0, [X8]
.text:0000000000020530                 LDR             X8, [X19,#0x40]
.text:0000000000020534                 ADD             X8, X8, #0x18
.text:0000000000020538                 STR             X8, [X19,#0x40]
.text:000000000002053C                 B               loc_2054C
.text:0000000000020540 ; ---------------------------------------------------------------------------
.text:0000000000020540 loc_20540                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)+94↑j
.text:0000000000020540                 MOV             X1, SP
.text:0000000000020544                 MOV             X0, X20
.text:0000000000020548                 BL              loc_21CF8
.text:000000000002054C loc_2054C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)+B4↑j
.text:000000000002054C                 ADD             X22, X22, #0x60 ; '`'
.text:0000000000020550                 CMP             X23, X22
.text:0000000000020554                 B.NE            loc_204F0
.text:0000000000020558 loc_20558                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)+30↑j
.text:0000000000020558                                         ; drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)+60↑j
.text:0000000000020558                 LDR             X8, [X21,#0x28]
.text:000000000002055C                 LDR             X9, [SP,#0x50+var_38]
.text:0000000000020560                 CMP             X8, X9
.text:0000000000020564                 B.NE            loc_20580
.text:0000000000020568                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000002056C                 LDP             X20, X19, [SP,#0x50+var_10]
.text:0000000000020570                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000020574                 LDR             X23, [SP,#0x50+var_30]
.text:0000000000020578                 ADD             SP, SP, #0x60 ; '`'
.text:000000000002057C                 RET
.text:0000000000020580 ; ---------------------------------------------------------------------------
.text:0000000000020580 loc_20580                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)+DC↑j
.text:0000000000020580                 BL              .__stack_chk_fail
.text:0000000000020580 ; } // starts at 20488
.text:0000000000020580 ; End of function drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)
.text:0000000000020580 ; ---------------------------------------------------------------------------
.text:0000000000020584                 ALIGN 8
.text:0000000000020588 ; =============== S U B R O U T I N E =======================================
.text:0000000000020588 ; Attributes: bp-based frame
.text:0000000000020588 ; drawer::AnimatedRenderPassDrawer::addFrameInfo(gui::FrameData const&)
.text:0000000000020588                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer12addFrameInfoERKN3gui9FrameDataE
.text:0000000000020588 _ZN6drawer24AnimatedRenderPassDrawer12addFrameInfoERKN3gui9FrameDataE
.text:0000000000020588                                         ; DATA XREF: LOAD:0000000000001CB0↑o
.text:0000000000020588                                         ; .data.rel.ro:0000000000030168↓o
.text:0000000000020588 var_10          = -0x10
.text:0000000000020588 var_s0          =  0
.text:0000000000020588 ; __unwind {
.text:0000000000020588                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:000000000002058C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020590                 ADD             X29, SP, #0x10
.text:0000000000020594                 LDR             W8, [X1]
.text:0000000000020598                 MOV             X9, X0
.text:000000000002059C                 MOV             X20, X1
.text:00000000000205A0                 MOV             X19, X0
.text:00000000000205A4                 STR             W8, [X9,#0x60]!
.text:00000000000205A8                 CMP             X9, X1
.text:00000000000205AC                 B.EQ            loc_205BC
.text:00000000000205B0                 LDP             X1, X2, [X20,#8]
.text:00000000000205B4                 ADD             X0, X19, #0x68 ; 'h'
.text:00000000000205B8                 BL              loc_21090
.text:00000000000205BC loc_205BC                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::addFrameInfo(gui::FrameData const&)+24↑j
.text:00000000000205BC                 LDP             Q0, Q1, [X20,#0x20]
.text:00000000000205C0                 STRB            WZR, [X19,#0xDC]
.text:00000000000205C4                 STR             XZR, [X19,#0xD0]
.text:00000000000205C8                 STP             Q0, Q1, [X19,#0x80]
.text:00000000000205CC                 STR             XZR, [X19,#0xF0]
.text:00000000000205D0                 STR             WZR, [X19,#0xD8]
.text:00000000000205D4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000205D8                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:00000000000205DC                 RET
.text:00000000000205DC ; } // starts at 20588
.text:00000000000205DC ; End of function drawer::AnimatedRenderPassDrawer::addFrameInfo(gui::FrameData const&)
.text:00000000000205E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000205E0 ; __int64 __fastcall drawer::AnimatedRenderPassDrawer::resetAnimation(drawer::AnimatedRenderPassDrawer *__hidden this)
.text:00000000000205E0                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer14resetAnimationEv
.text:00000000000205E0 _ZN6drawer24AnimatedRenderPassDrawer14resetAnimationEv
.text:00000000000205E0                                         ; DATA XREF: LOAD:0000000000002268↑o
.text:00000000000205E0 ; __unwind {
.text:00000000000205E0                 STRB            WZR, [X0,#0xDC]
.text:00000000000205E4                 STR             XZR, [X0,#0xD0]
.text:00000000000205E8                 STR             XZR, [X0,#0xF0]
.text:00000000000205EC                 STR             WZR, [X0,#0xD8]
.text:00000000000205F0                 RET
.text:00000000000205F0 ; } // starts at 205E0
.text:00000000000205F0 ; End of function drawer::AnimatedRenderPassDrawer::resetAnimation(void)
.text:00000000000205F0 ; ---------------------------------------------------------------------------
.text:00000000000205F4                 ALIGN 8
.text:00000000000205F8 ; =============== S U B R O U T I N E =======================================
.text:00000000000205F8 ; Attributes: bp-based frame
.text:00000000000205F8 ; drawer *__fastcall drawer::AnimatedRenderPassDrawer::draw(drawer::AnimatedRenderPassDrawer *__hidden this)
.text:00000000000205F8                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer4drawEv
.text:00000000000205F8 _ZN6drawer24AnimatedRenderPassDrawer4drawEv
.text:00000000000205F8                                         ; DATA XREF: LOAD:0000000000001608↑o
.text:00000000000205F8                                         ; .data.rel.ro:0000000000030150↓o
.text:00000000000205F8 var_10          = -0x10
.text:00000000000205F8 var_s0          =  0
.text:00000000000205F8 ; __unwind {
.text:00000000000205F8                 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000205FC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020600                 ADD             X29, SP, #0x10
.text:0000000000020604                 MOV             X19, X0
.text:0000000000020608                 BL              ._ZN6drawer16RenderPassDrawer14measureWidgetsEv ; drawer::RenderPassDrawer::measureWidgets(void)
.text:000000000002060C                 LDP             X8, X9, [X19,#0xE8]
.text:0000000000020610                 CMP             X9, X8
.text:0000000000020614                 B.CS            loc_2062C
.text:0000000000020618                 MOV             W8, #1
.text:000000000002061C                 MOV             X0, X19 ; this
.text:0000000000020620                 STRB            W8, [X19,#0xDC]
.text:0000000000020624                 BL              ._ZN6drawer24AnimatedRenderPassDrawer24calculateCircularMarqueeEv ; drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)
.text:0000000000020628                 B               loc_20630
.text:000000000002062C ; ---------------------------------------------------------------------------
.text:000000000002062C loc_2062C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::draw(void)+1C↑j
.text:000000000002062C                 STRB            WZR, [X19,#0xDC]
.text:0000000000020630 loc_20630                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::draw(void)+30↑j
.text:0000000000020630                 LDR             W8, [X19,#0xD8]
.text:0000000000020634                 MOV             X0, X19
.text:0000000000020638                 LDR             X9, [X19]
.text:000000000002063C                 STP             WZR, WZR, [X19,#0x2C]
.text:0000000000020640                 STR             W8, [X19,#0x28]
.text:0000000000020644                 LDR             X8, [X9,#0x50]
.text:0000000000020648                 BLR             X8
.text:000000000002064C                 MOV             X0, X19 ; this
.text:0000000000020650                 BL              ._ZN6drawer16RenderPassDrawer11drawWidgetsEv ; drawer::RenderPassDrawer::drawWidgets(void)
.text:0000000000020654                 LDR             X8, [X19]
.text:0000000000020658                 MOV             X0, X19
.text:000000000002065C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020660                 LDR             X1, [X8,#0x58]
.text:0000000000020664                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000020668                 BR              X1
.text:0000000000020668 ; } // starts at 205F8
.text:0000000000020668 ; End of function drawer::AnimatedRenderPassDrawer::draw(void)
.text:0000000000020668 ; ---------------------------------------------------------------------------
.text:000000000002066C                 ALIGN 0x10
.text:0000000000020670 ; =============== S U B R O U T I N E =======================================
.text:0000000000020670 ; __int64 __fastcall drawer::AnimatedRenderPassDrawer::animateMarquee(drawer::AnimatedRenderPassDrawer *__hidden this)
.text:0000000000020670                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer14animateMarqueeEv
.text:0000000000020670 _ZN6drawer24AnimatedRenderPassDrawer14animateMarqueeEv
.text:0000000000020670                                         ; DATA XREF: LOAD:0000000000001D10↑o
.text:0000000000020670 ; __unwind {
.text:0000000000020670                 LDP             X8, X9, [X0,#0xE8]
.text:0000000000020674                 CMP             X9, X8
.text:0000000000020678                 B.CS            loc_20688
.text:000000000002067C                 MOV             W8, #1
.text:0000000000020680                 STRB            W8, [X0,#0xDC]
.text:0000000000020684                 B               ._ZN6drawer24AnimatedRenderPassDrawer24calculateCircularMarqueeEv ; drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)
.text:0000000000020688 ; ---------------------------------------------------------------------------
.text:0000000000020688 loc_20688                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::animateMarquee(void)+8↑j
.text:0000000000020688                 STRB            WZR, [X0,#0xDC]
.text:000000000002068C                 RET
.text:000000000002068C ; } // starts at 20670
.text:000000000002068C ; End of function drawer::AnimatedRenderPassDrawer::animateMarquee(void)
.text:0000000000020690 ; =============== S U B R O U T I N E =======================================
.text:0000000000020690 ; Attributes: bp-based frame
.text:0000000000020690 ; __int64 __fastcall drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(drawer::AnimatedRenderPassDrawer *__hidden this)
.text:0000000000020690                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer23prelayoutRenderPassTextEv
.text:0000000000020690 _ZN6drawer24AnimatedRenderPassDrawer23prelayoutRenderPassTextEv
.text:0000000000020690                                         ; DATA XREF: LOAD:00000000000013B0↑o
.text:0000000000020690                                         ; .data.rel.ro:0000000000030178↓o
.text:0000000000020690 var_218         = -0x218
.text:0000000000020690 var_210         = -0x210
.text:0000000000020690 var_208         = -0x208
.text:0000000000020690 var_200         = -0x200
.text:0000000000020690 var_1F8         = -0x1F8
.text:0000000000020690 var_1F0         = -0x1F0
.text:0000000000020690 var_1E8         = -0x1E8
.text:0000000000020690 var_1D4         = -0x1D4
.text:0000000000020690 var_1D0         = -0x1D0
.text:0000000000020690 var_1C0         = -0x1C0
.text:0000000000020690 var_1B8         = -0x1B8
.text:0000000000020690 var_1B0         = -0x1B0
.text:0000000000020690 var_1A8         = -0x1A8
.text:0000000000020690 var_1A0         = -0x1A0
.text:0000000000020690 var_190         = -0x190
.text:0000000000020690 var_188         = -0x188
.text:0000000000020690 var_180         = -0x180
.text:0000000000020690 var_140         = -0x140
.text:0000000000020690 var_120         = -0x120
.text:0000000000020690 var_88          = -0x88
.text:0000000000020690 var_70          = -0x70
.text:0000000000020690 var_60          = -0x60
.text:0000000000020690 var_50          = -0x50
.text:0000000000020690 var_40          = -0x40
.text:0000000000020690 var_30          = -0x30
.text:0000000000020690 var_20          = -0x20
.text:0000000000020690 var_10          = -0x10
.text:0000000000020690 var_s0          =  0
.text:0000000000020690 ; __unwind {
.text:0000000000020690                 STP             D11, D10, [SP,#-0x10+var_70]!
.text:0000000000020694                 STP             D9, D8, [SP,#0x70+var_60]
.text:0000000000020698                 STP             X28, X27, [SP,#0x70+var_50]
.text:000000000002069C                 STP             X26, X25, [SP,#0x70+var_40]
.text:00000000000206A0                 STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000206A4                 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000206A8                 STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000206AC                 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000206B0                 ADD             X29, SP, #0x70
.text:00000000000206B4                 SUB             SP, SP, #0x1B0
.text:00000000000206B8                 MRS             X10, #3, c13, c0, #2
.text:00000000000206BC                 ADD             X11, SP, #0x220+var_188
.text:00000000000206C0                 LDR             X8, [X10,#0x28]
.text:00000000000206C4                 ADRP            X9, #unk_7920@PAGE
.text:00000000000206C8                 ADD             X9, X9, #unk_7920@PAGEOFF
.text:00000000000206CC                 MOV             X19, X0
.text:00000000000206D0                 STR             X8, [X11,#0x108]
.text:00000000000206D4                 LDR             W8, [X0,#0xA0]
.text:00000000000206D8                 LDR             S0, [X0,#0x18]
.text:00000000000206DC                 LDP             X28, X26, [X0,#0x68]
.text:00000000000206E0                 CMP             W8, #0
.text:00000000000206E4                 CSET            W8, EQ
.text:00000000000206E8                 FADD            S8, S0, S0
.text:00000000000206EC                 CMP             X28, X26
.text:00000000000206F0                 LDR             S9, [X9,W8,UXTW#2]
.text:00000000000206F4                 STR             S8, [SP,#0x220+var_1D4]
.text:00000000000206F8                 B.EQ            loc_20A2C
.text:00000000000206FC                 ADD             X8, X11, #0x48 ; 'H'
.text:0000000000020700                 STR             X10, [SP,#0x220+var_218]
.text:0000000000020704                 FMOV            S10, #1.0
.text:0000000000020708                 ADRP            X23, #asc_7D83@PAGE ; " "
.text:000000000002070C                 MOV             V11.16B, V9.16B
.text:0000000000020710                 MOV             X22, XZR
.text:0000000000020714                 STR             X8, [SP,#0x220+var_1F0]
.text:0000000000020718                 ADD             X8, SP, #0x220+var_1B8
.text:000000000002071C                 ORR             X8, X8, #1
.text:0000000000020720                 ADD             X20, X11, #0x70 ; 'p'
.text:0000000000020724                 ADD             X21, X11, #8
.text:0000000000020728                 STR             X8, [SP,#0x220+var_1F8]
.text:000000000002072C                 ADD             X8, SP, #0x220+var_1D0
.text:0000000000020730                 ORR             X8, X8, #1
.text:0000000000020734                 ADD             X23, X23, #asc_7D83@PAGEOFF ; " "
.text:0000000000020738                 STR             X8, [SP,#0x220+var_200]
.text:000000000002073C                 ADRP            X8, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020740                 LDR             X8, [X8,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000020744                 ADD             X8, X8, #0x10
.text:0000000000020748                 STR             X8, [SP,#0x220+var_208]
.text:000000000002074C                 ADRP            X8, #_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020750                 LDR             X8, [X8,#_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000020754                 STR             X26, [SP,#0x220+var_1E8]
.text:0000000000020758                 ADD             X8, X8, #8
.text:000000000002075C                 STR             X8, [SP,#0x220+var_210]
.text:0000000000020760                 B               loc_20788
.text:0000000000020764 ; ---------------------------------------------------------------------------
.text:0000000000020764 loc_20764                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+2B8↓j
.text:0000000000020764                 LDR             X0, [SP,#0x220+var_190] ; void *
.text:0000000000020768                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002076C                 LDRB            W8, [SP,#0x220+var_1D0]
.text:0000000000020770                 TBZ             W8, #0, loc_20954
.text:0000000000020774 loc_20774                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+298↓j
.text:0000000000020774                                         ; drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+2C0↓j
.text:0000000000020774                 LDR             X0, [SP,#0x220+var_1C0] ; void *
.text:0000000000020778                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002077C                 LDRB            W8, [SP,#0x220+var_1B8]
.text:0000000000020780                 TBNZ            W8, #0, loc_2095C
.text:0000000000020784                 B               loc_20964
.text:0000000000020788 ; ---------------------------------------------------------------------------
.text:0000000000020788 loc_20788                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+D0↑j
.text:0000000000020788                                         ; drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+388↓j
.text:0000000000020788                 MOV             X24, X28
.text:000000000002078C                 LDR             X25, [X24,#0x40]!
.text:0000000000020790                 LDR             X8, [X24,#8]
.text:0000000000020794                 CMP             X8, X25
.text:0000000000020798                 B.EQ            loc_207BC
.text:000000000002079C                 MOV             X27, X8
.text:00000000000207A0 loc_207A0                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+128↓j
.text:00000000000207A0                 LDRB            W9, [X27,#-0x18]!
.text:00000000000207A4                 TBZ             W9, #0, loc_207B0
.text:00000000000207A8                 LDUR            X0, [X8,#-8] ; void *
.text:00000000000207AC                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000207B0 loc_207B0                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+114↑j
.text:00000000000207B0                 MOV             X8, X27
.text:00000000000207B4                 CMP             X25, X27
.text:00000000000207B8                 B.NE            loc_207A0
.text:00000000000207BC loc_207BC                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+108↑j
.text:00000000000207BC                 LDP             X8, X9, [X28,#8]
.text:00000000000207C0                 STR             X25, [X28,#0x48]
.text:00000000000207C4                 CMP             X8, X9
.text:00000000000207C8                 B.EQ            loc_20930
.text:00000000000207CC                 ADRP            X8, #_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_ostreamIcS2_EE_ptr@PAGE
.text:00000000000207D0                 ADD             X25, SP, #0x220+var_188
.text:00000000000207D4                 MOV             X0, X20 ; this
.text:00000000000207D8                 LDR             X8, [X8,#_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_ostreamIcS2_EE_ptr@PAGEOFF]
.text:00000000000207DC                 MOV             X1, X21 ; void *
.text:00000000000207E0                 MOV             X26, X20
.text:00000000000207E4                 MOV             X9, X8
.text:00000000000207E8                 ADD             X8, X8, #0x18
.text:00000000000207EC                 ADD             X9, X9, #0x40 ; '@'
.text:00000000000207F0                 STR             X8, [SP,#0x220+var_188]
.text:00000000000207F4                 STR             X9, [X25,#0x70]
.text:00000000000207F8                 BL              ._ZNSt3__18ios_base4initEPv ; std::__1::ios_base::init(void *)
.text:00000000000207FC                 ADRP            X8, #_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020800                 MOV             W10, #0xFFFFFFFF
.text:0000000000020804                 MOV             X0, X21
.text:0000000000020808                 LDR             X8, [X8,#_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:000000000002080C                 ADD             X20, SP, #0x220+var_188
.text:0000000000020810                 STR             XZR, [X25,#0xF8]
.text:0000000000020814                 STR             W10, [SP,#0x220+var_88]
.text:0000000000020818                 MOV             X9, X8
.text:000000000002081C                 ADD             X8, X8, #0x18
.text:0000000000020820                 ADD             X9, X9, #0x40 ; '@'
.text:0000000000020824                 STR             X8, [SP,#0x220+var_188]
.text:0000000000020828                 STR             X9, [X25,#0x70]
.text:000000000002082C                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::basic_streambuf(void)
.text:0000000000020830                 LDR             X8, [SP,#0x220+var_208]
.text:0000000000020834                 MOVI            V0.2D, #0
.text:0000000000020838                 STR             X8, [SP,#0x220+var_180]
.text:000000000002083C                 LDR             X8, [SP,#0x220+var_1F0]
.text:0000000000020840                 STP             Q0, Q0, [X8]
.text:0000000000020844                 MOV             W8, #0x10
.text:0000000000020848                 STR             W8, [SP,#0x220+var_120]
.text:000000000002084C                 LDP             X25, X8, [X28,#8]
.text:0000000000020850                 SUB             X27, X8, #4
.text:0000000000020854                 CMP             X25, X27
.text:0000000000020858                 B.EQ            loc_20884
.text:000000000002085C loc_2085C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+1EC↓j
.text:000000000002085C                 LDR             W1, [X25],#4
.text:0000000000020860                 ADD             X0, SP, #0x220+var_188
.text:0000000000020864                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(uint)
.text:0000000000020868                 ADD             X0, SP, #0x220+var_188
.text:000000000002086C                 MOV             X1, X23
.text:0000000000020870                 MOV             W2, #1
.text:0000000000020874                 BL              sub_21E20
.text:0000000000020878                 CMP             X27, X25
.text:000000000002087C                 B.NE            loc_2085C
.text:0000000000020880                 LDR             X8, [X28,#0x10]
.text:0000000000020884 loc_20884                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+1C8↑j
.text:0000000000020884                 LDUR            W1, [X8,#-4]
.text:0000000000020888                 ADD             X0, SP, #0x220+var_188
.text:000000000002088C                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(uint)
.text:0000000000020890                 MOV             W8, #0xE
.text:0000000000020894                 STP             XZR, XZR, [SP,#0x220+var_1B8]
.text:0000000000020898                 MOV             W9, #0x2520
.text:000000000002089C                 STR             XZR, [SP,#0x220+var_1A8]
.text:00000000000208A0                 MOVK            W9, #0x2073,LSL#16
.text:00000000000208A4                 STRB            W8, [SP,#0x220+var_1B8]
.text:00000000000208A8                 MOV             X0, X21
.text:00000000000208AC                 LDR             X8, [SP,#0x220+var_1F8]
.text:00000000000208B0                 STUR            W9, [X8,#3]
.text:00000000000208B4                 MOV             W9, #0x20642520
.text:00000000000208BC                 STR             W9, [X8]
.text:00000000000208C0                 ADD             X8, SP, #0x220+var_1D0
.text:00000000000208C4                 STRB            WZR, [SP,#0x220+var_1B0]
.text:00000000000208C8                 LDR             W25, [X28]
.text:00000000000208CC                 BL              sub_220E0
.text:00000000000208D0                 LDRB            W8, [SP,#0x220+var_1D0]
.text:00000000000208D4                 ADD             X0, SP, #0x220+var_1B8
.text:00000000000208D8                 LDR             X9, [SP,#0x220+var_1C0]
.text:00000000000208DC                 MOV             W1, W25
.text:00000000000208E0                 TST             W8, #1
.text:00000000000208E4                 LDR             X8, [SP,#0x220+var_200]
.text:00000000000208E8                 CSEL            X2, X8, X9, EQ
.text:00000000000208EC                 ADD             X8, SP, #0x220+var_1A0
.text:00000000000208F0                 BL              sub_20AD0
.text:00000000000208F4                 LDP             X8, X9, [X28,#0x48]
.text:00000000000208F8                 CMP             X8, X9
.text:00000000000208FC                 B.CS            loc_20938
.text:0000000000020900                 LDR             X9, [SP,#0x220+var_190]
.text:0000000000020904                 LDR             Q0, [SP,#0x220+var_1A0]
.text:0000000000020908                 STR             X9, [X8,#0x10]
.text:000000000002090C                 STR             Q0, [X8]
.text:0000000000020910                 STP             XZR, XZR, [SP,#0x220+var_1A0]
.text:0000000000020914                 STR             XZR, [SP,#0x220+var_190]
.text:0000000000020918                 LDR             X8, [X28,#0x48]
.text:000000000002091C                 ADD             X8, X8, #0x18
.text:0000000000020920                 STR             X8, [X28,#0x48]
.text:0000000000020924                 LDRB            W8, [SP,#0x220+var_1D0]
.text:0000000000020928                 TBNZ            W8, #0, loc_20774
.text:000000000002092C                 B               loc_20954
.text:0000000000020930 ; ---------------------------------------------------------------------------
.text:0000000000020930 loc_20930                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+138↑j
.text:0000000000020930                 MOV             X24, XZR
.text:0000000000020934                 B               loc_209D8
.text:0000000000020938 ; ---------------------------------------------------------------------------
.text:0000000000020938 loc_20938                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+26C↑j
.text:0000000000020938                 ADD             X1, SP, #0x220+var_1A0
.text:000000000002093C                 MOV             X0, X24
.text:0000000000020940                 BL              sub_22398
.text:0000000000020944                 LDRB            W8, [SP,#0x220+var_1A0]
.text:0000000000020948                 TBNZ            W8, #0, loc_20764
.text:000000000002094C                 LDRB            W8, [SP,#0x220+var_1D0]
.text:0000000000020950                 TBNZ            W8, #0, loc_20774
.text:0000000000020954 loc_20954                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+E0↑j
.text:0000000000020954                                         ; drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+29C↑j
.text:0000000000020954                 LDRB            W8, [SP,#0x220+var_1B8]
.text:0000000000020958                 TBZ             W8, #0, loc_20964
.text:000000000002095C loc_2095C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+F0↑j
.text:000000000002095C                 LDR             X0, [SP,#0x220+var_1A8] ; void *
.text:0000000000020960                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000020964 loc_20964                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+F4↑j
.text:0000000000020964                                         ; drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+2C8↑j
.text:0000000000020964                 LDR             X8, [X28,#0x48]
.text:0000000000020968                 LDURB           W9, [X8,#-0x18]
.text:000000000002096C                 TBNZ            W9, #0, loc_20978
.text:0000000000020970                 LSR             X24, X9, #1
.text:0000000000020974                 B               loc_2097C
.text:0000000000020978 ; ---------------------------------------------------------------------------
.text:0000000000020978 loc_20978                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+2DC↑j
.text:0000000000020978                 LDUR            X24, [X8,#-0x10]
.text:000000000002097C loc_2097C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+2E4↑j
.text:000000000002097C                 ADRP            X8, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020980                 ADRP            X9, #_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020984                 LDR             X8, [X8,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000020988                 LDR             X9, [X9,#_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:000000000002098C                 LDRB            W10, [SP,#0x220+var_140]
.text:0000000000020990                 ADD             X8, X8, #0x10
.text:0000000000020994                 MOV             X11, X9
.text:0000000000020998                 ADD             X9, X9, #0x18
.text:000000000002099C                 ADD             X11, X11, #0x40 ; '@'
.text:00000000000209A0                 STP             X9, X8, [SP,#0x220+var_188]
.text:00000000000209A4                 STR             X11, [X20,#0x70]
.text:00000000000209A8                 TBZ             W10, #0, loc_209B4
.text:00000000000209AC                 LDR             X0, [X20,#0x58] ; void *
.text:00000000000209B0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000209B4 loc_209B4                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+318↑j
.text:00000000000209B4                 MOV             X0, X21
.text:00000000000209B8                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:00000000000209BC                 LDR             X1, [SP,#0x220+var_210]
.text:00000000000209C0                 ADD             X0, SP, #0x220+var_188
.text:00000000000209C4                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::~basic_ostream()
.text:00000000000209C8                 MOV             X0, X26
.text:00000000000209CC                 MOV             X20, X26
.text:00000000000209D0                 BL              ._ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ios<char,std::__1::char_traits<char>>::~basic_ios()
.text:00000000000209D4                 LDR             X26, [SP,#0x220+var_1E8]
.text:00000000000209D8 loc_209D8                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+2A4↑j
.text:00000000000209D8                 LDP             X8, X9, [X19,#0x68]
.text:00000000000209DC                 UCVTF           S2, X24
.text:00000000000209E0                 ADD             X28, X28, #0x60 ; '`'
.text:00000000000209E4                 SUB             X8, X9, X8
.text:00000000000209E8                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:00000000000209F0                 ASR             X8, X8, #5
.text:00000000000209F4                 MUL             X8, X8, X9
.text:00000000000209F8                 UCVTF           S0, X8
.text:00000000000209FC                 FMAX            S1, S0, S10
.text:0000000000020A00                 FMUL            S1, S1, S2
.text:0000000000020A04                 FDIV            S1, S8, S1
.text:0000000000020A08                 FCMP            S1, S11
.text:0000000000020A0C                 FCSEL           S11, S1, S11, MI
.text:0000000000020A10                 CSEL            X22, X24, X22, MI
.text:0000000000020A14                 CMP             X28, X26
.text:0000000000020A18                 B.NE            loc_20788
.text:0000000000020A1C                 UCVTF           S1, X22
.text:0000000000020A20                 LDR             X10, [SP,#0x220+var_218]
.text:0000000000020A24                 ADD             X11, SP, #0x220+var_188
.text:0000000000020A28                 B               loc_20A48
.text:0000000000020A2C ; ---------------------------------------------------------------------------
.text:0000000000020A2C loc_20A2C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+68↑j
.text:0000000000020A2C                 MOV             X9, #0xAAAAAAAAAAAAAAAA
.text:0000000000020A30                 FMOV            S1, WZR
.text:0000000000020A34                 SUB             X8, X26, X28
.text:0000000000020A38                 MOVK            X9, #0xAAAB
.text:0000000000020A3C                 ASR             X8, X8, #5
.text:0000000000020A40                 MUL             X8, X8, X9
.text:0000000000020A44                 UCVTF           S0, X8
.text:0000000000020A48 loc_20A48                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+398↑j
.text:0000000000020A48                 FMUL            S1, S9, S1
.text:0000000000020A4C                 ADD             X8, SP, #0x220+var_188
.text:0000000000020A50                 ADD             X9, SP, #0x220+var_1D4
.text:0000000000020A54                 FMUL            S0, S1, S0
.text:0000000000020A58                 FCMP            S0, S8
.text:0000000000020A5C                 STR             S0, [SP,#0x220+var_188]
.text:0000000000020A60                 CSEL            X8, X9, X8, MI
.text:0000000000020A64                 LDR             W8, [X8]
.text:0000000000020A68                 FMOV            S0, W8
.text:0000000000020A6C                 STR             W8, [X19,#0xE0]
.text:0000000000020A70                 FCMP            S8, S0
.text:0000000000020A74                 B.PL            loc_20A90
.text:0000000000020A78                 FDIV            S1, S0, S8
.text:0000000000020A7C                 FMOV            S0, #1.25
.text:0000000000020A80                 FCMP            S1, S0
.text:0000000000020A84                 B.PL            loc_20A90
.text:0000000000020A88                 FMUL            S0, S8, S0
.text:0000000000020A8C                 STR             S0, [X19,#0xE0]
.text:0000000000020A90 loc_20A90                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+3E4↑j
.text:0000000000020A90                                         ; drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+3F4↑j
.text:0000000000020A90                 LDR             X8, [X10,#0x28]
.text:0000000000020A94                 LDR             X9, [X11,#0x108]
.text:0000000000020A98                 CMP             X8, X9
.text:0000000000020A9C                 B.NE            loc_20AC8
.text:0000000000020AA0                 ADD             SP, SP, #0x1B0
.text:0000000000020AA4                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:0000000000020AA8                 LDP             X20, X19, [SP,#0x70+var_10]
.text:0000000000020AAC                 LDP             X22, X21, [SP,#0x70+var_20]
.text:0000000000020AB0                 LDP             X24, X23, [SP,#0x70+var_30]
.text:0000000000020AB4                 LDP             X26, X25, [SP,#0x70+var_40]
.text:0000000000020AB8                 LDP             X28, X27, [SP,#0x70+var_50]
.text:0000000000020ABC                 LDP             D9, D8, [SP,#0x70+var_60]
.text:0000000000020AC0                 LDP             D11, D10, [SP+0x70+var_70],#0x80
.text:0000000000020AC4                 RET
.text:0000000000020AC8 ; ---------------------------------------------------------------------------
.text:0000000000020AC8 loc_20AC8                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+40C↑j
.text:0000000000020AC8                 BL              .__stack_chk_fail
.text:0000000000020AC8 ; } // starts at 20690
.text:0000000000020AC8 ; End of function drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)
.text:0000000000020AC8 ; ---------------------------------------------------------------------------
.text:0000000000020ACC                 ALIGN 0x10
.text:0000000000020AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000020AD0 ; Attributes: bp-based frame
.text:0000000000020AD0 sub_20AD0                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+260↑p
.text:0000000000020AD0 var_70          = -0x70
.text:0000000000020AD0 var_60          = -0x60
.text:0000000000020AD0 var_50          = -0x50
.text:0000000000020AD0 var_40          = -0x40
.text:0000000000020AD0 var_30          = -0x30
.text:0000000000020AD0 var_20          = -0x20
.text:0000000000020AD0 var_10          = -0x10
.text:0000000000020AD0 var_s0          =  0
.text:0000000000020AD0 ; __unwind {
.text:0000000000020AD0                 STR             X25, [SP,#-0x10+var_40]!
.text:0000000000020AD4                 STP             X24, X23, [SP,#0x40+var_30]
.text:0000000000020AD8                 STP             X22, X21, [SP,#0x40+var_20]
.text:0000000000020ADC                 STP             X20, X19, [SP,#0x40+var_10]
.text:0000000000020AE0                 STP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000020AE4                 ADD             X29, SP, #0x40
.text:0000000000020AE8                 MOV             X19, X8
.text:0000000000020AEC                 LDRB            W8, [X0]
.text:0000000000020AF0                 LDR             X9, [X0,#0x10]
.text:0000000000020AF4                 MOV             X21, X2
.text:0000000000020AF8                 MOV             X25, #0xFFFFFFFFFFFFFFFF
.text:0000000000020AFC                 MOV             X23, X0
.text:0000000000020B00                 TST             W8, #1
.text:0000000000020B04                 MOV             W24, W1
.text:0000000000020B08                 CSINC           X3, X9, X0, NE
.text:0000000000020B0C                 MOV             X0, XZR
.text:0000000000020B10                 MOV             X2, XZR
.text:0000000000020B14                 MOV             W4, W1
.text:0000000000020B18                 MOV             X1, X25
.text:0000000000020B1C                 MOV             X5, X21
.text:0000000000020B20                 BL              sub_222F0
.text:0000000000020B24                 ADD             W8, W0, #1
.text:0000000000020B28                 SXTW            X22, W8
.text:0000000000020B2C                 MOV             X0, X22 ; unsigned __int64
.text:0000000000020B30                 BL              ._Znam  ; operator new[](ulong)
.text:0000000000020B34                 LDRB            W8, [X23]
.text:0000000000020B38                 MOV             X1, X25
.text:0000000000020B3C                 LDR             X9, [X23,#0x10]
.text:0000000000020B40                 MOV             X2, X22
.text:0000000000020B44                 MOV             W4, W24
.text:0000000000020B48                 MOV             X5, X21
.text:0000000000020B4C                 TST             W8, #1
.text:0000000000020B50                 CSINC           X3, X9, X23, NE
.text:0000000000020B54                 MOV             X20, X0
.text:0000000000020B58                 BL              sub_222F0
.text:0000000000020B5C                 SUB             X21, X22, #1
.text:0000000000020B60                 STP             XZR, XZR, [X19,#8]
.text:0000000000020B64                 CMN             X21, #0x10
.text:0000000000020B68                 STR             XZR, [X19]
.text:0000000000020B6C                 B.CS            loc_20BD8
.text:0000000000020B70                 CMP             X21, #0x17
.text:0000000000020B74                 B.CS            loc_20B88
.text:0000000000020B78                 LSL             W8, W21, #1
.text:0000000000020B7C                 STRB            W8, [X19],#1
.text:0000000000020B80                 CBNZ            X21, loc_20BA8
.text:0000000000020B84                 B               loc_20BB8
.text:0000000000020B88 ; ---------------------------------------------------------------------------
.text:0000000000020B88 loc_20B88                               ; CODE XREF: sub_20AD0+A4↑j
.text:0000000000020B88                 ADD             X8, X22, #0xF
.text:0000000000020B8C                 AND             X22, X8, #0xFFFFFFFFFFFFFFF0
.text:0000000000020B90                 MOV             X0, X22 ; unsigned __int64
.text:0000000000020B94                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000020B98                 ORR             X8, X22, #1
.text:0000000000020B9C                 STP             X21, X0, [X19,#8]
.text:0000000000020BA0                 STR             X8, [X19]
.text:0000000000020BA4                 MOV             X19, X0
.text:0000000000020BA8 loc_20BA8                               ; CODE XREF: sub_20AD0+B0↑j
.text:0000000000020BA8                 MOV             X0, X19 ; dest
.text:0000000000020BAC                 MOV             X1, X20 ; src
.text:0000000000020BB0                 MOV             X2, X21 ; n
.text:0000000000020BB4                 BL              .memcpy
.text:0000000000020BB8 loc_20BB8                               ; CODE XREF: sub_20AD0+B4↑j
.text:0000000000020BB8                 STRB            WZR, [X19,X21]
.text:0000000000020BBC                 MOV             X0, X20 ; void *
.text:0000000000020BC0                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000020BC4                 LDP             X20, X19, [SP,#0x40+var_10]
.text:0000000000020BC8                 LDP             X22, X21, [SP,#0x40+var_20]
.text:0000000000020BCC                 LDP             X24, X23, [SP,#0x40+var_30]
.text:0000000000020BD0                 LDR             X25, [SP+0x40+var_40],#0x50
.text:0000000000020BD4                 B               ._ZdaPv ; operator delete[](void *)
.text:0000000000020BD8 ; ---------------------------------------------------------------------------
.text:0000000000020BD8 loc_20BD8                               ; CODE XREF: sub_20AD0+9C↑j
.text:0000000000020BD8                 MOV             X0, X19
.text:0000000000020BDC                 BL              ._ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv ; std::__1::__basic_string_common<true>::__throw_length_error(void)
.text:0000000000020BDC ; } // starts at 20AD0
.text:0000000000020BE0 ; __unwind {
.text:0000000000020BE0                 STR             X21, [SP,#0x40+var_70]!
.text:0000000000020BE4                 STP             X20, X19, [SP,#0x70+var_60]
.text:0000000000020BE8                 STP             X29, X30, [SP,#0x70+var_50]
.text:0000000000020BEC                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000020BF0                 ADRP            X8, #_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020BF4                 ADRP            X9, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020BF8                 MOV             X19, X0
.text:0000000000020BFC                 LDR             X8, [X8,#_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000020C00                 MOV             X20, X0
.text:0000000000020C04                 LDR             X9, [X9,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000020C08                 MOV             X21, X0
.text:0000000000020C0C                 LDRB            W11, [X0,#0x48]
.text:0000000000020C10                 ADD             X10, X8, #0x40 ; '@'
.text:0000000000020C14                 ADD             X9, X9, #0x10
.text:0000000000020C18                 ADD             X8, X8, #0x18
.text:0000000000020C1C                 STR             X10, [X20,#0x70]!
.text:0000000000020C20                 STR             X9, [X21,#8]!
.text:0000000000020C24                 STR             X8, [X0]
.text:0000000000020C28                 TBZ             W11, #0, loc_20C34
.text:0000000000020C2C                 LDR             X0, [X19,#0x58] ; void *
.text:0000000000020C30                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000020C34 loc_20C34                               ; CODE XREF: sub_20AD0+158↑j
.text:0000000000020C34                 MOV             X0, X21
.text:0000000000020C38                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:0000000000020C3C                 ADRP            X8, #_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000020C40                 MOV             X0, X19
.text:0000000000020C44                 LDR             X8, [X8,#_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000020C48                 ADD             X1, X8, #8
.text:0000000000020C4C                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::~basic_ostream()
.text:0000000000020C50                 MOV             X0, X20
.text:0000000000020C54                 LDP             X29, X30, [SP,#0x70+var_50]
.text:0000000000020C58                 LDP             X20, X19, [SP,#0x70+var_60]
.text:0000000000020C5C                 LDR             X21, [SP+0x70+var_70],#0x30
.text:0000000000020C60                 B               ._ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ios<char,std::__1::char_traits<char>>::~basic_ios()
.text:0000000000020C60 ; } // starts at 20BE0
.text:0000000000020C60 ; End of function sub_20AD0
.text:0000000000020C60 ; ---------------------------------------------------------------------------
.text:0000000000020C64                 ALIGN 8
.text:0000000000020C68 ; =============== S U B R O U T I N E =======================================
.text:0000000000020C68 ; Attributes: bp-based frame
.text:0000000000020C68 ; __int64 __fastcall drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(drawer::AnimatedRenderPassDrawer *__hidden this)
.text:0000000000020C68                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer22recalculateTextDrawersEv
.text:0000000000020C68 _ZN6drawer24AnimatedRenderPassDrawer22recalculateTextDrawersEv
.text:0000000000020C68                                         ; DATA XREF: LOAD:0000000000001E60↑o
.text:0000000000020C68                                         ; .data.rel.ro:0000000000030180↓o
.text:0000000000020C68 var_80          = -0x80
.text:0000000000020C68 var_78          = -0x78
.text:0000000000020C68 var_70          = -0x70
.text:0000000000020C68 var_60          = -0x60
.text:0000000000020C68 var_50          = -0x50
.text:0000000000020C68 var_40          = -0x40
.text:0000000000020C68 var_30          = -0x30
.text:0000000000020C68 var_20          = -0x20
.text:0000000000020C68 var_10          = -0x10
.text:0000000000020C68 var_s0          =  0
.text:0000000000020C68 ; __unwind {
.text:0000000000020C68                 SUB             SP, SP, #0x90
.text:0000000000020C6C                 STP             D11, D10, [SP,#0x80+var_70]
.text:0000000000020C70                 STP             D9, D8, [SP,#0x80+var_60]
.text:0000000000020C74                 STR             X27, [SP,#0x80+var_50]
.text:0000000000020C78                 STP             X26, X25, [SP,#0x80+var_40]
.text:0000000000020C7C                 STP             X24, X23, [SP,#0x80+var_30]
.text:0000000000020C80                 STP             X22, X21, [SP,#0x80+var_20]
.text:0000000000020C84                 STP             X20, X19, [SP,#0x80+var_10]
.text:0000000000020C88                 STP             X29, X30, [SP,#0x80+var_s0]
.text:0000000000020C8C                 ADD             X29, SP, #0x80
.text:0000000000020C90                 MRS             X24, #3, c13, c0, #2
.text:0000000000020C94                 MOV             X19, X0
.text:0000000000020C98                 LDR             X8, [X24,#0x28]
.text:0000000000020C9C                 MOV             X20, X0
.text:0000000000020CA0                 STR             X8, [SP,#0x80+var_78]
.text:0000000000020CA4                 LDR             X21, [X19,#0x40]!
.text:0000000000020CA8                 LDR             X22, [X19,#8]
.text:0000000000020CAC                 CMP             X22, X21
.text:0000000000020CB0                 B.EQ            loc_20CD4
.text:0000000000020CB4 loc_20CB4                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+68↓j
.text:0000000000020CB4                 LDR             X0, [X22,#-8]!
.text:0000000000020CB8                 STR             XZR, [X22]
.text:0000000000020CBC                 CBZ             X0, loc_20CCC
.text:0000000000020CC0                 LDR             X8, [X0]
.text:0000000000020CC4                 LDR             X8, [X8,#8]
.text:0000000000020CC8                 BLR             X8
.text:0000000000020CCC loc_20CCC                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+54↑j
.text:0000000000020CCC                 CMP             X21, X22
.text:0000000000020CD0                 B.NE            loc_20CB4
.text:0000000000020CD4 loc_20CD4                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+48↑j
.text:0000000000020CD4                 MOV             W8, #0x42C80000
.text:0000000000020CD8                 LDR             S0, [X20,#0x18]
.text:0000000000020CDC                 FMOV            S2, WZR
.text:0000000000020CE0                 STR             X21, [X20,#0x48]
.text:0000000000020CE4                 LDP             X25, X26, [X20,#0x68]
.text:0000000000020CE8                 FMOV            S1, W8
.text:0000000000020CEC                 LDR             W8, [X20,#0xA0]
.text:0000000000020CF0                 CMP             W8, #1
.text:0000000000020CF4                 FDIV            S0, S0, S1
.text:0000000000020CF8                 FMOV            S1, #1.0
.text:0000000000020CFC                 FCSEL           S2, S1, S2, EQ
.text:0000000000020D00                 CMP             X25, X26
.text:0000000000020D04                 FADD            S1, S2, S1
.text:0000000000020D08                 FDIV            S8, S0, S1
.text:0000000000020D0C                 B.EQ            loc_20E1C
.text:0000000000020D10                 MOV             X9, #0xAAAAAAAAAAAAAAAA
.text:0000000000020D14                 LDR             S1, [X20,#0xE0]
.text:0000000000020D18                 SUB             X8, X26, X25
.text:0000000000020D1C                 LDR             S11, [X20,#0x20]
.text:0000000000020D20                 MOVK            X9, #0xAAAB
.text:0000000000020D24                 ASR             X8, X8, #5
.text:0000000000020D28                 MUL             X8, X8, X9
.text:0000000000020D2C                 ADD             X21, X20, #0xB4
.text:0000000000020D30                 MOV             W22, #0x23 ; '#'
.text:0000000000020D34                 UCVTF           S0, X8
.text:0000000000020D38                 FDIV            S0, S1, S0
.text:0000000000020D3C                 FMOV            S1, #0.5
.text:0000000000020D40                 FMUL            S0, S0, S1
.text:0000000000020D44                 FSUB            S9, S0, S8
.text:0000000000020D48                 FADD            S10, S8, S9
.text:0000000000020D4C loc_20D4C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+1AC↓j
.text:0000000000020D4C                 LDR             X8, [X20]
.text:0000000000020D50                 MOV             X0, X20
.text:0000000000020D54                 MOV             W1, #1
.text:0000000000020D58                 MOV             X2, X22
.text:0000000000020D5C                 LDR             X9, [X8,#0x30]
.text:0000000000020D60                 MOV             X8, SP
.text:0000000000020D64                 BLR             X9
.text:0000000000020D68                 LDP             X23, X27, [X25,#0x40]
.text:0000000000020D6C                 LDR             X0, [SP,#0x80+var_80]
.text:0000000000020D70                 CMP             X23, X27
.text:0000000000020D74                 B.EQ            loc_20D90
.text:0000000000020D78 loc_20D78                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+124↓j
.text:0000000000020D78                 MOV             X1, X23
.text:0000000000020D7C                 BL              ._ZN6drawer15TextblockDrawer7addTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE ; drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000020D80                 LDR             X0, [SP,#0x80+var_80]
.text:0000000000020D84                 ADD             X23, X23, #0x18
.text:0000000000020D88                 CMP             X27, X23
.text:0000000000020D8C                 B.NE            loc_20D78
.text:0000000000020D90 loc_20D90                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+10C↑j
.text:0000000000020D90                 LDR             W8, [X20,#0x1C]
.text:0000000000020D94                 MOV             W1, #2
.text:0000000000020D98                 LDR             W9, [X20,#0x24]
.text:0000000000020D9C                 STR             S9, [X0,#0x18]
.text:0000000000020DA0                 STR             S11, [X0,#0x20]
.text:0000000000020DA4                 STR             W8, [X0,#0x1C]
.text:0000000000020DA8                 STR             W9, [X0,#0x24]
.text:0000000000020DAC                 BL              ._ZN6drawer15TextblockDrawer14setTextGravityEN3gui11TextGravityE ; drawer::TextblockDrawer::setTextGravity(gui::TextGravity)
.text:0000000000020DB0                 LDR             X0, [SP,#0x80+var_80]
.text:0000000000020DB4                 MOV             X1, X21
.text:0000000000020DB8                 BL              ._ZN6drawer15TextblockDrawer18setBackgroundColorERKN3glm5tvec4IfLNS1_9precisionE0EEE ; drawer::TextblockDrawer::setBackgroundColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000020DBC                 LDP             X8, X9, [X20,#0x48]
.text:0000000000020DC0                 CMP             X8, X9
.text:0000000000020DC4                 B.CS            loc_20DE4
.text:0000000000020DC8                 LDR             X9, [SP,#0x80+var_80]
.text:0000000000020DCC                 STR             XZR, [SP,#0x80+var_80]
.text:0000000000020DD0                 STR             X9, [X8]
.text:0000000000020DD4                 LDR             X8, [X20,#0x48]
.text:0000000000020DD8                 ADD             X8, X8, #8
.text:0000000000020DDC                 STR             X8, [X20,#0x48]
.text:0000000000020DE0                 B               loc_20DF0
.text:0000000000020DE4 ; ---------------------------------------------------------------------------
.text:0000000000020DE4 loc_20DE4                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+15C↑j
.text:0000000000020DE4                 MOV             X1, SP
.text:0000000000020DE8                 MOV             X0, X19
.text:0000000000020DEC                 BL              sub_224F8
.text:0000000000020DF0 loc_20DF0                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+178↑j
.text:0000000000020DF0                 LDR             X0, [SP,#0x80+var_80]
.text:0000000000020DF4                 STR             XZR, [SP,#0x80+var_80]
.text:0000000000020DF8                 CBZ             X0, loc_20E08
.text:0000000000020DFC                 LDR             X8, [X0]
.text:0000000000020E00                 LDR             X8, [X8,#8]
.text:0000000000020E04                 BLR             X8
.text:0000000000020E08 loc_20E08                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+190↑j
.text:0000000000020E08                 FADD            S11, S10, S11
.text:0000000000020E0C                 ADD             X25, X25, #0x60 ; '`'
.text:0000000000020E10                 CMP             X25, X26
.text:0000000000020E14                 B.NE            loc_20D4C
.text:0000000000020E18                 LDR             X21, [X20,#0x48]
.text:0000000000020E1C loc_20E1C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+A4↑j
.text:0000000000020E1C                 LDR             X8, [X19]
.text:0000000000020E20                 CMP             X8, X21
.text:0000000000020E24                 B.EQ            loc_20E38
.text:0000000000020E28                 LDUR            X8, [X21,#-8]
.text:0000000000020E2C                 LDR             S0, [X8,#0x18]
.text:0000000000020E30                 FADD            S0, S8, S0
.text:0000000000020E34                 STR             S0, [X8,#0x18]
.text:0000000000020E38 loc_20E38                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+1BC↑j
.text:0000000000020E38                 LDR             X8, [X24,#0x28]
.text:0000000000020E3C                 LDR             X9, [SP,#0x80+var_78]
.text:0000000000020E40                 CMP             X8, X9
.text:0000000000020E44                 B.NE            loc_20E70
.text:0000000000020E48                 LDP             X29, X30, [SP,#0x80+var_s0]
.text:0000000000020E4C                 LDP             X20, X19, [SP,#0x80+var_10]
.text:0000000000020E50                 LDP             X22, X21, [SP,#0x80+var_20]
.text:0000000000020E54                 LDP             X24, X23, [SP,#0x80+var_30]
.text:0000000000020E58                 LDP             X26, X25, [SP,#0x80+var_40]
.text:0000000000020E5C                 LDR             X27, [SP,#0x80+var_50]
.text:0000000000020E60                 LDP             D9, D8, [SP,#0x80+var_60]
.text:0000000000020E64                 LDP             D11, D10, [SP,#0x80+var_70]
.text:0000000000020E68                 ADD             SP, SP, #0x90
.text:0000000000020E6C                 RET
.text:0000000000020E70 ; ---------------------------------------------------------------------------
.text:0000000000020E70 loc_20E70                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+1DC↑j
.text:0000000000020E70                 BL              .__stack_chk_fail
.text:0000000000020E70 ; } // starts at 20C68
.text:0000000000020E70 ; End of function drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)
.text:0000000000020E70 ; ---------------------------------------------------------------------------
.text:0000000000020E74                 ALIGN 8
.text:0000000000020E78 ; =============== S U B R O U T I N E =======================================
.text:0000000000020E78 ; Attributes: bp-based frame
.text:0000000000020E78 ; __int64 __fastcall drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(drawer::AnimatedRenderPassDrawer *__hidden this)
.text:0000000000020E78                 EXPORT _ZN6drawer24AnimatedRenderPassDrawer24calculateCircularMarqueeEv
.text:0000000000020E78 _ZN6drawer24AnimatedRenderPassDrawer24calculateCircularMarqueeEv
.text:0000000000020E78                                         ; CODE XREF: drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)+C↓j
.text:0000000000020E78                                         ; DATA XREF: LOAD:0000000000002208↑o ...
.text:0000000000020E78 var_10          = -0x10
.text:0000000000020E78 var_s0          =  0
.text:0000000000020E78 ; __unwind {
.text:0000000000020E78                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000020E7C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020E80                 ADD             X29, SP, #0x10
.text:0000000000020E84                 MOV             X19, X0
.text:0000000000020E88                 BL              ._ZN5utils15getUtcTime_msecEv ; utils::getUtcTime_msec(void)
.text:0000000000020E8C                 LDR             S0, [X19,#0x18]
.text:0000000000020E90                 FMOV            S3, #2.5
.text:0000000000020E94                 LDR             S2, [X19,#0xE0]
.text:0000000000020E98                 ADRP            X9, #unk_7938@PAGE
.text:0000000000020E9C                 LDR             W8, [X19,#0xA0]
.text:0000000000020EA0                 ADD             X9, X9, #unk_7938@PAGEOFF
.text:0000000000020EA4                 FADD            S1, S0, S0
.text:0000000000020EA8                 CMP             W8, #0
.text:0000000000020EAC                 CSET            W8, EQ
.text:0000000000020EB0                 FSUB            S0, S2, S1
.text:0000000000020EB4                 LDR             S4, [X9,W8,UXTW#2]
.text:0000000000020EB8                 FCMP            S2, S1
.text:0000000000020EBC                 LDRB            W8, [X19,#0xDC]
.text:0000000000020EC0                 LDR             X9, [X19,#0xD0]
.text:0000000000020EC4                 FMUL            S0, S0, S3
.text:0000000000020EC8                 FMOV            S3, WZR
.text:0000000000020ECC                 FCSEL           S0, S0, S2, GT
.text:0000000000020ED0                 FDIV            S0, S0, S4
.text:0000000000020ED4                 FCSEL           S4, S4, S3, GT
.text:0000000000020ED8                 CBZ             W8, loc_20F74
.text:0000000000020EDC                 UCVTF           S5, X9
.text:0000000000020EE0                 ADRP            X10, #dword_8570@PAGE
.text:0000000000020EE4                 LDR             S6, [X10,#dword_8570@PAGEOFF]
.text:0000000000020EE8                 FDIV            S5, S5, S0
.text:0000000000020EEC                 FCMP            S5, S6
.text:0000000000020EF0                 B.LE            loc_20F5C
.text:0000000000020EF4                 ADRP            X10, #dword_8578@PAGE
.text:0000000000020EF8                 LDR             S6, [X10,#dword_8578@PAGEOFF]
.text:0000000000020EFC                 ADRP            X10, #dword_857C@PAGE
.text:0000000000020F00                 LDR             S7, [X10,#dword_857C@PAGEOFF]
.text:0000000000020F04                 ADRP            X10, #dword_8564@PAGE
.text:0000000000020F08                 FCMP            S5, S6
.text:0000000000020F0C                 CSET            W11, MI
.text:0000000000020F10                 FCMP            S5, S7
.text:0000000000020F14                 LDR             S7, [X10,#dword_8564@PAGEOFF]
.text:0000000000020F18                 CSET            W10, GT
.text:0000000000020F1C                 FCMP            S5, S7
.text:0000000000020F20                 ORR             W10, W11, W10
.text:0000000000020F24                 CCMP            W10, #0, #4, MI
.text:0000000000020F28                 B.EQ            loc_20F5C
.text:0000000000020F2C                 LDR             X10, [X19,#0xC8]
.text:0000000000020F30                 FCMP            S5, S6
.text:0000000000020F34                 FMOV            S5, #1.0
.text:0000000000020F38                 FMOV            S6, #-1.0
.text:0000000000020F3C                 SUB             X10, X0, X10
.text:0000000000020F40                 FCSEL           S5, S6, S5, MI
.text:0000000000020F44                 UCVTF           S6, X10
.text:0000000000020F48                 FMUL            S5, S5, S6
.text:0000000000020F4C                 FMUL            S4, S4, S5
.text:0000000000020F50                 LDR             S5, [X19,#0xD8]
.text:0000000000020F54                 FADD            S4, S5, S4
.text:0000000000020F58                 STR             S4, [X19,#0xD8]
.text:0000000000020F5C loc_20F5C                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)+78↑j
.text:0000000000020F5C                                         ; drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)+B0↑j
.text:0000000000020F5C                 FSUB            S1, S1, S2
.text:0000000000020F60                 LDR             S2, [X19,#0xD8]
.text:0000000000020F64                 FCMP            S2, S1
.text:0000000000020F68                 FCSEL           S1, S1, S2, MI
.text:0000000000020F6C                 FMIN            S1, S1, S3
.text:0000000000020F70                 STR             S1, [X19,#0xD8]
.text:0000000000020F74 loc_20F74                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)+60↑j
.text:0000000000020F74                 LDR             X10, [X19,#0xC8]
.text:0000000000020F78                 SUB             X10, X0, X10
.text:0000000000020F7C                 ADD             X9, X9, X10
.text:0000000000020F80                 STP             X0, X9, [X19,#0xC8]
.text:0000000000020F84                 CBZ             W8, loc_20FA8
.text:0000000000020F88                 UCVTF           S1, X9
.text:0000000000020F8C                 FCMP            S0, S1
.text:0000000000020F90                 B.HI            loc_20FB8
.text:0000000000020F94                 LDR             X8, [X19,#0xF0]
.text:0000000000020F98                 ADD             X9, X8, #1
.text:0000000000020F9C                 MOV             W8, WZR
.text:0000000000020FA0                 STR             X9, [X19,#0xF0]
.text:0000000000020FA4                 B               loc_20FAC
.text:0000000000020FA8 ; ---------------------------------------------------------------------------
.text:0000000000020FA8 loc_20FA8                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)+10C↑j
.text:0000000000020FA8                 MOV             W8, #1
.text:0000000000020FAC loc_20FAC                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)+12C↑j
.text:0000000000020FAC                 STRB            W8, [X19,#0xDC]
.text:0000000000020FB0                 STR             WZR, [X19,#0xD8]
.text:0000000000020FB4                 STR             XZR, [X19,#0xD0]
.text:0000000000020FB8 loc_20FB8                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)+118↑j
.text:0000000000020FB8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000020FBC                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000020FC0                 RET
.text:0000000000020FC0 ; } // starts at 20E78
.text:0000000000020FC0 ; End of function drawer::AnimatedRenderPassDrawer::calculateCircularMarquee(void)
.text:0000000000020FC0 ; ---------------------------------------------------------------------------
.text:0000000000020FC4                 ALIGN 8
.text:0000000000020FC8 ; __unwind {
.text:0000000000020FC8                 STR             X21, [SP,#-0x30]!
.text:0000000000020FCC                 STP             X20, X19, [SP,#0x10]
.text:0000000000020FD0                 STP             X29, X30, [SP,#0x20]
.text:0000000000020FD4                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000020FD8                 ADRP            X8, #_ZTVN6drawer16RenderPassDrawerE_ptr@PAGE
.text:0000000000020FDC                 MOV             X19, X0
.text:0000000000020FE0                 LDR             X8, [X8,#_ZTVN6drawer16RenderPassDrawerE_ptr@PAGEOFF]
.text:0000000000020FE4                 LDR             X21, [X0,#0x68]
.text:0000000000020FE8                 ADD             X8, X8, #0x10
.text:0000000000020FEC                 STR             X8, [X0]
.text:0000000000020FF0                 CBZ             X21, loc_21028
.text:0000000000020FF4                 LDR             X20, [X19,#0x70]
.text:0000000000020FF8                 CMP             X20, X21
.text:0000000000020FFC                 B.EQ            loc_2101C
.text:0000000000021000 loc_21000                               ; CODE XREF: .text:0000000000021010↓j
.text:0000000000021000                 SUB             X20, X20, #0x60 ; '`'
.text:0000000000021004                 MOV             X0, X20
.text:0000000000021008                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:000000000002100C                 CMP             X21, X20
.text:0000000000021010                 B.NE            loc_21000
.text:0000000000021014                 LDR             X0, [X19,#0x68]
.text:0000000000021018                 B               loc_21020
.text:000000000002101C ; ---------------------------------------------------------------------------
.text:000000000002101C loc_2101C                               ; CODE XREF: .text:0000000000020FFC↑j
.text:000000000002101C                 MOV             X0, X21
.text:0000000000021020 loc_21020                               ; CODE XREF: .text:0000000000021018↑j
.text:0000000000021020                 STR             X21, [X19,#0x70]
.text:0000000000021024                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000021028 loc_21028                               ; CODE XREF: .text:0000000000020FF0↑j
.text:0000000000021028                 LDR             X20, [X19,#0x40]
.text:000000000002102C                 CBZ             X20, loc_21064
.text:0000000000021030                 LDR             X21, [X19,#0x48]
.text:0000000000021034                 CMP             X21, X20
.text:0000000000021038                 B.EQ            loc_21074
.text:000000000002103C loc_2103C                               ; CODE XREF: .text:0000000000021058↓j
.text:000000000002103C                 LDR             X0, [X21,#-8]!
.text:0000000000021040                 STR             XZR, [X21]
.text:0000000000021044                 CBZ             X0, loc_21054
.text:0000000000021048                 LDR             X8, [X0]
.text:000000000002104C                 LDR             X8, [X8,#8]
.text:0000000000021050                 BLR             X8
.text:0000000000021054 loc_21054                               ; CODE XREF: .text:0000000000021044↑j
.text:0000000000021054                 CMP             X20, X21
.text:0000000000021058                 B.NE            loc_2103C
.text:000000000002105C                 LDR             X0, [X19,#0x40]
.text:0000000000021060                 B               loc_21078
.text:0000000000021064 ; ---------------------------------------------------------------------------
.text:0000000000021064 loc_21064                               ; CODE XREF: .text:000000000002102C↑j
.text:0000000000021064                 LDP             X29, X30, [SP,#0x20]
.text:0000000000021068                 LDP             X20, X19, [SP,#0x10]
.text:000000000002106C                 LDR             X21, [SP],#0x30
.text:0000000000021070                 RET
.text:0000000000021074 ; ---------------------------------------------------------------------------
.text:0000000000021074 loc_21074                               ; CODE XREF: .text:0000000000021038↑j
.text:0000000000021074                 MOV             X0, X20
.text:0000000000021078 loc_21078                               ; CODE XREF: .text:0000000000021060↑j
.text:0000000000021078                 STR             X20, [X19,#0x48]
.text:000000000002107C                 LDP             X29, X30, [SP,#0x20]
.text:0000000000021080                 LDP             X20, X19, [SP,#0x10]
.text:0000000000021084                 LDR             X21, [SP],#0x30
.text:0000000000021088                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000021088 ; } // starts at 20FC8
.text:0000000000021088 ; ---------------------------------------------------------------------------
.text:000000000002108C                 ALIGN 0x10
.text:0000000000021090 loc_21090                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::addFrameInfo(gui::FrameData const&)+30↑p
.text:0000000000021090                                         ; drawer::FixedRenderPassDrawer::addFrameInfo(gui::FrameData const&)+3C↓p
.text:0000000000021090 ; __unwind {
.text:0000000000021090                 SUB             SP, SP, #0x70 ; 'p'
.text:0000000000021094                 STP             X28, X27, [SP,#0x10]
.text:0000000000021098                 STP             X26, X25, [SP,#0x20]
.text:000000000002109C                 STP             X24, X23, [SP,#0x30]
.text:00000000000210A0                 STP             X22, X21, [SP,#0x40]
.text:00000000000210A4                 STP             X20, X19, [SP,#0x50]
.text:00000000000210A8                 STP             X29, X30, [SP,#0x60]
.text:00000000000210AC                 ADD             X29, SP, #0x60 ; '`'
.text:00000000000210B0                 LDR             X8, [X0,#0x10]
.text:00000000000210B4                 MOV             X25, #0xAAAAAAAAAAAAAAAA
.text:00000000000210B8                 LDR             X24, [X0]
.text:00000000000210BC                 SUB             X9, X2, X1
.text:00000000000210C0                 MOVK            X25, #0xAAAB
.text:00000000000210C4                 ASR             X9, X9, #5
.text:00000000000210C8                 MUL             X23, X9, X25
.text:00000000000210CC                 MOV             X20, X2
.text:00000000000210D0                 SUB             X10, X8, X24
.text:00000000000210D4                 ASR             X9, X10, #5
.text:00000000000210D8                 MOV             X19, X0
.text:00000000000210DC                 MUL             X9, X9, X25
.text:00000000000210E0                 MOV             X21, X1
.text:00000000000210E4                 CMP             X23, X9
.text:00000000000210E8                 B.LS            loc_21118
.text:00000000000210EC                 CBZ             X24, loc_21208
.text:00000000000210F0                 LDR             X22, [X19,#8]
.text:00000000000210F4                 CMP             X22, X24
.text:00000000000210F8                 B.EQ            loc_211F0
.text:00000000000210FC loc_210FC                               ; CODE XREF: .text:000000000002110C↓j
.text:00000000000210FC                 SUB             X22, X22, #0x60 ; '`'
.text:0000000000021100                 MOV             X0, X22
.text:0000000000021104                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000021108                 CMP             X24, X22
.text:000000000002110C                 B.NE            loc_210FC
.text:0000000000021110                 LDR             X0, [X19]
.text:0000000000021114                 B               loc_211F4
.text:0000000000021118 ; ---------------------------------------------------------------------------
.text:0000000000021118 loc_21118                               ; CODE XREF: .text:00000000000210E8↑j
.text:0000000000021118                 LDR             X8, [X19,#8]
.text:000000000002111C                 SUB             X8, X8, X24
.text:0000000000021120                 ASR             X9, X8, #5
.text:0000000000021124                 MUL             X9, X9, X25
.text:0000000000021128                 ADD             X22, X21, X8
.text:000000000002112C                 CMP             X23, X9
.text:0000000000021130                 CSEL            X8, X22, X20, HI
.text:0000000000021134                 SUBS            X27, X8, X21
.text:0000000000021138                 B.EQ            loc_21190
.text:000000000002113C                 MOV             X28, XZR
.text:0000000000021140                 STP             X9, X8, [SP]
.text:0000000000021144 loc_21144                               ; CODE XREF: .text:0000000000021184↓j
.text:0000000000021144                 LDR             X8, [X21,X28]
.text:0000000000021148                 CMP             X21, X24
.text:000000000002114C                 STR             X8, [X24,X28]
.text:0000000000021150                 B.EQ            loc_2117C
.text:0000000000021154                 ADD             X25, X21, X28
.text:0000000000021158                 ADD             X26, X24, X28
.text:000000000002115C                 ADD             X0, X26, #8
.text:0000000000021160                 LDP             X1, X2, [X25,#8]
.text:0000000000021164                 BL              sub_212B0
.text:0000000000021168                 LDP             Q0, Q1, [X25,#0x20]
.text:000000000002116C                 ADD             X0, X26, #0x40 ; '@'
.text:0000000000021170                 STP             Q0, Q1, [X26,#0x20]
.text:0000000000021174                 LDP             X1, X2, [X25,#0x40]
.text:0000000000021178                 BL              loc_21400
.text:000000000002117C loc_2117C                               ; CODE XREF: .text:0000000000021150↑j
.text:000000000002117C                 ADD             X28, X28, #0x60 ; '`'
.text:0000000000021180                 CMP             X27, X28
.text:0000000000021184                 B.NE            loc_21144
.text:0000000000021188                 LDP             X9, X8, [SP]
.text:000000000002118C                 ADD             X24, X24, X28
.text:0000000000021190 loc_21190                               ; CODE XREF: .text:0000000000021138↑j
.text:0000000000021190                 CMP             X23, X9
.text:0000000000021194                 B.LS            loc_211C8
.text:0000000000021198                 CMP             X8, X20
.text:000000000002119C                 B.EQ            loc_21284
.text:00000000000211A0                 LDR             X0, [X19,#8]
.text:00000000000211A4 loc_211A4                               ; CODE XREF: .text:00000000000211C0↓j
.text:00000000000211A4                 MOV             X1, X22
.text:00000000000211A8                 BL              sub_215F0
.text:00000000000211AC                 LDR             X8, [X19,#8]
.text:00000000000211B0                 ADD             X22, X22, #0x60 ; '`'
.text:00000000000211B4                 CMP             X20, X22
.text:00000000000211B8                 ADD             X0, X8, #0x60 ; '`'
.text:00000000000211BC                 STR             X0, [X19,#8]
.text:00000000000211C0                 B.NE            loc_211A4
.text:00000000000211C4                 B               loc_21284
.text:00000000000211C8 ; ---------------------------------------------------------------------------
.text:00000000000211C8 loc_211C8                               ; CODE XREF: .text:0000000000021194↑j
.text:00000000000211C8                 LDR             X20, [X19,#8]
.text:00000000000211CC                 CMP             X20, X24
.text:00000000000211D0                 B.EQ            loc_211E8
.text:00000000000211D4 loc_211D4                               ; CODE XREF: .text:00000000000211E4↓j
.text:00000000000211D4                 SUB             X20, X20, #0x60 ; '`'
.text:00000000000211D8                 MOV             X0, X20
.text:00000000000211DC                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000211E0                 CMP             X24, X20
.text:00000000000211E4                 B.NE            loc_211D4
.text:00000000000211E8 loc_211E8                               ; CODE XREF: .text:00000000000211D0↑j
.text:00000000000211E8                 STR             X24, [X19,#8]
.text:00000000000211EC                 B               loc_21284
.text:00000000000211F0 ; ---------------------------------------------------------------------------
.text:00000000000211F0 loc_211F0                               ; CODE XREF: .text:00000000000210F8↑j
.text:00000000000211F0                 MOV             X0, X24
.text:00000000000211F4 loc_211F4                               ; CODE XREF: .text:0000000000021114↑j
.text:00000000000211F4                 STR             X24, [X19,#8]
.text:00000000000211F8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000211FC                 MOV             X8, XZR
.text:0000000000021200                 STP             XZR, XZR, [X19]
.text:0000000000021204                 STR             XZR, [X19,#0x10]
.text:0000000000021208 loc_21208                               ; CODE XREF: .text:00000000000210EC↑j
.text:0000000000021208                 MOV             X9, #0x2AAAAAAAAAAAAAA
.text:0000000000021210                 CMP             X23, X9
.text:0000000000021214                 B.HI            loc_212A4
.text:0000000000021218                 ASR             X8, X8, #5
.text:000000000002121C                 MUL             X8, X8, X25
.text:0000000000021220                 MOV             X10, #0x155555555555554
.text:000000000002122C                 CMP             X8, X10
.text:0000000000021230                 B.HI            loc_21240
.text:0000000000021234                 LSL             X8, X8, #1
.text:0000000000021238                 CMP             X8, X23
.text:000000000002123C                 CSEL            X9, X23, X8, CC
.text:0000000000021240 loc_21240                               ; CODE XREF: .text:0000000000021230↑j
.text:0000000000021240                 ADD             X8, X9, X9,LSL#1
.text:0000000000021244                 LSL             X22, X8, #5
.text:0000000000021248                 MOV             X0, X22
.text:000000000002124C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000021250                 ADD             X8, X0, X22
.text:0000000000021254                 STP             X0, X0, [X19]
.text:0000000000021258                 CMP             X21, X20
.text:000000000002125C                 STR             X8, [X19,#0x10]
.text:0000000000021260                 B.EQ            loc_21284
.text:0000000000021264 loc_21264                               ; CODE XREF: .text:0000000000021280↓j
.text:0000000000021264                 MOV             X1, X21
.text:0000000000021268                 BL              sub_215F0
.text:000000000002126C                 LDR             X8, [X19,#8]
.text:0000000000021270                 ADD             X21, X21, #0x60 ; '`'
.text:0000000000021274                 CMP             X20, X21
.text:0000000000021278                 ADD             X0, X8, #0x60 ; '`'
.text:000000000002127C                 STR             X0, [X19,#8]
.text:0000000000021280                 B.NE            loc_21264
.text:0000000000021284 loc_21284                               ; CODE XREF: .text:000000000002119C↑j
.text:0000000000021284                                         ; .text:00000000000211C4↑j ...
.text:0000000000021284                 LDP             X29, X30, [SP,#0x60]
.text:0000000000021288                 LDP             X20, X19, [SP,#0x50]
.text:000000000002128C                 LDP             X22, X21, [SP,#0x40]
.text:0000000000021290                 LDP             X24, X23, [SP,#0x30]
.text:0000000000021294                 LDP             X26, X25, [SP,#0x20]
.text:0000000000021298                 LDP             X28, X27, [SP,#0x10]
.text:000000000002129C                 ADD             SP, SP, #0x70 ; 'p'
.text:00000000000212A0                 RET
.text:00000000000212A4 ; ---------------------------------------------------------------------------
.text:00000000000212A4 loc_212A4                               ; CODE XREF: .text:0000000000021214↑j
.text:00000000000212A4                 MOV             X0, X19
.text:00000000000212A8                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:00000000000212A8 ; } // starts at 21090
.text:00000000000212A8 ; ---------------------------------------------------------------------------
.text:00000000000212AC                 DCD 0
.text:00000000000212B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000212B0 ; Attributes: bp-based frame
.text:00000000000212B0 sub_212B0                               ; CODE XREF: .text:0000000000021164↑p
.text:00000000000212B0                                         ; sub_234C8+1B0↓p ...
.text:00000000000212B0 var_40          = -0x40
.text:00000000000212B0 var_30          = -0x30
.text:00000000000212B0 var_20          = -0x20
.text:00000000000212B0 var_10          = -0x10
.text:00000000000212B0 var_s0          =  0
.text:00000000000212B0 ; __unwind {
.text:00000000000212B0                 STP             X26, X25, [SP,#-0x10+var_40]!
.text:00000000000212B4                 STP             X24, X23, [SP,#0x40+var_30]
.text:00000000000212B8                 STP             X22, X21, [SP,#0x40+var_20]
.text:00000000000212BC                 STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000212C0                 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000212C4                 ADD             X29, SP, #0x40
.text:00000000000212C8                 LDR             X8, [X0,#0x10]
.text:00000000000212CC                 MOV             X19, X0
.text:00000000000212D0                 LDR             X22, [X0]
.text:00000000000212D4                 MOV             X20, X1
.text:00000000000212D8                 SUB             X21, X2, X1
.text:00000000000212DC                 ASR             X25, X21, #2
.text:00000000000212E0                 SUB             X9, X8, X22
.text:00000000000212E4                 CMP             X25, X9,ASR#2
.text:00000000000212E8                 B.LS            loc_2133C
.text:00000000000212EC                 CBZ             X22, loc_21308
.text:00000000000212F0                 MOV             X0, X22 ; void *
.text:00000000000212F4                 STR             X22, [X19,#8]
.text:00000000000212F8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000212FC                 MOV             X8, XZR
.text:0000000000021300                 STP             XZR, XZR, [X19]
.text:0000000000021304                 STR             XZR, [X19,#0x10]
.text:0000000000021308 loc_21308                               ; CODE XREF: sub_212B0+3C↑j
.text:0000000000021308                 LSR             X9, X25, #0x3E ; '>'
.text:000000000002130C                 CBNZ            X9, loc_21334
.text:0000000000021310                 MOV             X9, #0x1FFFFFFFFFFFFFFE
.text:0000000000021314                 CMP             X9, X8,ASR#2
.text:0000000000021318                 B.CC            loc_213AC
.text:000000000002131C                 ASR             X8, X8, #1
.text:0000000000021320                 CMP             X8, X25
.text:0000000000021324                 B.CC            loc_213B0
.text:0000000000021328                 MOV             X25, X8
.text:000000000002132C                 LSR             X9, X8, #0x3E ; '>'
.text:0000000000021330                 CBZ             X9, loc_213B0
.text:0000000000021334 loc_21334                               ; CODE XREF: sub_212B0+5C↑j
.text:0000000000021334                 MOV             X0, X19
.text:0000000000021338                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:000000000002133C loc_2133C                               ; CODE XREF: sub_212B0+38↑j
.text:000000000002133C                 LDR             X8, [X19,#8]
.text:0000000000021340                 MOV             X23, X2
.text:0000000000021344                 SUB             X8, X8, X22
.text:0000000000021348                 ASR             X26, X8, #2
.text:000000000002134C                 ADD             X8, X20, X8
.text:0000000000021350                 CMP             X25, X26
.text:0000000000021354                 CSEL            X21, X8, X2, HI
.text:0000000000021358                 SUBS            X24, X21, X20
.text:000000000002135C                 B.EQ            loc_21370
.text:0000000000021360                 MOV             X0, X22 ; dest
.text:0000000000021364                 MOV             X1, X20 ; src
.text:0000000000021368                 MOV             X2, X24 ; n
.text:000000000002136C                 BL              .memmove
.text:0000000000021370 loc_21370                               ; CODE XREF: sub_212B0+AC↑j
.text:0000000000021370                 CMP             X25, X26
.text:0000000000021374                 B.LS            loc_213A0
.text:0000000000021378                 SUB             X20, X23, X21
.text:000000000002137C                 CMP             X20, #1
.text:0000000000021380                 B.LT            loc_213E8
.text:0000000000021384                 LDR             X0, [X19,#8] ; dest
.text:0000000000021388                 MOV             X1, X21 ; src
.text:000000000002138C                 MOV             X2, X20 ; n
.text:0000000000021390                 BL              .memcpy
.text:0000000000021394                 LDR             X8, [X19,#8]
.text:0000000000021398                 ADD             X8, X8, X20
.text:000000000002139C                 B               loc_213E4
.text:00000000000213A0 ; ---------------------------------------------------------------------------
.text:00000000000213A0 loc_213A0                               ; CODE XREF: sub_212B0+C4↑j
.text:00000000000213A0                 ASR             X8, X24, #2
.text:00000000000213A4                 ADD             X8, X22, X8,LSL#2
.text:00000000000213A8                 B               loc_213E4
.text:00000000000213AC ; ---------------------------------------------------------------------------
.text:00000000000213AC loc_213AC                               ; CODE XREF: sub_212B0+68↑j
.text:00000000000213AC                 MOV             X25, #0x3FFFFFFFFFFFFFFF
.text:00000000000213B0 loc_213B0                               ; CODE XREF: sub_212B0+74↑j
.text:00000000000213B0                                         ; sub_212B0+80↑j
.text:00000000000213B0                 LSL             X22, X25, #2
.text:00000000000213B4                 MOV             X0, X22 ; unsigned __int64
.text:00000000000213B8                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000213BC                 ADD             X8, X0, X22
.text:00000000000213C0                 STP             X0, X0, [X19]
.text:00000000000213C4                 CMP             X21, #1
.text:00000000000213C8                 STR             X8, [X19,#0x10]
.text:00000000000213CC                 B.LT            loc_213E8
.text:00000000000213D0                 MOV             X1, X20 ; src
.text:00000000000213D4                 MOV             X2, X21 ; n
.text:00000000000213D8                 BL              .memcpy
.text:00000000000213DC                 LDR             X8, [X19,#8]
.text:00000000000213E0                 ADD             X8, X8, X21
.text:00000000000213E4 loc_213E4                               ; CODE XREF: sub_212B0+EC↑j
.text:00000000000213E4                                         ; sub_212B0+F8↑j
.text:00000000000213E4                 STR             X8, [X19,#8]
.text:00000000000213E8 loc_213E8                               ; CODE XREF: sub_212B0+D0↑j
.text:00000000000213E8                                         ; sub_212B0+11C↑j
.text:00000000000213E8                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000213EC                 LDP             X20, X19, [SP,#0x40+var_10]
.text:00000000000213F0                 LDP             X22, X21, [SP,#0x40+var_20]
.text:00000000000213F4                 LDP             X24, X23, [SP,#0x40+var_30]
.text:00000000000213F8                 LDP             X26, X25, [SP+0x40+var_40],#0x50
.text:00000000000213FC                 RET
.text:00000000000213FC ; } // starts at 212B0
.text:00000000000213FC ; End of function sub_212B0
.text:0000000000021400 ; ---------------------------------------------------------------------------
.text:0000000000021400 loc_21400                               ; CODE XREF: .text:0000000000021178↑p
.text:0000000000021400                                         ; sub_234C8+1C4↓p ...
.text:0000000000021400 ; __unwind {
.text:0000000000021400                 STP             X26, X25, [SP,#-0x50]!
.text:0000000000021404                 STP             X24, X23, [SP,#0x10]
.text:0000000000021408                 STP             X22, X21, [SP,#0x20]
.text:000000000002140C                 STP             X20, X19, [SP,#0x30]
.text:0000000000021410                 STP             X29, X30, [SP,#0x40]
.text:0000000000021414                 ADD             X29, SP, #0x40 ; '@'
.text:0000000000021418                 LDR             X8, [X0,#0x10]
.text:000000000002141C                 MOV             X23, #0xAAAAAAAAAAAAAAAA
.text:0000000000021420                 LDR             X22, [X0]
.text:0000000000021424                 SUB             X9, X2, X1
.text:0000000000021428                 MOVK            X23, #0xAAAB
.text:000000000002142C                 ASR             X9, X9, #3
.text:0000000000021430                 MUL             X24, X9, X23
.text:0000000000021434                 MOV             X20, X2
.text:0000000000021438                 SUB             X10, X8, X22
.text:000000000002143C                 ASR             X9, X10, #3
.text:0000000000021440                 MOV             X19, X0
.text:0000000000021444                 MUL             X9, X9, X23
.text:0000000000021448                 MOV             X21, X1
.text:000000000002144C                 CMP             X24, X9
.text:0000000000021450                 B.LS            loc_2148C
.text:0000000000021454                 CBZ             X22, loc_21550
.text:0000000000021458                 LDR             X8, [X19,#8]
.text:000000000002145C                 CMP             X8, X22
.text:0000000000021460                 B.EQ            loc_21538
.text:0000000000021464                 MOV             X25, X8
.text:0000000000021468 loc_21468                               ; CODE XREF: .text:0000000000021480↓j
.text:0000000000021468                 LDRB            W9, [X25,#-0x18]!
.text:000000000002146C                 TBZ             W9, #0, loc_21478
.text:0000000000021470                 LDUR            X0, [X8,#-8]
.text:0000000000021474                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000021478 loc_21478                               ; CODE XREF: .text:000000000002146C↑j
.text:0000000000021478                 MOV             X8, X25
.text:000000000002147C                 CMP             X22, X25
.text:0000000000021480                 B.NE            loc_21468
.text:0000000000021484                 LDR             X0, [X19]
.text:0000000000021488                 B               loc_2153C
.text:000000000002148C ; ---------------------------------------------------------------------------
.text:000000000002148C loc_2148C                               ; CODE XREF: .text:0000000000021450↑j
.text:000000000002148C                 LDR             X8, [X19,#8]
.text:0000000000021490                 SUB             X8, X8, X22
.text:0000000000021494                 ASR             X9, X8, #3
.text:0000000000021498                 MUL             X26, X9, X23
.text:000000000002149C                 ADD             X23, X21, X8
.text:00000000000214A0                 CMP             X24, X26
.text:00000000000214A4                 CSEL            X25, X23, X20, HI
.text:00000000000214A8                 CMP             X25, X21
.text:00000000000214AC                 B.EQ            loc_214CC
.text:00000000000214B0 loc_214B0                               ; CODE XREF: .text:00000000000214C8↓j
.text:00000000000214B0                 MOV             X0, X22
.text:00000000000214B4                 MOV             X1, X21
.text:00000000000214B8                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::operator=(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:00000000000214BC                 ADD             X21, X21, #0x18
.text:00000000000214C0                 ADD             X22, X22, #0x18
.text:00000000000214C4                 CMP             X25, X21
.text:00000000000214C8                 B.NE            loc_214B0
.text:00000000000214CC loc_214CC                               ; CODE XREF: .text:00000000000214AC↑j
.text:00000000000214CC                 CMP             X24, X26
.text:00000000000214D0                 B.LS            loc_21504
.text:00000000000214D4                 CMP             X25, X20
.text:00000000000214D8                 B.EQ            loc_215CC
.text:00000000000214DC                 LDR             X0, [X19,#8]
.text:00000000000214E0 loc_214E0                               ; CODE XREF: .text:00000000000214FC↓j
.text:00000000000214E0                 MOV             X1, X23
.text:00000000000214E4                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:00000000000214E8                 LDR             X8, [X19,#8]
.text:00000000000214EC                 ADD             X23, X23, #0x18
.text:00000000000214F0                 CMP             X20, X23
.text:00000000000214F4                 ADD             X0, X8, #0x18
.text:00000000000214F8                 STR             X0, [X19,#8]
.text:00000000000214FC                 B.NE            loc_214E0
.text:0000000000021500                 B               loc_215CC
.text:0000000000021504 ; ---------------------------------------------------------------------------
.text:0000000000021504 loc_21504                               ; CODE XREF: .text:00000000000214D0↑j
.text:0000000000021504                 LDR             X8, [X19,#8]
.text:0000000000021508                 CMP             X8, X22
.text:000000000002150C                 B.EQ            loc_21530
.text:0000000000021510                 MOV             X20, X8
.text:0000000000021514 loc_21514                               ; CODE XREF: .text:000000000002152C↓j
.text:0000000000021514                 LDRB            W9, [X20,#-0x18]!
.text:0000000000021518                 TBZ             W9, #0, loc_21524
.text:000000000002151C                 LDUR            X0, [X8,#-8]
.text:0000000000021520                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000021524 loc_21524                               ; CODE XREF: .text:0000000000021518↑j
.text:0000000000021524                 MOV             X8, X20
.text:0000000000021528                 CMP             X22, X20
.text:000000000002152C                 B.NE            loc_21514
.text:0000000000021530 loc_21530                               ; CODE XREF: .text:000000000002150C↑j
.text:0000000000021530                 STR             X22, [X19,#8]
.text:0000000000021534                 B               loc_215CC
.text:0000000000021538 ; ---------------------------------------------------------------------------
.text:0000000000021538 loc_21538                               ; CODE XREF: .text:0000000000021460↑j
.text:0000000000021538                 MOV             X0, X22
.text:000000000002153C loc_2153C                               ; CODE XREF: .text:0000000000021488↑j
.text:000000000002153C                 STR             X22, [X19,#8]
.text:0000000000021540                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000021544                 MOV             X8, XZR
.text:0000000000021548                 STP             XZR, XZR, [X19]
.text:000000000002154C                 STR             XZR, [X19,#0x10]
.text:0000000000021550 loc_21550                               ; CODE XREF: .text:0000000000021454↑j
.text:0000000000021550                 MOV             X9, #0xAAAAAAAAAAAAAAA
.text:0000000000021558                 CMP             X24, X9
.text:000000000002155C                 B.HI            loc_215E4
.text:0000000000021560                 ASR             X8, X8, #3
.text:0000000000021564                 MUL             X8, X8, X23
.text:0000000000021568                 MOV             X10, #0x555555555555554
.text:0000000000021574                 CMP             X8, X10
.text:0000000000021578                 B.HI            loc_21588
.text:000000000002157C                 LSL             X8, X8, #1
.text:0000000000021580                 CMP             X8, X24
.text:0000000000021584                 CSEL            X9, X24, X8, CC
.text:0000000000021588 loc_21588                               ; CODE XREF: .text:0000000000021578↑j
.text:0000000000021588                 ADD             X8, X9, X9,LSL#1
.text:000000000002158C                 LSL             X22, X8, #3
.text:0000000000021590                 MOV             X0, X22
.text:0000000000021594                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000021598                 ADD             X8, X0, X22
.text:000000000002159C                 STP             X0, X0, [X19]
.text:00000000000215A0                 CMP             X21, X20
.text:00000000000215A4                 STR             X8, [X19,#0x10]
.text:00000000000215A8                 B.EQ            loc_215CC
.text:00000000000215AC loc_215AC                               ; CODE XREF: .text:00000000000215C8↓j
.text:00000000000215AC                 MOV             X1, X21
.text:00000000000215B0                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:00000000000215B4                 LDR             X8, [X19,#8]
.text:00000000000215B8                 ADD             X21, X21, #0x18
.text:00000000000215BC                 CMP             X20, X21
.text:00000000000215C0                 ADD             X0, X8, #0x18
.text:00000000000215C4                 STR             X0, [X19,#8]
.text:00000000000215C8                 B.NE            loc_215AC
.text:00000000000215CC loc_215CC                               ; CODE XREF: .text:00000000000214D8↑j
.text:00000000000215CC                                         ; .text:0000000000021500↑j ...
.text:00000000000215CC                 LDP             X29, X30, [SP,#0x40]
.text:00000000000215D0                 LDP             X20, X19, [SP,#0x30]
.text:00000000000215D4                 LDP             X22, X21, [SP,#0x20]
.text:00000000000215D8                 LDP             X24, X23, [SP,#0x10]
.text:00000000000215DC                 LDP             X26, X25, [SP],#0x50
.text:00000000000215E0                 RET
.text:00000000000215E4 ; ---------------------------------------------------------------------------
.text:00000000000215E4 loc_215E4                               ; CODE XREF: .text:000000000002155C↑j
.text:00000000000215E4                 MOV             X0, X19
.text:00000000000215E8                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:00000000000215E8 ; } // starts at 21400
.text:00000000000215E8 ; ---------------------------------------------------------------------------
.text:00000000000215EC                 DCD 0
.text:00000000000215F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000215F0 ; Attributes: bp-based frame
.text:00000000000215F0 sub_215F0                               ; CODE XREF: .text:00000000000211A8↑p
.text:00000000000215F0                                         ; .text:0000000000021268↑p ...
.text:00000000000215F0 var_50          = -0x50
.text:00000000000215F0 var_40          = -0x40
.text:00000000000215F0 var_30          = -0x30
.text:00000000000215F0 var_20          = -0x20
.text:00000000000215F0 var_10          = -0x10
.text:00000000000215F0 var_s0          =  0
.text:00000000000215F0 ; __unwind {
.text:00000000000215F0                 STR             X21, [SP,#-0x10+var_20]!
.text:00000000000215F4                 STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000215F8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000215FC                 ADD             X29, SP, #0x20
.text:0000000000021600                 LDR             X8, [X1]
.text:0000000000021604                 MOV             X19, X0
.text:0000000000021608                 STP             XZR, XZR, [X0,#0x10]
.text:000000000002160C                 MOV             X20, X1
.text:0000000000021610                 STR             XZR, [X0,#8]!
.text:0000000000021614                 STR             X8, [X19]
.text:0000000000021618                 LDP             X8, X9, [X1,#8]
.text:000000000002161C                 SUBS            X8, X9, X8
.text:0000000000021620                 B.EQ            loc_21668
.text:0000000000021624                 ASR             X21, X8, #2
.text:0000000000021628                 LSR             X9, X21, #0x3E ; '>'
.text:000000000002162C                 CBNZ            X9, loc_21704
.text:0000000000021630                 MOV             X0, X8  ; unsigned __int64
.text:0000000000021634                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000021638                 ADD             X8, X0, X21,LSL#2
.text:000000000002163C                 STP             X0, X0, [X19,#8]
.text:0000000000021640                 STR             X8, [X19,#0x18]
.text:0000000000021644                 LDP             X1, X8, [X20,#8] ; src
.text:0000000000021648                 SUB             X21, X8, X1
.text:000000000002164C                 CMP             X21, #1
.text:0000000000021650                 B.LT            loc_21668
.text:0000000000021654                 MOV             X2, X21 ; n
.text:0000000000021658                 BL              .memcpy
.text:000000000002165C                 LDR             X8, [X19,#0x10]
.text:0000000000021660                 ADD             X8, X8, X21
.text:0000000000021664                 STR             X8, [X19,#0x10]
.text:0000000000021668 loc_21668                               ; CODE XREF: sub_215F0+30↑j
.text:0000000000021668                                         ; sub_215F0+60↑j
.text:0000000000021668                 LDP             Q0, Q1, [X20,#0x20]
.text:000000000002166C                 MOV             X0, X19
.text:0000000000021670                 STR             XZR, [X0,#0x40]!
.text:0000000000021674                 STP             Q0, Q1, [X0,#-0x20]
.text:0000000000021678                 STP             XZR, XZR, [X0,#8]
.text:000000000002167C                 LDP             X8, X9, [X20,#0x40]
.text:0000000000021680                 SUBS            X8, X9, X8
.text:0000000000021684                 B.EQ            loc_216F4
.text:0000000000021688                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:0000000000021690                 ASR             X10, X8, #3
.text:0000000000021694                 MUL             X21, X10, X9
.text:0000000000021698                 MOV             X9, #0xAAAAAAAAAAAAAAB
.text:00000000000216A4                 CMP             X21, X9
.text:00000000000216A8                 B.CS            loc_21704
.text:00000000000216AC                 MOV             X0, X8  ; unsigned __int64
.text:00000000000216B0                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000216B4                 MOV             W8, #0x18
.text:00000000000216B8                 STP             X0, X0, [X19,#0x40]
.text:00000000000216BC                 NOP
.text:00000000000216C0                 MADD            X8, X21, X8, X0
.text:00000000000216C4                 STR             X8, [X19,#0x50]
.text:00000000000216C8                 LDP             X21, X20, [X20,#0x40]
.text:00000000000216CC                 CMP             X21, X20
.text:00000000000216D0                 B.EQ            loc_216F4
.text:00000000000216D4 loc_216D4                               ; CODE XREF: sub_215F0+100↓j
.text:00000000000216D4                 MOV             X1, X21
.text:00000000000216D8                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:00000000000216DC                 LDR             X8, [X19,#0x48]
.text:00000000000216E0                 ADD             X21, X21, #0x18
.text:00000000000216E4                 CMP             X20, X21
.text:00000000000216E8                 ADD             X0, X8, #0x18
.text:00000000000216EC                 STR             X0, [X19,#0x48]
.text:00000000000216F0                 B.NE            loc_216D4
.text:00000000000216F4 loc_216F4                               ; CODE XREF: sub_215F0+94↑j
.text:00000000000216F4                                         ; sub_215F0+E0↑j
.text:00000000000216F4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000216F8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000216FC                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000021700                 RET
.text:0000000000021704 ; ---------------------------------------------------------------------------
.text:0000000000021704 loc_21704                               ; CODE XREF: sub_215F0+3C↑j
.text:0000000000021704                                         ; sub_215F0+B8↑j
.text:0000000000021704                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000021704 ; } // starts at 215F0
.text:0000000000021708 ; __unwind {
.text:0000000000021708                 STR             X21, [SP,#0x20+var_50]!
.text:000000000002170C                 STP             X20, X19, [SP,#0x50+var_40]
.text:0000000000021710                 STP             X29, X30, [SP,#0x50+var_30]
.text:0000000000021714                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000021718                 LDR             X8, [X0]
.text:000000000002171C                 ADRP            X9, #_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000021720                 ADRP            X10, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000021724                 LDUR            X8, [X8,#-0x18]
.text:0000000000021728                 LDR             X9, [X9,#_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:000000000002172C                 LDR             X10, [X10,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000021730                 ADD             X20, X0, X8
.text:0000000000021734                 ADD             X8, X9, #0x40 ; '@'
.text:0000000000021738                 ADD             X10, X10, #0x10
.text:000000000002173C                 MOV             X19, X20
.text:0000000000021740                 MOV             X21, X20
.text:0000000000021744                 ADD             X9, X9, #0x18
.text:0000000000021748                 STR             X8, [X19,#0x70]!
.text:000000000002174C                 STR             X10, [X21,#8]!
.text:0000000000021750                 LDRB            W8, [X20,#0x48]
.text:0000000000021754                 STR             X9, [X20]
.text:0000000000021758                 TBZ             W8, #0, loc_21764
.text:000000000002175C                 LDR             X0, [X20,#0x58] ; void *
.text:0000000000021760                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000021764 loc_21764                               ; CODE XREF: sub_215F0+168↑j
.text:0000000000021764                 MOV             X0, X21
.text:0000000000021768                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:000000000002176C                 ADRP            X8, #_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000021770                 MOV             X0, X20
.text:0000000000021774                 LDR             X8, [X8,#_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000021778                 ADD             X1, X8, #8
.text:000000000002177C                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::~basic_ostream()
.text:0000000000021780                 MOV             X0, X19
.text:0000000000021784                 LDP             X29, X30, [SP,#0x50+var_30]
.text:0000000000021788                 LDP             X20, X19, [SP,#0x50+var_40]
.text:000000000002178C                 LDR             X21, [SP+0x50+var_50],#0x30
.text:0000000000021790                 B               ._ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ios<char,std::__1::char_traits<char>>::~basic_ios()
.text:0000000000021790 ; } // starts at 21708
.text:0000000000021790 ; End of function sub_215F0
.text:0000000000021790 ; ---------------------------------------------------------------------------
.text:0000000000021794                 ALIGN 8
.text:0000000000021798 ; __unwind {
.text:0000000000021798                 STR             X21, [SP,#-0x30]!
.text:000000000002179C                 STP             X20, X19, [SP,#0x10]
.text:00000000000217A0                 STP             X29, X30, [SP,#0x20]
.text:00000000000217A4                 ADD             X29, SP, #0x20 ; ' '
.text:00000000000217A8                 ADRP            X8, #_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:00000000000217AC                 ADRP            X9, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:00000000000217B0                 MOV             X19, X0
.text:00000000000217B4                 LDR             X8, [X8,#_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:00000000000217B8                 MOV             X20, X0
.text:00000000000217BC                 LDR             X9, [X9,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:00000000000217C0                 MOV             X21, X0
.text:00000000000217C4                 LDRB            W11, [X0,#0x48]
.text:00000000000217C8                 ADD             X10, X8, #0x40 ; '@'
.text:00000000000217CC                 ADD             X9, X9, #0x10
.text:00000000000217D0                 ADD             X8, X8, #0x18
.text:00000000000217D4                 STR             X10, [X20,#0x70]!
.text:00000000000217D8                 STR             X9, [X21,#8]!
.text:00000000000217DC                 STR             X8, [X0]
.text:00000000000217E0                 TBZ             W11, #0, loc_217EC
.text:00000000000217E4                 LDR             X0, [X19,#0x58]
.text:00000000000217E8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000217EC loc_217EC                               ; CODE XREF: .text:00000000000217E0↑j
.text:00000000000217EC                 MOV             X0, X21
.text:00000000000217F0                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:00000000000217F4                 ADRP            X8, #_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:00000000000217F8                 MOV             X0, X19
.text:00000000000217FC                 LDR             X8, [X8,#_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000021800                 ADD             X1, X8, #8
.text:0000000000021804                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::~basic_ostream()
.text:0000000000021808                 MOV             X0, X20
.text:000000000002180C                 BL              ._ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ios<char,std::__1::char_traits<char>>::~basic_ios()
.text:0000000000021810                 MOV             X0, X19
.text:0000000000021814                 LDP             X29, X30, [SP,#0x20]
.text:0000000000021818                 LDP             X20, X19, [SP,#0x10]
.text:000000000002181C                 LDR             X21, [SP],#0x30
.text:0000000000021820                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000021820 ; } // starts at 21798
.text:0000000000021820 ; ---------------------------------------------------------------------------
.text:0000000000021824                 ALIGN 8
.text:0000000000021828 ; __unwind {
.text:0000000000021828                 STR             X21, [SP,#-0x30]!
.text:000000000002182C                 STP             X20, X19, [SP,#0x10]
.text:0000000000021830                 STP             X29, X30, [SP,#0x20]
.text:0000000000021834                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000021838                 LDR             X8, [X0]
.text:000000000002183C                 ADRP            X9, #_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000021840                 ADRP            X10, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000021844                 LDUR            X8, [X8,#-0x18]
.text:0000000000021848                 LDR             X9, [X9,#_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:000000000002184C                 LDR             X10, [X10,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000021850                 ADD             X19, X0, X8
.text:0000000000021854                 ADD             X8, X9, #0x40 ; '@'
.text:0000000000021858                 ADD             X10, X10, #0x10
.text:000000000002185C                 MOV             X20, X19
.text:0000000000021860                 MOV             X21, X19
.text:0000000000021864                 ADD             X9, X9, #0x18
.text:0000000000021868                 STR             X8, [X20,#0x70]!
.text:000000000002186C                 STR             X10, [X21,#8]!
.text:0000000000021870                 LDRB            W8, [X19,#0x48]
.text:0000000000021874                 STR             X9, [X19]
.text:0000000000021878                 TBZ             W8, #0, loc_21884
.text:000000000002187C                 LDR             X0, [X19,#0x58]
.text:0000000000021880                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000021884 loc_21884                               ; CODE XREF: .text:0000000000021878↑j
.text:0000000000021884                 MOV             X0, X21
.text:0000000000021888                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:000000000002188C                 ADRP            X8, #_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000021890                 MOV             X0, X19
.text:0000000000021894                 LDR             X8, [X8,#_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000021898                 ADD             X1, X8, #8
.text:000000000002189C                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::~basic_ostream()
.text:00000000000218A0                 MOV             X0, X20
.text:00000000000218A4                 BL              ._ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ios<char,std::__1::char_traits<char>>::~basic_ios()
.text:00000000000218A8                 MOV             X0, X19
.text:00000000000218AC                 LDP             X29, X30, [SP,#0x20]
.text:00000000000218B0                 LDP             X20, X19, [SP,#0x10]
.text:00000000000218B4                 LDR             X21, [SP],#0x30
.text:00000000000218B8                 B               ._ZdlPv ; operator delete(void *)
.text:00000000000218B8 ; } // starts at 21828
.text:00000000000218B8 ; ---------------------------------------------------------------------------
.text:00000000000218BC                 ALIGN 0x20
.text:00000000000218C0 ; __unwind {
.text:00000000000218C0                 STR             X19, [SP,#-0x20]!
.text:00000000000218C4                 STP             X29, X30, [SP,#0x10]
.text:00000000000218C8                 ADD             X29, SP, #0x10
.text:00000000000218CC                 ADRP            X8, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:00000000000218D0                 MOV             X19, X0
.text:00000000000218D4                 LDR             X8, [X8,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:00000000000218D8                 LDRB            W9, [X0,#0x40]
.text:00000000000218DC                 ADD             X8, X8, #0x10
.text:00000000000218E0                 STR             X8, [X0]
.text:00000000000218E4                 TBZ             W9, #0, loc_218F0
.text:00000000000218E8                 LDR             X0, [X19,#0x50]
.text:00000000000218EC                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000218F0 loc_218F0                               ; CODE XREF: .text:00000000000218E4↑j
.text:00000000000218F0                 LDP             X29, X30, [SP,#0x10]
.text:00000000000218F4                 MOV             X0, X19
.text:00000000000218F8                 LDR             X19, [SP],#0x20
.text:00000000000218FC                 B               ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:00000000000218FC ; } // starts at 218C0
.text:0000000000021900 ; ---------------------------------------------------------------------------
.text:0000000000021900 ; __unwind {
.text:0000000000021900                 STR             X19, [SP,#-0x20]!
.text:0000000000021904                 STP             X29, X30, [SP,#0x10]
.text:0000000000021908                 ADD             X29, SP, #0x10
.text:000000000002190C                 ADRP            X8, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000021910                 MOV             X19, X0
.text:0000000000021914                 LDR             X8, [X8,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000021918                 LDRB            W9, [X0,#0x40]
.text:000000000002191C                 ADD             X8, X8, #0x10
.text:0000000000021920                 STR             X8, [X0]
.text:0000000000021924                 TBZ             W9, #0, loc_21930
.text:0000000000021928                 LDR             X0, [X19,#0x50]
.text:000000000002192C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000021930 loc_21930                               ; CODE XREF: .text:0000000000021924↑j
.text:0000000000021930                 MOV             X0, X19
.text:0000000000021934                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:0000000000021938                 LDP             X29, X30, [SP,#0x10]
.text:000000000002193C                 MOV             X0, X19
.text:0000000000021940                 LDR             X19, [SP],#0x20
.text:0000000000021944                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000021944 ; } // starts at 21900
.text:0000000000021948 ; =============== S U B R O U T I N E =======================================
.text:0000000000021948 sub_21948                               ; DATA XREF: .data.rel.ro:0000000000030290↓o
.text:0000000000021948 ; __unwind {
.text:0000000000021948                 LDR             X8, [X0,#0x58]
.text:000000000002194C                 LDR             X9, [X0,#0x30]
.text:0000000000021950                 CMP             X8, X9
.text:0000000000021954                 B.CS            loc_21960
.text:0000000000021958                 MOV             X8, X9
.text:000000000002195C                 STR             X9, [X0,#0x58]
.text:0000000000021960 loc_21960                               ; CODE XREF: sub_21948+C↑j
.text:0000000000021960                 ANDS            W10, W3, #0x18
.text:0000000000021964                 B.EQ            loc_21984
.text:0000000000021968                 CMP             W2, #1
.text:000000000002196C                 B.NE            loc_21990
.text:0000000000021970                 CMP             W10, #0x18
.text:0000000000021974                 B.NE            loc_21990
.text:0000000000021978                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:000000000002197C                 MOV             X0, XZR
.text:0000000000021980                 RET
.text:0000000000021984 ; ---------------------------------------------------------------------------
.text:0000000000021984 loc_21984                               ; CODE XREF: sub_21948+1C↑j
.text:0000000000021984                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000021988                 MOV             X0, XZR
.text:000000000002198C                 RET
.text:0000000000021990 ; ---------------------------------------------------------------------------
.text:0000000000021990 loc_21990                               ; CODE XREF: sub_21948+24↑j
.text:0000000000021990                                         ; sub_21948+2C↑j
.text:0000000000021990                 CBZ             X8, loc_219B0
.text:0000000000021994                 MOV             X10, X0
.text:0000000000021998                 LDRB            W11, [X10,#0x40]!
.text:000000000002199C                 TBNZ            W11, #0, loc_219C0
.text:00000000000219A0                 ADD             X10, X10, #1
.text:00000000000219A4                 SUB             X10, X8, X10
.text:00000000000219A8                 CBNZ            W2, loc_219CC
.text:00000000000219AC                 B               loc_219B8
.text:00000000000219B0 ; ---------------------------------------------------------------------------
.text:00000000000219B0 loc_219B0                               ; CODE XREF: sub_21948:loc_21990↑j
.text:00000000000219B0                 MOV             X10, XZR
.text:00000000000219B4                 CBNZ            W2, loc_219CC
.text:00000000000219B8 loc_219B8                               ; CODE XREF: sub_21948+64↑j
.text:00000000000219B8                                         ; sub_21948+80↓j
.text:00000000000219B8                 MOV             X11, XZR
.text:00000000000219BC                 B               loc_21A08
.text:00000000000219C0 ; ---------------------------------------------------------------------------
.text:00000000000219C0 loc_219C0                               ; CODE XREF: sub_21948+54↑j
.text:00000000000219C0                 LDR             X10, [X0,#0x50]
.text:00000000000219C4                 SUB             X10, X8, X10
.text:00000000000219C8                 CBZ             W2, loc_219B8
.text:00000000000219CC loc_219CC                               ; CODE XREF: sub_21948+60↑j
.text:00000000000219CC                                         ; sub_21948+6C↑j
.text:00000000000219CC                 CMP             W2, #2
.text:00000000000219D0                 B.EQ            loc_219EC
.text:00000000000219D4                 CMP             W2, #1
.text:00000000000219D8                 B.NE            loc_219F4
.text:00000000000219DC                 TBNZ            W3, #3, loc_21A00
.text:00000000000219E0                 LDR             X11, [X0,#0x28]
.text:00000000000219E4                 SUB             X11, X9, X11
.text:00000000000219E8                 B               loc_21A08
.text:00000000000219EC ; ---------------------------------------------------------------------------
.text:00000000000219EC loc_219EC                               ; CODE XREF: sub_21948+88↑j
.text:00000000000219EC                 MOV             X11, X10
.text:00000000000219F0                 B               loc_21A08
.text:00000000000219F4 ; ---------------------------------------------------------------------------
.text:00000000000219F4 loc_219F4                               ; CODE XREF: sub_21948+90↑j
.text:00000000000219F4                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:00000000000219F8                 MOV             X0, XZR
.text:00000000000219FC                 RET
.text:0000000000021A00 ; ---------------------------------------------------------------------------
.text:0000000000021A00 loc_21A00                               ; CODE XREF: sub_21948+94↑j
.text:0000000000021A00                 LDP             X11, X12, [X0,#0x10]
.text:0000000000021A04                 SUB             X11, X12, X11
.text:0000000000021A08 loc_21A08                               ; CODE XREF: sub_21948+74↑j
.text:0000000000021A08                                         ; sub_21948+A0↑j ...
.text:0000000000021A08                 ADDS            X11, X11, X1
.text:0000000000021A0C                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000021A10                 B.MI            loc_21A70
.text:0000000000021A14                 CMP             X10, X11
.text:0000000000021A18                 B.LT            loc_21A70
.text:0000000000021A1C                 CBZ             X11, loc_21A40
.text:0000000000021A20                 TBZ             W3, #3, loc_21A2C
.text:0000000000021A24                 LDR             X10, [X0,#0x18]
.text:0000000000021A28                 CBZ             X10, loc_21A78
.text:0000000000021A2C loc_21A2C                               ; CODE XREF: sub_21948+D8↑j
.text:0000000000021A2C                 TBZ             W3, #4, loc_21A40
.text:0000000000021A30                 CBNZ            X9, loc_21A40
.text:0000000000021A34                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000021A38                 MOV             X0, XZR
.text:0000000000021A3C                 RET
.text:0000000000021A40 ; ---------------------------------------------------------------------------
.text:0000000000021A40 loc_21A40                               ; CODE XREF: sub_21948+D4↑j
.text:0000000000021A40                                         ; sub_21948:loc_21A2C↑j ...
.text:0000000000021A40                 TBZ             W3, #3, loc_21A50
.text:0000000000021A44                 LDR             X9, [X0,#0x10]
.text:0000000000021A48                 ADD             X9, X9, X11
.text:0000000000021A4C                 STP             X9, X8, [X0,#0x18]
.text:0000000000021A50 loc_21A50                               ; CODE XREF: sub_21948:loc_21A40↑j
.text:0000000000021A50                 TBNZ            W3, #4, loc_21A60
.text:0000000000021A54                 MOV             X1, X11
.text:0000000000021A58                 MOV             X0, XZR
.text:0000000000021A5C                 RET
.text:0000000000021A60 ; ---------------------------------------------------------------------------
.text:0000000000021A60 loc_21A60                               ; CODE XREF: sub_21948:loc_21A50↑j
.text:0000000000021A60                 LDR             X8, [X0,#0x28]
.text:0000000000021A64                 MOV             X1, X11
.text:0000000000021A68                 ADD             X8, X8, W11,SXTW
.text:0000000000021A6C                 STR             X8, [X0,#0x30]
.text:0000000000021A70 loc_21A70                               ; CODE XREF: sub_21948+C8↑j
.text:0000000000021A70                                         ; sub_21948+D0↑j
.text:0000000000021A70                 MOV             X0, XZR
.text:0000000000021A74                 RET
.text:0000000000021A78 ; ---------------------------------------------------------------------------
.text:0000000000021A78 loc_21A78                               ; CODE XREF: sub_21948+E0↑j
.text:0000000000021A78                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000021A7C                 MOV             X0, XZR
.text:0000000000021A80                 RET
.text:0000000000021A80 ; } // starts at 21948
.text:0000000000021A80 ; End of function sub_21948
.text:0000000000021A80 ; ---------------------------------------------------------------------------
.text:0000000000021A84                 ALIGN 8
.text:0000000000021A88 ; =============== S U B R O U T I N E =======================================
.text:0000000000021A88 sub_21A88                               ; DATA XREF: .data.rel.ro:0000000000030298↓o
.text:0000000000021A88 ; __unwind {
.text:0000000000021A88                 LDR             X8, [X0]
.text:0000000000021A8C                 MOV             X1, X2
.text:0000000000021A90                 MOV             W2, WZR
.text:0000000000021A94                 LDR             X4, [X8,#0x20]
.text:0000000000021A98                 BR              X4
.text:0000000000021A98 ; } // starts at 21A88
.text:0000000000021A98 ; End of function sub_21A88
.text:0000000000021A98 ; ---------------------------------------------------------------------------
.text:0000000000021A9C                 ALIGN 0x20
.text:0000000000021AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000021AA0 sub_21AA0                               ; DATA XREF: .data.rel.ro:00000000000302B8↓o
.text:0000000000021AA0 ; __unwind {
.text:0000000000021AA0                 LDR             X8, [X0,#0x58]
.text:0000000000021AA4                 LDR             X9, [X0,#0x30]
.text:0000000000021AA8                 CMP             X8, X9
.text:0000000000021AAC                 B.CS            loc_21AB8
.text:0000000000021AB0                 MOV             X8, X9
.text:0000000000021AB4                 STR             X9, [X0,#0x58]
.text:0000000000021AB8 loc_21AB8                               ; CODE XREF: sub_21AA0+C↑j
.text:0000000000021AB8                 LDRB            W9, [X0,#0x60]
.text:0000000000021ABC                 TBNZ            W9, #3, loc_21AC8
.text:0000000000021AC0                 MOV             W0, #0xFFFFFFFF
.text:0000000000021AC4                 RET
.text:0000000000021AC8 ; ---------------------------------------------------------------------------
.text:0000000000021AC8 loc_21AC8                               ; CODE XREF: sub_21AA0+1C↑j
.text:0000000000021AC8                 LDR             X9, [X0,#0x20]
.text:0000000000021ACC                 CMP             X9, X8
.text:0000000000021AD0                 B.CS            loc_21ADC
.text:0000000000021AD4                 MOV             X9, X8
.text:0000000000021AD8                 STR             X8, [X0,#0x20]
.text:0000000000021ADC loc_21ADC                               ; CODE XREF: sub_21AA0+30↑j
.text:0000000000021ADC                 LDR             X8, [X0,#0x18]
.text:0000000000021AE0                 CMP             X8, X9
.text:0000000000021AE4                 B.CS            loc_21AF0
.text:0000000000021AE8                 LDRB            W0, [X8]
.text:0000000000021AEC                 RET
.text:0000000000021AF0 ; ---------------------------------------------------------------------------
.text:0000000000021AF0 loc_21AF0                               ; CODE XREF: sub_21AA0+44↑j
.text:0000000000021AF0                 MOV             W0, #0xFFFFFFFF
.text:0000000000021AF4                 RET
.text:0000000000021AF4 ; } // starts at 21AA0
.text:0000000000021AF4 ; End of function sub_21AA0
.text:0000000000021AF8 ; =============== S U B R O U T I N E =======================================
.text:0000000000021AF8 sub_21AF8                               ; DATA XREF: .data.rel.ro:00000000000302C8↓o
.text:0000000000021AF8 ; __unwind {
.text:0000000000021AF8                 LDR             X9, [X0,#0x58]
.text:0000000000021AFC                 MOV             X8, X0
.text:0000000000021B00                 LDR             X10, [X0,#0x30]
.text:0000000000021B04                 MOV             W0, W1
.text:0000000000021B08                 CMP             X9, X10
.text:0000000000021B0C                 B.CS            loc_21B18
.text:0000000000021B10                 MOV             X9, X10
.text:0000000000021B14                 STR             X10, [X8,#0x58]
.text:0000000000021B18 loc_21B18                               ; CODE XREF: sub_21AF8+14↑j
.text:0000000000021B18                 LDP             X11, X10, [X8,#0x10]
.text:0000000000021B1C                 CMP             X11, X10
.text:0000000000021B20                 B.CS            loc_21B50
.text:0000000000021B24                 CMN             W0, #1
.text:0000000000021B28                 B.EQ            loc_21B58
.text:0000000000021B2C                 LDRB            W11, [X8,#0x60]
.text:0000000000021B30                 TBNZ            W11, #4, loc_21B40
.text:0000000000021B34                 LDURB           W11, [X10,#-1]
.text:0000000000021B38                 CMP             W11, W0,UXTB
.text:0000000000021B3C                 B.NE            loc_21B6C
.text:0000000000021B40 loc_21B40                               ; CODE XREF: sub_21AF8+38↑j
.text:0000000000021B40                 SUB             X11, X10, #1
.text:0000000000021B44                 STP             X11, X9, [X8,#0x18]
.text:0000000000021B48                 STURB           W0, [X10,#-1]
.text:0000000000021B4C                 RET
.text:0000000000021B50 ; ---------------------------------------------------------------------------
.text:0000000000021B50 loc_21B50                               ; CODE XREF: sub_21AF8+28↑j
.text:0000000000021B50                 MOV             W0, #0xFFFFFFFF
.text:0000000000021B54                 RET
.text:0000000000021B58 ; ---------------------------------------------------------------------------
.text:0000000000021B58 loc_21B58                               ; CODE XREF: sub_21AF8+30↑j
.text:0000000000021B58                 MOV             W0, WZR
.text:0000000000021B5C                 STR             X9, [X8,#0x20]
.text:0000000000021B60                 SUB             X9, X10, #1
.text:0000000000021B64                 STR             X9, [X8,#0x18]
.text:0000000000021B68                 RET
.text:0000000000021B6C ; ---------------------------------------------------------------------------
.text:0000000000021B6C loc_21B6C                               ; CODE XREF: sub_21AF8+44↑j
.text:0000000000021B6C                 MOV             W0, #0xFFFFFFFF
.text:0000000000021B70                 RET
.text:0000000000021B70 ; } // starts at 21AF8
.text:0000000000021B70 ; End of function sub_21AF8
.text:0000000000021B70 ; ---------------------------------------------------------------------------
.text:0000000000021B74                 ALIGN 8
.text:0000000000021B78 ; =============== S U B R O U T I N E =======================================
.text:0000000000021B78 ; Attributes: bp-based frame
.text:0000000000021B78 sub_21B78                               ; DATA XREF: .data.rel.ro:00000000000302D8↓o
.text:0000000000021B78 var_48          = -0x48
.text:0000000000021B78 var_40          = -0x40
.text:0000000000021B78 var_30          = -0x30
.text:0000000000021B78 var_20          = -0x20
.text:0000000000021B78 var_10          = -0x10
.text:0000000000021B78 var_s0          =  0
.text:0000000000021B78 ; __unwind {
.text:0000000000021B78                 SUB             SP, SP, #0x60
.text:0000000000021B7C                 STP             X26, X25, [SP,#0x50+var_40]
.text:0000000000021B80                 STP             X24, X23, [SP,#0x50+var_30]
.text:0000000000021B84                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000021B88                 STP             X20, X19, [SP,#0x50+var_10]
.text:0000000000021B8C                 STP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000021B90                 ADD             X29, SP, #0x50
.text:0000000000021B94                 CMN             W1, #1
.text:0000000000021B98                 B.EQ            loc_21BBC
.text:0000000000021B9C                 LDP             X24, X8, [X0,#0x30]
.text:0000000000021BA0                 LDP             X22, X23, [X0,#0x10]
.text:0000000000021BA4                 MOV             W20, W1
.text:0000000000021BA8                 MOV             X19, X0
.text:0000000000021BAC                 CMP             X24, X8
.text:0000000000021BB0                 B.EQ            loc_21BC4
.text:0000000000021BB4                 LDR             X10, [X19,#0x58]
.text:0000000000021BB8                 B               loc_21C4C
.text:0000000000021BBC ; ---------------------------------------------------------------------------
.text:0000000000021BBC loc_21BBC                               ; CODE XREF: sub_21B78+20↑j
.text:0000000000021BBC                 MOV             W0, WZR
.text:0000000000021BC0                 B               loc_21CB0
.text:0000000000021BC4 ; ---------------------------------------------------------------------------
.text:0000000000021BC4 loc_21BC4                               ; CODE XREF: sub_21B78+38↑j
.text:0000000000021BC4                 LDRB            W8, [X19,#0x60]
.text:0000000000021BC8                 TBNZ            W8, #4, loc_21BD4
.text:0000000000021BCC                 MOV             W0, #0xFFFFFFFF
.text:0000000000021BD0                 B               loc_21CB0
.text:0000000000021BD4 ; ---------------------------------------------------------------------------
.text:0000000000021BD4 loc_21BD4                               ; CODE XREF: sub_21B78+50↑j
.text:0000000000021BD4                 ADD             X21, X19, #0x40 ; '@'
.text:0000000000021BD8                 LDR             X25, [X19,#0x28]
.text:0000000000021BDC                 LDR             X26, [X19,#0x58]
.text:0000000000021BE0                 MOV             X0, X21
.text:0000000000021BE4                 MOV             W1, WZR
.text:0000000000021BE8                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::push_back(char)
.text:0000000000021BEC                 LDRB            W8, [X19,#0x40]
.text:0000000000021BF0                 TBNZ            W8, #0, loc_21BFC
.text:0000000000021BF4                 MOV             W1, #0x16
.text:0000000000021BF8                 B               loc_21C08
.text:0000000000021BFC ; ---------------------------------------------------------------------------
.text:0000000000021BFC loc_21BFC                               ; CODE XREF: sub_21B78+78↑j
.text:0000000000021BFC                 LDR             X8, [X21]
.text:0000000000021C00                 AND             X8, X8, #0xFFFFFFFFFFFFFFFE
.text:0000000000021C04                 SUB             X1, X8, #1
.text:0000000000021C08 loc_21C08                               ; CODE XREF: sub_21B78+80↑j
.text:0000000000021C08                 MOV             X0, X21
.text:0000000000021C0C                 MOV             W2, WZR
.text:0000000000021C10                 SUB             X24, X24, X25
.text:0000000000021C14                 SUB             X25, X26, X25
.text:0000000000021C18                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::resize(ulong,char)
.text:0000000000021C1C                 LDRB            W8, [X21]
.text:0000000000021C20                 TBNZ            W8, #0, loc_21C30
.text:0000000000021C24                 ADD             X9, X21, #1
.text:0000000000021C28                 LSR             X8, X8, #1
.text:0000000000021C2C                 B               loc_21C34
.text:0000000000021C30 ; ---------------------------------------------------------------------------
.text:0000000000021C30 loc_21C30                               ; CODE XREF: sub_21B78+A8↑j
.text:0000000000021C30                 LDP             X8, X9, [X19,#0x48]
.text:0000000000021C34 loc_21C34                               ; CODE XREF: sub_21B78+B4↑j
.text:0000000000021C34                 ADD             X8, X9, X8
.text:0000000000021C38                 STR             X9, [X19,#0x28]
.text:0000000000021C3C                 ADD             X24, X9, X24
.text:0000000000021C40                 ADD             X10, X9, X25
.text:0000000000021C44                 STP             X24, X8, [X19,#0x30]
.text:0000000000021C48                 STR             X10, [X19,#0x58]
.text:0000000000021C4C loc_21C4C                               ; CODE XREF: sub_21B78+40↑j
.text:0000000000021C4C                 ADD             X9, X24, #1
.text:0000000000021C50                 ADD             X11, X19, #0x58 ; 'X'
.text:0000000000021C54                 ADD             X12, SP, #0x50+var_48
.text:0000000000021C58                 CMP             X9, X10
.text:0000000000021C5C                 STR             X9, [SP,#0x50+var_48]
.text:0000000000021C60                 CSEL            X10, X11, X12, CC
.text:0000000000021C64                 LDRB            W11, [X19,#0x60]
.text:0000000000021C68                 LDR             X10, [X10]
.text:0000000000021C6C                 STR             X10, [X19,#0x58]
.text:0000000000021C70                 TBZ             W11, #3, loc_21C9C
.text:0000000000021C74                 MOV             X12, X19
.text:0000000000021C78                 SUB             X11, X23, X22
.text:0000000000021C7C                 LDRB            W13, [X12,#0x40]!
.text:0000000000021C80                 TBNZ            W13, #0, loc_21C8C
.text:0000000000021C84                 ADD             X12, X12, #1
.text:0000000000021C88                 B               loc_21C90
.text:0000000000021C8C ; ---------------------------------------------------------------------------
.text:0000000000021C8C loc_21C8C                               ; CODE XREF: sub_21B78+108↑j
.text:0000000000021C8C                 LDR             X12, [X19,#0x50]
.text:0000000000021C90 loc_21C90                               ; CODE XREF: sub_21B78+110↑j
.text:0000000000021C90                 ADD             X11, X12, X11
.text:0000000000021C94                 STR             X10, [X19,#0x20]
.text:0000000000021C98                 STP             X12, X11, [X19,#0x10]
.text:0000000000021C9C loc_21C9C                               ; CODE XREF: sub_21B78+F8↑j
.text:0000000000021C9C                 CMP             X24, X8
.text:0000000000021CA0                 B.EQ            loc_21CCC
.text:0000000000021CA4                 AND             W0, W20, #0xFF
.text:0000000000021CA8                 STR             X9, [X19,#0x30]
.text:0000000000021CAC                 STRB            W20, [X24]
.text:0000000000021CB0 loc_21CB0                               ; CODE XREF: sub_21B78+48↑j
.text:0000000000021CB0                                         ; sub_21B78+58↑j
.text:0000000000021CB0                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000021CB4                 LDP             X20, X19, [SP,#0x50+var_10]
.text:0000000000021CB8                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000021CBC                 LDP             X24, X23, [SP,#0x50+var_30]
.text:0000000000021CC0                 LDP             X26, X25, [SP,#0x50+var_40]
.text:0000000000021CC4                 ADD             SP, SP, #0x60 ; '`'
.text:0000000000021CC8                 RET
.text:0000000000021CCC ; ---------------------------------------------------------------------------
.text:0000000000021CCC loc_21CCC                               ; CODE XREF: sub_21B78+128↑j
.text:0000000000021CCC                 LDR             X8, [X19]
.text:0000000000021CD0                 AND             W1, W20, #0xFF
.text:0000000000021CD4                 MOV             X0, X19
.text:0000000000021CD8                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000021CDC                 LDP             X20, X19, [SP,#0x50+var_10]
.text:0000000000021CE0                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000021CE4                 LDP             X24, X23, [SP,#0x50+var_30]
.text:0000000000021CE8                 LDP             X26, X25, [SP,#0x50+var_40]
.text:0000000000021CEC                 LDR             X2, [X8,#0x68]
.text:0000000000021CF0                 ADD             SP, SP, #0x60 ; '`'
.text:0000000000021CF4                 BR              X2
.text:0000000000021CF4 ; } // starts at 21B78
.text:0000000000021CF4 ; End of function sub_21B78
.text:0000000000021CF8 ; ---------------------------------------------------------------------------
.text:0000000000021CF8 loc_21CF8                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::dump(Hwobs::FrameDump &)+C0↑p
.text:0000000000021CF8 ; __unwind {
.text:0000000000021CF8                 STP             X24, X23, [SP,#-0x40]!
.text:0000000000021CFC                 STP             X22, X21, [SP,#0x10]
.text:0000000000021D00                 STP             X20, X19, [SP,#0x20]
.text:0000000000021D04                 STP             X29, X30, [SP,#0x30]
.text:0000000000021D08                 ADD             X29, SP, #0x30 ; '0'
.text:0000000000021D0C                 LDP             X20, X8, [X0]
.text:0000000000021D10                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:0000000000021D18                 MOV             X24, #0xAAAAAAAAAAAAAAAA
.text:0000000000021D1C                 SUB             X21, X8, X20
.text:0000000000021D20                 ASR             X8, X21, #3
.text:0000000000021D24                 MUL             X23, X8, X9
.text:0000000000021D28                 MOV             X19, X0
.text:0000000000021D2C                 MOVK            X24, #0xAAA,LSL#48
.text:0000000000021D30                 ADD             X8, X23, #1
.text:0000000000021D34                 CMP             X8, X24
.text:0000000000021D38                 B.HI            loc_21E14
.text:0000000000021D3C                 LDR             X10, [X19,#0x10]
.text:0000000000021D40                 MOV             X22, X1
.text:0000000000021D44                 SUB             X10, X10, X20
.text:0000000000021D48                 ASR             X10, X10, #3
.text:0000000000021D4C                 MUL             X9, X10, X9
.text:0000000000021D50                 MOV             X10, #0x555555555555554
.text:0000000000021D5C                 CMP             X9, X10
.text:0000000000021D60                 B.HI            loc_21D74
.text:0000000000021D64                 LSL             X9, X9, #1
.text:0000000000021D68                 CMP             X9, X8
.text:0000000000021D6C                 CSEL            X24, X8, X9, CC
.text:0000000000021D70                 CBZ             X24, loc_21E0C
.text:0000000000021D74 loc_21D74                               ; CODE XREF: .text:0000000000021D60↑j
.text:0000000000021D74                 ADD             X8, X24, X24,LSL#1
.text:0000000000021D78                 LSL             X0, X8, #3
.text:0000000000021D7C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000021D80 loc_21D80                               ; CODE XREF: .text:0000000000021E10↓j
.text:0000000000021D80                 MOV             X8, #0x5555555555555555
.text:0000000000021D84                 LDR             X12, [X22,#0x10]
.text:0000000000021D88                 MOVK            X8, #0xD555,LSL#48
.text:0000000000021D8C                 LDR             Q0, [X22]
.text:0000000000021D90                 MOV             W9, #0x18
.text:0000000000021D94                 SMULH           X8, X21, X8
.text:0000000000021D98                 CMP             X21, #1
.text:0000000000021D9C                 MADD            X10, X23, X9, X0
.text:0000000000021DA0                 ASR             X11, X8, #2
.text:0000000000021DA4                 MADD            X23, X24, X9, X0
.text:0000000000021DA8                 ADD             X8, X11, X8,LSR#63
.text:0000000000021DAC                 ADD             X24, X10, #0x18
.text:0000000000021DB0                 MADD            X22, X8, X9, X10
.text:0000000000021DB4                 STR             X12, [X10,#0x10]
.text:0000000000021DB8                 STR             Q0, [X10]
.text:0000000000021DBC                 B.LT            loc_21DD4
.text:0000000000021DC0                 MOV             X0, X22
.text:0000000000021DC4                 MOV             X1, X20
.text:0000000000021DC8                 MOV             X2, X21
.text:0000000000021DCC                 BL              .memcpy
.text:0000000000021DD0                 LDR             X20, [X19]
.text:0000000000021DD4 loc_21DD4                               ; CODE XREF: .text:0000000000021DBC↑j
.text:0000000000021DD4                 STP             X22, X24, [X19]
.text:0000000000021DD8                 STR             X23, [X19,#0x10]
.text:0000000000021DDC                 CBZ             X20, loc_21DF8
.text:0000000000021DE0                 MOV             X0, X20
.text:0000000000021DE4                 LDP             X29, X30, [SP,#0x30]
.text:0000000000021DE8                 LDP             X20, X19, [SP,#0x20]
.text:0000000000021DEC                 LDP             X22, X21, [SP,#0x10]
.text:0000000000021DF0                 LDP             X24, X23, [SP],#0x40
.text:0000000000021DF4                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000021DF8 ; ---------------------------------------------------------------------------
.text:0000000000021DF8 loc_21DF8                               ; CODE XREF: .text:0000000000021DDC↑j
.text:0000000000021DF8                 LDP             X29, X30, [SP,#0x30]
.text:0000000000021DFC                 LDP             X20, X19, [SP,#0x20]
.text:0000000000021E00                 LDP             X22, X21, [SP,#0x10]
.text:0000000000021E04                 LDP             X24, X23, [SP],#0x40
.text:0000000000021E08                 RET
.text:0000000000021E0C ; ---------------------------------------------------------------------------
.text:0000000000021E0C loc_21E0C                               ; CODE XREF: .text:0000000000021D70↑j
.text:0000000000021E0C                 MOV             X0, XZR
.text:0000000000021E10                 B               loc_21D80
.text:0000000000021E14 ; ---------------------------------------------------------------------------
.text:0000000000021E14 loc_21E14                               ; CODE XREF: .text:0000000000021D38↑j
.text:0000000000021E14                 MOV             X0, X19
.text:0000000000021E18                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000021E18 ; } // starts at 21CF8
.text:0000000000021E18 ; ---------------------------------------------------------------------------
.text:0000000000021E1C                 DCD 0
.text:0000000000021E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000021E20 ; Attributes: bp-based frame
.text:0000000000021E20 sub_21E20                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+1E4↑p
.text:0000000000021E20 var_60          = -0x60
.text:0000000000021E20 var_50          = -0x50
.text:0000000000021E20 var_48          = -0x48
.text:0000000000021E20 var_40          = -0x40
.text:0000000000021E20 var_30          = -0x30
.text:0000000000021E20 var_20          = -0x20
.text:0000000000021E20 var_10          = -0x10
.text:0000000000021E20 var_s0          =  0
.text:0000000000021E20 ; __unwind {
.text:0000000000021E20                 SUB             SP, SP, #0x70
.text:0000000000021E24                 STP             X26, X25, [SP,#0x60+var_40]
.text:0000000000021E28                 STP             X24, X23, [SP,#0x60+var_30]
.text:0000000000021E2C                 STP             X22, X21, [SP,#0x60+var_20]
.text:0000000000021E30                 STP             X20, X19, [SP,#0x60+var_10]
.text:0000000000021E34                 STP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000021E38                 ADD             X29, SP, #0x60
.text:0000000000021E3C                 MRS             X26, #3, c13, c0, #2
.text:0000000000021E40                 MOV             X19, X0
.text:0000000000021E44                 LDR             X8, [X26,#0x28]
.text:0000000000021E48                 MOV             X20, X1
.text:0000000000021E4C                 MOV             X0, SP
.text:0000000000021E50                 MOV             X1, X19
.text:0000000000021E54                 MOV             X22, X2
.text:0000000000021E58                 STR             X8, [SP,#0x60+var_48]
.text:0000000000021E5C                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_ ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char,std::__1::char_traits<char>>&)
.text:0000000000021E60                 LDRB            W8, [SP,#0x60+var_60]
.text:0000000000021E64                 CBZ             W8, loc_21F14
.text:0000000000021E68                 LDR             X8, [X19]
.text:0000000000021E6C                 MOV             W9, #0xB0
.text:0000000000021E70                 ADD             X22, X20, X22
.text:0000000000021E74                 LDUR            X8, [X8,#-0x18]
.text:0000000000021E78                 ADD             X21, X19, X8
.text:0000000000021E7C                 LDR             W8, [X21,#8]
.text:0000000000021E80                 LDR             W5, [X21,#0x90]
.text:0000000000021E84                 LDR             X24, [X21,#0x28]
.text:0000000000021E88                 AND             W8, W8, W9
.text:0000000000021E8C                 CMP             W8, #0x20 ; ' '
.text:0000000000021E90                 CSEL            X23, X22, X20, EQ
.text:0000000000021E94                 CMN             W5, #1
.text:0000000000021E98                 B.NE            loc_21EDC
.text:0000000000021E9C                 ADD             X8, SP, #0x60+var_50
.text:0000000000021EA0                 MOV             X0, X21 ; this
.text:0000000000021EA4                 BL              ._ZNKSt3__18ios_base6getlocEv ; std::__1::ios_base::getloc(void)
.text:0000000000021EA8                 ADRP            X1, #_ZNSt3__15ctypeIcE2idE_ptr@PAGE
.text:0000000000021EAC                 ADD             X0, SP, #0x60+var_50
.text:0000000000021EB0                 LDR             X1, [X1,#_ZNSt3__15ctypeIcE2idE_ptr@PAGEOFF]
.text:0000000000021EB4                 BL              ._ZNKSt3__16locale9use_facetERNS0_2idE ; std::__1::locale::use_facet(std::__1::locale::id &)
.text:0000000000021EB8                 LDR             X8, [X0]
.text:0000000000021EBC                 MOV             W1, #0x20 ; ' '
.text:0000000000021EC0                 LDR             X8, [X8,#0x38]
.text:0000000000021EC4                 BLR             X8
.text:0000000000021EC8                 MOV             W25, W0
.text:0000000000021ECC                 ADD             X0, SP, #0x60+var_50 ; this
.text:0000000000021ED0                 BL              ._ZNSt3__16localeD1Ev ; std::__1::locale::~locale()
.text:0000000000021ED4                 AND             W5, W25, #0xFF
.text:0000000000021ED8                 STR             W5, [X21,#0x90]
.text:0000000000021EDC loc_21EDC                               ; CODE XREF: sub_21E20+78↑j
.text:0000000000021EDC                 MOV             X0, X24
.text:0000000000021EE0                 MOV             X1, X20
.text:0000000000021EE4                 MOV             X2, X23
.text:0000000000021EE8                 MOV             X3, X22
.text:0000000000021EEC                 MOV             X4, X21
.text:0000000000021EF0                 BL              sub_21F50
.text:0000000000021EF4                 CBNZ            X0, loc_21F14
.text:0000000000021EF8                 LDR             X8, [X19]
.text:0000000000021EFC                 MOV             W9, #5
.text:0000000000021F00                 LDUR            X8, [X8,#-0x18]
.text:0000000000021F04                 ADD             X0, X19, X8 ; this
.text:0000000000021F08                 LDR             W8, [X0,#0x20]
.text:0000000000021F0C                 ORR             W1, W8, W9 ; unsigned int
.text:0000000000021F10                 BL              ._ZNSt3__18ios_base5clearEj ; std::__1::ios_base::clear(uint)
.text:0000000000021F14 loc_21F14                               ; CODE XREF: sub_21E20+44↑j
.text:0000000000021F14                                         ; sub_21E20+D4↑j
.text:0000000000021F14                 MOV             X0, SP
.text:0000000000021F18                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::sentry::~sentry()
.text:0000000000021F1C                 LDR             X8, [X26,#0x28]
.text:0000000000021F20                 LDR             X9, [SP,#0x60+var_48]
.text:0000000000021F24                 CMP             X8, X9
.text:0000000000021F28                 B.NE            loc_21F4C
.text:0000000000021F2C                 MOV             X0, X19
.text:0000000000021F30                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000021F34                 LDP             X20, X19, [SP,#0x60+var_10]
.text:0000000000021F38                 LDP             X22, X21, [SP,#0x60+var_20]
.text:0000000000021F3C                 LDP             X24, X23, [SP,#0x60+var_30]
.text:0000000000021F40                 LDP             X26, X25, [SP,#0x60+var_40]
.text:0000000000021F44                 ADD             SP, SP, #0x70 ; 'p'
.text:0000000000021F48                 RET
.text:0000000000021F4C ; ---------------------------------------------------------------------------
.text:0000000000021F4C loc_21F4C                               ; CODE XREF: sub_21E20+108↑j
.text:0000000000021F4C                 BL              .__stack_chk_fail
.text:0000000000021F4C ; } // starts at 21E20
.text:0000000000021F4C ; End of function sub_21E20
.text:0000000000021F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000021F50 ; Attributes: bp-based frame
.text:0000000000021F50 sub_21F50                               ; CODE XREF: sub_21E20+D0↑p
.text:0000000000021F50 var_70          = -0x70
.text:0000000000021F50 var_68          = -0x68
.text:0000000000021F50 var_60          = -0x60
.text:0000000000021F50 var_58          = -0x58
.text:0000000000021F50 var_50          = -0x50
.text:0000000000021F50 var_40          = -0x40
.text:0000000000021F50 var_30          = -0x30
.text:0000000000021F50 var_20          = -0x20
.text:0000000000021F50 var_10          = -0x10
.text:0000000000021F50 var_s0          =  0
.text:0000000000021F50 ; __unwind {
.text:0000000000021F50                 SUB             SP, SP, #0x80
.text:0000000000021F54                 STR             X27, [SP,#0x70+var_50]
.text:0000000000021F58                 STP             X26, X25, [SP,#0x70+var_40]
.text:0000000000021F5C                 STP             X24, X23, [SP,#0x70+var_30]
.text:0000000000021F60                 STP             X22, X21, [SP,#0x70+var_20]
.text:0000000000021F64                 STP             X20, X19, [SP,#0x70+var_10]
.text:0000000000021F68                 STP             X29, X30, [SP,#0x70+var_s0]
.text:0000000000021F6C                 ADD             X29, SP, #0x70
.text:0000000000021F70                 MRS             X27, #3, c13, c0, #2
.text:0000000000021F74                 MOV             X19, X0
.text:0000000000021F78                 LDR             X8, [X27,#0x28]
.text:0000000000021F7C                 STR             X8, [SP,#0x70+var_58]
.text:0000000000021F80                 CBZ             X0, loc_220A8
.text:0000000000021F84                 LDR             X8, [X4,#0x18]
.text:0000000000021F88                 SUB             X9, X3, X1
.text:0000000000021F8C                 MOV             W24, W5
.text:0000000000021F90                 MOV             X20, X4
.text:0000000000021F94                 MOV             X22, X3
.text:0000000000021F98                 SUBS            X8, X8, X9
.text:0000000000021F9C                 MOV             X21, X2
.text:0000000000021FA0                 CSEL            X23, X8, XZR, GT
.text:0000000000021FA4                 SUB             X25, X2, X1
.text:0000000000021FA8                 CMP             X25, #1
.text:0000000000021FAC                 B.LT            loc_21FCC
.text:0000000000021FB0                 LDR             X8, [X19]
.text:0000000000021FB4                 MOV             X0, X19
.text:0000000000021FB8                 MOV             X2, X25
.text:0000000000021FBC                 LDR             X8, [X8,#0x60]
.text:0000000000021FC0                 BLR             X8
.text:0000000000021FC4                 CMP             X0, X25
.text:0000000000021FC8                 B.NE            loc_220A4
.text:0000000000021FCC loc_21FCC                               ; CODE XREF: sub_21F50+5C↑j
.text:0000000000021FCC                 CMP             X23, #1
.text:0000000000021FD0                 B.LT            loc_22070
.text:0000000000021FD4                 CMP             X23, #0x17
.text:0000000000021FD8                 STP             XZR, XZR, [SP,#0x70+var_68]
.text:0000000000021FDC                 STR             XZR, [SP,#0x70+var_70]
.text:0000000000021FE0                 B.CS            loc_21FF8
.text:0000000000021FE4                 MOV             X26, SP
.text:0000000000021FE8                 ORR             X25, X26, #1
.text:0000000000021FEC                 LSL             W8, W23, #1
.text:0000000000021FF0                 STRB            W8, [SP,#0x70+var_70]
.text:0000000000021FF4                 B               loc_2201C
.text:0000000000021FF8 ; ---------------------------------------------------------------------------
.text:0000000000021FF8 loc_21FF8                               ; CODE XREF: sub_21F50+90↑j
.text:0000000000021FF8                 ADD             X8, X23, #0x10
.text:0000000000021FFC                 AND             X26, X8, #0xFFFFFFFFFFFFFFF0
.text:0000000000022000                 MOV             X0, X26 ; unsigned __int64
.text:0000000000022004                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000022008                 ORR             X8, X26, #1
.text:000000000002200C                 STP             X23, X0, [SP,#0x70+var_68]
.text:0000000000022010                 MOV             X25, X0
.text:0000000000022014                 MOV             X26, SP
.text:0000000000022018                 STR             X8, [SP,#0x70+var_70]
.text:000000000002201C loc_2201C                               ; CODE XREF: sub_21F50+A4↑j
.text:000000000002201C                 MOV             X0, X25 ; s
.text:0000000000022020                 MOV             W1, W24 ; c
.text:0000000000022024                 MOV             X2, X23 ; n
.text:0000000000022028                 BL              .memset
.text:000000000002202C                 STRB            WZR, [X25,X23]
.text:0000000000022030                 MOV             X0, X19
.text:0000000000022034                 LDRB            W8, [SP,#0x70+var_70]
.text:0000000000022038                 MOV             X2, X23
.text:000000000002203C                 LDR             X9, [X19]
.text:0000000000022040                 LDR             X10, [SP,#0x70+var_60]
.text:0000000000022044                 TST             W8, #1
.text:0000000000022048                 LDR             X8, [X9,#0x60]
.text:000000000002204C                 CSINC           X1, X10, X26, NE
.text:0000000000022050                 BLR             X8
.text:0000000000022054                 LDRB            W8, [SP,#0x70+var_70]
.text:0000000000022058                 MOV             X24, X0
.text:000000000002205C                 TBZ             W8, #0, loc_22068
.text:0000000000022060                 LDR             X0, [SP,#0x70+var_60] ; void *
.text:0000000000022064                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000022068 loc_22068                               ; CODE XREF: sub_21F50+10C↑j
.text:0000000000022068                 CMP             X24, X23
.text:000000000002206C                 B.NE            loc_220A4
.text:0000000000022070 loc_22070                               ; CODE XREF: sub_21F50+80↑j
.text:0000000000022070                 SUB             X22, X22, X21
.text:0000000000022074                 CMP             X22, #1
.text:0000000000022078                 B.LT            loc_2209C
.text:000000000002207C                 LDR             X8, [X19]
.text:0000000000022080                 MOV             X0, X19
.text:0000000000022084                 MOV             X1, X21
.text:0000000000022088                 MOV             X2, X22
.text:000000000002208C                 LDR             X8, [X8,#0x60]
.text:0000000000022090                 BLR             X8
.text:0000000000022094                 CMP             X0, X22
.text:0000000000022098                 B.NE            loc_220A4
.text:000000000002209C loc_2209C                               ; CODE XREF: sub_21F50+128↑j
.text:000000000002209C                 STR             XZR, [X20,#0x18]
.text:00000000000220A0                 B               loc_220A8
.text:00000000000220A4 ; ---------------------------------------------------------------------------
.text:00000000000220A4 loc_220A4                               ; CODE XREF: sub_21F50+78↑j
.text:00000000000220A4                                         ; sub_21F50+11C↑j ...
.text:00000000000220A4                 MOV             X19, XZR
.text:00000000000220A8 loc_220A8                               ; CODE XREF: sub_21F50+30↑j
.text:00000000000220A8                                         ; sub_21F50+150↑j
.text:00000000000220A8                 LDR             X8, [X27,#0x28]
.text:00000000000220AC                 LDR             X9, [SP,#0x70+var_58]
.text:00000000000220B0                 CMP             X8, X9
.text:00000000000220B4                 B.NE            loc_220DC
.text:00000000000220B8                 MOV             X0, X19
.text:00000000000220BC                 LDR             X27, [SP,#0x70+var_50]
.text:00000000000220C0                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000220C4                 LDP             X20, X19, [SP,#0x70+var_10]
.text:00000000000220C8                 LDP             X22, X21, [SP,#0x70+var_20]
.text:00000000000220CC                 LDP             X24, X23, [SP,#0x70+var_30]
.text:00000000000220D0                 LDP             X26, X25, [SP,#0x70+var_40]
.text:00000000000220D4                 ADD             SP, SP, #0x80
.text:00000000000220D8                 RET
.text:00000000000220DC ; ---------------------------------------------------------------------------
.text:00000000000220DC loc_220DC                               ; CODE XREF: sub_21F50+164↑j
.text:00000000000220DC                 BL              .__stack_chk_fail
.text:00000000000220DC ; } // starts at 21F50
.text:00000000000220DC ; End of function sub_21F50
.text:00000000000220E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000220E0 ; Attributes: bp-based frame
.text:00000000000220E0 sub_220E0                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+23C↑p
.text:00000000000220E0                                         ; sub_230A0+C8↓p
.text:00000000000220E0 var_30          = -0x30
.text:00000000000220E0 var_20          = -0x20
.text:00000000000220E0 var_10          = -0x10
.text:00000000000220E0 var_s0          =  0
.text:00000000000220E0 ; __unwind {
.text:00000000000220E0                 STR             X23, [SP,#-0x10+var_30]!
.text:00000000000220E4                 STP             X22, X21, [SP,#0x30+var_20]
.text:00000000000220E8                 STP             X20, X19, [SP,#0x30+var_10]
.text:00000000000220EC                 STP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000220F0                 ADD             X29, SP, #0x30
.text:00000000000220F4                 LDR             W9, [X0,#0x60]
.text:00000000000220F8                 MOV             X19, X8
.text:00000000000220FC                 TBNZ            W9, #4, loc_22110
.text:0000000000022100                 TBNZ            W9, #3, loc_22190
.text:0000000000022104                 STP             XZR, XZR, [X19]
.text:0000000000022108                 STR             XZR, [X19,#0x10]
.text:000000000002210C                 B               loc_222D4
.text:0000000000022110 ; ---------------------------------------------------------------------------
.text:0000000000022110 loc_22110                               ; CODE XREF: sub_220E0+1C↑j
.text:0000000000022110                 LDR             X21, [X0,#0x58]
.text:0000000000022114                 LDR             X8, [X0,#0x30]
.text:0000000000022118                 CMP             X21, X8
.text:000000000002211C                 B.CS            loc_22128
.text:0000000000022120                 MOV             X21, X8
.text:0000000000022124                 STR             X8, [X0,#0x58]
.text:0000000000022128 loc_22128                               ; CODE XREF: sub_220E0+3C↑j
.text:0000000000022128                 LDR             X23, [X0,#0x28]
.text:000000000002212C                 STP             XZR, XZR, [X19,#8]
.text:0000000000022130                 STR             XZR, [X19]
.text:0000000000022134                 SUB             X22, X21, X23
.text:0000000000022138                 CMN             X22, #0x10
.text:000000000002213C                 B.CS            loc_222E8
.text:0000000000022140                 CMP             X22, #0x16
.text:0000000000022144                 B.HI            loc_221FC
.text:0000000000022148                 LSL             W8, W22, #1
.text:000000000002214C                 STRB            W8, [X19],#1
.text:0000000000022150                 CMP             X23, X21
.text:0000000000022154                 B.EQ            loc_22250
.text:0000000000022158 loc_22158                               ; CODE XREF: sub_220E0+140↓j
.text:0000000000022158                 CMP             X22, #0x20 ; ' '
.text:000000000002215C                 B.CC            loc_22174
.text:0000000000022160                 CMP             X19, X21
.text:0000000000022164                 B.CS            loc_2225C
.text:0000000000022168                 ADD             X8, X19, X22
.text:000000000002216C                 CMP             X23, X8
.text:0000000000022170                 B.CS            loc_2225C
.text:0000000000022174 loc_22174                               ; CODE XREF: sub_220E0+7C↑j
.text:0000000000022174                 MOV             X9, X23
.text:0000000000022178                 MOV             X8, X19
.text:000000000002217C loc_2217C                               ; CODE XREF: sub_220E0+A8↓j
.text:000000000002217C                                         ; sub_220E0+1B0↓j
.text:000000000002217C                 LDRB            W10, [X9],#1
.text:0000000000022180                 STRB            W10, [X8],#1
.text:0000000000022184                 CMP             X21, X9
.text:0000000000022188                 B.NE            loc_2217C
.text:000000000002218C                 B               loc_222D0
.text:0000000000022190 ; ---------------------------------------------------------------------------
.text:0000000000022190 loc_22190                               ; CODE XREF: sub_220E0+20↑j
.text:0000000000022190                 LDR             X23, [X0,#0x10]
.text:0000000000022194                 LDR             X21, [X0,#0x20]
.text:0000000000022198                 STP             XZR, XZR, [X19,#8]
.text:000000000002219C                 STR             XZR, [X19]
.text:00000000000221A0                 SUB             X22, X21, X23
.text:00000000000221A4                 CMN             X22, #0x10
.text:00000000000221A8                 B.CS            loc_222E8
.text:00000000000221AC                 CMP             X22, #0x16
.text:00000000000221B0                 B.HI            loc_22228
.text:00000000000221B4                 LSL             W8, W22, #1
.text:00000000000221B8                 STRB            W8, [X19],#1
.text:00000000000221BC                 CMP             X23, X21
.text:00000000000221C0                 B.EQ            loc_22250
.text:00000000000221C4 loc_221C4                               ; CODE XREF: sub_220E0+16C↓j
.text:00000000000221C4                 CMP             X22, #0x20 ; ' '
.text:00000000000221C8                 B.CC            loc_221E0
.text:00000000000221CC                 CMP             X19, X21
.text:00000000000221D0                 B.CS            loc_22298
.text:00000000000221D4                 ADD             X8, X19, X22
.text:00000000000221D8                 CMP             X23, X8
.text:00000000000221DC                 B.CS            loc_22298
.text:00000000000221E0 loc_221E0                               ; CODE XREF: sub_220E0+E8↑j
.text:00000000000221E0                 MOV             X9, X23
.text:00000000000221E4                 MOV             X8, X19
.text:00000000000221E8 loc_221E8                               ; CODE XREF: sub_220E0+114↓j
.text:00000000000221E8                                         ; sub_220E0+1EC↓j
.text:00000000000221E8                 LDRB            W10, [X9],#1
.text:00000000000221EC                 STRB            W10, [X8],#1
.text:00000000000221F0                 CMP             X21, X9
.text:00000000000221F4                 B.NE            loc_221E8
.text:00000000000221F8                 B               loc_222D0
.text:00000000000221FC ; ---------------------------------------------------------------------------
.text:00000000000221FC loc_221FC                               ; CODE XREF: sub_220E0+64↑j
.text:00000000000221FC                 ADD             X8, X22, #0x10
.text:0000000000022200                 AND             X20, X8, #0xFFFFFFFFFFFFFFF0
.text:0000000000022204                 MOV             X0, X20 ; unsigned __int64
.text:0000000000022208                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002220C                 ORR             X8, X20, #1
.text:0000000000022210                 STP             X22, X0, [X19,#8]
.text:0000000000022214                 STR             X8, [X19]
.text:0000000000022218                 MOV             X19, X0
.text:000000000002221C                 CMP             X23, X21
.text:0000000000022220                 B.NE            loc_22158
.text:0000000000022224                 B               loc_22250
.text:0000000000022228 ; ---------------------------------------------------------------------------
.text:0000000000022228 loc_22228                               ; CODE XREF: sub_220E0+D0↑j
.text:0000000000022228                 ADD             X8, X22, #0x10
.text:000000000002222C                 AND             X20, X8, #0xFFFFFFFFFFFFFFF0
.text:0000000000022230                 MOV             X0, X20 ; unsigned __int64
.text:0000000000022234                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000022238                 ORR             X8, X20, #1
.text:000000000002223C                 STP             X22, X0, [X19,#8]
.text:0000000000022240                 STR             X8, [X19]
.text:0000000000022244                 MOV             X19, X0
.text:0000000000022248                 CMP             X23, X21
.text:000000000002224C                 B.NE            loc_221C4
.text:0000000000022250 loc_22250                               ; CODE XREF: sub_220E0+74↑j
.text:0000000000022250                                         ; sub_220E0+E0↑j ...
.text:0000000000022250                 MOV             X8, X19
.text:0000000000022254                 STRB            WZR, [X19]
.text:0000000000022258                 B               loc_222D4
.text:000000000002225C ; ---------------------------------------------------------------------------
.text:000000000002225C loc_2225C                               ; CODE XREF: sub_220E0+84↑j
.text:000000000002225C                                         ; sub_220E0+90↑j
.text:000000000002225C                 AND             X10, X22, #0xFFFFFFFFFFFFFFE0
.text:0000000000022260                 ADD             X9, X23, X10
.text:0000000000022264                 ADD             X8, X19, X10
.text:0000000000022268                 ADD             X11, X19, #0x10
.text:000000000002226C                 ADD             X12, X23, #0x10
.text:0000000000022270                 MOV             X13, X10
.text:0000000000022274 loc_22274                               ; CODE XREF: sub_220E0+1A8↓j
.text:0000000000022274                 LDP             Q0, Q1, [X12,#-0x10]
.text:0000000000022278                 ADD             X12, X12, #0x20 ; ' '
.text:000000000002227C                 SUBS            X13, X13, #0x20 ; ' '
.text:0000000000022280                 STP             Q0, Q1, [X11,#-0x10]
.text:0000000000022284                 ADD             X11, X11, #0x20 ; ' '
.text:0000000000022288                 B.NE            loc_22274
.text:000000000002228C                 CMP             X10, X22
.text:0000000000022290                 B.NE            loc_2217C
.text:0000000000022294                 B               loc_222D0
.text:0000000000022298 ; ---------------------------------------------------------------------------
.text:0000000000022298 loc_22298                               ; CODE XREF: sub_220E0+F0↑j
.text:0000000000022298                                         ; sub_220E0+FC↑j
.text:0000000000022298                 AND             X10, X22, #0xFFFFFFFFFFFFFFE0
.text:000000000002229C                 ADD             X9, X23, X10
.text:00000000000222A0                 ADD             X8, X19, X10
.text:00000000000222A4                 ADD             X11, X19, #0x10
.text:00000000000222A8                 ADD             X12, X23, #0x10
.text:00000000000222AC                 MOV             X13, X10
.text:00000000000222B0 loc_222B0                               ; CODE XREF: sub_220E0+1E4↓j
.text:00000000000222B0                 LDP             Q0, Q1, [X12,#-0x10]
.text:00000000000222B4                 ADD             X12, X12, #0x20 ; ' '
.text:00000000000222B8                 SUBS            X13, X13, #0x20 ; ' '
.text:00000000000222BC                 STP             Q0, Q1, [X11,#-0x10]
.text:00000000000222C0                 ADD             X11, X11, #0x20 ; ' '
.text:00000000000222C4                 B.NE            loc_222B0
.text:00000000000222C8                 CMP             X22, X10
.text:00000000000222CC                 B.NE            loc_221E8
.text:00000000000222D0 loc_222D0                               ; CODE XREF: sub_220E0+AC↑j
.text:00000000000222D0                                         ; sub_220E0+118↑j ...
.text:00000000000222D0                 STRB            WZR, [X8]
.text:00000000000222D4 loc_222D4                               ; CODE XREF: sub_220E0+2C↑j
.text:00000000000222D4                                         ; sub_220E0+178↑j
.text:00000000000222D4                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000222D8                 LDP             X20, X19, [SP,#0x30+var_10]
.text:00000000000222DC                 LDP             X22, X21, [SP,#0x30+var_20]
.text:00000000000222E0                 LDR             X23, [SP+0x30+var_30],#0x40
.text:00000000000222E4                 RET
.text:00000000000222E8 ; ---------------------------------------------------------------------------
.text:00000000000222E8 loc_222E8                               ; CODE XREF: sub_220E0+5C↑j
.text:00000000000222E8                                         ; sub_220E0+C8↑j
.text:00000000000222E8                 MOV             X0, X19
.text:00000000000222EC                 BL              ._ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv ; std::__1::__basic_string_common<true>::__throw_length_error(void)
.text:00000000000222EC ; } // starts at 220E0
.text:00000000000222EC ; End of function sub_220E0
.text:00000000000222F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000222F0 ; Attributes: bp-based frame
.text:00000000000222F0 sub_222F0                               ; CODE XREF: sub_20AD0+50↑p
.text:00000000000222F0                                         ; sub_20AD0+88↑p ...
.text:00000000000222F0 var_108         = -0x108
.text:00000000000222F0 var_100         = -0x100
.text:00000000000222F0 var_E0          = -0xE0
.text:00000000000222F0 var_C0          = -0xC0
.text:00000000000222F0 var_A0          = -0xA0
.text:00000000000222F0 var_80          = -0x80
.text:00000000000222F0 var_70          = -0x70
.text:00000000000222F0 var_60          = -0x60
.text:00000000000222F0 var_38          = -0x38
.text:00000000000222F0 var_28          = -0x28
.text:00000000000222F0 var_10          = -0x10
.text:00000000000222F0 var_s0          =  0
.text:00000000000222F0 ; __unwind {
.text:00000000000222F0                 SUB             SP, SP, #0x120
.text:00000000000222F4                 STP             X28, X19, [SP,#0x110+var_10]
.text:00000000000222F8                 STP             X29, X30, [SP,#0x110+var_s0]
.text:00000000000222FC                 ADD             X29, SP, #0x110
.text:0000000000022300                 MRS             X19, #3, c13, c0, #2
.text:0000000000022304                 STP             Q6, Q7, [SP,#0x110+var_A0]
.text:0000000000022308                 STP             Q4, Q5, [SP,#0x110+var_C0]
.text:000000000002230C                 MOV             X10, #0xFFFFFFFFFFFFFFE0
.text:0000000000022310                 STP             Q2, Q3, [SP,#0x110+var_E0]
.text:0000000000022314                 ADD             X11, SP, #0x110+var_100
.text:0000000000022318                 STP             Q0, Q1, [SP,#0x110+var_100]
.text:000000000002231C                 MOVK            X10, #0xFF80,LSL#32
.text:0000000000022320                 STP             X6, X7, [X29,#var_70]
.text:0000000000022324                 ADD             X11, X11, #0x80
.text:0000000000022328                 STP             X4, X5, [X29,#var_80]
.text:000000000002232C                 SUB             X12, X29, #-var_80
.text:0000000000022330                 LDR             X9, [X19,#0x28]
.text:0000000000022334                 MOV             X8, X3
.text:0000000000022338                 MOV             X3, X1
.text:000000000002233C                 SUB             X5, X29, #-var_60
.text:0000000000022340                 MOV             X1, X2
.text:0000000000022344                 STR             X9, [SP,#0x110+var_108]
.text:0000000000022348                 ADD             X9, X12, #0x20 ; ' '
.text:000000000002234C                 ADD             X12, X29, #0x10
.text:0000000000022350                 STP             X11, X10, [X29,#var_28]
.text:0000000000022354                 SUB             X10, X29, #-var_38
.text:0000000000022358                 MOV             W2, WZR
.text:000000000002235C                 STP             X12, X9, [X29,#var_38]
.text:0000000000022360                 MOV             X4, X8
.text:0000000000022364                 LDP             Q1, Q0, [X10]
.text:0000000000022368                 STP             Q1, Q0, [X29,#var_60]
.text:000000000002236C                 BL              .__vsnprintf_chk
.text:0000000000022370                 LDR             X8, [X19,#0x28]
.text:0000000000022374                 LDR             X9, [SP,#0x110+var_108]
.text:0000000000022378                 CMP             X8, X9
.text:000000000002237C                 B.NE            loc_22390
.text:0000000000022380                 LDP             X29, X30, [SP,#0x110+var_s0]
.text:0000000000022384                 LDP             X28, X19, [SP,#0x110+var_10]
.text:0000000000022388                 ADD             SP, SP, #0x120
.text:000000000002238C                 RET
.text:0000000000022390 ; ---------------------------------------------------------------------------
.text:0000000000022390 loc_22390                               ; CODE XREF: sub_222F0+8C↑j
.text:0000000000022390                 BL              .__stack_chk_fail
.text:0000000000022390 ; } // starts at 222F0
.text:0000000000022390 ; End of function sub_222F0
.text:0000000000022390 ; ---------------------------------------------------------------------------
.text:0000000000022394                 ALIGN 8
.text:0000000000022398 ; =============== S U B R O U T I N E =======================================
.text:0000000000022398 ; Attributes: bp-based frame
.text:0000000000022398 sub_22398                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::prelayoutRenderPassText(void)+2B0↑p
.text:0000000000022398                                         ; drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+CC↓p
.text:0000000000022398 var_20          = -0x20
.text:0000000000022398 var_10          = -0x10
.text:0000000000022398 var_s0          =  0
.text:0000000000022398 ; __unwind {
.text:0000000000022398                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000002239C                 STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000223A0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000223A4                 ADD             X29, SP, #0x20
.text:00000000000223A8                 LDP             X10, X8, [X0]
.text:00000000000223AC                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:00000000000223B4                 MOV             X22, #0xAAAAAAAAAAAAAAAA
.text:00000000000223B8                 SUB             X8, X8, X10
.text:00000000000223BC                 ASR             X8, X8, #3
.text:00000000000223C0                 MUL             X21, X8, X9
.text:00000000000223C4                 MOV             X19, X0
.text:00000000000223C8                 MOVK            X22, #0xAAA,LSL#48
.text:00000000000223CC                 ADD             X8, X21, #1
.text:00000000000223D0                 CMP             X8, X22
.text:00000000000223D4                 B.HI            loc_224F0
.text:00000000000223D8                 LDR             X11, [X19,#0x10]
.text:00000000000223DC                 MOV             X20, X1
.text:00000000000223E0                 SUB             X10, X11, X10
.text:00000000000223E4                 ASR             X10, X10, #3
.text:00000000000223E8                 MUL             X9, X10, X9
.text:00000000000223EC                 MOV             X10, #0x555555555555554
.text:00000000000223F8                 CMP             X9, X10
.text:00000000000223FC                 B.HI            loc_22410
.text:0000000000022400                 LSL             X9, X9, #1
.text:0000000000022404                 CMP             X9, X8
.text:0000000000022408                 CSEL            X22, X8, X9, CC
.text:000000000002240C                 CBZ             X22, loc_224E8
.text:0000000000022410 loc_22410                               ; CODE XREF: sub_22398+64↑j
.text:0000000000022410                 ADD             X8, X22, X22,LSL#1
.text:0000000000022414                 LSL             X0, X8, #3 ; unsigned __int64
.text:0000000000022418                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002241C loc_2241C                               ; CODE XREF: sub_22398+154↓j
.text:000000000002241C                 MOV             W9, #0x18
.text:0000000000022420                 LDR             X13, [X20,#0x10]
.text:0000000000022424                 LDR             Q0, [X20]
.text:0000000000022428                 STP             XZR, XZR, [X20,#8]
.text:000000000002242C                 NOP
.text:0000000000022430                 MADD            X11, X21, X9, X0
.text:0000000000022434                 STR             XZR, [X20]
.text:0000000000022438                 NOP
.text:000000000002243C                 MADD            X9, X22, X9, X0
.text:0000000000022440                 LDP             X8, X12, [X19]
.text:0000000000022444                 ADD             X10, X11, #0x18
.text:0000000000022448                 STR             X13, [X11,#0x10]
.text:000000000002244C                 STR             Q0, [X11]
.text:0000000000022450                 CMP             X12, X8
.text:0000000000022454                 B.EQ            loc_2248C
.text:0000000000022458 loc_22458                               ; CODE XREF: sub_22398+E8↓j
.text:0000000000022458                 LDUR            X13, [X12,#-8]
.text:000000000002245C                 LDUR            Q0, [X12,#-0x18]
.text:0000000000022460                 STUR            X13, [X11,#-8]
.text:0000000000022464                 SUB             X13, X12, #0x18
.text:0000000000022468                 STUR            Q0, [X11,#-0x18]
.text:000000000002246C                 SUB             X11, X11, #0x18
.text:0000000000022470                 STP             XZR, XZR, [X12,#-0x10]
.text:0000000000022474                 CMP             X8, X13
.text:0000000000022478                 STUR            XZR, [X12,#-0x18]
.text:000000000002247C                 MOV             X12, X13
.text:0000000000022480                 B.NE            loc_22458
.text:0000000000022484                 LDP             X20, X8, [X19]
.text:0000000000022488                 B               loc_22490
.text:000000000002248C ; ---------------------------------------------------------------------------
.text:000000000002248C loc_2248C                               ; CODE XREF: sub_22398+BC↑j
.text:000000000002248C                 MOV             X20, X8
.text:0000000000022490 loc_22490                               ; CODE XREF: sub_22398+F0↑j
.text:0000000000022490                 CMP             X8, X20
.text:0000000000022494                 STP             X11, X10, [X19]
.text:0000000000022498                 STR             X9, [X19,#0x10]
.text:000000000002249C                 B.EQ            loc_224C0
.text:00000000000224A0                 MOV             X19, X8
.text:00000000000224A4 loc_224A4                               ; CODE XREF: sub_22398+124↓j
.text:00000000000224A4                 LDRB            W9, [X19,#-0x18]!
.text:00000000000224A8                 TBZ             W9, #0, loc_224B4
.text:00000000000224AC                 LDUR            X0, [X8,#-8] ; void *
.text:00000000000224B0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000224B4 loc_224B4                               ; CODE XREF: sub_22398+110↑j
.text:00000000000224B4                 MOV             X8, X19
.text:00000000000224B8                 CMP             X20, X19
.text:00000000000224BC                 B.NE            loc_224A4
.text:00000000000224C0 loc_224C0                               ; CODE XREF: sub_22398+104↑j
.text:00000000000224C0                 CBZ             X20, loc_224D8
.text:00000000000224C4                 MOV             X0, X20 ; void *
.text:00000000000224C8                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000224CC                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000224D0                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000224D4                 B               ._ZdlPv ; operator delete(void *)
.text:00000000000224D8 ; ---------------------------------------------------------------------------
.text:00000000000224D8 loc_224D8                               ; CODE XREF: sub_22398:loc_224C0↑j
.text:00000000000224D8                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000224DC                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000224E0                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000224E4                 RET
.text:00000000000224E8 ; ---------------------------------------------------------------------------
.text:00000000000224E8 loc_224E8                               ; CODE XREF: sub_22398+74↑j
.text:00000000000224E8                 MOV             X0, XZR
.text:00000000000224EC                 B               loc_2241C
.text:00000000000224F0 ; ---------------------------------------------------------------------------
.text:00000000000224F0 loc_224F0                               ; CODE XREF: sub_22398+3C↑j
.text:00000000000224F0                 MOV             X0, X19
.text:00000000000224F4                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:00000000000224F4 ; } // starts at 22398
.text:00000000000224F4 ; End of function sub_22398
.text:00000000000224F8 ; =============== S U B R O U T I N E =======================================
.text:00000000000224F8 ; Attributes: bp-based frame
.text:00000000000224F8 sub_224F8                               ; CODE XREF: drawer::AnimatedRenderPassDrawer::recalculateTextDrawers(void)+184↑p
.text:00000000000224F8                                         ; drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+260↓p ...
.text:00000000000224F8 var_30          = -0x30
.text:00000000000224F8 var_20          = -0x20
.text:00000000000224F8 var_10          = -0x10
.text:00000000000224F8 var_s0          =  0
.text:00000000000224F8 ; __unwind {
.text:00000000000224F8                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:00000000000224FC                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000022500                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000022504                 ADD             X29, SP, #0x20
.text:0000000000022508                 LDP             X9, X8, [X0]
.text:000000000002250C                 MOV             X19, X0
.text:0000000000022510                 SUB             X8, X8, X9
.text:0000000000022514                 ASR             X21, X8, #3
.text:0000000000022518                 ADD             X8, X21, #1
.text:000000000002251C                 LSR             X10, X8, #0x3D ; '='
.text:0000000000022520                 CBNZ            X10, loc_22608
.text:0000000000022524                 LDR             X10, [X19,#0x10]
.text:0000000000022528                 MOV             X20, X1
.text:000000000002252C                 SUB             X9, X10, X9
.text:0000000000022530                 MOV             X10, #0xFFFFFFFFFFFFFFE
.text:0000000000022534                 CMP             X10, X9,ASR#3
.text:0000000000022538                 B.CC            loc_22558
.text:000000000002253C                 ASR             X9, X9, #2
.text:0000000000022540                 CMP             X9, X8
.text:0000000000022544                 CSEL            X22, X8, X9, CC
.text:0000000000022548                 CBZ             X22, loc_22600
.text:000000000002254C                 LSR             X8, X22, #0x3D ; '='
.text:0000000000022550                 CBZ             X8, loc_2255C
.text:0000000000022554                 BL              .abort
.text:0000000000022558 ; ---------------------------------------------------------------------------
.text:0000000000022558 loc_22558                               ; CODE XREF: sub_224F8+40↑j
.text:0000000000022558                 MOV             X22, #0x1FFFFFFFFFFFFFFF
.text:000000000002255C loc_2255C                               ; CODE XREF: sub_224F8+58↑j
.text:000000000002255C                 LSL             X0, X22, #3 ; unsigned __int64
.text:0000000000022560                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000022564 loc_22564                               ; CODE XREF: sub_224F8+10C↓j
.text:0000000000022564                 ADD             X8, X0, X21,LSL#3
.text:0000000000022568                 LDR             X10, [X20]
.text:000000000002256C                 STR             XZR, [X20]
.text:0000000000022570                 MOV             X9, X8
.text:0000000000022574                 LDP             X21, X11, [X19]
.text:0000000000022578                 STR             X10, [X9],#8
.text:000000000002257C                 ADD             X10, X0, X22,LSL#3
.text:0000000000022580                 CMP             X11, X21
.text:0000000000022584                 B.EQ            loc_225A4
.text:0000000000022588 loc_22588                               ; CODE XREF: sub_224F8+A0↓j
.text:0000000000022588                 LDR             X12, [X11,#-8]!
.text:000000000002258C                 CMP             X21, X11
.text:0000000000022590                 STR             XZR, [X11]
.text:0000000000022594                 STR             X12, [X8,#-8]!
.text:0000000000022598                 B.NE            loc_22588
.text:000000000002259C                 LDP             X20, X21, [X19]
.text:00000000000225A0                 B               loc_225A8
.text:00000000000225A4 ; ---------------------------------------------------------------------------
.text:00000000000225A4 loc_225A4                               ; CODE XREF: sub_224F8+8C↑j
.text:00000000000225A4                 MOV             X20, X21
.text:00000000000225A8 loc_225A8                               ; CODE XREF: sub_224F8+A8↑j
.text:00000000000225A8                 CMP             X21, X20
.text:00000000000225AC                 STP             X8, X9, [X19]
.text:00000000000225B0                 STR             X10, [X19,#0x10]
.text:00000000000225B4                 B.EQ            loc_225D8
.text:00000000000225B8 loc_225B8                               ; CODE XREF: sub_224F8+DC↓j
.text:00000000000225B8                 LDR             X0, [X21,#-8]!
.text:00000000000225BC                 STR             XZR, [X21]
.text:00000000000225C0                 CBZ             X0, loc_225D0
.text:00000000000225C4                 LDR             X8, [X0]
.text:00000000000225C8                 LDR             X8, [X8,#8]
.text:00000000000225CC                 BLR             X8
.text:00000000000225D0 loc_225D0                               ; CODE XREF: sub_224F8+C8↑j
.text:00000000000225D0                 CMP             X20, X21
.text:00000000000225D4                 B.NE            loc_225B8
.text:00000000000225D8 loc_225D8                               ; CODE XREF: sub_224F8+BC↑j
.text:00000000000225D8                 CBZ             X20, loc_225F0
.text:00000000000225DC                 MOV             X0, X20 ; void *
.text:00000000000225E0                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000225E4                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000225E8                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000225EC                 B               ._ZdlPv ; operator delete(void *)
.text:00000000000225F0 ; ---------------------------------------------------------------------------
.text:00000000000225F0 loc_225F0                               ; CODE XREF: sub_224F8:loc_225D8↑j
.text:00000000000225F0                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000225F4                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000225F8                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000225FC                 RET
.text:0000000000022600 ; ---------------------------------------------------------------------------
.text:0000000000022600 loc_22600                               ; CODE XREF: sub_224F8+50↑j
.text:0000000000022600                 MOV             X0, XZR
.text:0000000000022604                 B               loc_22564
.text:0000000000022608 ; ---------------------------------------------------------------------------
.text:0000000000022608 loc_22608                               ; CODE XREF: sub_224F8+28↑j
.text:0000000000022608                 MOV             X0, X19
.text:000000000002260C                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:000000000002260C ; } // starts at 224F8
.text:0000000000022610 loc_22610                               ; DATA XREF: .init_array:00000000000305A8↓o
.text:0000000000022610 ; __unwind {
.text:0000000000022610                 STP             X29, X30, [SP,#0x20+var_30]!
.text:0000000000022614                 MOV             X29, SP
.text:0000000000022618                 ADRP            X8, #unk_31008@PAGE
.text:000000000002261C                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000022620                 LDARB           W8, [X8]
.text:0000000000022624                 TBNZ            W8, #0, loc_22664
.text:0000000000022628                 ADRP            X0, #unk_31008@PAGE
.text:000000000002262C                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000022630                 BL              .__cxa_guard_acquire
.text:0000000000022634                 CBZ             W0, loc_22664
.text:0000000000022638                 ADRP            X1, #qword_31000@PAGE
.text:000000000002263C                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000022640                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:0000000000022644                 ADRP            X2, #off_2F000@PAGE
.text:0000000000022648                 STR             XZR, [X1]
.text:000000000002264C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000022650                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000022654                 BL              .__cxa_atexit
.text:0000000000022658                 ADRP            X0, #unk_31008@PAGE
.text:000000000002265C                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000022660                 BL              .__cxa_guard_release
.text:0000000000022664 loc_22664                               ; CODE XREF: sub_224F8+12C↑j
.text:0000000000022664                                         ; sub_224F8+13C↑j
.text:0000000000022664                 ADRP            X8, #unk_31038@PAGE
.text:0000000000022668                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:000000000002266C                 LDARB           W8, [X8]
.text:0000000000022670                 TBNZ            W8, #0, loc_226AC
.text:0000000000022674                 ADRP            X0, #unk_31038@PAGE
.text:0000000000022678                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000002267C                 BL              .__cxa_guard_acquire
.text:0000000000022680                 CBZ             W0, loc_226AC
.text:0000000000022684                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000022688                 ADRP            X1, #unk_31010@PAGE
.text:000000000002268C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000022690                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000022694                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000022698                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002269C                 BL              .__cxa_atexit
.text:00000000000226A0                 ADRP            X0, #unk_31038@PAGE
.text:00000000000226A4                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000226A8                 BL              .__cxa_guard_release
.text:00000000000226AC loc_226AC                               ; CODE XREF: sub_224F8+178↑j
.text:00000000000226AC                                         ; sub_224F8+188↑j
.text:00000000000226AC                 ADRP            X8, #unk_31058@PAGE
.text:00000000000226B0                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:00000000000226B4                 LDARB           W8, [X8]
.text:00000000000226B8                 TBNZ            W8, #0, loc_226FC
.text:00000000000226BC                 ADRP            X0, #unk_31058@PAGE
.text:00000000000226C0                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:00000000000226C4                 BL              .__cxa_guard_acquire
.text:00000000000226C8                 CBZ             W0, loc_226FC
.text:00000000000226CC                 ADRP            X1, #unk_31040@PAGE
.text:00000000000226D0                 ADRP            X0, #loc_1C078@PAGE
.text:00000000000226D4                 ADRP            X2, #off_2F000@PAGE
.text:00000000000226D8                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:00000000000226DC                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:00000000000226E0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000226E4                 STP             XZR, XZR, [X1]
.text:00000000000226E8                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:00000000000226EC                 BL              .__cxa_atexit
.text:00000000000226F0                 ADRP            X0, #unk_31058@PAGE
.text:00000000000226F4                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:00000000000226F8                 BL              .__cxa_guard_release
.text:00000000000226FC loc_226FC                               ; CODE XREF: sub_224F8+1C0↑j
.text:00000000000226FC                                         ; sub_224F8+1D0↑j
.text:00000000000226FC                 ADRP            X8, #unk_31078@PAGE
.text:0000000000022700                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:0000000000022704                 LDARB           W8, [X8]
.text:0000000000022708                 TBNZ            W8, #0, loc_22750
.text:000000000002270C                 ADRP            X0, #unk_31078@PAGE
.text:0000000000022710                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000022714                 BL              .__cxa_guard_acquire
.text:0000000000022718                 CBZ             W0, loc_22750
.text:000000000002271C                 ADRP            X1, #unk_31060@PAGE
.text:0000000000022720                 ADRP            X0, #loc_1C100@PAGE
.text:0000000000022724                 ADRP            X2, #off_2F000@PAGE
.text:0000000000022728                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:000000000002272C                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000022730                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000022734                 STP             XZR, XZR, [X1]
.text:0000000000022738                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:000000000002273C                 BL              .__cxa_atexit
.text:0000000000022740                 ADRP            X0, #unk_31078@PAGE
.text:0000000000022744                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000022748                 LDP             X29, X30, [SP+0x30+var_30],#0x10
.text:000000000002274C                 B               .__cxa_guard_release
.text:0000000000022750 ; ---------------------------------------------------------------------------
.text:0000000000022750 loc_22750                               ; CODE XREF: sub_224F8+210↑j
.text:0000000000022750                                         ; sub_224F8+220↑j
.text:0000000000022750                 LDP             X29, X30, [SP+0x30+var_30],#0x10
.text:0000000000022754                 RET
.text:0000000000022754 ; } // starts at 22610
.text:0000000000022754 ; End of function sub_224F8
.text:0000000000022758 ; =============== S U B R O U T I N E =======================================
.text:0000000000022758 ; drawer::FixedGraphicDrawer::FixedGraphicDrawer(std::__1::unique_ptr<drawer::MeshDrawer, std::__1::default_delete<drawer::MeshDrawer>>, std::__1::unique_ptr<drawer::MeshDrawer, std::__1::default_delete<drawer::MeshDrawer>>, std::__1::unique_ptr<drawer::RectDrawer, std::__1::default_delete<drawer::RectDrawer>>, std::__1::unique_ptr<drawer::GridDrawer, std::__1::default_delete<drawer::GridDrawer>>, std::__1::vector<core::ShaderActivity, std::__1::allocator<core::ShaderActivity>> const&, long double, long double)
.text:0000000000022758                 EXPORT _ZN6drawer18FixedGraphicDrawerC2ENSt3__110unique_ptrINS_10MeshDrawerENS1_14default_deleteIS3_EEEES6_NS2_INS_10RectDrawerENS4_IS7_EEEENS2_INS_10GridDrawerENS4_ISA_EEEERKNS1_6vectorIN4core14ShaderActivityENS1_9allocatorISF_EEEEee
.text:0000000000022758 _ZN6drawer18FixedGraphicDrawerC2ENSt3__110unique_ptrINS_10MeshDrawerENS1_14default_deleteIS3_EEEES6_NS2_INS_10RectDrawerENS4_IS7_EEEENS2_INS_10GridDrawerENS4_ISA_EEEERKNS1_6vectorIN4core14ShaderActivityENS1_9allocatorISF_EEEEee
.text:0000000000022758                                         ; DATA XREF: LOAD:0000000000001620↑o
.text:0000000000022758                                         ; LOAD:0000000000001BD8↑o
.text:0000000000022758 ; __unwind {
.text:0000000000022758                 MOVI            V2.2D, #0
.text:000000000002275C                 ADRP            X8, #_ZTVN6drawer18FixedGraphicDrawerE_ptr@PAGE
.text:0000000000022760                 STR             XZR, [X0,#0x30]
.text:0000000000022764                 MOV             W9, #0xB
.text:0000000000022768                 MOV             W10, #1
.text:000000000002276C                 STR             Q2, [X0,#0x10]
.text:0000000000022770                 LDR             X8, [X8,#_ZTVN6drawer18FixedGraphicDrawerE_ptr@PAGEOFF]
.text:0000000000022774                 STR             W9, [X0,#8]
.text:0000000000022778                 STR             Q2, [X0,#0x20]
.text:000000000002277C                 STRB            W10, [X0,#0x38]
.text:0000000000022780                 ADD             X8, X8, #0x10
.text:0000000000022784                 STR             X8, [X0]
.text:0000000000022788                 LDR             X8, [X1]
.text:000000000002278C                 STR             XZR, [X1]
.text:0000000000022790                 MOV             X1, X5
.text:0000000000022794                 STR             X8, [X0,#0x40]
.text:0000000000022798                 LDR             X8, [X2]
.text:000000000002279C                 STR             XZR, [X2]
.text:00000000000227A0                 STR             X8, [X0,#0x48]
.text:00000000000227A4                 LDR             X8, [X3]
.text:00000000000227A8                 STR             XZR, [X3]
.text:00000000000227AC                 STR             X8, [X0,#0x50]
.text:00000000000227B0                 LDR             X8, [X4]
.text:00000000000227B4                 STR             XZR, [X4]
.text:00000000000227B8                 STRB            W10, [X0,#0x60]
.text:00000000000227BC                 STR             X8, [X0,#0x58]
.text:00000000000227C0                 B               ._ZN6drawer18FixedGraphicDrawer7setDataERKNSt3__16vectorIN4core14ShaderActivityENS1_9allocatorIS4_EEEEee ; drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)
.text:00000000000227C0 ; } // starts at 22758
.text:00000000000227C0 ; End of function drawer::FixedGraphicDrawer::FixedGraphicDrawer(std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)
.text:00000000000227C0 ; ---------------------------------------------------------------------------
.text:00000000000227C4                 ALIGN 8
.text:00000000000227C8 ; =============== S U B R O U T I N E =======================================
.text:00000000000227C8 ; Attributes: bp-based frame
.text:00000000000227C8 ; drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity, std::__1::allocator<core::ShaderActivity>> const&, long double, long double)
.text:00000000000227C8                 EXPORT _ZN6drawer18FixedGraphicDrawer7setDataERKNSt3__16vectorIN4core14ShaderActivityENS1_9allocatorIS4_EEEEee
.text:00000000000227C8 _ZN6drawer18FixedGraphicDrawer7setDataERKNSt3__16vectorIN4core14ShaderActivityENS1_9allocatorIS4_EEEEee
.text:00000000000227C8                                         ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+C↓j
.text:00000000000227C8                                         ; DATA XREF: LOAD:0000000000001878↑o ...
.text:00000000000227C8 var_A8          = -0xA8
.text:00000000000227C8 var_A0          = -0xA0
.text:00000000000227C8 var_90          = -0x90
.text:00000000000227C8 var_80          = -0x80
.text:00000000000227C8 var_78          = -0x78
.text:00000000000227C8 var_70          = -0x70
.text:00000000000227C8 var_60          = -0x60
.text:00000000000227C8 var_50          = -0x50
.text:00000000000227C8 var_40          = -0x40
.text:00000000000227C8 var_30          = -0x30
.text:00000000000227C8 var_20          = -0x20
.text:00000000000227C8 var_10          = -0x10
.text:00000000000227C8 var_s0          =  0
.text:00000000000227C8 ; __unwind {
.text:00000000000227C8                 SUB             SP, SP, #0xC0
.text:00000000000227CC                 STP             D11, D10, [SP,#0xB0+var_70]
.text:00000000000227D0                 STP             D9, D8, [SP,#0xB0+var_60]
.text:00000000000227D4                 STP             X28, X27, [SP,#0xB0+var_50]
.text:00000000000227D8                 STP             X26, X25, [SP,#0xB0+var_40]
.text:00000000000227DC                 STP             X24, X23, [SP,#0xB0+var_30]
.text:00000000000227E0                 STP             X22, X21, [SP,#0xB0+var_20]
.text:00000000000227E4                 STP             X20, X19, [SP,#0xB0+var_10]
.text:00000000000227E8                 STP             X29, X30, [SP,#0xB0+var_s0]
.text:00000000000227EC                 ADD             X29, SP, #0xB0
.text:00000000000227F0                 STP             Q1, Q0, [SP,#0xB0+var_A0]
.text:00000000000227F4                 MRS             X26, #3, c13, c0, #2
.text:00000000000227F8                 LDR             X8, [X26,#0x28]
.text:00000000000227FC                 MOV             X19, X0
.text:0000000000022800                 MOV             X20, X1
.text:0000000000022804                 STR             X8, [SP,#0xB0+var_78]
.text:0000000000022808                 LDR             X0, [X0,#0x40]
.text:000000000002280C                 LDR             X8, [X0]
.text:0000000000022810                 LDR             X8, [X8,#0x20]
.text:0000000000022814                 BLR             X8
.text:0000000000022818                 LDR             X0, [X19,#0x48]
.text:000000000002281C                 LDR             X8, [X0]
.text:0000000000022820                 LDR             X8, [X8,#0x20]
.text:0000000000022824                 BLR             X8
.text:0000000000022828                 LDP             X8, X9, [X20]
.text:000000000002282C                 SUBS            X22, X9, X8
.text:0000000000022830                 CSET            W8, EQ
.text:0000000000022834                 STRB            W8, [X19,#0x60]
.text:0000000000022838                 CBZ             X22, loc_22A08
.text:000000000002283C                 LDR             X25, [X20]
.text:0000000000022840                 MOV             X23, XZR
.text:0000000000022844                 ASR             X21, X22, #5
.text:0000000000022848                 STR             X26, [SP,#0xB0+var_A8]
.text:000000000002284C loc_2284C                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+A4↓j
.text:000000000002284C                 LSL             X8, X23, #5
.text:0000000000022850                 LDR             Q1, [SP,#0xB0+var_90]
.text:0000000000022854                 LDR             Q0, [X25,X8]
.text:0000000000022858                 BL              .__lttf2
.text:000000000002285C                 CMP             W0, #0
.text:0000000000022860                 B.GE            loc_2287C
.text:0000000000022864                 ADD             W23, W23, #1
.text:0000000000022868                 CMP             X21, X23
.text:000000000002286C                 B.HI            loc_2284C
.text:0000000000022870                 MOV             W8, W23
.text:0000000000022874                 STR             X8, [SP,#0xB0+var_90]
.text:0000000000022878                 B               loc_22880
.text:000000000002287C ; ---------------------------------------------------------------------------
.text:000000000002287C loc_2287C                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+98↑j
.text:000000000002287C                 STR             X23, [SP,#0xB0+var_90]
.text:0000000000022880 loc_22880                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+B0↑j
.text:0000000000022880                 LSL             X8, X22, #0x1B
.text:0000000000022884                 MOV             X26, #0xFFFFFFFF00000000
.text:0000000000022888                 ADD             X28, X8, X26
.text:000000000002288C                 ADD             X8, X25, X8,ASR#27
.text:0000000000022890                 SUB             X21, X8, #0x20 ; ' '
.text:0000000000022894                 SBFX            X22, X22, #5, #0x20 ; ' '
.text:0000000000022898 loc_22898                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+F4↓j
.text:0000000000022898                 MOV             X27, X22
.text:000000000002289C                 MOV             X24, X28
.text:00000000000228A0                 SUBS            X22, X22, #1
.text:00000000000228A4                 B.LT            loc_228C0
.text:00000000000228A8                 LDR             Q1, [SP,#0xB0+var_A0]
.text:00000000000228AC                 ADD             X28, X24, X26
.text:00000000000228B0                 LDR             Q0, [X21],#-0x20
.text:00000000000228B4                 BL              .__gttf2
.text:00000000000228B8                 CMP             W0, #0
.text:00000000000228BC                 B.GT            loc_22898
.text:00000000000228C0 loc_228C0                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+DC↑j
.text:00000000000228C0                 LDR             X8, [SP,#0xB0+var_90]
.text:00000000000228C4                 NEG             W9, W23
.text:00000000000228C8                 ADD             X21, X9, X27
.text:00000000000228CC                 LSL             X22, X8, #5
.text:00000000000228D0                 ASR             X8, X24, #0x1B
.text:00000000000228D4                 LDR             Q1, [X25,X22]
.text:00000000000228D8                 LDR             Q0, [X25,X8]
.text:00000000000228DC                 STR             Q1, [SP,#0xB0+var_90]
.text:00000000000228E0                 BL              .__subtf3
.text:00000000000228E4                 LDR             X26, [SP,#0xB0+var_A8]
.text:00000000000228E8                 STR             Q0, [SP,#0xB0+var_A0]
.text:00000000000228EC                 CBZ             W21, loc_22A08
.text:00000000000228F0                 FMOV            S8, #-1.0
.text:00000000000228F4                 AND             X8, X21, #0xFFFFFFFF
.text:00000000000228F8                 FMOV            S9, #1.0
.text:00000000000228FC                 SUB             X23, X8, #1
.text:0000000000022900                 MOV             W24, #0x3F800000
.text:0000000000022904                 B               loc_22914
.text:0000000000022908 ; ---------------------------------------------------------------------------
.text:0000000000022908 loc_22908                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+228↓j
.text:0000000000022908                                         ; drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+23C↓j
.text:0000000000022908                 LDR             X25, [X20]
.text:000000000002290C                 SUB             X23, X23, #1
.text:0000000000022910                 ADD             X22, X22, #0x20 ; ' '
.text:0000000000022914 loc_22914                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+13C↑j
.text:0000000000022914                 ADD             X21, X25, X22
.text:0000000000022918                 LDR             Q1, [SP,#0xB0+var_90]
.text:000000000002291C                 LDR             Q0, [X21]
.text:0000000000022920                 BL              .__subtf3
.text:0000000000022924                 LDR             Q1, [SP,#0xB0+var_A0]
.text:0000000000022928                 BL              .__divtf3
.text:000000000002292C                 BL              .__trunctfsf2
.text:0000000000022930                 LDR             S1, [X21,#0x10]
.text:0000000000022934                 FADD            S0, S0, S0
.text:0000000000022938                 LDR             X8, [X19,#0x40]
.text:000000000002293C                 FADD            S1, S1, S1
.text:0000000000022940                 LDP             X9, X10, [X8,#0x48]
.text:0000000000022944                 FADD            S0, S0, S8
.text:0000000000022948                 CMP             X9, X10
.text:000000000002294C                 FSUB            S1, S9, S1
.text:0000000000022950                 FMAX            S0, S0, S8
.text:0000000000022954                 FMAX            S1, S1, S8
.text:0000000000022958                 FMIN            S10, S0, S9
.text:000000000002295C                 FMIN            S11, S1, S9
.text:0000000000022960                 STP             S10, S11, [SP,#0xB0+var_80]
.text:0000000000022964                 B.EQ            loc_22980
.text:0000000000022968                 LDR             X10, [SP,#0xB0+var_80]
.text:000000000002296C                 STR             X10, [X9]
.text:0000000000022970                 LDR             X9, [X8,#0x48]
.text:0000000000022974                 ADD             X9, X9, #8
.text:0000000000022978                 STR             X9, [X8,#0x48]
.text:000000000002297C                 B               loc_2298C
.text:0000000000022980 ; ---------------------------------------------------------------------------
.text:0000000000022980 loc_22980                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+19C↑j
.text:0000000000022980                 ADD             X0, X8, #0x40 ; '@'
.text:0000000000022984                 ADD             X1, SP, #0xB0+var_80
.text:0000000000022988                 BL              loc_1CAB0
.text:000000000002298C loc_2298C                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+1B4↑j
.text:000000000002298C                 LDR             X8, [X19,#0x40]
.text:0000000000022990                 LDP             X9, X10, [X8,#0x48]
.text:0000000000022994                 STR             S10, [SP,#0xB0+var_80]
.text:0000000000022998                 STR             W24, [SP,#0xB0+var_80+4]
.text:000000000002299C                 CMP             X9, X10
.text:00000000000229A0                 B.EQ            loc_229BC
.text:00000000000229A4                 LDR             X10, [SP,#0xB0+var_80]
.text:00000000000229A8                 STR             X10, [X9]
.text:00000000000229AC                 LDR             X9, [X8,#0x48]
.text:00000000000229B0                 ADD             X9, X9, #8
.text:00000000000229B4                 STR             X9, [X8,#0x48]
.text:00000000000229B8                 B               loc_229C8
.text:00000000000229BC ; ---------------------------------------------------------------------------
.text:00000000000229BC loc_229BC                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+1D8↑j
.text:00000000000229BC                 ADD             X0, X8, #0x40 ; '@'
.text:00000000000229C0                 ADD             X1, SP, #0xB0+var_80
.text:00000000000229C4                 BL              loc_1CAB0
.text:00000000000229C8 loc_229C8                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+1F0↑j
.text:00000000000229C8                 LDR             X8, [X19,#0x48]
.text:00000000000229CC                 LDP             X9, X10, [X8,#0x48]
.text:00000000000229D0                 STP             S10, S11, [SP,#0xB0+var_80]
.text:00000000000229D4                 CMP             X9, X10
.text:00000000000229D8                 B.EQ            loc_229F8
.text:00000000000229DC                 LDR             X10, [SP,#0xB0+var_80]
.text:00000000000229E0                 STR             X10, [X9]
.text:00000000000229E4                 LDR             X9, [X8,#0x48]
.text:00000000000229E8                 ADD             X9, X9, #8
.text:00000000000229EC                 STR             X9, [X8,#0x48]
.text:00000000000229F0                 CBNZ            X23, loc_22908
.text:00000000000229F4                 B               loc_22A08
.text:00000000000229F8 ; ---------------------------------------------------------------------------
.text:00000000000229F8 loc_229F8                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+210↑j
.text:00000000000229F8                 ADD             X0, X8, #0x40 ; '@'
.text:00000000000229FC                 ADD             X1, SP, #0xB0+var_80
.text:0000000000022A00                 BL              loc_1CAB0
.text:0000000000022A04                 CBNZ            X23, loc_22908
.text:0000000000022A08 loc_22A08                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+70↑j
.text:0000000000022A08                                         ; drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+124↑j ...
.text:0000000000022A08                 LDR             X8, [X26,#0x28]
.text:0000000000022A0C                 LDR             X9, [SP,#0xB0+var_78]
.text:0000000000022A10                 CMP             X8, X9
.text:0000000000022A14                 B.NE            loc_22A40
.text:0000000000022A18                 LDP             X29, X30, [SP,#0xB0+var_s0]
.text:0000000000022A1C                 LDP             X20, X19, [SP,#0xB0+var_10]
.text:0000000000022A20                 LDP             X22, X21, [SP,#0xB0+var_20]
.text:0000000000022A24                 LDP             X24, X23, [SP,#0xB0+var_30]
.text:0000000000022A28                 LDP             X26, X25, [SP,#0xB0+var_40]
.text:0000000000022A2C                 LDP             X28, X27, [SP,#0xB0+var_50]
.text:0000000000022A30                 LDP             D9, D8, [SP,#0xB0+var_60]
.text:0000000000022A34                 LDP             D11, D10, [SP,#0xB0+var_70]
.text:0000000000022A38                 ADD             SP, SP, #0xC0
.text:0000000000022A3C                 RET
.text:0000000000022A40 ; ---------------------------------------------------------------------------
.text:0000000000022A40 loc_22A40                               ; CODE XREF: drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)+24C↑j
.text:0000000000022A40                 BL              .__stack_chk_fail
.text:0000000000022A40 ; } // starts at 227C8
.text:0000000000022A40 ; End of function drawer::FixedGraphicDrawer::setData(std::__1::vector<core::ShaderActivity,std::__1::allocator<core::ShaderActivity>> const&,long double,long double)
.text:0000000000022A40 ; ---------------------------------------------------------------------------
.text:0000000000022A44                 ALIGN 8
.text:0000000000022A48 ; =============== S U B R O U T I N E =======================================
.text:0000000000022A48 ; drawer::FixedGraphicDrawer::setColor(glm::tvec4<float, (glm::precision)0> const&)
.text:0000000000022A48                 EXPORT _ZN6drawer18FixedGraphicDrawer8setColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000022A48 _ZN6drawer18FixedGraphicDrawer8setColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000022A48                                         ; DATA XREF: LOAD:0000000000001A10↑o
.text:0000000000022A48 ; __unwind {
.text:0000000000022A48                 LDR             Q0, [X1]
.text:0000000000022A4C                 MOV             W8, #0x3F800000
.text:0000000000022A50                 LDR             X9, [X0,#0x40]
.text:0000000000022A54                 STUR            Q0, [X9,#0x58]
.text:0000000000022A58                 LDR             X9, [X0,#0x48]
.text:0000000000022A5C                 LDR             X10, [X1]
.text:0000000000022A60                 LDR             W11, [X1,#8]
.text:0000000000022A64                 STR             X10, [X9,#0x58]
.text:0000000000022A68                 STP             W11, W8, [X9,#0x60]
.text:0000000000022A6C                 RET
.text:0000000000022A6C ; } // starts at 22A48
.text:0000000000022A6C ; End of function drawer::FixedGraphicDrawer::setColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000022A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000022A70 ; drawer::FixedGraphicDrawer::setGridColor(glm::tvec4<float, (glm::precision)0> const&)
.text:0000000000022A70                 EXPORT _ZN6drawer18FixedGraphicDrawer12setGridColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000022A70 _ZN6drawer18FixedGraphicDrawer12setGridColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000022A70                                         ; DATA XREF: LOAD:0000000000000F18↑o
.text:0000000000022A70 ; __unwind {
.text:0000000000022A70                 LDR             X8, [X0,#0x58]
.text:0000000000022A74                 LDR             Q0, [X1]
.text:0000000000022A78                 LDR             X8, [X8,#0x40]
.text:0000000000022A7C                 STUR            Q0, [X8,#0x58]
.text:0000000000022A80                 RET
.text:0000000000022A80 ; } // starts at 22A70
.text:0000000000022A80 ; End of function drawer::FixedGraphicDrawer::setGridColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000022A80 ; ---------------------------------------------------------------------------
.text:0000000000022A84                 ALIGN 8
.text:0000000000022A88 ; =============== S U B R O U T I N E =======================================
.text:0000000000022A88 ; drawer::FixedGraphicDrawer::setBackgroundColor(glm::tvec4<float, (glm::precision)0> const&)
.text:0000000000022A88                 EXPORT _ZN6drawer18FixedGraphicDrawer18setBackgroundColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000022A88 _ZN6drawer18FixedGraphicDrawer18setBackgroundColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000022A88                                         ; DATA XREF: LOAD:0000000000001AD0↑o
.text:0000000000022A88 ; __unwind {
.text:0000000000022A88                 LDR             Q0, [X1]
.text:0000000000022A8C                 LDR             X8, [X0,#0x50]
.text:0000000000022A90                 STUR            Q0, [X8,#0x3C]
.text:0000000000022A94                 RET
.text:0000000000022A94 ; } // starts at 22A88
.text:0000000000022A94 ; End of function drawer::FixedGraphicDrawer::setBackgroundColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000022A98 ; =============== S U B R O U T I N E =======================================
.text:0000000000022A98 ; Attributes: bp-based frame
.text:0000000000022A98 ; drawer *__fastcall drawer::FixedGraphicDrawer::draw(drawer::FixedGraphicDrawer *__hidden this)
.text:0000000000022A98                 EXPORT _ZN6drawer18FixedGraphicDrawer4drawEv
.text:0000000000022A98 _ZN6drawer18FixedGraphicDrawer4drawEv   ; DATA XREF: LOAD:0000000000001AE8↑o
.text:0000000000022A98                                         ; .data.rel.ro:0000000000030360↓o
.text:0000000000022A98 var_10          = -0x10
.text:0000000000022A98 var_s0          =  0
.text:0000000000022A98 ; __unwind {
.text:0000000000022A98                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000022A9C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022AA0                 ADD             X29, SP, #0x10
.text:0000000000022AA4                 LDRB            W8, [X0,#0x60]
.text:0000000000022AA8                 CBZ             W8, loc_22AB8
.text:0000000000022AAC loc_22AAC                               ; CODE XREF: drawer::FixedGraphicDrawer::draw(void)+78↓j
.text:0000000000022AAC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022AB0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000022AB4                 RET
.text:0000000000022AB8 ; ---------------------------------------------------------------------------
.text:0000000000022AB8 loc_22AB8                               ; CODE XREF: drawer::FixedGraphicDrawer::draw(void)+10↑j
.text:0000000000022AB8                 LDR             X8, [X0,#0x50]
.text:0000000000022ABC                 MOV             X19, X0
.text:0000000000022AC0                 LDR             X9, [X0,#0x18]
.text:0000000000022AC4                 STR             X9, [X8,#0x18]
.text:0000000000022AC8                 LDR             X9, [X0,#0x20]
.text:0000000000022ACC                 STR             X9, [X8,#0x20]
.text:0000000000022AD0                 LDR             X0, [X0,#0x50]
.text:0000000000022AD4                 LDR             X8, [X0]
.text:0000000000022AD8                 LDR             X8, [X8,#0x10]
.text:0000000000022ADC                 BLR             X8
.text:0000000000022AE0                 LDR             X8, [X19,#0x58]
.text:0000000000022AE4                 LDR             X9, [X19,#0x18]
.text:0000000000022AE8                 STR             X9, [X8,#0x18]
.text:0000000000022AEC                 LDR             X9, [X19,#0x20]
.text:0000000000022AF0                 STR             X9, [X8,#0x20]
.text:0000000000022AF4                 LDR             X0, [X19,#0x58]
.text:0000000000022AF8                 LDR             X8, [X0]
.text:0000000000022AFC                 LDR             X8, [X8,#0x10]
.text:0000000000022B00                 BLR             X8
.text:0000000000022B04                 LDR             X8, [X19,#0x40]
.text:0000000000022B08                 LDP             X9, X10, [X8,#0x40]
.text:0000000000022B0C                 CMP             X9, X10
.text:0000000000022B10                 B.EQ            loc_22AAC
.text:0000000000022B14                 LDR             X9, [X19,#0x18]
.text:0000000000022B18                 STR             X9, [X8,#0x18]
.text:0000000000022B1C                 LDR             X9, [X19,#0x20]
.text:0000000000022B20                 STR             X9, [X8,#0x20]
.text:0000000000022B24                 LDR             X0, [X19,#0x40]
.text:0000000000022B28                 LDR             X8, [X0]
.text:0000000000022B2C                 LDR             X8, [X8,#0x10]
.text:0000000000022B30                 BLR             X8
.text:0000000000022B34                 LDR             X8, [X19,#0x48]
.text:0000000000022B38                 LDR             X9, [X19,#0x18]
.text:0000000000022B3C                 STR             X9, [X8,#0x18]
.text:0000000000022B40                 LDR             X9, [X19,#0x20]
.text:0000000000022B44                 STR             X9, [X8,#0x20]
.text:0000000000022B48                 LDR             X0, [X19,#0x48]
.text:0000000000022B4C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022B50                 LDR             X8, [X0]
.text:0000000000022B54                 LDR             X1, [X8,#0x10]
.text:0000000000022B58                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000022B5C                 BR              X1
.text:0000000000022B5C ; } // starts at 22A98
.text:0000000000022B5C ; End of function drawer::FixedGraphicDrawer::draw(void)
.text:0000000000022B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000022B60 ; __int64 __fastcall drawer::FixedGraphicDrawer::drawBackground(drawer::FixedGraphicDrawer *__hidden this)
.text:0000000000022B60                 EXPORT _ZN6drawer18FixedGraphicDrawer14drawBackgroundEv
.text:0000000000022B60 _ZN6drawer18FixedGraphicDrawer14drawBackgroundEv
.text:0000000000022B60                                         ; DATA XREF: LOAD:0000000000000F78↑o
.text:0000000000022B60 ; __unwind {
.text:0000000000022B60                 LDR             X8, [X0,#0x50]
.text:0000000000022B64                 LDR             X9, [X0,#0x18]
.text:0000000000022B68                 STR             X9, [X8,#0x18]
.text:0000000000022B6C                 LDR             X9, [X0,#0x20]
.text:0000000000022B70                 STR             X9, [X8,#0x20]
.text:0000000000022B74                 LDR             X0, [X0,#0x50]
.text:0000000000022B78                 LDR             X8, [X0]
.text:0000000000022B7C                 LDR             X1, [X8,#0x10]
.text:0000000000022B80                 BR              X1
.text:0000000000022B80 ; } // starts at 22B60
.text:0000000000022B80 ; End of function drawer::FixedGraphicDrawer::drawBackground(void)
.text:0000000000022B80 ; ---------------------------------------------------------------------------
.text:0000000000022B84                 ALIGN 8
.text:0000000000022B88 ; =============== S U B R O U T I N E =======================================
.text:0000000000022B88 ; __int64 __fastcall drawer::FixedGraphicDrawer::drawGrid(drawer::FixedGraphicDrawer *__hidden this)
.text:0000000000022B88                 EXPORT _ZN6drawer18FixedGraphicDrawer8drawGridEv
.text:0000000000022B88 _ZN6drawer18FixedGraphicDrawer8drawGridEv
.text:0000000000022B88                                         ; DATA XREF: LOAD:00000000000014D0↑o
.text:0000000000022B88 ; __unwind {
.text:0000000000022B88                 LDR             X8, [X0,#0x58]
.text:0000000000022B8C                 LDR             X9, [X0,#0x18]
.text:0000000000022B90                 STR             X9, [X8,#0x18]
.text:0000000000022B94                 LDR             X9, [X0,#0x20]
.text:0000000000022B98                 STR             X9, [X8,#0x20]
.text:0000000000022B9C                 LDR             X0, [X0,#0x58]
.text:0000000000022BA0                 LDR             X8, [X0]
.text:0000000000022BA4                 LDR             X1, [X8,#0x10]
.text:0000000000022BA8                 BR              X1
.text:0000000000022BA8 ; } // starts at 22B88
.text:0000000000022BA8 ; End of function drawer::FixedGraphicDrawer::drawGrid(void)
.text:0000000000022BA8 ; ---------------------------------------------------------------------------
.text:0000000000022BAC                 ALIGN 0x10
.text:0000000000022BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000022BB0 ; __int64 __fastcall drawer::FixedGraphicDrawer::drawGraphic(drawer::FixedGraphicDrawer *__hidden this)
.text:0000000000022BB0                 EXPORT _ZN6drawer18FixedGraphicDrawer11drawGraphicEv
.text:0000000000022BB0 _ZN6drawer18FixedGraphicDrawer11drawGraphicEv
.text:0000000000022BB0                                         ; DATA XREF: LOAD:0000000000001998↑o
.text:0000000000022BB0 var_20          = -0x20
.text:0000000000022BB0 var_10          = -0x10
.text:0000000000022BB0 ; __unwind {
.text:0000000000022BB0                 LDR             X8, [X0,#0x40]
.text:0000000000022BB4                 LDP             X9, X10, [X8,#0x40]
.text:0000000000022BB8                 CMP             X9, X10
.text:0000000000022BBC                 B.EQ            locret_22C1C
.text:0000000000022BC0                 STR             X19, [SP,#var_20]!
.text:0000000000022BC4                 STP             X29, X30, [SP,#0x20+var_10]
.text:0000000000022BC8                 ADD             X29, SP, #0x20+var_10
.text:0000000000022BCC                 LDR             X9, [X0,#0x18]
.text:0000000000022BD0                 MOV             X19, X0
.text:0000000000022BD4                 STR             X9, [X8,#0x18]
.text:0000000000022BD8                 LDR             X9, [X0,#0x20]
.text:0000000000022BDC                 STR             X9, [X8,#0x20]
.text:0000000000022BE0                 LDR             X0, [X0,#0x40]
.text:0000000000022BE4                 LDR             X8, [X0]
.text:0000000000022BE8                 LDR             X8, [X8,#0x10]
.text:0000000000022BEC                 BLR             X8
.text:0000000000022BF0                 LDR             X8, [X19,#0x48]
.text:0000000000022BF4                 LDR             X9, [X19,#0x18]
.text:0000000000022BF8                 STR             X9, [X8,#0x18]
.text:0000000000022BFC                 LDR             X9, [X19,#0x20]
.text:0000000000022C00                 STR             X9, [X8,#0x20]
.text:0000000000022C04                 LDR             X0, [X19,#0x48]
.text:0000000000022C08                 LDP             X29, X30, [SP,#0x20+var_10]
.text:0000000000022C0C                 LDR             X8, [X0]
.text:0000000000022C10                 LDR             X1, [X8,#0x10]
.text:0000000000022C14                 LDR             X19, [SP+0x20+var_20],#0x20
.text:0000000000022C18                 BR              X1
.text:0000000000022C1C ; ---------------------------------------------------------------------------
.text:0000000000022C1C locret_22C1C                            ; CODE XREF: drawer::FixedGraphicDrawer::drawGraphic(void)+C↑j
.text:0000000000022C1C                 RET
.text:0000000000022C1C ; } // starts at 22BB0
.text:0000000000022C1C ; End of function drawer::FixedGraphicDrawer::drawGraphic(void)
.text:0000000000022C20 ; ---------------------------------------------------------------------------
.text:0000000000022C20 ; __unwind {
.text:0000000000022C20                 STR             X19, [SP,#-0x20]!
.text:0000000000022C24                 STP             X29, X30, [SP,#0x10]
.text:0000000000022C28                 ADD             X29, SP, #0x10
.text:0000000000022C2C                 ADRP            X8, #_ZTVN6drawer18FixedGraphicDrawerE_ptr@PAGE
.text:0000000000022C30                 MOV             X19, X0
.text:0000000000022C34                 LDR             X8, [X8,#_ZTVN6drawer18FixedGraphicDrawerE_ptr@PAGEOFF]
.text:0000000000022C38                 LDR             X0, [X0,#0x58]
.text:0000000000022C3C                 STR             XZR, [X19,#0x58]
.text:0000000000022C40                 ADD             X8, X8, #0x10
.text:0000000000022C44                 STR             X8, [X19]
.text:0000000000022C48                 CBZ             X0, loc_22C58
.text:0000000000022C4C                 LDR             X8, [X0]
.text:0000000000022C50                 LDR             X8, [X8,#8]
.text:0000000000022C54                 BLR             X8
.text:0000000000022C58 loc_22C58                               ; CODE XREF: .text:0000000000022C48↑j
.text:0000000000022C58                 LDR             X0, [X19,#0x50]
.text:0000000000022C5C                 STR             XZR, [X19,#0x50]
.text:0000000000022C60                 CBZ             X0, loc_22C70
.text:0000000000022C64                 LDR             X8, [X0]
.text:0000000000022C68                 LDR             X8, [X8,#8]
.text:0000000000022C6C                 BLR             X8
.text:0000000000022C70 loc_22C70                               ; CODE XREF: .text:0000000000022C60↑j
.text:0000000000022C70                 LDR             X0, [X19,#0x48]
.text:0000000000022C74                 STR             XZR, [X19,#0x48]
.text:0000000000022C78                 CBZ             X0, loc_22C88
.text:0000000000022C7C                 LDR             X8, [X0]
.text:0000000000022C80                 LDR             X8, [X8,#8]
.text:0000000000022C84                 BLR             X8
.text:0000000000022C88 loc_22C88                               ; CODE XREF: .text:0000000000022C78↑j
.text:0000000000022C88                 LDR             X0, [X19,#0x40]
.text:0000000000022C8C                 STR             XZR, [X19,#0x40]
.text:0000000000022C90                 CBZ             X0, loc_22CA8
.text:0000000000022C94                 LDR             X8, [X0]
.text:0000000000022C98                 LDP             X29, X30, [SP,#0x10]
.text:0000000000022C9C                 LDR             X1, [X8,#8]
.text:0000000000022CA0                 LDR             X19, [SP],#0x20
.text:0000000000022CA4                 BR              X1
.text:0000000000022CA8 ; ---------------------------------------------------------------------------
.text:0000000000022CA8 loc_22CA8                               ; CODE XREF: .text:0000000000022C90↑j
.text:0000000000022CA8                 LDP             X29, X30, [SP,#0x10]
.text:0000000000022CAC                 LDR             X19, [SP],#0x20
.text:0000000000022CB0                 RET
.text:0000000000022CB0 ; } // starts at 22C20
.text:0000000000022CB0 ; ---------------------------------------------------------------------------
.text:0000000000022CB4                 ALIGN 8
.text:0000000000022CB8 ; __unwind {
.text:0000000000022CB8                 STR             X19, [SP,#-0x20]!
.text:0000000000022CBC                 STP             X29, X30, [SP,#0x10]
.text:0000000000022CC0                 ADD             X29, SP, #0x10
.text:0000000000022CC4                 ADRP            X8, #_ZTVN6drawer18FixedGraphicDrawerE_ptr@PAGE
.text:0000000000022CC8                 MOV             X19, X0
.text:0000000000022CCC                 LDR             X8, [X8,#_ZTVN6drawer18FixedGraphicDrawerE_ptr@PAGEOFF]
.text:0000000000022CD0                 LDR             X0, [X0,#0x58]
.text:0000000000022CD4                 STR             XZR, [X19,#0x58]
.text:0000000000022CD8                 ADD             X8, X8, #0x10
.text:0000000000022CDC                 STR             X8, [X19]
.text:0000000000022CE0                 CBZ             X0, loc_22CF0
.text:0000000000022CE4                 LDR             X8, [X0]
.text:0000000000022CE8                 LDR             X8, [X8,#8]
.text:0000000000022CEC                 BLR             X8
.text:0000000000022CF0 loc_22CF0                               ; CODE XREF: .text:0000000000022CE0↑j
.text:0000000000022CF0                 LDR             X0, [X19,#0x50]
.text:0000000000022CF4                 STR             XZR, [X19,#0x50]
.text:0000000000022CF8                 CBZ             X0, loc_22D08
.text:0000000000022CFC                 LDR             X8, [X0]
.text:0000000000022D00                 LDR             X8, [X8,#8]
.text:0000000000022D04                 BLR             X8
.text:0000000000022D08 loc_22D08                               ; CODE XREF: .text:0000000000022CF8↑j
.text:0000000000022D08                 LDR             X0, [X19,#0x48]
.text:0000000000022D0C                 STR             XZR, [X19,#0x48]
.text:0000000000022D10                 CBZ             X0, loc_22D20
.text:0000000000022D14                 LDR             X8, [X0]
.text:0000000000022D18                 LDR             X8, [X8,#8]
.text:0000000000022D1C                 BLR             X8
.text:0000000000022D20 loc_22D20                               ; CODE XREF: .text:0000000000022D10↑j
.text:0000000000022D20                 LDR             X0, [X19,#0x40]
.text:0000000000022D24                 STR             XZR, [X19,#0x40]
.text:0000000000022D28                 CBZ             X0, loc_22D38
.text:0000000000022D2C                 LDR             X8, [X0]
.text:0000000000022D30                 LDR             X8, [X8,#8]
.text:0000000000022D34                 BLR             X8
.text:0000000000022D38 loc_22D38                               ; CODE XREF: .text:0000000000022D28↑j
.text:0000000000022D38                 LDP             X29, X30, [SP,#0x10]
.text:0000000000022D3C                 MOV             X0, X19
.text:0000000000022D40                 LDR             X19, [SP],#0x20
.text:0000000000022D44                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000022D44 ; } // starts at 22CB8
.text:0000000000022D48 ; =============== S U B R O U T I N E =======================================
.text:0000000000022D48 ; Attributes: bp-based frame
.text:0000000000022D48 sub_22D48                               ; DATA XREF: .init_array:00000000000305B0↓o
.text:0000000000022D48 var_s0          =  0
.text:0000000000022D48 ; __unwind {
.text:0000000000022D48                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000022D4C                 MOV             X29, SP
.text:0000000000022D50                 ADRP            X8, #unk_31008@PAGE
.text:0000000000022D54                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000022D58                 LDARB           W8, [X8]
.text:0000000000022D5C                 TBNZ            W8, #0, loc_22D9C
.text:0000000000022D60                 ADRP            X0, #unk_31008@PAGE
.text:0000000000022D64                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000022D68                 BL              .__cxa_guard_acquire
.text:0000000000022D6C                 CBZ             W0, loc_22D9C
.text:0000000000022D70                 ADRP            X1, #qword_31000@PAGE
.text:0000000000022D74                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000022D78                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:0000000000022D7C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000022D80                 STR             XZR, [X1]
.text:0000000000022D84                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000022D88                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000022D8C                 BL              .__cxa_atexit
.text:0000000000022D90                 ADRP            X0, #unk_31008@PAGE
.text:0000000000022D94                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000022D98                 BL              .__cxa_guard_release
.text:0000000000022D9C loc_22D9C                               ; CODE XREF: sub_22D48+14↑j
.text:0000000000022D9C                                         ; sub_22D48+24↑j
.text:0000000000022D9C                 ADRP            X8, #unk_31038@PAGE
.text:0000000000022DA0                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:0000000000022DA4                 LDARB           W8, [X8]
.text:0000000000022DA8                 TBNZ            W8, #0, loc_22DE4
.text:0000000000022DAC                 ADRP            X0, #unk_31038@PAGE
.text:0000000000022DB0                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000022DB4                 BL              .__cxa_guard_acquire
.text:0000000000022DB8                 CBZ             W0, loc_22DE4
.text:0000000000022DBC                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000022DC0                 ADRP            X1, #unk_31010@PAGE
.text:0000000000022DC4                 ADRP            X2, #off_2F000@PAGE
.text:0000000000022DC8                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000022DCC                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000022DD0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000022DD4                 BL              .__cxa_atexit
.text:0000000000022DD8                 ADRP            X0, #unk_31038@PAGE
.text:0000000000022DDC                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000022DE0                 BL              .__cxa_guard_release
.text:0000000000022DE4 loc_22DE4                               ; CODE XREF: sub_22D48+60↑j
.text:0000000000022DE4                                         ; sub_22D48+70↑j
.text:0000000000022DE4                 ADRP            X8, #unk_31058@PAGE
.text:0000000000022DE8                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:0000000000022DEC                 LDARB           W8, [X8]
.text:0000000000022DF0                 TBNZ            W8, #0, loc_22E34
.text:0000000000022DF4                 ADRP            X0, #unk_31058@PAGE
.text:0000000000022DF8                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000022DFC                 BL              .__cxa_guard_acquire
.text:0000000000022E00                 CBZ             W0, loc_22E34
.text:0000000000022E04                 ADRP            X1, #unk_31040@PAGE
.text:0000000000022E08                 ADRP            X0, #loc_1C078@PAGE
.text:0000000000022E0C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000022E10                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:0000000000022E14                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000022E18                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000022E1C                 STP             XZR, XZR, [X1]
.text:0000000000022E20                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:0000000000022E24                 BL              .__cxa_atexit
.text:0000000000022E28                 ADRP            X0, #unk_31058@PAGE
.text:0000000000022E2C                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000022E30                 BL              .__cxa_guard_release
.text:0000000000022E34 loc_22E34                               ; CODE XREF: sub_22D48+A8↑j
.text:0000000000022E34                                         ; sub_22D48+B8↑j
.text:0000000000022E34                 ADRP            X8, #unk_31078@PAGE
.text:0000000000022E38                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:0000000000022E3C                 LDARB           W8, [X8]
.text:0000000000022E40                 TBNZ            W8, #0, loc_22E88
.text:0000000000022E44                 ADRP            X0, #unk_31078@PAGE
.text:0000000000022E48                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000022E4C                 BL              .__cxa_guard_acquire
.text:0000000000022E50                 CBZ             W0, loc_22E88
.text:0000000000022E54                 ADRP            X1, #unk_31060@PAGE
.text:0000000000022E58                 ADRP            X0, #loc_1C100@PAGE
.text:0000000000022E5C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000022E60                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:0000000000022E64                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000022E68                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000022E6C                 STP             XZR, XZR, [X1]
.text:0000000000022E70                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:0000000000022E74                 BL              .__cxa_atexit
.text:0000000000022E78                 ADRP            X0, #unk_31078@PAGE
.text:0000000000022E7C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000022E80                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000022E84                 B               .__cxa_guard_release
.text:0000000000022E88 ; ---------------------------------------------------------------------------
.text:0000000000022E88 loc_22E88                               ; CODE XREF: sub_22D48+F8↑j
.text:0000000000022E88                                         ; sub_22D48+108↑j
.text:0000000000022E88                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000022E8C                 RET
.text:0000000000022E8C ; } // starts at 22D48
.text:0000000000022E8C ; End of function sub_22D48
.text:0000000000022E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000022E90 ; Attributes: bp-based frame
.text:0000000000022E90 ; _QWORD __fastcall drawer::FixedRenderPassDrawer::addFrameInfo(drawer::FixedRenderPassDrawer *__hidden this, const gui::FrameData *)
.text:0000000000022E90                 EXPORT _ZN6drawer21FixedRenderPassDrawer12addFrameInfoERKN3gui9FrameDataE
.text:0000000000022E90 _ZN6drawer21FixedRenderPassDrawer12addFrameInfoERKN3gui9FrameDataE
.text:0000000000022E90                                         ; DATA XREF: LOAD:0000000000000F30↑o
.text:0000000000022E90                                         ; .data.rel.ro:00000000000303B0↓o
.text:0000000000022E90 var_10          = -0x10
.text:0000000000022E90 var_s0          =  0
.text:0000000000022E90 ; __unwind {
.text:0000000000022E90                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:0000000000022E94                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022E98                 ADD             X29, SP, #0x10
.text:0000000000022E9C                 MOV             X19, X0
.text:0000000000022EA0                 MOV             X0, X1  ; this
.text:0000000000022EA4                 MOV             X20, X1
.text:0000000000022EA8                 BL              ._ZNK3gui9FrameData7isValidEv ; gui::FrameData::isValid(void)
.text:0000000000022EAC                 TBZ             W0, #0, loc_22EE8
.text:0000000000022EB0                 LDR             W8, [X20]
.text:0000000000022EB4                 MOV             X9, X19
.text:0000000000022EB8                 STR             W8, [X9,#0x60]!
.text:0000000000022EBC                 CMP             X9, X20
.text:0000000000022EC0                 B.EQ            loc_22ED0
.text:0000000000022EC4                 LDP             X1, X2, [X20,#8]
.text:0000000000022EC8                 ADD             X0, X19, #0x68 ; 'h'
.text:0000000000022ECC                 BL              loc_21090
.text:0000000000022ED0 loc_22ED0                               ; CODE XREF: drawer::FixedRenderPassDrawer::addFrameInfo(gui::FrameData const&)+30↑j
.text:0000000000022ED0                 LDP             Q0, Q1, [X20,#0x20]
.text:0000000000022ED4                 LDP             X0, X1, [X19,#0x68]
.text:0000000000022ED8                 STP             Q0, Q1, [X19,#0x80]
.text:0000000000022EDC                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022EE0                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000022EE4                 B               sub_234C8
.text:0000000000022EE8 ; ---------------------------------------------------------------------------
.text:0000000000022EE8 loc_22EE8                               ; CODE XREF: drawer::FixedRenderPassDrawer::addFrameInfo(gui::FrameData const&)+1C↑j
.text:0000000000022EE8                 ADRP            X19, #aFrameworksBase_1@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000022EEC                 ADD             X19, X19, #aFrameworksBase_1@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000022EF0                 MOV             W1, #0x2F ; '/'
.text:0000000000022EF4                 MOV             W2, #0x53 ; 'S'
.text:0000000000022EF8                 MOV             X0, X19
.text:0000000000022EFC                 BL              .__strrchr_chk
.text:0000000000022F00                 CBZ             X0, loc_22F1C
.text:0000000000022F04                 ADRP            X0, #aFrameworksBase_1@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000022F08                 ADD             X0, X0, #aFrameworksBase_1@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000022F0C                 MOV             W1, #0x2F ; '/'
.text:0000000000022F10                 MOV             W2, #0x53 ; 'S'
.text:0000000000022F14                 BL              .__strrchr_chk
.text:0000000000022F18                 ADD             X19, X0, #1
.text:0000000000022F1C loc_22F1C                               ; CODE XREF: drawer::FixedRenderPassDrawer::addFrameInfo(gui::FrameData const&)+70↑j
.text:0000000000022F1C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022F20                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:0000000000022F24                 ADRP            X2, #aSSDFrameDataIs@PAGE ; "%s:%s(%d) Frame data is invalid!"
.text:0000000000022F28                 ADRP            X4, #aAddframeinfo@PAGE ; "addFrameInfo"
.text:0000000000022F2C                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:0000000000022F30                 ADD             X2, X2, #aSSDFrameDataIs@PAGEOFF ; "%s:%s(%d) Frame data is invalid!"
.text:0000000000022F34                 ADD             X4, X4, #aAddframeinfo@PAGEOFF ; "addFrameInfo"
.text:0000000000022F38                 MOV             W0, #6
.text:0000000000022F3C                 MOV             X3, X19
.text:0000000000022F40                 MOV             W5, #0x10
.text:0000000000022F44                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000022F48                 B               .__android_log_print
.text:0000000000022F48 ; } // starts at 22E90
.text:0000000000022F48 ; End of function drawer::FixedRenderPassDrawer::addFrameInfo(gui::FrameData const&)
.text:0000000000022F48 ; ---------------------------------------------------------------------------
.text:0000000000022F4C                 ALIGN 0x10
.text:0000000000022F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000022F50 ; Attributes: bp-based frame
.text:0000000000022F50 ; drawer *__fastcall drawer::FixedRenderPassDrawer::draw(drawer::FixedRenderPassDrawer *__hidden this)
.text:0000000000022F50                 EXPORT _ZN6drawer21FixedRenderPassDrawer4drawEv
.text:0000000000022F50 _ZN6drawer21FixedRenderPassDrawer4drawEv
.text:0000000000022F50                                         ; DATA XREF: LOAD:0000000000000E58↑o
.text:0000000000022F50                                         ; .data.rel.ro:0000000000030398↓o
.text:0000000000022F50 var_10          = -0x10
.text:0000000000022F50 var_s0          =  0
.text:0000000000022F50 ; __unwind {
.text:0000000000022F50                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000022F54                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022F58                 ADD             X29, SP, #0x10
.text:0000000000022F5C                 MOV             X19, X0
.text:0000000000022F60                 ADD             X0, X0, #0x60 ; '`' ; this
.text:0000000000022F64                 BL              ._ZNK3gui9FrameData7isValidEv ; gui::FrameData::isValid(void)
.text:0000000000022F68                 TBZ             W0, #0, loc_22F84
.text:0000000000022F6C                 MOV             X0, X19 ; this
.text:0000000000022F70                 BL              ._ZN6drawer16RenderPassDrawer14measureWidgetsEv ; drawer::RenderPassDrawer::measureWidgets(void)
.text:0000000000022F74                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022F78                 MOV             X0, X19 ; this
.text:0000000000022F7C                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000022F80                 B               ._ZN6drawer16RenderPassDrawer11drawWidgetsEv ; drawer::RenderPassDrawer::drawWidgets(void)
.text:0000000000022F84 ; ---------------------------------------------------------------------------
.text:0000000000022F84 loc_22F84                               ; CODE XREF: drawer::FixedRenderPassDrawer::draw(void)+18↑j
.text:0000000000022F84                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000022F88                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000022F8C                 RET
.text:0000000000022F8C ; } // starts at 22F50
.text:0000000000022F8C ; End of function drawer::FixedRenderPassDrawer::draw(void)
.text:0000000000022F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000022F90 ; Attributes: bp-based frame
.text:0000000000022F90 ; __int64 __fastcall drawer::FixedRenderPassDrawer::prelayoutRenderPassText(drawer::FixedRenderPassDrawer *__hidden this)
.text:0000000000022F90                 EXPORT _ZN6drawer21FixedRenderPassDrawer23prelayoutRenderPassTextEv
.text:0000000000022F90 _ZN6drawer21FixedRenderPassDrawer23prelayoutRenderPassTextEv
.text:0000000000022F90                                         ; DATA XREF: LOAD:0000000000001050↑o
.text:0000000000022F90                                         ; .data.rel.ro:00000000000303C0↓o
.text:0000000000022F90 var_50          = -0x50
.text:0000000000022F90 var_40          = -0x40
.text:0000000000022F90 var_38          = -0x38
.text:0000000000022F90 var_30          = -0x30
.text:0000000000022F90 var_20          = -0x20
.text:0000000000022F90 var_10          = -0x10
.text:0000000000022F90 var_s0          =  0
.text:0000000000022F90 ; __unwind {
.text:0000000000022F90                 SUB             SP, SP, #0x60
.text:0000000000022F94                 STP             X24, X23, [SP,#0x50+var_30]
.text:0000000000022F98                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000022F9C                 STP             X20, X19, [SP,#0x50+var_10]
.text:0000000000022FA0                 STP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000022FA4                 ADD             X29, SP, #0x50
.text:0000000000022FA8                 MRS             X20, #3, c13, c0, #2
.text:0000000000022FAC                 LDR             X8, [X20,#0x28]
.text:0000000000022FB0                 STR             X8, [SP,#0x50+var_38]
.text:0000000000022FB4                 LDP             X21, X22, [X0,#0x68]
.text:0000000000022FB8                 CMP             X21, X22
.text:0000000000022FBC                 B.NE            loc_22FD0
.text:0000000000022FC0                 B               loc_23074
.text:0000000000022FC4 ; ---------------------------------------------------------------------------
.text:0000000000022FC4 loc_22FC4                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+D4↓j
.text:0000000000022FC4                                         ; drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+E0↓j
.text:0000000000022FC4                 ADD             X21, X21, #0x60 ; '`'
.text:0000000000022FC8                 CMP             X21, X22
.text:0000000000022FCC                 B.EQ            loc_23074
.text:0000000000022FD0 loc_22FD0                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+2C↑j
.text:0000000000022FD0                                         ; drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+BC↓j
.text:0000000000022FD0                 MOV             X19, X21
.text:0000000000022FD4                 LDR             X23, [X19,#0x40]!
.text:0000000000022FD8                 LDR             X8, [X19,#8]
.text:0000000000022FDC                 CMP             X8, X23
.text:0000000000022FE0                 B.EQ            loc_23004
.text:0000000000022FE4                 MOV             X24, X8
.text:0000000000022FE8 loc_22FE8                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+70↓j
.text:0000000000022FE8                 LDRB            W9, [X24,#-0x18]!
.text:0000000000022FEC                 TBZ             W9, #0, loc_22FF8
.text:0000000000022FF0                 LDUR            X0, [X8,#-8] ; void *
.text:0000000000022FF4                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000022FF8 loc_22FF8                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+5C↑j
.text:0000000000022FF8                 MOV             X8, X24
.text:0000000000022FFC                 CMP             X23, X24
.text:0000000000023000                 B.NE            loc_22FE8
.text:0000000000023004 loc_23004                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+50↑j
.text:0000000000023004                 LDR             W0, [X21]
.text:0000000000023008                 MOV             X8, SP
.text:000000000002300C                 STR             X23, [X21,#0x48]
.text:0000000000023010                 BL              sub_230A0
.text:0000000000023014                 LDP             X8, X9, [X21,#0x48]
.text:0000000000023018                 CMP             X8, X9
.text:000000000002301C                 B.CS            loc_23054
.text:0000000000023020                 LDR             X9, [SP,#0x50+var_40]
.text:0000000000023024                 LDR             Q0, [SP,#0x50+var_50]
.text:0000000000023028                 STR             X9, [X8,#0x10]
.text:000000000002302C                 STR             Q0, [X8]
.text:0000000000023030                 STP             XZR, XZR, [SP,#0x50+var_50]
.text:0000000000023034                 STR             XZR, [SP,#0x50+var_40]
.text:0000000000023038                 LDR             X8, [X21,#0x48]
.text:000000000002303C                 ADD             X8, X8, #0x18
.text:0000000000023040                 STR             X8, [X21,#0x48]
.text:0000000000023044                 ADD             X21, X21, #0x60 ; '`'
.text:0000000000023048                 CMP             X21, X22
.text:000000000002304C                 B.NE            loc_22FD0
.text:0000000000023050                 B               loc_23074
.text:0000000000023054 ; ---------------------------------------------------------------------------
.text:0000000000023054 loc_23054                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+8C↑j
.text:0000000000023054                 MOV             X1, SP
.text:0000000000023058                 MOV             X0, X19
.text:000000000002305C                 BL              sub_22398
.text:0000000000023060                 LDRB            W8, [SP,#0x50+var_50]
.text:0000000000023064                 TBZ             W8, #0, loc_22FC4
.text:0000000000023068                 LDR             X0, [SP,#0x50+var_40] ; void *
.text:000000000002306C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000023070                 B               loc_22FC4
.text:0000000000023074 ; ---------------------------------------------------------------------------
.text:0000000000023074 loc_23074                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+30↑j
.text:0000000000023074                                         ; drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+3C↑j ...
.text:0000000000023074                 LDR             X8, [X20,#0x28]
.text:0000000000023078                 LDR             X9, [SP,#0x50+var_38]
.text:000000000002307C                 CMP             X8, X9
.text:0000000000023080                 B.NE            loc_2309C
.text:0000000000023084                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000023088                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000002308C                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000023090                 LDP             X24, X23, [SP,#0x50+var_30]
.text:0000000000023094                 ADD             SP, SP, #0x60 ; '`'
.text:0000000000023098                 RET
.text:000000000002309C ; ---------------------------------------------------------------------------
.text:000000000002309C loc_2309C                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+F0↑j
.text:000000000002309C                 BL              .__stack_chk_fail
.text:000000000002309C ; } // starts at 22F90
.text:000000000002309C ; End of function drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)
.text:00000000000230A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000230A0 ; Attributes: bp-based frame
.text:00000000000230A0 sub_230A0                               ; CODE XREF: drawer::FixedRenderPassDrawer::prelayoutRenderPassText(void)+80↑p
.text:00000000000230A0 var_160         = -0x160
.text:00000000000230A0 var_158         = -0x158
.text:00000000000230A0 var_118         = -0x118
.text:00000000000230A0 var_108         = -0x108
.text:00000000000230A0 var_F8          = -0xF8
.text:00000000000230A0 var_F0          = -0xF0
.text:00000000000230A0 var_68          = -0x68
.text:00000000000230A0 var_60          = -0x60
.text:00000000000230A0 var_58          = -0x58
.text:00000000000230A0 var_50          = -0x50
.text:00000000000230A0 var_40          = -0x40
.text:00000000000230A0 var_30          = -0x30
.text:00000000000230A0 var_20          = -0x20
.text:00000000000230A0 var_10          = -0x10
.text:00000000000230A0 var_s0          =  0
.text:00000000000230A0 ; __unwind {
.text:00000000000230A0                 SUB             SP, SP, #0x170
.text:00000000000230A4                 STR             X28, [SP,#0x160+var_50]
.text:00000000000230A8                 STP             X26, X25, [SP,#0x160+var_40]
.text:00000000000230AC                 STP             X24, X23, [SP,#0x160+var_30]
.text:00000000000230B0                 STP             X22, X21, [SP,#0x160+var_20]
.text:00000000000230B4                 STP             X20, X19, [SP,#0x160+var_10]
.text:00000000000230B8                 STP             X29, X30, [SP,#0x160+var_s0]
.text:00000000000230BC                 ADD             X29, SP, #0x160
.text:00000000000230C0                 ADRP            X9, #_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_ostreamIcS2_EE_ptr@PAGE
.text:00000000000230C4                 MRS             X23, #3, c13, c0, #2
.text:00000000000230C8                 MOV             X22, X8
.text:00000000000230CC                 LDR             X8, [X23,#0x28]
.text:00000000000230D0                 MOV             X10, SP
.text:00000000000230D4                 LDR             X9, [X9,#_ZTCNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_ostreamIcS2_EE_ptr@PAGEOFF]
.text:00000000000230D8                 ADD             X19, X10, #0x70 ; 'p'
.text:00000000000230DC                 ADD             X20, X10, #8
.text:00000000000230E0                 MOV             W21, W0
.text:00000000000230E4                 STUR            X8, [X29,#var_58]
.text:00000000000230E8                 MOV             X0, X19 ; this
.text:00000000000230EC                 ADD             X11, X9, #0x40 ; '@'
.text:00000000000230F0                 ADD             X9, X9, #0x18
.text:00000000000230F4                 MOV             X1, X20 ; void *
.text:00000000000230F8                 STR             X11, [SP,#0x160+var_F0]
.text:00000000000230FC                 STR             X9, [SP,#0x160+var_160]
.text:0000000000023100                 BL              ._ZNSt3__18ios_base4initEPv ; std::__1::ios_base::init(void *)
.text:0000000000023104                 ADRP            X8, #_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000023108                 MOV             W9, #0xFFFFFFFF
.text:000000000002310C                 MOV             X0, X20
.text:0000000000023110                 LDR             X8, [X8,#_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000023114                 STR             W9, [SP,#0x160+var_60]
.text:0000000000023118                 STR             XZR, [SP,#0x160+var_68]
.text:000000000002311C                 ADD             X24, X8, #0x18
.text:0000000000023120                 ADD             X25, X8, #0x40 ; '@'
.text:0000000000023124                 STR             X24, [SP,#0x160+var_160]
.text:0000000000023128                 STR             X25, [SP,#0x160+var_F0]
.text:000000000002312C                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::basic_streambuf(void)
.text:0000000000023130                 ADRP            X8, #_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000023134                 MOVI            V0.2D, #0
.text:0000000000023138                 MOV             X0, SP
.text:000000000002313C                 MOV             W1, W21
.text:0000000000023140                 LDR             X8, [X8,#_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000023144                 STUR            Q0, [SP,#0x160+var_108]
.text:0000000000023148                 ADD             X26, X8, #0x10
.text:000000000002314C                 STUR            Q0, [SP,#0x160+var_118]
.text:0000000000023150                 MOV             W8, #0x10
.text:0000000000023154                 STR             X26, [SP,#0x160+var_158]
.text:0000000000023158                 STR             W8, [SP,#0x160+var_F8]
.text:000000000002315C                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::operator<<(uint)
.text:0000000000023160                 MOV             X8, X22
.text:0000000000023164                 MOV             X0, X20
.text:0000000000023168                 BL              sub_220E0
.text:000000000002316C                 LDRB            W8, [SP,#0x160+var_118]
.text:0000000000023170                 STP             X24, X26, [SP,#0x160+var_160]
.text:0000000000023174                 STR             X25, [SP,#0x160+var_F0]
.text:0000000000023178                 TBZ             W8, #0, loc_23184
.text:000000000002317C                 LDR             X0, [SP,#0x160+var_108] ; void *
.text:0000000000023180                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000023184 loc_23184                               ; CODE XREF: sub_230A0+D8↑j
.text:0000000000023184                 MOV             X0, X20
.text:0000000000023188                 BL              ._ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_streambuf<char,std::__1::char_traits<char>>::~basic_streambuf()
.text:000000000002318C                 ADRP            X8, #_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGE
.text:0000000000023190                 MOV             X0, SP
.text:0000000000023194                 LDR             X8, [X8,#_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE_ptr@PAGEOFF]
.text:0000000000023198                 ADD             X1, X8, #8
.text:000000000002319C                 BL              ._ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ostream<char,std::__1::char_traits<char>>::~basic_ostream()
.text:00000000000231A0                 MOV             X0, X19
.text:00000000000231A4                 BL              ._ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev ; std::__1::basic_ios<char,std::__1::char_traits<char>>::~basic_ios()
.text:00000000000231A8                 LDR             X8, [X23,#0x28]
.text:00000000000231AC                 LDUR            X9, [X29,#var_58]
.text:00000000000231B0                 CMP             X8, X9
.text:00000000000231B4                 B.NE            loc_231D8
.text:00000000000231B8                 LDP             X29, X30, [SP,#0x160+var_s0]
.text:00000000000231BC                 LDP             X20, X19, [SP,#0x160+var_10]
.text:00000000000231C0                 LDP             X22, X21, [SP,#0x160+var_20]
.text:00000000000231C4                 LDP             X24, X23, [SP,#0x160+var_30]
.text:00000000000231C8                 LDP             X26, X25, [SP,#0x160+var_40]
.text:00000000000231CC                 LDR             X28, [SP,#0x160+var_50]
.text:00000000000231D0                 ADD             SP, SP, #0x170
.text:00000000000231D4                 RET
.text:00000000000231D8 ; ---------------------------------------------------------------------------
.text:00000000000231D8 loc_231D8                               ; CODE XREF: sub_230A0+114↑j
.text:00000000000231D8                 BL              .__stack_chk_fail
.text:00000000000231D8 ; } // starts at 230A0
.text:00000000000231D8 ; End of function sub_230A0
.text:00000000000231D8 ; ---------------------------------------------------------------------------
.text:00000000000231DC                 ALIGN 0x20
.text:00000000000231E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000231E0 ; Attributes: bp-based frame
.text:00000000000231E0 ; __int64 __fastcall drawer::FixedRenderPassDrawer::recalculateTextDrawers(drawer::FixedRenderPassDrawer *__hidden this)
.text:00000000000231E0                 EXPORT _ZN6drawer21FixedRenderPassDrawer22recalculateTextDrawersEv
.text:00000000000231E0 _ZN6drawer21FixedRenderPassDrawer22recalculateTextDrawersEv
.text:00000000000231E0                                         ; DATA XREF: LOAD:00000000000011B8↑o
.text:00000000000231E0                                         ; .data.rel.ro:00000000000303C8↓o
.text:00000000000231E0 var_C8          = -0xC8
.text:00000000000231E0 var_C4          = -0xC4
.text:00000000000231E0 var_C0          = -0xC0
.text:00000000000231E0 var_B0          = -0xB0
.text:00000000000231E0 var_A0          = -0xA0
.text:00000000000231E0 var_9C          = -0x9C
.text:00000000000231E0 var_98          = -0x98
.text:00000000000231E0 var_90          = -0x90
.text:00000000000231E0 var_88          = -0x88
.text:00000000000231E0 var_80          = -0x80
.text:00000000000231E0 var_70          = -0x70
.text:00000000000231E0 var_60          = -0x60
.text:00000000000231E0 var_50          = -0x50
.text:00000000000231E0 var_40          = -0x40
.text:00000000000231E0 var_30          = -0x30
.text:00000000000231E0 var_20          = -0x20
.text:00000000000231E0 var_10          = -0x10
.text:00000000000231E0 var_s0          =  0
.text:00000000000231E0 ; __unwind {
.text:00000000000231E0                 SUB             SP, SP, #0xE0
.text:00000000000231E4                 STP             D15, D14, [SP,#0xD0+var_80]
.text:00000000000231E8                 STP             D13, D12, [SP,#0xD0+var_70]
.text:00000000000231EC                 STP             D11, D10, [SP,#0xD0+var_60]
.text:00000000000231F0                 STP             D9, D8, [SP,#0xD0+var_50]
.text:00000000000231F4                 STP             X26, X25, [SP,#0xD0+var_40]
.text:00000000000231F8                 STP             X24, X23, [SP,#0xD0+var_30]
.text:00000000000231FC                 STP             X22, X21, [SP,#0xD0+var_20]
.text:0000000000023200                 STP             X20, X19, [SP,#0xD0+var_10]
.text:0000000000023204                 STP             X29, X30, [SP,#0xD0+var_s0]
.text:0000000000023208                 ADD             X29, SP, #0xD0
.text:000000000002320C                 MRS             X23, #3, c13, c0, #2
.text:0000000000023210                 MOV             X20, X0
.text:0000000000023214                 LDR             X8, [X23,#0x28]
.text:0000000000023218                 MOV             X19, X0
.text:000000000002321C                 STR             X8, [SP,#0xD0+var_88]
.text:0000000000023220                 LDR             X21, [X20,#0x40]!
.text:0000000000023224                 LDR             X22, [X20,#8]
.text:0000000000023228                 CMP             X22, X21
.text:000000000002322C                 B.EQ            loc_23250
.text:0000000000023230 loc_23230                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+6C↓j
.text:0000000000023230                 LDR             X0, [X22,#-8]!
.text:0000000000023234                 STR             XZR, [X22]
.text:0000000000023238                 CBZ             X0, loc_23248
.text:000000000002323C                 LDR             X8, [X0]
.text:0000000000023240                 LDR             X8, [X8,#8]
.text:0000000000023244                 BLR             X8
.text:0000000000023248 loc_23248                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+58↑j
.text:0000000000023248                 CMP             X21, X22
.text:000000000002324C                 B.NE            loc_23230
.text:0000000000023250 loc_23250                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+4C↑j
.text:0000000000023250                 LDP             Q1, Q0, [X19,#0x80]
.text:0000000000023254                 STR             X21, [X19,#0x48]
.text:0000000000023258                 STR             Q1, [SP,#0xD0+var_C0]
.text:000000000002325C                 BL              .__subtf3
.text:0000000000023260                 FMOV            S13, WZR
.text:0000000000023264                 LDR             W8, [X19,#0xA0]
.text:0000000000023268                 FMOV            S9, #1.0
.text:000000000002326C                 CMP             W8, #1
.text:0000000000023270                 LDP             X8, X24, [X19,#0x68]
.text:0000000000023274                 FCSEL           S1, S9, S13, EQ
.text:0000000000023278                 STR             Q0, [SP,#0xD0+var_B0]
.text:000000000002327C                 CMP             X8, X24
.text:0000000000023280                 B.EQ            loc_23484
.text:0000000000023284                 MOV             W9, #0x42C80000
.text:0000000000023288                 LDR             S0, [X19,#0x18]
.text:000000000002328C                 FADD            S1, S1, S9
.text:0000000000023290                 ADRP            X10, #dword_8568@PAGE
.text:0000000000023294                 MOV             V12.16B, V13.16B
.text:0000000000023298                 ADD             X21, X19, #0xB4
.text:000000000002329C                 FMOV            S2, W9
.text:00000000000232A0                 ADRP            X9, #dword_8580@PAGE
.text:00000000000232A4                 ADD             X25, X8, #0x60 ; '`'
.text:00000000000232A8                 MOV             W22, #0x23 ; '#'
.text:00000000000232AC                 LDR             S11, [X9,#dword_8580@PAGEOFF]
.text:00000000000232B0                 ADRP            X9, #dword_8588@PAGE
.text:00000000000232B4                 MOV             W26, #0x3F800000
.text:00000000000232B8                 FDIV            S0, S0, S2
.text:00000000000232BC                 FDIV            S10, S0, S1
.text:00000000000232C0                 LDR             S0, [X10,#dword_8568@PAGEOFF]
.text:00000000000232C4                 LDR             Q1, [SP,#0xD0+var_C0]
.text:00000000000232C8                 STR             S0, [SP,#0xD0+var_C4]
.text:00000000000232CC                 LDR             S0, [X9,#dword_8588@PAGEOFF]
.text:00000000000232D0                 STR             S0, [SP,#0xD0+var_C8]
.text:00000000000232D4                 B               loc_232E4
.text:00000000000232D8 ; ---------------------------------------------------------------------------
.text:00000000000232D8 loc_232D8                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+280↓j
.text:00000000000232D8                 LDR             Q1, [X19,#0x80]
.text:00000000000232DC                 FADD            S12, S14, S8
.text:00000000000232E0                 ADD             X25, X25, #0x60 ; '`'
.text:00000000000232E4 loc_232E4                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+F4↑j
.text:00000000000232E4                 LDUR            Q0, [X25,#-0x40]
.text:00000000000232E8                 STR             Q0, [SP,#0xD0+var_C0]
.text:00000000000232EC                 BL              .__subtf3
.text:00000000000232F0                 LDR             Q1, [SP,#0xD0+var_B0]
.text:00000000000232F4                 BL              .__divtf3
.text:00000000000232F8                 BL              .__trunctfsf2
.text:00000000000232FC                 FMAX            S0, S0, S13
.text:0000000000023300                 LDR             Q1, [SP,#0xD0+var_C0]
.text:0000000000023304                 FMIN            S15, S0, S9
.text:0000000000023308                 LDUR            Q0, [X25,#-0x30]
.text:000000000002330C                 BL              .__subtf3
.text:0000000000023310                 LDR             Q1, [SP,#0xD0+var_B0]
.text:0000000000023314                 BL              .__divtf3
.text:0000000000023318                 BL              .__trunctfsf2
.text:000000000002331C                 FCMP            S15, #0.0
.text:0000000000023320                 FADD            S14, S10, S12
.text:0000000000023324                 FMAX            S0, S0, S13
.text:0000000000023328                 FCCMP           S15, S14, #0, GT
.text:000000000002332C                 FMIN            S8, S0, S9
.text:0000000000023330                 B.MI            loc_23468
.text:0000000000023334                 MOV             V14.16B, V15.16B
.text:0000000000023338 loc_23338                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+298↓j
.text:0000000000023338                                         ; drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+2A0↓j
.text:0000000000023338                 LDR             X8, [X19]
.text:000000000002333C                 MOV             X0, X19
.text:0000000000023340                 MOV             W1, #1
.text:0000000000023344                 MOV             X2, X22
.text:0000000000023348                 LDR             X9, [X8,#0x30]
.text:000000000002334C                 ADD             X8, SP, #0xD0+var_90
.text:0000000000023350                 BLR             X9
.text:0000000000023354                 FCMP            S8, S11
.text:0000000000023358                 B.PL            loc_233AC
.text:000000000002335C                 FMOV            S1, #-0.5
.text:0000000000023360                 LDR             S0, [SP,#0xD0+var_C4]
.text:0000000000023364                 LDR             W8, [X19,#0xB4]
.text:0000000000023368                 ADD             X1, SP, #0xD0+var_A0
.text:000000000002336C                 LDR             W9, [X19,#0xBC]
.text:0000000000023370                 LDR             X0, [SP,#0xD0+var_90]
.text:0000000000023374                 FADD            S0, S14, S0
.text:0000000000023378                 FMUL            S1, S8, S1
.text:000000000002337C                 FADD            S0, S0, S1
.text:0000000000023380                 LDR             S1, [X19,#0xB8]
.text:0000000000023384                 STR             W8, [SP,#0xD0+var_A0]
.text:0000000000023388                 STP             W9, W26, [SP,#0xD0+var_98]
.text:000000000002338C                 FMAX            S14, S0, S13
.text:0000000000023390                 LDR             S0, [SP,#0xD0+var_C8]
.text:0000000000023394                 FADD            S0, S1, S0
.text:0000000000023398                 FSUB            S1, S9, S14
.text:000000000002339C                 FMIN            S0, S0, S9
.text:00000000000233A0                 FMINNM          S8, S1, S11
.text:00000000000233A4                 STR             S0, [SP,#0xD0+var_9C]
.text:00000000000233A8                 B               loc_233CC
.text:00000000000233AC ; ---------------------------------------------------------------------------
.text:00000000000233AC loc_233AC                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+178↑j
.text:00000000000233AC                 LDR             X0, [SP,#0xD0+var_90]
.text:00000000000233B0                 MOV             W1, #2
.text:00000000000233B4                 BL              ._ZN6drawer15TextblockDrawer14setTextGravityEN3gui11TextGravityE ; drawer::TextblockDrawer::setTextGravity(gui::TextGravity)
.text:00000000000233B8                 LDR             X0, [SP,#0xD0+var_90]
.text:00000000000233BC                 LDUR            X1, [X25,#-0x20]
.text:00000000000233C0                 BL              ._ZN6drawer15TextblockDrawer7addTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE ; drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:00000000000233C4                 LDR             X0, [SP,#0xD0+var_90]
.text:00000000000233C8                 MOV             X1, X21
.text:00000000000233CC loc_233CC                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+1C8↑j
.text:00000000000233CC                 BL              ._ZN6drawer15TextblockDrawer18setBackgroundColorERKN3glm5tvec4IfLNS1_9precisionE0EEE ; drawer::TextblockDrawer::setBackgroundColor(glm::tvec4<float,(glm::precision)0> const&)
.text:00000000000233D0                 LDR             S0, [X19,#0x18]
.text:00000000000233D4                 LDR             S2, [X19,#0x20]
.text:00000000000233D8                 LDR             X8, [SP,#0xD0+var_90]
.text:00000000000233DC                 LDR             W9, [X19,#0x1C]
.text:00000000000233E0                 FMUL            S4, S14, S0
.text:00000000000233E4                 LDR             W10, [X19,#0x24]
.text:00000000000233E8                 FMUL            S3, S8, S0
.text:00000000000233EC                 FADD            S0, S0, S2
.text:00000000000233F0                 STR             W9, [X8,#0x1C]
.text:00000000000233F4                 STR             W10, [X8,#0x24]
.text:00000000000233F8                 FADD            S1, S2, S4
.text:00000000000233FC                 FADD            S2, S3, S1
.text:0000000000023400                 STR             S1, [X8,#0x20]
.text:0000000000023404                 FSUB            S4, S0, S1
.text:0000000000023408                 FCMP            S2, S0
.text:000000000002340C                 FCSEL           S0, S4, S3, GT
.text:0000000000023410                 STR             S0, [X8,#0x18]
.text:0000000000023414                 LDP             X9, X10, [X19,#0x48]
.text:0000000000023418                 CMP             X9, X10
.text:000000000002341C                 B.CS            loc_23438
.text:0000000000023420                 STR             XZR, [SP,#0xD0+var_90]
.text:0000000000023424                 STR             X8, [X9]
.text:0000000000023428                 LDR             X8, [X19,#0x48]
.text:000000000002342C                 ADD             X8, X8, #8
.text:0000000000023430                 STR             X8, [X19,#0x48]
.text:0000000000023434                 B               loc_23444
.text:0000000000023438 ; ---------------------------------------------------------------------------
.text:0000000000023438 loc_23438                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+23C↑j
.text:0000000000023438                 ADD             X1, SP, #0xD0+var_90
.text:000000000002343C                 MOV             X0, X20
.text:0000000000023440                 BL              sub_224F8
.text:0000000000023444 loc_23444                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+254↑j
.text:0000000000023444                 LDR             X0, [SP,#0xD0+var_90]
.text:0000000000023448                 STR             XZR, [SP,#0xD0+var_90]
.text:000000000002344C                 CBZ             X0, loc_2345C
.text:0000000000023450                 LDR             X8, [X0]
.text:0000000000023454                 LDR             X8, [X8,#8]
.text:0000000000023458                 BLR             X8
.text:000000000002345C loc_2345C                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+26C↑j
.text:000000000002345C                 CMP             X24, X25
.text:0000000000023460                 B.NE            loc_232D8
.text:0000000000023464                 B               loc_23484
.text:0000000000023468 ; ---------------------------------------------------------------------------
.text:0000000000023468 loc_23468                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+150↑j
.text:0000000000023468                 FADD            S0, S15, S8
.text:000000000002346C                 FSUB            S0, S0, S12
.text:0000000000023470                 FSUB            S8, S0, S10
.text:0000000000023474                 FCMP            S8, #0.0
.text:0000000000023478                 B.PL            loc_23338
.text:000000000002347C                 MOV             V8.16B, V13.16B
.text:0000000000023480                 B               loc_23338
.text:0000000000023484 ; ---------------------------------------------------------------------------
.text:0000000000023484 loc_23484                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+A0↑j
.text:0000000000023484                                         ; drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+284↑j
.text:0000000000023484                 LDR             X8, [X23,#0x28]
.text:0000000000023488                 LDR             X9, [SP,#0xD0+var_88]
.text:000000000002348C                 CMP             X8, X9
.text:0000000000023490                 B.NE            loc_234C0
.text:0000000000023494                 LDP             X29, X30, [SP,#0xD0+var_s0]
.text:0000000000023498                 LDP             X20, X19, [SP,#0xD0+var_10]
.text:000000000002349C                 LDP             X22, X21, [SP,#0xD0+var_20]
.text:00000000000234A0                 LDP             X24, X23, [SP,#0xD0+var_30]
.text:00000000000234A4                 LDP             X26, X25, [SP,#0xD0+var_40]
.text:00000000000234A8                 LDP             D9, D8, [SP,#0xD0+var_50]
.text:00000000000234AC                 LDP             D11, D10, [SP,#0xD0+var_60]
.text:00000000000234B0                 LDP             D13, D12, [SP,#0xD0+var_70]
.text:00000000000234B4                 LDP             D15, D14, [SP,#0xD0+var_80]
.text:00000000000234B8                 ADD             SP, SP, #0xE0
.text:00000000000234BC                 RET
.text:00000000000234C0 ; ---------------------------------------------------------------------------
.text:00000000000234C0 loc_234C0                               ; CODE XREF: drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)+2B0↑j
.text:00000000000234C0                 BL              .__stack_chk_fail
.text:00000000000234C0 ; } // starts at 231E0
.text:00000000000234C0 ; End of function drawer::FixedRenderPassDrawer::recalculateTextDrawers(void)
.text:00000000000234C0 ; ---------------------------------------------------------------------------
.text:00000000000234C4                 ALIGN 8
.text:00000000000234C8 ; =============== S U B R O U T I N E =======================================
.text:00000000000234C8 ; Attributes: bp-based frame
.text:00000000000234C8 sub_234C8                               ; CODE XREF: drawer::FixedRenderPassDrawer::addFrameInfo(gui::FrameData const&)+54↑j
.text:00000000000234C8                                         ; sub_234C8+54↓p ...
.text:00000000000234C8 var_120         = -0x120
.text:00000000000234C8 var_118         = -0x118
.text:00000000000234C8 var_110         = -0x110
.text:00000000000234C8 var_108         = -0x108
.text:00000000000234C8 var_100         = -0x100
.text:00000000000234C8 var_F8          = -0xF8
.text:00000000000234C8 var_F0          = -0xF0
.text:00000000000234C8 var_E8          = -0xE8
.text:00000000000234C8 var_E0          = -0xE0
.text:00000000000234C8 var_D0          = -0xD0
.text:00000000000234C8 var_C0          = -0xC0
.text:00000000000234C8 var_B8          = -0xB8
.text:00000000000234C8 var_A0          = -0xA0
.text:00000000000234C8 var_80          = -0x80
.text:00000000000234C8 var_60          = -0x60
.text:00000000000234C8 var_50          = -0x50
.text:00000000000234C8 var_40          = -0x40
.text:00000000000234C8 var_30          = -0x30
.text:00000000000234C8 var_20          = -0x20
.text:00000000000234C8 var_10          = -0x10
.text:00000000000234C8 var_s0          =  0
.text:00000000000234C8 ; __unwind {
.text:00000000000234C8                 SUB             SP, SP, #0x130
.text:00000000000234CC                 STP             X28, X27, [SP,#0x120+var_50]
.text:00000000000234D0                 STP             X26, X25, [SP,#0x120+var_40]
.text:00000000000234D4                 STP             X24, X23, [SP,#0x120+var_30]
.text:00000000000234D8                 STP             X22, X21, [SP,#0x120+var_20]
.text:00000000000234DC                 STP             X20, X19, [SP,#0x120+var_10]
.text:00000000000234E0                 STP             X29, X30, [SP,#0x120+var_s0]
.text:00000000000234E4                 ADD             X29, SP, #0x120
.text:00000000000234E8                 MRS             X8, #3, c13, c0, #2
.text:00000000000234EC                 ADD             X22, SP, #0x120+var_C0
.text:00000000000234F0                 STR             X8, [SP,#0x120+var_110]
.text:00000000000234F4                 MOV             X19, X1
.text:00000000000234F8                 LDR             X8, [X8,#0x28]
.text:00000000000234FC                 MOV             X23, X0
.text:0000000000023500                 ADD             X28, X22, #0x20 ; ' '
.text:0000000000023504                 ADD             X9, X22, #0x60 ; '`'
.text:0000000000023508                 STR             X9, [SP,#0x120+var_108]
.text:000000000002350C                 STUR            X8, [X29,#var_60]
.text:0000000000023510                 B               loc_23524
.text:0000000000023514 ; ---------------------------------------------------------------------------
.text:0000000000023514 loc_23514                               ; CODE XREF: sub_234C8+400↓j
.text:0000000000023514                 ADD             X0, X26, #0x60 ; '`'
.text:0000000000023518                 MOV             X1, X19
.text:000000000002351C                 BL              sub_234C8
.text:0000000000023520                 MOV             X19, X26
.text:0000000000023524 loc_23524                               ; CODE XREF: sub_234C8+48↑j
.text:0000000000023524                                         ; sub_234C8+590↓j
.text:0000000000023524                 SUB             X8, X19, #0x60 ; '`'
.text:0000000000023528                 MOV             X24, X23
.text:000000000002352C                 STR             X8, [SP,#0x120+var_E8]
.text:0000000000023530                 SUB             X8, X19, #0x40 ; '@'
.text:0000000000023534                 STR             X8, [SP,#0x120+var_F8]
.text:0000000000023538                 SUB             X8, X19, #0x58 ; 'X'
.text:000000000002353C                 STR             X8, [SP,#0x120+var_120]
.text:0000000000023540                 SUB             X8, X19, #0x20 ; ' '
.text:0000000000023544                 STR             X8, [SP,#0x120+var_118]
.text:0000000000023548                 NEG             X8, X19
.text:000000000002354C                 STR             X8, [SP,#0x120+var_F0]
.text:0000000000023550                 LDR             X8, [SP,#0x120+var_108]
.text:0000000000023554                 SUB             X8, X8, X19
.text:0000000000023558                 STR             X8, [SP,#0x120+var_100]
.text:000000000002355C loc_2355C                               ; CODE XREF: sub_234C8+51C↓j
.text:000000000002355C                 MOV             X21, #0xAAAAAAAAAAAAAAAB
.text:0000000000023564                 B               loc_23578
.text:0000000000023568 ; ---------------------------------------------------------------------------
.text:0000000000023568 loc_23568                               ; CODE XREF: sub_234C8+3FC↓j
.text:0000000000023568                 MOV             X0, X23
.text:000000000002356C                 MOV             X1, X26
.text:0000000000023570                 BL              sub_234C8
.text:0000000000023574                 ADD             X24, X26, #0x60 ; '`'
.text:0000000000023578 loc_23578                               ; CODE XREF: sub_234C8+9C↑j
.text:0000000000023578                                         ; sub_234C8+3DC↓j
.text:0000000000023578                 SUB             X8, X19, X24
.text:000000000002357C                 ASR             X9, X8, #5
.text:0000000000023580                 MUL             X9, X9, X21
.text:0000000000023584                 MOV             X23, X24
.text:0000000000023588                 CMP             X9, #5
.text:000000000002358C                 B.LS            loc_23A60
.text:0000000000023590                 CMP             X8, #0x29F
.text:0000000000023594                 B.LE            loc_23B18
.text:0000000000023598                 UMULH           X9, X8, X21
.text:000000000002359C                 MOV             W10, #0x60 ; '`'
.text:00000000000235A0                 LSR             X20, X9, #7
.text:00000000000235A4                 MADD            X24, X20, X10, X23
.text:00000000000235A8                 MOV             W10, #0x176A1
.text:00000000000235B0                 CMP             X8, X10
.text:00000000000235B4                 B.LT            loc_235E0
.text:00000000000235B8                 LSR             X8, X9, #8
.text:00000000000235BC                 LDR             X4, [SP,#0x120+var_E8]
.text:00000000000235C0                 ADD             X8, X8, X8,LSL#1
.text:00000000000235C4                 LSL             X8, X8, #5
.text:00000000000235C8                 ADD             X1, X23, X8
.text:00000000000235CC                 ADD             X3, X24, X8
.text:00000000000235D0                 MOV             X0, X23
.text:00000000000235D4                 MOV             X2, X24
.text:00000000000235D8                 BL              sub_24210
.text:00000000000235DC                 B               loc_235F0
.text:00000000000235E0 ; ---------------------------------------------------------------------------
.text:00000000000235E0 loc_235E0                               ; CODE XREF: sub_234C8+EC↑j
.text:00000000000235E0                 LDR             X2, [SP,#0x120+var_E8]
.text:00000000000235E4                 MOV             X0, X23
.text:00000000000235E8                 MOV             X1, X24
.text:00000000000235EC                 BL              sub_23C90
.text:00000000000235F0 loc_235F0                               ; CODE XREF: sub_234C8+114↑j
.text:00000000000235F0                 MOV             W8, #0x60 ; '`'
.text:00000000000235F4                 LDR             Q0, [X23,#0x20]
.text:00000000000235F8                 MOV             W25, W0
.text:00000000000235FC                 MADD            X8, X20, X8, X23
.text:0000000000023600                 LDR             Q1, [X8,#0x20]
.text:0000000000023604                 STP             Q0, Q1, [SP,#0x120+var_E0]
.text:0000000000023608                 BL              .__lttf2
.text:000000000002360C                 TBZ             W0, #0x1F, loc_23618
.text:0000000000023610                 LDR             X20, [SP,#0x120+var_E8]
.text:0000000000023614                 B               loc_236E0
.text:0000000000023618 ; ---------------------------------------------------------------------------
.text:0000000000023618 loc_23618                               ; CODE XREF: sub_234C8+144↑j
.text:0000000000023618                 LDR             X8, [SP,#0x120+var_F0]
.text:000000000002361C                 MOV             X21, XZR
.text:0000000000023620                 ADD             X27, X23, #0x20 ; ' '
.text:0000000000023624                 ADD             X8, X23, X8
.text:0000000000023628                 ADD             X20, X8, #0xC0
.text:000000000002362C loc_2362C                               ; CODE XREF: sub_234C8+184↓j
.text:000000000002362C                 CMP             X20, X21
.text:0000000000023630                 B.EQ            loc_238CC
.text:0000000000023634                 ADD             X8, X19, X21
.text:0000000000023638                 LDR             Q1, [SP,#0x120+var_D0]
.text:000000000002363C                 SUB             X21, X21, #0x60 ; '`'
.text:0000000000023640                 LDUR            Q0, [X8,#-0xA0]
.text:0000000000023644                 BL              .__lttf2
.text:0000000000023648                 CMP             W0, #0
.text:000000000002364C                 B.GE            loc_2362C
.text:0000000000023650                 ADD             X0, SP, #0x120+var_C0
.text:0000000000023654                 MOV             X1, X23
.text:0000000000023658                 BL              sub_215F0
.text:000000000002365C                 ADD             X20, X19, X21
.text:0000000000023660                 MOV             X26, X23
.text:0000000000023664                 ADD             X0, X23, #8
.text:0000000000023668                 STR             X20, [SP,#0x120+var_D0]
.text:000000000002366C                 LDR             X8, [X20,#-0x60]!
.text:0000000000023670                 STR             X8, [X26],#0x40
.text:0000000000023674                 LDP             X1, X2, [X20,#8]
.text:0000000000023678                 BL              sub_212B0
.text:000000000002367C                 LDP             Q0, Q1, [X20,#0x20]
.text:0000000000023680                 MOV             X0, X26
.text:0000000000023684                 STP             Q0, Q1, [X27]
.text:0000000000023688                 LDP             X1, X2, [X20,#0x40]
.text:000000000002368C                 BL              loc_21400
.text:0000000000023690                 LDR             X9, [SP,#0x120+var_100]
.text:0000000000023694                 LDR             X8, [SP,#0x120+var_C0]
.text:0000000000023698                 CMP             X9, X21
.text:000000000002369C                 STR             X8, [X20]
.text:00000000000236A0                 B.EQ            loc_236CC
.text:00000000000236A4                 LDR             X26, [SP,#0x120+var_D0]
.text:00000000000236A8                 ADD             X21, X20, #0x20 ; ' '
.text:00000000000236AC                 LDP             X1, X2, [SP,#0x120+var_B8]
.text:00000000000236B0                 SUB             X0, X26, #0x58 ; 'X'
.text:00000000000236B4                 BL              sub_212B0
.text:00000000000236B8                 LDP             Q0, Q1, [X28]
.text:00000000000236BC                 SUB             X0, X26, #0x20 ; ' '
.text:00000000000236C0                 STP             Q0, Q1, [X21]
.text:00000000000236C4                 LDP             X1, X2, [SP,#0x120+var_80]
.text:00000000000236C8                 BL              loc_21400
.text:00000000000236CC loc_236CC                               ; CODE XREF: sub_234C8+1D8↑j
.text:00000000000236CC                 ADD             X0, SP, #0x120+var_C0 ; this
.text:00000000000236D0                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000236D4                 MOV             X21, #0xAAAAAAAAAAAAAAAA
.text:00000000000236D8                 ADD             W25, W25, #1
.text:00000000000236DC                 MOVK            X21, #0xAAAB
.text:00000000000236E0 loc_236E0                               ; CODE XREF: sub_234C8+14C↑j
.text:00000000000236E0                 ADD             X26, X23, #0x60 ; '`'
.text:00000000000236E4                 CMP             X26, X20
.text:00000000000236E8                 B.CC            loc_2370C
.text:00000000000236EC                 CMP             X26, X24
.text:00000000000236F0                 B.NE            loc_237E4
.text:00000000000236F4                 B               loc_2387C
.text:00000000000236F8 ; ---------------------------------------------------------------------------
.text:00000000000236F8 loc_236F8                               ; CODE XREF: sub_234C8+2E0↓j
.text:00000000000236F8                                         ; sub_234C8+304↓j
.text:00000000000236F8                 ADD             X0, SP, #0x120+var_C0 ; this
.text:00000000000236FC                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023700                 CMP             X24, X27
.text:0000000000023704                 ADD             W25, W25, #1
.text:0000000000023708                 CSEL            X24, X20, X24, EQ
.text:000000000002370C loc_2370C                               ; CODE XREF: sub_234C8+220↑j
.text:000000000002370C                 LDR             Q0, [X24,#0x20]
.text:0000000000023710                 SUB             X27, X26, #0x60 ; '`'
.text:0000000000023714                 SUB             X26, X26, X20
.text:0000000000023718                 STR             Q0, [SP,#0x120+var_D0]
.text:000000000002371C loc_2371C                               ; CODE XREF: sub_234C8+26C↓j
.text:000000000002371C                 LDR             Q0, [X27,#0x80]
.text:0000000000023720                 MOV             X21, X26
.text:0000000000023724                 LDR             Q1, [SP,#0x120+var_D0]
.text:0000000000023728                 ADD             X27, X27, #0x60 ; '`'
.text:000000000002372C                 ADD             X26, X26, #0x60 ; '`'
.text:0000000000023730                 BL              .__lttf2
.text:0000000000023734                 TBNZ            W0, #0x1F, loc_2371C
.text:0000000000023738                 ADD             X26, X27, #0x60 ; '`'
.text:000000000002373C loc_2373C                               ; CODE XREF: sub_234C8+290↓j
.text:000000000002373C                 MOV             X8, X20
.text:0000000000023740                 LDR             Q1, [SP,#0x120+var_D0]
.text:0000000000023744                 SUB             X20, X20, #0x60 ; '`'
.text:0000000000023748                 ADD             X21, X21, #0x60 ; '`'
.text:000000000002374C                 LDUR            Q0, [X8,#-0x40]
.text:0000000000023750                 BL              .__lttf2
.text:0000000000023754                 CMP             W0, #0
.text:0000000000023758                 B.GE            loc_2373C
.text:000000000002375C                 CMP             X27, X20
.text:0000000000023760                 B.HI            loc_237D0
.text:0000000000023764                 ADD             X0, SP, #0x120+var_C0
.text:0000000000023768                 MOV             X1, X27
.text:000000000002376C                 BL              sub_215F0
.text:0000000000023770                 LDR             X8, [X20]
.text:0000000000023774                 STR             X8, [X27]
.text:0000000000023778                 CBZ             X21, loc_2379C
.text:000000000002377C                 LDP             X1, X2, [X20,#8]
.text:0000000000023780                 ADD             X0, X27, #8
.text:0000000000023784                 BL              sub_212B0
.text:0000000000023788                 LDP             Q0, Q1, [X20,#0x20]
.text:000000000002378C                 ADD             X0, X27, #0x40 ; '@'
.text:0000000000023790                 STP             Q0, Q1, [X27,#0x20]
.text:0000000000023794                 LDP             X1, X2, [X20,#0x40]
.text:0000000000023798                 BL              loc_21400
.text:000000000002379C loc_2379C                               ; CODE XREF: sub_234C8+2B0↑j
.text:000000000002379C                 LDR             X8, [SP,#0x120+var_C0]
.text:00000000000237A0                 CMP             X22, X20
.text:00000000000237A4                 STR             X8, [X20]
.text:00000000000237A8                 B.EQ            loc_236F8
.text:00000000000237AC                 LDP             X1, X2, [SP,#0x120+var_B8]
.text:00000000000237B0                 ADD             X0, X20, #8
.text:00000000000237B4                 BL              sub_212B0
.text:00000000000237B8                 LDP             Q0, Q1, [X28]
.text:00000000000237BC                 ADD             X0, X20, #0x40 ; '@'
.text:00000000000237C0                 STP             Q0, Q1, [X20,#0x20]
.text:00000000000237C4                 LDP             X1, X2, [SP,#0x120+var_80]
.text:00000000000237C8                 BL              loc_21400
.text:00000000000237CC                 B               loc_236F8
.text:00000000000237D0 ; ---------------------------------------------------------------------------
.text:00000000000237D0 loc_237D0                               ; CODE XREF: sub_234C8+298↑j
.text:00000000000237D0                 MOV             X21, #0xAAAAAAAAAAAAAAAA
.text:00000000000237D4                 MOV             X26, X27
.text:00000000000237D8                 MOVK            X21, #0xAAAB
.text:00000000000237DC                 CMP             X26, X24
.text:00000000000237E0                 B.EQ            loc_2387C
.text:00000000000237E4 loc_237E4                               ; CODE XREF: sub_234C8+228↑j
.text:00000000000237E4                 LDR             Q0, [X24,#0x20]
.text:00000000000237E8                 LDR             Q1, [X26,#0x20]
.text:00000000000237EC                 BL              .__lttf2
.text:00000000000237F0                 CMP             W0, #0
.text:00000000000237F4                 B.GE            loc_2387C
.text:00000000000237F8                 ADD             X0, SP, #0x120+var_C0
.text:00000000000237FC                 MOV             X1, X26
.text:0000000000023800                 ADD             X20, X24, #0x20 ; ' '
.text:0000000000023804                 ADD             X21, X26, #0x20 ; ' '
.text:0000000000023808                 BL              sub_215F0
.text:000000000002380C                 LDR             X8, [X24]
.text:0000000000023810                 MOV             X27, X26
.text:0000000000023814                 ADD             X0, X26, #8
.text:0000000000023818                 STR             X8, [X27],#0x40
.text:000000000002381C                 LDP             X1, X2, [X24,#8]
.text:0000000000023820                 BL              sub_212B0
.text:0000000000023824                 LDP             Q0, Q1, [X20]
.text:0000000000023828                 MOV             X0, X27
.text:000000000002382C                 STP             Q0, Q1, [X21]
.text:0000000000023830                 LDP             X1, X2, [X24,#0x40]
.text:0000000000023834                 BL              loc_21400
.text:0000000000023838                 LDR             X8, [SP,#0x120+var_C0]
.text:000000000002383C                 CMP             X22, X24
.text:0000000000023840                 STR             X8, [X24]
.text:0000000000023844                 B.EQ            loc_23868
.text:0000000000023848                 LDP             X1, X2, [SP,#0x120+var_B8]
.text:000000000002384C                 ADD             X0, X24, #8
.text:0000000000023850                 BL              sub_212B0
.text:0000000000023854                 LDP             Q0, Q1, [X28]
.text:0000000000023858                 ADD             X0, X24, #0x40 ; '@'
.text:000000000002385C                 STP             Q0, Q1, [X20]
.text:0000000000023860                 LDP             X1, X2, [SP,#0x120+var_80]
.text:0000000000023864                 BL              loc_21400
.text:0000000000023868 loc_23868                               ; CODE XREF: sub_234C8+37C↑j
.text:0000000000023868                 ADD             X0, SP, #0x120+var_C0 ; this
.text:000000000002386C                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023870                 MOV             X21, #0xAAAAAAAAAAAAAAAA
.text:0000000000023874                 ADD             W25, W25, #1
.text:0000000000023878                 MOVK            X21, #0xAAAB
.text:000000000002387C loc_2387C                               ; CODE XREF: sub_234C8+22C↑j
.text:000000000002387C                                         ; sub_234C8+318↑j ...
.text:000000000002387C                 CBNZ            W25, loc_238A8
.text:0000000000023880                 MOV             X0, X23
.text:0000000000023884                 MOV             X1, X26
.text:0000000000023888                 BL              sub_244F0
.text:000000000002388C                 ADD             X24, X26, #0x60 ; '`'
.text:0000000000023890                 MOV             W25, W0
.text:0000000000023894                 MOV             X0, X24
.text:0000000000023898                 MOV             X1, X19
.text:000000000002389C                 BL              sub_244F0
.text:00000000000238A0                 TBNZ            W0, #0, loc_23A54
.text:00000000000238A4                 TBNZ            W25, #0, loc_23578
.text:00000000000238A8 loc_238A8                               ; CODE XREF: sub_234C8:loc_2387C↑j
.text:00000000000238A8                 SUB             X8, X26, X23
.text:00000000000238AC                 SUB             X9, X19, X26
.text:00000000000238B0                 ASR             X8, X8, #5
.text:00000000000238B4                 ASR             X9, X9, #5
.text:00000000000238B8                 MUL             X8, X8, X21
.text:00000000000238BC                 MUL             X9, X9, X21
.text:00000000000238C0                 CMP             X8, X9
.text:00000000000238C4                 B.LT            loc_23568
.text:00000000000238C8                 B               loc_23514
.text:00000000000238CC ; ---------------------------------------------------------------------------
.text:00000000000238CC loc_238CC                               ; CODE XREF: sub_234C8+168↑j
.text:00000000000238CC                 LDR             X21, [SP,#0x120+var_F8]
.text:00000000000238D0                 ADD             X20, X23, #0x60 ; '`'
.text:00000000000238D4                 LDR             Q0, [SP,#0x120+var_E0]
.text:00000000000238D8                 LDR             Q1, [X21]
.text:00000000000238DC                 BL              .__lttf2
.text:00000000000238E0                 TBNZ            W0, #0x1F, loc_23988
.text:00000000000238E4                 LDR             X8, [SP,#0x120+var_E8]
.text:00000000000238E8                 CMP             X20, X8
.text:00000000000238EC                 B.EQ            loc_23C58
.text:00000000000238F0                 ADD             X20, X23, #0xC0
.text:00000000000238F4 loc_238F4                               ; CODE XREF: sub_234C8+448↓j
.text:00000000000238F4                 LDUR            Q1, [X20,#-0x40]
.text:00000000000238F8                 LDR             Q0, [SP,#0x120+var_E0]
.text:00000000000238FC                 BL              .__lttf2
.text:0000000000023900                 CMP             W0, #0
.text:0000000000023904                 B.LT            loc_23918
.text:0000000000023908                 ADD             X20, X20, #0x60 ; '`'
.text:000000000002390C                 CMP             X19, X20
.text:0000000000023910                 B.NE            loc_238F4
.text:0000000000023914                 B               loc_23C58
.text:0000000000023918 ; ---------------------------------------------------------------------------
.text:0000000000023918 loc_23918                               ; CODE XREF: sub_234C8+43C↑j
.text:0000000000023918                 SUB             X1, X20, #0x60 ; '`'
.text:000000000002391C                 ADD             X0, SP, #0x120+var_C0
.text:0000000000023920                 BL              sub_215F0
.text:0000000000023924                 LDUR            X8, [X19,#-0x60]
.text:0000000000023928                 SUB             X0, X20, #0x58 ; 'X'
.text:000000000002392C                 STUR            X8, [X20,#-0x60]
.text:0000000000023930                 LDP             X1, X2, [X19,#-0x58]
.text:0000000000023934                 BL              sub_212B0
.text:0000000000023938                 LDP             Q0, Q1, [X21]
.text:000000000002393C                 SUB             X0, X20, #0x20 ; ' '
.text:0000000000023940                 STP             Q0, Q1, [X20,#-0x40]
.text:0000000000023944                 LDP             X1, X2, [X19,#-0x20]
.text:0000000000023948                 BL              loc_21400
.text:000000000002394C                 LDR             X9, [SP,#0x120+var_E8]
.text:0000000000023950                 LDR             X8, [SP,#0x120+var_C0]
.text:0000000000023954                 CMP             X22, X9
.text:0000000000023958                 STUR            X8, [X19,#-0x60]
.text:000000000002395C                 B.EQ            loc_23980
.text:0000000000023960                 LDP             X1, X2, [SP,#0x120+var_B8]
.text:0000000000023964                 LDR             X0, [SP,#0x120+var_120]
.text:0000000000023968                 BL              sub_212B0
.text:000000000002396C                 LDP             Q0, Q1, [X28]
.text:0000000000023970                 STP             Q0, Q1, [X21]
.text:0000000000023974                 LDP             X1, X2, [SP,#0x120+var_80]
.text:0000000000023978                 LDR             X0, [SP,#0x120+var_118]
.text:000000000002397C                 BL              loc_21400
.text:0000000000023980 loc_23980                               ; CODE XREF: sub_234C8+494↑j
.text:0000000000023980                 ADD             X0, SP, #0x120+var_C0 ; this
.text:0000000000023984                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023988 loc_23988                               ; CODE XREF: sub_234C8+418↑j
.text:0000000000023988                 LDR             X8, [SP,#0x120+var_E8]
.text:000000000002398C                 CMP             X20, X8
.text:0000000000023990                 B.EQ            loc_23C58
.text:0000000000023994                 LDR             X23, [SP,#0x120+var_E8]
.text:0000000000023998                 B               loc_239A4
.text:000000000002399C ; ---------------------------------------------------------------------------
.text:000000000002399C loc_2399C                               ; CODE XREF: sub_234C8+560↓j
.text:000000000002399C                                         ; sub_234C8+588↓j
.text:000000000002399C                 ADD             X0, SP, #0x120+var_C0 ; this
.text:00000000000239A0                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000239A4 loc_239A4                               ; CODE XREF: sub_234C8+4D0↑j
.text:00000000000239A4                 LDR             Q0, [X27]
.text:00000000000239A8                 SUB             X24, X20, #0x60 ; '`'
.text:00000000000239AC                 STR             Q0, [SP,#0x120+var_D0]
.text:00000000000239B0 loc_239B0                               ; CODE XREF: sub_234C8+4FC↓j
.text:00000000000239B0                 LDR             Q1, [X24,#0x80]
.text:00000000000239B4                 ADD             X24, X24, #0x60 ; '`'
.text:00000000000239B8                 LDR             Q0, [SP,#0x120+var_D0]
.text:00000000000239BC                 BL              .__lttf2
.text:00000000000239C0                 CMP             W0, #0
.text:00000000000239C4                 B.GE            loc_239B0
.text:00000000000239C8                 ADD             X20, X24, #0x60 ; '`'
.text:00000000000239CC loc_239CC                               ; CODE XREF: sub_234C8+514↓j
.text:00000000000239CC                 LDUR            Q1, [X23,#-0x40]
.text:00000000000239D0                 SUB             X23, X23, #0x60 ; '`'
.text:00000000000239D4                 LDR             Q0, [SP,#0x120+var_D0]
.text:00000000000239D8                 BL              .__lttf2
.text:00000000000239DC                 TBNZ            W0, #0x1F, loc_239CC
.text:00000000000239E0                 CMP             X24, X23
.text:00000000000239E4                 B.CS            loc_2355C
.text:00000000000239E8                 ADD             X0, SP, #0x120+var_C0
.text:00000000000239EC                 MOV             X1, X24
.text:00000000000239F0                 BL              sub_215F0
.text:00000000000239F4                 LDR             X8, [X23]
.text:00000000000239F8                 ADD             X0, X24, #8
.text:00000000000239FC                 STR             X8, [X24]
.text:0000000000023A00                 LDP             X1, X2, [X23,#8]
.text:0000000000023A04                 BL              sub_212B0
.text:0000000000023A08                 LDP             Q0, Q1, [X23,#0x20]
.text:0000000000023A0C                 ADD             X0, X24, #0x40 ; '@'
.text:0000000000023A10                 STP             Q0, Q1, [X24,#0x20]
.text:0000000000023A14                 LDP             X1, X2, [X23,#0x40]
.text:0000000000023A18                 BL              loc_21400
.text:0000000000023A1C                 LDR             X8, [SP,#0x120+var_C0]
.text:0000000000023A20                 CMP             X22, X23
.text:0000000000023A24                 STR             X8, [X23]
.text:0000000000023A28                 B.EQ            loc_2399C
.text:0000000000023A2C                 LDP             X1, X2, [SP,#0x120+var_B8]
.text:0000000000023A30                 ADD             X0, X23, #8
.text:0000000000023A34                 ADD             X21, X23, #0x20 ; ' '
.text:0000000000023A38                 BL              sub_212B0
.text:0000000000023A3C                 LDP             Q0, Q1, [X28]
.text:0000000000023A40                 ADD             X0, X23, #0x40 ; '@'
.text:0000000000023A44                 STP             Q0, Q1, [X21]
.text:0000000000023A48                 LDP             X1, X2, [SP,#0x120+var_80]
.text:0000000000023A4C                 BL              loc_21400
.text:0000000000023A50                 B               loc_2399C
.text:0000000000023A54 ; ---------------------------------------------------------------------------
.text:0000000000023A54 loc_23A54                               ; CODE XREF: sub_234C8+3D8↑j
.text:0000000000023A54                 MOV             X19, X26
.text:0000000000023A58                 TBZ             W25, #0, loc_23524
.text:0000000000023A5C                 B               loc_23C58
.text:0000000000023A60 ; ---------------------------------------------------------------------------
.text:0000000000023A60 loc_23A60                               ; CODE XREF: sub_234C8+C4↑j
.text:0000000000023A60                 ADRP            X8, #unk_8670@PAGE
.text:0000000000023A64                 ADD             X8, X8, #unk_8670@PAGEOFF
.text:0000000000023A68                 ADR             X10, loc_23A7C
.text:0000000000023A6C                 LDRB            W11, [X8,X9]
.text:0000000000023A70                 ADD             X10, X10, X11,LSL#2
.text:0000000000023A74                 LDR             X22, [SP,#0x120+var_F8]
.text:0000000000023A78                 BR              X10
.text:0000000000023A7C ; ---------------------------------------------------------------------------
.text:0000000000023A7C loc_23A7C                               ; DATA XREF: sub_234C8+5A0↑o
.text:0000000000023A7C                 LDUR            Q0, [X19,#-0x40]
.text:0000000000023A80                 LDR             Q1, [X23,#0x20]
.text:0000000000023A84                 BL              .__lttf2
.text:0000000000023A88                 CMP             W0, #0
.text:0000000000023A8C                 B.GE            loc_23C58
.text:0000000000023A90                 ADD             X0, SP, #0x120+var_C0
.text:0000000000023A94                 MOV             X1, X23
.text:0000000000023A98                 ADD             X20, SP, #0x120+var_C0
.text:0000000000023A9C                 BL              sub_215F0
.text:0000000000023AA0                 LDR             X9, [SP,#0x120+var_E8]
.text:0000000000023AA4                 LDR             X8, [X9]
.text:0000000000023AA8                 CMP             X23, X9
.text:0000000000023AAC                 STR             X8, [X23]
.text:0000000000023AB0                 B.EQ            loc_23AD8
.text:0000000000023AB4                 LDP             X1, X2, [X19,#-0x58]
.text:0000000000023AB8                 ADD             X0, X23, #8
.text:0000000000023ABC                 ADD             X21, X23, #0x20 ; ' '
.text:0000000000023AC0                 BL              sub_212B0
.text:0000000000023AC4                 LDP             Q0, Q1, [X22]
.text:0000000000023AC8                 ADD             X0, X23, #0x40 ; '@'
.text:0000000000023ACC                 STP             Q0, Q1, [X21]
.text:0000000000023AD0                 LDP             X1, X2, [X19,#-0x20]
.text:0000000000023AD4                 BL              loc_21400
.text:0000000000023AD8 loc_23AD8                               ; CODE XREF: sub_234C8+5E8↑j
.text:0000000000023AD8                 LDR             X9, [SP,#0x120+var_E8]
.text:0000000000023ADC                 LDR             X8, [SP,#0x120+var_C0]
.text:0000000000023AE0                 CMP             X20, X9
.text:0000000000023AE4                 STR             X8, [X9]
.text:0000000000023AE8                 B.EQ            loc_23B0C
.text:0000000000023AEC                 LDP             X1, X2, [SP,#0x120+var_B8]
.text:0000000000023AF0                 LDR             X0, [SP,#0x120+var_120]
.text:0000000000023AF4                 BL              sub_212B0
.text:0000000000023AF8                 LDP             Q0, Q1, [SP,#0x120+var_A0]
.text:0000000000023AFC                 STP             Q0, Q1, [X22]
.text:0000000000023B00                 LDP             X1, X2, [SP,#0x120+var_80]
.text:0000000000023B04                 LDR             X0, [SP,#0x120+var_118]
.text:0000000000023B08                 BL              loc_21400
.text:0000000000023B0C loc_23B0C                               ; CODE XREF: sub_234C8+620↑j
.text:0000000000023B0C                 ADD             X0, SP, #0x120+var_C0 ; this
.text:0000000000023B10                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023B14                 B               loc_23C58
.text:0000000000023B18 ; ---------------------------------------------------------------------------
.text:0000000000023B18 loc_23B18                               ; CODE XREF: sub_234C8+CC↑j
.text:0000000000023B18                 ADD             X20, X23, #0xC0
.text:0000000000023B1C                 ADD             X1, X23, #0x60 ; '`'
.text:0000000000023B20                 MOV             X0, X23
.text:0000000000023B24                 MOV             X2, X20
.text:0000000000023B28                 BL              sub_23C90
.text:0000000000023B2C                 ADD             X8, X23, #0x120
.text:0000000000023B30                 CMP             X8, X19
.text:0000000000023B34                 B.EQ            loc_23C58
.text:0000000000023B38                 ADD             X22, SP, #0x120+var_C0
.text:0000000000023B3C                 MOV             X21, XZR
.text:0000000000023B40                 ADD             X24, X22, #0x20 ; ' '
.text:0000000000023B44 loc_23B44                               ; CODE XREF: sub_234C8+744↓j
.text:0000000000023B44                 MOV             X9, X20
.text:0000000000023B48                 LDR             Q0, [X8,#0x20]
.text:0000000000023B4C                 MOV             X20, X8
.text:0000000000023B50                 LDR             Q1, [X9,#0x20]
.text:0000000000023B54                 BL              .__lttf2
.text:0000000000023B58                 CMP             W0, #0
.text:0000000000023B5C                 B.GE            loc_23C00
.text:0000000000023B60                 ADD             X0, SP, #0x120+var_C0
.text:0000000000023B64                 MOV             X1, X20
.text:0000000000023B68                 BL              sub_215F0
.text:0000000000023B6C                 MOV             X25, X21
.text:0000000000023B70 loc_23B70                               ; CODE XREF: sub_234C8+6EC↓j
.text:0000000000023B70                 ADD             X26, X23, X25
.text:0000000000023B74                 ADD             X0, X26, #0x128
.text:0000000000023B78                 LDP             X8, X1, [X26,#0xC0]
.text:0000000000023B7C                 LDR             X2, [X26,#0xD0]
.text:0000000000023B80                 STR             X8, [X26,#0x120]
.text:0000000000023B84                 BL              sub_212B0
.text:0000000000023B88                 LDP             Q0, Q1, [X26,#0xE0]
.text:0000000000023B8C                 LDP             X1, X2, [X26,#0x100]
.text:0000000000023B90                 ADD             X0, X26, #0x160
.text:0000000000023B94                 STP             Q0, Q1, [X26,#0x140]
.text:0000000000023B98                 BL              loc_21400
.text:0000000000023B9C                 CMN             X25, #0xC0
.text:0000000000023BA0                 B.EQ            loc_23BC4
.text:0000000000023BA4                 LDR             Q0, [SP,#0x120+var_A0]
.text:0000000000023BA8                 SUB             X25, X25, #0x60 ; '`'
.text:0000000000023BAC                 LDR             Q1, [X26,#0x80]
.text:0000000000023BB0                 BL              .__lttf2
.text:0000000000023BB4                 TBNZ            W0, #0x1F, loc_23B70
.text:0000000000023BB8                 ADD             X8, X23, X25
.text:0000000000023BBC                 ADD             X25, X8, #0x120
.text:0000000000023BC0                 B               loc_23BC8
.text:0000000000023BC4 ; ---------------------------------------------------------------------------
.text:0000000000023BC4 loc_23BC4                               ; CODE XREF: sub_234C8+6D8↑j
.text:0000000000023BC4                 MOV             X25, X23
.text:0000000000023BC8 loc_23BC8                               ; CODE XREF: sub_234C8+6F8↑j
.text:0000000000023BC8                 LDR             X8, [SP,#0x120+var_C0]
.text:0000000000023BCC                 CMP             X25, X22
.text:0000000000023BD0                 STR             X8, [X25]
.text:0000000000023BD4                 B.EQ            loc_23BF8
.text:0000000000023BD8                 LDP             X1, X2, [SP,#0x120+var_B8]
.text:0000000000023BDC                 ADD             X0, X25, #8
.text:0000000000023BE0                 BL              sub_212B0
.text:0000000000023BE4                 LDP             Q0, Q1, [X24]
.text:0000000000023BE8                 ADD             X0, X25, #0x40 ; '@'
.text:0000000000023BEC                 STP             Q0, Q1, [X25,#0x20]
.text:0000000000023BF0                 LDP             X1, X2, [SP,#0x120+var_80]
.text:0000000000023BF4                 BL              loc_21400
.text:0000000000023BF8 loc_23BF8                               ; CODE XREF: sub_234C8+70C↑j
.text:0000000000023BF8                 ADD             X0, SP, #0x120+var_C0 ; this
.text:0000000000023BFC                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023C00 loc_23C00                               ; CODE XREF: sub_234C8+694↑j
.text:0000000000023C00                 ADD             X8, X20, #0x60 ; '`'
.text:0000000000023C04                 ADD             X21, X21, #0x60 ; '`'
.text:0000000000023C08                 CMP             X8, X19
.text:0000000000023C0C                 B.NE            loc_23B44
.text:0000000000023C10                 B               loc_23C58
.text:0000000000023C14 ; ---------------------------------------------------------------------------
.text:0000000000023C14                 LDR             X2, [SP,#0x120+var_E8]
.text:0000000000023C18                 ADD             X1, X23, #0x60 ; '`'
.text:0000000000023C1C                 MOV             X0, X23
.text:0000000000023C20                 BL              sub_23C90
.text:0000000000023C24                 B               loc_23C58
.text:0000000000023C28 ; ---------------------------------------------------------------------------
.text:0000000000023C28                 LDR             X4, [SP,#0x120+var_E8]
.text:0000000000023C2C                 ADD             X1, X23, #0x60 ; '`'
.text:0000000000023C30                 ADD             X2, X23, #0xC0
.text:0000000000023C34                 ADD             X3, X23, #0x120
.text:0000000000023C38                 MOV             X0, X23
.text:0000000000023C3C                 BL              sub_24210
.text:0000000000023C40                 B               loc_23C58
.text:0000000000023C44 ; ---------------------------------------------------------------------------
.text:0000000000023C44                 LDR             X3, [SP,#0x120+var_E8]
.text:0000000000023C48                 ADD             X1, X23, #0x60 ; '`'
.text:0000000000023C4C                 ADD             X2, X23, #0xC0
.text:0000000000023C50                 MOV             X0, X23
.text:0000000000023C54                 BL              sub_23FC8
.text:0000000000023C58 loc_23C58                               ; CODE XREF: sub_234C8+424↑j
.text:0000000000023C58                                         ; sub_234C8+44C↑j ...
.text:0000000000023C58                 LDR             X8, [SP,#0x120+var_110]
.text:0000000000023C5C                 LDR             X8, [X8,#0x28]
.text:0000000000023C60                 LDUR            X9, [X29,#var_60]
.text:0000000000023C64                 CMP             X8, X9
.text:0000000000023C68                 B.NE            loc_23C8C
.text:0000000000023C6C                 LDP             X29, X30, [SP,#0x120+var_s0]
.text:0000000000023C70                 LDP             X20, X19, [SP,#0x120+var_10]
.text:0000000000023C74                 LDP             X22, X21, [SP,#0x120+var_20]
.text:0000000000023C78                 LDP             X24, X23, [SP,#0x120+var_30]
.text:0000000000023C7C                 LDP             X26, X25, [SP,#0x120+var_40]
.text:0000000000023C80                 LDP             X28, X27, [SP,#0x120+var_50]
.text:0000000000023C84                 ADD             SP, SP, #0x130
.text:0000000000023C88                 RET
.text:0000000000023C8C ; ---------------------------------------------------------------------------
.text:0000000000023C8C loc_23C8C                               ; CODE XREF: sub_234C8+7A0↑j
.text:0000000000023C8C                 BL              .__stack_chk_fail
.text:0000000000023C8C ; } // starts at 234C8
.text:0000000000023C8C ; End of function sub_234C8
.text:0000000000023C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000023C90 ; Attributes: bp-based frame
.text:0000000000023C90 sub_23C90                               ; CODE XREF: sub_234C8+124↑p
.text:0000000000023C90                                         ; sub_234C8+660↑p ...
.text:0000000000023C90 var_D0          = -0xD0
.text:0000000000023C90 var_B0          = -0xB0
.text:0000000000023C90 var_A8          = -0xA8
.text:0000000000023C90 var_90          = -0x90
.text:0000000000023C90 var_70          = -0x70
.text:0000000000023C90 var_48          = -0x48
.text:0000000000023C90 var_40          = -0x40
.text:0000000000023C90 var_30          = -0x30
.text:0000000000023C90 var_20          = -0x20
.text:0000000000023C90 var_10          = -0x10
.text:0000000000023C90 var_s0          =  0
.text:0000000000023C90 ; __unwind {
.text:0000000000023C90                 SUB             SP, SP, #0xE0
.text:0000000000023C94                 STP             X26, X25, [SP,#0xD0+var_40]
.text:0000000000023C98                 STP             X24, X23, [SP,#0xD0+var_30]
.text:0000000000023C9C                 STP             X22, X21, [SP,#0xD0+var_20]
.text:0000000000023CA0                 STP             X20, X19, [SP,#0xD0+var_10]
.text:0000000000023CA4                 STP             X29, X30, [SP,#0xD0+var_s0]
.text:0000000000023CA8                 ADD             X29, SP, #0xD0
.text:0000000000023CAC                 MRS             X22, #3, c13, c0, #2
.text:0000000000023CB0                 MOV             X19, X2
.text:0000000000023CB4                 LDR             X8, [X22,#0x28]
.text:0000000000023CB8                 MOV             X20, X1
.text:0000000000023CBC                 MOV             X21, X0
.text:0000000000023CC0                 ADD             X24, X1, #0x20 ; ' '
.text:0000000000023CC4                 ADD             X25, X0, #0x20 ; ' '
.text:0000000000023CC8                 STUR            X8, [X29,#var_48]
.text:0000000000023CCC                 ADD             X23, X2, #0x20 ; ' '
.text:0000000000023CD0                 LDR             Q0, [X1,#0x20]
.text:0000000000023CD4                 LDR             Q1, [X0,#0x20]
.text:0000000000023CD8                 LDR             Q2, [X2,#0x20]
.text:0000000000023CDC                 STP             Q2, Q0, [SP,#0xD0+var_D0]
.text:0000000000023CE0                 BL              .__lttf2
.text:0000000000023CE4                 TBZ             W0, #0x1F, loc_23D74
.text:0000000000023CE8                 LDP             Q0, Q1, [SP,#0xD0+var_D0]
.text:0000000000023CEC                 BL              .__lttf2
.text:0000000000023CF0                 CMP             W0, #0
.text:0000000000023CF4                 B.GE            loc_23E80
.text:0000000000023CF8                 ADD             X0, SP, #0xD0+var_B0
.text:0000000000023CFC                 MOV             X1, X21
.text:0000000000023D00                 ADD             X20, SP, #0xD0+var_B0
.text:0000000000023D04                 BL              sub_215F0
.text:0000000000023D08                 LDR             X8, [X19]
.text:0000000000023D0C                 CMP             X21, X19
.text:0000000000023D10                 STR             X8, [X21]
.text:0000000000023D14                 B.EQ            loc_23D38
.text:0000000000023D18                 LDP             X1, X2, [X19,#8]
.text:0000000000023D1C                 ADD             X0, X21, #8
.text:0000000000023D20                 BL              sub_212B0
.text:0000000000023D24                 LDP             Q0, Q1, [X23]
.text:0000000000023D28                 ADD             X0, X21, #0x40 ; '@'
.text:0000000000023D2C                 STP             Q0, Q1, [X25]
.text:0000000000023D30                 LDP             X1, X2, [X19,#0x40]
.text:0000000000023D34                 BL              loc_21400
.text:0000000000023D38 loc_23D38                               ; CODE XREF: sub_23C90+84↑j
.text:0000000000023D38                 LDR             X8, [SP,#0xD0+var_B0]
.text:0000000000023D3C                 CMP             X20, X19
.text:0000000000023D40                 STR             X8, [X19]
.text:0000000000023D44                 B.EQ            loc_23D68
.text:0000000000023D48                 LDP             X1, X2, [SP,#0xD0+var_A8]
.text:0000000000023D4C                 ADD             X0, X19, #8
.text:0000000000023D50                 BL              sub_212B0
.text:0000000000023D54                 LDP             Q1, Q0, [SP,#0xD0+var_90]
.text:0000000000023D58                 LDP             X1, X2, [SP,#0xD0+var_70]
.text:0000000000023D5C                 ADD             X0, X19, #0x40 ; '@'
.text:0000000000023D60                 STP             Q1, Q0, [X23]
.text:0000000000023D64                 BL              loc_21400
.text:0000000000023D68 loc_23D68                               ; CODE XREF: sub_23C90+B4↑j
.text:0000000000023D68                 ADD             X0, SP, #0xD0+var_B0 ; this
.text:0000000000023D6C                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023D70                 B               loc_23F8C
.text:0000000000023D74 ; ---------------------------------------------------------------------------
.text:0000000000023D74 loc_23D74                               ; CODE XREF: sub_23C90+54↑j
.text:0000000000023D74                 LDP             Q0, Q1, [SP,#0xD0+var_D0]
.text:0000000000023D78                 BL              .__lttf2
.text:0000000000023D7C                 CMP             W0, #0
.text:0000000000023D80                 B.GE            loc_23F94
.text:0000000000023D84                 ADD             X0, SP, #0xD0+var_B0
.text:0000000000023D88                 MOV             X1, X20
.text:0000000000023D8C                 ADD             X26, SP, #0xD0+var_B0
.text:0000000000023D90                 BL              sub_215F0
.text:0000000000023D94                 LDR             X8, [X19]
.text:0000000000023D98                 CMP             X20, X19
.text:0000000000023D9C                 STR             X8, [X20]
.text:0000000000023DA0                 B.EQ            loc_23DC4
.text:0000000000023DA4                 LDP             X1, X2, [X19,#8]
.text:0000000000023DA8                 ADD             X0, X20, #8
.text:0000000000023DAC                 BL              sub_212B0
.text:0000000000023DB0                 LDP             Q0, Q1, [X23]
.text:0000000000023DB4                 ADD             X0, X20, #0x40 ; '@'
.text:0000000000023DB8                 STP             Q0, Q1, [X24]
.text:0000000000023DBC                 LDP             X1, X2, [X19,#0x40]
.text:0000000000023DC0                 BL              loc_21400
.text:0000000000023DC4 loc_23DC4                               ; CODE XREF: sub_23C90+110↑j
.text:0000000000023DC4                 LDR             X8, [SP,#0xD0+var_B0]
.text:0000000000023DC8                 CMP             X26, X19
.text:0000000000023DCC                 STR             X8, [X19]
.text:0000000000023DD0                 B.EQ            loc_23DF4
.text:0000000000023DD4                 LDP             X1, X2, [SP,#0xD0+var_A8]
.text:0000000000023DD8                 ADD             X0, X19, #8
.text:0000000000023DDC                 BL              sub_212B0
.text:0000000000023DE0                 LDP             Q1, Q0, [SP,#0xD0+var_90]
.text:0000000000023DE4                 LDP             X1, X2, [SP,#0xD0+var_70]
.text:0000000000023DE8                 ADD             X0, X19, #0x40 ; '@'
.text:0000000000023DEC                 STP             Q1, Q0, [X23]
.text:0000000000023DF0                 BL              loc_21400
.text:0000000000023DF4 loc_23DF4                               ; CODE XREF: sub_23C90+140↑j
.text:0000000000023DF4                 ADD             X0, SP, #0xD0+var_B0 ; this
.text:0000000000023DF8                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023DFC                 LDR             Q0, [X24]
.text:0000000000023E00                 LDR             Q1, [X25]
.text:0000000000023E04                 BL              .__lttf2
.text:0000000000023E08                 CMP             W0, #0
.text:0000000000023E0C                 B.GE            loc_23F8C
.text:0000000000023E10                 ADD             X0, SP, #0xD0+var_B0
.text:0000000000023E14                 MOV             X1, X21
.text:0000000000023E18                 ADD             X19, SP, #0xD0+var_B0
.text:0000000000023E1C                 BL              sub_215F0
.text:0000000000023E20                 LDR             X8, [X20]
.text:0000000000023E24                 CMP             X21, X20
.text:0000000000023E28                 STR             X8, [X21]
.text:0000000000023E2C                 B.EQ            loc_23E50
.text:0000000000023E30                 LDP             X1, X2, [X20,#8]
.text:0000000000023E34                 ADD             X0, X21, #8
.text:0000000000023E38                 BL              sub_212B0
.text:0000000000023E3C                 LDP             Q0, Q1, [X24]
.text:0000000000023E40                 ADD             X0, X21, #0x40 ; '@'
.text:0000000000023E44                 STP             Q0, Q1, [X25]
.text:0000000000023E48                 LDP             X1, X2, [X20,#0x40]
.text:0000000000023E4C                 BL              loc_21400
.text:0000000000023E50 loc_23E50                               ; CODE XREF: sub_23C90+19C↑j
.text:0000000000023E50                 LDR             X8, [SP,#0xD0+var_B0]
.text:0000000000023E54                 CMP             X19, X20
.text:0000000000023E58                 STR             X8, [X20]
.text:0000000000023E5C                 B.EQ            loc_23F7C
.text:0000000000023E60                 LDP             X1, X2, [SP,#0xD0+var_A8]
.text:0000000000023E64                 ADD             X0, X20, #8
.text:0000000000023E68                 BL              sub_212B0
.text:0000000000023E6C                 LDP             Q1, Q0, [SP,#0xD0+var_90]
.text:0000000000023E70                 LDP             X1, X2, [SP,#0xD0+var_70]
.text:0000000000023E74                 ADD             X0, X20, #0x40 ; '@'
.text:0000000000023E78                 STP             Q1, Q0, [X24]
.text:0000000000023E7C                 B               loc_23F78
.text:0000000000023E80 ; ---------------------------------------------------------------------------
.text:0000000000023E80 loc_23E80                               ; CODE XREF: sub_23C90+64↑j
.text:0000000000023E80                 ADD             X0, SP, #0xD0+var_B0
.text:0000000000023E84                 MOV             X1, X21
.text:0000000000023E88                 ADD             X26, SP, #0xD0+var_B0
.text:0000000000023E8C                 BL              sub_215F0
.text:0000000000023E90                 LDR             X8, [X20]
.text:0000000000023E94                 CMP             X21, X20
.text:0000000000023E98                 STR             X8, [X21]
.text:0000000000023E9C                 B.EQ            loc_23EC0
.text:0000000000023EA0                 LDP             X1, X2, [X20,#8]
.text:0000000000023EA4                 ADD             X0, X21, #8
.text:0000000000023EA8                 BL              sub_212B0
.text:0000000000023EAC                 LDP             Q0, Q1, [X24]
.text:0000000000023EB0                 ADD             X0, X21, #0x40 ; '@'
.text:0000000000023EB4                 STP             Q0, Q1, [X25]
.text:0000000000023EB8                 LDP             X1, X2, [X20,#0x40]
.text:0000000000023EBC                 BL              loc_21400
.text:0000000000023EC0 loc_23EC0                               ; CODE XREF: sub_23C90+20C↑j
.text:0000000000023EC0                 LDR             X8, [SP,#0xD0+var_B0]
.text:0000000000023EC4                 CMP             X26, X20
.text:0000000000023EC8                 STR             X8, [X20]
.text:0000000000023ECC                 B.EQ            loc_23EF0
.text:0000000000023ED0                 LDP             X1, X2, [SP,#0xD0+var_A8]
.text:0000000000023ED4                 ADD             X0, X20, #8
.text:0000000000023ED8                 BL              sub_212B0
.text:0000000000023EDC                 LDP             Q1, Q0, [SP,#0xD0+var_90]
.text:0000000000023EE0                 LDP             X1, X2, [SP,#0xD0+var_70]
.text:0000000000023EE4                 ADD             X0, X20, #0x40 ; '@'
.text:0000000000023EE8                 STP             Q1, Q0, [X24]
.text:0000000000023EEC                 BL              loc_21400
.text:0000000000023EF0 loc_23EF0                               ; CODE XREF: sub_23C90+23C↑j
.text:0000000000023EF0                 ADD             X0, SP, #0xD0+var_B0 ; this
.text:0000000000023EF4                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023EF8                 LDR             Q0, [X23]
.text:0000000000023EFC                 LDR             Q1, [X24]
.text:0000000000023F00                 BL              .__lttf2
.text:0000000000023F04                 CMP             W0, #0
.text:0000000000023F08                 B.GE            loc_23F8C
.text:0000000000023F0C                 ADD             X0, SP, #0xD0+var_B0
.text:0000000000023F10                 MOV             X1, X20
.text:0000000000023F14                 ADD             X21, SP, #0xD0+var_B0
.text:0000000000023F18                 BL              sub_215F0
.text:0000000000023F1C                 LDR             X8, [X19]
.text:0000000000023F20                 CMP             X20, X19
.text:0000000000023F24                 STR             X8, [X20]
.text:0000000000023F28                 B.EQ            loc_23F4C
.text:0000000000023F2C                 LDP             X1, X2, [X19,#8]
.text:0000000000023F30                 ADD             X0, X20, #8
.text:0000000000023F34                 BL              sub_212B0
.text:0000000000023F38                 LDP             Q0, Q1, [X23]
.text:0000000000023F3C                 ADD             X0, X20, #0x40 ; '@'
.text:0000000000023F40                 STP             Q0, Q1, [X24]
.text:0000000000023F44                 LDP             X1, X2, [X19,#0x40]
.text:0000000000023F48                 BL              loc_21400
.text:0000000000023F4C loc_23F4C                               ; CODE XREF: sub_23C90+298↑j
.text:0000000000023F4C                 LDR             X8, [SP,#0xD0+var_B0]
.text:0000000000023F50                 CMP             X21, X19
.text:0000000000023F54                 STR             X8, [X19]
.text:0000000000023F58                 B.EQ            loc_23F7C
.text:0000000000023F5C                 LDP             X1, X2, [SP,#0xD0+var_A8]
.text:0000000000023F60                 ADD             X0, X19, #8
.text:0000000000023F64                 BL              sub_212B0
.text:0000000000023F68                 LDP             Q1, Q0, [SP,#0xD0+var_90]
.text:0000000000023F6C                 LDP             X1, X2, [SP,#0xD0+var_70]
.text:0000000000023F70                 ADD             X0, X19, #0x40 ; '@'
.text:0000000000023F74                 STP             Q1, Q0, [X23]
.text:0000000000023F78 loc_23F78                               ; CODE XREF: sub_23C90+1EC↑j
.text:0000000000023F78                 BL              loc_21400
.text:0000000000023F7C loc_23F7C                               ; CODE XREF: sub_23C90+1CC↑j
.text:0000000000023F7C                                         ; sub_23C90+2C8↑j
.text:0000000000023F7C                 ADD             X0, SP, #0xD0+var_B0 ; this
.text:0000000000023F80                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000023F84                 MOV             W0, #2
.text:0000000000023F88                 B               loc_23F98
.text:0000000000023F8C ; ---------------------------------------------------------------------------
.text:0000000000023F8C loc_23F8C                               ; CODE XREF: sub_23C90+E0↑j
.text:0000000000023F8C                                         ; sub_23C90+17C↑j ...
.text:0000000000023F8C                 MOV             W0, #1
.text:0000000000023F90                 B               loc_23F98
.text:0000000000023F94 ; ---------------------------------------------------------------------------
.text:0000000000023F94 loc_23F94                               ; CODE XREF: sub_23C90+F0↑j
.text:0000000000023F94                 MOV             W0, WZR
.text:0000000000023F98 loc_23F98                               ; CODE XREF: sub_23C90+2F8↑j
.text:0000000000023F98                                         ; sub_23C90+300↑j
.text:0000000000023F98                 LDR             X8, [X22,#0x28]
.text:0000000000023F9C                 LDUR            X9, [X29,#var_48]
.text:0000000000023FA0                 CMP             X8, X9
.text:0000000000023FA4                 B.NE            loc_23FC4
.text:0000000000023FA8                 LDP             X29, X30, [SP,#0xD0+var_s0]
.text:0000000000023FAC                 LDP             X20, X19, [SP,#0xD0+var_10]
.text:0000000000023FB0                 LDP             X22, X21, [SP,#0xD0+var_20]
.text:0000000000023FB4                 LDP             X24, X23, [SP,#0xD0+var_30]
.text:0000000000023FB8                 LDP             X26, X25, [SP,#0xD0+var_40]
.text:0000000000023FBC                 ADD             SP, SP, #0xE0
.text:0000000000023FC0                 RET
.text:0000000000023FC4 ; ---------------------------------------------------------------------------
.text:0000000000023FC4 loc_23FC4                               ; CODE XREF: sub_23C90+314↑j
.text:0000000000023FC4                 BL              .__stack_chk_fail
.text:0000000000023FC4 ; } // starts at 23C90
.text:0000000000023FC4 ; End of function sub_23C90
.text:0000000000023FC8 ; =============== S U B R O U T I N E =======================================
.text:0000000000023FC8 ; Attributes: bp-based frame
.text:0000000000023FC8 sub_23FC8                               ; CODE XREF: sub_234C8+78C↑p
.text:0000000000023FC8                                         ; sub_24210+40↓p ...
.text:0000000000023FC8 var_C0          = -0xC0
.text:0000000000023FC8 var_B8          = -0xB8
.text:0000000000023FC8 var_A0          = -0xA0
.text:0000000000023FC8 var_80          = -0x80
.text:0000000000023FC8 var_58          = -0x58
.text:0000000000023FC8 var_50          = -0x50
.text:0000000000023FC8 var_40          = -0x40
.text:0000000000023FC8 var_30          = -0x30
.text:0000000000023FC8 var_20          = -0x20
.text:0000000000023FC8 var_10          = -0x10
.text:0000000000023FC8 var_s0          =  0
.text:0000000000023FC8 ; __unwind {
.text:0000000000023FC8                 SUB             SP, SP, #0xD0
.text:0000000000023FCC                 STR             X27, [SP,#0xC0+var_50]
.text:0000000000023FD0                 STP             X26, X25, [SP,#0xC0+var_40]
.text:0000000000023FD4                 STP             X24, X23, [SP,#0xC0+var_30]
.text:0000000000023FD8                 STP             X22, X21, [SP,#0xC0+var_20]
.text:0000000000023FDC                 STP             X20, X19, [SP,#0xC0+var_10]
.text:0000000000023FE0                 STP             X29, X30, [SP,#0xC0+var_s0]
.text:0000000000023FE4                 ADD             X29, SP, #0xC0
.text:0000000000023FE8                 MRS             X24, #3, c13, c0, #2
.text:0000000000023FEC                 MOV             X23, X3
.text:0000000000023FF0                 LDR             X8, [X24,#0x28]
.text:0000000000023FF4                 MOV             X22, X2
.text:0000000000023FF8                 MOV             X20, X1
.text:0000000000023FFC                 MOV             X21, X0
.text:0000000000024000                 STUR            X8, [X29,#var_58]
.text:0000000000024004                 BL              sub_23C90
.text:0000000000024008                 LDR             Q0, [X23,#0x20]
.text:000000000002400C                 MOV             W19, W0
.text:0000000000024010                 LDR             Q1, [X22,#0x20]
.text:0000000000024014                 BL              .__lttf2
.text:0000000000024018                 CMP             W0, #0
.text:000000000002401C                 B.GE            loc_241D4
.text:0000000000024020                 MOV             X0, SP
.text:0000000000024024                 MOV             X1, X22
.text:0000000000024028                 ADD             X26, X23, #0x20 ; ' '
.text:000000000002402C                 ADD             X25, X22, #0x20 ; ' '
.text:0000000000024030                 MOV             X27, SP
.text:0000000000024034                 BL              sub_215F0
.text:0000000000024038                 LDR             X8, [X23]
.text:000000000002403C                 CMP             X22, X23
.text:0000000000024040                 STR             X8, [X22]
.text:0000000000024044                 B.EQ            loc_24068
.text:0000000000024048                 LDP             X1, X2, [X23,#8]
.text:000000000002404C                 ADD             X0, X22, #8
.text:0000000000024050                 BL              sub_212B0
.text:0000000000024054                 LDP             Q0, Q1, [X26]
.text:0000000000024058                 ADD             X0, X22, #0x40 ; '@'
.text:000000000002405C                 STP             Q0, Q1, [X25]
.text:0000000000024060                 LDP             X1, X2, [X23,#0x40]
.text:0000000000024064                 BL              loc_21400
.text:0000000000024068 loc_24068                               ; CODE XREF: sub_23FC8+7C↑j
.text:0000000000024068                 LDR             X8, [SP,#0xC0+var_C0]
.text:000000000002406C                 CMP             X27, X23
.text:0000000000024070                 STR             X8, [X23]
.text:0000000000024074                 B.EQ            loc_24098
.text:0000000000024078                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:000000000002407C                 ADD             X0, X23, #8
.text:0000000000024080                 BL              sub_212B0
.text:0000000000024084                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:0000000000024088                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:000000000002408C                 ADD             X0, X23, #0x40 ; '@'
.text:0000000000024090                 STP             Q1, Q0, [X26]
.text:0000000000024094                 BL              loc_21400
.text:0000000000024098 loc_24098                               ; CODE XREF: sub_23FC8+AC↑j
.text:0000000000024098                 MOV             X0, SP  ; this
.text:000000000002409C                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000240A0                 LDR             Q0, [X25]
.text:00000000000240A4                 LDR             Q1, [X20,#0x20]
.text:00000000000240A8                 BL              .__lttf2
.text:00000000000240AC                 CMP             W0, #0
.text:00000000000240B0                 B.GE            loc_241C8
.text:00000000000240B4                 MOV             X0, SP
.text:00000000000240B8                 MOV             X1, X20
.text:00000000000240BC                 ADD             X23, X20, #0x20 ; ' '
.text:00000000000240C0                 MOV             X26, SP
.text:00000000000240C4                 BL              sub_215F0
.text:00000000000240C8                 LDR             X8, [X22]
.text:00000000000240CC                 CMP             X20, X22
.text:00000000000240D0                 STR             X8, [X20]
.text:00000000000240D4                 B.EQ            loc_240F8
.text:00000000000240D8                 LDP             X1, X2, [X22,#8]
.text:00000000000240DC                 ADD             X0, X20, #8
.text:00000000000240E0                 BL              sub_212B0
.text:00000000000240E4                 LDP             Q0, Q1, [X25]
.text:00000000000240E8                 ADD             X0, X20, #0x40 ; '@'
.text:00000000000240EC                 STP             Q0, Q1, [X23]
.text:00000000000240F0                 LDP             X1, X2, [X22,#0x40]
.text:00000000000240F4                 BL              loc_21400
.text:00000000000240F8 loc_240F8                               ; CODE XREF: sub_23FC8+10C↑j
.text:00000000000240F8                 LDR             X8, [SP,#0xC0+var_C0]
.text:00000000000240FC                 CMP             X26, X22
.text:0000000000024100                 STR             X8, [X22]
.text:0000000000024104                 B.EQ            loc_24128
.text:0000000000024108                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:000000000002410C                 ADD             X0, X22, #8
.text:0000000000024110                 BL              sub_212B0
.text:0000000000024114                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:0000000000024118                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:000000000002411C                 ADD             X0, X22, #0x40 ; '@'
.text:0000000000024120                 STP             Q1, Q0, [X25]
.text:0000000000024124                 BL              loc_21400
.text:0000000000024128 loc_24128                               ; CODE XREF: sub_23FC8+13C↑j
.text:0000000000024128                 MOV             X0, SP  ; this
.text:000000000002412C                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000024130                 LDR             Q0, [X23]
.text:0000000000024134                 LDR             Q1, [X21,#0x20]
.text:0000000000024138                 BL              .__lttf2
.text:000000000002413C                 CMP             W0, #0
.text:0000000000024140                 B.GE            loc_241D0
.text:0000000000024144                 MOV             X0, SP
.text:0000000000024148                 MOV             X1, X21
.text:000000000002414C                 MOV             X22, SP
.text:0000000000024150                 BL              sub_215F0
.text:0000000000024154                 LDR             X8, [X20]
.text:0000000000024158                 CMP             X21, X20
.text:000000000002415C                 STR             X8, [X21]
.text:0000000000024160                 B.EQ            loc_24188
.text:0000000000024164                 LDP             X1, X2, [X20,#8]
.text:0000000000024168                 ADD             X0, X21, #8
.text:000000000002416C                 ADD             X25, X21, #0x20 ; ' '
.text:0000000000024170                 BL              sub_212B0
.text:0000000000024174                 LDP             Q0, Q1, [X23]
.text:0000000000024178                 ADD             X0, X21, #0x40 ; '@'
.text:000000000002417C                 STP             Q0, Q1, [X25]
.text:0000000000024180                 LDP             X1, X2, [X20,#0x40]
.text:0000000000024184                 BL              loc_21400
.text:0000000000024188 loc_24188                               ; CODE XREF: sub_23FC8+198↑j
.text:0000000000024188                 LDR             X8, [SP,#0xC0+var_C0]
.text:000000000002418C                 CMP             X22, X20
.text:0000000000024190                 STR             X8, [X20]
.text:0000000000024194                 B.EQ            loc_241B8
.text:0000000000024198                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:000000000002419C                 ADD             X0, X20, #8
.text:00000000000241A0                 BL              sub_212B0
.text:00000000000241A4                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:00000000000241A8                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:00000000000241AC                 ADD             X0, X20, #0x40 ; '@'
.text:00000000000241B0                 STP             Q1, Q0, [X23]
.text:00000000000241B4                 BL              loc_21400
.text:00000000000241B8 loc_241B8                               ; CODE XREF: sub_23FC8+1CC↑j
.text:00000000000241B8                 MOV             X0, SP  ; this
.text:00000000000241BC                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000241C0                 ADD             W19, W19, #3
.text:00000000000241C4                 B               loc_241D4
.text:00000000000241C8 ; ---------------------------------------------------------------------------
.text:00000000000241C8 loc_241C8                               ; CODE XREF: sub_23FC8+E8↑j
.text:00000000000241C8                 ADD             W19, W19, #1
.text:00000000000241CC                 B               loc_241D4
.text:00000000000241D0 ; ---------------------------------------------------------------------------
.text:00000000000241D0 loc_241D0                               ; CODE XREF: sub_23FC8+178↑j
.text:00000000000241D0                 ADD             W19, W19, #2
.text:00000000000241D4 loc_241D4                               ; CODE XREF: sub_23FC8+54↑j
.text:00000000000241D4                                         ; sub_23FC8+1FC↑j ...
.text:00000000000241D4                 LDR             X8, [X24,#0x28]
.text:00000000000241D8                 LDUR            X9, [X29,#var_58]
.text:00000000000241DC                 CMP             X8, X9
.text:00000000000241E0                 B.NE            loc_24208
.text:00000000000241E4                 MOV             W0, W19
.text:00000000000241E8                 LDR             X27, [SP,#0xC0+var_50]
.text:00000000000241EC                 LDP             X29, X30, [SP,#0xC0+var_s0]
.text:00000000000241F0                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000241F4                 LDP             X22, X21, [SP,#0xC0+var_20]
.text:00000000000241F8                 LDP             X24, X23, [SP,#0xC0+var_30]
.text:00000000000241FC                 LDP             X26, X25, [SP,#0xC0+var_40]
.text:0000000000024200                 ADD             SP, SP, #0xD0
.text:0000000000024204                 RET
.text:0000000000024208 ; ---------------------------------------------------------------------------
.text:0000000000024208 loc_24208                               ; CODE XREF: sub_23FC8+218↑j
.text:0000000000024208                 BL              .__stack_chk_fail
.text:0000000000024208 ; } // starts at 23FC8
.text:0000000000024208 ; End of function sub_23FC8
.text:0000000000024208 ; ---------------------------------------------------------------------------
.text:000000000002420C                 ALIGN 0x10
.text:0000000000024210 ; =============== S U B R O U T I N E =======================================
.text:0000000000024210 ; Attributes: bp-based frame
.text:0000000000024210 sub_24210                               ; CODE XREF: sub_234C8+110↑p
.text:0000000000024210                                         ; sub_234C8+774↑p ...
.text:0000000000024210 var_C0          = -0xC0
.text:0000000000024210 var_B8          = -0xB8
.text:0000000000024210 var_A0          = -0xA0
.text:0000000000024210 var_80          = -0x80
.text:0000000000024210 var_58          = -0x58
.text:0000000000024210 var_50          = -0x50
.text:0000000000024210 var_40          = -0x40
.text:0000000000024210 var_30          = -0x30
.text:0000000000024210 var_20          = -0x20
.text:0000000000024210 var_10          = -0x10
.text:0000000000024210 var_s0          =  0
.text:0000000000024210 ; __unwind {
.text:0000000000024210                 SUB             SP, SP, #0xD0
.text:0000000000024214                 STP             X28, X27, [SP,#0xC0+var_50]
.text:0000000000024218                 STP             X26, X25, [SP,#0xC0+var_40]
.text:000000000002421C                 STP             X24, X23, [SP,#0xC0+var_30]
.text:0000000000024220                 STP             X22, X21, [SP,#0xC0+var_20]
.text:0000000000024224                 STP             X20, X19, [SP,#0xC0+var_10]
.text:0000000000024228                 STP             X29, X30, [SP,#0xC0+var_s0]
.text:000000000002422C                 ADD             X29, SP, #0xC0
.text:0000000000024230                 MRS             X25, #3, c13, c0, #2
.text:0000000000024234                 MOV             X24, X4
.text:0000000000024238                 LDR             X8, [X25,#0x28]
.text:000000000002423C                 MOV             X23, X3
.text:0000000000024240                 MOV             X22, X2
.text:0000000000024244                 MOV             X20, X1
.text:0000000000024248                 MOV             X21, X0
.text:000000000002424C                 STUR            X8, [X29,#var_58]
.text:0000000000024250                 BL              sub_23FC8
.text:0000000000024254                 LDR             Q0, [X24,#0x20]
.text:0000000000024258                 MOV             W19, W0
.text:000000000002425C                 LDR             Q1, [X23,#0x20]
.text:0000000000024260                 BL              .__lttf2
.text:0000000000024264                 CMP             W0, #0
.text:0000000000024268                 B.GE            loc_244B8
.text:000000000002426C                 MOV             X0, SP
.text:0000000000024270                 MOV             X1, X23
.text:0000000000024274                 ADD             X27, X24, #0x20 ; ' '
.text:0000000000024278                 ADD             X26, X23, #0x20 ; ' '
.text:000000000002427C                 MOV             X28, SP
.text:0000000000024280                 BL              sub_215F0
.text:0000000000024284                 LDR             X8, [X24]
.text:0000000000024288                 CMP             X23, X24
.text:000000000002428C                 STR             X8, [X23]
.text:0000000000024290                 B.EQ            loc_242B4
.text:0000000000024294                 LDP             X1, X2, [X24,#8]
.text:0000000000024298                 ADD             X0, X23, #8
.text:000000000002429C                 BL              sub_212B0
.text:00000000000242A0                 LDP             Q0, Q1, [X27]
.text:00000000000242A4                 ADD             X0, X23, #0x40 ; '@'
.text:00000000000242A8                 STP             Q0, Q1, [X26]
.text:00000000000242AC                 LDP             X1, X2, [X24,#0x40]
.text:00000000000242B0                 BL              loc_21400
.text:00000000000242B4 loc_242B4                               ; CODE XREF: sub_24210+80↑j
.text:00000000000242B4                 LDR             X8, [SP,#0xC0+var_C0]
.text:00000000000242B8                 CMP             X28, X24
.text:00000000000242BC                 STR             X8, [X24]
.text:00000000000242C0                 B.EQ            loc_242E4
.text:00000000000242C4                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:00000000000242C8                 ADD             X0, X24, #8
.text:00000000000242CC                 BL              sub_212B0
.text:00000000000242D0                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:00000000000242D4                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:00000000000242D8                 ADD             X0, X24, #0x40 ; '@'
.text:00000000000242DC                 STP             Q1, Q0, [X27]
.text:00000000000242E0                 BL              loc_21400
.text:00000000000242E4 loc_242E4                               ; CODE XREF: sub_24210+B0↑j
.text:00000000000242E4                 MOV             X0, SP  ; this
.text:00000000000242E8                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000242EC                 LDR             Q0, [X26]
.text:00000000000242F0                 LDR             Q1, [X22,#0x20]
.text:00000000000242F4                 BL              .__lttf2
.text:00000000000242F8                 CMP             W0, #0
.text:00000000000242FC                 B.GE            loc_244A4
.text:0000000000024300                 MOV             X0, SP
.text:0000000000024304                 MOV             X1, X22
.text:0000000000024308                 ADD             X24, X22, #0x20 ; ' '
.text:000000000002430C                 MOV             X27, SP
.text:0000000000024310                 BL              sub_215F0
.text:0000000000024314                 LDR             X8, [X23]
.text:0000000000024318                 CMP             X22, X23
.text:000000000002431C                 STR             X8, [X22]
.text:0000000000024320                 B.EQ            loc_24344
.text:0000000000024324                 LDP             X1, X2, [X23,#8]
.text:0000000000024328                 ADD             X0, X22, #8
.text:000000000002432C                 BL              sub_212B0
.text:0000000000024330                 LDP             Q0, Q1, [X26]
.text:0000000000024334                 ADD             X0, X22, #0x40 ; '@'
.text:0000000000024338                 STP             Q0, Q1, [X24]
.text:000000000002433C                 LDP             X1, X2, [X23,#0x40]
.text:0000000000024340                 BL              loc_21400
.text:0000000000024344 loc_24344                               ; CODE XREF: sub_24210+110↑j
.text:0000000000024344                 LDR             X8, [SP,#0xC0+var_C0]
.text:0000000000024348                 CMP             X27, X23
.text:000000000002434C                 STR             X8, [X23]
.text:0000000000024350                 B.EQ            loc_24374
.text:0000000000024354                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:0000000000024358                 ADD             X0, X23, #8
.text:000000000002435C                 BL              sub_212B0
.text:0000000000024360                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:0000000000024364                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:0000000000024368                 ADD             X0, X23, #0x40 ; '@'
.text:000000000002436C                 STP             Q1, Q0, [X26]
.text:0000000000024370                 BL              loc_21400
.text:0000000000024374 loc_24374                               ; CODE XREF: sub_24210+140↑j
.text:0000000000024374                 MOV             X0, SP  ; this
.text:0000000000024378                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:000000000002437C                 LDR             Q0, [X24]
.text:0000000000024380                 LDR             Q1, [X20,#0x20]
.text:0000000000024384                 BL              .__lttf2
.text:0000000000024388                 CMP             W0, #0
.text:000000000002438C                 B.GE            loc_244AC
.text:0000000000024390                 MOV             X0, SP
.text:0000000000024394                 MOV             X1, X20
.text:0000000000024398                 ADD             X23, X20, #0x20 ; ' '
.text:000000000002439C                 MOV             X26, SP
.text:00000000000243A0                 BL              sub_215F0
.text:00000000000243A4                 LDR             X8, [X22]
.text:00000000000243A8                 CMP             X20, X22
.text:00000000000243AC                 STR             X8, [X20]
.text:00000000000243B0                 B.EQ            loc_243D4
.text:00000000000243B4                 LDP             X1, X2, [X22,#8]
.text:00000000000243B8                 ADD             X0, X20, #8
.text:00000000000243BC                 BL              sub_212B0
.text:00000000000243C0                 LDP             Q0, Q1, [X24]
.text:00000000000243C4                 ADD             X0, X20, #0x40 ; '@'
.text:00000000000243C8                 STP             Q0, Q1, [X23]
.text:00000000000243CC                 LDP             X1, X2, [X22,#0x40]
.text:00000000000243D0                 BL              loc_21400
.text:00000000000243D4 loc_243D4                               ; CODE XREF: sub_24210+1A0↑j
.text:00000000000243D4                 LDR             X8, [SP,#0xC0+var_C0]
.text:00000000000243D8                 CMP             X26, X22
.text:00000000000243DC                 STR             X8, [X22]
.text:00000000000243E0                 B.EQ            loc_24404
.text:00000000000243E4                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:00000000000243E8                 ADD             X0, X22, #8
.text:00000000000243EC                 BL              sub_212B0
.text:00000000000243F0                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:00000000000243F4                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:00000000000243F8                 ADD             X0, X22, #0x40 ; '@'
.text:00000000000243FC                 STP             Q1, Q0, [X24]
.text:0000000000024400                 BL              loc_21400
.text:0000000000024404 loc_24404                               ; CODE XREF: sub_24210+1D0↑j
.text:0000000000024404                 MOV             X0, SP  ; this
.text:0000000000024408                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:000000000002440C                 LDR             Q0, [X23]
.text:0000000000024410                 LDR             Q1, [X21,#0x20]
.text:0000000000024414                 BL              .__lttf2
.text:0000000000024418                 CMP             W0, #0
.text:000000000002441C                 B.GE            loc_244B4
.text:0000000000024420                 MOV             X0, SP
.text:0000000000024424                 MOV             X1, X21
.text:0000000000024428                 MOV             X22, SP
.text:000000000002442C                 BL              sub_215F0
.text:0000000000024430                 LDR             X8, [X20]
.text:0000000000024434                 CMP             X21, X20
.text:0000000000024438                 STR             X8, [X21]
.text:000000000002443C                 B.EQ            loc_24464
.text:0000000000024440                 LDP             X1, X2, [X20,#8]
.text:0000000000024444                 ADD             X0, X21, #8
.text:0000000000024448                 ADD             X24, X21, #0x20 ; ' '
.text:000000000002444C                 BL              sub_212B0
.text:0000000000024450                 LDP             Q0, Q1, [X23]
.text:0000000000024454                 ADD             X0, X21, #0x40 ; '@'
.text:0000000000024458                 STP             Q0, Q1, [X24]
.text:000000000002445C                 LDP             X1, X2, [X20,#0x40]
.text:0000000000024460                 BL              loc_21400
.text:0000000000024464 loc_24464                               ; CODE XREF: sub_24210+22C↑j
.text:0000000000024464                 LDR             X8, [SP,#0xC0+var_C0]
.text:0000000000024468                 CMP             X22, X20
.text:000000000002446C                 STR             X8, [X20]
.text:0000000000024470                 B.EQ            loc_24494
.text:0000000000024474                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:0000000000024478                 ADD             X0, X20, #8
.text:000000000002447C                 BL              sub_212B0
.text:0000000000024480                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:0000000000024484                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:0000000000024488                 ADD             X0, X20, #0x40 ; '@'
.text:000000000002448C                 STP             Q1, Q0, [X23]
.text:0000000000024490                 BL              loc_21400
.text:0000000000024494 loc_24494                               ; CODE XREF: sub_24210+260↑j
.text:0000000000024494                 MOV             X0, SP  ; this
.text:0000000000024498                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:000000000002449C                 ADD             W19, W19, #4
.text:00000000000244A0                 B               loc_244B8
.text:00000000000244A4 ; ---------------------------------------------------------------------------
.text:00000000000244A4 loc_244A4                               ; CODE XREF: sub_24210+EC↑j
.text:00000000000244A4                 ADD             W19, W19, #1
.text:00000000000244A8                 B               loc_244B8
.text:00000000000244AC ; ---------------------------------------------------------------------------
.text:00000000000244AC loc_244AC                               ; CODE XREF: sub_24210+17C↑j
.text:00000000000244AC                 ADD             W19, W19, #2
.text:00000000000244B0                 B               loc_244B8
.text:00000000000244B4 ; ---------------------------------------------------------------------------
.text:00000000000244B4 loc_244B4                               ; CODE XREF: sub_24210+20C↑j
.text:00000000000244B4                 ADD             W19, W19, #3
.text:00000000000244B8 loc_244B8                               ; CODE XREF: sub_24210+58↑j
.text:00000000000244B8                                         ; sub_24210+290↑j ...
.text:00000000000244B8                 LDR             X8, [X25,#0x28]
.text:00000000000244BC                 LDUR            X9, [X29,#var_58]
.text:00000000000244C0                 CMP             X8, X9
.text:00000000000244C4                 B.NE            loc_244EC
.text:00000000000244C8                 MOV             W0, W19
.text:00000000000244CC                 LDP             X29, X30, [SP,#0xC0+var_s0]
.text:00000000000244D0                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000244D4                 LDP             X22, X21, [SP,#0xC0+var_20]
.text:00000000000244D8                 LDP             X24, X23, [SP,#0xC0+var_30]
.text:00000000000244DC                 LDP             X26, X25, [SP,#0xC0+var_40]
.text:00000000000244E0                 LDP             X28, X27, [SP,#0xC0+var_50]
.text:00000000000244E4                 ADD             SP, SP, #0xD0
.text:00000000000244E8                 RET
.text:00000000000244EC ; ---------------------------------------------------------------------------
.text:00000000000244EC loc_244EC                               ; CODE XREF: sub_24210+2B4↑j
.text:00000000000244EC                 BL              .__stack_chk_fail
.text:00000000000244EC ; } // starts at 24210
.text:00000000000244EC ; End of function sub_24210
.text:00000000000244F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000244F0 ; Attributes: bp-based frame
.text:00000000000244F0 sub_244F0                               ; CODE XREF: sub_234C8+3C0↑p
.text:00000000000244F0                                         ; sub_234C8+3D4↑p
.text:00000000000244F0 var_C0          = -0xC0
.text:00000000000244F0 var_B8          = -0xB8
.text:00000000000244F0 var_A0          = -0xA0
.text:00000000000244F0 var_80          = -0x80
.text:00000000000244F0 var_58          = -0x58
.text:00000000000244F0 var_50          = -0x50
.text:00000000000244F0 var_40          = -0x40
.text:00000000000244F0 var_30          = -0x30
.text:00000000000244F0 var_20          = -0x20
.text:00000000000244F0 var_10          = -0x10
.text:00000000000244F0 var_s0          =  0
.text:00000000000244F0 ; __unwind {
.text:00000000000244F0                 SUB             SP, SP, #0xD0
.text:00000000000244F4                 STP             X28, X27, [SP,#0xC0+var_50]
.text:00000000000244F8                 STP             X26, X25, [SP,#0xC0+var_40]
.text:00000000000244FC                 STP             X24, X23, [SP,#0xC0+var_30]
.text:0000000000024500                 STP             X22, X21, [SP,#0xC0+var_20]
.text:0000000000024504                 STP             X20, X19, [SP,#0xC0+var_10]
.text:0000000000024508                 STP             X29, X30, [SP,#0xC0+var_s0]
.text:000000000002450C                 ADD             X29, SP, #0xC0
.text:0000000000024510                 MOV             X10, #0xAAAAAAAAAAAAAAAA
.text:0000000000024514                 MRS             X22, #3, c13, c0, #2
.text:0000000000024518                 SUB             X8, X1, X0
.text:000000000002451C                 LDR             X9, [X22,#0x28]
.text:0000000000024520                 MOVK            X10, #0xAAAB
.text:0000000000024524                 ASR             X8, X8, #5
.text:0000000000024528                 MUL             X8, X8, X10
.text:000000000002452C                 MOV             X19, X1
.text:0000000000024530                 MOV             X20, X0
.text:0000000000024534                 STUR            X9, [X29,#var_58]
.text:0000000000024538                 CMP             X8, #5
.text:000000000002453C                 B.HI            loc_24614
.text:0000000000024540                 ADRP            X9, #unk_8676@PAGE
.text:0000000000024544                 ADD             X9, X9, #unk_8676@PAGEOFF
.text:0000000000024548                 MOV             W0, #1
.text:000000000002454C                 ADR             X10, loc_2455C
.text:0000000000024550                 LDRB            W11, [X9,X8]
.text:0000000000024554                 ADD             X10, X10, X11,LSL#2
.text:0000000000024558                 BR              X10
.text:000000000002455C ; ---------------------------------------------------------------------------
.text:000000000002455C loc_2455C                               ; DATA XREF: sub_244F0+5C↑o
.text:000000000002455C                 LDUR            Q0, [X19,#-0x40]
.text:0000000000024560                 LDR             Q1, [X20,#0x20]
.text:0000000000024564                 BL              .__lttf2
.text:0000000000024568                 CMP             W0, #0
.text:000000000002456C                 B.GE            loc_24764
.text:0000000000024570                 MOV             X0, SP
.text:0000000000024574                 MOV             X1, X20
.text:0000000000024578                 SUB             X23, X19, #0x60 ; '`'
.text:000000000002457C                 SUB             X21, X19, #0x40 ; '@'
.text:0000000000024580                 MOV             X24, SP
.text:0000000000024584                 BL              sub_215F0
.text:0000000000024588                 LDR             X8, [X23]
.text:000000000002458C                 CMP             X23, X20
.text:0000000000024590                 STR             X8, [X20]
.text:0000000000024594                 B.EQ            loc_245BC
.text:0000000000024598                 LDP             X1, X2, [X19,#-0x58]
.text:000000000002459C                 ADD             X0, X20, #8
.text:00000000000245A0                 ADD             X25, X20, #0x20 ; ' '
.text:00000000000245A4                 BL              sub_212B0
.text:00000000000245A8                 LDP             Q0, Q1, [X21]
.text:00000000000245AC                 ADD             X0, X20, #0x40 ; '@'
.text:00000000000245B0                 STP             Q0, Q1, [X25]
.text:00000000000245B4                 LDP             X1, X2, [X19,#-0x20]
.text:00000000000245B8                 BL              loc_21400
.text:00000000000245BC loc_245BC                               ; CODE XREF: sub_244F0+A4↑j
.text:00000000000245BC                 LDR             X8, [SP,#0xC0+var_C0]
.text:00000000000245C0                 CMP             X24, X23
.text:00000000000245C4                 STR             X8, [X23]
.text:00000000000245C8                 B.EQ            loc_245EC
.text:00000000000245CC                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:00000000000245D0                 SUB             X0, X19, #0x58 ; 'X'
.text:00000000000245D4                 BL              sub_212B0
.text:00000000000245D8                 LDP             Q1, Q0, [SP,#0xC0+var_A0]
.text:00000000000245DC                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:00000000000245E0                 SUB             X0, X19, #0x20 ; ' '
.text:00000000000245E4                 STP             Q1, Q0, [X21]
.text:00000000000245E8                 BL              loc_21400
.text:00000000000245EC loc_245EC                               ; CODE XREF: sub_244F0+D8↑j
.text:00000000000245EC                 MOV             X0, SP  ; this
.text:00000000000245F0                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000245F4                 MOV             W0, #1
.text:00000000000245F8                 B               loc_24768
.text:00000000000245FC ; ---------------------------------------------------------------------------
.text:00000000000245FC                 ADD             X1, X20, #0x60 ; '`'
.text:0000000000024600                 SUB             X2, X19, #0x60 ; '`'
.text:0000000000024604                 MOV             X0, X20
.text:0000000000024608                 BL              sub_23C90
.text:000000000002460C                 MOV             W0, #1
.text:0000000000024610                 B               loc_24768
.text:0000000000024614 ; ---------------------------------------------------------------------------
.text:0000000000024614 loc_24614                               ; CODE XREF: sub_244F0+4C↑j
.text:0000000000024614                 ADD             X21, X20, #0xC0
.text:0000000000024618                 ADD             X1, X20, #0x60 ; '`'
.text:000000000002461C                 MOV             X0, X20
.text:0000000000024620                 MOV             X2, X21
.text:0000000000024624                 BL              sub_23C90
.text:0000000000024628                 ADD             X8, X20, #0x120
.text:000000000002462C                 CMP             X8, X19
.text:0000000000024630                 B.EQ            loc_24764
.text:0000000000024634                 MOV             X25, SP
.text:0000000000024638                 MOV             X23, XZR
.text:000000000002463C                 MOV             W24, WZR
.text:0000000000024640                 ADD             X26, X25, #0x20 ; ' '
.text:0000000000024644 loc_24644                               ; CODE XREF: sub_244F0+238↓j
.text:0000000000024644                 MOV             X9, X21
.text:0000000000024648                 LDR             Q0, [X8,#0x20]
.text:000000000002464C                 MOV             X21, X8
.text:0000000000024650                 LDR             Q1, [X9,#0x20]
.text:0000000000024654                 BL              .__lttf2
.text:0000000000024658                 CMP             W0, #0
.text:000000000002465C                 B.GE            loc_2471C
.text:0000000000024660                 MOV             X0, SP
.text:0000000000024664                 MOV             X1, X21
.text:0000000000024668                 BL              sub_215F0
.text:000000000002466C                 MOV             X27, X23
.text:0000000000024670 loc_24670                               ; CODE XREF: sub_244F0+1D4↓j
.text:0000000000024670                 ADD             X28, X20, X27
.text:0000000000024674                 MOV             X8, X28
.text:0000000000024678                 LDR             X9, [X8,#0xC0]!
.text:000000000002467C                 ADD             X10, X8, #0x60 ; '`'
.text:0000000000024680                 STR             X9, [X8,#0x60]
.text:0000000000024684                 CMP             X8, X10
.text:0000000000024688                 B.EQ            loc_246AC
.text:000000000002468C                 LDP             X1, X2, [X28,#0xC8]
.text:0000000000024690                 ADD             X0, X28, #0x128
.text:0000000000024694                 BL              sub_212B0
.text:0000000000024698                 LDP             Q0, Q1, [X28,#0xE0]
.text:000000000002469C                 LDP             X1, X2, [X28,#0x100]
.text:00000000000246A0                 ADD             X0, X28, #0x160
.text:00000000000246A4                 STP             Q0, Q1, [X28,#0x140]
.text:00000000000246A8                 BL              loc_21400
.text:00000000000246AC loc_246AC                               ; CODE XREF: sub_244F0+198↑j
.text:00000000000246AC                 CMN             X27, #0xC0
.text:00000000000246B0                 B.EQ            loc_246D4
.text:00000000000246B4                 LDR             Q0, [SP,#0xC0+var_A0]
.text:00000000000246B8                 SUB             X27, X27, #0x60 ; '`'
.text:00000000000246BC                 LDR             Q1, [X28,#0x80]
.text:00000000000246C0                 BL              .__lttf2
.text:00000000000246C4                 TBNZ            W0, #0x1F, loc_24670
.text:00000000000246C8                 ADD             X8, X20, X27
.text:00000000000246CC                 ADD             X27, X8, #0x120
.text:00000000000246D0                 B               loc_246D8
.text:00000000000246D4 ; ---------------------------------------------------------------------------
.text:00000000000246D4 loc_246D4                               ; CODE XREF: sub_244F0+1C0↑j
.text:00000000000246D4                 MOV             X27, X20
.text:00000000000246D8 loc_246D8                               ; CODE XREF: sub_244F0+1E0↑j
.text:00000000000246D8                 LDR             X8, [SP,#0xC0+var_C0]
.text:00000000000246DC                 CMP             X27, X25
.text:00000000000246E0                 STR             X8, [X27]
.text:00000000000246E4                 B.EQ            loc_24708
.text:00000000000246E8                 LDP             X1, X2, [SP,#0xC0+var_B8]
.text:00000000000246EC                 ADD             X0, X27, #8
.text:00000000000246F0                 BL              sub_212B0
.text:00000000000246F4                 LDP             Q0, Q1, [X26]
.text:00000000000246F8                 LDP             X1, X2, [SP,#0xC0+var_80]
.text:00000000000246FC                 ADD             X0, X27, #0x40 ; '@'
.text:0000000000024700                 STP             Q0, Q1, [X27,#0x20]
.text:0000000000024704                 BL              loc_21400
.text:0000000000024708 loc_24708                               ; CODE XREF: sub_244F0+1F4↑j
.text:0000000000024708                 MOV             X0, SP  ; this
.text:000000000002470C                 ADD             W24, W24, #1
.text:0000000000024710                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000024714                 CMP             W24, #8
.text:0000000000024718                 B.EQ            loc_24798
.text:000000000002471C loc_2471C                               ; CODE XREF: sub_244F0+16C↑j
.text:000000000002471C                 ADD             X8, X21, #0x60 ; '`'
.text:0000000000024720                 ADD             X23, X23, #0x60 ; '`'
.text:0000000000024724                 CMP             X8, X19
.text:0000000000024728                 B.NE            loc_24644
.text:000000000002472C                 B               loc_24764
.text:0000000000024730 ; ---------------------------------------------------------------------------
.text:0000000000024730                 ADD             X1, X20, #0x60 ; '`'
.text:0000000000024734                 ADD             X2, X20, #0xC0
.text:0000000000024738                 ADD             X3, X20, #0x120
.text:000000000002473C                 SUB             X4, X19, #0x60 ; '`'
.text:0000000000024740                 MOV             X0, X20
.text:0000000000024744                 BL              sub_24210
.text:0000000000024748                 MOV             W0, #1
.text:000000000002474C                 B               loc_24768
.text:0000000000024750 ; ---------------------------------------------------------------------------
.text:0000000000024750                 ADD             X1, X20, #0x60 ; '`'
.text:0000000000024754                 ADD             X2, X20, #0xC0
.text:0000000000024758                 SUB             X3, X19, #0x60 ; '`'
.text:000000000002475C                 MOV             X0, X20
.text:0000000000024760                 BL              sub_23FC8
.text:0000000000024764 loc_24764                               ; CODE XREF: sub_244F0+7C↑j
.text:0000000000024764                                         ; sub_244F0+140↑j ...
.text:0000000000024764                 MOV             W0, #1
.text:0000000000024768 loc_24768                               ; CODE XREF: sub_244F0+108↑j
.text:0000000000024768                                         ; sub_244F0+120↑j ...
.text:0000000000024768                 LDR             X8, [X22,#0x28]
.text:000000000002476C                 LDUR            X9, [X29,#var_58]
.text:0000000000024770                 CMP             X8, X9
.text:0000000000024774                 B.NE            loc_247A8
.text:0000000000024778                 LDP             X29, X30, [SP,#0xC0+var_s0]
.text:000000000002477C                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:0000000000024780                 LDP             X22, X21, [SP,#0xC0+var_20]
.text:0000000000024784                 LDP             X24, X23, [SP,#0xC0+var_30]
.text:0000000000024788                 LDP             X26, X25, [SP,#0xC0+var_40]
.text:000000000002478C                 LDP             X28, X27, [SP,#0xC0+var_50]
.text:0000000000024790                 ADD             SP, SP, #0xD0
.text:0000000000024794                 RET
.text:0000000000024798 ; ---------------------------------------------------------------------------
.text:0000000000024798 loc_24798                               ; CODE XREF: sub_244F0+228↑j
.text:0000000000024798                 ADD             X8, X21, #0x60 ; '`'
.text:000000000002479C                 CMP             X8, X19
.text:00000000000247A0                 CSET            W0, EQ
.text:00000000000247A4                 B               loc_24768
.text:00000000000247A8 ; ---------------------------------------------------------------------------
.text:00000000000247A8 loc_247A8                               ; CODE XREF: sub_244F0+284↑j
.text:00000000000247A8                 BL              .__stack_chk_fail
.text:00000000000247A8 ; } // starts at 244F0
.text:00000000000247A8 ; End of function sub_244F0
.text:00000000000247A8 ; ---------------------------------------------------------------------------
.text:00000000000247AC                 ALIGN 0x10
.text:00000000000247B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000247B0 ; Attributes: bp-based frame
.text:00000000000247B0 sub_247B0                               ; DATA XREF: .init_array:00000000000305B8↓o
.text:00000000000247B0 var_s0          =  0
.text:00000000000247B0 ; __unwind {
.text:00000000000247B0                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000247B4                 MOV             X29, SP
.text:00000000000247B8                 ADRP            X8, #unk_31008@PAGE
.text:00000000000247BC                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:00000000000247C0                 LDARB           W8, [X8]
.text:00000000000247C4                 TBNZ            W8, #0, loc_24804
.text:00000000000247C8                 ADRP            X0, #unk_31008@PAGE
.text:00000000000247CC                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:00000000000247D0                 BL              .__cxa_guard_acquire
.text:00000000000247D4                 CBZ             W0, loc_24804
.text:00000000000247D8                 ADRP            X1, #qword_31000@PAGE
.text:00000000000247DC                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:00000000000247E0                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:00000000000247E4                 ADRP            X2, #off_2F000@PAGE
.text:00000000000247E8                 STR             XZR, [X1]
.text:00000000000247EC                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000247F0                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:00000000000247F4                 BL              .__cxa_atexit
.text:00000000000247F8                 ADRP            X0, #unk_31008@PAGE
.text:00000000000247FC                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000024800                 BL              .__cxa_guard_release
.text:0000000000024804 loc_24804                               ; CODE XREF: sub_247B0+14↑j
.text:0000000000024804                                         ; sub_247B0+24↑j
.text:0000000000024804                 ADRP            X8, #unk_31038@PAGE
.text:0000000000024808                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:000000000002480C                 LDARB           W8, [X8]
.text:0000000000024810                 TBNZ            W8, #0, loc_2484C
.text:0000000000024814                 ADRP            X0, #unk_31038@PAGE
.text:0000000000024818                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000002481C                 BL              .__cxa_guard_acquire
.text:0000000000024820                 CBZ             W0, loc_2484C
.text:0000000000024824                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000024828                 ADRP            X1, #unk_31010@PAGE
.text:000000000002482C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000024830                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000024834                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000024838                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002483C                 BL              .__cxa_atexit
.text:0000000000024840                 ADRP            X0, #unk_31038@PAGE
.text:0000000000024844                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000024848                 BL              .__cxa_guard_release
.text:000000000002484C loc_2484C                               ; CODE XREF: sub_247B0+60↑j
.text:000000000002484C                                         ; sub_247B0+70↑j
.text:000000000002484C                 ADRP            X8, #unk_31058@PAGE
.text:0000000000024850                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:0000000000024854                 LDARB           W8, [X8]
.text:0000000000024858                 TBNZ            W8, #0, loc_2489C
.text:000000000002485C                 ADRP            X0, #unk_31058@PAGE
.text:0000000000024860                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000024864                 BL              .__cxa_guard_acquire
.text:0000000000024868                 CBZ             W0, loc_2489C
.text:000000000002486C                 ADRP            X1, #unk_31040@PAGE
.text:0000000000024870                 ADRP            X0, #loc_1C078@PAGE
.text:0000000000024874                 ADRP            X2, #off_2F000@PAGE
.text:0000000000024878                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:000000000002487C                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000024880                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000024884                 STP             XZR, XZR, [X1]
.text:0000000000024888                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:000000000002488C                 BL              .__cxa_atexit
.text:0000000000024890                 ADRP            X0, #unk_31058@PAGE
.text:0000000000024894                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000024898                 BL              .__cxa_guard_release
.text:000000000002489C loc_2489C                               ; CODE XREF: sub_247B0+A8↑j
.text:000000000002489C                                         ; sub_247B0+B8↑j
.text:000000000002489C                 ADRP            X8, #unk_31078@PAGE
.text:00000000000248A0                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:00000000000248A4                 LDARB           W8, [X8]
.text:00000000000248A8                 TBNZ            W8, #0, loc_248F0
.text:00000000000248AC                 ADRP            X0, #unk_31078@PAGE
.text:00000000000248B0                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:00000000000248B4                 BL              .__cxa_guard_acquire
.text:00000000000248B8                 CBZ             W0, loc_248F0
.text:00000000000248BC                 ADRP            X1, #unk_31060@PAGE
.text:00000000000248C0                 ADRP            X0, #loc_1C100@PAGE
.text:00000000000248C4                 ADRP            X2, #off_2F000@PAGE
.text:00000000000248C8                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:00000000000248CC                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:00000000000248D0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000248D4                 STP             XZR, XZR, [X1]
.text:00000000000248D8                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:00000000000248DC                 BL              .__cxa_atexit
.text:00000000000248E0                 ADRP            X0, #unk_31078@PAGE
.text:00000000000248E4                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:00000000000248E8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000248EC                 B               .__cxa_guard_release
.text:00000000000248F0 ; ---------------------------------------------------------------------------
.text:00000000000248F0 loc_248F0                               ; CODE XREF: sub_247B0+F8↑j
.text:00000000000248F0                                         ; sub_247B0+108↑j
.text:00000000000248F0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000248F4                 RET
.text:00000000000248F4 ; } // starts at 247B0
.text:00000000000248F4 ; End of function sub_247B0
.text:00000000000248F8 ; =============== S U B R O U T I N E =======================================
.text:00000000000248F8 ; Attributes: bp-based frame
.text:00000000000248F8 ; drawer::GraphicDrawer::GraphicDrawer(unsigned long, std::__1::unique_ptr<drawer::MeshDrawer, std::__1::default_delete<drawer::MeshDrawer>>, std::__1::unique_ptr<drawer::MeshDrawer, std::__1::default_delete<drawer::MeshDrawer>>, std::__1::unique_ptr<drawer::RectDrawer, std::__1::default_delete<drawer::RectDrawer>>, std::__1::unique_ptr<drawer::GridDrawer, std::__1::default_delete<drawer::GridDrawer>>, gui::WidgetValueType)
.text:00000000000248F8                 EXPORT _ZN6drawer13GraphicDrawerC2EmNSt3__110unique_ptrINS_10MeshDrawerENS1_14default_deleteIS3_EEEES6_NS2_INS_10RectDrawerENS4_IS7_EEEENS2_INS_10GridDrawerENS4_ISA_EEEEN3gui15WidgetValueTypeE
.text:00000000000248F8 _ZN6drawer13GraphicDrawerC2EmNSt3__110unique_ptrINS_10MeshDrawerENS1_14default_deleteIS3_EEEES6_NS2_INS_10RectDrawerENS4_IS7_EEEENS2_INS_10GridDrawerENS4_ISA_EEEEN3gui15WidgetValueTypeE
.text:00000000000248F8                                         ; DATA XREF: LOAD:0000000000000FD8↑o
.text:00000000000248F8                                         ; LOAD:0000000000002280↑o
.text:00000000000248F8 var_50          = -0x50
.text:00000000000248F8 var_48          = -0x48
.text:00000000000248F8 var_40          = -0x40
.text:00000000000248F8 var_30          = -0x30
.text:00000000000248F8 var_20          = -0x20
.text:00000000000248F8 var_10          = -0x10
.text:00000000000248F8 var_s0          =  0
.text:00000000000248F8 ; __unwind {
.text:00000000000248F8                 SUB             SP, SP, #0x60
.text:00000000000248FC                 STR             D10, [SP,#0x50+var_40]
.text:0000000000024900                 STP             D9, D8, [SP,#0x50+var_30]
.text:0000000000024904                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000024908                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000002490C                 STP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000024910                 ADD             X29, SP, #0x50
.text:0000000000024914                 ADRP            X9, #_ZTVN6drawer13GraphicDrawerE_ptr@PAGE
.text:0000000000024918                 MRS             X22, #3, c13, c0, #2
.text:000000000002491C                 LDR             X8, [X22,#0x28]
.text:0000000000024920                 MOVI            V0.2D, #0
.text:0000000000024924                 MOV             X19, X0
.text:0000000000024928                 LDR             X9, [X9,#_ZTVN6drawer13GraphicDrawerE_ptr@PAGEOFF]
.text:000000000002492C                 STR             X8, [SP,#0x50+var_48]
.text:0000000000024930                 MOV             W8, #1
.text:0000000000024934                 STR             W6, [X0,#8]
.text:0000000000024938                 ADD             X9, X9, #0x10
.text:000000000002493C                 STR             XZR, [X0,#0x30]
.text:0000000000024940                 STP             Q0, Q0, [X0,#0x10]
.text:0000000000024944                 STRB            W8, [X0,#0x38]
.text:0000000000024948                 STR             X9, [X0]
.text:000000000002494C                 LDR             X8, [X2]
.text:0000000000024950                 STR             XZR, [X2]
.text:0000000000024954                 STR             X8, [X0,#0x40]
.text:0000000000024958                 LDR             X8, [X3]
.text:000000000002495C                 STR             XZR, [X3]
.text:0000000000024960                 STR             X8, [X0,#0x48]
.text:0000000000024964                 LDR             X8, [X4]
.text:0000000000024968                 STR             XZR, [X4]
.text:000000000002496C                 STR             X8, [X0,#0x50]
.text:0000000000024970                 LDR             X8, [X5]
.text:0000000000024974                 STR             XZR, [X5]
.text:0000000000024978                 STR             XZR, [X0,#0x68]!
.text:000000000002497C                 STP             XZR, XZR, [X0,#8]
.text:0000000000024980                 STP             X8, X1, [X0,#-0x10]
.text:0000000000024984                 CBZ             X1, loc_249D4
.text:0000000000024988                 MOV             X20, X1
.text:000000000002498C                 LSR             X8, X1, #0x3E ; '>'
.text:0000000000024990                 CBNZ            X8, loc_24AE4
.text:0000000000024994                 LSL             X21, X20, #2
.text:0000000000024998                 MOV             X0, X21 ; unsigned __int64
.text:000000000002499C                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000249A0                 ADD             X8, X0, X21
.text:00000000000249A4                 STP             X0, X0, [X19,#0x68]
.text:00000000000249A8                 STR             X8, [X19,#0x78]
.text:00000000000249AC loc_249AC                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+C8↓j
.text:00000000000249AC                 STR             WZR, [X0]
.text:00000000000249B0                 SUBS            X20, X20, #1
.text:00000000000249B4                 LDR             X8, [X19,#0x70]
.text:00000000000249B8                 ADD             X0, X8, #4
.text:00000000000249BC                 STR             X0, [X19,#0x70]
.text:00000000000249C0                 B.NE            loc_249AC
.text:00000000000249C4                 LDR             X8, [X19,#0x60]
.text:00000000000249C8                 SUB             X8, X8, #1
.text:00000000000249CC                 UCVTF           S0, X8
.text:00000000000249D0                 B               loc_249DC
.text:00000000000249D4 ; ---------------------------------------------------------------------------
.text:00000000000249D4 loc_249D4                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+8C↑j
.text:00000000000249D4                 MOV             W8, #0x5F800000
.text:00000000000249D8                 FMOV            S0, W8
.text:00000000000249DC loc_249DC                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+D8↑j
.text:00000000000249DC                 FMOV            S1, #2.0
.text:00000000000249E0                 MOV             W20, #0x3F800000
.text:00000000000249E4                 FMOV            S9, #-1.0
.text:00000000000249E8                 STR             WZR, [X19,#0x80]
.text:00000000000249EC                 FMOV            S10, #1.0
.text:00000000000249F0                 FDIV            S8, S1, S0
.text:00000000000249F4 loc_249F4                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+1B8↓j
.text:00000000000249F4                 LDR             X8, [X19,#0x40]
.text:00000000000249F8                 LDP             X9, X10, [X8,#0x48]
.text:00000000000249FC                 STR             S9, [SP,#0x50+var_50]
.text:0000000000024A00                 STR             W20, [SP,#0x50+var_50+4]
.text:0000000000024A04                 CMP             X9, X10
.text:0000000000024A08                 B.EQ            loc_24A24
.text:0000000000024A0C                 LDR             X10, [SP,#0x50+var_50]
.text:0000000000024A10                 STR             X10, [X9]
.text:0000000000024A14                 LDR             X9, [X8,#0x48]
.text:0000000000024A18                 ADD             X9, X9, #8
.text:0000000000024A1C                 STR             X9, [X8,#0x48]
.text:0000000000024A20                 B               loc_24A30
.text:0000000000024A24 ; ---------------------------------------------------------------------------
.text:0000000000024A24 loc_24A24                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+110↑j
.text:0000000000024A24                 ADD             X0, X8, #0x40 ; '@'
.text:0000000000024A28                 MOV             X1, SP
.text:0000000000024A2C                 BL              loc_1CAB0
.text:0000000000024A30 loc_24A30                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+128↑j
.text:0000000000024A30                 LDR             X8, [X19,#0x40]
.text:0000000000024A34                 LDP             X9, X10, [X8,#0x48]
.text:0000000000024A38                 STR             S9, [SP,#0x50+var_50]
.text:0000000000024A3C                 STR             W20, [SP,#0x50+var_50+4]
.text:0000000000024A40                 CMP             X9, X10
.text:0000000000024A44                 B.EQ            loc_24A60
.text:0000000000024A48                 LDR             X10, [SP,#0x50+var_50]
.text:0000000000024A4C                 STR             X10, [X9]
.text:0000000000024A50                 LDR             X9, [X8,#0x48]
.text:0000000000024A54                 ADD             X9, X9, #8
.text:0000000000024A58                 STR             X9, [X8,#0x48]
.text:0000000000024A5C                 B               loc_24A6C
.text:0000000000024A60 ; ---------------------------------------------------------------------------
.text:0000000000024A60 loc_24A60                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+14C↑j
.text:0000000000024A60                 ADD             X0, X8, #0x40 ; '@'
.text:0000000000024A64                 MOV             X1, SP
.text:0000000000024A68                 BL              loc_1CAB0
.text:0000000000024A6C loc_24A6C                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+164↑j
.text:0000000000024A6C                 LDR             X8, [X19,#0x48]
.text:0000000000024A70                 LDP             X9, X10, [X8,#0x48]
.text:0000000000024A74                 STR             S9, [SP,#0x50+var_50]
.text:0000000000024A78                 STR             W20, [SP,#0x50+var_50+4]
.text:0000000000024A7C                 CMP             X9, X10
.text:0000000000024A80                 B.EQ            loc_24A9C
.text:0000000000024A84                 LDR             X10, [SP,#0x50+var_50]
.text:0000000000024A88                 STR             X10, [X9]
.text:0000000000024A8C                 LDR             X9, [X8,#0x48]
.text:0000000000024A90                 ADD             X9, X9, #8
.text:0000000000024A94                 STR             X9, [X8,#0x48]
.text:0000000000024A98                 B               loc_24AA8
.text:0000000000024A9C ; ---------------------------------------------------------------------------
.text:0000000000024A9C loc_24A9C                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+188↑j
.text:0000000000024A9C                 ADD             X0, X8, #0x40 ; '@'
.text:0000000000024AA0                 MOV             X1, SP
.text:0000000000024AA4                 BL              loc_1CAB0
.text:0000000000024AA8 loc_24AA8                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+1A0↑j
.text:0000000000024AA8                 FADD            S9, S8, S9
.text:0000000000024AAC                 FCMP            S9, S10
.text:0000000000024AB0                 B.LS            loc_249F4
.text:0000000000024AB4                 LDR             X8, [X22,#0x28]
.text:0000000000024AB8                 LDR             X9, [SP,#0x50+var_48]
.text:0000000000024ABC                 CMP             X8, X9
.text:0000000000024AC0                 B.NE            loc_24AE0
.text:0000000000024AC4                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000024AC8                 LDP             X20, X19, [SP,#0x50+var_10]
.text:0000000000024ACC                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000024AD0                 LDP             D9, D8, [SP,#0x50+var_30]
.text:0000000000024AD4                 LDR             D10, [SP,#0x50+var_40]
.text:0000000000024AD8                 ADD             SP, SP, #0x60 ; '`'
.text:0000000000024ADC                 RET
.text:0000000000024AE0 ; ---------------------------------------------------------------------------
.text:0000000000024AE0 loc_24AE0                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+1C8↑j
.text:0000000000024AE0                 BL              .__stack_chk_fail
.text:0000000000024AE4 ; ---------------------------------------------------------------------------
.text:0000000000024AE4 loc_24AE4                               ; CODE XREF: drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)+98↑j
.text:0000000000024AE4                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000024AE4 ; } // starts at 248F8
.text:0000000000024AE4 ; End of function drawer::GraphicDrawer::GraphicDrawer(ulong,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,std::__1::unique_ptr<drawer::GridDrawer,std::__1::default_delete<drawer::GridDrawer>>,gui::WidgetValueType)
.text:0000000000024AE8 ; =============== S U B R O U T I N E =======================================
.text:0000000000024AE8 ; drawer::GraphicDrawer::dump(Hwobs::FrameDump &)
.text:0000000000024AE8                 EXPORT _ZN6drawer13GraphicDrawer4dumpERN5Hwobs9FrameDumpE
.text:0000000000024AE8 _ZN6drawer13GraphicDrawer4dumpERN5Hwobs9FrameDumpE
.text:0000000000024AE8                                         ; DATA XREF: LOAD:0000000000000E40↑o
.text:0000000000024AE8                                         ; .data.rel.ro:0000000000030400↓o
.text:0000000000024AE8 ; __unwind {
.text:0000000000024AE8                 LDRSW           X8, [X0,#8]
.text:0000000000024AEC                 CMP             W8, #0xB
.text:0000000000024AF0                 B.EQ            locret_24B3C
.text:0000000000024AF4                 ADRP            X9, #_ZN3gui12gWidgetsMetaE_ptr@PAGE
.text:0000000000024AF8                 LDR             X9, [X9,#_ZN3gui12gWidgetsMetaE_ptr@PAGEOFF]
.text:0000000000024AFC                 LDR             X10, [X0,#0x70]
.text:0000000000024B00                 LDR             X9, [X9] ; gui::gWidgetsMeta
.text:0000000000024B04                 LDUR            S0, [X10,#-4]
.text:0000000000024B08                 ADD             X9, X9, X8,LSL#4
.text:0000000000024B0C                 LDR             W9, [X9,#8]
.text:0000000000024B10                 ORR             W9, W9, #2
.text:0000000000024B14                 CMP             W9, #2
.text:0000000000024B18                 B.NE            loc_24B2C
.text:0000000000024B1C                 FCVTZU          X9, S0
.text:0000000000024B20                 FMOV            S0, W9
.text:0000000000024B24                 LSR             X9, X9, #0x20 ; ' '
.text:0000000000024B28                 B               loc_24B2C
.text:0000000000024B2C ; ---------------------------------------------------------------------------
.text:0000000000024B2C loc_24B2C                               ; CODE XREF: drawer::GraphicDrawer::dump(Hwobs::FrameDump &)+30↑j
.text:0000000000024B2C                                         ; drawer::GraphicDrawer::dump(Hwobs::FrameDump &)+40↑j
.text:0000000000024B2C                 LDR             X10, [X1,#0x20]
.text:0000000000024B30                 ADD             X8, X10, X8,LSL#3
.text:0000000000024B34                 STR             S0, [X8]
.text:0000000000024B38                 STR             W9, [X8,#4]
.text:0000000000024B3C locret_24B3C                            ; CODE XREF: drawer::GraphicDrawer::dump(Hwobs::FrameDump &)+8↑j
.text:0000000000024B3C                 RET
.text:0000000000024B3C ; } // starts at 24AE8
.text:0000000000024B3C ; End of function drawer::GraphicDrawer::dump(Hwobs::FrameDump &)
.text:0000000000024B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000024B40 ; __int64 __fastcall drawer::GraphicDrawer::clear(drawer::GraphicDrawer *__hidden this)
.text:0000000000024B40                 EXPORT _ZN6drawer13GraphicDrawer5clearEv
.text:0000000000024B40 _ZN6drawer13GraphicDrawer5clearEv       ; DATA XREF: LOAD:0000000000001A28↑o
.text:0000000000024B40                                         ; .data.rel.ro:0000000000030408↓o
.text:0000000000024B40 ; __unwind {
.text:0000000000024B40                 LDP             X10, X8, [X0,#0x68]
.text:0000000000024B44                 SUB             X9, X8, X10
.text:0000000000024B48                 ASR             X9, X9, #2
.text:0000000000024B4C                 SUBS            X11, X9, #1
.text:0000000000024B50                 B.EQ            loc_24B84
.text:0000000000024B54                 CMP             X11, #1
.text:0000000000024B58                 STR             WZR, [X10]
.text:0000000000024B5C                 B.EQ            loc_24B80
.text:0000000000024B60                 MOV             X8, XZR
.text:0000000000024B64                 SUB             X9, X9, #2
.text:0000000000024B68 loc_24B68                               ; CODE XREF: drawer::GraphicDrawer::clear(void)+3C↓j
.text:0000000000024B68                 LDR             X10, [X0,#0x68]
.text:0000000000024B6C                 ADD             X10, X10, X8,LSL#2
.text:0000000000024B70                 ADD             X8, X8, #1
.text:0000000000024B74                 CMP             X9, X8
.text:0000000000024B78                 STR             WZR, [X10,#4]
.text:0000000000024B7C                 B.NE            loc_24B68
.text:0000000000024B80 loc_24B80                               ; CODE XREF: drawer::GraphicDrawer::clear(void)+1C↑j
.text:0000000000024B80                 LDR             X8, [X0,#0x70]
.text:0000000000024B84 loc_24B84                               ; CODE XREF: drawer::GraphicDrawer::clear(void)+10↑j
.text:0000000000024B84                 LDUR            W8, [X8,#-4]
.text:0000000000024B88                 STR             W8, [X0,#0x80]
.text:0000000000024B8C                 RET
.text:0000000000024B8C ; } // starts at 24B40
.text:0000000000024B8C ; End of function drawer::GraphicDrawer::clear(void)
.text:0000000000024B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000024B90 ; drawer::GraphicDrawer::setColor(glm::tvec4<float, (glm::precision)0> const&)
.text:0000000000024B90                 EXPORT _ZN6drawer13GraphicDrawer8setColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000024B90 _ZN6drawer13GraphicDrawer8setColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000024B90                                         ; DATA XREF: LOAD:0000000000002328↑o
.text:0000000000024B90 ; __unwind {
.text:0000000000024B90                 LDR             Q0, [X1]
.text:0000000000024B94                 MOV             W8, #0x3F800000
.text:0000000000024B98                 LDR             X9, [X0,#0x40]
.text:0000000000024B9C                 STUR            Q0, [X9,#0x58]
.text:0000000000024BA0                 LDR             X9, [X0,#0x48]
.text:0000000000024BA4                 LDR             X10, [X1]
.text:0000000000024BA8                 LDR             W11, [X1,#8]
.text:0000000000024BAC                 STR             X10, [X9,#0x58]
.text:0000000000024BB0                 STP             W11, W8, [X9,#0x60]
.text:0000000000024BB4                 RET
.text:0000000000024BB4 ; } // starts at 24B90
.text:0000000000024BB4 ; End of function drawer::GraphicDrawer::setColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000024BB8 ; =============== S U B R O U T I N E =======================================
.text:0000000000024BB8 ; Attributes: bp-based frame
.text:0000000000024BB8 ; __int64 __fastcall drawer::GraphicDrawer::addValue(drawer::GraphicDrawer *__hidden this, float)
.text:0000000000024BB8                 EXPORT _ZN6drawer13GraphicDrawer8addValueEf
.text:0000000000024BB8 _ZN6drawer13GraphicDrawer8addValueEf    ; DATA XREF: LOAD:0000000000001158↑o
.text:0000000000024BB8 var_10          = -0x10
.text:0000000000024BB8 var_8           = -8
.text:0000000000024BB8 var_s0          =  0
.text:0000000000024BB8 ; __unwind {
.text:0000000000024BB8                 STR             D8, [SP,#-0x10+var_10]!
.text:0000000000024BBC                 STR             X19, [SP,#0x10+var_8]
.text:0000000000024BC0                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024BC4                 ADD             X29, SP, #0x10
.text:0000000000024BC8                 MOV             V8.16B, V0.16B
.text:0000000000024BCC                 LDR             S0, [X0,#0x80]
.text:0000000000024BD0                 MOV             X19, X0
.text:0000000000024BD4                 LDR             X0, [X0,#0x68] ; dest
.text:0000000000024BD8                 LDR             X8, [X19,#0x60]
.text:0000000000024BDC                 ADD             X1, X0, #4 ; src
.text:0000000000024BE0                 FCMP            S0, S8
.text:0000000000024BE4                 LSL             X8, X8, #2
.text:0000000000024BE8                 SUB             X2, X8, #4 ; n
.text:0000000000024BEC                 FCSEL           S0, S8, S0, MI
.text:0000000000024BF0                 STR             S0, [X19,#0x80]
.text:0000000000024BF4                 BL              .memmove
.text:0000000000024BF8                 LDP             X8, X9, [X19,#0x60]
.text:0000000000024BFC                 LDR             X19, [SP,#0x10+var_8]
.text:0000000000024C00                 ADD             X8, X9, X8,LSL#2
.text:0000000000024C04                 STUR            S8, [X8,#-4]
.text:0000000000024C08                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024C0C                 LDR             D8, [SP+0x10+var_10],#0x20
.text:0000000000024C10                 RET
.text:0000000000024C10 ; } // starts at 24BB8
.text:0000000000024C10 ; End of function drawer::GraphicDrawer::addValue(float)
.text:0000000000024C10 ; ---------------------------------------------------------------------------
.text:0000000000024C14                 ALIGN 8
.text:0000000000024C18 ; =============== S U B R O U T I N E =======================================
.text:0000000000024C18 ; Attributes: bp-based frame
.text:0000000000024C18 ; __int64 __fastcall drawer::GraphicDrawer::addValue(drawer::GraphicDrawer *__hidden this, float, float)
.text:0000000000024C18                 EXPORT _ZN6drawer13GraphicDrawer8addValueEff
.text:0000000000024C18 _ZN6drawer13GraphicDrawer8addValueEff   ; DATA XREF: LOAD:0000000000000CD8↑o
.text:0000000000024C18 var_10          = -0x10
.text:0000000000024C18 var_8           = -8
.text:0000000000024C18 var_s0          =  0
.text:0000000000024C18 ; __unwind {
.text:0000000000024C18                 STR             D8, [SP,#-0x10+var_10]!
.text:0000000000024C1C                 STR             X19, [SP,#0x10+var_8]
.text:0000000000024C20                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024C24                 ADD             X29, SP, #0x10
.text:0000000000024C28                 MOV             X19, X0
.text:0000000000024C2C                 LDR             X0, [X0,#0x68] ; dest
.text:0000000000024C30                 FCMP            S1, S0
.text:0000000000024C34                 LDR             X8, [X19,#0x60]
.text:0000000000024C38                 ADD             X1, X0, #4 ; src
.text:0000000000024C3C                 STR             S1, [X19,#0x80]
.text:0000000000024C40                 LSL             X8, X8, #2
.text:0000000000024C44                 FCSEL           S8, S1, S0, MI
.text:0000000000024C48                 SUB             X2, X8, #4 ; n
.text:0000000000024C4C                 BL              .memmove
.text:0000000000024C50                 LDP             X8, X9, [X19,#0x60]
.text:0000000000024C54                 LDR             X19, [SP,#0x10+var_8]
.text:0000000000024C58                 ADD             X8, X9, X8,LSL#2
.text:0000000000024C5C                 STUR            S8, [X8,#-4]
.text:0000000000024C60                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024C64                 LDR             D8, [SP+0x10+var_10],#0x20
.text:0000000000024C68                 RET
.text:0000000000024C68 ; } // starts at 24C18
.text:0000000000024C68 ; End of function drawer::GraphicDrawer::addValue(float,float)
.text:0000000000024C68 ; ---------------------------------------------------------------------------
.text:0000000000024C6C                 ALIGN 0x10
.text:0000000000024C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000024C70 ; Attributes: bp-based frame
.text:0000000000024C70 ; drawer *__fastcall drawer::GraphicDrawer::draw(drawer::GraphicDrawer *__hidden this)
.text:0000000000024C70                 EXPORT _ZN6drawer13GraphicDrawer4drawEv
.text:0000000000024C70 _ZN6drawer13GraphicDrawer4drawEv        ; DATA XREF: LOAD:0000000000001FE0↑o
.text:0000000000024C70                                         ; .data.rel.ro:00000000000303F8↓o
.text:0000000000024C70 var_10          = -0x10
.text:0000000000024C70 var_s0          =  0
.text:0000000000024C70 ; __unwind {
.text:0000000000024C70                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000024C74                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024C78                 ADD             X29, SP, #0x10
.text:0000000000024C7C                 LDR             X8, [X0,#0x50]
.text:0000000000024C80                 MOV             X19, X0
.text:0000000000024C84                 LDR             X9, [X0,#0x18]
.text:0000000000024C88                 STR             X9, [X8,#0x18]
.text:0000000000024C8C                 LDR             X9, [X0,#0x20]
.text:0000000000024C90                 STR             X9, [X8,#0x20]
.text:0000000000024C94                 LDR             X0, [X0,#0x50]
.text:0000000000024C98                 LDR             X8, [X0]
.text:0000000000024C9C                 LDR             X8, [X8,#0x10]
.text:0000000000024CA0                 BLR             X8
.text:0000000000024CA4                 LDR             X8, [X19,#0x58]
.text:0000000000024CA8                 LDR             X9, [X19,#0x18]
.text:0000000000024CAC                 STR             X9, [X8,#0x18]
.text:0000000000024CB0                 LDR             X9, [X19,#0x20]
.text:0000000000024CB4                 STR             X9, [X8,#0x20]
.text:0000000000024CB8                 LDR             X0, [X19,#0x58]
.text:0000000000024CBC                 LDR             X8, [X0]
.text:0000000000024CC0                 LDR             X8, [X8,#0x10]
.text:0000000000024CC4                 BLR             X8
.text:0000000000024CC8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024CCC                 MOV             X0, X19 ; this
.text:0000000000024CD0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000024CD4                 B               ._ZN6drawer13GraphicDrawer11drawGraphicEv ; drawer::GraphicDrawer::drawGraphic(void)
.text:0000000000024CD4 ; } // starts at 24C70
.text:0000000000024CD4 ; End of function drawer::GraphicDrawer::draw(void)
.text:0000000000024CD8 ; =============== S U B R O U T I N E =======================================
.text:0000000000024CD8 ; __int64 __fastcall drawer::GraphicDrawer::drawBackground(drawer::GraphicDrawer *__hidden this)
.text:0000000000024CD8                 EXPORT _ZN6drawer13GraphicDrawer14drawBackgroundEv
.text:0000000000024CD8 _ZN6drawer13GraphicDrawer14drawBackgroundEv
.text:0000000000024CD8                                         ; DATA XREF: LOAD:0000000000001680↑o
.text:0000000000024CD8 ; __unwind {
.text:0000000000024CD8                 LDR             X8, [X0,#0x50]
.text:0000000000024CDC                 LDR             X9, [X0,#0x18]
.text:0000000000024CE0                 STR             X9, [X8,#0x18]
.text:0000000000024CE4                 LDR             X9, [X0,#0x20]
.text:0000000000024CE8                 STR             X9, [X8,#0x20]
.text:0000000000024CEC                 LDR             X0, [X0,#0x50]
.text:0000000000024CF0                 LDR             X8, [X0]
.text:0000000000024CF4                 LDR             X1, [X8,#0x10]
.text:0000000000024CF8                 BR              X1
.text:0000000000024CF8 ; } // starts at 24CD8
.text:0000000000024CF8 ; End of function drawer::GraphicDrawer::drawBackground(void)
.text:0000000000024CF8 ; ---------------------------------------------------------------------------
.text:0000000000024CFC                 ALIGN 0x20
.text:0000000000024D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000024D00 ; __int64 __fastcall drawer::GraphicDrawer::drawGrid(drawer::GraphicDrawer *__hidden this)
.text:0000000000024D00                 EXPORT _ZN6drawer13GraphicDrawer8drawGridEv
.text:0000000000024D00 _ZN6drawer13GraphicDrawer8drawGridEv    ; DATA XREF: LOAD:0000000000001638↑o
.text:0000000000024D00 ; __unwind {
.text:0000000000024D00                 LDR             X8, [X0,#0x58]
.text:0000000000024D04                 LDR             X9, [X0,#0x18]
.text:0000000000024D08                 STR             X9, [X8,#0x18]
.text:0000000000024D0C                 LDR             X9, [X0,#0x20]
.text:0000000000024D10                 STR             X9, [X8,#0x20]
.text:0000000000024D14                 LDR             X0, [X0,#0x58]
.text:0000000000024D18                 LDR             X8, [X0]
.text:0000000000024D1C                 LDR             X1, [X8,#0x10]
.text:0000000000024D20                 BR              X1
.text:0000000000024D20 ; } // starts at 24D00
.text:0000000000024D20 ; End of function drawer::GraphicDrawer::drawGrid(void)
.text:0000000000024D20 ; ---------------------------------------------------------------------------
.text:0000000000024D24                 ALIGN 8
.text:0000000000024D28 ; =============== S U B R O U T I N E =======================================
.text:0000000000024D28 ; Attributes: bp-based frame
.text:0000000000024D28 ; __int64 __fastcall drawer::GraphicDrawer::drawGraphic(drawer::GraphicDrawer *__hidden this)
.text:0000000000024D28                 EXPORT _ZN6drawer13GraphicDrawer11drawGraphicEv
.text:0000000000024D28 _ZN6drawer13GraphicDrawer11drawGraphicEv
.text:0000000000024D28                                         ; CODE XREF: drawer::GraphicDrawer::drawGraphic(void)+C↓j
.text:0000000000024D28                                         ; DATA XREF: LOAD:0000000000000CC0↑o ...
.text:0000000000024D28 var_10          = -0x10
.text:0000000000024D28 var_s0          =  0
.text:0000000000024D28 ; __unwind {
.text:0000000000024D28                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000024D2C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024D30                 ADD             X29, SP, #0x10
.text:0000000000024D34                 LDR             S4, [X0,#0x80]
.text:0000000000024D38                 MOV             X19, X0
.text:0000000000024D3C                 LDR             X8, [X0,#0x60]
.text:0000000000024D40                 FCMP            S4, #0.0
.text:0000000000024D44                 B.EQ            loc_24DD8
.text:0000000000024D48                 CBZ             X8, loc_24E38
.text:0000000000024D4C                 ADRP            X10, #dword_8584@PAGE
.text:0000000000024D50                 FMOV            S0, #1.0
.text:0000000000024D54                 FMOV            S1, #-1.0
.text:0000000000024D58                 MOV             X8, XZR
.text:0000000000024D5C                 FMOV            S2, WZR
.text:0000000000024D60                 MOV             W9, #4
.text:0000000000024D64                 LDR             S3, [X10,#dword_8584@PAGEOFF]
.text:0000000000024D68                 MOV             W10, #4
.text:0000000000024D6C                 B               loc_24D7C
.text:0000000000024D70 ; ---------------------------------------------------------------------------
.text:0000000000024D70 loc_24D70                               ; CODE XREF: drawer::GraphicDrawer::drawGraphic(void)+A8↓j
.text:0000000000024D70                 LDR             S4, [X19,#0x80]
.text:0000000000024D74                 ADD             X10, X10, #0x10
.text:0000000000024D78                 ADD             X9, X9, #8
.text:0000000000024D7C loc_24D7C                               ; CODE XREF: drawer::GraphicDrawer::drawGraphic(void)+44↑j
.text:0000000000024D7C                 LDR             X11, [X19,#0x68]
.text:0000000000024D80                 LDR             S5, [X11,X8,LSL#2]
.text:0000000000024D84                 LDR             X11, [X19,#0x48]
.text:0000000000024D88                 FCMP            S5, #0.0
.text:0000000000024D8C                 LDR             X11, [X11,#0x40]
.text:0000000000024D90                 FCSEL           S5, S0, S5, EQ
.text:0000000000024D94                 TST             X8, #1
.text:0000000000024D98                 FCSEL           S6, S0, S2, EQ
.text:0000000000024D9C                 ADD             X8, X8, #1
.text:0000000000024DA0                 FDIV            S4, S5, S4
.text:0000000000024DA4                 FMUL            S5, S6, S3
.text:0000000000024DA8                 FSUB            S4, S0, S4
.text:0000000000024DAC                 FADD            S4, S4, S4
.text:0000000000024DB0                 FADD            S4, S4, S1
.text:0000000000024DB4                 FADD            S4, S4, S5
.text:0000000000024DB8                 STR             S4, [X11,X9]
.text:0000000000024DBC                 LDR             X11, [X19,#0x40]
.text:0000000000024DC0                 LDR             X11, [X11,#0x40]
.text:0000000000024DC4                 STR             S4, [X11,X10]
.text:0000000000024DC8                 LDR             X11, [X19,#0x60]
.text:0000000000024DCC                 CMP             X8, X11
.text:0000000000024DD0                 B.CC            loc_24D70
.text:0000000000024DD4                 B               loc_24E38
.text:0000000000024DD8 ; ---------------------------------------------------------------------------
.text:0000000000024DD8 loc_24DD8                               ; CODE XREF: drawer::GraphicDrawer::drawGraphic(void)+1C↑j
.text:0000000000024DD8                 CBZ             X8, loc_24E38
.text:0000000000024DDC                 ADRP            X10, #dword_8584@PAGE
.text:0000000000024DE0                 FMOV            S0, WZR
.text:0000000000024DE4                 FMOV            S1, #1.0
.text:0000000000024DE8                 MOV             X8, XZR
.text:0000000000024DEC                 MOV             W9, #4
.text:0000000000024DF0                 LDR             S2, [X10,#dword_8584@PAGEOFF]
.text:0000000000024DF4                 MOV             W10, #4
.text:0000000000024DF8 loc_24DF8                               ; CODE XREF: drawer::GraphicDrawer::drawGraphic(void)+10C↓j
.text:0000000000024DF8                 TST             X8, #1
.text:0000000000024DFC                 LDR             X11, [X19,#0x48]
.text:0000000000024E00                 FCSEL           S3, S1, S0, EQ
.text:0000000000024E04                 ADD             X8, X8, #1
.text:0000000000024E08                 LDR             X11, [X11,#0x40]
.text:0000000000024E0C                 FMUL            S3, S3, S2
.text:0000000000024E10                 FADD            S3, S3, S1
.text:0000000000024E14                 STR             S3, [X11,X9]
.text:0000000000024E18                 ADD             X9, X9, #8
.text:0000000000024E1C                 LDR             X11, [X19,#0x40]
.text:0000000000024E20                 LDR             X11, [X11,#0x40]
.text:0000000000024E24                 STR             S3, [X11,X10]
.text:0000000000024E28                 ADD             X10, X10, #0x10
.text:0000000000024E2C                 LDR             X11, [X19,#0x60]
.text:0000000000024E30                 CMP             X8, X11
.text:0000000000024E34                 B.CC            loc_24DF8
.text:0000000000024E38 loc_24E38                               ; CODE XREF: drawer::GraphicDrawer::drawGraphic(void)+20↑j
.text:0000000000024E38                                         ; drawer::GraphicDrawer::drawGraphic(void)+AC↑j ...
.text:0000000000024E38                 LDR             X8, [X19,#0x40]
.text:0000000000024E3C                 LDR             X9, [X19,#0x18]
.text:0000000000024E40                 STR             X9, [X8,#0x18]
.text:0000000000024E44                 LDR             X9, [X19,#0x20]
.text:0000000000024E48                 STR             X9, [X8,#0x20]
.text:0000000000024E4C                 LDR             X0, [X19,#0x40]
.text:0000000000024E50                 LDR             X8, [X0]
.text:0000000000024E54                 LDR             X8, [X8,#0x10]
.text:0000000000024E58                 BLR             X8
.text:0000000000024E5C                 LDR             X8, [X19,#0x48]
.text:0000000000024E60                 LDR             X9, [X19,#0x18]
.text:0000000000024E64                 STR             X9, [X8,#0x18]
.text:0000000000024E68                 LDR             X9, [X19,#0x20]
.text:0000000000024E6C                 STR             X9, [X8,#0x20]
.text:0000000000024E70                 LDR             X0, [X19,#0x48]
.text:0000000000024E74                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000024E78                 LDR             X8, [X0]
.text:0000000000024E7C                 LDR             X1, [X8,#0x10]
.text:0000000000024E80                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000024E84                 BR              X1
.text:0000000000024E84 ; } // starts at 24D28
.text:0000000000024E84 ; End of function drawer::GraphicDrawer::drawGraphic(void)
.text:0000000000024E88 ; =============== S U B R O U T I N E =======================================
.text:0000000000024E88 ; __int64 __fastcall drawer::GraphicDrawer::recalculateMesh(drawer::GraphicDrawer *__hidden this)
.text:0000000000024E88                 EXPORT _ZN6drawer13GraphicDrawer15recalculateMeshEv
.text:0000000000024E88 _ZN6drawer13GraphicDrawer15recalculateMeshEv
.text:0000000000024E88                                         ; DATA XREF: LOAD:00000000000016F8↑o
.text:0000000000024E88 ; __unwind {
.text:0000000000024E88                 LDR             S4, [X0,#0x80]
.text:0000000000024E8C                 LDR             X8, [X0,#0x60]
.text:0000000000024E90                 FCMP            S4, #0.0
.text:0000000000024E94                 B.EQ            loc_24F28
.text:0000000000024E98                 CBZ             X8, locret_24F88
.text:0000000000024E9C                 ADRP            X10, #dword_8584@PAGE
.text:0000000000024EA0                 FMOV            S0, #1.0
.text:0000000000024EA4                 FMOV            S1, #-1.0
.text:0000000000024EA8                 MOV             X8, XZR
.text:0000000000024EAC                 FMOV            S2, WZR
.text:0000000000024EB0                 MOV             W9, #4
.text:0000000000024EB4                 LDR             S3, [X10,#dword_8584@PAGEOFF]
.text:0000000000024EB8                 MOV             W10, #4
.text:0000000000024EBC                 B               loc_24ECC
.text:0000000000024EC0 ; ---------------------------------------------------------------------------
.text:0000000000024EC0 loc_24EC0                               ; CODE XREF: drawer::GraphicDrawer::recalculateMesh(void)+98↓j
.text:0000000000024EC0                 LDR             S4, [X0,#0x80]
.text:0000000000024EC4                 ADD             X10, X10, #0x10
.text:0000000000024EC8                 ADD             X9, X9, #8
.text:0000000000024ECC loc_24ECC                               ; CODE XREF: drawer::GraphicDrawer::recalculateMesh(void)+34↑j
.text:0000000000024ECC                 LDR             X11, [X0,#0x68]
.text:0000000000024ED0                 LDR             S5, [X11,X8,LSL#2]
.text:0000000000024ED4                 LDR             X11, [X0,#0x48]
.text:0000000000024ED8                 FCMP            S5, #0.0
.text:0000000000024EDC                 LDR             X11, [X11,#0x40]
.text:0000000000024EE0                 FCSEL           S5, S0, S5, EQ
.text:0000000000024EE4                 TST             X8, #1
.text:0000000000024EE8                 FCSEL           S6, S0, S2, EQ
.text:0000000000024EEC                 ADD             X8, X8, #1
.text:0000000000024EF0                 FDIV            S4, S5, S4
.text:0000000000024EF4                 FMUL            S5, S6, S3
.text:0000000000024EF8                 FSUB            S4, S0, S4
.text:0000000000024EFC                 FADD            S4, S4, S4
.text:0000000000024F00                 FADD            S4, S4, S1
.text:0000000000024F04                 FADD            S4, S4, S5
.text:0000000000024F08                 STR             S4, [X11,X9]
.text:0000000000024F0C                 LDR             X11, [X0,#0x40]
.text:0000000000024F10                 LDR             X11, [X11,#0x40]
.text:0000000000024F14                 STR             S4, [X11,X10]
.text:0000000000024F18                 LDR             X11, [X0,#0x60]
.text:0000000000024F1C                 CMP             X8, X11
.text:0000000000024F20                 B.CC            loc_24EC0
.text:0000000000024F24                 B               locret_24F88
.text:0000000000024F28 ; ---------------------------------------------------------------------------
.text:0000000000024F28 loc_24F28                               ; CODE XREF: drawer::GraphicDrawer::recalculateMesh(void)+C↑j
.text:0000000000024F28                 CBZ             X8, locret_24F88
.text:0000000000024F2C                 ADRP            X10, #dword_8584@PAGE
.text:0000000000024F30                 FMOV            S0, WZR
.text:0000000000024F34                 FMOV            S1, #1.0
.text:0000000000024F38                 MOV             X8, XZR
.text:0000000000024F3C                 MOV             W9, #4
.text:0000000000024F40                 LDR             S2, [X10,#dword_8584@PAGEOFF]
.text:0000000000024F44                 MOV             W10, #4
.text:0000000000024F48 loc_24F48                               ; CODE XREF: drawer::GraphicDrawer::recalculateMesh(void)+FC↓j
.text:0000000000024F48                 TST             X8, #1
.text:0000000000024F4C                 LDR             X11, [X0,#0x48]
.text:0000000000024F50                 FCSEL           S3, S1, S0, EQ
.text:0000000000024F54                 ADD             X8, X8, #1
.text:0000000000024F58                 LDR             X11, [X11,#0x40]
.text:0000000000024F5C                 FMUL            S3, S3, S2
.text:0000000000024F60                 FADD            S3, S3, S1
.text:0000000000024F64                 STR             S3, [X11,X9]
.text:0000000000024F68                 ADD             X9, X9, #8
.text:0000000000024F6C                 LDR             X11, [X0,#0x40]
.text:0000000000024F70                 LDR             X11, [X11,#0x40]
.text:0000000000024F74                 STR             S3, [X11,X10]
.text:0000000000024F78                 ADD             X10, X10, #0x10
.text:0000000000024F7C                 LDR             X11, [X0,#0x60]
.text:0000000000024F80                 CMP             X8, X11
.text:0000000000024F84                 B.CC            loc_24F48
.text:0000000000024F88 locret_24F88                            ; CODE XREF: drawer::GraphicDrawer::recalculateMesh(void)+10↑j
.text:0000000000024F88                                         ; drawer::GraphicDrawer::recalculateMesh(void)+9C↑j ...
.text:0000000000024F88                 RET
.text:0000000000024F88 ; } // starts at 24E88
.text:0000000000024F88 ; End of function drawer::GraphicDrawer::recalculateMesh(void)
.text:0000000000024F88 ; ---------------------------------------------------------------------------
.text:0000000000024F8C                 ALIGN 0x10
.text:0000000000024F90 ; __unwind {
.text:0000000000024F90                 STR             X19, [SP,#-0x20]!
.text:0000000000024F94                 STP             X29, X30, [SP,#0x10]
.text:0000000000024F98                 ADD             X29, SP, #0x10
.text:0000000000024F9C                 ADRP            X8, #_ZTVN6drawer13GraphicDrawerE_ptr@PAGE
.text:0000000000024FA0                 MOV             X19, X0
.text:0000000000024FA4                 LDR             X8, [X8,#_ZTVN6drawer13GraphicDrawerE_ptr@PAGEOFF]
.text:0000000000024FA8                 LDR             X0, [X0,#0x68]
.text:0000000000024FAC                 ADD             X8, X8, #0x10
.text:0000000000024FB0                 STR             X8, [X19]
.text:0000000000024FB4                 CBZ             X0, loc_24FC0
.text:0000000000024FB8                 STR             X0, [X19,#0x70]
.text:0000000000024FBC                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000024FC0 loc_24FC0                               ; CODE XREF: .text:0000000000024FB4↑j
.text:0000000000024FC0                 LDR             X0, [X19,#0x58]
.text:0000000000024FC4                 STR             XZR, [X19,#0x58]
.text:0000000000024FC8                 CBZ             X0, loc_24FD8
.text:0000000000024FCC                 LDR             X8, [X0]
.text:0000000000024FD0                 LDR             X8, [X8,#8]
.text:0000000000024FD4                 BLR             X8
.text:0000000000024FD8 loc_24FD8                               ; CODE XREF: .text:0000000000024FC8↑j
.text:0000000000024FD8                 LDR             X0, [X19,#0x50]
.text:0000000000024FDC                 STR             XZR, [X19,#0x50]
.text:0000000000024FE0                 CBZ             X0, loc_24FF0
.text:0000000000024FE4                 LDR             X8, [X0]
.text:0000000000024FE8                 LDR             X8, [X8,#8]
.text:0000000000024FEC                 BLR             X8
.text:0000000000024FF0 loc_24FF0                               ; CODE XREF: .text:0000000000024FE0↑j
.text:0000000000024FF0                 LDR             X0, [X19,#0x48]
.text:0000000000024FF4                 STR             XZR, [X19,#0x48]
.text:0000000000024FF8                 CBZ             X0, loc_25008
.text:0000000000024FFC                 LDR             X8, [X0]
.text:0000000000025000                 LDR             X8, [X8,#8]
.text:0000000000025004                 BLR             X8
.text:0000000000025008 loc_25008                               ; CODE XREF: .text:0000000000024FF8↑j
.text:0000000000025008                 LDR             X0, [X19,#0x40]
.text:000000000002500C                 STR             XZR, [X19,#0x40]
.text:0000000000025010                 CBZ             X0, loc_25028
.text:0000000000025014                 LDR             X8, [X0]
.text:0000000000025018                 LDP             X29, X30, [SP,#0x10]
.text:000000000002501C                 LDR             X1, [X8,#8]
.text:0000000000025020                 LDR             X19, [SP],#0x20
.text:0000000000025024                 BR              X1
.text:0000000000025028 ; ---------------------------------------------------------------------------
.text:0000000000025028 loc_25028                               ; CODE XREF: .text:0000000000025010↑j
.text:0000000000025028                 LDP             X29, X30, [SP,#0x10]
.text:000000000002502C                 LDR             X19, [SP],#0x20
.text:0000000000025030                 RET
.text:0000000000025030 ; } // starts at 24F90
.text:0000000000025030 ; ---------------------------------------------------------------------------
.text:0000000000025034                 ALIGN 8
.text:0000000000025038 ; __unwind {
.text:0000000000025038                 STR             X19, [SP,#-0x20]!
.text:000000000002503C                 STP             X29, X30, [SP,#0x10]
.text:0000000000025040                 ADD             X29, SP, #0x10
.text:0000000000025044                 ADRP            X8, #_ZTVN6drawer13GraphicDrawerE_ptr@PAGE
.text:0000000000025048                 MOV             X19, X0
.text:000000000002504C                 LDR             X8, [X8,#_ZTVN6drawer13GraphicDrawerE_ptr@PAGEOFF]
.text:0000000000025050                 LDR             X0, [X0,#0x68]
.text:0000000000025054                 ADD             X8, X8, #0x10
.text:0000000000025058                 STR             X8, [X19]
.text:000000000002505C                 CBZ             X0, loc_25068
.text:0000000000025060                 STR             X0, [X19,#0x70]
.text:0000000000025064                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000025068 loc_25068                               ; CODE XREF: .text:000000000002505C↑j
.text:0000000000025068                 LDR             X0, [X19,#0x58]
.text:000000000002506C                 STR             XZR, [X19,#0x58]
.text:0000000000025070                 CBZ             X0, loc_25080
.text:0000000000025074                 LDR             X8, [X0]
.text:0000000000025078                 LDR             X8, [X8,#8]
.text:000000000002507C                 BLR             X8
.text:0000000000025080 loc_25080                               ; CODE XREF: .text:0000000000025070↑j
.text:0000000000025080                 LDR             X0, [X19,#0x50]
.text:0000000000025084                 STR             XZR, [X19,#0x50]
.text:0000000000025088                 CBZ             X0, loc_25098
.text:000000000002508C                 LDR             X8, [X0]
.text:0000000000025090                 LDR             X8, [X8,#8]
.text:0000000000025094                 BLR             X8
.text:0000000000025098 loc_25098                               ; CODE XREF: .text:0000000000025088↑j
.text:0000000000025098                 LDR             X0, [X19,#0x48]
.text:000000000002509C                 STR             XZR, [X19,#0x48]
.text:00000000000250A0                 CBZ             X0, loc_250B0
.text:00000000000250A4                 LDR             X8, [X0]
.text:00000000000250A8                 LDR             X8, [X8,#8]
.text:00000000000250AC                 BLR             X8
.text:00000000000250B0 loc_250B0                               ; CODE XREF: .text:00000000000250A0↑j
.text:00000000000250B0                 LDR             X0, [X19,#0x40]
.text:00000000000250B4                 STR             XZR, [X19,#0x40]
.text:00000000000250B8                 CBZ             X0, loc_250C8
.text:00000000000250BC                 LDR             X8, [X0]
.text:00000000000250C0                 LDR             X8, [X8,#8]
.text:00000000000250C4                 BLR             X8
.text:00000000000250C8 loc_250C8                               ; CODE XREF: .text:00000000000250B8↑j
.text:00000000000250C8                 LDP             X29, X30, [SP,#0x10]
.text:00000000000250CC                 MOV             X0, X19
.text:00000000000250D0                 LDR             X19, [SP],#0x20
.text:00000000000250D4                 B               ._ZdlPv ; operator delete(void *)
.text:00000000000250D4 ; } // starts at 25038
.text:00000000000250D8 ; =============== S U B R O U T I N E =======================================
.text:00000000000250D8 ; Attributes: bp-based frame
.text:00000000000250D8 sub_250D8                               ; DATA XREF: .init_array:00000000000305C0↓o
.text:00000000000250D8 var_s0          =  0
.text:00000000000250D8 ; __unwind {
.text:00000000000250D8                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000250DC                 MOV             X29, SP
.text:00000000000250E0                 ADRP            X8, #unk_31008@PAGE
.text:00000000000250E4                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:00000000000250E8                 LDARB           W8, [X8]
.text:00000000000250EC                 TBNZ            W8, #0, loc_2512C
.text:00000000000250F0                 ADRP            X0, #unk_31008@PAGE
.text:00000000000250F4                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:00000000000250F8                 BL              .__cxa_guard_acquire
.text:00000000000250FC                 CBZ             W0, loc_2512C
.text:0000000000025100                 ADRP            X1, #qword_31000@PAGE
.text:0000000000025104                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000025108                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:000000000002510C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025110                 STR             XZR, [X1]
.text:0000000000025114                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000025118                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002511C                 BL              .__cxa_atexit
.text:0000000000025120                 ADRP            X0, #unk_31008@PAGE
.text:0000000000025124                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000025128                 BL              .__cxa_guard_release
.text:000000000002512C loc_2512C                               ; CODE XREF: sub_250D8+14↑j
.text:000000000002512C                                         ; sub_250D8+24↑j
.text:000000000002512C                 ADRP            X8, #unk_31038@PAGE
.text:0000000000025130                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:0000000000025134                 LDARB           W8, [X8]
.text:0000000000025138                 TBNZ            W8, #0, loc_25174
.text:000000000002513C                 ADRP            X0, #unk_31038@PAGE
.text:0000000000025140                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000025144                 BL              .__cxa_guard_acquire
.text:0000000000025148                 CBZ             W0, loc_25174
.text:000000000002514C                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000025150                 ADRP            X1, #unk_31010@PAGE
.text:0000000000025154                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025158                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002515C                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000025160                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000025164                 BL              .__cxa_atexit
.text:0000000000025168                 ADRP            X0, #unk_31038@PAGE
.text:000000000002516C                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000025170                 BL              .__cxa_guard_release
.text:0000000000025174 loc_25174                               ; CODE XREF: sub_250D8+60↑j
.text:0000000000025174                                         ; sub_250D8+70↑j
.text:0000000000025174                 ADRP            X8, #unk_31058@PAGE
.text:0000000000025178                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:000000000002517C                 LDARB           W8, [X8]
.text:0000000000025180                 TBNZ            W8, #0, loc_251C4
.text:0000000000025184                 ADRP            X0, #unk_31058@PAGE
.text:0000000000025188                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002518C                 BL              .__cxa_guard_acquire
.text:0000000000025190                 CBZ             W0, loc_251C4
.text:0000000000025194                 ADRP            X1, #unk_31040@PAGE
.text:0000000000025198                 ADRP            X0, #loc_1C078@PAGE
.text:000000000002519C                 ADRP            X2, #off_2F000@PAGE
.text:00000000000251A0                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:00000000000251A4                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:00000000000251A8                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000251AC                 STP             XZR, XZR, [X1]
.text:00000000000251B0                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:00000000000251B4                 BL              .__cxa_atexit
.text:00000000000251B8                 ADRP            X0, #unk_31058@PAGE
.text:00000000000251BC                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:00000000000251C0                 BL              .__cxa_guard_release
.text:00000000000251C4 loc_251C4                               ; CODE XREF: sub_250D8+A8↑j
.text:00000000000251C4                                         ; sub_250D8+B8↑j
.text:00000000000251C4                 ADRP            X8, #unk_31078@PAGE
.text:00000000000251C8                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:00000000000251CC                 LDARB           W8, [X8]
.text:00000000000251D0                 TBNZ            W8, #0, loc_25218
.text:00000000000251D4                 ADRP            X0, #unk_31078@PAGE
.text:00000000000251D8                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:00000000000251DC                 BL              .__cxa_guard_acquire
.text:00000000000251E0                 CBZ             W0, loc_25218
.text:00000000000251E4                 ADRP            X1, #unk_31060@PAGE
.text:00000000000251E8                 ADRP            X0, #loc_1C100@PAGE
.text:00000000000251EC                 ADRP            X2, #off_2F000@PAGE
.text:00000000000251F0                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:00000000000251F4                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:00000000000251F8                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000251FC                 STP             XZR, XZR, [X1]
.text:0000000000025200                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:0000000000025204                 BL              .__cxa_atexit
.text:0000000000025208                 ADRP            X0, #unk_31078@PAGE
.text:000000000002520C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000025210                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000025214                 B               .__cxa_guard_release
.text:0000000000025218 ; ---------------------------------------------------------------------------
.text:0000000000025218 loc_25218                               ; CODE XREF: sub_250D8+F8↑j
.text:0000000000025218                                         ; sub_250D8+108↑j
.text:0000000000025218                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002521C                 RET
.text:000000000002521C ; } // starts at 250D8
.text:000000000002521C ; End of function sub_250D8
.text:0000000000025220 ; =============== S U B R O U T I N E =======================================
.text:0000000000025220 ; drawer::GridDrawer::GridDrawer(std::__1::unique_ptr<drawer::MeshDrawer, std::__1::default_delete<drawer::MeshDrawer>>)
.text:0000000000025220                 EXPORT _ZN6drawer10GridDrawerC2ENSt3__110unique_ptrINS_10MeshDrawerENS1_14default_deleteIS3_EEEE
.text:0000000000025220 _ZN6drawer10GridDrawerC2ENSt3__110unique_ptrINS_10MeshDrawerENS1_14default_deleteIS3_EEEE
.text:0000000000025220                                         ; DATA XREF: LOAD:0000000000002358↑o
.text:0000000000025220 ; __unwind {
.text:0000000000025220                 ADRP            X10, #_ZTVN6drawer10GridDrawerE_ptr@PAGE
.text:0000000000025224                 MOVI            V0.2D, #0
.text:0000000000025228                 MOV             W8, #0xB
.text:000000000002522C                 MOV             W9, #1
.text:0000000000025230                 LDR             X10, [X10,#_ZTVN6drawer10GridDrawerE_ptr@PAGEOFF]
.text:0000000000025234                 STR             W8, [X0,#8]
.text:0000000000025238                 STRB            W9, [X0,#0x38]
.text:000000000002523C                 STR             XZR, [X0,#0x30]
.text:0000000000025240                 ADD             X8, X10, #0x10
.text:0000000000025244                 STP             Q0, Q0, [X0,#0x10]
.text:0000000000025248                 STR             X8, [X0]
.text:000000000002524C                 LDR             X8, [X1]
.text:0000000000025250                 STR             XZR, [X1]
.text:0000000000025254                 STR             WZR, [X0,#0x48]
.text:0000000000025258                 STR             X8, [X0,#0x40]
.text:000000000002525C                 RET
.text:000000000002525C ; } // starts at 25220
.text:000000000002525C ; End of function drawer::GridDrawer::GridDrawer(std::__1::unique_ptr<drawer::MeshDrawer,std::__1::default_delete<drawer::MeshDrawer>>)
.text:0000000000025260 ; =============== S U B R O U T I N E =======================================
.text:0000000000025260 ; Attributes: bp-based frame
.text:0000000000025260 ; drawer *__fastcall drawer::GridDrawer::draw(drawer::GridDrawer *__hidden this)
.text:0000000000025260                 EXPORT _ZN6drawer10GridDrawer4drawEv
.text:0000000000025260 _ZN6drawer10GridDrawer4drawEv           ; DATA XREF: LOAD:0000000000001098↑o
.text:0000000000025260                                         ; .data.rel.ro:0000000000030430↓o
.text:0000000000025260 var_10          = -0x10
.text:0000000000025260 var_s0          =  0
.text:0000000000025260 ; __unwind {
.text:0000000000025260                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000025264                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025268                 ADD             X29, SP, #0x10
.text:000000000002526C                 MOV             X19, X0
.text:0000000000025270                 BL              ._ZN6drawer10GridDrawer15recalculateGridEv ; drawer::GridDrawer::recalculateGrid(void)
.text:0000000000025274                 LDR             X8, [X19,#0x40]
.text:0000000000025278                 LDR             X9, [X19,#0x18]
.text:000000000002527C                 STR             X9, [X8,#0x18]
.text:0000000000025280                 LDR             X9, [X19,#0x20]
.text:0000000000025284                 STR             X9, [X8,#0x20]
.text:0000000000025288                 LDR             X0, [X19,#0x40]
.text:000000000002528C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025290                 LDR             X8, [X0]
.text:0000000000025294                 LDR             X1, [X8,#0x10]
.text:0000000000025298                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000002529C                 BR              X1
.text:000000000002529C ; } // starts at 25260
.text:000000000002529C ; End of function drawer::GridDrawer::draw(void)
.text:00000000000252A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000252A0 ; Attributes: bp-based frame
.text:00000000000252A0 ; __int64 __fastcall drawer::GridDrawer::recalculateGrid(drawer::GridDrawer *__hidden this)
.text:00000000000252A0                 EXPORT _ZN6drawer10GridDrawer15recalculateGridEv
.text:00000000000252A0 _ZN6drawer10GridDrawer15recalculateGridEv
.text:00000000000252A0                                         ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+C↓j
.text:00000000000252A0                                         ; DATA XREF: LOAD:0000000000001DD0↑o ...
.text:00000000000252A0 var_60          = -0x60
.text:00000000000252A0 var_58          = -0x58
.text:00000000000252A0 var_50          = -0x50
.text:00000000000252A0 var_40          = -0x40
.text:00000000000252A0 var_30          = -0x30
.text:00000000000252A0 var_20          = -0x20
.text:00000000000252A0 var_10          = -0x10
.text:00000000000252A0 var_s0          =  0
.text:00000000000252A0 ; __unwind {
.text:00000000000252A0                 SUB             SP, SP, #0x70
.text:00000000000252A4                 STR             D12, [SP,#0x60+var_50]
.text:00000000000252A8                 STP             D11, D10, [SP,#0x60+var_40]
.text:00000000000252AC                 STP             D9, D8, [SP,#0x60+var_30]
.text:00000000000252B0                 STP             X22, X21, [SP,#0x60+var_20]
.text:00000000000252B4                 STP             X20, X19, [SP,#0x60+var_10]
.text:00000000000252B8                 STP             X29, X30, [SP,#0x60+var_s0]
.text:00000000000252BC                 ADD             X29, SP, #0x60
.text:00000000000252C0                 MRS             X20, #3, c13, c0, #2
.text:00000000000252C4                 MOV             X19, X0
.text:00000000000252C8                 LDR             X8, [X20,#0x28]
.text:00000000000252CC                 STR             X8, [SP,#0x60+var_58]
.text:00000000000252D0                 LDR             X8, [X0]
.text:00000000000252D4                 LDR             X8, [X8,#0x28]
.text:00000000000252D8                 BLR             X8
.text:00000000000252DC                 LDR             S1, [X19,#0x48]
.text:00000000000252E0                 FCMP            S1, S0
.text:00000000000252E4                 B.EQ            loc_25488
.text:00000000000252E8                 LDR             X0, [X19,#0x40]
.text:00000000000252EC                 STR             S0, [X19,#0x48]
.text:00000000000252F0                 LDR             X8, [X0]
.text:00000000000252F4                 LDR             X8, [X8,#0x20]
.text:00000000000252F8                 BLR             X8
.text:00000000000252FC                 FMOV            S9, #1.0
.text:0000000000025300                 LDR             S0, [X19,#0x48]
.text:0000000000025304                 ADRP            X8, #dword_8560@PAGE
.text:0000000000025308                 LDR             S1, [X8,#dword_8560@PAGEOFF]
.text:000000000002530C                 FCMP            S0, S9
.text:0000000000025310                 B.LE            loc_25328
.text:0000000000025314                 FDIV            S0, S1, S0
.text:0000000000025318                 ADRP            X8, #dword_8574@PAGE
.text:000000000002531C                 FADD            S10, S0, S0
.text:0000000000025320                 LDR             S0, [X8,#dword_8574@PAGEOFF]
.text:0000000000025324                 B               loc_25338
.text:0000000000025328 ; ---------------------------------------------------------------------------
.text:0000000000025328 loc_25328                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+70↑j
.text:0000000000025328                 FMUL            S0, S0, S1
.text:000000000002532C                 ADRP            X8, #dword_8574@PAGE
.text:0000000000025330                 LDR             S10, [X8,#dword_8574@PAGEOFF]
.text:0000000000025334                 FADD            S0, S0, S0
.text:0000000000025338 loc_25338                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+84↑j
.text:0000000000025338                 LDR             S1, [X19,#0x18]
.text:000000000002533C                 FMOV            S8, #-1.0
.text:0000000000025340                 FDIV            S11, S0, S1
.text:0000000000025344                 FADD            S12, S11, S8
.text:0000000000025348                 FCMP            S12, S9
.text:000000000002534C                 B.HI            loc_253DC
.text:0000000000025350                 MOV             W21, #0x3F800000
.text:0000000000025354                 MOV             W22, #0xBF800000
.text:0000000000025358 loc_25358                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+138↓j
.text:0000000000025358                 LDR             X8, [X19,#0x40]
.text:000000000002535C                 LDP             X9, X10, [X8,#0x48]
.text:0000000000025360                 STR             S12, [SP,#0x60+var_60]
.text:0000000000025364                 STR             W21, [SP,#0x60+var_60+4]
.text:0000000000025368                 CMP             X9, X10
.text:000000000002536C                 B.EQ            loc_25388
.text:0000000000025370                 LDR             X10, [SP,#0x60+var_60]
.text:0000000000025374                 STR             X10, [X9]
.text:0000000000025378                 LDR             X9, [X8,#0x48]
.text:000000000002537C                 ADD             X9, X9, #8
.text:0000000000025380                 STR             X9, [X8,#0x48]
.text:0000000000025384                 B               loc_25394
.text:0000000000025388 ; ---------------------------------------------------------------------------
.text:0000000000025388 loc_25388                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+CC↑j
.text:0000000000025388                 ADD             X0, X8, #0x40 ; '@'
.text:000000000002538C                 MOV             X1, SP
.text:0000000000025390                 BL              loc_1CAB0
.text:0000000000025394 loc_25394                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+E4↑j
.text:0000000000025394                 LDR             X8, [X19,#0x40]
.text:0000000000025398                 LDP             X9, X10, [X8,#0x48]
.text:000000000002539C                 STR             S12, [SP,#0x60+var_60]
.text:00000000000253A0                 STR             W22, [SP,#0x60+var_60+4]
.text:00000000000253A4                 CMP             X9, X10
.text:00000000000253A8                 B.EQ            loc_253C4
.text:00000000000253AC                 LDR             X10, [SP,#0x60+var_60]
.text:00000000000253B0                 STR             X10, [X9]
.text:00000000000253B4                 LDR             X9, [X8,#0x48]
.text:00000000000253B8                 ADD             X9, X9, #8
.text:00000000000253BC                 STR             X9, [X8,#0x48]
.text:00000000000253C0                 B               loc_253D0
.text:00000000000253C4 ; ---------------------------------------------------------------------------
.text:00000000000253C4 loc_253C4                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+108↑j
.text:00000000000253C4                 ADD             X0, X8, #0x40 ; '@'
.text:00000000000253C8                 MOV             X1, SP
.text:00000000000253CC                 BL              loc_1CAB0
.text:00000000000253D0 loc_253D0                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+120↑j
.text:00000000000253D0                 FADD            S12, S11, S12
.text:00000000000253D4                 FCMP            S12, S9
.text:00000000000253D8                 B.LS            loc_25358
.text:00000000000253DC loc_253DC                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+AC↑j
.text:00000000000253DC                 LDR             S0, [X19,#0x1C]
.text:00000000000253E0                 FDIV            S10, S10, S0
.text:00000000000253E4                 FSUB            S9, S9, S10
.text:00000000000253E8                 FCMP            S9, S8
.text:00000000000253EC                 B.LT            loc_25488
.text:00000000000253F0                 ADRP            X8, #dword_8584@PAGE
.text:00000000000253F4                 MOV             W21, #0xBF800000
.text:00000000000253F8                 MOV             W22, #0x3F800000
.text:00000000000253FC                 LDR             S11, [X8,#dword_8584@PAGEOFF]
.text:0000000000025400 loc_25400                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+1E4↓j
.text:0000000000025400                 LDR             X8, [X19,#0x40]
.text:0000000000025404                 FADD            S0, S9, S11
.text:0000000000025408                 LDP             X9, X10, [X8,#0x48]
.text:000000000002540C                 STR             W21, [SP,#0x60+var_60]
.text:0000000000025410                 STR             S0, [SP,#0x60+var_60+4]
.text:0000000000025414                 CMP             X9, X10
.text:0000000000025418                 B.EQ            loc_25434
.text:000000000002541C                 LDR             X10, [SP,#0x60+var_60]
.text:0000000000025420                 STR             X10, [X9]
.text:0000000000025424                 LDR             X9, [X8,#0x48]
.text:0000000000025428                 ADD             X9, X9, #8
.text:000000000002542C                 STR             X9, [X8,#0x48]
.text:0000000000025430                 B               loc_25440
.text:0000000000025434 ; ---------------------------------------------------------------------------
.text:0000000000025434 loc_25434                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+178↑j
.text:0000000000025434                 ADD             X0, X8, #0x40 ; '@'
.text:0000000000025438                 MOV             X1, SP
.text:000000000002543C                 BL              loc_1CAB0
.text:0000000000025440 loc_25440                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+190↑j
.text:0000000000025440                 LDR             X8, [X19,#0x40]
.text:0000000000025444                 LDP             X9, X10, [X8,#0x48]
.text:0000000000025448                 STR             W22, [SP,#0x60+var_60]
.text:000000000002544C                 STR             S9, [SP,#0x60+var_60+4]
.text:0000000000025450                 CMP             X9, X10
.text:0000000000025454                 B.EQ            loc_25470
.text:0000000000025458                 LDR             X10, [SP,#0x60+var_60]
.text:000000000002545C                 STR             X10, [X9]
.text:0000000000025460                 LDR             X9, [X8,#0x48]
.text:0000000000025464                 ADD             X9, X9, #8
.text:0000000000025468                 STR             X9, [X8,#0x48]
.text:000000000002546C                 B               loc_2547C
.text:0000000000025470 ; ---------------------------------------------------------------------------
.text:0000000000025470 loc_25470                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+1B4↑j
.text:0000000000025470                 ADD             X0, X8, #0x40 ; '@'
.text:0000000000025474                 MOV             X1, SP
.text:0000000000025478                 BL              loc_1CAB0
.text:000000000002547C loc_2547C                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+1CC↑j
.text:000000000002547C                 FSUB            S9, S9, S10
.text:0000000000025480                 FCMP            S9, S8
.text:0000000000025484                 B.GE            loc_25400
.text:0000000000025488 loc_25488                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+44↑j
.text:0000000000025488                                         ; drawer::GridDrawer::recalculateGrid(void)+14C↑j
.text:0000000000025488                 LDR             X8, [X20,#0x28]
.text:000000000002548C                 LDR             X9, [SP,#0x60+var_58]
.text:0000000000025490                 CMP             X8, X9
.text:0000000000025494                 B.NE            loc_254B8
.text:0000000000025498                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:000000000002549C                 LDP             X20, X19, [SP,#0x60+var_10]
.text:00000000000254A0                 LDP             X22, X21, [SP,#0x60+var_20]
.text:00000000000254A4                 LDP             D9, D8, [SP,#0x60+var_30]
.text:00000000000254A8                 LDP             D11, D10, [SP,#0x60+var_40]
.text:00000000000254AC                 LDR             D12, [SP,#0x60+var_50]
.text:00000000000254B0                 ADD             SP, SP, #0x70 ; 'p'
.text:00000000000254B4                 RET
.text:00000000000254B8 ; ---------------------------------------------------------------------------
.text:00000000000254B8 loc_254B8                               ; CODE XREF: drawer::GridDrawer::recalculateGrid(void)+1F4↑j
.text:00000000000254B8                 BL              .__stack_chk_fail
.text:00000000000254B8 ; } // starts at 252A0
.text:00000000000254B8 ; End of function drawer::GridDrawer::recalculateGrid(void)
.text:00000000000254B8 ; ---------------------------------------------------------------------------
.text:00000000000254BC                 ALIGN 0x20
.text:00000000000254C0 ; __unwind {
.text:00000000000254C0                 ADRP            X9, #_ZTVN6drawer10GridDrawerE_ptr@PAGE
.text:00000000000254C4                 MOV             X8, X0
.text:00000000000254C8                 LDR             X9, [X9,#_ZTVN6drawer10GridDrawerE_ptr@PAGEOFF]
.text:00000000000254CC                 LDR             X0, [X0,#0x40]
.text:00000000000254D0                 STR             XZR, [X8,#0x40]
.text:00000000000254D4                 ADD             X9, X9, #0x10
.text:00000000000254D8                 STR             X9, [X8]
.text:00000000000254DC                 CBZ             X0, locret_254EC
.text:00000000000254E0                 LDR             X8, [X0]
.text:00000000000254E4                 LDR             X1, [X8,#8]
.text:00000000000254E8                 BR              X1
.text:00000000000254EC ; ---------------------------------------------------------------------------
.text:00000000000254EC locret_254EC                            ; CODE XREF: .text:00000000000254DC↑j
.text:00000000000254EC                 RET
.text:00000000000254EC ; } // starts at 254C0
.text:00000000000254F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000254F0 ; Attributes: bp-based frame
.text:00000000000254F0 sub_254F0                               ; DATA XREF: .init_array:00000000000305C8↓o
.text:00000000000254F0 var_s0          =  0
.text:00000000000254F0 ; __unwind {
.text:00000000000254F0                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000254F4                 MOV             X29, SP
.text:00000000000254F8                 ADRP            X8, #unk_31008@PAGE
.text:00000000000254FC                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000025500                 LDARB           W8, [X8]
.text:0000000000025504                 TBNZ            W8, #0, loc_25544
.text:0000000000025508                 ADRP            X0, #unk_31008@PAGE
.text:000000000002550C                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000025510                 BL              .__cxa_guard_acquire
.text:0000000000025514                 CBZ             W0, loc_25544
.text:0000000000025518                 ADRP            X1, #qword_31000@PAGE
.text:000000000002551C                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000025520                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:0000000000025524                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025528                 STR             XZR, [X1]
.text:000000000002552C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000025530                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000025534                 BL              .__cxa_atexit
.text:0000000000025538                 ADRP            X0, #unk_31008@PAGE
.text:000000000002553C                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000025540                 BL              .__cxa_guard_release
.text:0000000000025544 loc_25544                               ; CODE XREF: sub_254F0+14↑j
.text:0000000000025544                                         ; sub_254F0+24↑j
.text:0000000000025544                 ADRP            X8, #unk_31038@PAGE
.text:0000000000025548                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:000000000002554C                 LDARB           W8, [X8]
.text:0000000000025550                 TBNZ            W8, #0, loc_2558C
.text:0000000000025554                 ADRP            X0, #unk_31038@PAGE
.text:0000000000025558                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000002555C                 BL              .__cxa_guard_acquire
.text:0000000000025560                 CBZ             W0, loc_2558C
.text:0000000000025564                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000025568                 ADRP            X1, #unk_31010@PAGE
.text:000000000002556C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025570                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000025574                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000025578                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002557C                 BL              .__cxa_atexit
.text:0000000000025580                 ADRP            X0, #unk_31038@PAGE
.text:0000000000025584                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000025588                 BL              .__cxa_guard_release
.text:000000000002558C loc_2558C                               ; CODE XREF: sub_254F0+60↑j
.text:000000000002558C                                         ; sub_254F0+70↑j
.text:000000000002558C                 ADRP            X8, #unk_31058@PAGE
.text:0000000000025590                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:0000000000025594                 LDARB           W8, [X8]
.text:0000000000025598                 TBNZ            W8, #0, loc_255DC
.text:000000000002559C                 ADRP            X0, #unk_31058@PAGE
.text:00000000000255A0                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:00000000000255A4                 BL              .__cxa_guard_acquire
.text:00000000000255A8                 CBZ             W0, loc_255DC
.text:00000000000255AC                 ADRP            X1, #unk_31040@PAGE
.text:00000000000255B0                 ADRP            X0, #loc_1C078@PAGE
.text:00000000000255B4                 ADRP            X2, #off_2F000@PAGE
.text:00000000000255B8                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:00000000000255BC                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:00000000000255C0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000255C4                 STP             XZR, XZR, [X1]
.text:00000000000255C8                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:00000000000255CC                 BL              .__cxa_atexit
.text:00000000000255D0                 ADRP            X0, #unk_31058@PAGE
.text:00000000000255D4                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:00000000000255D8                 BL              .__cxa_guard_release
.text:00000000000255DC loc_255DC                               ; CODE XREF: sub_254F0+A8↑j
.text:00000000000255DC                                         ; sub_254F0+B8↑j
.text:00000000000255DC                 ADRP            X8, #unk_31078@PAGE
.text:00000000000255E0                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:00000000000255E4                 LDARB           W8, [X8]
.text:00000000000255E8                 TBNZ            W8, #0, loc_25630
.text:00000000000255EC                 ADRP            X0, #unk_31078@PAGE
.text:00000000000255F0                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:00000000000255F4                 BL              .__cxa_guard_acquire
.text:00000000000255F8                 CBZ             W0, loc_25630
.text:00000000000255FC                 ADRP            X1, #unk_31060@PAGE
.text:0000000000025600                 ADRP            X0, #loc_1C100@PAGE
.text:0000000000025604                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025608                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:000000000002560C                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000025610                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000025614                 STP             XZR, XZR, [X1]
.text:0000000000025618                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:000000000002561C                 BL              .__cxa_atexit
.text:0000000000025620                 ADRP            X0, #unk_31078@PAGE
.text:0000000000025624                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000025628                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002562C                 B               .__cxa_guard_release
.text:0000000000025630 ; ---------------------------------------------------------------------------
.text:0000000000025630 loc_25630                               ; CODE XREF: sub_254F0+F8↑j
.text:0000000000025630                                         ; sub_254F0+108↑j
.text:0000000000025630                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000025634                 RET
.text:0000000000025634 ; } // starts at 254F0
.text:0000000000025634 ; End of function sub_254F0
.text:0000000000025638 ; =============== S U B R O U T I N E =======================================
.text:0000000000025638 ; Attributes: bp-based frame
.text:0000000000025638 ; __int64 __fastcall drawer::RenderPassDrawer::RenderPassDrawer(drawer::RenderPassDrawer *__hidden this)
.text:0000000000025638                 EXPORT _ZN6drawer16RenderPassDrawerC2Ev
.text:0000000000025638 _ZN6drawer16RenderPassDrawerC2Ev        ; CODE XREF: drawer::RenderPassDrawer::RenderPassDrawer(void)+C↓j
.text:0000000000025638                                         ; DATA XREF: LOAD:0000000000001218↑o ...
.text:0000000000025638 var_50          = -0x50
.text:0000000000025638 var_48          = -0x48
.text:0000000000025638 var_38          = -0x38
.text:0000000000025638 var_30          = -0x30
.text:0000000000025638 var_20          = -0x20
.text:0000000000025638 var_10          = -0x10
.text:0000000000025638 var_s0          =  0
.text:0000000000025638 ; __unwind {
.text:0000000000025638                 SUB             SP, SP, #0x60
.text:000000000002563C                 STR             X23, [SP,#0x50+var_30]
.text:0000000000025640                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000025644                 STP             X20, X19, [SP,#0x50+var_10]
.text:0000000000025648                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000002564C                 ADD             X29, SP, #0x50
.text:0000000000025650                 ADRP            X10, #_ZTVN6drawer16RenderPassDrawerE_ptr@PAGE
.text:0000000000025654                 MRS             X21, #3, c13, c0, #2
.text:0000000000025658                 LDR             X8, [X21,#0x28]
.text:000000000002565C                 MOVI            V0.2D, #0
.text:0000000000025660                 MOV             W9, #0xB
.text:0000000000025664                 LDR             X10, [X10,#_ZTVN6drawer16RenderPassDrawerE_ptr@PAGEOFF]
.text:0000000000025668                 MOV             W22, #1
.text:000000000002566C                 MOV             X19, X0
.text:0000000000025670                 STR             X8, [SP,#0x50+var_38]
.text:0000000000025674                 MOV             X2, SP
.text:0000000000025678                 STR             W9, [X0,#8]
.text:000000000002567C                 MOV             W1, WZR
.text:0000000000025680                 ADD             X8, X10, #0x10
.text:0000000000025684                 STR             XZR, [X0,#0x30]
.text:0000000000025688                 STP             Q0, Q0, [X0,#0x10]
.text:000000000002568C                 STRB            W22, [X0,#0x38]
.text:0000000000025690                 STR             X8, [X0]
.text:0000000000025694                 STP             XZR, XZR, [X0,#0x48]
.text:0000000000025698                 STR             XZR, [X0,#0x40]
.text:000000000002569C                 ADD             X0, X0, #0x60 ; '`'
.text:00000000000256A0                 STP             XZR, XZR, [SP,#0x50+var_48]
.text:00000000000256A4                 STR             XZR, [SP,#0x50+var_50]
.text:00000000000256A8                 BL              ._ZN3gui9FrameDataC2EjRKNSt3__16vectorINS_14RenderPassDataENS1_9allocatorIS3_EEEE ; gui::FrameData::FrameData(uint,std::__1::vector<gui::RenderPassData,std::__1::allocator<gui::RenderPassData>> const&)
.text:00000000000256AC                 LDR             X23, [SP,#0x50+var_50]
.text:00000000000256B0                 CBZ             X23, loc_256E8
.text:00000000000256B4                 LDR             X20, [SP,#0x50+var_48]
.text:00000000000256B8                 CMP             X20, X23
.text:00000000000256BC                 B.EQ            loc_256DC
.text:00000000000256C0 loc_256C0                               ; CODE XREF: drawer::RenderPassDrawer::RenderPassDrawer(void)+98↓j
.text:00000000000256C0                 SUB             X20, X20, #0x60 ; '`'
.text:00000000000256C4                 MOV             X0, X20 ; this
.text:00000000000256C8                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:00000000000256CC                 CMP             X23, X20
.text:00000000000256D0                 B.NE            loc_256C0
.text:00000000000256D4                 LDR             X0, [SP,#0x50+var_50]
.text:00000000000256D8                 B               loc_256E0
.text:00000000000256DC ; ---------------------------------------------------------------------------
.text:00000000000256DC loc_256DC                               ; CODE XREF: drawer::RenderPassDrawer::RenderPassDrawer(void)+84↑j
.text:00000000000256DC                 MOV             X0, X23 ; void *
.text:00000000000256E0 loc_256E0                               ; CODE XREF: drawer::RenderPassDrawer::RenderPassDrawer(void)+A0↑j
.text:00000000000256E0                 STR             X23, [SP,#0x50+var_48]
.text:00000000000256E4                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000256E8 loc_256E8                               ; CODE XREF: drawer::RenderPassDrawer::RenderPassDrawer(void)+78↑j
.text:00000000000256E8                 ADRP            X8, #xmmword_7B30@PAGE
.text:00000000000256EC                 STR             W22, [X19,#0xA0]
.text:00000000000256F0                 ADRP            X9, #xmmword_7B60@PAGE
.text:00000000000256F4                 LDR             Q0, [X8,#xmmword_7B30@PAGEOFF]
.text:00000000000256F8                 LDR             Q1, [X9,#xmmword_7B60@PAGEOFF]
.text:00000000000256FC                 STUR            Q0, [X19,#0xA4]
.text:0000000000025700                 STUR            Q1, [X19,#0xB4]
.text:0000000000025704                 LDR             X8, [X21,#0x28]
.text:0000000000025708                 LDR             X9, [SP,#0x50+var_38]
.text:000000000002570C                 CMP             X8, X9
.text:0000000000025710                 B.NE            loc_2572C
.text:0000000000025714                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000025718                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000002571C                 LDP             X22, X21, [SP,#0x50+var_20]
.text:0000000000025720                 LDR             X23, [SP,#0x50+var_30]
.text:0000000000025724                 ADD             SP, SP, #0x60 ; '`'
.text:0000000000025728                 RET
.text:000000000002572C ; ---------------------------------------------------------------------------
.text:000000000002572C loc_2572C                               ; CODE XREF: drawer::RenderPassDrawer::RenderPassDrawer(void)+D8↑j
.text:000000000002572C                 BL              .__stack_chk_fail
.text:000000000002572C ; } // starts at 25638
.text:000000000002572C ; End of function drawer::RenderPassDrawer::RenderPassDrawer(void)
.text:0000000000025730 ; =============== S U B R O U T I N E =======================================
.text:0000000000025730 ; Attributes: bp-based frame
.text:0000000000025730 ; __int64 __fastcall drawer::RenderPassDrawer::measureWidgets(drawer::RenderPassDrawer *__hidden this)
.text:0000000000025730                 EXPORT _ZN6drawer16RenderPassDrawer14measureWidgetsEv
.text:0000000000025730 _ZN6drawer16RenderPassDrawer14measureWidgetsEv
.text:0000000000025730                                         ; CODE XREF: drawer::RenderPassDrawer::measureWidgets(void)+C↓j
.text:0000000000025730                                         ; DATA XREF: LOAD:0000000000001CF8↑o ...
.text:0000000000025730 var_10          = -0x10
.text:0000000000025730 var_s0          =  0
.text:0000000000025730 ; __unwind {
.text:0000000000025730                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000025734                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025738                 ADD             X29, SP, #0x10
.text:000000000002573C                 LDR             X8, [X0]
.text:0000000000025740                 MOV             X19, X0
.text:0000000000025744                 LDR             X8, [X8,#0x48]
.text:0000000000025748                 BLR             X8
.text:000000000002574C                 LDR             X8, [X19]
.text:0000000000025750                 STR             W0, [X19,#0xA0]
.text:0000000000025754                 MOV             X0, X19
.text:0000000000025758                 LDR             X8, [X8,#0x38]
.text:000000000002575C                 BLR             X8
.text:0000000000025760                 LDR             X8, [X19]
.text:0000000000025764                 MOV             X0, X19
.text:0000000000025768                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000002576C                 LDR             X1, [X8,#0x40]
.text:0000000000025770                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000025774                 BR              X1
.text:0000000000025774 ; } // starts at 25730
.text:0000000000025774 ; End of function drawer::RenderPassDrawer::measureWidgets(void)
.text:0000000000025778 ; =============== S U B R O U T I N E =======================================
.text:0000000000025778 ; Attributes: bp-based frame
.text:0000000000025778 ; __int64 __fastcall drawer::RenderPassDrawer::drawWidgets(drawer::RenderPassDrawer *__hidden this)
.text:0000000000025778                 EXPORT _ZN6drawer16RenderPassDrawer11drawWidgetsEv
.text:0000000000025778 _ZN6drawer16RenderPassDrawer11drawWidgetsEv
.text:0000000000025778                                         ; CODE XREF: drawer::RenderPassDrawer::drawWidgets(void)+C↓j
.text:0000000000025778                                         ; DATA XREF: LOAD:0000000000000F00↑o ...
.text:0000000000025778 var_20          = -0x20
.text:0000000000025778 var_10          = -0x10
.text:0000000000025778 var_s0          =  0
.text:0000000000025778 ; __unwind {
.text:0000000000025778                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000002577C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000025780                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000025784                 ADD             X29, SP, #0x20
.text:0000000000025788                 LDP             X20, X21, [X0,#0x40]
.text:000000000002578C                 CMP             X20, X21
.text:0000000000025790                 B.EQ            loc_257D4
.text:0000000000025794                 ADD             X19, X0, #0xA4
.text:0000000000025798                 ADD             X22, X0, #0x28 ; '('
.text:000000000002579C loc_2579C                               ; CODE XREF: drawer::RenderPassDrawer::drawWidgets(void)+58↓j
.text:000000000002579C                 LDR             X0, [X20]
.text:00000000000257A0                 MOV             X1, X19
.text:00000000000257A4                 BL              ._ZN6drawer15TextblockDrawer12setTextColorERKN3glm5tvec4IfLNS1_9precisionE0EEE ; drawer::TextblockDrawer::setTextColor(glm::tvec4<float,(glm::precision)0> const&)
.text:00000000000257A8                 LDR             X8, [X20]
.text:00000000000257AC                 LDR             W9, [X22,#8]
.text:00000000000257B0                 LDR             X10, [X22]
.text:00000000000257B4                 STR             W9, [X8,#0x30]
.text:00000000000257B8                 STR             X10, [X8,#0x28]
.text:00000000000257BC                 LDR             X0, [X20],#8
.text:00000000000257C0                 LDR             X8, [X0]
.text:00000000000257C4                 LDR             X8, [X8,#0x10]
.text:00000000000257C8                 BLR             X8
.text:00000000000257CC                 CMP             X21, X20
.text:00000000000257D0                 B.NE            loc_2579C
.text:00000000000257D4 loc_257D4                               ; CODE XREF: drawer::RenderPassDrawer::drawWidgets(void)+18↑j
.text:00000000000257D4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000257D8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000257DC                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000257E0                 RET
.text:00000000000257E0 ; } // starts at 25778
.text:00000000000257E0 ; End of function drawer::RenderPassDrawer::drawWidgets(void)
.text:00000000000257E0 ; ---------------------------------------------------------------------------
.text:00000000000257E4                 ALIGN 8
.text:00000000000257E8 ; =============== S U B R O U T I N E =======================================
.text:00000000000257E8 ; Attributes: bp-based frame
.text:00000000000257E8 ; __int64 __fastcall drawer::RenderPassDrawer::drawText(drawer::RenderPassDrawer *__hidden this)
.text:00000000000257E8                 EXPORT _ZN6drawer16RenderPassDrawer8drawTextEv
.text:00000000000257E8 _ZN6drawer16RenderPassDrawer8drawTextEv ; DATA XREF: LOAD:0000000000001698↑o
.text:00000000000257E8 var_20          = -0x20
.text:00000000000257E8 var_10          = -0x10
.text:00000000000257E8 var_s0          =  0
.text:00000000000257E8 ; __unwind {
.text:00000000000257E8                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:00000000000257EC                 STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000257F0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000257F4                 ADD             X29, SP, #0x20
.text:00000000000257F8                 LDP             X20, X21, [X0,#0x40]
.text:00000000000257FC                 CMP             X20, X21
.text:0000000000025800                 B.EQ            loc_25844
.text:0000000000025804                 ADD             X19, X0, #0xA4
.text:0000000000025808                 ADD             X22, X0, #0x28 ; '('
.text:000000000002580C loc_2580C                               ; CODE XREF: drawer::RenderPassDrawer::drawText(void)+58↓j
.text:000000000002580C                 LDR             X0, [X20]
.text:0000000000025810                 MOV             X1, X19
.text:0000000000025814                 BL              ._ZN6drawer15TextblockDrawer12setTextColorERKN3glm5tvec4IfLNS1_9precisionE0EEE ; drawer::TextblockDrawer::setTextColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000025818                 LDR             X8, [X20]
.text:000000000002581C                 LDR             W9, [X22,#8]
.text:0000000000025820                 LDR             X10, [X22]
.text:0000000000025824                 STR             W9, [X8,#0x30]
.text:0000000000025828                 STR             X10, [X8,#0x28]
.text:000000000002582C                 LDR             X0, [X20],#8
.text:0000000000025830                 LDR             X8, [X0]
.text:0000000000025834                 LDR             X8, [X8,#0x10]
.text:0000000000025838                 BLR             X8
.text:000000000002583C                 CMP             X21, X20
.text:0000000000025840                 B.NE            loc_2580C
.text:0000000000025844 loc_25844                               ; CODE XREF: drawer::RenderPassDrawer::drawText(void)+18↑j
.text:0000000000025844                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000025848                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000002584C                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:0000000000025850                 RET
.text:0000000000025850 ; } // starts at 257E8
.text:0000000000025850 ; End of function drawer::RenderPassDrawer::drawText(void)
.text:0000000000025850 ; ---------------------------------------------------------------------------
.text:0000000000025854                 ALIGN 8
.text:0000000000025858 ; =============== S U B R O U T I N E =======================================
.text:0000000000025858 ; Attributes: bp-based frame
.text:0000000000025858 sub_25858                               ; DATA XREF: .init_array:00000000000305D0↓o
.text:0000000000025858 var_s0          =  0
.text:0000000000025858 ; __unwind {
.text:0000000000025858                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002585C                 MOV             X29, SP
.text:0000000000025860                 ADRP            X8, #unk_31008@PAGE
.text:0000000000025864                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000025868                 LDARB           W8, [X8]
.text:000000000002586C                 TBNZ            W8, #0, loc_258AC
.text:0000000000025870                 ADRP            X0, #unk_31008@PAGE
.text:0000000000025874                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000025878                 BL              .__cxa_guard_acquire
.text:000000000002587C                 CBZ             W0, loc_258AC
.text:0000000000025880                 ADRP            X1, #qword_31000@PAGE
.text:0000000000025884                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000025888                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:000000000002588C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025890                 STR             XZR, [X1]
.text:0000000000025894                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000025898                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002589C                 BL              .__cxa_atexit
.text:00000000000258A0                 ADRP            X0, #unk_31008@PAGE
.text:00000000000258A4                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:00000000000258A8                 BL              .__cxa_guard_release
.text:00000000000258AC loc_258AC                               ; CODE XREF: sub_25858+14↑j
.text:00000000000258AC                                         ; sub_25858+24↑j
.text:00000000000258AC                 ADRP            X8, #unk_31038@PAGE
.text:00000000000258B0                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:00000000000258B4                 LDARB           W8, [X8]
.text:00000000000258B8                 TBNZ            W8, #0, loc_258F4
.text:00000000000258BC                 ADRP            X0, #unk_31038@PAGE
.text:00000000000258C0                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000258C4                 BL              .__cxa_guard_acquire
.text:00000000000258C8                 CBZ             W0, loc_258F4
.text:00000000000258CC                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:00000000000258D0                 ADRP            X1, #unk_31010@PAGE
.text:00000000000258D4                 ADRP            X2, #off_2F000@PAGE
.text:00000000000258D8                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:00000000000258DC                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:00000000000258E0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000258E4                 BL              .__cxa_atexit
.text:00000000000258E8                 ADRP            X0, #unk_31038@PAGE
.text:00000000000258EC                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000258F0                 BL              .__cxa_guard_release
.text:00000000000258F4 loc_258F4                               ; CODE XREF: sub_25858+60↑j
.text:00000000000258F4                                         ; sub_25858+70↑j
.text:00000000000258F4                 ADRP            X8, #unk_31058@PAGE
.text:00000000000258F8                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:00000000000258FC                 LDARB           W8, [X8]
.text:0000000000025900                 TBNZ            W8, #0, loc_25944
.text:0000000000025904                 ADRP            X0, #unk_31058@PAGE
.text:0000000000025908                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002590C                 BL              .__cxa_guard_acquire
.text:0000000000025910                 CBZ             W0, loc_25944
.text:0000000000025914                 ADRP            X1, #unk_31040@PAGE
.text:0000000000025918                 ADRP            X0, #loc_1C078@PAGE
.text:000000000002591C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025920                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:0000000000025924                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000025928                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002592C                 STP             XZR, XZR, [X1]
.text:0000000000025930                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:0000000000025934                 BL              .__cxa_atexit
.text:0000000000025938                 ADRP            X0, #unk_31058@PAGE
.text:000000000002593C                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000025940                 BL              .__cxa_guard_release
.text:0000000000025944 loc_25944                               ; CODE XREF: sub_25858+A8↑j
.text:0000000000025944                                         ; sub_25858+B8↑j
.text:0000000000025944                 ADRP            X8, #unk_31078@PAGE
.text:0000000000025948                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000002594C                 LDARB           W8, [X8]
.text:0000000000025950                 TBNZ            W8, #0, loc_25998
.text:0000000000025954                 ADRP            X0, #unk_31078@PAGE
.text:0000000000025958                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002595C                 BL              .__cxa_guard_acquire
.text:0000000000025960                 CBZ             W0, loc_25998
.text:0000000000025964                 ADRP            X1, #unk_31060@PAGE
.text:0000000000025968                 ADRP            X0, #loc_1C100@PAGE
.text:000000000002596C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025970                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:0000000000025974                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000025978                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002597C                 STP             XZR, XZR, [X1]
.text:0000000000025980                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:0000000000025984                 BL              .__cxa_atexit
.text:0000000000025988                 ADRP            X0, #unk_31078@PAGE
.text:000000000002598C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000025990                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000025994                 B               .__cxa_guard_release
.text:0000000000025998 ; ---------------------------------------------------------------------------
.text:0000000000025998 loc_25998                               ; CODE XREF: sub_25858+F8↑j
.text:0000000000025998                                         ; sub_25858+108↑j
.text:0000000000025998                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002599C                 RET
.text:000000000002599C ; } // starts at 25858
.text:000000000002599C ; End of function sub_25858
.text:00000000000259A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000259A0 ; Attributes: bp-based frame
.text:00000000000259A0 ; drawer::RenderPassInfoDrawer::RenderPassInfoDrawer(std::__1::unique_ptr<drawer::TextDrawer, std::__1::default_delete<drawer::TextDrawer>>, std::__1::unique_ptr<drawer::TextDrawer, std::__1::default_delete<drawer::TextDrawer>>, std::__1::unique_ptr<drawer::TextDrawer, std::__1::default_delete<drawer::TextDrawer>>, std::__1::unique_ptr<drawer::RectDrawer, std::__1::default_delete<drawer::RectDrawer>>)
.text:00000000000259A0                 EXPORT _ZN6drawer20RenderPassInfoDrawerC2ENSt3__110unique_ptrINS_10TextDrawerENS1_14default_deleteIS3_EEEES6_S6_NS2_INS_10RectDrawerENS4_IS7_EEEE
.text:00000000000259A0 _ZN6drawer20RenderPassInfoDrawerC2ENSt3__110unique_ptrINS_10TextDrawerENS1_14default_deleteIS3_EEEES6_S6_NS2_INS_10RectDrawerENS4_IS7_EEEE
.text:00000000000259A0                                         ; DATA XREF: LOAD:0000000000000F90↑o
.text:00000000000259A0 var_40          = -0x40
.text:00000000000259A0 var_30          = -0x30
.text:00000000000259A0 var_28          = -0x28
.text:00000000000259A0 var_20          = -0x20
.text:00000000000259A0 var_10          = -0x10
.text:00000000000259A0 var_s0          =  0
.text:00000000000259A0 ; __unwind {
.text:00000000000259A0                 SUB             SP, SP, #0x50
.text:00000000000259A4                 STR             X21, [SP,#0x40+var_20]
.text:00000000000259A8                 STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000259AC                 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000259B0                 ADD             X29, SP, #0x40
.text:00000000000259B4                 ADRP            X11, #_ZTVN6drawer20RenderPassInfoDrawerE_ptr@PAGE
.text:00000000000259B8                 MRS             X20, #3, c13, c0, #2
.text:00000000000259BC                 LDR             X8, [X20,#0x28]
.text:00000000000259C0                 MOVI            V0.2D, #0
.text:00000000000259C4                 MOV             W9, #0xB
.text:00000000000259C8                 LDR             X11, [X11,#_ZTVN6drawer20RenderPassInfoDrawerE_ptr@PAGEOFF]
.text:00000000000259CC                 MOV             W10, #1
.text:00000000000259D0                 MOV             X19, X0
.text:00000000000259D4                 STR             X8, [SP,#0x40+var_28]
.text:00000000000259D8                 MOV             W21, #0x74 ; 't'
.text:00000000000259DC                 STR             W9, [X0,#8]
.text:00000000000259E0                 ADRP            X9, #aVertexFragment@PAGE ; "@Vertex @Fragment"
.text:00000000000259E4                 ADD             X8, X11, #0x10
.text:00000000000259E8                 STRB            W10, [X0,#0x38]
.text:00000000000259EC                 STR             XZR, [X0,#0x30]
.text:00000000000259F0                 ADD             X9, X9, #aVertexFragment@PAGEOFF ; "@Vertex @Fragment"
.text:00000000000259F4                 STP             Q0, Q0, [X0,#0x10]
.text:00000000000259F8                 STR             X8, [X0]
.text:00000000000259FC                 LDR             X8, [X1]
.text:0000000000025A00                 STR             XZR, [X1]
.text:0000000000025A04                 MOV             X1, SP
.text:0000000000025A08                 STR             X8, [X0,#0x40]
.text:0000000000025A0C                 LDR             X8, [X2]
.text:0000000000025A10                 LDR             Q0, [X9] ; "@Vertex @Fragment"
.text:0000000000025A14                 STP             XZR, XZR, [SP,#0x40+var_40]
.text:0000000000025A18                 STR             XZR, [X2]
.text:0000000000025A1C                 STR             X8, [X0,#0x48]
.text:0000000000025A20                 MOV             W8, #0x22 ; '"'
.text:0000000000025A24                 LDR             X9, [X3]
.text:0000000000025A28                 STR             XZR, [SP,#0x40+var_30]
.text:0000000000025A2C                 STRB            W8, [SP,#0x40+var_40]
.text:0000000000025A30                 STR             XZR, [X3]
.text:0000000000025A34                 STR             X9, [X0,#0x50]
.text:0000000000025A38                 LDR             X8, [X4]
.text:0000000000025A3C                 STR             XZR, [X4]
.text:0000000000025A40                 LDR             X0, [X0,#0x48]
.text:0000000000025A44                 STUR            Q0, [SP,#0x40+var_40+1]
.text:0000000000025A48                 STR             X8, [X19,#0x58]
.text:0000000000025A4C                 STURH           W21, [SP,#0x40+var_30+1]
.text:0000000000025A50                 BL              ._ZN6drawer10TextDrawer7setTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE ; drawer::TextDrawer::setText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000025A54                 LDRB            W8, [SP,#0x40+var_40]
.text:0000000000025A58                 TBZ             W8, #0, loc_25A64
.text:0000000000025A5C                 LDR             X0, [SP,#0x40+var_30] ; void *
.text:0000000000025A60                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000025A64 loc_25A64                               ; CODE XREF: drawer::RenderPassInfoDrawer::RenderPassInfoDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>)+B8↑j
.text:0000000000025A64                 LDR             X0, [X19,#0x48]
.text:0000000000025A68                 MOV             W1, #1
.text:0000000000025A6C                 BL              ._ZN6drawer10TextDrawer14setTextGravityEN3gui11TextGravityE ; drawer::TextDrawer::setTextGravity(gui::TextGravity)
.text:0000000000025A70                 ADRP            X8, #aFragment@PAGE ; "@Fragment"
.text:0000000000025A74                 LDR             X0, [X19,#0x50]
.text:0000000000025A78                 ADD             X8, X8, #aFragment@PAGEOFF ; "@Fragment"
.text:0000000000025A7C                 STP             XZR, XZR, [SP,#0x40+var_40]
.text:0000000000025A80                 MOV             W9, #0x12
.text:0000000000025A84                 STR             XZR, [SP,#0x40+var_30]
.text:0000000000025A88                 MOV             X1, SP
.text:0000000000025A8C                 STURH           W21, [SP,#0x40+var_40+9]
.text:0000000000025A90                 LDR             X8, [X8] ; "@Fragment"
.text:0000000000025A94                 STRB            W9, [SP,#0x40+var_40]
.text:0000000000025A98                 STUR            X8, [SP,#0x40+var_40+1]
.text:0000000000025A9C                 BL              ._ZN6drawer10TextDrawer7setTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE ; drawer::TextDrawer::setText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000025AA0                 LDRB            W8, [SP,#0x40+var_40]
.text:0000000000025AA4                 TBZ             W8, #0, loc_25AB0
.text:0000000000025AA8                 LDR             X0, [SP,#0x40+var_30] ; void *
.text:0000000000025AAC                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000025AB0 loc_25AB0                               ; CODE XREF: drawer::RenderPassInfoDrawer::RenderPassInfoDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>)+104↑j
.text:0000000000025AB0                 LDR             X0, [X19,#0x50]
.text:0000000000025AB4                 MOV             W1, #1
.text:0000000000025AB8                 BL              ._ZN6drawer10TextDrawer14setTextGravityEN3gui11TextGravityE ; drawer::TextDrawer::setTextGravity(gui::TextGravity)
.text:0000000000025ABC                 LDR             X8, [X20,#0x28]
.text:0000000000025AC0                 LDR             X9, [SP,#0x40+var_28]
.text:0000000000025AC4                 CMP             X8, X9
.text:0000000000025AC8                 B.NE            loc_25AE0
.text:0000000000025ACC                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000025AD0                 LDP             X20, X19, [SP,#0x40+var_10]
.text:0000000000025AD4                 LDR             X21, [SP,#0x40+var_20]
.text:0000000000025AD8                 ADD             SP, SP, #0x50 ; 'P'
.text:0000000000025ADC                 RET
.text:0000000000025AE0 ; ---------------------------------------------------------------------------
.text:0000000000025AE0 loc_25AE0                               ; CODE XREF: drawer::RenderPassInfoDrawer::RenderPassInfoDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>)+128↑j
.text:0000000000025AE0                 BL              .__stack_chk_fail
.text:0000000000025AE0 ; } // starts at 259A0
.text:0000000000025AE0 ; End of function drawer::RenderPassInfoDrawer::RenderPassInfoDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>>,std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>)
.text:0000000000025AE0 ; ---------------------------------------------------------------------------
.text:0000000000025AE4                 ALIGN 8
.text:0000000000025AE8 ; =============== S U B R O U T I N E =======================================
.text:0000000000025AE8 ; Attributes: bp-based frame
.text:0000000000025AE8 ; __int64 __fastcall drawer::RenderPassInfoDrawer::setFrameIdAndDuration(drawer::RenderPassInfoDrawer *__hidden this, unsigned __int64, long double)
.text:0000000000025AE8                 EXPORT _ZN6drawer20RenderPassInfoDrawer21setFrameIdAndDurationEme
.text:0000000000025AE8 _ZN6drawer20RenderPassInfoDrawer21setFrameIdAndDurationEme
.text:0000000000025AE8                                         ; DATA XREF: LOAD:0000000000000F48↑o
.text:0000000000025AE8 var_58          = -0x58
.text:0000000000025AE8 var_50          = -0x50
.text:0000000000025AE8 var_4C          = -0x4C
.text:0000000000025AE8 var_48          = -0x48
.text:0000000000025AE8 var_40          = -0x40
.text:0000000000025AE8 var_30          = -0x30
.text:0000000000025AE8 var_28          = -0x28
.text:0000000000025AE8 var_20          = -0x20
.text:0000000000025AE8 var_10          = -0x10
.text:0000000000025AE8 var_s0          =  0
.text:0000000000025AE8 ; __unwind {
.text:0000000000025AE8                 SUB             SP, SP, #0x70
.text:0000000000025AEC                 STR             X21, [SP,#0x60+var_20]
.text:0000000000025AF0                 STP             X20, X19, [SP,#0x60+var_10]
.text:0000000000025AF4                 STP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000025AF8                 ADD             X29, SP, #0x60
.text:0000000000025AFC                 MRS             X21, #3, c13, c0, #2
.text:0000000000025B00                 MOV             W9, #0x16
.text:0000000000025B04                 LDR             X8, [X21,#0x28]
.text:0000000000025B08                 MOV             X19, X1
.text:0000000000025B0C                 STUR            X8, [X29,#var_28]
.text:0000000000025B10                 ADRP            X8, #aZu1fms@PAGE ; "%zu(%.1fms)"
.text:0000000000025B14                 ADD             X8, X8, #aZu1fms@PAGEOFF ; "%zu(%.1fms)"
.text:0000000000025B18                 STP             XZR, XZR, [SP,#0x60+var_58]
.text:0000000000025B1C                 STRB            W9, [SP,#0x60+var_58]
.text:0000000000025B20                 MOV             W9, #0x29736D66
.text:0000000000025B28                 LDR             X20, [X0,#0x40]
.text:0000000000025B2C                 LDR             X8, [X8] ; "%zu(%.1fms)"
.text:0000000000025B30                 STR             XZR, [SP,#0x60+var_48]
.text:0000000000025B34                 STR             W9, [SP,#0x60+var_50]
.text:0000000000025B38                 STRB            WZR, [SP,#0x60+var_4C]
.text:0000000000025B3C                 STUR            X8, [SP,#0x60+var_58+1]
.text:0000000000025B40                 BL              .__trunctfsf2
.text:0000000000025B44                 ADD             X8, SP, #0x60+var_40
.text:0000000000025B48                 ADD             X0, SP, #0x60+var_58
.text:0000000000025B4C                 MOV             X1, X19
.text:0000000000025B50                 BL              sub_25BA8
.text:0000000000025B54                 ADD             X1, SP, #0x60+var_40
.text:0000000000025B58                 MOV             X0, X20
.text:0000000000025B5C                 BL              ._ZN6drawer10TextDrawer7setTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE ; drawer::TextDrawer::setText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000025B60                 LDRB            W8, [SP,#0x60+var_40]
.text:0000000000025B64                 TBZ             W8, #0, loc_25B70
.text:0000000000025B68                 LDR             X0, [SP,#0x60+var_30] ; void *
.text:0000000000025B6C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000025B70 loc_25B70                               ; CODE XREF: drawer::RenderPassInfoDrawer::setFrameIdAndDuration(ulong,long double)+7C↑j
.text:0000000000025B70                 LDRB            W8, [SP,#0x60+var_58]
.text:0000000000025B74                 TBZ             W8, #0, loc_25B80
.text:0000000000025B78                 LDR             X0, [SP,#0x60+var_48] ; void *
.text:0000000000025B7C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000025B80 loc_25B80                               ; CODE XREF: drawer::RenderPassInfoDrawer::setFrameIdAndDuration(ulong,long double)+8C↑j
.text:0000000000025B80                 LDR             X8, [X21,#0x28]
.text:0000000000025B84                 LDUR            X9, [X29,#var_28]
.text:0000000000025B88                 CMP             X8, X9
.text:0000000000025B8C                 B.NE            loc_25BA4
.text:0000000000025B90                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000025B94                 LDP             X20, X19, [SP,#0x60+var_10]
.text:0000000000025B98                 LDR             X21, [SP,#0x60+var_20]
.text:0000000000025B9C                 ADD             SP, SP, #0x70 ; 'p'
.text:0000000000025BA0                 RET
.text:0000000000025BA4 ; ---------------------------------------------------------------------------
.text:0000000000025BA4 loc_25BA4                               ; CODE XREF: drawer::RenderPassInfoDrawer::setFrameIdAndDuration(ulong,long double)+A4↑j
.text:0000000000025BA4                 BL              .__stack_chk_fail
.text:0000000000025BA4 ; } // starts at 25AE8
.text:0000000000025BA4 ; End of function drawer::RenderPassInfoDrawer::setFrameIdAndDuration(ulong,long double)
.text:0000000000025BA8 ; =============== S U B R O U T I N E =======================================
.text:0000000000025BA8 ; Attributes: bp-based frame
.text:0000000000025BA8 sub_25BA8                               ; CODE XREF: drawer::RenderPassInfoDrawer::setFrameIdAndDuration(ulong,long double)+68↑p
.text:0000000000025BA8 var_40          = -0x40
.text:0000000000025BA8 var_30          = -0x30
.text:0000000000025BA8 var_20          = -0x20
.text:0000000000025BA8 var_10          = -0x10
.text:0000000000025BA8 var_s0          =  0
.text:0000000000025BA8 ; __unwind {
.text:0000000000025BA8                 STR             D8, [SP,#-0x10+var_40]!
.text:0000000000025BAC                 STP             X24, X23, [SP,#0x40+var_30]
.text:0000000000025BB0                 STP             X22, X21, [SP,#0x40+var_20]
.text:0000000000025BB4                 STP             X20, X19, [SP,#0x40+var_10]
.text:0000000000025BB8                 STP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000025BBC                 ADD             X29, SP, #0x40
.text:0000000000025BC0                 FCVT            D8, S0
.text:0000000000025BC4                 MOV             X19, X8
.text:0000000000025BC8                 LDRB            W8, [X0]
.text:0000000000025BCC                 MOV             X24, #0xFFFFFFFFFFFFFFFF
.text:0000000000025BD0                 LDR             X9, [X0,#0x10]
.text:0000000000025BD4                 MOV             X21, X0
.text:0000000000025BD8                 MOV             X23, X1
.text:0000000000025BDC                 MOV             X2, XZR
.text:0000000000025BE0                 TST             W8, #1
.text:0000000000025BE4                 MOV             V0.16B, V8.16B
.text:0000000000025BE8                 CSINC           X3, X9, X0, NE
.text:0000000000025BEC                 MOV             X0, XZR
.text:0000000000025BF0                 MOV             X4, X1
.text:0000000000025BF4                 MOV             X1, X24
.text:0000000000025BF8                 BL              sub_222F0
.text:0000000000025BFC                 ADD             W8, W0, #1
.text:0000000000025C00                 SXTW            X22, W8
.text:0000000000025C04                 MOV             X0, X22 ; unsigned __int64
.text:0000000000025C08                 BL              ._Znam  ; operator new[](ulong)
.text:0000000000025C0C                 LDRB            W8, [X21]
.text:0000000000025C10                 MOV             V0.16B, V8.16B
.text:0000000000025C14                 LDR             X9, [X21,#0x10]
.text:0000000000025C18                 MOV             X1, X24
.text:0000000000025C1C                 MOV             X2, X22
.text:0000000000025C20                 MOV             X4, X23
.text:0000000000025C24                 TST             W8, #1
.text:0000000000025C28                 CSINC           X3, X9, X21, NE
.text:0000000000025C2C                 MOV             X20, X0
.text:0000000000025C30                 BL              sub_222F0
.text:0000000000025C34                 SUB             X21, X22, #1
.text:0000000000025C38                 STP             XZR, XZR, [X19,#8]
.text:0000000000025C3C                 CMN             X21, #0x10
.text:0000000000025C40                 STR             XZR, [X19]
.text:0000000000025C44                 B.CS            loc_25CB0
.text:0000000000025C48                 CMP             X21, #0x17
.text:0000000000025C4C                 B.CS            loc_25C60
.text:0000000000025C50                 LSL             W8, W21, #1
.text:0000000000025C54                 STRB            W8, [X19],#1
.text:0000000000025C58                 CBNZ            X21, loc_25C80
.text:0000000000025C5C                 B               loc_25C90
.text:0000000000025C60 ; ---------------------------------------------------------------------------
.text:0000000000025C60 loc_25C60                               ; CODE XREF: sub_25BA8+A4↑j
.text:0000000000025C60                 ADD             X8, X22, #0xF
.text:0000000000025C64                 AND             X22, X8, #0xFFFFFFFFFFFFFFF0
.text:0000000000025C68                 MOV             X0, X22 ; unsigned __int64
.text:0000000000025C6C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000025C70                 ORR             X8, X22, #1
.text:0000000000025C74                 STP             X21, X0, [X19,#8]
.text:0000000000025C78                 STR             X8, [X19]
.text:0000000000025C7C                 MOV             X19, X0
.text:0000000000025C80 loc_25C80                               ; CODE XREF: sub_25BA8+B0↑j
.text:0000000000025C80                 MOV             X0, X19 ; dest
.text:0000000000025C84                 MOV             X1, X20 ; src
.text:0000000000025C88                 MOV             X2, X21 ; n
.text:0000000000025C8C                 BL              .memcpy
.text:0000000000025C90 loc_25C90                               ; CODE XREF: sub_25BA8+B4↑j
.text:0000000000025C90                 STRB            WZR, [X19,X21]
.text:0000000000025C94                 MOV             X0, X20 ; void *
.text:0000000000025C98                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000025C9C                 LDP             X20, X19, [SP,#0x40+var_10]
.text:0000000000025CA0                 LDP             X22, X21, [SP,#0x40+var_20]
.text:0000000000025CA4                 LDP             X24, X23, [SP,#0x40+var_30]
.text:0000000000025CA8                 LDR             D8, [SP+0x40+var_40],#0x50
.text:0000000000025CAC                 B               ._ZdaPv ; operator delete[](void *)
.text:0000000000025CB0 ; ---------------------------------------------------------------------------
.text:0000000000025CB0 loc_25CB0                               ; CODE XREF: sub_25BA8+9C↑j
.text:0000000000025CB0                 MOV             X0, X19
.text:0000000000025CB4                 BL              ._ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv ; std::__1::__basic_string_common<true>::__throw_length_error(void)
.text:0000000000025CB4 ; } // starts at 25BA8
.text:0000000000025CB4 ; End of function sub_25BA8
.text:0000000000025CB8 ; =============== S U B R O U T I N E =======================================
.text:0000000000025CB8 ; Attributes: bp-based frame
.text:0000000000025CB8 ; drawer *__fastcall drawer::RenderPassInfoDrawer::draw(drawer::RenderPassInfoDrawer *__hidden this)
.text:0000000000025CB8                 EXPORT _ZN6drawer20RenderPassInfoDrawer4drawEv
.text:0000000000025CB8 _ZN6drawer20RenderPassInfoDrawer4drawEv ; DATA XREF: LOAD:0000000000001128↑o
.text:0000000000025CB8                                         ; .data.rel.ro:0000000000030470↓o
.text:0000000000025CB8 var_10          = -0x10
.text:0000000000025CB8 var_s0          =  0
.text:0000000000025CB8 ; __unwind {
.text:0000000000025CB8                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000025CBC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025CC0                 ADD             X29, SP, #0x10
.text:0000000000025CC4                 LDR             X8, [X0,#0x58]
.text:0000000000025CC8                 MOV             X19, X0
.text:0000000000025CCC                 LDR             X9, [X0,#0x18]
.text:0000000000025CD0                 STR             X9, [X8,#0x18]
.text:0000000000025CD4                 LDR             X9, [X0,#0x20]
.text:0000000000025CD8                 STR             X9, [X8,#0x20]
.text:0000000000025CDC                 LDR             X8, [X0,#0x58]
.text:0000000000025CE0                 LDR             W9, [X0,#0x30]
.text:0000000000025CE4                 LDR             X10, [X0,#0x28]
.text:0000000000025CE8                 STR             W9, [X8,#0x30]
.text:0000000000025CEC                 STR             X10, [X8,#0x28]
.text:0000000000025CF0                 LDR             X0, [X0,#0x58]
.text:0000000000025CF4                 LDR             X8, [X0]
.text:0000000000025CF8                 LDR             X8, [X8,#0x10]
.text:0000000000025CFC                 BLR             X8
.text:0000000000025D00                 LDR             X8, [X19]
.text:0000000000025D04                 MOV             X0, X19
.text:0000000000025D08                 LDR             X8, [X8,#0x28]
.text:0000000000025D0C                 BLR             X8
.text:0000000000025D10                 CMP             W0, #0
.text:0000000000025D14                 LDR             S2, [X19,#0x20]
.text:0000000000025D18                 ADRP            X9, #unk_7988@PAGE
.text:0000000000025D1C                 LDR             S3, [X19,#0x18]
.text:0000000000025D20                 CSET            W8, EQ
.text:0000000000025D24                 LDR             W10, [X19,#0x24]
.text:0000000000025D28                 ADD             X9, X9, #unk_7988@PAGEOFF
.text:0000000000025D2C                 LDR             S0, [X9,W8,UXTW#2]
.text:0000000000025D30                 LDR             W8, [X19,#0x1C]
.text:0000000000025D34                 LDR             X9, [X19,#0x40]
.text:0000000000025D38                 FADD            S1, S0, S0
.text:0000000000025D3C                 FADD            S0, S2, S0
.text:0000000000025D40                 STR             W8, [X9,#0x1C]
.text:0000000000025D44                 STR             W10, [X9,#0x24]
.text:0000000000025D48                 FSUB            S1, S3, S1
.text:0000000000025D4C                 STR             S0, [X9,#0x20]
.text:0000000000025D50                 STR             S1, [X9,#0x18]
.text:0000000000025D54                 LDR             X9, [X19,#0x48]
.text:0000000000025D58                 STR             S1, [X9,#0x18]
.text:0000000000025D5C                 STR             W8, [X9,#0x1C]
.text:0000000000025D60                 STR             S0, [X9,#0x20]
.text:0000000000025D64                 STR             W10, [X9,#0x24]
.text:0000000000025D68                 LDR             X9, [X19,#0x50]
.text:0000000000025D6C                 STR             S1, [X9,#0x18]
.text:0000000000025D70                 STR             W8, [X9,#0x1C]
.text:0000000000025D74                 STR             S0, [X9,#0x20]
.text:0000000000025D78                 STR             W10, [X9,#0x24]
.text:0000000000025D7C                 LDR             X0, [X19,#0x40]
.text:0000000000025D80                 LDR             X8, [X0]
.text:0000000000025D84                 LDR             X8, [X8,#0x10]
.text:0000000000025D88                 BLR             X8
.text:0000000000025D8C                 LDR             X0, [X19,#0x48]
.text:0000000000025D90                 LDR             X8, [X0]
.text:0000000000025D94                 LDR             X8, [X8,#0x10]
.text:0000000000025D98                 BLR             X8
.text:0000000000025D9C                 LDR             X0, [X19,#0x50]
.text:0000000000025DA0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025DA4                 LDR             X8, [X0]
.text:0000000000025DA8                 LDR             X1, [X8,#0x10]
.text:0000000000025DAC                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000025DB0                 BR              X1
.text:0000000000025DB0 ; } // starts at 25CB8
.text:0000000000025DB0 ; End of function drawer::RenderPassInfoDrawer::draw(void)
.text:0000000000025DB0 ; ---------------------------------------------------------------------------
.text:0000000000025DB4                 ALIGN 8
.text:0000000000025DB8 ; =============== S U B R O U T I N E =======================================
.text:0000000000025DB8 ; __int64 __fastcall drawer::RenderPassInfoDrawer::drawBackground(drawer::RenderPassInfoDrawer *__hidden this)
.text:0000000000025DB8                 EXPORT _ZN6drawer20RenderPassInfoDrawer14drawBackgroundEv
.text:0000000000025DB8 _ZN6drawer20RenderPassInfoDrawer14drawBackgroundEv
.text:0000000000025DB8                                         ; DATA XREF: LOAD:0000000000002010↑o
.text:0000000000025DB8 ; __unwind {
.text:0000000000025DB8                 LDR             X8, [X0,#0x58]
.text:0000000000025DBC                 LDR             X9, [X0,#0x18]
.text:0000000000025DC0                 STR             X9, [X8,#0x18]
.text:0000000000025DC4                 LDR             X9, [X0,#0x20]
.text:0000000000025DC8                 STR             X9, [X8,#0x20]
.text:0000000000025DCC                 LDR             X8, [X0,#0x58]
.text:0000000000025DD0                 LDR             W9, [X0,#0x30]
.text:0000000000025DD4                 LDR             X10, [X0,#0x28]
.text:0000000000025DD8                 STR             W9, [X8,#0x30]
.text:0000000000025DDC                 STR             X10, [X8,#0x28]
.text:0000000000025DE0                 LDR             X0, [X0,#0x58]
.text:0000000000025DE4                 LDR             X8, [X0]
.text:0000000000025DE8                 LDR             X1, [X8,#0x10]
.text:0000000000025DEC                 BR              X1
.text:0000000000025DEC ; } // starts at 25DB8
.text:0000000000025DEC ; End of function drawer::RenderPassInfoDrawer::drawBackground(void)
.text:0000000000025DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000025DF0 ; Attributes: bp-based frame
.text:0000000000025DF0 ; __int64 __fastcall drawer::RenderPassInfoDrawer::drawText(drawer::RenderPassInfoDrawer *__hidden this)
.text:0000000000025DF0                 EXPORT _ZN6drawer20RenderPassInfoDrawer8drawTextEv
.text:0000000000025DF0 _ZN6drawer20RenderPassInfoDrawer8drawTextEv
.text:0000000000025DF0                                         ; DATA XREF: LOAD:0000000000001938↑o
.text:0000000000025DF0 var_10          = -0x10
.text:0000000000025DF0 var_s0          =  0
.text:0000000000025DF0 ; __unwind {
.text:0000000000025DF0                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000025DF4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025DF8                 ADD             X29, SP, #0x10
.text:0000000000025DFC                 LDR             X8, [X0]
.text:0000000000025E00                 MOV             X19, X0
.text:0000000000025E04                 LDR             X8, [X8,#0x28]
.text:0000000000025E08                 BLR             X8
.text:0000000000025E0C                 CMP             W0, #0
.text:0000000000025E10                 LDR             S2, [X19,#0x20]
.text:0000000000025E14                 ADRP            X9, #unk_7988@PAGE
.text:0000000000025E18                 LDR             S3, [X19,#0x18]
.text:0000000000025E1C                 CSET            W8, EQ
.text:0000000000025E20                 LDR             W10, [X19,#0x24]
.text:0000000000025E24                 ADD             X9, X9, #unk_7988@PAGEOFF
.text:0000000000025E28                 LDR             S0, [X9,W8,UXTW#2]
.text:0000000000025E2C                 LDR             W8, [X19,#0x1C]
.text:0000000000025E30                 LDR             X9, [X19,#0x40]
.text:0000000000025E34                 FADD            S1, S0, S0
.text:0000000000025E38                 FADD            S0, S2, S0
.text:0000000000025E3C                 STR             W8, [X9,#0x1C]
.text:0000000000025E40                 STR             W10, [X9,#0x24]
.text:0000000000025E44                 FSUB            S1, S3, S1
.text:0000000000025E48                 STR             S0, [X9,#0x20]
.text:0000000000025E4C                 STR             S1, [X9,#0x18]
.text:0000000000025E50                 LDR             X9, [X19,#0x48]
.text:0000000000025E54                 STR             S1, [X9,#0x18]
.text:0000000000025E58                 STR             W8, [X9,#0x1C]
.text:0000000000025E5C                 STR             S0, [X9,#0x20]
.text:0000000000025E60                 STR             W10, [X9,#0x24]
.text:0000000000025E64                 LDR             X9, [X19,#0x50]
.text:0000000000025E68                 STR             S1, [X9,#0x18]
.text:0000000000025E6C                 STR             W8, [X9,#0x1C]
.text:0000000000025E70                 STR             S0, [X9,#0x20]
.text:0000000000025E74                 STR             W10, [X9,#0x24]
.text:0000000000025E78                 LDR             X0, [X19,#0x40]
.text:0000000000025E7C                 LDR             X8, [X0]
.text:0000000000025E80                 LDR             X8, [X8,#0x10]
.text:0000000000025E84                 BLR             X8
.text:0000000000025E88                 LDR             X0, [X19,#0x48]
.text:0000000000025E8C                 LDR             X8, [X0]
.text:0000000000025E90                 LDR             X8, [X8,#0x10]
.text:0000000000025E94                 BLR             X8
.text:0000000000025E98                 LDR             X0, [X19,#0x50]
.text:0000000000025E9C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025EA0                 LDR             X8, [X0]
.text:0000000000025EA4                 LDR             X1, [X8,#0x10]
.text:0000000000025EA8                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000025EAC                 BR              X1
.text:0000000000025EAC ; } // starts at 25DF0
.text:0000000000025EAC ; End of function drawer::RenderPassInfoDrawer::drawText(void)
.text:0000000000025EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000025EB0 ; Attributes: bp-based frame
.text:0000000000025EB0 ; __int64 __fastcall drawer::RenderPassInfoDrawer::getTextDrawnArea(drawer::RenderPassInfoDrawer *__hidden this)
.text:0000000000025EB0                 EXPORT _ZN6drawer20RenderPassInfoDrawer16getTextDrawnAreaEv
.text:0000000000025EB0 _ZN6drawer20RenderPassInfoDrawer16getTextDrawnAreaEv
.text:0000000000025EB0                                         ; DATA XREF: LOAD:0000000000001710↑o
.text:0000000000025EB0 var_10          = -0x10
.text:0000000000025EB0 var_s0          =  0
.text:0000000000025EB0 ; __unwind {
.text:0000000000025EB0                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000025EB4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025EB8                 ADD             X29, SP, #0x10
.text:0000000000025EBC                 LDR             X8, [X0]
.text:0000000000025EC0                 MOV             X19, X0
.text:0000000000025EC4                 LDR             X8, [X8,#0x28]
.text:0000000000025EC8                 BLR             X8
.text:0000000000025ECC                 CMP             W0, #0
.text:0000000000025ED0                 ADRP            X9, #unk_7988@PAGE
.text:0000000000025ED4                 CSET            W8, EQ
.text:0000000000025ED8                 ADD             X9, X9, #unk_7988@PAGEOFF
.text:0000000000025EDC                 LDP             S3, S1, [X19,#0x20]
.text:0000000000025EE0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000025EE4                 LDR             S0, [X9,W8,UXTW#2]
.text:0000000000025EE8                 FADD            S2, S0, S0
.text:0000000000025EEC                 FADD            S0, S3, S0
.text:0000000000025EF0                 LDP             S4, S3, [X19,#0x18]
.text:0000000000025EF4                 FSUB            S2, S4, S2
.text:0000000000025EF8                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000025EFC                 RET
.text:0000000000025EFC ; } // starts at 25EB0
.text:0000000000025EFC ; End of function drawer::RenderPassInfoDrawer::getTextDrawnArea(void)
.text:0000000000025F00 ; ---------------------------------------------------------------------------
.text:0000000000025F00 ; __unwind {
.text:0000000000025F00                 STR             X19, [SP,#-0x20]!
.text:0000000000025F04                 STP             X29, X30, [SP,#0x10]
.text:0000000000025F08                 ADD             X29, SP, #0x10
.text:0000000000025F0C                 ADRP            X8, #_ZTVN6drawer20RenderPassInfoDrawerE_ptr@PAGE
.text:0000000000025F10                 MOV             X19, X0
.text:0000000000025F14                 LDR             X8, [X8,#_ZTVN6drawer20RenderPassInfoDrawerE_ptr@PAGEOFF]
.text:0000000000025F18                 LDR             X0, [X0,#0x58]
.text:0000000000025F1C                 STR             XZR, [X19,#0x58]
.text:0000000000025F20                 ADD             X8, X8, #0x10
.text:0000000000025F24                 STR             X8, [X19]
.text:0000000000025F28                 CBZ             X0, loc_25F38
.text:0000000000025F2C                 LDR             X8, [X0]
.text:0000000000025F30                 LDR             X8, [X8,#8]
.text:0000000000025F34                 BLR             X8
.text:0000000000025F38 loc_25F38                               ; CODE XREF: .text:0000000000025F28↑j
.text:0000000000025F38                 LDR             X0, [X19,#0x50]
.text:0000000000025F3C                 STR             XZR, [X19,#0x50]
.text:0000000000025F40                 CBZ             X0, loc_25F50
.text:0000000000025F44                 LDR             X8, [X0]
.text:0000000000025F48                 LDR             X8, [X8,#8]
.text:0000000000025F4C                 BLR             X8
.text:0000000000025F50 loc_25F50                               ; CODE XREF: .text:0000000000025F40↑j
.text:0000000000025F50                 LDR             X0, [X19,#0x48]
.text:0000000000025F54                 STR             XZR, [X19,#0x48]
.text:0000000000025F58                 CBZ             X0, loc_25F68
.text:0000000000025F5C                 LDR             X8, [X0]
.text:0000000000025F60                 LDR             X8, [X8,#8]
.text:0000000000025F64                 BLR             X8
.text:0000000000025F68 loc_25F68                               ; CODE XREF: .text:0000000000025F58↑j
.text:0000000000025F68                 LDR             X0, [X19,#0x40]
.text:0000000000025F6C                 STR             XZR, [X19,#0x40]
.text:0000000000025F70                 CBZ             X0, loc_25F88
.text:0000000000025F74                 LDR             X8, [X0]
.text:0000000000025F78                 LDP             X29, X30, [SP,#0x10]
.text:0000000000025F7C                 LDR             X1, [X8,#8]
.text:0000000000025F80                 LDR             X19, [SP],#0x20
.text:0000000000025F84                 BR              X1
.text:0000000000025F88 ; ---------------------------------------------------------------------------
.text:0000000000025F88 loc_25F88                               ; CODE XREF: .text:0000000000025F70↑j
.text:0000000000025F88                 LDP             X29, X30, [SP,#0x10]
.text:0000000000025F8C                 LDR             X19, [SP],#0x20
.text:0000000000025F90                 RET
.text:0000000000025F90 ; } // starts at 25F00
.text:0000000000025F90 ; ---------------------------------------------------------------------------
.text:0000000000025F94                 ALIGN 8
.text:0000000000025F98 ; =============== S U B R O U T I N E =======================================
.text:0000000000025F98 ; Attributes: bp-based frame
.text:0000000000025F98 sub_25F98                               ; DATA XREF: .init_array:00000000000305D8↓o
.text:0000000000025F98 var_s0          =  0
.text:0000000000025F98 ; __unwind {
.text:0000000000025F98                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000025F9C                 MOV             X29, SP
.text:0000000000025FA0                 ADRP            X8, #unk_31008@PAGE
.text:0000000000025FA4                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000025FA8                 LDARB           W8, [X8]
.text:0000000000025FAC                 TBNZ            W8, #0, loc_25FEC
.text:0000000000025FB0                 ADRP            X0, #unk_31008@PAGE
.text:0000000000025FB4                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000025FB8                 BL              .__cxa_guard_acquire
.text:0000000000025FBC                 CBZ             W0, loc_25FEC
.text:0000000000025FC0                 ADRP            X1, #qword_31000@PAGE
.text:0000000000025FC4                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000025FC8                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:0000000000025FCC                 ADRP            X2, #off_2F000@PAGE
.text:0000000000025FD0                 STR             XZR, [X1]
.text:0000000000025FD4                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000025FD8                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000025FDC                 BL              .__cxa_atexit
.text:0000000000025FE0                 ADRP            X0, #unk_31008@PAGE
.text:0000000000025FE4                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000025FE8                 BL              .__cxa_guard_release
.text:0000000000025FEC loc_25FEC                               ; CODE XREF: sub_25F98+14↑j
.text:0000000000025FEC                                         ; sub_25F98+24↑j
.text:0000000000025FEC                 ADRP            X8, #unk_31038@PAGE
.text:0000000000025FF0                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:0000000000025FF4                 LDARB           W8, [X8]
.text:0000000000025FF8                 TBNZ            W8, #0, loc_26034
.text:0000000000025FFC                 ADRP            X0, #unk_31038@PAGE
.text:0000000000026000                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000026004                 BL              .__cxa_guard_acquire
.text:0000000000026008                 CBZ             W0, loc_26034
.text:000000000002600C                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000026010                 ADRP            X1, #unk_31010@PAGE
.text:0000000000026014                 ADRP            X2, #off_2F000@PAGE
.text:0000000000026018                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002601C                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000026020                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000026024                 BL              .__cxa_atexit
.text:0000000000026028                 ADRP            X0, #unk_31038@PAGE
.text:000000000002602C                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000026030                 BL              .__cxa_guard_release
.text:0000000000026034 loc_26034                               ; CODE XREF: sub_25F98+60↑j
.text:0000000000026034                                         ; sub_25F98+70↑j
.text:0000000000026034                 ADRP            X8, #unk_31058@PAGE
.text:0000000000026038                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:000000000002603C                 LDARB           W8, [X8]
.text:0000000000026040                 TBNZ            W8, #0, loc_26084
.text:0000000000026044                 ADRP            X0, #unk_31058@PAGE
.text:0000000000026048                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002604C                 BL              .__cxa_guard_acquire
.text:0000000000026050                 CBZ             W0, loc_26084
.text:0000000000026054                 ADRP            X1, #unk_31040@PAGE
.text:0000000000026058                 ADRP            X0, #loc_1C078@PAGE
.text:000000000002605C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000026060                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:0000000000026064                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000026068                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002606C                 STP             XZR, XZR, [X1]
.text:0000000000026070                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:0000000000026074                 BL              .__cxa_atexit
.text:0000000000026078                 ADRP            X0, #unk_31058@PAGE
.text:000000000002607C                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000026080                 BL              .__cxa_guard_release
.text:0000000000026084 loc_26084                               ; CODE XREF: sub_25F98+A8↑j
.text:0000000000026084                                         ; sub_25F98+B8↑j
.text:0000000000026084                 ADRP            X8, #unk_31078@PAGE
.text:0000000000026088                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000002608C                 LDARB           W8, [X8]
.text:0000000000026090                 TBNZ            W8, #0, loc_260D8
.text:0000000000026094                 ADRP            X0, #unk_31078@PAGE
.text:0000000000026098                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002609C                 BL              .__cxa_guard_acquire
.text:00000000000260A0                 CBZ             W0, loc_260D8
.text:00000000000260A4                 ADRP            X1, #unk_31060@PAGE
.text:00000000000260A8                 ADRP            X0, #loc_1C100@PAGE
.text:00000000000260AC                 ADRP            X2, #off_2F000@PAGE
.text:00000000000260B0                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:00000000000260B4                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:00000000000260B8                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000260BC                 STP             XZR, XZR, [X1]
.text:00000000000260C0                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:00000000000260C4                 BL              .__cxa_atexit
.text:00000000000260C8                 ADRP            X0, #unk_31078@PAGE
.text:00000000000260CC                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:00000000000260D0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000260D4                 B               .__cxa_guard_release
.text:00000000000260D8 ; ---------------------------------------------------------------------------
.text:00000000000260D8 loc_260D8                               ; CODE XREF: sub_25F98+F8↑j
.text:00000000000260D8                                         ; sub_25F98+108↑j
.text:00000000000260D8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000260DC                 RET
.text:00000000000260DC ; } // starts at 25F98
.text:00000000000260DC ; End of function sub_25F98
.text:00000000000260E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000260E0 ; __int64 __fastcall drawer::TextDrawer::TextDrawer(drawer::TextDrawer *__hidden this)
.text:00000000000260E0                 EXPORT _ZN6drawer10TextDrawerC2Ev
.text:00000000000260E0 _ZN6drawer10TextDrawerC2Ev              ; DATA XREF: LOAD:0000000000001C08↑o
.text:00000000000260E0 ; __unwind {
.text:00000000000260E0                 ADRP            X9, #_ZTVN6drawer10TextDrawerE_ptr@PAGE
.text:00000000000260E4                 MOVI            V0.2D, #0
.text:00000000000260E8                 MOV             W8, #0xB
.text:00000000000260EC                 MOV             W10, #1
.text:00000000000260F0                 LDR             X9, [X9,#_ZTVN6drawer10TextDrawerE_ptr@PAGEOFF]
.text:00000000000260F4                 STR             W8, [X0,#8]
.text:00000000000260F8                 STP             XZR, XZR, [X0,#0x50]
.text:00000000000260FC                 STRB            W10, [X0,#0x38]
.text:0000000000026100                 ADD             X8, X9, #0x10
.text:0000000000026104                 STR             XZR, [X0,#0x30]
.text:0000000000026108                 STUR            XZR, [X0,#0x44]
.text:000000000002610C                 STP             Q0, Q0, [X0,#0x10]
.text:0000000000026110                 STR             X8, [X0]
.text:0000000000026114                 MOV             W8, #6
.text:0000000000026118                 STUR            XZR, [X0,#0x3C]
.text:000000000002611C                 STR             XZR, [X0,#0x60]
.text:0000000000026120                 STRB            W8, [X0,#0x50]
.text:0000000000026124                 MOV             W8, #0x412F4E
.text:000000000002612C                 STUR            Q0, [X0,#0x78]
.text:0000000000026130                 STUR            Q0, [X0,#0x68]
.text:0000000000026134                 STUR            W8, [X0,#0x51]
.text:0000000000026138                 RET
.text:0000000000026138 ; } // starts at 260E0
.text:0000000000026138 ; End of function drawer::TextDrawer::TextDrawer(void)
.text:0000000000026138 ; ---------------------------------------------------------------------------
.text:000000000002613C                 ALIGN 0x20
.text:0000000000026140 ; =============== S U B R O U T I N E =======================================
.text:0000000000026140 ; void __fastcall drawer::TextDrawer::~TextDrawer(drawer::TextDrawer *__hidden this)
.text:0000000000026140                 EXPORT _ZN6drawer10TextDrawerD2Ev
.text:0000000000026140 _ZN6drawer10TextDrawerD2Ev              ; DATA XREF: LOAD:00000000000012F0↑o
.text:0000000000026140                                         ; LOAD:0000000000001D58↑o ...
.text:0000000000026140 ; __unwind {
.text:0000000000026140                 ADRP            X8, #_ZTVN6drawer10TextDrawerE_ptr@PAGE ; Alternative name is 'drawer::TextDrawer::~TextDrawer()'
.text:0000000000026144                 LDR             X8, [X8,#_ZTVN6drawer10TextDrawerE_ptr@PAGEOFF]
.text:0000000000026148                 LDRB            W9, [X0,#0x50]
.text:000000000002614C                 ADD             X8, X8, #0x10
.text:0000000000026150                 STR             X8, [X0]
.text:0000000000026154                 TBNZ            W9, #0, loc_2615C
.text:0000000000026158                 RET
.text:000000000002615C ; ---------------------------------------------------------------------------
.text:000000000002615C loc_2615C                               ; CODE XREF: drawer::TextDrawer::~TextDrawer()+14↑j
.text:000000000002615C                 LDR             X0, [X0,#0x60] ; void *
.text:0000000000026160                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000026160 ; } // starts at 26140
.text:0000000000026160 ; End of function drawer::TextDrawer::~TextDrawer()
.text:0000000000026160 ; ---------------------------------------------------------------------------
.text:0000000000026164                 ALIGN 8
.text:0000000000026168 ; drawer::TextDrawer::~TextDrawer()
.text:0000000000026168                 EXPORT _ZN6drawer10TextDrawerD0Ev
.text:0000000000026168 _ZN6drawer10TextDrawerD0Ev              ; DATA XREF: LOAD:00000000000010E0↑o
.text:0000000000026168                                         ; .data.rel.ro:00000000000304A8↓o
.text:0000000000026168 ; __unwind {
.text:0000000000026168                 BRK             #1
.text:0000000000026168 ; } // starts at 26168
.text:0000000000026168 ; ---------------------------------------------------------------------------
.text:000000000002616C                 DCD 0
.text:0000000000026170 ; =============== S U B R O U T I N E =======================================
.text:0000000000026170 ; drawer::TextDrawer::setText(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)
.text:0000000000026170                 EXPORT _ZN6drawer10TextDrawer7setTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
.text:0000000000026170 _ZN6drawer10TextDrawer7setTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
.text:0000000000026170                                         ; CODE XREF: drawer::TextDrawer::setText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+C↓j
.text:0000000000026170                                         ; DATA XREF: LOAD:0000000000001230↑o ...
.text:0000000000026170 ; __unwind {
.text:0000000000026170                 ADD             X0, X0, #0x50 ; 'P'
.text:0000000000026174                 B               ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::operator=(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000026174 ; } // starts at 26170
.text:0000000000026174 ; End of function drawer::TextDrawer::setText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000026178 ; =============== S U B R O U T I N E =======================================
.text:0000000000026178 ; drawer::TextDrawer::setTextColor(glm::tvec4<float, (glm::precision)0> const&)
.text:0000000000026178                 EXPORT _ZN6drawer10TextDrawer12setTextColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000026178 _ZN6drawer10TextDrawer12setTextColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000026178                                         ; CODE XREF: drawer::TextDrawer::setTextColor(glm::tvec4<float,(glm::precision)0> const&)+C↓j
.text:0000000000026178                                         ; DATA XREF: LOAD:0000000000002160↑o ...
.text:0000000000026178 ; __unwind {
.text:0000000000026178                 LDR             Q0, [X1]
.text:000000000002617C                 STUR            Q0, [X0,#0x3C]
.text:0000000000026180                 RET
.text:0000000000026180 ; } // starts at 26178
.text:0000000000026180 ; End of function drawer::TextDrawer::setTextColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000026180 ; ---------------------------------------------------------------------------
.text:0000000000026184                 ALIGN 8
.text:0000000000026188 ; =============== S U B R O U T I N E =======================================
.text:0000000000026188 ; __int64 __fastcall drawer::TextDrawer::setTextSizeHint(drawer::TextDrawer *__hidden this, unsigned __int64)
.text:0000000000026188                 EXPORT _ZN6drawer10TextDrawer15setTextSizeHintEm
.text:0000000000026188 _ZN6drawer10TextDrawer15setTextSizeHintEm
.text:0000000000026188                                         ; CODE XREF: drawer::TextDrawer::setTextSizeHint(ulong)+C↓j
.text:0000000000026188                                         ; DATA XREF: LOAD:0000000000001950↑o ...
.text:0000000000026188 ; __unwind {
.text:0000000000026188                 STR             X1, [X0,#0x68]
.text:000000000002618C                 RET
.text:000000000002618C ; } // starts at 26188
.text:000000000002618C ; End of function drawer::TextDrawer::setTextSizeHint(ulong)
.text:0000000000026190 ; =============== S U B R O U T I N E =======================================
.text:0000000000026190 ; drawer::TextDrawer::setTextEllipsize(gui::TextEllipsize)
.text:0000000000026190                 EXPORT _ZN6drawer10TextDrawer16setTextEllipsizeEN3gui13TextEllipsizeE
.text:0000000000026190 _ZN6drawer10TextDrawer16setTextEllipsizeEN3gui13TextEllipsizeE
.text:0000000000026190                                         ; CODE XREF: drawer::TextDrawer::setTextEllipsize(gui::TextEllipsize)+C↓j
.text:0000000000026190                                         ; DATA XREF: LOAD:0000000000001B78↑o ...
.text:0000000000026190 ; __unwind {
.text:0000000000026190                 STR             W1, [X0,#0x70]
.text:0000000000026194                 RET
.text:0000000000026194 ; } // starts at 26190
.text:0000000000026194 ; End of function drawer::TextDrawer::setTextEllipsize(gui::TextEllipsize)
.text:0000000000026198 ; =============== S U B R O U T I N E =======================================
.text:0000000000026198 ; drawer::TextDrawer::setTextGravity(gui::TextGravity)
.text:0000000000026198                 EXPORT _ZN6drawer10TextDrawer14setTextGravityEN3gui11TextGravityE
.text:0000000000026198 _ZN6drawer10TextDrawer14setTextGravityEN3gui11TextGravityE
.text:0000000000026198                                         ; CODE XREF: drawer::TextDrawer::setTextGravity(gui::TextGravity)+C↓j
.text:0000000000026198                                         ; DATA XREF: LOAD:0000000000001B60↑o ...
.text:0000000000026198 ; __unwind {
.text:0000000000026198                 STR             W1, [X0,#0x74]
.text:000000000002619C                 RET
.text:000000000002619C ; } // starts at 26198
.text:000000000002619C ; End of function drawer::TextDrawer::setTextGravity(gui::TextGravity)
.text:00000000000261A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000261A0 ; Attributes: bp-based frame
.text:00000000000261A0 ; __int64 __fastcall drawer::TextDrawer::getTruncatedString(drawer::TextDrawer *__hidden this, float)
.text:00000000000261A0                 EXPORT _ZN6drawer10TextDrawer18getTruncatedStringEf
.text:00000000000261A0 _ZN6drawer10TextDrawer18getTruncatedStringEf
.text:00000000000261A0                                         ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+C↓j
.text:00000000000261A0                                         ; DATA XREF: LOAD:00000000000021C0↑o ...
.text:00000000000261A0 var_70          = -0x70
.text:00000000000261A0 var_60          = -0x60
.text:00000000000261A0 var_58          = -0x58
.text:00000000000261A0 var_50          = -0x50
.text:00000000000261A0 var_40          = -0x40
.text:00000000000261A0 var_30          = -0x30
.text:00000000000261A0 var_20          = -0x20
.text:00000000000261A0 var_10          = -0x10
.text:00000000000261A0 var_s0          =  0
.text:00000000000261A0 ; __unwind {
.text:00000000000261A0                 SUB             SP, SP, #0x80
.text:00000000000261A4                 STP             D9, D8, [SP,#0x70+var_50]
.text:00000000000261A8                 STR             X25, [SP,#0x70+var_40]
.text:00000000000261AC                 STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000261B0                 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000261B4                 STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000261B8                 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000261BC                 ADD             X29, SP, #0x70
.text:00000000000261C0                 MRS             X23, #3, c13, c0, #2
.text:00000000000261C4                 MOV             V8.16B, V0.16B
.text:00000000000261C8                 LDR             X9, [X23,#0x28]
.text:00000000000261CC                 MOV             X20, X0
.text:00000000000261D0                 MOV             X19, X8
.text:00000000000261D4                 STR             X9, [SP,#0x70+var_58]
.text:00000000000261D8                 STP             XZR, XZR, [X8]
.text:00000000000261DC                 STR             XZR, [X8,#0x10]
.text:00000000000261E0                 BL              ._ZN3gui10GlyphAtlas13getGlyphAtlasEv ; gui::GlyphAtlas::getGlyphAtlas(void)
.text:00000000000261E4                 MOV             W1, #0x2E ; '.' ; char
.text:00000000000261E8                 MOV             X21, X0
.text:00000000000261EC                 BL              ._ZNK3gui10GlyphAtlas13getGlyphWidthEc ; gui::GlyphAtlas::getGlyphWidth(char)
.text:00000000000261F0                 FMOV            S1, #3.0
.text:00000000000261F4                 LDR             W8, [X20,#0x70]
.text:00000000000261F8                 CMP             W8, #1
.text:00000000000261FC                 FMUL            S9, S0, S1
.text:0000000000026200                 B.EQ            loc_26364
.text:0000000000026204                 CMP             W8, #3
.text:0000000000026208                 B.EQ            loc_262A0
.text:000000000002620C                 CMP             W8, #2
.text:0000000000026210                 B.NE            loc_26378
.text:0000000000026214                 FCMP            S9, S8
.text:0000000000026218                 MOV             X22, XZR
.text:000000000002621C                 B.HI            loc_26278
.text:0000000000026220                 ADD             X24, X20, #0x50 ; 'P'
.text:0000000000026224                 ADD             X25, X20, #0x51 ; 'Q'
.text:0000000000026228 loc_26228                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+C4↓j
.text:0000000000026228                 LDRB            W8, [X24]
.text:000000000002622C                 TBNZ            W8, #0, loc_2626C
.text:0000000000026230                 LSR             X9, X8, #1
.text:0000000000026234                 CMP             X22, X9
.text:0000000000026238                 B.CS            loc_26278
.text:000000000002623C loc_2623C                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+D4↓j
.text:000000000002623C                 MOV             X9, X25
.text:0000000000026240                 TBZ             W8, #0, loc_26248
.text:0000000000026244                 LDR             X9, [X20,#0x60]
.text:0000000000026248 loc_26248                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+A0↑j
.text:0000000000026248                 LDRB            W1, [X9,X22] ; char
.text:000000000002624C                 MOV             X0, X21 ; this
.text:0000000000026250                 BL              ._ZNK3gui10GlyphAtlas13getGlyphWidthEc ; gui::GlyphAtlas::getGlyphWidth(char)
.text:0000000000026254                 FADD            S9, S9, S0
.text:0000000000026258                 FCMP            S9, S8
.text:000000000002625C                 CSET            W8, MI
.text:0000000000026260                 ADD             X22, X22, X8
.text:0000000000026264                 B.LS            loc_26228
.text:0000000000026268                 B               loc_26278
.text:000000000002626C ; ---------------------------------------------------------------------------
.text:000000000002626C loc_2626C                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+8C↑j
.text:000000000002626C                 LDR             X9, [X20,#0x58]
.text:0000000000026270                 CMP             X22, X9
.text:0000000000026274                 B.CC            loc_2623C
.text:0000000000026278 loc_26278                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+7C↑j
.text:0000000000026278                                         ; drawer::TextDrawer::getTruncatedString(float)+98↑j ...
.text:0000000000026278                 ADD             X1, X20, #0x50 ; 'P'
.text:000000000002627C                 MOV             X0, X19
.text:0000000000026280                 MOV             X2, XZR
.text:0000000000026284                 MOV             X3, X22
.text:0000000000026288                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_mm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::append(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,ulong,ulong)
.text:000000000002628C                 ADRP            X1, #asc_81C5@PAGE ; "..."
.text:0000000000026290                 ADD             X1, X1, #asc_81C5@PAGEOFF ; "..."
.text:0000000000026294                 MOV             X0, X19
.text:0000000000026298                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::append(char const*)
.text:000000000002629C                 B               loc_26484
.text:00000000000262A0 ; ---------------------------------------------------------------------------
.text:00000000000262A0 loc_262A0                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+68↑j
.text:00000000000262A0                 FCMP            S9, S8
.text:00000000000262A4                 MOV             X22, XZR
.text:00000000000262A8                 B.HI            loc_26338
.text:00000000000262AC                 ADD             X24, X20, #0x50 ; 'P'
.text:00000000000262B0                 ADD             X25, X20, #0x51 ; 'Q'
.text:00000000000262B4 loc_262B4                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+194↓j
.text:00000000000262B4                 LDRB            W8, [X24]
.text:00000000000262B8                 TBNZ            W8, #0, loc_262FC
.text:00000000000262BC                 LSR             X9, X8, #1
.text:00000000000262C0                 CMP             X22, X9,LSR#1
.text:00000000000262C4                 B.CS            loc_26338
.text:00000000000262C8 loc_262C8                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+164↓j
.text:00000000000262C8                 MOV             X9, X25
.text:00000000000262CC                 TBZ             W8, #0, loc_262D4
.text:00000000000262D0                 LDR             X9, [X20,#0x60]
.text:00000000000262D4 loc_262D4                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+12C↑j
.text:00000000000262D4                 LDRB            W1, [X9,X22] ; char
.text:00000000000262D8                 MOV             X0, X21 ; this
.text:00000000000262DC                 BL              ._ZNK3gui10GlyphAtlas13getGlyphWidthEc ; gui::GlyphAtlas::getGlyphWidth(char)
.text:00000000000262E0                 FADD            S9, S9, S0
.text:00000000000262E4                 LDRB            W8, [X24]
.text:00000000000262E8                 TBNZ            W8, #0, loc_2630C
.text:00000000000262EC                 MVN             X9, X22
.text:00000000000262F0                 ADD             X8, X9, X8,LSR#1
.text:00000000000262F4                 MOV             X9, X25
.text:00000000000262F8                 B               loc_26318
.text:00000000000262FC ; ---------------------------------------------------------------------------
.text:00000000000262FC loc_262FC                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+118↑j
.text:00000000000262FC                 LDR             X9, [X20,#0x58]
.text:0000000000026300                 CMP             X22, X9,LSR#1
.text:0000000000026304                 B.CC            loc_262C8
.text:0000000000026308                 B               loc_26338
.text:000000000002630C ; ---------------------------------------------------------------------------
.text:000000000002630C loc_2630C                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+148↑j
.text:000000000002630C                 LDP             X8, X9, [X20,#0x58]
.text:0000000000026310                 MVN             X10, X22
.text:0000000000026314                 ADD             X8, X8, X10
.text:0000000000026318 loc_26318                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+158↑j
.text:0000000000026318                 LDRB            W1, [X9,X8] ; char
.text:000000000002631C                 MOV             X0, X21 ; this
.text:0000000000026320                 BL              ._ZNK3gui10GlyphAtlas13getGlyphWidthEc ; gui::GlyphAtlas::getGlyphWidth(char)
.text:0000000000026324                 FADD            S9, S9, S0
.text:0000000000026328                 FCMP            S9, S8
.text:000000000002632C                 CSET            W8, MI
.text:0000000000026330                 ADD             X22, X22, X8
.text:0000000000026334                 B.LS            loc_262B4
.text:0000000000026338 loc_26338                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+108↑j
.text:0000000000026338                                         ; drawer::TextDrawer::getTruncatedString(float)+124↑j ...
.text:0000000000026338                 ADD             X21, X20, #0x50 ; 'P'
.text:000000000002633C                 MOV             X0, SP
.text:0000000000026340                 MOV             X1, X21
.text:0000000000026344                 MOV             X2, XZR
.text:0000000000026348                 MOV             X3, X22
.text:000000000002634C                 MOV             X4, X21
.text:0000000000026350                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,ulong,ulong,std::__1::allocator<char> const&)
.text:0000000000026354                 LDRB            W8, [X19]
.text:0000000000026358                 TBNZ            W8, #0, loc_26388
.text:000000000002635C                 STRH            WZR, [X19]
.text:0000000000026360                 B               loc_263A8
.text:0000000000026364 ; ---------------------------------------------------------------------------
.text:0000000000026364 loc_26364                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+60↑j
.text:0000000000026364                 MOV             X22, X20
.text:0000000000026368                 LDRB            W8, [X22,#0x50]!
.text:000000000002636C                 TBNZ            W8, #0, loc_263F0
.text:0000000000026370                 LSR             X9, X8, #1
.text:0000000000026374                 B               loc_263F4
.text:0000000000026378 ; ---------------------------------------------------------------------------
.text:0000000000026378 loc_26378                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+70↑j
.text:0000000000026378                 ADD             X1, X20, #0x50 ; 'P'
.text:000000000002637C                 MOV             X0, X19
.text:0000000000026380                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::operator=(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000026384                 B               loc_26484
.text:0000000000026388 ; ---------------------------------------------------------------------------
.text:0000000000026388 loc_26388                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+1B8↑j
.text:0000000000026388                 LDR             X8, [X19,#0x10]
.text:000000000002638C                 STRB            WZR, [X8]
.text:0000000000026390                 LDRB            W8, [X19]
.text:0000000000026394                 STR             XZR, [X19,#8]
.text:0000000000026398                 TBZ             W8, #0, loc_263A8
.text:000000000002639C                 LDR             X0, [X19,#0x10] ; void *
.text:00000000000263A0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000263A4                 STR             XZR, [X19]
.text:00000000000263A8 loc_263A8                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+1C0↑j
.text:00000000000263A8                                         ; drawer::TextDrawer::getTruncatedString(float)+1F8↑j
.text:00000000000263A8                 LDR             X8, [SP,#0x70+var_60]
.text:00000000000263AC                 ADRP            X1, #asc_81C5@PAGE ; "..."
.text:00000000000263B0                 LDR             Q0, [SP,#0x70+var_70]
.text:00000000000263B4                 ADD             X1, X1, #asc_81C5@PAGEOFF ; "..."
.text:00000000000263B8                 MOV             X0, X19
.text:00000000000263BC                 STR             X8, [X19,#0x10]
.text:00000000000263C0                 STR             Q0, [X19]
.text:00000000000263C4                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::append(char const*)
.text:00000000000263C8                 LDRB            W8, [X21]
.text:00000000000263CC                 TBNZ            W8, #0, loc_263D8
.text:00000000000263D0                 LSR             X8, X8, #1
.text:00000000000263D4                 B               loc_263DC
.text:00000000000263D8 ; ---------------------------------------------------------------------------
.text:00000000000263D8 loc_263D8                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+22C↑j
.text:00000000000263D8                 LDR             X8, [X20,#0x58]
.text:00000000000263DC loc_263DC                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+234↑j
.text:00000000000263DC                 SUB             X2, X8, X22
.text:00000000000263E0                 SUB             X3, X8, #1
.text:00000000000263E4                 MOV             X0, X19
.text:00000000000263E8                 MOV             X1, X21
.text:00000000000263EC                 B               loc_26480
.text:00000000000263F0 ; ---------------------------------------------------------------------------
.text:00000000000263F0 loc_263F0                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+1CC↑j
.text:00000000000263F0                 LDR             X9, [X20,#0x58]
.text:00000000000263F4 loc_263F4                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+1D4↑j
.text:00000000000263F4                 FCMP            S9, S8
.text:00000000000263F8                 SUB             X24, X9, #1
.text:00000000000263FC                 CCMP            X24, #0, #4, LS
.text:0000000000026400                 B.EQ            loc_2644C
.text:0000000000026404                 ADD             X25, X22, #1
.text:0000000000026408                 MOV             X9, X25
.text:000000000002640C                 TBZ             W8, #0, loc_26424
.text:0000000000026410 loc_26410                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+280↓j
.text:0000000000026410                 LDR             X9, [X20,#0x60]
.text:0000000000026414                 B               loc_26424
.text:0000000000026418 ; ---------------------------------------------------------------------------
.text:0000000000026418 loc_26418                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+2A8↓j
.text:0000000000026418                 LDRB            W8, [X22]
.text:000000000002641C                 MOV             X9, X25
.text:0000000000026420                 TBNZ            W8, #0, loc_26410
.text:0000000000026424 loc_26424                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+26C↑j
.text:0000000000026424                                         ; drawer::TextDrawer::getTruncatedString(float)+274↑j
.text:0000000000026424                 LDRB            W1, [X9,X24] ; char
.text:0000000000026428                 MOV             X0, X21 ; this
.text:000000000002642C                 BL              ._ZNK3gui10GlyphAtlas13getGlyphWidthEc ; gui::GlyphAtlas::getGlyphWidth(char)
.text:0000000000026430                 FADD            S9, S9, S0
.text:0000000000026434                 FCMP            S9, S8
.text:0000000000026438                 CSET            W8, MI
.text:000000000002643C                 FCMP            S9, S8
.text:0000000000026440                 SUB             X24, X24, X8
.text:0000000000026444                 CCMP            X24, #0, #4, LS
.text:0000000000026448                 B.NE            loc_26418
.text:000000000002644C loc_2644C                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+260↑j
.text:000000000002644C                 ADRP            X1, #asc_81C5@PAGE ; "..."
.text:0000000000026450                 ADD             X1, X1, #asc_81C5@PAGEOFF ; "..."
.text:0000000000026454                 MOV             X0, X19
.text:0000000000026458                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::append(char const*)
.text:000000000002645C                 LDRB            W8, [X22]
.text:0000000000026460                 ADD             X2, X24, #1
.text:0000000000026464                 TBNZ            W8, #0, loc_26470
.text:0000000000026468                 LSR             X8, X8, #1
.text:000000000002646C                 B               loc_26474
.text:0000000000026470 ; ---------------------------------------------------------------------------
.text:0000000000026470 loc_26470                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+2C4↑j
.text:0000000000026470                 LDR             X8, [X20,#0x58]
.text:0000000000026474 loc_26474                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+2CC↑j
.text:0000000000026474                 SUB             X3, X8, #1
.text:0000000000026478                 MOV             X0, X19
.text:000000000002647C                 MOV             X1, X22
.text:0000000000026480 loc_26480                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+24C↑j
.text:0000000000026480                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendERKS5_mm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::append(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,ulong,ulong)
.text:0000000000026484 loc_26484                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+FC↑j
.text:0000000000026484                                         ; drawer::TextDrawer::getTruncatedString(float)+1E4↑j
.text:0000000000026484                 LDR             X8, [X23,#0x28]
.text:0000000000026488                 LDR             X9, [SP,#0x70+var_58]
.text:000000000002648C                 CMP             X8, X9
.text:0000000000026490                 B.NE            loc_264B4
.text:0000000000026494                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:0000000000026498                 LDP             X20, X19, [SP,#0x70+var_10]
.text:000000000002649C                 LDP             X22, X21, [SP,#0x70+var_20]
.text:00000000000264A0                 LDP             X24, X23, [SP,#0x70+var_30]
.text:00000000000264A4                 LDR             X25, [SP,#0x70+var_40]
.text:00000000000264A8                 LDP             D9, D8, [SP,#0x70+var_50]
.text:00000000000264AC                 ADD             SP, SP, #0x80
.text:00000000000264B0                 RET
.text:00000000000264B4 ; ---------------------------------------------------------------------------
.text:00000000000264B4 loc_264B4                               ; CODE XREF: drawer::TextDrawer::getTruncatedString(float)+2F0↑j
.text:00000000000264B4                 BL              .__stack_chk_fail
.text:00000000000264B4 ; } // starts at 261A0
.text:00000000000264B4 ; End of function drawer::TextDrawer::getTruncatedString(float)
.text:00000000000264B8 ; =============== S U B R O U T I N E =======================================
.text:00000000000264B8 ; Attributes: bp-based frame
.text:00000000000264B8 ; drawer *__fastcall drawer::TextDrawer::draw(drawer::TextDrawer *__hidden this)
.text:00000000000264B8                 EXPORT _ZN6drawer10TextDrawer4drawEv
.text:00000000000264B8 _ZN6drawer10TextDrawer4drawEv           ; DATA XREF: LOAD:0000000000000FA8↑o
.text:00000000000264B8                                         ; .data.rel.ro:00000000000304B0↓o
.text:00000000000264B8 var_260         = -0x260
.text:00000000000264B8 var_258         = -0x258
.text:00000000000264B8 var_250         = -0x250
.text:00000000000264B8 var_238         = -0x238
.text:00000000000264B8 var_230         = -0x230
.text:00000000000264B8 var_220         = -0x220
.text:00000000000264B8 var_210         = -0x210
.text:00000000000264B8 var_1FC         = -0x1FC
.text:00000000000264B8 var_1E8         = -0x1E8
.text:00000000000264B8 var_1D8         = -0x1D8
.text:00000000000264B8 var_1D0         = -0x1D0
.text:00000000000264B8 var_1C0         = -0x1C0
.text:00000000000264B8 var_1B8         = -0x1B8
.text:00000000000264B8 var_1B0         = -0x1B0
.text:00000000000264B8 var_1A0         = -0x1A0
.text:00000000000264B8 var_190         = -0x190
.text:00000000000264B8 var_180         = -0x180
.text:00000000000264B8 var_170         = -0x170
.text:00000000000264B8 var_150         = -0x150
.text:00000000000264B8 var_13C         = -0x13C
.text:00000000000264B8 var_138         = -0x138
.text:00000000000264B8 var_128         = -0x128
.text:00000000000264B8 var_114         = -0x114
.text:00000000000264B8 var_110         = -0x110
.text:00000000000264B8 var_FC          = -0xFC
.text:00000000000264B8 var_F8          = -0xF8
.text:00000000000264B8 var_E8          = -0xE8
.text:00000000000264B8 var_D4          = -0xD4
.text:00000000000264B8 var_C8          = -0xC8
.text:00000000000264B8 var_70          = -0x70
.text:00000000000264B8 var_60          = -0x60
.text:00000000000264B8 var_50          = -0x50
.text:00000000000264B8 var_40          = -0x40
.text:00000000000264B8 var_30          = -0x30
.text:00000000000264B8 var_20          = -0x20
.text:00000000000264B8 var_10          = -0x10
.text:00000000000264B8 var_s0          =  0
.text:00000000000264B8 ; __unwind {
.text:00000000000264B8                 STP             D11, D10, [SP,#-0x10+var_70]!
.text:00000000000264BC                 STP             D9, D8, [SP,#0x70+var_60]
.text:00000000000264C0                 STP             X28, X27, [SP,#0x70+var_50]
.text:00000000000264C4                 STP             X26, X25, [SP,#0x70+var_40]
.text:00000000000264C8                 STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000264CC                 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000264D0                 STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000264D4                 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000264D8                 ADD             X29, SP, #0x70
.text:00000000000264DC                 SUB             SP, SP, #0x1F0
.text:00000000000264E0                 MRS             X24, #3, c13, c0, #2
.text:00000000000264E4                 MOV             X20, X0
.text:00000000000264E8                 LDR             X8, [X24,#0x28]
.text:00000000000264EC                 MOV             X25, X0
.text:00000000000264F0                 ADD             X22, SP, #0x260+var_150
.text:00000000000264F4                 ADD             X21, X0, #0x80
.text:00000000000264F8                 STR             X8, [SP,#0x260+var_238]
.text:00000000000264FC                 LDUR            Q0, [X0,#0x18]
.text:0000000000026500                 LDR             X8, [X0]
.text:0000000000026504                 STR             Q0, [X20,#0x78]!
.text:0000000000026508                 LDR             X8, [X8,#0x40]
.text:000000000002650C                 STR             Q0, [SP,#0x260+var_250]
.text:0000000000026510                 BLR             X8
.text:0000000000026514                 LDR             X8, [X25,#0x68]
.text:0000000000026518                 CBZ             X8, loc_26570
.text:000000000002651C                 LDR             Q1, [SP,#0x260+var_250]
.text:0000000000026520                 FMOV            X9, D1
.text:0000000000026524                 LSR             X9, X9, #0x20 ; ' '
.text:0000000000026528                 FMOV            S1, W9
.text:000000000002652C                 FMUL            S0, S0, S1
.text:0000000000026530                 FCVTZU          X9, S0
.text:0000000000026534                 CMP             X8, X9
.text:0000000000026538                 B.CS            loc_26570
.text:000000000002653C                 UCVTF           S1, X8
.text:0000000000026540                 LDR             S2, [X25,#0x7C]
.text:0000000000026544                 FMOV            S3, #0.5
.text:0000000000026548                 FDIV            S0, S1, S0
.text:000000000002654C                 FMOV            S1, #1.0
.text:0000000000026550                 FSUB            S1, S1, S0
.text:0000000000026554                 FMUL            S0, S0, S2
.text:0000000000026558                 FMUL            S1, S1, S2
.text:000000000002655C                 STR             S0, [X25,#0x7C]
.text:0000000000026560                 FMUL            S4, S1, S3
.text:0000000000026564                 LDR             S3, [X25,#0x84]
.text:0000000000026568                 FADD            S1, S3, S4
.text:000000000002656C                 STR             S1, [X25,#0x84]
.text:0000000000026570 loc_26570                               ; CODE XREF: drawer::TextDrawer::draw(void)+60↑j
.text:0000000000026570                                         ; drawer::TextDrawer::draw(void)+80↑j
.text:0000000000026570                 LDR             X8, [X25]
.text:0000000000026574                 ADD             X3, X25, #0x28 ; '('
.text:0000000000026578                 MOV             X0, X25
.text:000000000002657C                 MOV             X1, X20
.text:0000000000026580                 MOV             X2, X21
.text:0000000000026584                 LDR             X9, [X8,#0x30]
.text:0000000000026588                 SUB             X8, X29, #-var_C8
.text:000000000002658C                 BLR             X9
.text:0000000000026590                 BL              ._ZN3gui10GlyphAtlas13getGlyphAtlasEv ; gui::GlyphAtlas::getGlyphAtlas(void)
.text:0000000000026594                 LDR             X8, [X25]
.text:0000000000026598                 MOV             X19, X0
.text:000000000002659C                 LDP             S0, S1, [X25,#0x78]
.text:00000000000265A0                 MOV             X0, X25
.text:00000000000265A4                 LDR             X8, [X8,#0x38]
.text:00000000000265A8                 FDIV            S8, S1, S0
.text:00000000000265AC                 BLR             X8
.text:00000000000265B0                 MOV             W8, #0x3F800000
.text:00000000000265B4                 STUR            XZR, [X22,#0x4C]
.text:00000000000265B8                 MOV             X21, X25
.text:00000000000265BC                 STUR            XZR, [X22,#0x44]
.text:00000000000265C0                 STP             XZR, XZR, [SP,#0x260+var_F8]
.text:00000000000265C4                 STR             W8, [SP,#0x260+var_FC]
.text:00000000000265C8                 STR             W8, [SP,#0x260+var_110]
.text:00000000000265CC                 STR             W8, [SP,#0x260+var_D4]
.text:00000000000265D0                 STR             W8, [SP,#0x260+var_E8]
.text:00000000000265D4                 STUR            XZR, [X22,#0x74]
.text:00000000000265D8                 STUR            XZR, [X22,#0x6C]
.text:00000000000265DC                 STR             W8, [SP,#0x260+var_13C]
.text:00000000000265E0                 STR             W8, [SP,#0x260+var_150]
.text:00000000000265E4                 STUR            XZR, [X22,#0xC]
.text:00000000000265E8                 STUR            XZR, [X22,#4]
.text:00000000000265EC                 STP             XZR, XZR, [SP,#0x260+var_138]
.text:00000000000265F0                 STR             W8, [SP,#0x260+var_114]
.text:00000000000265F4                 STR             W8, [SP,#0x260+var_128]
.text:00000000000265F8                 STUR            XZR, [X22,#0x34]
.text:00000000000265FC                 STUR            XZR, [X22,#0x2C]
.text:0000000000026600                 LDRB            W8, [X21,#0x50]!
.text:0000000000026604                 TBNZ            W8, #0, loc_26614
.text:0000000000026608                 ADD             X22, X21, #1
.text:000000000002660C                 LSR             X23, X8, #1
.text:0000000000026610                 B               loc_26618
.text:0000000000026614 ; ---------------------------------------------------------------------------
.text:0000000000026614 loc_26614                               ; CODE XREF: drawer::TextDrawer::draw(void)+14C↑j
.text:0000000000026614                 LDP             X23, X22, [X25,#0x58]
.text:0000000000026618 loc_26618                               ; CODE XREF: drawer::TextDrawer::draw(void)+158↑j
.text:0000000000026618                 FMUL            S10, S8, S0
.text:000000000002661C                 FMOV            S8, WZR
.text:0000000000026620                 CBZ             X23, loc_2663C
.text:0000000000026624 loc_26624                               ; CODE XREF: drawer::TextDrawer::draw(void)+180↓j
.text:0000000000026624                 LDRB            W1, [X22],#1 ; char
.text:0000000000026628                 MOV             X0, X19 ; this
.text:000000000002662C                 BL              ._ZNK3gui10GlyphAtlas13getGlyphWidthEc ; gui::GlyphAtlas::getGlyphWidth(char)
.text:0000000000026630                 FADD            S8, S8, S0
.text:0000000000026634                 SUBS            X23, X23, #1
.text:0000000000026638                 B.NE            loc_26624
.text:000000000002663C loc_2663C                               ; CODE XREF: drawer::TextDrawer::draw(void)+168↑j
.text:000000000002663C                 FMOV            S9, #2.0
.text:0000000000026640                 LDR             W8, [X25,#0x70]
.text:0000000000026644                 STP             XZR, XZR, [SP,#0x260+var_230+8]
.text:0000000000026648                 STR             XZR, [SP,#0x260+var_230]
.text:000000000002664C                 FDIV            S11, S9, S8
.text:0000000000026650                 FCMP            S11, S10
.text:0000000000026654                 CCMP            W8, #0, #4, MI
.text:0000000000026658                 B.NE            loc_266C4
.text:000000000002665C                 ADD             X0, SP, #0x260+var_230
.text:0000000000026660                 MOV             X1, X21
.text:0000000000026664                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::operator=(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000026668                 FCMP            S11, S10
.text:000000000002666C                 B.PL            loc_26714
.text:0000000000026670                 FDIV            S0, S11, S10
.text:0000000000026674                 FMOV            S1, WZR
.text:0000000000026678                 FMOV            W9, S11
.text:000000000002667C                 ADRP            X10, #xmmword_79A0@PAGE
.text:0000000000026680                 FMUL            S2, S11, S1
.text:0000000000026684                 FMUL            S1, S0, S1
.text:0000000000026688                 FMOV            W8, S2
.text:000000000002668C                 FMOV            W11, S1
.text:0000000000026690                 LDR             Q1, [X10,#xmmword_79A0@PAGEOFF]
.text:0000000000026694                 FMOV            W10, S0
.text:0000000000026698                 BFI             X9, X8, #0x20, #0x20 ; ' '
.text:000000000002669C                 BFI             X8, X8, #0x20, #0x20 ; ' '
.text:00000000000266A0                 STR             Q1, [SP,#0x260+var_1B0]
.text:00000000000266A4                 STP             X9, X8, [SP,#0x260+var_1D0]
.text:00000000000266A8                 MOV             X9, #0x3F80000000000000
.text:00000000000266AC                 MOV             X8, X11
.text:00000000000266B0                 BFI             X11, X11, #0x20, #0x20 ; ' '
.text:00000000000266B4                 BFI             X8, X10, #0x20, #0x20 ; ' '
.text:00000000000266B8                 STP             XZR, X9, [SP,#0x260+var_1A0]
.text:00000000000266BC                 STP             X8, X11, [SP,#0x260+var_1C0]
.text:00000000000266C0                 B               loc_26748
.text:00000000000266C4 ; ---------------------------------------------------------------------------
.text:00000000000266C4 loc_266C4                               ; CODE XREF: drawer::TextDrawer::draw(void)+1A0↑j
.text:00000000000266C4                 FDIV            S0, S9, S10 ; float
.text:00000000000266C8                 ADD             X8, SP, #0x260+var_190
.text:00000000000266CC                 MOV             X0, X25 ; this
.text:00000000000266D0                 BL              ._ZN6drawer10TextDrawer18getTruncatedStringEf ; drawer::TextDrawer::getTruncatedString(float)
.text:00000000000266D4                 LDRB            W8, [SP,#0x260+var_230]
.text:00000000000266D8                 TBNZ            W8, #0, loc_266E4
.text:00000000000266DC                 STRH            WZR, [SP,#0x260+var_230]
.text:00000000000266E0                 B               loc_26704
.text:00000000000266E4 ; ---------------------------------------------------------------------------
.text:00000000000266E4 loc_266E4                               ; CODE XREF: drawer::TextDrawer::draw(void)+220↑j
.text:00000000000266E4                 LDR             X8, [SP,#0x260+var_220]
.text:00000000000266E8                 STRB            WZR, [X8]
.text:00000000000266EC                 LDRB            W8, [SP,#0x260+var_230]
.text:00000000000266F0                 STR             XZR, [SP,#0x260+var_230+8]
.text:00000000000266F4                 TBZ             W8, #0, loc_26704
.text:00000000000266F8                 LDR             X0, [SP,#0x260+var_220] ; void *
.text:00000000000266FC                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000026700                 STR             XZR, [SP,#0x260+var_230]
.text:0000000000026704 loc_26704                               ; CODE XREF: drawer::TextDrawer::draw(void)+228↑j
.text:0000000000026704                                         ; drawer::TextDrawer::draw(void)+23C↑j
.text:0000000000026704                 LDR             X8, [SP,#0x260+var_180]
.text:0000000000026708                 LDR             Q0, [SP,#0x260+var_190]
.text:000000000002670C                 STR             X8, [SP,#0x260+var_220]
.text:0000000000026710                 STR             Q0, [SP,#0x260+var_230]
.text:0000000000026714 loc_26714                               ; CODE XREF: drawer::TextDrawer::draw(void)+1B4↑j
.text:0000000000026714                 FMOV            S0, WZR
.text:0000000000026718                 MOV             X8, #0x3F80000000000000
.text:000000000002671C                 FMOV            W11, S10
.text:0000000000026720                 MOV             W10, #0x3F800000
.text:0000000000026724                 STR             XZR, [SP,#0x260+var_1B0]
.text:0000000000026728                 STP             X8, XZR, [SP,#0x260+var_1C0]
.text:000000000002672C                 STP             X10, XZR, [SP,#0x260+var_1B0+8]
.text:0000000000026730                 STR             X8, [SP,#0x260+var_1A0+8]
.text:0000000000026734                 FMUL            S0, S10, S0
.text:0000000000026738                 FMOV            W9, S0
.text:000000000002673C                 BFI             X11, X9, #0x20, #0x20 ; ' '
.text:0000000000026740                 BFI             X9, X9, #0x20, #0x20 ; ' '
.text:0000000000026744                 STP             X11, X9, [SP,#0x260+var_1D0]
.text:0000000000026748 loc_26748                               ; CODE XREF: drawer::TextDrawer::draw(void)+208↑j
.text:0000000000026748                 ADD             X8, SP, #0x260+var_190
.text:000000000002674C                 ADD             X0, SP, #0x260+var_1D0
.text:0000000000026750                 ADD             X1, SP, #0x260+var_110
.text:0000000000026754                 BL              sub_26A98
.text:0000000000026758                 LDP             Q2, Q0, [SP,#0x260+var_170]
.text:000000000002675C                 ADRP            X8, #xmmword_7BB0@PAGE
.text:0000000000026760                 LDP             Q3, Q1, [SP,#0x260+var_190]
.text:0000000000026764                 MOV             W21, #0x3F800000
.text:0000000000026768                 STP             Q2, Q0, [SP,#0x170]
.text:000000000002676C                 ADD             X0, SP, #0x260+var_1D0
.text:0000000000026770                 LDR             Q0, [X8,#xmmword_7BB0@PAGEOFF]
.text:0000000000026774                 ADD             X8, SP, #0x260+var_190
.text:0000000000026778                 ADD             X1, SP, #0x260+var_150
.text:000000000002677C                 STP             Q3, Q1, [SP,#0x260+var_110]
.text:0000000000026780                 STUR            XZR, [SP,#0x9C]
.text:0000000000026784                 STUR            XZR, [SP,#0x260+var_1D0+4]
.text:0000000000026788                 STR             W21, [SP,#0x260+var_1D0]
.text:000000000002678C                 STR             W21, [SP,#0x260+var_1C0+4]
.text:0000000000026790                 STP             XZR, X21, [SP,#0x260+var_1B0]
.text:0000000000026794                 STR             XZR, [SP,#0x260+var_1B8]
.text:0000000000026798                 STR             Q0, [SP,#0x260+var_1A0]
.text:000000000002679C                 BL              sub_26A98
.text:00000000000267A0                 LDP             Q2, Q0, [SP,#0x260+var_170]
.text:00000000000267A4                 LDP             Q3, Q1, [SP,#0x260+var_190]
.text:00000000000267A8                 ADD             X8, SP, #0x260+var_190
.text:00000000000267AC                 ADD             X0, SP, #0x260+var_110
.text:00000000000267B0                 STP             Q2, Q0, [SP,#0x130]
.text:00000000000267B4                 ADD             X1, SP, #0x260+var_150
.text:00000000000267B8                 STP             Q3, Q1, [SP,#0x260+var_150]
.text:00000000000267BC                 BL              sub_26A98
.text:00000000000267C0                 LDP             Q2, Q0, [SP,#0x260+var_170]
.text:00000000000267C4                 ADRP            X8, #xmmword_7A80@PAGE
.text:00000000000267C8                 LDP             Q3, Q1, [SP,#0x260+var_190]
.text:00000000000267CC                 ADD             X0, SP, #0x260+var_1D0
.text:00000000000267D0                 STP             Q2, Q0, [SP,#0x130]
.text:00000000000267D4                 ADD             X1, SP, #0x260+var_150
.text:00000000000267D8                 LDR             Q0, [X8,#xmmword_7A80@PAGEOFF]
.text:00000000000267DC                 ADD             X8, SP, #0x260+var_190
.text:00000000000267E0                 STP             Q3, Q1, [SP,#0x260+var_150]
.text:00000000000267E4                 STR             W21, [SP,#0x260+var_1D0]
.text:00000000000267E8                 STUR            XZR, [SP,#0x9C]
.text:00000000000267EC                 STUR            XZR, [SP,#0x260+var_1D0+4]
.text:00000000000267F0                 STR             W21, [SP,#0x260+var_1C0+4]
.text:00000000000267F4                 STP             XZR, X21, [SP,#0x260+var_1B0]
.text:00000000000267F8                 STR             XZR, [SP,#0x260+var_1B8]
.text:00000000000267FC                 STR             Q0, [SP,#0x260+var_1A0]
.text:0000000000026800                 BL              sub_26A98
.text:0000000000026804                 FMOV            S10, #1.0
.text:0000000000026808                 LDR             S0, [SP,#0x260+var_FC]
.text:000000000002680C                 FMOV            S11, WZR
.text:0000000000026810                 ADD             X0, SP, #0x260+var_1D0
.text:0000000000026814                 LDP             Q3, Q2, [SP,#0x260+var_170]
.text:0000000000026818                 LDP             Q5, Q4, [SP,#0x260+var_190]
.text:000000000002681C                 ADD             X1, SP, #0x260+var_150
.text:0000000000026820                 FSUB            S0, S10, S0
.text:0000000000026824                 STP             Q3, Q2, [SP,#0x130]
.text:0000000000026828                 STR             W21, [SP,#0x260+var_1D0]
.text:000000000002682C                 STUR            XZR, [SP,#0x9C]
.text:0000000000026830                 STUR            XZR, [SP,#0x260+var_1D0+4]
.text:0000000000026834                 STR             W21, [SP,#0x260+var_1C0+4]
.text:0000000000026838                 STP             XZR, X21, [SP,#0x260+var_1B0]
.text:000000000002683C                 FMUL            S1, S0, S11
.text:0000000000026840                 FADD            S0, S0, S11
.text:0000000000026844                 STR             XZR, [SP,#0x260+var_1B8]
.text:0000000000026848                 STP             Q5, Q4, [SP,#0x260+var_150]
.text:000000000002684C                 FADD            S1, S1, S11
.text:0000000000026850                 FMOV            W10, S0
.text:0000000000026854                 FADD            S2, S1, S10
.text:0000000000026858                 FMOV            W8, S1
.text:000000000002685C                 FMOV            W9, S2
.text:0000000000026860                 MOV             X11, X8
.text:0000000000026864                 BFI             X11, X10, #0x20, #0x20 ; ' '
.text:0000000000026868                 BFI             X8, X9, #0x20, #0x20 ; ' '
.text:000000000002686C                 STP             X11, X8, [SP,#0x260+var_1A0]
.text:0000000000026870                 ADD             X8, SP, #0x260+var_190
.text:0000000000026874                 BL              sub_26A98
.text:0000000000026878                 LDR             W8, [X25,#0x74]
.text:000000000002687C                 LDP             Q1, Q0, [SP,#0x260+var_170]
.text:0000000000026880                 LDP             Q3, Q2, [SP,#0x260+var_190]
.text:0000000000026884                 CMP             W8, #1
.text:0000000000026888                 STP             Q1, Q0, [SP,#0x130]
.text:000000000002688C                 STP             Q3, Q2, [SP,#0x260+var_150]
.text:0000000000026890                 B.EQ            loc_268B4
.text:0000000000026894                 CMP             W8, #2
.text:0000000000026898                 B.NE            loc_268C0
.text:000000000002689C                 LDR             S0, [SP,#0x260+var_110]
.text:00000000000268A0                 FMOV            S1, #-0.5
.text:00000000000268A4                 FDIV            S0, S10, S0
.text:00000000000268A8                 FMUL            S1, S8, S1
.text:00000000000268AC                 FADD            S11, S0, S1
.text:00000000000268B0                 B               loc_268C0
.text:00000000000268B4 ; ---------------------------------------------------------------------------
.text:00000000000268B4 loc_268B4                               ; CODE XREF: drawer::TextDrawer::draw(void)+3D8↑j
.text:00000000000268B4                 LDR             S0, [SP,#0x260+var_110]
.text:00000000000268B8                 FDIV            S0, S9, S0
.text:00000000000268BC                 FSUB            S11, S0, S8
.text:00000000000268C0 loc_268C0                               ; CODE XREF: drawer::TextDrawer::draw(void)+3E0↑j
.text:00000000000268C0                                         ; drawer::TextDrawer::draw(void)+3F8↑j
.text:00000000000268C0                 ADD             X8, SP, #0x260+var_190
.text:00000000000268C4                 SUB             X0, X29, #-var_C8
.text:00000000000268C8                 ADD             X1, SP, #0x260+var_150
.text:00000000000268CC                 BL              sub_26A98
.text:00000000000268D0                 LDRB            W8, [SP,#0x260+var_230]
.text:00000000000268D4                 ADD             X11, SP, #0x260+var_230
.text:00000000000268D8                 LDP             X10, X9, [SP,#0x260+var_230+8]
.text:00000000000268DC                 LDP             Q2, Q0, [SP,#0x260+var_170]
.text:00000000000268E0                 LDP             Q3, Q1, [SP,#0x260+var_190]
.text:00000000000268E4                 ORR             X11, X11, #1
.text:00000000000268E8                 TST             W8, #1
.text:00000000000268EC                 STP             Q2, Q0, [SP,#0x130]
.text:00000000000268F0                 LSR             X12, X8, #1
.text:00000000000268F4                 STP             Q3, Q1, [SP,#0x260+var_150]
.text:00000000000268F8                 CSEL            X26, X12, X10, EQ
.text:00000000000268FC                 CSEL            X27, X11, X9, EQ
.text:0000000000026900                 CBZ             X26, loc_26A84
.text:0000000000026904                 FMOV            S8, WZR
.text:0000000000026908                 ADD             X8, SP, #0x260+var_210
.text:000000000002690C                 ORR             X28, X8, #4
.text:0000000000026910                 STR             X25, [SP,#0x260+var_250]
.text:0000000000026914                 ADD             X23, X8, #0x18
.text:0000000000026918                 ADD             X8, X25, #0x3C ; '<'
.text:000000000002691C                 ADRP            X20, #aFrameworksBase_2@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000026920                 ADD             X20, X20, #aFrameworksBase_2@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000026924                 FADD            S9, S11, S8
.text:0000000000026928                 STP             X24, X8, [SP,#0x260+var_260]
.text:000000000002692C                 MOV             W22, #0x48 ; 'H'
.text:0000000000026930                 MOV             W21, #0x2F ; '/'
.text:0000000000026934                 MOV             W24, #0x3F800000
.text:0000000000026938 loc_26938                               ; CODE XREF: drawer::TextDrawer::draw(void)+578↓j
.text:0000000000026938                 LDRB            W1, [X27]
.text:000000000002693C                 MOV             X0, X19
.text:0000000000026940                 BL              ._ZNK3gui10GlyphAtlasixEc ; gui::GlyphAtlas::operator[](char)
.text:0000000000026944                 CBZ             X0, loc_269D0
.text:0000000000026948                 FMUL            S0, S9, S8
.text:000000000002694C                 FADD            S2, S9, S8
.text:0000000000026950                 MOV             X25, X0
.text:0000000000026954                 STR             W24, [SP,#0x260+var_1FC]
.text:0000000000026958                 STR             W24, [SP,#0x260+var_210]
.text:000000000002695C                 ADD             X0, SP, #0x260+var_210
.text:0000000000026960                 STP             XZR, XZR, [X28]
.text:0000000000026964                 MOV             X1, X25
.text:0000000000026968                 STP             XZR, XZR, [X23]
.text:000000000002696C                 FADD            S0, S0, S8
.text:0000000000026970                 FMOV            W10, S2
.text:0000000000026974                 FADD            S1, S0, S10
.text:0000000000026978                 FMOV            W8, S0
.text:000000000002697C                 FMOV            W9, S1
.text:0000000000026980                 BFI             X10, X8, #0x20, #0x20 ; ' '
.text:0000000000026984                 STP             X24, X10, [SP,#0x260+var_1E8]
.text:0000000000026988                 BFI             X8, X9, #0x20, #0x20 ; ' '
.text:000000000002698C                 STR             X8, [SP,#0x260+var_1D8]
.text:0000000000026990                 ADD             X8, SP, #0x260+var_1D0
.text:0000000000026994                 BL              sub_26A98
.text:0000000000026998                 ADD             X8, SP, #0x260+var_190
.text:000000000002699C                 ADD             X0, SP, #0x260+var_150
.text:00000000000269A0                 ADD             X1, SP, #0x260+var_1D0
.text:00000000000269A4                 BL              sub_26A98
.text:00000000000269A8                 LDP             X3, X0, [SP,#0x260+var_258]
.text:00000000000269AC                 LDRB            W4, [X27]
.text:00000000000269B0                 ADD             X2, SP, #0x260+var_190
.text:00000000000269B4                 MOV             X1, X25
.text:00000000000269B8                 LDR             X8, [X0]
.text:00000000000269BC                 LDR             X8, [X8,#0x28]
.text:00000000000269C0                 BLR             X8
.text:00000000000269C4                 LDR             S0, [X25,#0x40]
.text:00000000000269C8                 FADD            S9, S9, S0
.text:00000000000269CC                 B               loc_26A28
.text:00000000000269D0 ; ---------------------------------------------------------------------------
.text:00000000000269D0 loc_269D0                               ; CODE XREF: drawer::TextDrawer::draw(void)+48C↑j
.text:00000000000269D0                 MOV             X0, X20
.text:00000000000269D4                 MOV             W1, W21
.text:00000000000269D8                 MOV             X2, X22
.text:00000000000269DC                 BL              .__strrchr_chk
.text:00000000000269E0                 CBZ             X0, loc_269FC
.text:00000000000269E4                 MOV             X0, X20
.text:00000000000269E8                 MOV             W1, W21
.text:00000000000269EC                 MOV             X2, X22
.text:00000000000269F0                 BL              .__strrchr_chk
.text:00000000000269F4                 ADD             X3, X0, #1
.text:00000000000269F8                 B               loc_26A00
.text:00000000000269FC ; ---------------------------------------------------------------------------
.text:00000000000269FC loc_269FC                               ; CODE XREF: drawer::TextDrawer::draw(void)+528↑j
.text:00000000000269FC                 MOV             X3, X20
.text:0000000000026A00 loc_26A00                               ; CODE XREF: drawer::TextDrawer::draw(void)+540↑j
.text:0000000000026A00                 LDRB            W6, [X27]
.text:0000000000026A04                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:0000000000026A08                 ADRP            X2, #aSSDNoGlyph0xXI@PAGE ; "%s:%s(%d) No Glyph(0x%x) in font"
.text:0000000000026A0C                 ADRP            X4, #aDraw@PAGE ; "draw"
.text:0000000000026A10                 MOV             W0, #6
.text:0000000000026A14                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:0000000000026A18                 ADD             X2, X2, #aSSDNoGlyph0xXI@PAGEOFF ; "%s:%s(%d) No Glyph(0x%x) in font"
.text:0000000000026A1C                 ADD             X4, X4, #aDraw@PAGEOFF ; "draw"
.text:0000000000026A20                 MOV             W5, #0x98
.text:0000000000026A24                 BL              .__android_log_print
.text:0000000000026A28 loc_26A28                               ; CODE XREF: drawer::TextDrawer::draw(void)+514↑j
.text:0000000000026A28                 ADD             X27, X27, #1
.text:0000000000026A2C                 SUBS            X26, X26, #1
.text:0000000000026A30                 B.NE            loc_26938
.text:0000000000026A34                 LDRB            W8, [SP,#0x260+var_230]
.text:0000000000026A38                 LDR             X24, [SP,#0x260+var_260]
.text:0000000000026A3C                 AND             W8, W8, #1
.text:0000000000026A40                 CBZ             W8, loc_26A4C
.text:0000000000026A44 loc_26A44                               ; CODE XREF: drawer::TextDrawer::draw(void)+5D0↓j
.text:0000000000026A44                 LDR             X0, [SP,#0x260+var_220] ; void *
.text:0000000000026A48                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000026A4C loc_26A4C                               ; CODE XREF: drawer::TextDrawer::draw(void)+588↑j
.text:0000000000026A4C                                         ; drawer::TextDrawer::draw(void)+5D4↓j
.text:0000000000026A4C                 LDR             X8, [X24,#0x28]
.text:0000000000026A50                 LDR             X9, [SP,#0x260+var_238]
.text:0000000000026A54                 CMP             X8, X9
.text:0000000000026A58                 B.NE            loc_26A90
.text:0000000000026A5C                 ADD             SP, SP, #0x1F0
.text:0000000000026A60                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:0000000000026A64                 LDP             X20, X19, [SP,#0x70+var_10]
.text:0000000000026A68                 LDP             X22, X21, [SP,#0x70+var_20]
.text:0000000000026A6C                 LDP             X24, X23, [SP,#0x70+var_30]
.text:0000000000026A70                 LDP             X26, X25, [SP,#0x70+var_40]
.text:0000000000026A74                 LDP             X28, X27, [SP,#0x70+var_50]
.text:0000000000026A78                 LDP             D9, D8, [SP,#0x70+var_60]
.text:0000000000026A7C                 LDP             D11, D10, [SP+0x70+var_70],#0x80
.text:0000000000026A80                 RET
.text:0000000000026A84 ; ---------------------------------------------------------------------------
.text:0000000000026A84 loc_26A84                               ; CODE XREF: drawer::TextDrawer::draw(void)+448↑j
.text:0000000000026A84                 AND             W8, W8, #1
.text:0000000000026A88                 CBNZ            W8, loc_26A44
.text:0000000000026A8C                 B               loc_26A4C
.text:0000000000026A90 ; ---------------------------------------------------------------------------
.text:0000000000026A90 loc_26A90                               ; CODE XREF: drawer::TextDrawer::draw(void)+5A0↑j
.text:0000000000026A90                 BL              .__stack_chk_fail
.text:0000000000026A90 ; } // starts at 264B8
.text:0000000000026A90 ; End of function drawer::TextDrawer::draw(void)
.text:0000000000026A90 ; ---------------------------------------------------------------------------
.text:0000000000026A94                 ALIGN 8
.text:0000000000026A98 ; =============== S U B R O U T I N E =======================================
.text:0000000000026A98 sub_26A98                               ; CODE XREF: drawer::TextDrawer::draw(void)+29C↑p
.text:0000000000026A98                                         ; drawer::TextDrawer::draw(void)+2E4↑p ...
.text:0000000000026A98 var_4C          = -0x4C
.text:0000000000026A98 var_48          = -0x48
.text:0000000000026A98 var_44          = -0x44
.text:0000000000026A98 var_40          = -0x40
.text:0000000000026A98 var_30          = -0x30
.text:0000000000026A98 var_20          = -0x20
.text:0000000000026A98 var_10          = -0x10
.text:0000000000026A98 ; __unwind {
.text:0000000000026A98                 SUB             SP, SP, #0x50
.text:0000000000026A9C                 STP             D15, D14, [SP,#0x50+var_40]
.text:0000000000026AA0                 STP             D13, D12, [SP,#0x50+var_30]
.text:0000000000026AA4                 STP             D11, D10, [SP,#0x50+var_20]
.text:0000000000026AA8                 STP             D9, D8, [SP,#0x50+var_10]
.text:0000000000026AAC                 LDP             S5, S6, [X1]
.text:0000000000026AB0                 LDP             S2, S3, [X0]
.text:0000000000026AB4                 LDP             S23, S19, [X0,#0x10]
.text:0000000000026AB8                 LDP             S0, S1, [X0,#8]
.text:0000000000026ABC                 FMUL            S16, S2, S5
.text:0000000000026AC0                 LDP             S7, S24, [X0,#0x18]
.text:0000000000026AC4                 FMUL            S22, S23, S6
.text:0000000000026AC8                 MOV             V4.16B, V0.16B
.text:0000000000026ACC                 FMUL            S17, S3, S5
.text:0000000000026AD0                 FMUL            S25, S19, S6
.text:0000000000026AD4                 FMUL            S18, S0, S5
.text:0000000000026AD8                 FMUL            S5, S1, S5
.text:0000000000026ADC                 FMUL            S27, S24, S6
.text:0000000000026AE0                 FMUL            S26, S7, S6
.text:0000000000026AE4                 FADD            S29, S16, S22
.text:0000000000026AE8                 LDP             S21, S20, [X0,#0x20]
.text:0000000000026AEC                 LDP             S28, S30, [X1,#8]
.text:0000000000026AF0                 LDP             S6, S22, [X0,#0x28]
.text:0000000000026AF4                 FADD            S25, S17, S25
.text:0000000000026AF8                 FMUL            S31, S21, S28
.text:0000000000026AFC                 FMUL            S8, S20, S28
.text:0000000000026B00                 FADD            S27, S5, S27
.text:0000000000026B04                 FMUL            S9, S6, S28
.text:0000000000026B08                 FADD            S26, S18, S26
.text:0000000000026B0C                 FMUL            S28, S22, S28
.text:0000000000026B10                 LDP             S18, S16, [X0,#0x30]
.text:0000000000026B14                 LDP             S0, S17, [X0,#0x38]
.text:0000000000026B18                 FADD            S29, S29, S31
.text:0000000000026B1C                 FMUL            S31, S16, S30
.text:0000000000026B20                 FADD            S25, S25, S8
.text:0000000000026B24                 FMUL            S11, S18, S30
.text:0000000000026B28                 FADD            S27, S27, S28
.text:0000000000026B2C                 FMUL            S8, S0, S30
.text:0000000000026B30                 FADD            S26, S26, S9
.text:0000000000026B34                 FMUL            S30, S17, S30
.text:0000000000026B38                 MOV             V5.16B, V0.16B
.text:0000000000026B3C                 LDP             S10, S12, [X1,#0x10]
.text:0000000000026B40                 FADD            S25, S25, S31
.text:0000000000026B44                 STP             S4, S0, [SP,#0x50+var_48]
.text:0000000000026B48                 FADD            S29, S29, S11
.text:0000000000026B4C                 FMUL            S28, S2, S10
.text:0000000000026B50                 FADD            S26, S26, S8
.text:0000000000026B54                 FMUL            S9, S23, S12
.text:0000000000026B58                 FADD            S27, S27, S30
.text:0000000000026B5C                 FMUL            S15, S3, S10
.text:0000000000026B60                 MOV             V0.16B, V4.16B
.text:0000000000026B64                 FMUL            S31, S19, S12
.text:0000000000026B68                 FMUL            S11, S4, S10
.text:0000000000026B6C                 FMOV            W10, S25
.text:0000000000026B70                 FMUL            S30, S1, S10
.text:0000000000026B74                 FMOV            W9, S29
.text:0000000000026B78                 FMUL            S10, S24, S12
.text:0000000000026B7C                 FMOV            W11, S26
.text:0000000000026B80                 LDP             S13, S14, [X1,#0x18]
.text:0000000000026B84                 FMUL            S8, S7, S12
.text:0000000000026B88                 FADD            S28, S28, S9
.text:0000000000026B8C                 FADD            S31, S15, S31
.text:0000000000026B90                 LDP             S12, S29, [X1,#0x20]
.text:0000000000026B94                 FMUL            S9, S21, S13
.text:0000000000026B98                 MOV             V4.16B, V2.16B
.text:0000000000026B9C                 FMUL            S15, S20, S13
.text:0000000000026BA0                 FADD            S30, S30, S10
.text:0000000000026BA4                 FMUL            S25, S22, S13
.text:0000000000026BA8                 FMOV            W12, S27
.text:0000000000026BAC                 FADD            S8, S11, S8
.text:0000000000026BB0                 FMUL            S11, S6, S13
.text:0000000000026BB4                 FMUL            S10, S18, S14
.text:0000000000026BB8                 BFI             X9, X10, #0x20, #0x20 ; ' '
.text:0000000000026BBC                 FMUL            S26, S5, S14
.text:0000000000026BC0                 MOV             V5.16B, V3.16B
.text:0000000000026BC4                 FADD            S28, S28, S9
.text:0000000000026BC8                 FMUL            S9, S16, S14
.text:0000000000026BCC                 FADD            S31, S31, S15
.text:0000000000026BD0                 FMUL            S27, S3, S12
.text:0000000000026BD4                 FADD            S25, S30, S25
.text:0000000000026BD8                 FMUL            S30, S0, S12
.text:0000000000026BDC                 FMUL            S0, S1, S12
.text:0000000000026BE0                 FADD            S8, S8, S11
.text:0000000000026BE4                 FMUL            S11, S2, S12
.text:0000000000026BE8                 MOV             V12.16B, V1.16B
.text:0000000000026BEC                 FMUL            S13, S17, S14
.text:0000000000026BF0                 BFI             X11, X12, #0x20, #0x20 ; ' '
.text:0000000000026BF4                 FADD            S28, S28, S10
.text:0000000000026BF8                 FMUL            S10, S23, S29
.text:0000000000026BFC                 FADD            S31, S31, S9
.text:0000000000026C00                 FMUL            S9, S19, S29
.text:0000000000026C04                 STR             S0, [SP,#0x50+var_4C]
.text:0000000000026C08                 FADD            S26, S8, S26
.text:0000000000026C0C                 LDP             S0, S1, [X1,#0x30]
.text:0000000000026C10                 FMUL            S8, S7, S29
.text:0000000000026C14                 FADD            S25, S25, S13
.text:0000000000026C18                 FMUL            S29, S24, S29
.text:0000000000026C1C                 FADD            S10, S11, S10
.text:0000000000026C20                 LDP             S14, S15, [X1,#0x28]
.text:0000000000026C24                 FADD            S27, S27, S9
.text:0000000000026C28                 FMUL            S9, S4, S0
.text:0000000000026C2C                 FMUL            S4, S5, S0
.text:0000000000026C30                 LDR             S5, [SP,#0x50+var_4C]
.text:0000000000026C34                 FMUL            S23, S23, S1
.text:0000000000026C38                 FMOV            W13, S28
.text:0000000000026C3C                 FMUL            S2, S21, S14
.text:0000000000026C40                 FADD            S30, S30, S8
.text:0000000000026C44                 FMUL            S3, S6, S14
.text:0000000000026C48                 FMOV            W14, S31
.text:0000000000026C4C                 FADD            S28, S5, S29
.text:0000000000026C50                 FMUL            S29, S12, S0
.text:0000000000026C54                 FMUL            S12, S19, S1
.text:0000000000026C58                 LDR             S5, [SP,#0x50+var_48]
.text:0000000000026C5C                 FMUL            S24, S24, S1
.text:0000000000026C60                 FMOV            W15, S26
.text:0000000000026C64                 FADD            S23, S9, S23
.text:0000000000026C68                 FMUL            S1, S7, S1
.text:0000000000026C6C                 LDP             S8, S9, [X1,#0x38]
.text:0000000000026C70                 FADD            S2, S10, S2
.text:0000000000026C74                 FMUL            S10, S18, S15
.text:0000000000026C78                 FMUL            S0, S5, S0
.text:0000000000026C7C                 FADD            S3, S30, S3
.text:0000000000026C80                 FADD            S4, S4, S12
.text:0000000000026C84                 FMUL            S11, S20, S14
.text:0000000000026C88                 FMUL            S12, S20, S8
.text:0000000000026C8C                 FADD            S20, S29, S24
.text:0000000000026C90                 FMUL            S13, S22, S14
.text:0000000000026C94                 LDR             S5, [SP,#0x50+var_44]
.text:0000000000026C98                 FMUL            S30, S16, S15
.text:0000000000026C9C                 FMOV            W16, S25
.text:0000000000026CA0                 FMUL            S21, S21, S8
.text:0000000000026CA4                 FADD            S2, S2, S10
.text:0000000000026CA8                 FMUL            S22, S22, S8
.text:0000000000026CAC                 FADD            S0, S0, S1
.text:0000000000026CB0                 FMUL            S16, S16, S9
.text:0000000000026CB4                 FADD            S27, S27, S11
.text:0000000000026CB8                 FADD            S4, S4, S12
.text:0000000000026CBC                 FMUL            S1, S6, S8
.text:0000000000026CC0                 FADD            S24, S28, S13
.text:0000000000026CC4                 FMUL            S7, S5, S15
.text:0000000000026CC8                 FMUL            S28, S17, S15
.text:0000000000026CCC                 STP             X9, X11, [X8]
.text:0000000000026CD0                 FADD            S21, S23, S21
.text:0000000000026CD4                 FMUL            S18, S18, S9
.text:0000000000026CD8                 FADD            S19, S20, S22
.text:0000000000026CDC                 FMUL            S20, S17, S9
.text:0000000000026CE0                 FMOV            W17, S2
.text:0000000000026CE4                 BFI             X13, X14, #0x20, #0x20 ; ' '
.text:0000000000026CE8                 FADD            S2, S4, S16
.text:0000000000026CEC                 FMUL            S16, S5, S9
.text:0000000000026CF0                 FADD            S0, S0, S1
.text:0000000000026CF4                 BFI             X15, X16, #0x20, #0x20 ; ' '
.text:0000000000026CF8                 FADD            S27, S27, S30
.text:0000000000026CFC                 FADD            S3, S3, S7
.text:0000000000026D00                 STP             X13, X15, [X8,#0x10]
.text:0000000000026D04                 FADD            S6, S24, S28
.text:0000000000026D08                 FADD            S7, S21, S18
.text:0000000000026D0C                 FADD            S4, S19, S20
.text:0000000000026D10                 FADD            S0, S0, S16
.text:0000000000026D14                 FMOV            W0, S27
.text:0000000000026D18                 FMOV            W1, S3
.text:0000000000026D1C                 FMOV            W2, S6
.text:0000000000026D20                 FMOV            W3, S7
.text:0000000000026D24                 FMOV            W4, S2
.text:0000000000026D28                 FMOV            W5, S4
.text:0000000000026D2C                 FMOV            W9, S0
.text:0000000000026D30                 BFI             X17, X0, #0x20, #0x20 ; ' '
.text:0000000000026D34                 MOVI            V1.2D, #0
.text:0000000000026D38                 LDP             D9, D8, [SP,#0x50+var_10]
.text:0000000000026D3C                 LDP             D11, D10, [SP,#0x50+var_20]
.text:0000000000026D40                 LDP             D13, D12, [SP,#0x50+var_30]
.text:0000000000026D44                 LDP             D15, D14, [SP,#0x50+var_40]
.text:0000000000026D48                 BFI             X1, X2, #0x20, #0x20 ; ' '
.text:0000000000026D4C                 BFI             X3, X4, #0x20, #0x20 ; ' '
.text:0000000000026D50                 STP             Q1, Q1, [X8,#0x20]
.text:0000000000026D54                 BFI             X9, X5, #0x20, #0x20 ; ' '
.text:0000000000026D58                 STP             X17, X1, [X8,#0x20]
.text:0000000000026D5C                 STP             X3, X9, [X8,#0x30]
.text:0000000000026D60                 ADD             SP, SP, #0x50 ; 'P'
.text:0000000000026D64                 RET
.text:0000000000026D64 ; } // starts at 26A98
.text:0000000000026D64 ; End of function sub_26A98
.text:0000000000026D68 ; =============== S U B R O U T I N E =======================================
.text:0000000000026D68 ; Attributes: bp-based frame
.text:0000000000026D68 sub_26D68                               ; DATA XREF: .init_array:00000000000305E0↓o
.text:0000000000026D68 var_s0          =  0
.text:0000000000026D68 ; __unwind {
.text:0000000000026D68                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000026D6C                 MOV             X29, SP
.text:0000000000026D70                 ADRP            X8, #unk_31008@PAGE
.text:0000000000026D74                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000026D78                 LDARB           W8, [X8]
.text:0000000000026D7C                 TBNZ            W8, #0, loc_26DBC
.text:0000000000026D80                 ADRP            X0, #unk_31008@PAGE
.text:0000000000026D84                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000026D88                 BL              .__cxa_guard_acquire
.text:0000000000026D8C                 CBZ             W0, loc_26DBC
.text:0000000000026D90                 ADRP            X1, #qword_31000@PAGE
.text:0000000000026D94                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000026D98                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:0000000000026D9C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000026DA0                 STR             XZR, [X1]
.text:0000000000026DA4                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000026DA8                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000026DAC                 BL              .__cxa_atexit
.text:0000000000026DB0                 ADRP            X0, #unk_31008@PAGE
.text:0000000000026DB4                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000026DB8                 BL              .__cxa_guard_release
.text:0000000000026DBC loc_26DBC                               ; CODE XREF: sub_26D68+14↑j
.text:0000000000026DBC                                         ; sub_26D68+24↑j
.text:0000000000026DBC                 ADRP            X8, #unk_31038@PAGE
.text:0000000000026DC0                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:0000000000026DC4                 LDARB           W8, [X8]
.text:0000000000026DC8                 TBNZ            W8, #0, loc_26E04
.text:0000000000026DCC                 ADRP            X0, #unk_31038@PAGE
.text:0000000000026DD0                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000026DD4                 BL              .__cxa_guard_acquire
.text:0000000000026DD8                 CBZ             W0, loc_26E04
.text:0000000000026DDC                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000026DE0                 ADRP            X1, #unk_31010@PAGE
.text:0000000000026DE4                 ADRP            X2, #off_2F000@PAGE
.text:0000000000026DE8                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000026DEC                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000026DF0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000026DF4                 BL              .__cxa_atexit
.text:0000000000026DF8                 ADRP            X0, #unk_31038@PAGE
.text:0000000000026DFC                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000026E00                 BL              .__cxa_guard_release
.text:0000000000026E04 loc_26E04                               ; CODE XREF: sub_26D68+60↑j
.text:0000000000026E04                                         ; sub_26D68+70↑j
.text:0000000000026E04                 ADRP            X8, #unk_31058@PAGE
.text:0000000000026E08                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:0000000000026E0C                 LDARB           W8, [X8]
.text:0000000000026E10                 TBNZ            W8, #0, loc_26E54
.text:0000000000026E14                 ADRP            X0, #unk_31058@PAGE
.text:0000000000026E18                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000026E1C                 BL              .__cxa_guard_acquire
.text:0000000000026E20                 CBZ             W0, loc_26E54
.text:0000000000026E24                 ADRP            X1, #unk_31040@PAGE
.text:0000000000026E28                 ADRP            X0, #loc_1C078@PAGE
.text:0000000000026E2C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000026E30                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:0000000000026E34                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000026E38                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000026E3C                 STP             XZR, XZR, [X1]
.text:0000000000026E40                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:0000000000026E44                 BL              .__cxa_atexit
.text:0000000000026E48                 ADRP            X0, #unk_31058@PAGE
.text:0000000000026E4C                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000026E50                 BL              .__cxa_guard_release
.text:0000000000026E54 loc_26E54                               ; CODE XREF: sub_26D68+A8↑j
.text:0000000000026E54                                         ; sub_26D68+B8↑j
.text:0000000000026E54                 ADRP            X8, #unk_31078@PAGE
.text:0000000000026E58                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:0000000000026E5C                 LDARB           W8, [X8]
.text:0000000000026E60                 TBNZ            W8, #0, loc_26EA8
.text:0000000000026E64                 ADRP            X0, #unk_31078@PAGE
.text:0000000000026E68                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000026E6C                 BL              .__cxa_guard_acquire
.text:0000000000026E70                 CBZ             W0, loc_26EA8
.text:0000000000026E74                 ADRP            X1, #unk_31060@PAGE
.text:0000000000026E78                 ADRP            X0, #loc_1C100@PAGE
.text:0000000000026E7C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000026E80                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:0000000000026E84                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000026E88                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000026E8C                 STP             XZR, XZR, [X1]
.text:0000000000026E90                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:0000000000026E94                 BL              .__cxa_atexit
.text:0000000000026E98                 ADRP            X0, #unk_31078@PAGE
.text:0000000000026E9C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000026EA0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000026EA4                 B               .__cxa_guard_release
.text:0000000000026EA8 ; ---------------------------------------------------------------------------
.text:0000000000026EA8 loc_26EA8                               ; CODE XREF: sub_26D68+F8↑j
.text:0000000000026EA8                                         ; sub_26D68+108↑j
.text:0000000000026EA8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000026EAC                 RET
.text:0000000000026EAC ; } // starts at 26D68
.text:0000000000026EAC ; End of function sub_26D68
.text:0000000000026EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000026EB0 ; Attributes: bp-based frame
.text:0000000000026EB0 ; drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer, std::__1::default_delete<drawer::TextDrawer>> (*)(void), std::__1::unique_ptr<drawer::RectDrawer, std::__1::default_delete<drawer::RectDrawer>>, unsigned long, unsigned long)
.text:0000000000026EB0                 EXPORT _ZN6drawer15TextblockDrawerC2EPFNSt3__110unique_ptrINS_10TextDrawerENS1_14default_deleteIS3_EEEEvENS2_INS_10RectDrawerENS4_IS9_EEEEmm
.text:0000000000026EB0 _ZN6drawer15TextblockDrawerC2EPFNSt3__110unique_ptrINS_10TextDrawerENS1_14default_deleteIS3_EEEEvENS2_INS_10RectDrawerENS4_IS9_EEEEmm
.text:0000000000026EB0                                         ; DATA XREF: LOAD:0000000000001590↑o
.text:0000000000026EB0                                         ; LOAD:0000000000002028↑o
.text:0000000000026EB0 var_40          = -0x40
.text:0000000000026EB0 var_38          = -0x38
.text:0000000000026EB0 var_30          = -0x30
.text:0000000000026EB0 var_20          = -0x20
.text:0000000000026EB0 var_10          = -0x10
.text:0000000000026EB0 var_s0          =  0
.text:0000000000026EB0 ; __unwind {
.text:0000000000026EB0                 SUB             SP, SP, #0x50
.text:0000000000026EB4                 STR             X23, [SP,#0x40+var_30]
.text:0000000000026EB8                 STP             X22, X21, [SP,#0x40+var_20]
.text:0000000000026EBC                 STP             X20, X19, [SP,#0x40+var_10]
.text:0000000000026EC0                 STP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000026EC4                 ADD             X29, SP, #0x40
.text:0000000000026EC8                 MRS             X23, #3, c13, c0, #2
.text:0000000000026ECC                 ADRP            X10, #_ZTVN6drawer15TextblockDrawerE_ptr@PAGE
.text:0000000000026ED0                 LDR             X8, [X23,#0x28]
.text:0000000000026ED4                 MOVI            V0.2D, #0
.text:0000000000026ED8                 MOV             W9, #0xB
.text:0000000000026EDC                 LDR             X10, [X10,#_ZTVN6drawer15TextblockDrawerE_ptr@PAGEOFF]
.text:0000000000026EE0                 MOV             X20, X0
.text:0000000000026EE4                 STR             X8, [SP,#0x40+var_38]
.text:0000000000026EE8                 MOV             W8, #1
.text:0000000000026EEC                 STR             W9, [X0,#8]
.text:0000000000026EF0                 STR             XZR, [X0,#0x30]
.text:0000000000026EF4                 STRB            W8, [X0,#0x38]
.text:0000000000026EF8                 ADD             X8, X10, #0x10
.text:0000000000026EFC                 STP             Q0, Q0, [X0,#0x10]
.text:0000000000026F00                 STR             X8, [X0]
.text:0000000000026F04                 STR             XZR, [X20,#0x40]!
.text:0000000000026F08                 STP             XZR, XZR, [X0,#0x48]
.text:0000000000026F0C                 LDR             X8, [X2]
.text:0000000000026F10                 STR             XZR, [X2]
.text:0000000000026F14                 STP             XZR, XZR, [X0,#0x68]
.text:0000000000026F18                 STP             X3, X4, [X0,#0x78]
.text:0000000000026F1C                 STP             X8, XZR, [X0,#0x58]
.text:0000000000026F20                 STUR            Q0, [X0,#0x98]
.text:0000000000026F24                 STUR            Q0, [X0,#0x88]
.text:0000000000026F28                 CBZ             X3, loc_26F94
.text:0000000000026F2C                 MOV             X19, X0
.text:0000000000026F30                 MOV             X21, X3
.text:0000000000026F34                 MOV             X22, X1
.text:0000000000026F38 loc_26F38                               ; CODE XREF: drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>> (*)(void),std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,ulong,ulong):loc_26F90↓j
.text:0000000000026F38                 MOV             X8, SP
.text:0000000000026F3C                 BLR             X22
.text:0000000000026F40                 LDP             X8, X9, [X19,#0x48]
.text:0000000000026F44                 CMP             X8, X9
.text:0000000000026F48                 B.CS            loc_26F68
.text:0000000000026F4C                 LDR             X9, [SP,#0x40+var_40]
.text:0000000000026F50                 STR             XZR, [SP,#0x40+var_40]
.text:0000000000026F54                 STR             X9, [X8]
.text:0000000000026F58                 LDR             X8, [X19,#0x48]
.text:0000000000026F5C                 ADD             X8, X8, #8
.text:0000000000026F60                 STR             X8, [X19,#0x48]
.text:0000000000026F64                 B               loc_26F74
.text:0000000000026F68 ; ---------------------------------------------------------------------------
.text:0000000000026F68 loc_26F68                               ; CODE XREF: drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>> (*)(void),std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,ulong,ulong)+98↑j
.text:0000000000026F68                 MOV             X1, SP
.text:0000000000026F6C                 MOV             X0, X20
.text:0000000000026F70                 BL              sub_224F8
.text:0000000000026F74 loc_26F74                               ; CODE XREF: drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>> (*)(void),std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,ulong,ulong)+B4↑j
.text:0000000000026F74                 LDR             X0, [SP,#0x40+var_40]
.text:0000000000026F78                 SUB             X21, X21, #1
.text:0000000000026F7C                 STR             XZR, [SP,#0x40+var_40]
.text:0000000000026F80                 CBZ             X0, loc_26F90
.text:0000000000026F84                 LDR             X8, [X0]
.text:0000000000026F88                 LDR             X8, [X8,#8]
.text:0000000000026F8C                 BLR             X8
.text:0000000000026F90 loc_26F90                               ; CODE XREF: drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>> (*)(void),std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,ulong,ulong)+D0↑j
.text:0000000000026F90                 CBNZ            X21, loc_26F38
.text:0000000000026F94 loc_26F94                               ; CODE XREF: drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>> (*)(void),std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,ulong,ulong)+78↑j
.text:0000000000026F94                 LDR             X8, [X23,#0x28]
.text:0000000000026F98                 LDR             X9, [SP,#0x40+var_38]
.text:0000000000026F9C                 CMP             X8, X9
.text:0000000000026FA0                 B.NE            loc_26FBC
.text:0000000000026FA4                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000026FA8                 LDP             X20, X19, [SP,#0x40+var_10]
.text:0000000000026FAC                 LDP             X22, X21, [SP,#0x40+var_20]
.text:0000000000026FB0                 LDR             X23, [SP,#0x40+var_30]
.text:0000000000026FB4                 ADD             SP, SP, #0x50 ; 'P'
.text:0000000000026FB8                 RET
.text:0000000000026FBC ; ---------------------------------------------------------------------------
.text:0000000000026FBC loc_26FBC                               ; CODE XREF: drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>> (*)(void),std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,ulong,ulong)+F0↑j
.text:0000000000026FBC                 BL              .__stack_chk_fail
.text:0000000000026FBC ; } // starts at 26EB0
.text:0000000000026FBC ; End of function drawer::TextblockDrawer::TextblockDrawer(std::__1::unique_ptr<drawer::TextDrawer,std::__1::default_delete<drawer::TextDrawer>> (*)(void),std::__1::unique_ptr<drawer::RectDrawer,std::__1::default_delete<drawer::RectDrawer>>,ulong,ulong)
.text:0000000000026FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000026FC0 ; Attributes: bp-based frame
.text:0000000000026FC0 ; drawer::TextblockDrawer::addText(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)
.text:0000000000026FC0                 EXPORT _ZN6drawer15TextblockDrawer7addTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
.text:0000000000026FC0 _ZN6drawer15TextblockDrawer7addTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
.text:0000000000026FC0                                         ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+C↓j
.text:0000000000026FC0                                         ; DATA XREF: LOAD:0000000000001CE0↑o ...
.text:0000000000026FC0 var_20          = -0x20
.text:0000000000026FC0 var_10          = -0x10
.text:0000000000026FC0 var_s0          =  0
.text:0000000000026FC0 ; FUNCTION CHUNK AT .text:0000000000027438 SIZE 0000014C BYTES
.text:0000000000026FC0 ; __unwind {
.text:0000000000026FC0                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000026FC4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000026FC8                 ADD             X29, SP, #0x10
.text:0000000000026FCC                 MOV             X19, X0
.text:0000000000026FD0                 LDR             X9, [X0,#0x60]!
.text:0000000000026FD4                 MOV             X11, #0xAAAAAAAAAAAAAAAB
.text:0000000000026FDC                 LDR             X8, [X0,#8]
.text:0000000000026FE0                 LDR             X10, [X0,#0x18]
.text:0000000000026FE4                 SUB             X12, X8, X9
.text:0000000000026FE8                 ASR             X12, X12, #3
.text:0000000000026FEC                 MUL             X11, X12, X11
.text:0000000000026FF0                 CMP             X11, X10
.text:0000000000026FF4                 B.CS            loc_2701C
.text:0000000000026FF8                 LDR             X9, [X19,#0x70]
.text:0000000000026FFC                 CMP             X9, X8
.text:0000000000027000                 B.EQ            loc_27054
.text:0000000000027004                 MOV             X0, X8
.text:0000000000027008                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:000000000002700C                 LDR             X8, [X19,#0x68]
.text:0000000000027010                 ADD             X8, X8, #0x18
.text:0000000000027014                 STR             X8, [X19,#0x68]
.text:0000000000027018                 B               loc_27048
.text:000000000002701C ; ---------------------------------------------------------------------------
.text:000000000002701C loc_2701C                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+34↑j
.text:000000000002701C                 LDR             X8, [X19,#0x88]
.text:0000000000027020                 CMP             X8, X10
.text:0000000000027024                 B.NE            loc_27030
.text:0000000000027028                 MOV             X8, XZR
.text:000000000002702C                 STR             XZR, [X19,#0x88]
.text:0000000000027030 loc_27030                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+64↑j
.text:0000000000027030                 MOV             W10, #0x18
.text:0000000000027034                 MADD            X0, X8, X10, X9
.text:0000000000027038                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::operator=(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:000000000002703C                 LDR             X8, [X19,#0x88]
.text:0000000000027040                 ADD             X8, X8, #1
.text:0000000000027044                 STR             X8, [X19,#0x88]
.text:0000000000027048 loc_27048                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+58↑j
.text:0000000000027048                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000002704C                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000027050                 RET
.text:0000000000027054 ; ---------------------------------------------------------------------------
.text:0000000000027054 loc_27054                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+40↑j
.text:0000000000027054                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027058                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000002705C                 B               loc_27438
.text:000000000002705C ; } // starts at 26FC0
.text:000000000002705C ; End of function drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000027060 ; =============== S U B R O U T I N E =======================================
.text:0000000000027060 ; drawer::TextblockDrawer::setTextColor(glm::tvec4<float, (glm::precision)0> const&)
.text:0000000000027060                 EXPORT _ZN6drawer15TextblockDrawer12setTextColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000027060 _ZN6drawer15TextblockDrawer12setTextColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000027060                                         ; CODE XREF: drawer::TextblockDrawer::setTextColor(glm::tvec4<float,(glm::precision)0> const&)+C↓j
.text:0000000000027060                                         ; DATA XREF: LOAD:0000000000002148↑o ...
.text:0000000000027060 ; __unwind {
.text:0000000000027060                 LDR             Q0, [X1]
.text:0000000000027064                 STR             Q0, [X0,#0x90]
.text:0000000000027068                 RET
.text:0000000000027068 ; } // starts at 27060
.text:0000000000027068 ; End of function drawer::TextblockDrawer::setTextColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000027068 ; ---------------------------------------------------------------------------
.text:000000000002706C                 ALIGN 0x10
.text:0000000000027070 ; =============== S U B R O U T I N E =======================================
.text:0000000000027070 ; drawer::TextblockDrawer::setBackgroundColor(glm::tvec4<float, (glm::precision)0> const&)
.text:0000000000027070                 EXPORT _ZN6drawer15TextblockDrawer18setBackgroundColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000027070 _ZN6drawer15TextblockDrawer18setBackgroundColorERKN3glm5tvec4IfLNS1_9precisionE0EEE
.text:0000000000027070                                         ; CODE XREF: drawer::TextblockDrawer::setBackgroundColor(glm::tvec4<float,(glm::precision)0> const&)+C↓j
.text:0000000000027070                                         ; DATA XREF: LOAD:0000000000001B30↑o ...
.text:0000000000027070 ; __unwind {
.text:0000000000027070                 LDR             Q0, [X1]
.text:0000000000027074                 LDR             X8, [X0,#0x58]
.text:0000000000027078                 STUR            Q0, [X8,#0x3C]
.text:000000000002707C                 RET
.text:000000000002707C ; } // starts at 27070
.text:000000000002707C ; End of function drawer::TextblockDrawer::setBackgroundColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000027080 ; =============== S U B R O U T I N E =======================================
.text:0000000000027080 ; drawer::TextblockDrawer::setTextEllipsize(gui::TextEllipsize)
.text:0000000000027080                 EXPORT _ZN6drawer15TextblockDrawer16setTextEllipsizeEN3gui13TextEllipsizeE
.text:0000000000027080 _ZN6drawer15TextblockDrawer16setTextEllipsizeEN3gui13TextEllipsizeE
.text:0000000000027080                                         ; DATA XREF: LOAD:0000000000001728↑o
.text:0000000000027080 ; __unwind {
.text:0000000000027080                 STR             W1, [X0,#0xA0]
.text:0000000000027084                 RET
.text:0000000000027084 ; } // starts at 27080
.text:0000000000027084 ; End of function drawer::TextblockDrawer::setTextEllipsize(gui::TextEllipsize)
.text:0000000000027088 ; =============== S U B R O U T I N E =======================================
.text:0000000000027088 ; drawer::TextblockDrawer::setTextGravity(gui::TextGravity)
.text:0000000000027088                 EXPORT _ZN6drawer15TextblockDrawer14setTextGravityEN3gui11TextGravityE
.text:0000000000027088 _ZN6drawer15TextblockDrawer14setTextGravityEN3gui11TextGravityE
.text:0000000000027088                                         ; CODE XREF: drawer::TextblockDrawer::setTextGravity(gui::TextGravity)+C↓j
.text:0000000000027088                                         ; DATA XREF: LOAD:0000000000000C90↑o ...
.text:0000000000027088 ; __unwind {
.text:0000000000027088                 STR             W1, [X0,#0xA4]
.text:000000000002708C                 RET
.text:000000000002708C ; } // starts at 27088
.text:000000000002708C ; End of function drawer::TextblockDrawer::setTextGravity(gui::TextGravity)
.text:0000000000027090 ; =============== S U B R O U T I N E =======================================
.text:0000000000027090 ; Attributes: bp-based frame
.text:0000000000027090 ; drawer *__fastcall drawer::TextblockDrawer::draw(drawer::TextblockDrawer *__hidden this)
.text:0000000000027090                 EXPORT _ZN6drawer15TextblockDrawer4drawEv
.text:0000000000027090 _ZN6drawer15TextblockDrawer4drawEv      ; DATA XREF: LOAD:0000000000001740↑o
.text:0000000000027090                                         ; .data.rel.ro:0000000000030508↓o
.text:0000000000027090 var_10          = -0x10
.text:0000000000027090 var_s0          =  0
.text:0000000000027090 ; __unwind {
.text:0000000000027090                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000027094                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027098                 ADD             X29, SP, #0x10
.text:000000000002709C                 LDR             X8, [X0,#0x58]
.text:00000000000270A0                 MOV             X19, X0
.text:00000000000270A4                 LDR             W9, [X0,#0x30]
.text:00000000000270A8                 LDR             X10, [X0,#0x28]
.text:00000000000270AC                 STR             W9, [X8,#0x30]
.text:00000000000270B0                 STR             X10, [X8,#0x28]
.text:00000000000270B4                 LDR             X8, [X0,#0x58]
.text:00000000000270B8                 LDR             X9, [X0,#0x18]
.text:00000000000270BC                 STR             X9, [X8,#0x18]
.text:00000000000270C0                 LDR             X9, [X0,#0x20]
.text:00000000000270C4                 STR             X9, [X8,#0x20]
.text:00000000000270C8                 LDR             X0, [X0,#0x58]
.text:00000000000270CC                 LDR             X8, [X0]
.text:00000000000270D0                 LDR             X8, [X8,#0x10]
.text:00000000000270D4                 BLR             X8
.text:00000000000270D8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000270DC                 MOV             X0, X19 ; this
.text:00000000000270E0                 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000270E4                 B               ._ZN6drawer15TextblockDrawer8drawTextEv ; drawer::TextblockDrawer::drawText(void)
.text:00000000000270E4 ; } // starts at 27090
.text:00000000000270E4 ; End of function drawer::TextblockDrawer::draw(void)
.text:00000000000270E8 ; =============== S U B R O U T I N E =======================================
.text:00000000000270E8 ; __int64 __fastcall drawer::TextblockDrawer::drawBackground(drawer::TextblockDrawer *__hidden this)
.text:00000000000270E8                 EXPORT _ZN6drawer15TextblockDrawer14drawBackgroundEv
.text:00000000000270E8 _ZN6drawer15TextblockDrawer14drawBackgroundEv
.text:00000000000270E8                                         ; DATA XREF: LOAD:0000000000002178↑o
.text:00000000000270E8 ; __unwind {
.text:00000000000270E8                 LDR             X8, [X0,#0x58]
.text:00000000000270EC                 LDR             W9, [X0,#0x30]
.text:00000000000270F0                 LDR             X10, [X0,#0x28]
.text:00000000000270F4                 STR             W9, [X8,#0x30]
.text:00000000000270F8                 STR             X10, [X8,#0x28]
.text:00000000000270FC                 LDR             X8, [X0,#0x58]
.text:0000000000027100                 LDR             X9, [X0,#0x18]
.text:0000000000027104                 STR             X9, [X8,#0x18]
.text:0000000000027108                 LDR             X9, [X0,#0x20]
.text:000000000002710C                 STR             X9, [X8,#0x20]
.text:0000000000027110                 LDR             X0, [X0,#0x58]
.text:0000000000027114                 LDR             X8, [X0]
.text:0000000000027118                 LDR             X1, [X8,#0x10]
.text:000000000002711C                 BR              X1
.text:000000000002711C ; } // starts at 270E8
.text:000000000002711C ; End of function drawer::TextblockDrawer::drawBackground(void)
.text:0000000000027120 ; =============== S U B R O U T I N E =======================================
.text:0000000000027120 ; Attributes: bp-based frame
.text:0000000000027120 ; __int64 __fastcall drawer::TextblockDrawer::drawText(drawer::TextblockDrawer *__hidden this)
.text:0000000000027120                 EXPORT _ZN6drawer15TextblockDrawer8drawTextEv
.text:0000000000027120 _ZN6drawer15TextblockDrawer8drawTextEv  ; CODE XREF: drawer::TextblockDrawer::drawText(void)+C↓j
.text:0000000000027120                                         ; DATA XREF: LOAD:00000000000019C8↑o ...
.text:0000000000027120 var_60          = -0x60
.text:0000000000027120 var_50          = -0x50
.text:0000000000027120 var_40          = -0x40
.text:0000000000027120 var_30          = -0x30
.text:0000000000027120 var_20          = -0x20
.text:0000000000027120 var_10          = -0x10
.text:0000000000027120 var_s0          =  0
.text:0000000000027120 ; __unwind {
.text:0000000000027120                 STP             D9, D8, [SP,#-0x10+var_60]!
.text:0000000000027124                 STP             X28, X27, [SP,#0x60+var_50]
.text:0000000000027128                 STP             X26, X25, [SP,#0x60+var_40]
.text:000000000002712C                 STP             X24, X23, [SP,#0x60+var_30]
.text:0000000000027130                 STP             X22, X21, [SP,#0x60+var_20]
.text:0000000000027134                 STP             X20, X19, [SP,#0x60+var_10]
.text:0000000000027138                 STP             X29, X30, [SP,#0x60+var_s0]
.text:000000000002713C                 ADD             X29, SP, #0x60
.text:0000000000027140                 LDP             X21, X9, [X0,#0x40]
.text:0000000000027144                 CMP             X21, X9
.text:0000000000027148                 B.EQ            loc_2724C
.text:000000000002714C                 LDR             X8, [X0,#0x78]
.text:0000000000027150                 MOV             X27, #0xAAAAAAAAAAAAAAAA
.text:0000000000027154                 LDR             S1, [X0,#0x1C]
.text:0000000000027158                 MOV             X19, X0
.text:000000000002715C                 LDR             W22, [X0,#0x18]
.text:0000000000027160                 ADD             X23, X0, #0x28 ; '('
.text:0000000000027164                 LDR             W24, [X0,#0x20]
.text:0000000000027168                 ADD             X20, X0, #0x90
.text:000000000002716C                 UCVTF           S0, X8
.text:0000000000027170                 LDR             X25, [X0,#0x88]
.text:0000000000027174                 LDR             S9, [X0,#0x24]
.text:0000000000027178                 SUB             X26, X9, #8
.text:000000000002717C                 MOVK            X27, #0xAAAB
.text:0000000000027180                 MOV             W28, #0x18
.text:0000000000027184                 FDIV            S8, S1, S0
.text:0000000000027188                 B               loc_27194
.text:000000000002718C ; ---------------------------------------------------------------------------
.text:000000000002718C loc_2718C                               ; CODE XREF: drawer::TextblockDrawer::drawText(void)+128↓j
.text:000000000002718C                 LDR             X8, [X19,#0x78]
.text:0000000000027190                 ADD             X21, X21, #8
.text:0000000000027194 loc_27194                               ; CODE XREF: drawer::TextblockDrawer::drawText(void)+68↑j
.text:0000000000027194                 LDP             X9, X10, [X19,#0x60]
.text:0000000000027198                 CMP             X25, X8
.text:000000000002719C                 CSEL            X25, XZR, X25, EQ
.text:00000000000271A0                 SUB             X9, X10, X9
.text:00000000000271A4                 ASR             X9, X9, #3
.text:00000000000271A8                 MUL             X8, X9, X27
.text:00000000000271AC                 CMP             X25, X8
.text:00000000000271B0                 B.CS            loc_27244
.text:00000000000271B4                 LDR             X8, [X21]
.text:00000000000271B8                 LDR             W9, [X23,#8]
.text:00000000000271BC                 LDR             X10, [X23]
.text:00000000000271C0                 STR             W9, [X8,#0x30]
.text:00000000000271C4                 STR             X10, [X8,#0x28]
.text:00000000000271C8                 LDR             X8, [X21]
.text:00000000000271CC                 STR             W22, [X8,#0x18]
.text:00000000000271D0                 STR             S8, [X8,#0x1C]
.text:00000000000271D4                 STR             W24, [X8,#0x20]
.text:00000000000271D8                 STR             S9, [X8,#0x24]
.text:00000000000271DC                 LDR             X0, [X21] ; this
.text:00000000000271E0                 LDR             X1, [X19,#0x80] ; unsigned __int64
.text:00000000000271E4                 BL              ._ZN6drawer10TextDrawer15setTextSizeHintEm ; drawer::TextDrawer::setTextSizeHint(ulong)
.text:00000000000271E8                 LDR             X8, [X19,#0x60]
.text:00000000000271EC                 LDR             X0, [X21]
.text:00000000000271F0                 NOP
.text:00000000000271F4                 MADD            X1, X25, X28, X8
.text:00000000000271F8                 BL              ._ZN6drawer10TextDrawer7setTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE ; drawer::TextDrawer::setText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:00000000000271FC                 LDR             X0, [X21]
.text:0000000000027200                 MOV             X1, X20
.text:0000000000027204                 BL              ._ZN6drawer10TextDrawer12setTextColorERKN3glm5tvec4IfLNS1_9precisionE0EEE ; drawer::TextDrawer::setTextColor(glm::tvec4<float,(glm::precision)0> const&)
.text:0000000000027208                 LDR             X0, [X21]
.text:000000000002720C                 LDR             W1, [X19,#0xA0]
.text:0000000000027210                 BL              ._ZN6drawer10TextDrawer16setTextEllipsizeEN3gui13TextEllipsizeE ; drawer::TextDrawer::setTextEllipsize(gui::TextEllipsize)
.text:0000000000027214                 LDR             X0, [X21]
.text:0000000000027218                 LDR             W1, [X19,#0xA4]
.text:000000000002721C                 BL              ._ZN6drawer10TextDrawer14setTextGravityEN3gui11TextGravityE ; drawer::TextDrawer::setTextGravity(gui::TextGravity)
.text:0000000000027220                 LDR             X0, [X21] ; this
.text:0000000000027224                 LDR             X1, [X19,#0x80] ; unsigned __int64
.text:0000000000027228                 BL              ._ZN6drawer10TextDrawer15setTextSizeHintEm ; drawer::TextDrawer::setTextSizeHint(ulong)
.text:000000000002722C                 LDR             X0, [X21]
.text:0000000000027230                 LDR             X8, [X0]
.text:0000000000027234                 LDR             X8, [X8,#0x10]
.text:0000000000027238                 BLR             X8
.text:000000000002723C                 FADD            S9, S8, S9
.text:0000000000027240                 ADD             X25, X25, #1
.text:0000000000027244 loc_27244                               ; CODE XREF: drawer::TextblockDrawer::drawText(void)+90↑j
.text:0000000000027244                 CMP             X26, X21
.text:0000000000027248                 B.NE            loc_2718C
.text:000000000002724C loc_2724C                               ; CODE XREF: drawer::TextblockDrawer::drawText(void)+28↑j
.text:000000000002724C                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000027250                 LDP             X20, X19, [SP,#0x60+var_10]
.text:0000000000027254                 LDP             X22, X21, [SP,#0x60+var_20]
.text:0000000000027258                 LDP             X24, X23, [SP,#0x60+var_30]
.text:000000000002725C                 LDP             X26, X25, [SP,#0x60+var_40]
.text:0000000000027260                 LDP             X28, X27, [SP,#0x60+var_50]
.text:0000000000027264                 LDP             D9, D8, [SP+0x60+var_60],#0x70
.text:0000000000027268                 RET
.text:0000000000027268 ; } // starts at 27120
.text:0000000000027268 ; End of function drawer::TextblockDrawer::drawText(void)
.text:0000000000027268 ; ---------------------------------------------------------------------------
.text:000000000002726C                 ALIGN 0x10
.text:0000000000027270 ; __unwind {
.text:0000000000027270                 STR             X21, [SP,#-0x30]!
.text:0000000000027274                 STP             X20, X19, [SP,#0x10]
.text:0000000000027278                 STP             X29, X30, [SP,#0x20]
.text:000000000002727C                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000027280                 ADRP            X8, #_ZTVN6drawer15TextblockDrawerE_ptr@PAGE
.text:0000000000027284                 MOV             X19, X0
.text:0000000000027288                 LDR             X8, [X8,#_ZTVN6drawer15TextblockDrawerE_ptr@PAGEOFF]
.text:000000000002728C                 LDR             X20, [X0,#0x60]
.text:0000000000027290                 ADD             X8, X8, #0x10
.text:0000000000027294                 STR             X8, [X0]
.text:0000000000027298                 CBZ             X20, loc_272DC
.text:000000000002729C                 LDR             X8, [X19,#0x68]
.text:00000000000272A0                 CMP             X8, X20
.text:00000000000272A4                 B.EQ            loc_272D0
.text:00000000000272A8                 MOV             X21, X8
.text:00000000000272AC loc_272AC                               ; CODE XREF: .text:00000000000272C4↓j
.text:00000000000272AC                 LDRB            W9, [X21,#-0x18]!
.text:00000000000272B0                 TBZ             W9, #0, loc_272BC
.text:00000000000272B4                 LDUR            X0, [X8,#-8]
.text:00000000000272B8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000272BC loc_272BC                               ; CODE XREF: .text:00000000000272B0↑j
.text:00000000000272BC                 MOV             X8, X21
.text:00000000000272C0                 CMP             X20, X21
.text:00000000000272C4                 B.NE            loc_272AC
.text:00000000000272C8                 LDR             X0, [X19,#0x60]
.text:00000000000272CC                 B               loc_272D4
.text:00000000000272D0 ; ---------------------------------------------------------------------------
.text:00000000000272D0 loc_272D0                               ; CODE XREF: .text:00000000000272A4↑j
.text:00000000000272D0                 MOV             X0, X20
.text:00000000000272D4 loc_272D4                               ; CODE XREF: .text:00000000000272CC↑j
.text:00000000000272D4                 STR             X20, [X19,#0x68]
.text:00000000000272D8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000272DC loc_272DC                               ; CODE XREF: .text:0000000000027298↑j
.text:00000000000272DC                 LDR             X0, [X19,#0x58]
.text:00000000000272E0                 STR             XZR, [X19,#0x58]
.text:00000000000272E4                 CBZ             X0, loc_272F4
.text:00000000000272E8                 LDR             X8, [X0]
.text:00000000000272EC                 LDR             X8, [X8,#8]
.text:00000000000272F0                 BLR             X8
.text:00000000000272F4 loc_272F4                               ; CODE XREF: .text:00000000000272E4↑j
.text:00000000000272F4                 LDR             X20, [X19,#0x40]
.text:00000000000272F8                 CBZ             X20, loc_27330
.text:00000000000272FC                 LDR             X21, [X19,#0x48]
.text:0000000000027300                 CMP             X21, X20
.text:0000000000027304                 B.EQ            loc_27340
.text:0000000000027308 loc_27308                               ; CODE XREF: .text:0000000000027324↓j
.text:0000000000027308                 LDR             X0, [X21,#-8]!
.text:000000000002730C                 STR             XZR, [X21]
.text:0000000000027310                 CBZ             X0, loc_27320
.text:0000000000027314                 LDR             X8, [X0]
.text:0000000000027318                 LDR             X8, [X8,#8]
.text:000000000002731C                 BLR             X8
.text:0000000000027320 loc_27320                               ; CODE XREF: .text:0000000000027310↑j
.text:0000000000027320                 CMP             X20, X21
.text:0000000000027324                 B.NE            loc_27308
.text:0000000000027328                 LDR             X0, [X19,#0x40]
.text:000000000002732C                 B               loc_27344
.text:0000000000027330 ; ---------------------------------------------------------------------------
.text:0000000000027330 loc_27330                               ; CODE XREF: .text:00000000000272F8↑j
.text:0000000000027330                 LDP             X29, X30, [SP,#0x20]
.text:0000000000027334                 LDP             X20, X19, [SP,#0x10]
.text:0000000000027338                 LDR             X21, [SP],#0x30
.text:000000000002733C                 RET
.text:0000000000027340 ; ---------------------------------------------------------------------------
.text:0000000000027340 loc_27340                               ; CODE XREF: .text:0000000000027304↑j
.text:0000000000027340                 MOV             X0, X20
.text:0000000000027344 loc_27344                               ; CODE XREF: .text:000000000002732C↑j
.text:0000000000027344                 STR             X20, [X19,#0x48]
.text:0000000000027348                 LDP             X29, X30, [SP,#0x20]
.text:000000000002734C                 LDP             X20, X19, [SP,#0x10]
.text:0000000000027350                 LDR             X21, [SP],#0x30
.text:0000000000027354                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000027354 ; } // starts at 27270
.text:0000000000027358 ; ---------------------------------------------------------------------------
.text:0000000000027358 ; __unwind {
.text:0000000000027358                 STR             X21, [SP,#-0x30]!
.text:000000000002735C                 STP             X20, X19, [SP,#0x10]
.text:0000000000027360                 STP             X29, X30, [SP,#0x20]
.text:0000000000027364                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000027368                 ADRP            X8, #_ZTVN6drawer15TextblockDrawerE_ptr@PAGE
.text:000000000002736C                 MOV             X19, X0
.text:0000000000027370                 LDR             X8, [X8,#_ZTVN6drawer15TextblockDrawerE_ptr@PAGEOFF]
.text:0000000000027374                 LDR             X20, [X0,#0x60]
.text:0000000000027378                 ADD             X8, X8, #0x10
.text:000000000002737C                 STR             X8, [X0]
.text:0000000000027380                 CBZ             X20, loc_273C4
.text:0000000000027384                 LDR             X8, [X19,#0x68]
.text:0000000000027388                 CMP             X8, X20
.text:000000000002738C                 B.EQ            loc_273B8
.text:0000000000027390                 MOV             X21, X8
.text:0000000000027394 loc_27394                               ; CODE XREF: .text:00000000000273AC↓j
.text:0000000000027394                 LDRB            W9, [X21,#-0x18]!
.text:0000000000027398                 TBZ             W9, #0, loc_273A4
.text:000000000002739C                 LDUR            X0, [X8,#-8]
.text:00000000000273A0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000273A4 loc_273A4                               ; CODE XREF: .text:0000000000027398↑j
.text:00000000000273A4                 MOV             X8, X21
.text:00000000000273A8                 CMP             X20, X21
.text:00000000000273AC                 B.NE            loc_27394
.text:00000000000273B0                 LDR             X0, [X19,#0x60]
.text:00000000000273B4                 B               loc_273BC
.text:00000000000273B8 ; ---------------------------------------------------------------------------
.text:00000000000273B8 loc_273B8                               ; CODE XREF: .text:000000000002738C↑j
.text:00000000000273B8                 MOV             X0, X20
.text:00000000000273BC loc_273BC                               ; CODE XREF: .text:00000000000273B4↑j
.text:00000000000273BC                 STR             X20, [X19,#0x68]
.text:00000000000273C0                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000273C4 loc_273C4                               ; CODE XREF: .text:0000000000027380↑j
.text:00000000000273C4                 LDR             X0, [X19,#0x58]
.text:00000000000273C8                 STR             XZR, [X19,#0x58]
.text:00000000000273CC                 CBZ             X0, loc_273DC
.text:00000000000273D0                 LDR             X8, [X0]
.text:00000000000273D4                 LDR             X8, [X8,#8]
.text:00000000000273D8                 BLR             X8
.text:00000000000273DC loc_273DC                               ; CODE XREF: .text:00000000000273CC↑j
.text:00000000000273DC                 LDR             X20, [X19,#0x40]
.text:00000000000273E0                 CBZ             X20, loc_27424
.text:00000000000273E4                 LDR             X21, [X19,#0x48]
.text:00000000000273E8                 CMP             X21, X20
.text:00000000000273EC                 B.EQ            loc_27418
.text:00000000000273F0 loc_273F0                               ; CODE XREF: .text:000000000002740C↓j
.text:00000000000273F0                 LDR             X0, [X21,#-8]!
.text:00000000000273F4                 STR             XZR, [X21]
.text:00000000000273F8                 CBZ             X0, loc_27408
.text:00000000000273FC                 LDR             X8, [X0]
.text:0000000000027400                 LDR             X8, [X8,#8]
.text:0000000000027404                 BLR             X8
.text:0000000000027408 loc_27408                               ; CODE XREF: .text:00000000000273F8↑j
.text:0000000000027408                 CMP             X20, X21
.text:000000000002740C                 B.NE            loc_273F0
.text:0000000000027410                 LDR             X0, [X19,#0x40]
.text:0000000000027414                 B               loc_2741C
.text:0000000000027418 ; ---------------------------------------------------------------------------
.text:0000000000027418 loc_27418                               ; CODE XREF: .text:00000000000273EC↑j
.text:0000000000027418                 MOV             X0, X20
.text:000000000002741C loc_2741C                               ; CODE XREF: .text:0000000000027414↑j
.text:000000000002741C                 STR             X20, [X19,#0x48]
.text:0000000000027420                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000027424 loc_27424                               ; CODE XREF: .text:00000000000273E0↑j
.text:0000000000027424                 MOV             X0, X19
.text:0000000000027428                 LDP             X29, X30, [SP,#0x20]
.text:000000000002742C                 LDP             X20, X19, [SP,#0x10]
.text:0000000000027430                 LDR             X21, [SP],#0x30
.text:0000000000027434                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000027434 ; } // starts at 27358
.text:0000000000027438 ; ---------------------------------------------------------------------------
.text:0000000000027438 ; START OF FUNCTION CHUNK FOR _ZN6drawer15TextblockDrawer7addTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
.text:0000000000027438 loc_27438                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+9C↑j
.text:0000000000027438 ; __unwind {
.text:0000000000027438                 STP             X22, X21, [SP,#-0x10+var_20]!
.text:000000000002743C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000027440                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000027444                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000027448                 LDP             X10, X8, [X0]
.text:000000000002744C                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:0000000000027454                 MOV             X22, #0xAAAAAAAAAAAAAAAA
.text:0000000000027458                 SUB             X8, X8, X10
.text:000000000002745C                 ASR             X8, X8, #3
.text:0000000000027460                 MUL             X21, X8, X9
.text:0000000000027464                 MOV             X19, X0
.text:0000000000027468                 MOVK            X22, #0xAAA,LSL#48
.text:000000000002746C                 ADD             X8, X21, #1
.text:0000000000027470                 CMP             X8, X22
.text:0000000000027474                 B.HI            loc_2757C
.text:0000000000027478                 LDR             X11, [X19,#0x10]
.text:000000000002747C                 MOV             X20, X1
.text:0000000000027480                 SUB             X10, X11, X10
.text:0000000000027484                 ASR             X10, X10, #3
.text:0000000000027488                 MUL             X9, X10, X9
.text:000000000002748C                 MOV             X10, #0x555555555555554
.text:0000000000027498                 CMP             X9, X10
.text:000000000002749C                 B.HI            loc_274B0
.text:00000000000274A0                 LSL             X9, X9, #1
.text:00000000000274A4                 CMP             X9, X8
.text:00000000000274A8                 CSEL            X22, X8, X9, CC
.text:00000000000274AC                 CBZ             X22, loc_27574
.text:00000000000274B0 loc_274B0                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+4DC↑j
.text:00000000000274B0                 ADD             X8, X22, X22,LSL#1
.text:00000000000274B4                 LSL             X0, X8, #3 ; unsigned __int64
.text:00000000000274B8                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000274BC loc_274BC                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+5B8↓j
.text:00000000000274BC                 MOV             W8, #0x18
.text:00000000000274C0                 MOV             X1, X20
.text:00000000000274C4                 MADD            X21, X21, X8, X0
.text:00000000000274C8                 MADD            X22, X22, X8, X0
.text:00000000000274CC                 MOV             X0, X21
.text:00000000000274D0                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:00000000000274D4                 LDP             X8, X10, [X19]
.text:00000000000274D8                 ADD             X9, X21, #0x18
.text:00000000000274DC                 CMP             X10, X8
.text:00000000000274E0                 B.EQ            loc_27518
.text:00000000000274E4 loc_274E4                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+54C↓j
.text:00000000000274E4                 LDUR            X11, [X10,#-8]
.text:00000000000274E8                 LDUR            Q0, [X10,#-0x18]
.text:00000000000274EC                 STUR            X11, [X21,#-8]
.text:00000000000274F0                 SUB             X11, X10, #0x18
.text:00000000000274F4                 STUR            Q0, [X21,#-0x18]
.text:00000000000274F8                 SUB             X21, X21, #0x18
.text:00000000000274FC                 STP             XZR, XZR, [X10,#-0x10]
.text:0000000000027500                 CMP             X8, X11
.text:0000000000027504                 STUR            XZR, [X10,#-0x18]
.text:0000000000027508                 MOV             X10, X11
.text:000000000002750C                 B.NE            loc_274E4
.text:0000000000027510                 LDP             X20, X8, [X19]
.text:0000000000027514                 B               loc_2751C
.text:0000000000027518 ; ---------------------------------------------------------------------------
.text:0000000000027518 loc_27518                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+520↑j
.text:0000000000027518                 MOV             X20, X8
.text:000000000002751C loc_2751C                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+554↑j
.text:000000000002751C                 CMP             X8, X20
.text:0000000000027520                 STP             X21, X9, [X19]
.text:0000000000027524                 STR             X22, [X19,#0x10]
.text:0000000000027528                 B.EQ            loc_2754C
.text:000000000002752C                 MOV             X19, X8
.text:0000000000027530 loc_27530                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+588↓j
.text:0000000000027530                 LDRB            W9, [X19,#-0x18]!
.text:0000000000027534                 TBZ             W9, #0, loc_27540
.text:0000000000027538                 LDUR            X0, [X8,#-8] ; void *
.text:000000000002753C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000027540 loc_27540                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+574↑j
.text:0000000000027540                 MOV             X8, X19
.text:0000000000027544                 CMP             X20, X19
.text:0000000000027548                 B.NE            loc_27530
.text:000000000002754C loc_2754C                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+568↑j
.text:000000000002754C                 CBZ             X20, loc_27564
.text:0000000000027550                 MOV             X0, X20 ; void *
.text:0000000000027554                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000027558                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000002755C                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:0000000000027560                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000027564 ; ---------------------------------------------------------------------------
.text:0000000000027564 loc_27564                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&):loc_2754C↑j
.text:0000000000027564                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000027568                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000002756C                 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:0000000000027570                 RET
.text:0000000000027574 ; ---------------------------------------------------------------------------
.text:0000000000027574 loc_27574                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+4EC↑j
.text:0000000000027574                 MOV             X0, XZR
.text:0000000000027578                 B               loc_274BC
.text:000000000002757C ; ---------------------------------------------------------------------------
.text:000000000002757C loc_2757C                               ; CODE XREF: drawer::TextblockDrawer::addText(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)+4B4↑j
.text:000000000002757C                 MOV             X0, X19
.text:0000000000027580                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000027580 ; } // starts at 27438
.text:0000000000027580 ; END OF FUNCTION CHUNK FOR _ZN6drawer15TextblockDrawer7addTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
.text:0000000000027580 ; ---------------------------------------------------------------------------
.text:0000000000027584                 DCD 0
.text:0000000000027588 ; =============== S U B R O U T I N E =======================================
.text:0000000000027588 ; Attributes: bp-based frame
.text:0000000000027588 sub_27588                               ; DATA XREF: .init_array:00000000000305E8↓o
.text:0000000000027588 var_s0          =  0
.text:0000000000027588 ; __unwind {
.text:0000000000027588                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002758C                 MOV             X29, SP
.text:0000000000027590                 ADRP            X8, #unk_31008@PAGE
.text:0000000000027594                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000027598                 LDARB           W8, [X8]
.text:000000000002759C                 TBNZ            W8, #0, loc_275DC
.text:00000000000275A0                 ADRP            X0, #unk_31008@PAGE
.text:00000000000275A4                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:00000000000275A8                 BL              .__cxa_guard_acquire
.text:00000000000275AC                 CBZ             W0, loc_275DC
.text:00000000000275B0                 ADRP            X1, #qword_31000@PAGE
.text:00000000000275B4                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:00000000000275B8                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:00000000000275BC                 ADRP            X2, #off_2F000@PAGE
.text:00000000000275C0                 STR             XZR, [X1]
.text:00000000000275C4                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000275C8                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:00000000000275CC                 BL              .__cxa_atexit
.text:00000000000275D0                 ADRP            X0, #unk_31008@PAGE
.text:00000000000275D4                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:00000000000275D8                 BL              .__cxa_guard_release
.text:00000000000275DC loc_275DC                               ; CODE XREF: sub_27588+14↑j
.text:00000000000275DC                                         ; sub_27588+24↑j
.text:00000000000275DC                 ADRP            X8, #unk_31038@PAGE
.text:00000000000275E0                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:00000000000275E4                 LDARB           W8, [X8]
.text:00000000000275E8                 TBNZ            W8, #0, loc_27624
.text:00000000000275EC                 ADRP            X0, #unk_31038@PAGE
.text:00000000000275F0                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000275F4                 BL              .__cxa_guard_acquire
.text:00000000000275F8                 CBZ             W0, loc_27624
.text:00000000000275FC                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000027600                 ADRP            X1, #unk_31010@PAGE
.text:0000000000027604                 ADRP            X2, #off_2F000@PAGE
.text:0000000000027608                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002760C                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000027610                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000027614                 BL              .__cxa_atexit
.text:0000000000027618                 ADRP            X0, #unk_31038@PAGE
.text:000000000002761C                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000027620                 BL              .__cxa_guard_release
.text:0000000000027624 loc_27624                               ; CODE XREF: sub_27588+60↑j
.text:0000000000027624                                         ; sub_27588+70↑j
.text:0000000000027624                 ADRP            X8, #unk_31058@PAGE
.text:0000000000027628                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:000000000002762C                 LDARB           W8, [X8]
.text:0000000000027630                 TBNZ            W8, #0, loc_27674
.text:0000000000027634                 ADRP            X0, #unk_31058@PAGE
.text:0000000000027638                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002763C                 BL              .__cxa_guard_acquire
.text:0000000000027640                 CBZ             W0, loc_27674
.text:0000000000027644                 ADRP            X1, #unk_31040@PAGE
.text:0000000000027648                 ADRP            X0, #loc_1C078@PAGE
.text:000000000002764C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000027650                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:0000000000027654                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000027658                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002765C                 STP             XZR, XZR, [X1]
.text:0000000000027660                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:0000000000027664                 BL              .__cxa_atexit
.text:0000000000027668                 ADRP            X0, #unk_31058@PAGE
.text:000000000002766C                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000027670                 BL              .__cxa_guard_release
.text:0000000000027674 loc_27674                               ; CODE XREF: sub_27588+A8↑j
.text:0000000000027674                                         ; sub_27588+B8↑j
.text:0000000000027674                 ADRP            X8, #unk_31078@PAGE
.text:0000000000027678                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000002767C                 LDARB           W8, [X8]
.text:0000000000027680                 TBNZ            W8, #0, loc_276C8
.text:0000000000027684                 ADRP            X0, #unk_31078@PAGE
.text:0000000000027688                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002768C                 BL              .__cxa_guard_acquire
.text:0000000000027690                 CBZ             W0, loc_276C8
.text:0000000000027694                 ADRP            X1, #unk_31060@PAGE
.text:0000000000027698                 ADRP            X0, #loc_1C100@PAGE
.text:000000000002769C                 ADRP            X2, #off_2F000@PAGE
.text:00000000000276A0                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:00000000000276A4                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:00000000000276A8                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000276AC                 STP             XZR, XZR, [X1]
.text:00000000000276B0                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:00000000000276B4                 BL              .__cxa_atexit
.text:00000000000276B8                 ADRP            X0, #unk_31078@PAGE
.text:00000000000276BC                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:00000000000276C0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000276C4                 B               .__cxa_guard_release
.text:00000000000276C8 ; ---------------------------------------------------------------------------
.text:00000000000276C8 loc_276C8                               ; CODE XREF: sub_27588+F8↑j
.text:00000000000276C8                                         ; sub_27588+108↑j
.text:00000000000276C8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000276CC                 RET
.text:00000000000276CC ; } // starts at 27588
.text:00000000000276CC ; End of function sub_27588
.text:00000000000276D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000276D0 ; Attributes: bp-based frame
.text:00000000000276D0 ; gui::FrameData::FrameData(unsigned int, std::__1::vector<gui::RenderPassData, std::__1::allocator<gui::RenderPassData>> const&)
.text:00000000000276D0                 EXPORT _ZN3gui9FrameDataC2EjRKNSt3__16vectorINS_14RenderPassDataENS1_9allocatorIS3_EEEE
.text:00000000000276D0 _ZN3gui9FrameDataC2EjRKNSt3__16vectorINS_14RenderPassDataENS1_9allocatorIS3_EEEE
.text:00000000000276D0                                         ; CODE XREF: gui::FrameData::FrameData(uint,std::__1::vector<gui::RenderPassData,std::__1::allocator<gui::RenderPassData>> const&)+C↓j
.text:00000000000276D0                                         ; DATA XREF: LOAD:00000000000018F0↑o ...
.text:00000000000276D0 var_20          = -0x20
.text:00000000000276D0 var_10          = -0x10
.text:00000000000276D0 var_s0          =  0
.text:00000000000276D0 ; __unwind {
.text:00000000000276D0                 STR             X21, [SP,#-0x10+var_20]! ; Alternative name is 'gui::FrameData::FrameData(unsigned int, std::__1::vector<gui::RenderPassData, std::__1::allocator<gui::RenderPassData>> const&)'
.text:00000000000276D4                 STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000276D8                 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000276DC                 ADD             X29, SP, #0x20
.text:00000000000276E0                 MOV             X19, X0
.text:00000000000276E4                 STR             W1, [X0]
.text:00000000000276E8                 STP             XZR, XZR, [X0,#0x10]
.text:00000000000276EC                 STR             XZR, [X0,#8]!
.text:00000000000276F0                 LDP             X8, X9, [X2]
.text:00000000000276F4                 SUBS            X8, X9, X8
.text:00000000000276F8                 B.EQ            loc_2776C
.text:00000000000276FC                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:0000000000027704                 ASR             X10, X8, #5
.text:0000000000027708                 MUL             X21, X10, X9
.text:000000000002770C                 MOV             X9, #0x2AAAAAAAAAAAAAB
.text:0000000000027718                 CMP             X21, X9
.text:000000000002771C                 B.CS            loc_27784
.text:0000000000027720                 MOV             X0, X8  ; unsigned __int64
.text:0000000000027724                 MOV             X20, X2
.text:0000000000027728                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002772C                 MOV             W8, #0x60 ; '`'
.text:0000000000027730                 STP             X0, X0, [X19,#8]
.text:0000000000027734                 NOP
.text:0000000000027738                 MADD            X8, X21, X8, X0
.text:000000000002773C                 STR             X8, [X19,#0x18]
.text:0000000000027740                 LDP             X21, X20, [X20]
.text:0000000000027744                 CMP             X21, X20
.text:0000000000027748                 B.EQ            loc_2776C
.text:000000000002774C loc_2774C                               ; CODE XREF: gui::FrameData::FrameData(uint,std::__1::vector<gui::RenderPassData,std::__1::allocator<gui::RenderPassData>> const&)+98↓j
.text:000000000002774C                 MOV             X1, X21
.text:0000000000027750                 BL              sub_215F0
.text:0000000000027754                 LDR             X8, [X19,#0x10]
.text:0000000000027758                 ADD             X21, X21, #0x60 ; '`'
.text:000000000002775C                 CMP             X20, X21
.text:0000000000027760                 ADD             X0, X8, #0x60 ; '`'
.text:0000000000027764                 STR             X0, [X19,#0x10]
.text:0000000000027768                 B.NE            loc_2774C
.text:000000000002776C loc_2776C                               ; CODE XREF: gui::FrameData::FrameData(uint,std::__1::vector<gui::RenderPassData,std::__1::allocator<gui::RenderPassData>> const&)+28↑j
.text:000000000002776C                                         ; gui::FrameData::FrameData(uint,std::__1::vector<gui::RenderPassData,std::__1::allocator<gui::RenderPassData>> const&)+78↑j
.text:000000000002776C                 MOVI            V0.2D, #0
.text:0000000000027770                 STP             Q0, Q0, [X19,#0x20]
.text:0000000000027774                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000027778                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000002777C                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000027780                 RET
.text:0000000000027784 ; ---------------------------------------------------------------------------
.text:0000000000027784 loc_27784                               ; CODE XREF: gui::FrameData::FrameData(uint,std::__1::vector<gui::RenderPassData,std::__1::allocator<gui::RenderPassData>> const&)+4C↑j
.text:0000000000027784                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000027784 ; } // starts at 276D0
.text:0000000000027784 ; End of function gui::FrameData::FrameData(uint,std::__1::vector<gui::RenderPassData,std::__1::allocator<gui::RenderPassData>> const&)
.text:0000000000027788 ; =============== S U B R O U T I N E =======================================
.text:0000000000027788 ; Attributes: bp-based frame
.text:0000000000027788 ; __int64 __fastcall gui::FrameData::addRenderPassInfo(gui::FrameData *__hidden this, const gui::RenderPassData *)
.text:0000000000027788                 EXPORT _ZN3gui9FrameData17addRenderPassInfoERKNS_14RenderPassDataE
.text:0000000000027788 _ZN3gui9FrameData17addRenderPassInfoERKNS_14RenderPassDataE
.text:0000000000027788                                         ; DATA XREF: LOAD:00000000000017A0↑o
.text:0000000000027788 var_30          = -0x30
.text:0000000000027788 var_20          = -0x20
.text:0000000000027788 var_10          = -0x10
.text:0000000000027788 var_s0          =  0
.text:0000000000027788 ; FUNCTION CHUNK AT .text:0000000000027830 SIZE 0000013C BYTES
.text:0000000000027788 ; __unwind {
.text:0000000000027788                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000002778C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027790                 ADD             X29, SP, #0x10
.text:0000000000027794                 MOV             X19, X0
.text:0000000000027798                 LDR             X0, [X0,#0x10]
.text:000000000002779C                 LDR             X8, [X19,#0x18]
.text:00000000000277A0                 CMP             X0, X8
.text:00000000000277A4                 B.EQ            loc_277C4
.text:00000000000277A8                 BL              sub_215F0
.text:00000000000277AC                 LDR             X8, [X19,#0x10]
.text:00000000000277B0                 ADD             X8, X8, #0x60 ; '`'
.text:00000000000277B4                 STR             X8, [X19,#0x10]
.text:00000000000277B8                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000277BC                 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000277C0                 RET
.text:00000000000277C4 ; ---------------------------------------------------------------------------
.text:00000000000277C4 loc_277C4                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+1C↑j
.text:00000000000277C4                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000277C8                 ADD             X0, X19, #8
.text:00000000000277CC                 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000277D0                 B               loc_27830
.text:00000000000277D0 ; } // starts at 27788
.text:00000000000277D0 ; End of function gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)
.text:00000000000277D0 ; ---------------------------------------------------------------------------
.text:00000000000277D4                 ALIGN 8
.text:00000000000277D8 ; =============== S U B R O U T I N E =======================================
.text:00000000000277D8 ; __int64 __fastcall gui::FrameData::addFrameTimeInfo(gui::FrameData *__hidden this, long double, long double)
.text:00000000000277D8                 EXPORT _ZN3gui9FrameData16addFrameTimeInfoEee
.text:00000000000277D8 _ZN3gui9FrameData16addFrameTimeInfoEee  ; DATA XREF: LOAD:0000000000001968↑o
.text:00000000000277D8 ; __unwind {
.text:00000000000277D8                 STP             Q0, Q1, [X0,#0x20]
.text:00000000000277DC                 RET
.text:00000000000277DC ; } // starts at 277D8
.text:00000000000277DC ; End of function gui::FrameData::addFrameTimeInfo(long double,long double)
.text:00000000000277E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000277E0 ; Attributes: bp-based frame
.text:00000000000277E0 ; __int64 __fastcall gui::FrameData::isValid(gui::FrameData *__hidden this)
.text:00000000000277E0                 EXPORT _ZNK3gui9FrameData7isValidEv
.text:00000000000277E0 _ZNK3gui9FrameData7isValidEv            ; CODE XREF: gui::FrameData::isValid(void)+C↓j
.text:00000000000277E0                                         ; DATA XREF: LOAD:0000000000001E78↑o ...
.text:00000000000277E0 var_10          = -0x10
.text:00000000000277E0 var_s0          =  0
.text:00000000000277E0 ; __unwind {
.text:00000000000277E0                 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000277E4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000277E8                 ADD             X29, SP, #0x10
.text:00000000000277EC                 LDP             Q1, Q0, [X0,#0x20]
.text:00000000000277F0                 MOV             X19, X0
.text:00000000000277F4                 BL              .__subtf3
.text:00000000000277F8                 ADRP            X8, #xmmword_79C0@PAGE
.text:00000000000277FC                 LDR             Q1, [X8,#xmmword_79C0@PAGEOFF]
.text:0000000000027800                 BL              .__gttf2
.text:0000000000027804                 CMP             W0, #0
.text:0000000000027808                 B.LE            loc_2781C
.text:000000000002780C                 LDP             X8, X9, [X19,#8]
.text:0000000000027810                 CMP             X9, X8
.text:0000000000027814                 CSET            W0, NE
.text:0000000000027818                 B               loc_27820
.text:000000000002781C ; ---------------------------------------------------------------------------
.text:000000000002781C loc_2781C                               ; CODE XREF: gui::FrameData::isValid(void)+28↑j
.text:000000000002781C                 MOV             W0, WZR
.text:0000000000027820 loc_27820                               ; CODE XREF: gui::FrameData::isValid(void)+38↑j
.text:0000000000027820                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027824                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000027828                 RET
.text:0000000000027828 ; } // starts at 277E0
.text:0000000000027828 ; End of function gui::FrameData::isValid(void)
.text:0000000000027828 ; ---------------------------------------------------------------------------
.text:000000000002782C                 ALIGN 0x10
.text:0000000000027830 ; START OF FUNCTION CHUNK FOR _ZN3gui9FrameData17addRenderPassInfoERKNS_14RenderPassDataE
.text:0000000000027830 loc_27830                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+48↑j
.text:0000000000027830 ; __unwind {
.text:0000000000027830                 STP             X24, X23, [SP,#-0x10+var_30]!
.text:0000000000027834                 STP             X22, X21, [SP,#0x30+var_20]
.text:0000000000027838                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000002783C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000027840                 ADD             X29, SP, #0x30 ; '0'
.text:0000000000027844                 LDP             X10, X8, [X0]
.text:0000000000027848                 MOV             X9, #0xAAAAAAAAAAAAAAAB
.text:0000000000027850                 MOV             X22, #0xAAAAAAAAAAAAAAAA
.text:0000000000027854                 SUB             X8, X8, X10
.text:0000000000027858                 ASR             X8, X8, #5
.text:000000000002785C                 MUL             X21, X8, X9
.text:0000000000027860                 MOV             X19, X0
.text:0000000000027864                 MOVK            X22, #0x2AA,LSL#48
.text:0000000000027868                 ADD             X8, X21, #1
.text:000000000002786C                 CMP             X8, X22
.text:0000000000027870                 B.HI            loc_27964
.text:0000000000027874                 LDR             X11, [X19,#0x10]
.text:0000000000027878                 MOV             X20, X1
.text:000000000002787C                 SUB             X10, X11, X10
.text:0000000000027880                 ASR             X10, X10, #5
.text:0000000000027884                 MUL             X9, X10, X9
.text:0000000000027888                 MOV             X10, #0x155555555555554
.text:0000000000027894                 CMP             X9, X10
.text:0000000000027898                 B.HI            loc_278AC
.text:000000000002789C                 LSL             X9, X9, #1
.text:00000000000278A0                 CMP             X9, X8
.text:00000000000278A4                 CSEL            X22, X8, X9, CC
.text:00000000000278A8                 CBZ             X22, loc_2795C
.text:00000000000278AC loc_278AC                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+110↑j
.text:00000000000278AC                 ADD             X8, X22, X22,LSL#1
.text:00000000000278B0                 LSL             X0, X8, #5 ; unsigned __int64
.text:00000000000278B4                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000278B8 loc_278B8                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+1D8↓j
.text:00000000000278B8                 MOV             W8, #0x60 ; '`'
.text:00000000000278BC                 MOV             X1, X20
.text:00000000000278C0                 MADD            X21, X21, X8, X0
.text:00000000000278C4                 MADD            X23, X22, X8, X0
.text:00000000000278C8                 MOV             X0, X21
.text:00000000000278CC                 BL              sub_215F0
.text:00000000000278D0                 LDP             X20, X22, [X19]
.text:00000000000278D4                 ADD             X24, X21, #0x60 ; '`'
.text:00000000000278D8                 CMP             X22, X20
.text:00000000000278DC                 B.EQ            loc_27904
.text:00000000000278E0 loc_278E0                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+170↓j
.text:00000000000278E0                 SUB             X21, X21, #0x60 ; '`'
.text:00000000000278E4                 SUB             X22, X22, #0x60 ; '`'
.text:00000000000278E8                 MOV             X0, X21
.text:00000000000278EC                 MOV             X1, X22
.text:00000000000278F0                 BL              sub_215F0
.text:00000000000278F4                 CMP             X20, X22
.text:00000000000278F8                 B.NE            loc_278E0
.text:00000000000278FC                 LDP             X22, X20, [X19]
.text:0000000000027900                 B               loc_27908
.text:0000000000027904 ; ---------------------------------------------------------------------------
.text:0000000000027904 loc_27904                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+154↑j
.text:0000000000027904                 MOV             X22, X20
.text:0000000000027908 loc_27908                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+178↑j
.text:0000000000027908                 CMP             X20, X22
.text:000000000002790C                 STP             X21, X24, [X19]
.text:0000000000027910                 STR             X23, [X19,#0x10]
.text:0000000000027914                 B.EQ            loc_2792C
.text:0000000000027918 loc_27918                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+1A0↓j
.text:0000000000027918                 SUB             X20, X20, #0x60 ; '`'
.text:000000000002791C                 MOV             X0, X20 ; this
.text:0000000000027920                 BL              ._ZN3gui14RenderPassDataD2Ev ; gui::RenderPassData::~RenderPassData()
.text:0000000000027924                 CMP             X22, X20
.text:0000000000027928                 B.NE            loc_27918
.text:000000000002792C loc_2792C                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+18C↑j
.text:000000000002792C                 CBZ             X22, loc_27948
.text:0000000000027930                 MOV             X0, X22 ; void *
.text:0000000000027934                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000027938                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000002793C                 LDP             X22, X21, [SP,#0x30+var_20]
.text:0000000000027940                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:0000000000027944                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000027948 ; ---------------------------------------------------------------------------
.text:0000000000027948 loc_27948                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&):loc_2792C↑j
.text:0000000000027948                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000002794C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:0000000000027950                 LDP             X22, X21, [SP,#0x30+var_20]
.text:0000000000027954                 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:0000000000027958                 RET
.text:000000000002795C ; ---------------------------------------------------------------------------
.text:000000000002795C loc_2795C                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+120↑j
.text:000000000002795C                 MOV             X0, XZR
.text:0000000000027960                 B               loc_278B8
.text:0000000000027964 ; ---------------------------------------------------------------------------
.text:0000000000027964 loc_27964                               ; CODE XREF: gui::FrameData::addRenderPassInfo(gui::RenderPassData const&)+E8↑j
.text:0000000000027964                 MOV             X0, X19
.text:0000000000027968                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000027968 ; } // starts at 27830
.text:0000000000027968 ; END OF FUNCTION CHUNK FOR _ZN3gui9FrameData17addRenderPassInfoERKNS_14RenderPassDataE
.text:0000000000027968 ; ---------------------------------------------------------------------------
.text:000000000002796C                 DCD 0
.text:0000000000027970 ; =============== S U B R O U T I N E =======================================
.text:0000000000027970 ; Attributes: bp-based frame
.text:0000000000027970 ; __int64 __fastcall gui::GlyphAtlas::getGlyphAtlas(gui::GlyphAtlas *__hidden this)
.text:0000000000027970                 EXPORT _ZN3gui10GlyphAtlas13getGlyphAtlasEv
.text:0000000000027970 _ZN3gui10GlyphAtlas13getGlyphAtlasEv    ; CODE XREF: gui::GlyphAtlas::getGlyphAtlas(void)+C↓j
.text:0000000000027970                                         ; DATA XREF: LOAD:00000000000019B0↑o ...
.text:0000000000027970 var_10          = -0x10
.text:0000000000027970 var_s0          =  0
.text:0000000000027970 ; __unwind {
.text:0000000000027970                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000027974                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027978                 ADD             X29, SP, #0x10
.text:000000000002797C                 ADRP            X8, #unk_31148@PAGE
.text:0000000000027980                 ADD             X8, X8, #unk_31148@PAGEOFF
.text:0000000000027984                 LDARB           W8, [X8]
.text:0000000000027988                 TBZ             W8, #0, loc_279A0
.text:000000000002798C loc_2798C                               ; CODE XREF: gui::GlyphAtlas::getGlyphAtlas(void)+3C↓j
.text:000000000002798C                                         ; gui::GlyphAtlas::getGlyphAtlas(void)+74↓j
.text:000000000002798C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027990                 ADRP            X0, #unk_31120@PAGE
.text:0000000000027994                 ADD             X0, X0, #unk_31120@PAGEOFF
.text:0000000000027998                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000002799C                 RET
.text:00000000000279A0 ; ---------------------------------------------------------------------------
.text:00000000000279A0 loc_279A0                               ; CODE XREF: gui::GlyphAtlas::getGlyphAtlas(void)+18↑j
.text:00000000000279A0                 ADRP            X0, #unk_31148@PAGE
.text:00000000000279A4                 ADD             X0, X0, #unk_31148@PAGEOFF ; __guard *
.text:00000000000279A8                 BL              .__cxa_guard_acquire
.text:00000000000279AC                 CBZ             W0, loc_2798C
.text:00000000000279B0                 ADRP            X19, #unk_31120@PAGE
.text:00000000000279B4                 ADD             X19, X19, #unk_31120@PAGEOFF
.text:00000000000279B8                 MOV             X0, X19 ; this
.text:00000000000279BC                 BL              ._ZN3gui10GlyphAtlasC2Ev ; gui::GlyphAtlas::GlyphAtlas(void)
.text:00000000000279C0                 ADRP            X0, #_ZN3gui10GlyphAtlasD2Ev_ptr@PAGE
.text:00000000000279C4                 ADRP            X2, #off_2F000@PAGE
.text:00000000000279C8                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000279CC                 LDR             X0, [X0,#_ZN3gui10GlyphAtlasD2Ev_ptr@PAGEOFF] ; lpfunc
.text:00000000000279D0                 MOV             X1, X19 ; obj
.text:00000000000279D4                 BL              .__cxa_atexit
.text:00000000000279D8                 ADRP            X0, #unk_31148@PAGE
.text:00000000000279DC                 ADD             X0, X0, #unk_31148@PAGEOFF ; __guard *
.text:00000000000279E0                 BL              .__cxa_guard_release
.text:00000000000279E4                 B               loc_2798C
.text:00000000000279E4 ; } // starts at 27970
.text:00000000000279E4 ; End of function gui::GlyphAtlas::getGlyphAtlas(void)
.text:00000000000279E8 ; =============== S U B R O U T I N E =======================================
.text:00000000000279E8 ; Attributes: bp-based frame
.text:00000000000279E8 ; __int64 __fastcall gui::GlyphAtlas::getGlyphWidth(gui::GlyphAtlas *__hidden this, char)
.text:00000000000279E8                 EXPORT _ZNK3gui10GlyphAtlas13getGlyphWidthEc
.text:00000000000279E8 _ZNK3gui10GlyphAtlas13getGlyphWidthEc   ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+C↓j
.text:00000000000279E8                                         ; DATA XREF: LOAD:0000000000001A58↑o ...
.text:00000000000279E8 var_10          = -0x10
.text:00000000000279E8 var_s0          =  0
.text:00000000000279E8 ; __unwind {
.text:00000000000279E8                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000279EC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000279F0                 ADD             X29, SP, #0x10
.text:00000000000279F4                 LDR             X8, [X0,#8]!
.text:00000000000279F8                 MOV             W19, W1
.text:00000000000279FC                 CBZ             X8, loc_27A20
.text:0000000000027A00                 MOV             X9, X8
.text:0000000000027A04 loc_27A04                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+34↓j
.text:0000000000027A04                 LDRB            W10, [X9,#0x20]
.text:0000000000027A08                 CMP             W10, W19,UXTB
.text:0000000000027A0C                 B.HI            loc_27A18
.text:0000000000027A10                 B.CS            loc_27A90
.text:0000000000027A14                 ADD             X9, X9, #8
.text:0000000000027A18 loc_27A18                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+24↑j
.text:0000000000027A18                 LDR             X9, [X9]
.text:0000000000027A1C                 CBNZ            X9, loc_27A04
.text:0000000000027A20 loc_27A20                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+14↑j
.text:0000000000027A20                                         ; gui::GlyphAtlas::getGlyphWidth(char)+E0↓j
.text:0000000000027A20                 ADRP            X20, #aFrameworksBase_3@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027A24                 ADD             X20, X20, #aFrameworksBase_3@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027A28                 MOV             W1, #0x2F ; '/'
.text:0000000000027A2C                 MOV             W2, #0x44 ; 'D'
.text:0000000000027A30                 MOV             X0, X20
.text:0000000000027A34                 BL              .__strrchr_chk
.text:0000000000027A38                 CBZ             X0, loc_27A54
.text:0000000000027A3C                 ADRP            X0, #aFrameworksBase_3@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027A40                 ADD             X0, X0, #aFrameworksBase_3@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027A44                 MOV             W1, #0x2F ; '/'
.text:0000000000027A48                 MOV             W2, #0x44 ; 'D'
.text:0000000000027A4C                 BL              .__strrchr_chk
.text:0000000000027A50                 ADD             X20, X0, #1
.text:0000000000027A54 loc_27A54                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+50↑j
.text:0000000000027A54                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:0000000000027A58                 ADRP            X2, #aSSDNoSymbolCIn@PAGE ; "%s:%s(%d) No symbol '%c' in Glyph atlas"...
.text:0000000000027A5C                 ADRP            X4, #aGetglyphwidth@PAGE ; "getGlyphWidth"
.text:0000000000027A60                 AND             W6, W19, #0xFF
.text:0000000000027A64                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:0000000000027A68                 ADD             X2, X2, #aSSDNoSymbolCIn@PAGEOFF ; "%s:%s(%d) No symbol '%c' in Glyph atlas"...
.text:0000000000027A6C                 ADD             X4, X4, #aGetglyphwidth@PAGEOFF ; "getGlyphWidth"
.text:0000000000027A70                 MOV             W0, #6
.text:0000000000027A74                 MOV             X3, X20
.text:0000000000027A78                 MOV             W5, #0x10
.text:0000000000027A7C                 BL              .__android_log_print
.text:0000000000027A80                 FMOV            S0, WZR
.text:0000000000027A84 loc_27A84                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+E8↓j
.text:0000000000027A84                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027A88                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000027A8C                 RET
.text:0000000000027A90 ; ---------------------------------------------------------------------------
.text:0000000000027A90 loc_27A90                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+28↑j
.text:0000000000027A90                 MOV             X9, X0
.text:0000000000027A94 loc_27A94                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+C0↓j
.text:0000000000027A94                 LDRB            W10, [X8,#0x20]
.text:0000000000027A98                 CMP             W10, W19,UXTB
.text:0000000000027A9C                 CSET            W10, CC
.text:0000000000027AA0                 CSEL            X9, X9, X8, CC
.text:0000000000027AA4                 LDR             X8, [X8,W10,UXTW#3]
.text:0000000000027AA8                 CBNZ            X8, loc_27A94
.text:0000000000027AAC                 CMP             X9, X0
.text:0000000000027AB0                 B.EQ            loc_27AC0
.text:0000000000027AB4                 LDRB            W8, [X9,#0x20]
.text:0000000000027AB8                 CMP             W8, W19,UXTB
.text:0000000000027ABC                 B.LS            loc_27AC4
.text:0000000000027AC0 loc_27AC0                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+C8↑j
.text:0000000000027AC0                 MOV             X9, X0
.text:0000000000027AC4 loc_27AC4                               ; CODE XREF: gui::GlyphAtlas::getGlyphWidth(char)+D4↑j
.text:0000000000027AC4                 LDR             X8, [X9,#0x28]
.text:0000000000027AC8                 CBZ             X8, loc_27A20
.text:0000000000027ACC                 LDR             S0, [X8,#0x40]
.text:0000000000027AD0                 B               loc_27A84
.text:0000000000027AD0 ; } // starts at 279E8
.text:0000000000027AD0 ; End of function gui::GlyphAtlas::getGlyphWidth(char)
.text:0000000000027AD0 ; ---------------------------------------------------------------------------
.text:0000000000027AD4                 ALIGN 8
.text:0000000000027AD8 ; =============== S U B R O U T I N E =======================================
.text:0000000000027AD8 ; Attributes: bp-based frame
.text:0000000000027AD8 ; gui::GlyphAtlas::operator[](char)const
.text:0000000000027AD8                 EXPORT _ZNK3gui10GlyphAtlasixEc
.text:0000000000027AD8 _ZNK3gui10GlyphAtlasixEc                ; CODE XREF: gui::GlyphAtlas::operator[](char)+C↓j
.text:0000000000027AD8                                         ; DATA XREF: LOAD:0000000000000D68↑o ...
.text:0000000000027AD8 var_10          = -0x10
.text:0000000000027AD8 var_s0          =  0
.text:0000000000027AD8 ; __unwind {
.text:0000000000027AD8                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:0000000000027ADC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027AE0                 ADD             X29, SP, #0x10
.text:0000000000027AE4                 LDR             X8, [X0,#8]!
.text:0000000000027AE8                 MOV             W19, W1
.text:0000000000027AEC                 CBZ             X8, loc_27B10
.text:0000000000027AF0                 MOV             X9, X8
.text:0000000000027AF4 loc_27AF4                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+34↓j
.text:0000000000027AF4                 LDRB            W10, [X9,#0x20]
.text:0000000000027AF8                 CMP             W10, W19,UXTB
.text:0000000000027AFC                 B.HI            loc_27B08
.text:0000000000027B00                 B.CS            loc_27B80
.text:0000000000027B04                 ADD             X9, X9, #8
.text:0000000000027B08 loc_27B08                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+24↑j
.text:0000000000027B08                 LDR             X9, [X9]
.text:0000000000027B0C                 CBNZ            X9, loc_27AF4
.text:0000000000027B10 loc_27B10                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+14↑j
.text:0000000000027B10                                         ; gui::GlyphAtlas::operator[](char)+E4↓j
.text:0000000000027B10                 ADRP            X20, #aFrameworksBase_3@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027B14                 ADD             X20, X20, #aFrameworksBase_3@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027B18                 MOV             W1, #0x2F ; '/'
.text:0000000000027B1C                 MOV             W2, #0x44 ; 'D'
.text:0000000000027B20                 MOV             X0, X20
.text:0000000000027B24                 BL              .__strrchr_chk
.text:0000000000027B28                 CBZ             X0, loc_27B44
.text:0000000000027B2C                 ADRP            X0, #aFrameworksBase_3@PAGE ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027B30                 ADD             X0, X0, #aFrameworksBase_3@PAGEOFF ; "frameworks/base/libs/overlay/common/Gpu"...
.text:0000000000027B34                 MOV             W1, #0x2F ; '/'
.text:0000000000027B38                 MOV             W2, #0x44 ; 'D'
.text:0000000000027B3C                 BL              .__strrchr_chk
.text:0000000000027B40                 ADD             X20, X0, #1
.text:0000000000027B44 loc_27B44                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+50↑j
.text:0000000000027B44                 ADRP            X1, #aGpuwatch@PAGE ; "GpuWatch"
.text:0000000000027B48                 ADRP            X2, #aSSDNoSymbolCIn@PAGE ; "%s:%s(%d) No symbol '%c' in Glyph atlas"...
.text:0000000000027B4C                 ADRP            X4, #aOperator@PAGE ; "operator[]"
.text:0000000000027B50                 AND             W6, W19, #0xFF
.text:0000000000027B54                 ADD             X1, X1, #aGpuwatch@PAGEOFF ; "GpuWatch"
.text:0000000000027B58                 ADD             X2, X2, #aSSDNoSymbolCIn@PAGEOFF ; "%s:%s(%d) No symbol '%c' in Glyph atlas"...
.text:0000000000027B5C                 ADD             X4, X4, #aOperator@PAGEOFF ; "operator[]"
.text:0000000000027B60                 MOV             W5, #0x1A
.text:0000000000027B64                 MOV             W0, #6
.text:0000000000027B68                 MOV             X3, X20
.text:0000000000027B6C                 BL              .__android_log_print
.text:0000000000027B70                 MOV             X0, XZR
.text:0000000000027B74 loc_27B74                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+E0↓j
.text:0000000000027B74                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000027B78                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000027B7C                 RET
.text:0000000000027B80 ; ---------------------------------------------------------------------------
.text:0000000000027B80 loc_27B80                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+28↑j
.text:0000000000027B80                 MOV             X9, X0
.text:0000000000027B84 loc_27B84                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+C0↓j
.text:0000000000027B84                 LDRB            W10, [X8,#0x20]
.text:0000000000027B88                 CMP             W10, W19,UXTB
.text:0000000000027B8C                 CSET            W10, CC
.text:0000000000027B90                 CSEL            X9, X9, X8, CC
.text:0000000000027B94                 LDR             X8, [X8,W10,UXTW#3]
.text:0000000000027B98                 CBNZ            X8, loc_27B84
.text:0000000000027B9C                 CMP             X9, X0
.text:0000000000027BA0                 B.EQ            loc_27BB0
.text:0000000000027BA4                 LDRB            W8, [X9,#0x20]
.text:0000000000027BA8                 CMP             W8, W19,UXTB
.text:0000000000027BAC                 B.LS            loc_27BB4
.text:0000000000027BB0 loc_27BB0                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+C8↑j
.text:0000000000027BB0                 MOV             X9, X0
.text:0000000000027BB4 loc_27BB4                               ; CODE XREF: gui::GlyphAtlas::operator[](char)+D4↑j
.text:0000000000027BB4                 LDR             X0, [X9,#0x28]
.text:0000000000027BB8                 CBNZ            X0, loc_27B74
.text:0000000000027BBC                 B               loc_27B10
.text:0000000000027BBC ; } // starts at 27AD8
.text:0000000000027BBC ; End of function gui::GlyphAtlas::operator[](char)
.text:0000000000027BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000027BC0 ; Attributes: bp-based frame
.text:0000000000027BC0 ; __int64 __fastcall gui::GlyphAtlas::GlyphAtlas(gui::GlyphAtlas *__hidden this)
.text:0000000000027BC0                 EXPORT _ZN3gui10GlyphAtlasC2Ev
.text:0000000000027BC0 _ZN3gui10GlyphAtlasC2Ev                 ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+C↓j
.text:0000000000027BC0                                         ; DATA XREF: LOAD:00000000000015A8↑o ...
.text:0000000000027BC0 var_1E8         = -0x1E8
.text:0000000000027BC0 var_1E0         = -0x1E0
.text:0000000000027BC0 var_1D8         = -0x1D8
.text:0000000000027BC0 var_1D0         = -0x1D0
.text:0000000000027BC0 var_1C8         = -0x1C8
.text:0000000000027BC0 var_1C0         = -0x1C0
.text:0000000000027BC0 var_1B0         = -0x1B0
.text:0000000000027BC0 var_1A4         = -0x1A4
.text:0000000000027BC0 var_1A0         = -0x1A0
.text:0000000000027BC0 var_188         = -0x188
.text:0000000000027BC0 var_180         = -0x180
.text:0000000000027BC0 var_178         = -0x178
.text:0000000000027BC0 var_16C         = -0x16C
.text:0000000000027BC0 var_168         = -0x168
.text:0000000000027BC0 var_164         = -0x164
.text:0000000000027BC0 var_160         = -0x160
.text:0000000000027BC0 var_150         = -0x150
.text:0000000000027BC0 var_140         = -0x140
.text:0000000000027BC0 var_130         = -0x130
.text:0000000000027BC0 var_128         = -0x128
.text:0000000000027BC0 var_120         = -0x120
.text:0000000000027BC0 var_100         = -0x100
.text:0000000000027BC0 var_E0          = -0xE0
.text:0000000000027BC0 var_CC          = -0xCC
.text:0000000000027BC0 var_B8          = -0xB8
.text:0000000000027BC0 var_B0          = -0xB0
.text:0000000000027BC0 var_A0          = -0xA0
.text:0000000000027BC0 var_90          = -0x90
.text:0000000000027BC0 var_80          = -0x80
.text:0000000000027BC0 var_70          = -0x70
.text:0000000000027BC0 var_60          = -0x60
.text:0000000000027BC0 var_50          = -0x50
.text:0000000000027BC0 var_40          = -0x40
.text:0000000000027BC0 var_30          = -0x30
.text:0000000000027BC0 var_20          = -0x20
.text:0000000000027BC0 var_10          = -0x10
.text:0000000000027BC0 var_s0          =  0
.text:0000000000027BC0 ; __unwind {
.text:0000000000027BC0                 STP             D15, D14, [SP,#-0x10+var_90]! ; Alternative name is 'gui::GlyphAtlas::GlyphAtlas(void)'
.text:0000000000027BC4                 STP             D13, D12, [SP,#0x90+var_80]
.text:0000000000027BC8                 STP             D11, D10, [SP,#0x90+var_70]
.text:0000000000027BCC                 STP             D9, D8, [SP,#0x90+var_60]
.text:0000000000027BD0                 STP             X28, X27, [SP,#0x90+var_50]
.text:0000000000027BD4                 STP             X26, X25, [SP,#0x90+var_40]
.text:0000000000027BD8                 STP             X24, X23, [SP,#0x90+var_30]
.text:0000000000027BDC                 STP             X22, X21, [SP,#0x90+var_20]
.text:0000000000027BE0                 STP             X20, X19, [SP,#0x90+var_10]
.text:0000000000027BE4                 STP             X29, X30, [SP,#0x90+var_s0]
.text:0000000000027BE8                 ADD             X29, SP, #0x90
.text:0000000000027BEC                 SUB             SP, SP, #0x160
.text:0000000000027BF0                 ADRP            X8, #off_30950@PAGE ; "H"
.text:0000000000027BF4                 MRS             X9, #3, c13, c0, #2
.text:0000000000027BF8                 MOV             X20, X0
.text:0000000000027BFC                 LDR             X8, [X8,#off_30950@PAGEOFF] ; "H"
.text:0000000000027C00                 STR             X9, [SP,#0x1F0+var_1E8]
.text:0000000000027C04                 LDR             X9, [X9,#0x28]
.text:0000000000027C08                 LDP             W11, W10, [X8]
.text:0000000000027C0C                 ADD             X25, X8, #0x14
.text:0000000000027C10                 STUR            X9, [X29,#var_A0]
.text:0000000000027C14                 STR             XZR, [X20,#8]!
.text:0000000000027C18                 STR             X20, [X0]
.text:0000000000027C1C                 LDR             W9, [X8,#(dword_8C90 - 0x8C88)]
.text:0000000000027C20                 STP             XZR, XZR, [X0,#0x10]
.text:0000000000027C24                 STP             W10, W9, [X0,#0x20]
.text:0000000000027C28                 STR             X0, [SP,#0x1F0+var_1E0]
.text:0000000000027C2C                 STR             W11, [SP,#0x1F0+var_164]
.text:0000000000027C30                 CBZ             W11, loc_27F74
.text:0000000000027C34                 UCVTF           S0, W10
.text:0000000000027C38                 MOV             W27, WZR
.text:0000000000027C3C                 FMOV            S1, #1.0
.text:0000000000027C40                 MOV             W19, #0x3F800000
.text:0000000000027C44                 FMOV            S11, WZR
.text:0000000000027C48                 FDIV            S0, S1, S0
.text:0000000000027C4C                 STR             S0, [SP,#0x1F0+var_168]
.text:0000000000027C50                 UCVTF           S0, W9
.text:0000000000027C54                 FDIV            S0, S1, S0
.text:0000000000027C58                 STR             S0, [SP,#0x1F0+var_16C]
.text:0000000000027C5C                 LDR             S0, [X8,#(dword_8C94 - 0x8C88)]
.text:0000000000027C60                 SUB             X8, X29, #-var_E0
.text:0000000000027C64                 ORR             X9, X8, #4
.text:0000000000027C68                 ADD             X8, X8, #0x18
.text:0000000000027C6C                 UCVTF           S0, S0
.text:0000000000027C70                 STP             X8, X9, [SP,#0x1F0+var_180]
.text:0000000000027C74                 ADRP            X8, #xmmword_7BB0@PAGE
.text:0000000000027C78                 ADD             X9, SP, #0x1F0+var_160
.text:0000000000027C7C                 ORR             X10, X9, #4
.text:0000000000027C80                 ADD             X26, X9, #0x18
.text:0000000000027C84                 ADRP            X9, #qword_7948@PAGE
.text:0000000000027C88                 FDIV            S0, S1, S0
.text:0000000000027C8C                 STR             X10, [SP,#0x1F0+var_188]
.text:0000000000027C90                 ADRP            X10, #qword_7970@PAGE
.text:0000000000027C94                 STR             S0, [SP,#0x1F0+var_1A4]
.text:0000000000027C98                 LDR             Q0, [X8,#xmmword_7BB0@PAGEOFF]
.text:0000000000027C9C                 ADRP            X8, #xmmword_79A0@PAGE
.text:0000000000027CA0                 STR             Q0, [SP,#0x1F0+var_1A0]
.text:0000000000027CA4                 FMOV            V0.2S, #-1.0
.text:0000000000027CA8                 STR             D0, [SP,#0x1F0+var_1B0]
.text:0000000000027CAC                 LDR             Q0, [X8,#xmmword_79A0@PAGEOFF]
.text:0000000000027CB0                 STR             Q0, [SP,#0x1F0+var_1C0]
.text:0000000000027CB4                 FMOV            V0.2S, #1.0
.text:0000000000027CB8                 STR             D0, [SP,#0x1F0+var_1C8]
.text:0000000000027CBC                 LDR             D0, [X9,#qword_7948@PAGEOFF]
.text:0000000000027CC0                 STR             D0, [SP,#0x1F0+var_1D0]
.text:0000000000027CC4                 LDR             D0, [X10,#qword_7970@PAGEOFF]
.text:0000000000027CC8                 STR             D0, [SP,#0x1F0+var_1D8]
.text:0000000000027CCC loc_27CCC                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+3B0↓j
.text:0000000000027CCC                 LDP             S0, S1, [X25,#0xC]
.text:0000000000027CD0                 LDR             S19, [SP,#0x1F0+var_1A4]
.text:0000000000027CD4                 ADD             X0, SP, #0x1F0+var_160
.text:0000000000027CD8                 LDR             X8, [SP,#0x1F0+var_178]
.text:0000000000027CDC                 SUB             X1, X29, #-var_E0
.text:0000000000027CE0                 UCVTF           S0, S0
.text:0000000000027CE4                 STUR            W19, [X29,#var_CC]
.text:0000000000027CE8                 UCVTF           S1, S1
.text:0000000000027CEC                 STUR            W19, [X29,#var_E0]
.text:0000000000027CF0                 LDR             Q17, [SP,#0x1F0+var_1A0]
.text:0000000000027CF4                 STP             XZR, XZR, [X8]
.text:0000000000027CF8                 LDR             X8, [SP,#0x1F0+var_180]
.text:0000000000027CFC                 LDP             S2, S3, [X25,#4]
.text:0000000000027D00                 FMUL            S7, S19, S0
.text:0000000000027D04                 FMUL            S16, S19, S1
.text:0000000000027D08                 LDR             Q18, [SP,#0x1F0+var_1C0]
.text:0000000000027D0C                 STP             XZR, XZR, [X8]
.text:0000000000027D10                 STUR            Q17, [X29,#var_B0]
.text:0000000000027D14                 UCVTF           S2, S2
.text:0000000000027D18                 LDP             S4, S5, [X25,#0x14]
.text:0000000000027D1C                 LDR             S6, [X25,#0x1C]
.text:0000000000027D20                 FMUL            S17, S7, S11
.text:0000000000027D24                 FMUL            S20, S16, S11
.text:0000000000027D28                 FMOV            W8, S7
.text:0000000000027D2C                 STR             Q18, [SP,#0x1F0+var_140]
.text:0000000000027D30                 FMOV            W10, S16
.text:0000000000027D34                 LDR             S18, [SP,#0x1F0+var_168]
.text:0000000000027D38                 UCVTF           S3, S3
.text:0000000000027D3C                 UCVTF           S4, S4
.text:0000000000027D40                 LDR             W28, [X25]
.text:0000000000027D44                 UCVTF           S5, S5
.text:0000000000027D48                 STUR            X19, [X29,#var_B8]
.text:0000000000027D4C                 FMOV            W9, S17
.text:0000000000027D50                 STR             XZR, [SP,#0x1F0+var_130]
.text:0000000000027D54                 FMOV            W11, S20
.text:0000000000027D58                 FMUL            S14, S18, S2
.text:0000000000027D5C                 UCVTF           S6, S6
.text:0000000000027D60                 LDR             S2, [SP,#0x1F0+var_16C]
.text:0000000000027D64                 FMUL            S13, S18, S0
.text:0000000000027D68                 FMUL            S10, S19, S4
.text:0000000000027D6C                 FMUL            S12, S19, S5
.text:0000000000027D70                 BFI             X8, X9, #0x20, #0x20 ; ' '
.text:0000000000027D74                 FMUL            S15, S2, S3
.text:0000000000027D78                 BFI             X9, X9, #0x20, #0x20 ; ' '
.text:0000000000027D7C                 FMUL            S8, S2, S1
.text:0000000000027D80                 MOV             X12, X11
.text:0000000000027D84                 FMUL            S9, S19, S6
.text:0000000000027D88                 STP             X8, X9, [SP,#0x1F0+var_160]
.text:0000000000027D8C                 MOV             X8, #0x3F80000000000000
.text:0000000000027D90                 BFI             X11, X11, #0x20, #0x20 ; ' '
.text:0000000000027D94                 BFI             X12, X10, #0x20, #0x20 ; ' '
.text:0000000000027D98                 STR             X8, [SP,#0x1F0+var_128]
.text:0000000000027D9C                 ADD             X8, SP, #0x1F0+var_120
.text:0000000000027DA0                 STP             X12, X11, [SP,#0x1F0+var_150]
.text:0000000000027DA4                 BL              sub_26A98
.text:0000000000027DA8                 FADD            S0, S10, S10
.text:0000000000027DAC                 LDR             X8, [SP,#0x1F0+var_188]
.text:0000000000027DB0                 FADD            S1, S12, S12
.text:0000000000027DB4                 STR             W19, [SP,#0x1F0+var_150+4]
.text:0000000000027DB8                 FMOV            S2, #-1.0
.text:0000000000027DBC                 STR             W19, [SP,#0x1F0+var_160]
.text:0000000000027DC0                 LDP             Q6, Q5, [SP,#0x1F0+var_120]
.text:0000000000027DC4                 ADD             X0, SP, #0x1F0+var_160
.text:0000000000027DC8                 STP             XZR, XZR, [X8]
.text:0000000000027DCC                 SUB             X1, X29, #-var_E0
.text:0000000000027DD0                 STP             XZR, XZR, [X26]
.text:0000000000027DD4                 STP             Q6, Q5, [X29,#var_E0]
.text:0000000000027DD8                 FADD            S0, S0, S2
.text:0000000000027DDC                 FADD            S1, S1, S2
.text:0000000000027DE0                 FMUL            S2, S0, S11
.text:0000000000027DE4                 FMUL            S3, S1, S11
.text:0000000000027DE8                 FADD            S1, S2, S1
.text:0000000000027DEC                 FADD            S4, S2, S3
.text:0000000000027DF0                 FADD            S0, S0, S3
.text:0000000000027DF4                 FADD            S1, S1, S11
.text:0000000000027DF8                 FADD            S3, S4, S11
.text:0000000000027DFC                 LDP             Q4, Q2, [SP,#0x1F0+var_100]
.text:0000000000027E00                 FADD            S0, S0, S11
.text:0000000000027E04                 STP             Q4, Q2, [X29,#-0xC0]
.text:0000000000027E08                 FMOV            S2, #1.0
.text:0000000000027E0C                 FMOV            W10, S1
.text:0000000000027E10                 FMOV            W11, S3
.text:0000000000027E14                 FMOV            W8, S0
.text:0000000000027E18                 FADD            S2, S3, S2
.text:0000000000027E1C                 BFI             X8, X10, #0x20, #0x20 ; ' '
.text:0000000000027E20                 STP             X19, X8, [SP,#0x1F0+var_140+8]
.text:0000000000027E24                 ADD             X8, SP, #0x1F0+var_120
.text:0000000000027E28                 FMOV            W9, S2
.text:0000000000027E2C                 BFI             X11, X9, #0x20, #0x20 ; ' '
.text:0000000000027E30                 STR             X11, [SP,#0x1F0+var_128]
.text:0000000000027E34                 BL              sub_26A98
.text:0000000000027E38                 LDP             Q2, Q0, [SP,#0x1F0+var_100]
.text:0000000000027E3C                 LDP             Q3, Q1, [SP,#0x1F0+var_120]
.text:0000000000027E40                 MOV             W0, #0x84 ; unsigned __int64
.text:0000000000027E44                 STP             Q2, Q0, [X29,#-0xC0]
.text:0000000000027E48                 STP             Q3, Q1, [X29,#var_E0]
.text:0000000000027E4C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000027E50                 LDP             Q1, Q0, [X29,#-0xC0]
.text:0000000000027E54                 FADD            S2, S9, S9
.text:0000000000027E58                 MOV             X21, X0
.text:0000000000027E5C                 LDP             Q4, Q3, [X29,#var_E0]
.text:0000000000027E60                 STP             S14, S15, [X0,#0x4C]
.text:0000000000027E64                 STP             Q1, Q0, [X0,#0x20]
.text:0000000000027E68                 FADD            S0, S14, S13
.text:0000000000027E6C                 LDR             D1, [SP,#0x1F0+var_1B0]
.text:0000000000027E70                 STR             S2, [X0,#0x40]
.text:0000000000027E74                 STP             Q4, Q3, [X0]
.text:0000000000027E78                 STUR            D1, [X0,#0x44]
.text:0000000000027E7C                 LDP             D2, D1, [SP,#0x1F0+var_1D8]
.text:0000000000027E80                 STP             S0, S15, [X0,#0x5C]
.text:0000000000027E84                 STUR            D1, [X0,#0x54]
.text:0000000000027E88                 FADD            S1, S15, S8
.text:0000000000027E8C                 STUR            D2, [X0,#0x64]
.text:0000000000027E90                 LDR             X23, [X20]
.text:0000000000027E94                 LDR             D2, [SP,#0x1F0+var_1C8]
.text:0000000000027E98                 STP             S14, S1, [X0,#0x6C]
.text:0000000000027E9C                 STUR            D2, [X0,#0x74]
.text:0000000000027EA0                 STP             S0, S1, [X0,#0x7C]
.text:0000000000027EA4                 CBZ             X23, loc_27EE8
.text:0000000000027EA8                 MOV             X24, X20
.text:0000000000027EAC                 B               loc_27EB8
.text:0000000000027EB0 ; ---------------------------------------------------------------------------
.text:0000000000027EB0 loc_27EB0                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+308↓j
.text:0000000000027EB0                 MOV             X24, X23
.text:0000000000027EB4                 MOV             X23, X8
.text:0000000000027EB8 loc_27EB8                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+2EC↑j
.text:0000000000027EB8                                         ; gui::GlyphAtlas::GlyphAtlas(void)+324↓j
.text:0000000000027EB8                 LDRB            W8, [X23,#0x20]
.text:0000000000027EBC                 CMP             W8, W28,UXTB
.text:0000000000027EC0                 B.LS            loc_27ED0
.text:0000000000027EC4                 LDR             X8, [X23]
.text:0000000000027EC8                 CBNZ            X8, loc_27EB0
.text:0000000000027ECC                 B               loc_27F34
.text:0000000000027ED0 ; ---------------------------------------------------------------------------
.text:0000000000027ED0 loc_27ED0                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+300↑j
.text:0000000000027ED0                 B.CS            loc_27EF0
.text:0000000000027ED4                 MOV             X24, X23
.text:0000000000027ED8                 LDR             X8, [X24,#8]!
.text:0000000000027EDC                 CBZ             X8, loc_27EF0
.text:0000000000027EE0                 MOV             X23, X8
.text:0000000000027EE4                 B               loc_27EB8
.text:0000000000027EE8 ; ---------------------------------------------------------------------------
.text:0000000000027EE8 loc_27EE8                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+2E4↑j
.text:0000000000027EE8                 MOV             X23, X20
.text:0000000000027EEC                 MOV             X24, X20
.text:0000000000027EF0 loc_27EF0                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void):loc_27ED0↑j
.text:0000000000027EF0                                         ; gui::GlyphAtlas::GlyphAtlas(void)+31C↑j
.text:0000000000027EF0                 LDR             X22, [X24]
.text:0000000000027EF4                 CBNZ            X22, loc_27F5C
.text:0000000000027EF8 loc_27EF8                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+380↓j
.text:0000000000027EF8                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:0000000000027EFC                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000027F00                 STR             X23, [X0,#0x10]
.text:0000000000027F04                 MOV             X22, X0
.text:0000000000027F08                 LDR             X23, [SP,#0x1F0+var_1E0]
.text:0000000000027F0C                 STRB            W28, [X0,#0x20]
.text:0000000000027F10                 STR             XZR, [X0,#0x28]
.text:0000000000027F14                 STP             XZR, XZR, [X0]
.text:0000000000027F18                 STR             X0, [X24]
.text:0000000000027F1C                 LDR             X8, [X23]
.text:0000000000027F20                 LDR             X8, [X8]
.text:0000000000027F24                 CBZ             X8, loc_27F44
.text:0000000000027F28                 STR             X8, [X23]
.text:0000000000027F2C                 LDR             X1, [X24]
.text:0000000000027F30                 B               loc_27F48
.text:0000000000027F34 ; ---------------------------------------------------------------------------
.text:0000000000027F34 loc_27F34                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+30C↑j
.text:0000000000027F34                 MOV             X24, X23
.text:0000000000027F38                 LDR             X22, [X24]
.text:0000000000027F3C                 CBNZ            X22, loc_27F5C
.text:0000000000027F40                 B               loc_27EF8
.text:0000000000027F44 ; ---------------------------------------------------------------------------
.text:0000000000027F44 loc_27F44                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+364↑j
.text:0000000000027F44                 MOV             X1, X22
.text:0000000000027F48 loc_27F48                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+370↑j
.text:0000000000027F48                 LDR             X0, [X23,#8]
.text:0000000000027F4C                 BL              sub_280A0
.text:0000000000027F50                 LDR             X8, [X23,#0x10]
.text:0000000000027F54                 ADD             X8, X8, #1
.text:0000000000027F58                 STR             X8, [X23,#0x10]
.text:0000000000027F5C loc_27F5C                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+334↑j
.text:0000000000027F5C                                         ; gui::GlyphAtlas::GlyphAtlas(void)+37C↑j
.text:0000000000027F5C                 LDR             W8, [SP,#0x1F0+var_164]
.text:0000000000027F60                 ADD             W27, W27, #1
.text:0000000000027F64                 ADD             X25, X25, #0x20 ; ' '
.text:0000000000027F68                 STR             X21, [X22,#0x28]
.text:0000000000027F6C                 CMP             W27, W8
.text:0000000000027F70                 B.NE            loc_27CCC
.text:0000000000027F74 loc_27F74                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+70↑j
.text:0000000000027F74                 LDR             X8, [SP,#0x1F0+var_1E0]
.text:0000000000027F78                 STR             X25, [X8,#0x18]
.text:0000000000027F7C                 LDR             X8, [SP,#0x1F0+var_1E8]
.text:0000000000027F80                 LDR             X8, [X8,#0x28]
.text:0000000000027F84                 LDUR            X9, [X29,#var_A0]
.text:0000000000027F88                 CMP             X8, X9
.text:0000000000027F8C                 B.NE            loc_27FC0
.text:0000000000027F90                 ADD             SP, SP, #0x160
.text:0000000000027F94                 LDP             X29, X30, [SP,#0x90+var_s0]
.text:0000000000027F98                 LDP             X20, X19, [SP,#0x90+var_10]
.text:0000000000027F9C                 LDP             X22, X21, [SP,#0x90+var_20]
.text:0000000000027FA0                 LDP             X24, X23, [SP,#0x90+var_30]
.text:0000000000027FA4                 LDP             X26, X25, [SP,#0x90+var_40]
.text:0000000000027FA8                 LDP             X28, X27, [SP,#0x90+var_50]
.text:0000000000027FAC                 LDP             D9, D8, [SP,#0x90+var_60]
.text:0000000000027FB0                 LDP             D11, D10, [SP,#0x90+var_70]
.text:0000000000027FB4                 LDP             D13, D12, [SP,#0x90+var_80]
.text:0000000000027FB8                 LDP             D15, D14, [SP+0x90+var_90],#0xA0
.text:0000000000027FBC                 RET
.text:0000000000027FC0 ; ---------------------------------------------------------------------------
.text:0000000000027FC0 loc_27FC0                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+3CC↑j
.text:0000000000027FC0                 BL              .__stack_chk_fail
.text:0000000000027FC0 ; } // starts at 27BC0
.text:0000000000027FC0 ; End of function gui::GlyphAtlas::GlyphAtlas(void)
.text:0000000000027FC0 ; ---------------------------------------------------------------------------
.text:0000000000027FC4                 ALIGN 8
.text:0000000000027FC8 ; =============== S U B R O U T I N E =======================================
.text:0000000000027FC8 ; Attributes: bp-based frame
.text:0000000000027FC8 ; void __fastcall gui::GlyphAtlas::~GlyphAtlas(gui::GlyphAtlas *__hidden this)
.text:0000000000027FC8                 EXPORT _ZN3gui10GlyphAtlasD2Ev
.text:0000000000027FC8 _ZN3gui10GlyphAtlasD2Ev                 ; DATA XREF: LOAD:0000000000000DC8↑o
.text:0000000000027FC8                                         ; LOAD:0000000000001788↑o ...
.text:0000000000027FC8 var_20          = -0x20
.text:0000000000027FC8 var_10          = -0x10
.text:0000000000027FC8 var_s0          =  0
.text:0000000000027FC8 ; __unwind {
.text:0000000000027FC8                 STR             X21, [SP,#-0x10+var_20]! ; Alternative name is 'gui::GlyphAtlas::~GlyphAtlas()'
.text:0000000000027FCC                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000027FD0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000027FD4                 ADD             X29, SP, #0x20
.text:0000000000027FD8                 MOV             X20, X0
.text:0000000000027FDC                 MOV             X19, X0
.text:0000000000027FE0                 LDR             X21, [X20],#8
.text:0000000000027FE4                 B               loc_27FEC
.text:0000000000027FE8 ; ---------------------------------------------------------------------------
.text:0000000000027FE8 loc_27FE8                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+60↓j
.text:0000000000027FE8                 MOV             X21, X9
.text:0000000000027FEC loc_27FEC                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+1C↑j
.text:0000000000027FEC                                         ; gui::GlyphAtlas::~GlyphAtlas()+4C↓j ...
.text:0000000000027FEC                 CMP             X21, X20
.text:0000000000027FF0                 B.EQ            loc_28048
.text:0000000000027FF4                 LDR             X0, [X21,#0x28] ; void *
.text:0000000000027FF8                 CBZ             X0, loc_28000
.text:0000000000027FFC                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028000 loc_28000                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+30↑j
.text:0000000000028000                 LDR             X8, [X21,#8]
.text:0000000000028004                 CBZ             X8, loc_28018
.text:0000000000028008 loc_28008                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+48↓j
.text:0000000000028008                 MOV             X21, X8
.text:000000000002800C                 LDR             X8, [X8]
.text:0000000000028010                 CBNZ            X8, loc_28008
.text:0000000000028014                 B               loc_27FEC
.text:0000000000028018 ; ---------------------------------------------------------------------------
.text:0000000000028018 loc_28018                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+3C↑j
.text:0000000000028018                 MOV             X8, X21
.text:000000000002801C                 LDR             X9, [X8,#0x10]!
.text:0000000000028020                 LDR             X10, [X9]
.text:0000000000028024                 CMP             X10, X21
.text:0000000000028028                 B.EQ            loc_27FE8
.text:000000000002802C loc_2802C                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+78↓j
.text:000000000002802C                 LDR             X9, [X8]
.text:0000000000028030                 MOV             X8, X9
.text:0000000000028034                 LDR             X21, [X8,#0x10]!
.text:0000000000028038                 LDR             X10, [X21]
.text:000000000002803C                 CMP             X10, X9
.text:0000000000028040                 B.NE            loc_2802C
.text:0000000000028044                 B               loc_27FEC
.text:0000000000028048 ; ---------------------------------------------------------------------------
.text:0000000000028048 loc_28048                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+28↑j
.text:0000000000028048                 LDR             X1, [X19,#8]
.text:000000000002804C                 MOV             X0, X19
.text:0000000000028050                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000028054                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000028058                 LDR             X21, [SP+0x20+var_20],#0x30
.text:000000000002805C                 B               sub_28060
.text:000000000002805C ; } // starts at 27FC8
.text:000000000002805C ; End of function gui::GlyphAtlas::~GlyphAtlas()
.text:0000000000028060 ; =============== S U B R O U T I N E =======================================
.text:0000000000028060 ; Attributes: bp-based frame
.text:0000000000028060 sub_28060                               ; CODE XREF: gui::GlyphAtlas::~GlyphAtlas()+94↑j
.text:0000000000028060                                         ; sub_28060+1C↓p ...
.text:0000000000028060 var_10          = -0x10
.text:0000000000028060 var_s0          =  0
.text:0000000000028060 ; __unwind {
.text:0000000000028060                 CBZ             X1, locret_2809C
.text:0000000000028064                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:0000000000028068                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000002806C                 ADD             X29, SP, #0x10
.text:0000000000028070                 MOV             X19, X1
.text:0000000000028074                 LDR             X1, [X1]
.text:0000000000028078                 MOV             X20, X0
.text:000000000002807C                 BL              sub_28060
.text:0000000000028080                 LDR             X1, [X19,#8]
.text:0000000000028084                 MOV             X0, X20
.text:0000000000028088                 BL              sub_28060
.text:000000000002808C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000028090                 MOV             X0, X19 ; void *
.text:0000000000028094                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000028098                 B               ._ZdlPv ; operator delete(void *)
.text:000000000002809C ; ---------------------------------------------------------------------------
.text:000000000002809C locret_2809C                            ; CODE XREF: sub_28060↑j
.text:000000000002809C                 RET
.text:000000000002809C ; } // starts at 28060
.text:000000000002809C ; End of function sub_28060
.text:00000000000280A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000280A0 sub_280A0                               ; CODE XREF: gui::GlyphAtlas::GlyphAtlas(void)+38C↑p
.text:00000000000280A0 ; __unwind {
.text:00000000000280A0                 CMP             X1, X0
.text:00000000000280A4                 CSET            W8, EQ
.text:00000000000280A8                 STRB            W8, [X1,#0x18]
.text:00000000000280AC                 B.EQ            locret_2810C
.text:00000000000280B0                 MOV             W10, #1
.text:00000000000280B4 loc_280B4                               ; CODE XREF: sub_280A0+68↓j
.text:00000000000280B4                 LDR             X9, [X1,#0x10]
.text:00000000000280B8                 LDRB            W8, [X9,#0x18]
.text:00000000000280BC                 CBNZ            W8, locret_2810C
.text:00000000000280C0                 LDR             X8, [X9,#0x10]
.text:00000000000280C4                 LDR             X11, [X8]
.text:00000000000280C8                 CMP             X11, X9
.text:00000000000280CC                 B.EQ            loc_280E0
.text:00000000000280D0                 CBZ             X11, loc_28110
.text:00000000000280D4                 LDRB            W12, [X11,#0x18]!
.text:00000000000280D8                 CBZ             W12, loc_280F0
.text:00000000000280DC                 B               loc_28110
.text:00000000000280E0 ; ---------------------------------------------------------------------------
.text:00000000000280E0 loc_280E0                               ; CODE XREF: sub_280A0+2C↑j
.text:00000000000280E0                 LDR             X11, [X8,#8]
.text:00000000000280E4                 CBZ             X11, loc_28124
.text:00000000000280E8                 LDRB            W12, [X11,#0x18]!
.text:00000000000280EC                 CBNZ            W12, loc_28124
.text:00000000000280F0 loc_280F0                               ; CODE XREF: sub_280A0+38↑j
.text:00000000000280F0                 CMP             X8, X0
.text:00000000000280F4                 STRB            W10, [X9,#0x18]
.text:00000000000280F8                 CSET            W12, EQ
.text:00000000000280FC                 MOV             X1, X8
.text:0000000000028100                 STRB            W12, [X8,#0x18]
.text:0000000000028104                 STRB            W10, [X11]
.text:0000000000028108                 B.NE            loc_280B4
.text:000000000002810C locret_2810C                            ; CODE XREF: sub_280A0+C↑j
.text:000000000002810C                                         ; sub_280A0+1C↑j
.text:000000000002810C                 RET
.text:0000000000028110 ; ---------------------------------------------------------------------------
.text:0000000000028110 loc_28110                               ; CODE XREF: sub_280A0+30↑j
.text:0000000000028110                                         ; sub_280A0+3C↑j
.text:0000000000028110                 LDR             X10, [X9]
.text:0000000000028114                 CMP             X10, X1
.text:0000000000028118                 B.EQ            loc_28170
.text:000000000002811C                 MOV             X1, X9
.text:0000000000028120                 B               loc_281A8
.text:0000000000028124 ; ---------------------------------------------------------------------------
.text:0000000000028124 loc_28124                               ; CODE XREF: sub_280A0+44↑j
.text:0000000000028124                                         ; sub_280A0+4C↑j
.text:0000000000028124                 LDR             X10, [X9]
.text:0000000000028128                 CMP             X10, X1
.text:000000000002812C                 B.EQ            loc_281F0
.text:0000000000028130                 LDR             X10, [X9,#8]
.text:0000000000028134                 LDR             X11, [X10]
.text:0000000000028138                 STR             X11, [X9,#8]
.text:000000000002813C                 CBZ             X11, loc_28148
.text:0000000000028140                 STR             X9, [X11,#0x10]
.text:0000000000028144                 LDR             X8, [X9,#0x10]
.text:0000000000028148 loc_28148                               ; CODE XREF: sub_280A0+9C↑j
.text:0000000000028148                 STR             X8, [X10,#0x10]
.text:000000000002814C                 LDR             X8, [X9,#0x10]
.text:0000000000028150                 LDR             X11, [X8]
.text:0000000000028154                 CMP             X11, X9
.text:0000000000028158                 CSET            W11, NE
.text:000000000002815C                 STR             X10, [X8,W11,UXTW#3]
.text:0000000000028160                 STR             X9, [X10]
.text:0000000000028164                 STR             X10, [X9,#0x10]
.text:0000000000028168                 LDR             X8, [X10,#0x10]
.text:000000000002816C                 B               loc_281F4
.text:0000000000028170 ; ---------------------------------------------------------------------------
.text:0000000000028170 loc_28170                               ; CODE XREF: sub_280A0+78↑j
.text:0000000000028170                 LDR             X10, [X1,#8]
.text:0000000000028174                 STR             X10, [X9]
.text:0000000000028178                 CBZ             X10, loc_28184
.text:000000000002817C                 STR             X9, [X10,#0x10]
.text:0000000000028180                 LDR             X8, [X9,#0x10]
.text:0000000000028184 loc_28184                               ; CODE XREF: sub_280A0+D8↑j
.text:0000000000028184                 STR             X8, [X1,#0x10]
.text:0000000000028188                 LDR             X8, [X9,#0x10]
.text:000000000002818C                 LDR             X10, [X8]
.text:0000000000028190                 CMP             X10, X9
.text:0000000000028194                 CSET            W10, NE
.text:0000000000028198                 STR             X1, [X8,W10,UXTW#3]
.text:000000000002819C                 STR             X9, [X1,#8]
.text:00000000000281A0                 STR             X1, [X9,#0x10]
.text:00000000000281A4                 LDR             X8, [X1,#0x10]
.text:00000000000281A8 loc_281A8                               ; CODE XREF: sub_280A0+80↑j
.text:00000000000281A8                 MOV             W9, #1
.text:00000000000281AC                 STRB            W9, [X1,#0x18]
.text:00000000000281B0                 LDR             X9, [X8,#8]
.text:00000000000281B4                 STRB            WZR, [X8,#0x18]
.text:00000000000281B8                 LDR             X10, [X9]
.text:00000000000281BC                 STR             X10, [X8,#8]
.text:00000000000281C0                 CBZ             X10, loc_281C8
.text:00000000000281C4                 STR             X8, [X10,#0x10]
.text:00000000000281C8 loc_281C8                               ; CODE XREF: sub_280A0+120↑j
.text:00000000000281C8                 LDR             X10, [X8,#0x10]
.text:00000000000281CC                 STR             X10, [X9,#0x10]
.text:00000000000281D0                 LDR             X10, [X8,#0x10]
.text:00000000000281D4                 LDR             X11, [X10]
.text:00000000000281D8                 CMP             X11, X8
.text:00000000000281DC                 CSET            W11, NE
.text:00000000000281E0                 STR             X9, [X10,W11,UXTW#3]
.text:00000000000281E4                 STR             X8, [X9]
.text:00000000000281E8                 STR             X9, [X8,#0x10]
.text:00000000000281EC                 RET
.text:00000000000281F0 ; ---------------------------------------------------------------------------
.text:00000000000281F0 loc_281F0                               ; CODE XREF: sub_280A0+8C↑j
.text:00000000000281F0                 MOV             X10, X9
.text:00000000000281F4 loc_281F4                               ; CODE XREF: sub_280A0+CC↑j
.text:00000000000281F4                 MOV             W9, #1
.text:00000000000281F8                 STRB            W9, [X10,#0x18]
.text:00000000000281FC                 LDR             X9, [X8]
.text:0000000000028200                 STRB            WZR, [X8,#0x18]
.text:0000000000028204                 LDR             X10, [X9,#8]
.text:0000000000028208                 STR             X10, [X8]
.text:000000000002820C                 CBZ             X10, loc_28214
.text:0000000000028210                 STR             X8, [X10,#0x10]
.text:0000000000028214 loc_28214                               ; CODE XREF: sub_280A0+16C↑j
.text:0000000000028214                 LDR             X10, [X8,#0x10]
.text:0000000000028218                 STR             X10, [X9,#0x10]
.text:000000000002821C                 LDR             X10, [X8,#0x10]
.text:0000000000028220                 LDR             X11, [X10]
.text:0000000000028224                 CMP             X11, X8
.text:0000000000028228                 CSET            W11, NE
.text:000000000002822C                 STR             X9, [X10,W11,UXTW#3]
.text:0000000000028230                 STR             X8, [X9,#8]
.text:0000000000028234                 STR             X9, [X8,#0x10]
.text:0000000000028238                 RET
.text:0000000000028238 ; } // starts at 280A0
.text:0000000000028238 ; End of function sub_280A0
.text:0000000000028238 ; ---------------------------------------------------------------------------
.text:000000000002823C                 ALIGN 0x20
.text:0000000000028240 ; =============== S U B R O U T I N E =======================================
.text:0000000000028240 ; Attributes: bp-based frame
.text:0000000000028240 sub_28240                               ; DATA XREF: .init_array:00000000000305F0↓o
.text:0000000000028240 var_58          = -0x58
.text:0000000000028240 var_48          = -0x48
.text:0000000000028240 var_40          = -0x40
.text:0000000000028240 var_30          = -0x30
.text:0000000000028240 var_20          = -0x20
.text:0000000000028240 var_10          = -0x10
.text:0000000000028240 var_s0          =  0
.text:0000000000028240 ; __unwind {
.text:0000000000028240                 SUB             SP, SP, #0x70
.text:0000000000028244                 STR             X25, [SP,#0x60+var_40]
.text:0000000000028248                 STP             X24, X23, [SP,#0x60+var_30]
.text:000000000002824C                 STP             X22, X21, [SP,#0x60+var_20]
.text:0000000000028250                 STP             X20, X19, [SP,#0x60+var_10]
.text:0000000000028254                 STP             X29, X30, [SP,#0x60+var_s0]
.text:0000000000028258                 ADD             X29, SP, #0x60
.text:000000000002825C                 MRS             X24, #3, c13, c0, #2
.text:0000000000028260                 LDR             X8, [X24,#0x28]
.text:0000000000028264                 STR             X8, [SP,#0x60+var_48]
.text:0000000000028268                 ADRP            X8, #unk_31008@PAGE
.text:000000000002826C                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000028270                 LDARB           W8, [X8]
.text:0000000000028274                 TBNZ            W8, #0, loc_282B4
.text:0000000000028278                 ADRP            X0, #unk_31008@PAGE
.text:000000000002827C                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000028280                 BL              .__cxa_guard_acquire
.text:0000000000028284                 CBZ             W0, loc_282B4
.text:0000000000028288                 ADRP            X1, #qword_31000@PAGE
.text:000000000002828C                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000028290                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:0000000000028294                 ADRP            X2, #off_2F000@PAGE
.text:0000000000028298                 STR             XZR, [X1]
.text:000000000002829C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000282A0                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:00000000000282A4                 BL              .__cxa_atexit
.text:00000000000282A8                 ADRP            X0, #unk_31008@PAGE
.text:00000000000282AC                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:00000000000282B0                 BL              .__cxa_guard_release
.text:00000000000282B4 loc_282B4                               ; CODE XREF: sub_28240+34↑j
.text:00000000000282B4                                         ; sub_28240+44↑j
.text:00000000000282B4                 ADRP            X8, #unk_31038@PAGE
.text:00000000000282B8                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:00000000000282BC                 LDARB           W8, [X8]
.text:00000000000282C0                 TBNZ            W8, #0, loc_282FC
.text:00000000000282C4                 ADRP            X0, #unk_31038@PAGE
.text:00000000000282C8                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000282CC                 BL              .__cxa_guard_acquire
.text:00000000000282D0                 CBZ             W0, loc_282FC
.text:00000000000282D4                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:00000000000282D8                 ADRP            X1, #unk_31010@PAGE
.text:00000000000282DC                 ADRP            X2, #off_2F000@PAGE
.text:00000000000282E0                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:00000000000282E4                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:00000000000282E8                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:00000000000282EC                 BL              .__cxa_atexit
.text:00000000000282F0                 ADRP            X0, #unk_31038@PAGE
.text:00000000000282F4                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:00000000000282F8                 BL              .__cxa_guard_release
.text:00000000000282FC loc_282FC                               ; CODE XREF: sub_28240+80↑j
.text:00000000000282FC                                         ; sub_28240+90↑j
.text:00000000000282FC                 ADRP            X8, #unk_31058@PAGE
.text:0000000000028300                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:0000000000028304                 LDARB           W8, [X8]
.text:0000000000028308                 TBNZ            W8, #0, loc_2834C
.text:000000000002830C                 ADRP            X0, #unk_31058@PAGE
.text:0000000000028310                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000028314                 BL              .__cxa_guard_acquire
.text:0000000000028318                 CBZ             W0, loc_2834C
.text:000000000002831C                 ADRP            X1, #unk_31040@PAGE
.text:0000000000028320                 ADRP            X0, #loc_1C078@PAGE
.text:0000000000028324                 ADRP            X2, #off_2F000@PAGE
.text:0000000000028328                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:000000000002832C                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000028330                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000028334                 STP             XZR, XZR, [X1]
.text:0000000000028338                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:000000000002833C                 BL              .__cxa_atexit
.text:0000000000028340                 ADRP            X0, #unk_31058@PAGE
.text:0000000000028344                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000028348                 BL              .__cxa_guard_release
.text:000000000002834C loc_2834C                               ; CODE XREF: sub_28240+C8↑j
.text:000000000002834C                                         ; sub_28240+D8↑j
.text:000000000002834C                 ADRP            X8, #unk_31078@PAGE
.text:0000000000028350                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:0000000000028354                 LDARB           W8, [X8]
.text:0000000000028358                 TBNZ            W8, #0, loc_2839C
.text:000000000002835C                 ADRP            X0, #unk_31078@PAGE
.text:0000000000028360                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000028364                 BL              .__cxa_guard_acquire
.text:0000000000028368                 CBZ             W0, loc_2839C
.text:000000000002836C                 ADRP            X1, #unk_31060@PAGE
.text:0000000000028370                 ADRP            X0, #loc_1C100@PAGE
.text:0000000000028374                 ADRP            X2, #off_2F000@PAGE
.text:0000000000028378                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:000000000002837C                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000028380                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000028384                 STP             XZR, XZR, [X1]
.text:0000000000028388                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:000000000002838C                 BL              .__cxa_atexit
.text:0000000000028390                 ADRP            X0, #unk_31078@PAGE
.text:0000000000028394                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000028398                 BL              .__cxa_guard_release
.text:000000000002839C loc_2839C                               ; CODE XREF: sub_28240+118↑j
.text:000000000002839C                                         ; sub_28240+128↑j
.text:000000000002839C                 MOV             W0, #0xC0 ; unsigned __int64
.text:00000000000283A0                 STP             XZR, XZR, [SP,#0x60+var_58]
.text:00000000000283A4                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000283A8                 ADRP            X8, #xmmword_7B70@PAGE
.text:00000000000283AC                 FMOV            V0.4S, #1.0
.text:00000000000283B0                 ADRP            X9, #xmmword_7A90@PAGE
.text:00000000000283B4                 ADRP            X10, #xmmword_7AB0@PAGE
.text:00000000000283B8                 LDR             Q1, [X8,#xmmword_7B70@PAGEOFF]
.text:00000000000283BC                 ADRP            X8, #xmmword_7BA0@PAGE
.text:00000000000283C0                 LDR             Q2, [X9,#xmmword_7A90@PAGEOFF]
.text:00000000000283C4                 ADRP            X1, #_ZN3gui6gColorE_ptr@PAGE
.text:00000000000283C8                 LDR             Q3, [X10,#xmmword_7AB0@PAGEOFF]
.text:00000000000283CC                 ADRP            X9, #xmmword_7AD0@PAGE
.text:00000000000283D0                 LDR             Q4, [X8,#xmmword_7BA0@PAGEOFF]
.text:00000000000283D4                 ADRP            X8, #xmmword_7A50@PAGE
.text:00000000000283D8                 LDR             X1, [X1,#_ZN3gui6gColorE_ptr@PAGEOFF] ; obj
.text:00000000000283DC                 ADRP            X19, #off_2F000@PAGE
.text:00000000000283E0                 STP             Q1, Q2, [X0]
.text:00000000000283E4                 ADD             X19, X19, #off_2F000@PAGEOFF
.text:00000000000283E8                 LDR             Q2, [X8,#xmmword_7A50@PAGEOFF]
.text:00000000000283EC                 ADRP            X8, #xmmword_7A00@PAGE
.text:00000000000283F0                 LDR             Q1, [X9,#xmmword_7AD0@PAGEOFF]
.text:00000000000283F4                 ADRP            X9, #xmmword_7BC0@PAGE
.text:00000000000283F8                 STP             Q3, Q4, [X0,#0x20]
.text:00000000000283FC                 MOV             X2, X19 ; lpdso_handle
.text:0000000000028400                 LDR             Q3, [X8,#xmmword_7A00@PAGEOFF]
.text:0000000000028404                 ADRP            X8, #xmmword_7AC0@PAGE
.text:0000000000028408                 LDR             Q4, [X9,#xmmword_7BC0@PAGEOFF]
.text:000000000002840C                 STP             Q1, Q2, [X0,#0x40]
.text:0000000000028410                 LDR             Q1, [X8,#xmmword_7AC0@PAGEOFF]
.text:0000000000028414                 ADRP            X8, #xmmword_7BB0@PAGE
.text:0000000000028418                 STR             X0, [X1] ; gui::gColor
.text:000000000002841C                 STP             Q3, Q4, [X0,#0x60]
.text:0000000000028420                 LDR             Q2, [X8,#xmmword_7BB0@PAGEOFF]
.text:0000000000028424                 ADD             X8, X0, #0xC0
.text:0000000000028428                 LDUR            Q3, [SP,#0x60+var_58]
.text:000000000002842C                 STP             Q1, Q0, [X0,#0x80]
.text:0000000000028430                 STP             X8, X8, [X1,#8]
.text:0000000000028434                 STP             Q2, Q3, [X0,#0xA0]
.text:0000000000028438                 ADRP            X0, #loc_1C100@PAGE
.text:000000000002843C                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000028440                 BL              .__cxa_atexit
.text:0000000000028444                 MOV             W20, #0x2F0
.text:0000000000028448                 MOV             X0, X20 ; unsigned __int64
.text:000000000002844C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000028450                 ADRP            X21, #qword_31168@PAGE
.text:0000000000028454                 ADRP            X1, #unk_867C@PAGE
.text:0000000000028458                 ADD             X22, X0, #0x2F0
.text:000000000002845C                 ADD             X21, X21, #qword_31168@PAGEOFF
.text:0000000000028460                 ADD             X1, X1, #unk_867C@PAGEOFF ; src
.text:0000000000028464                 MOV             X2, X20 ; n
.text:0000000000028468                 STR             X0, [X21]
.text:000000000002846C                 STR             X22, [X21,#(qword_31178 - 0x31168)]
.text:0000000000028470                 BL              .memcpy
.text:0000000000028474                 STR             X22, [X21,#(qword_31170 - 0x31168)]
.text:0000000000028478                 ADRP            X22, #loc_1C100@PAGE
.text:000000000002847C                 ADD             X22, X22, #loc_1C100@PAGEOFF
.text:0000000000028480                 MOV             X0, X22 ; lpfunc
.text:0000000000028484                 MOV             X1, X21 ; obj
.text:0000000000028488                 MOV             X2, X19 ; lpdso_handle
.text:000000000002848C                 BL              .__cxa_atexit
.text:0000000000028490                 MOV             X0, X20 ; unsigned __int64
.text:0000000000028494                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000028498                 ADRP            X23, #qword_31180@PAGE
.text:000000000002849C                 ADRP            X1, #unk_896C@PAGE
.text:00000000000284A0                 ADD             X25, X0, #0x2F0
.text:00000000000284A4                 ADD             X23, X23, #qword_31180@PAGEOFF
.text:00000000000284A8                 ADD             X1, X1, #unk_896C@PAGEOFF ; src
.text:00000000000284AC                 MOV             X2, X20 ; n
.text:00000000000284B0                 STR             X0, [X23]
.text:00000000000284B4                 STR             X25, [X23,#(qword_31190 - 0x31180)]
.text:00000000000284B8                 BL              .memcpy
.text:00000000000284BC                 MOV             X0, X22 ; lpfunc
.text:00000000000284C0                 STR             X25, [X23,#(qword_31188 - 0x31180)]
.text:00000000000284C4                 MOV             X1, X23 ; obj
.text:00000000000284C8                 MOV             X2, X19 ; lpdso_handle
.text:00000000000284CC                 BL              .__cxa_atexit
.text:00000000000284D0                 BL              ._ZN3gui13LayoutManager11getInstanceEv ; gui::LayoutManager::getInstance(void)
.text:00000000000284D4                 MOV             X1, X21
.text:00000000000284D8                 MOV             X2, X23
.text:00000000000284DC                 BL              ._ZN3gui13LayoutManager4initERKNSt3__16vectorINS_10RenderAreaENS1_9allocatorIS3_EEEES8_ ; gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)
.text:00000000000284E0                 ADRP            X8, #dword_31198@PAGE
.text:00000000000284E4                 STR             WZR, [X8,#dword_31198@PAGEOFF]
.text:00000000000284E8                 LDR             X8, [X24,#0x28]
.text:00000000000284EC                 LDR             X9, [SP,#0x60+var_48]
.text:00000000000284F0                 CMP             X8, X9
.text:00000000000284F4                 B.NE            loc_28514
.text:00000000000284F8                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:00000000000284FC                 LDP             X20, X19, [SP,#0x60+var_10]
.text:0000000000028500                 LDP             X22, X21, [SP,#0x60+var_20]
.text:0000000000028504                 LDP             X24, X23, [SP,#0x60+var_30]
.text:0000000000028508                 LDR             X25, [SP,#0x60+var_40]
.text:000000000002850C                 ADD             SP, SP, #0x70 ; 'p'
.text:0000000000028510                 RET
.text:0000000000028514 ; ---------------------------------------------------------------------------
.text:0000000000028514 loc_28514                               ; CODE XREF: sub_28240+2B4↑j
.text:0000000000028514                 BL              .__stack_chk_fail
.text:0000000000028514 ; } // starts at 28240
.text:0000000000028514 ; End of function sub_28240
.text:0000000000028518 ; =============== S U B R O U T I N E =======================================
.text:0000000000028518 ; Attributes: bp-based frame
.text:0000000000028518 ; gui::LayoutManager::init(std::__1::vector<gui::RenderArea, std::__1::allocator<gui::RenderArea>> const&, std::__1::vector<gui::RenderArea, std::__1::allocator<gui::RenderArea>> const&)
.text:0000000000028518                 EXPORT _ZN3gui13LayoutManager4initERKNSt3__16vectorINS_10RenderAreaENS1_9allocatorIS3_EEEES8_
.text:0000000000028518 _ZN3gui13LayoutManager4initERKNSt3__16vectorINS_10RenderAreaENS1_9allocatorIS3_EEEES8_
.text:0000000000028518                                         ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+C↓j
.text:0000000000028518                                         ; DATA XREF: LOAD:0000000000000FF0↑o ...
.text:0000000000028518 var_30          = -0x30
.text:0000000000028518 var_28          = -0x28
.text:0000000000028518 var_20          = -0x20
.text:0000000000028518 var_10          = -0x10
.text:0000000000028518 var_s0          =  0
.text:0000000000028518 ; __unwind {
.text:0000000000028518                 SUB             SP, SP, #0x40
.text:000000000002851C                 STR             X21, [SP,#0x30+var_20]
.text:0000000000028520                 STP             X20, X19, [SP,#0x30+var_10]
.text:0000000000028524                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000028528                 ADD             X29, SP, #0x30
.text:000000000002852C                 MRS             X21, #3, c13, c0, #2
.text:0000000000028530                 MOV             W9, #1
.text:0000000000028534                 LDR             X8, [X21,#0x28]
.text:0000000000028538                 MOV             X20, X2
.text:000000000002853C                 MOV             X19, X0
.text:0000000000028540                 STR             X8, [SP,#0x30+var_28]
.text:0000000000028544                 STRB            W9, [X0],#8
.text:0000000000028548                 CMP             X0, X1
.text:000000000002854C                 B.EQ            loc_2855C
.text:0000000000028550                 LDP             X8, X2, [X1]
.text:0000000000028554                 MOV             X1, X8
.text:0000000000028558                 BL              sub_299A0
.text:000000000002855C loc_2855C                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+34↑j
.text:000000000002855C                 ADD             X0, X19, #0x20 ; ' '
.text:0000000000028560                 CMP             X0, X20
.text:0000000000028564                 B.EQ            loc_28570
.text:0000000000028568                 LDP             X1, X2, [X20]
.text:000000000002856C                 BL              sub_299A0
.text:0000000000028570 loc_28570                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+4C↑j
.text:0000000000028570                 LDP             X9, X8, [X19,#8]
.text:0000000000028574                 CMP             X9, X8
.text:0000000000028578                 B.EQ            loc_28604
.text:000000000002857C                 SUB             X10, X8, #0x10
.text:0000000000028580                 SUB             X10, X10, X9
.text:0000000000028584                 LSR             X10, X10, #4
.text:0000000000028588                 ADD             X11, X10, #1
.text:000000000002858C                 CMP             X11, #3
.text:0000000000028590                 B.HI            loc_2859C
.text:0000000000028594                 MOV             X10, X9
.text:0000000000028598                 B               loc_285E0
.text:000000000002859C ; ---------------------------------------------------------------------------
.text:000000000002859C loc_2859C                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+78↑j
.text:000000000002859C                 MOV             W10, #0x44390000
.text:00000000000285A0                 MOV             W13, #0x43B40000
.text:00000000000285A4                 AND             X12, X11, #0x1FFFFFFFFFFFFFFC
.text:00000000000285A8                 DUP             V0.4S, W10
.text:00000000000285AC                 DUP             V1.4S, W13
.text:00000000000285B0                 ADD             X10, X9, X12,LSL#4
.text:00000000000285B4                 MOV             X13, X12
.text:00000000000285B8 loc_285B8                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+BC↓j
.text:00000000000285B8                 LD4             {V2.4S-V5.4S}, [X9]
.text:00000000000285BC                 SUBS            X13, X13, #4
.text:00000000000285C0                 FDIV            V18.4S, V4.4S, V0.4S
.text:00000000000285C4                 FDIV            V16.4S, V2.4S, V0.4S
.text:00000000000285C8                 FDIV            V19.4S, V5.4S, V1.4S
.text:00000000000285CC                 FDIV            V17.4S, V3.4S, V1.4S
.text:00000000000285D0                 ST4             {V16.4S-V19.4S}, [X9],#0x40
.text:00000000000285D4                 B.NE            loc_285B8
.text:00000000000285D8                 CMP             X11, X12
.text:00000000000285DC                 B.EQ            loc_28604
.text:00000000000285E0 loc_285E0                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+80↑j
.text:00000000000285E0                 ADRP            X9, #xmmword_7A20@PAGE
.text:00000000000285E4                 LDR             Q0, [X9,#xmmword_7A20@PAGEOFF]
.text:00000000000285E8                 MOV             X9, X10
.text:00000000000285EC loc_285EC                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+E8↓j
.text:00000000000285EC                 LDR             Q1, [X9],#0x10
.text:00000000000285F0                 FDIV            V1.4S, V1.4S, V0.4S
.text:00000000000285F4                 CMP             X8, X9
.text:00000000000285F8                 STR             Q1, [X10]
.text:00000000000285FC                 MOV             X10, X9
.text:0000000000028600                 B.NE            loc_285EC
.text:0000000000028604 loc_28604                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+60↑j
.text:0000000000028604                                         ; gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+C4↑j
.text:0000000000028604                 LDP             X9, X8, [X19,#0x20]
.text:0000000000028608                 CMP             X9, X8
.text:000000000002860C                 B.EQ            loc_28698
.text:0000000000028610                 SUB             X10, X8, #0x10
.text:0000000000028614                 SUB             X10, X10, X9
.text:0000000000028618                 LSR             X10, X10, #4
.text:000000000002861C                 ADD             X11, X10, #1
.text:0000000000028620                 CMP             X11, #3
.text:0000000000028624                 B.HI            loc_28630
.text:0000000000028628                 MOV             X10, X9
.text:000000000002862C                 B               loc_28674
.text:0000000000028630 ; ---------------------------------------------------------------------------
.text:0000000000028630 loc_28630                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+10C↑j
.text:0000000000028630                 MOV             W10, #0x43B40000
.text:0000000000028634                 MOV             W13, #0x44390000
.text:0000000000028638                 AND             X12, X11, #0x1FFFFFFFFFFFFFFC
.text:000000000002863C                 DUP             V0.4S, W10
.text:0000000000028640                 DUP             V1.4S, W13
.text:0000000000028644                 ADD             X10, X9, X12,LSL#4
.text:0000000000028648                 MOV             X13, X12
.text:000000000002864C loc_2864C                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+150↓j
.text:000000000002864C                 LD4             {V2.4S-V5.4S}, [X9]
.text:0000000000028650                 SUBS            X13, X13, #4
.text:0000000000028654                 FDIV            V18.4S, V4.4S, V0.4S
.text:0000000000028658                 FDIV            V16.4S, V2.4S, V0.4S
.text:000000000002865C                 FDIV            V19.4S, V5.4S, V1.4S
.text:0000000000028660                 FDIV            V17.4S, V3.4S, V1.4S
.text:0000000000028664                 ST4             {V16.4S-V19.4S}, [X9],#0x40
.text:0000000000028668                 B.NE            loc_2864C
.text:000000000002866C                 CMP             X11, X12
.text:0000000000028670                 B.EQ            loc_28698
.text:0000000000028674 loc_28674                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+114↑j
.text:0000000000028674                 ADRP            X9, #xmmword_7B80@PAGE
.text:0000000000028678                 LDR             Q0, [X9,#xmmword_7B80@PAGEOFF]
.text:000000000002867C                 MOV             X9, X10
.text:0000000000028680 loc_28680                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+17C↓j
.text:0000000000028680                 LDR             Q1, [X9],#0x10
.text:0000000000028684                 FDIV            V1.4S, V1.4S, V0.4S
.text:0000000000028688                 CMP             X8, X9
.text:000000000002868C                 STR             Q1, [X10]
.text:0000000000028690                 MOV             X10, X9
.text:0000000000028694                 B.NE            loc_28680
.text:0000000000028698 loc_28698                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+F4↑j
.text:0000000000028698                                         ; gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+158↑j
.text:0000000000028698                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000002869C                 ADD             X20, X19, #0x38 ; '8'
.text:00000000000286A0                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000286A4                 ADRP            X9, #qword_7998@PAGE
.text:00000000000286A8                 LDP             X8, X10, [X19,#0x40]
.text:00000000000286AC                 LDR             D0, [X9,#qword_7998@PAGEOFF]
.text:00000000000286B0                 MOV             W9, #1
.text:00000000000286B4                 STP             XZR, XZR, [X0,#8]
.text:00000000000286B8                 CMP             X8, X10
.text:00000000000286BC                 STR             WZR, [X0,#0x18]
.text:00000000000286C0                 STRB            W9, [X0,#0x1C]
.text:00000000000286C4                 STR             D0, [X0]
.text:00000000000286C8                 STR             X0, [SP,#0x30+var_30]
.text:00000000000286CC                 B.CS            loc_286E4
.text:00000000000286D0                 STR             X0, [X8]
.text:00000000000286D4                 LDR             X8, [X19,#0x40]
.text:00000000000286D8                 ADD             X8, X8, #8
.text:00000000000286DC                 STR             X8, [X19,#0x40]
.text:00000000000286E0                 B               loc_286F0
.text:00000000000286E4 ; ---------------------------------------------------------------------------
.text:00000000000286E4 loc_286E4                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+1B4↑j
.text:00000000000286E4                 MOV             X1, SP
.text:00000000000286E8                 MOV             X0, X20
.text:00000000000286EC                 BL              loc_1CAB0
.text:00000000000286F0 loc_286F0                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+1C8↑j
.text:00000000000286F0                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:00000000000286F4                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000286F8                 ADRP            X9, #qword_7980@PAGE
.text:00000000000286FC                 LDP             X8, X10, [X19,#0x40]
.text:0000000000028700                 LDR             D0, [X9,#qword_7980@PAGEOFF]
.text:0000000000028704                 MOV             W9, #1
.text:0000000000028708                 STP             XZR, XZR, [X0,#8]
.text:000000000002870C                 CMP             X8, X10
.text:0000000000028710                 STR             WZR, [X0,#0x18]
.text:0000000000028714                 STRB            W9, [X0,#0x1C]
.text:0000000000028718                 STR             D0, [X0]
.text:000000000002871C                 STR             X0, [SP,#0x30+var_30]
.text:0000000000028720                 B.CS            loc_28738
.text:0000000000028724                 STR             X0, [X8]
.text:0000000000028728                 LDR             X8, [X19,#0x40]
.text:000000000002872C                 ADD             X8, X8, #8
.text:0000000000028730                 STR             X8, [X19,#0x40]
.text:0000000000028734                 B               loc_28744
.text:0000000000028738 ; ---------------------------------------------------------------------------
.text:0000000000028738 loc_28738                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+208↑j
.text:0000000000028738                 MOV             X1, SP
.text:000000000002873C                 MOV             X0, X20
.text:0000000000028740                 BL              loc_1CAB0
.text:0000000000028744 loc_28744                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+21C↑j
.text:0000000000028744                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:0000000000028748                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002874C                 ADRP            X9, #qword_7940@PAGE
.text:0000000000028750                 LDP             X8, X10, [X19,#0x40]
.text:0000000000028754                 LDR             D0, [X9,#qword_7940@PAGEOFF]
.text:0000000000028758                 MOV             W9, #1
.text:000000000002875C                 STP             XZR, XZR, [X0,#8]
.text:0000000000028760                 CMP             X8, X10
.text:0000000000028764                 STR             WZR, [X0,#0x18]
.text:0000000000028768                 STRB            W9, [X0,#0x1C]
.text:000000000002876C                 STR             D0, [X0]
.text:0000000000028770                 STR             X0, [SP,#0x30+var_30]
.text:0000000000028774                 B.CS            loc_2878C
.text:0000000000028778                 STR             X0, [X8]
.text:000000000002877C                 LDR             X8, [X19,#0x40]
.text:0000000000028780                 ADD             X8, X8, #8
.text:0000000000028784                 STR             X8, [X19,#0x40]
.text:0000000000028788                 B               loc_28798
.text:000000000002878C ; ---------------------------------------------------------------------------
.text:000000000002878C loc_2878C                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+25C↑j
.text:000000000002878C                 MOV             X1, SP
.text:0000000000028790                 MOV             X0, X20
.text:0000000000028794                 BL              loc_1CAB0
.text:0000000000028798 loc_28798                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+270↑j
.text:0000000000028798                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000002879C                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000287A0                 ADRP            X9, #qword_7950@PAGE
.text:00000000000287A4                 LDP             X8, X10, [X19,#0x40]
.text:00000000000287A8                 LDR             D0, [X9,#qword_7950@PAGEOFF]
.text:00000000000287AC                 MOV             W9, #1
.text:00000000000287B0                 STP             XZR, XZR, [X0,#8]
.text:00000000000287B4                 CMP             X8, X10
.text:00000000000287B8                 STR             WZR, [X0,#0x18]
.text:00000000000287BC                 STRB            W9, [X0,#0x1C]
.text:00000000000287C0                 STR             D0, [X0]
.text:00000000000287C4                 STR             X0, [SP,#0x30+var_30]
.text:00000000000287C8                 B.CS            loc_287E0
.text:00000000000287CC                 STR             X0, [X8]
.text:00000000000287D0                 LDR             X8, [X19,#0x40]
.text:00000000000287D4                 ADD             X8, X8, #8
.text:00000000000287D8                 STR             X8, [X19,#0x40]
.text:00000000000287DC                 B               loc_287EC
.text:00000000000287E0 ; ---------------------------------------------------------------------------
.text:00000000000287E0 loc_287E0                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+2B0↑j
.text:00000000000287E0                 MOV             X1, SP
.text:00000000000287E4                 MOV             X0, X20
.text:00000000000287E8                 BL              loc_1CAB0
.text:00000000000287EC loc_287EC                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+2C4↑j
.text:00000000000287EC                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:00000000000287F0                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000287F4                 ADRP            X9, #qword_7978@PAGE
.text:00000000000287F8                 LDP             X8, X10, [X19,#0x40]
.text:00000000000287FC                 LDR             D0, [X9,#qword_7978@PAGEOFF]
.text:0000000000028800                 MOV             W9, #1
.text:0000000000028804                 STP             XZR, XZR, [X0,#8]
.text:0000000000028808                 CMP             X8, X10
.text:000000000002880C                 STR             WZR, [X0,#0x18]
.text:0000000000028810                 STRB            W9, [X0,#0x1C]
.text:0000000000028814                 STR             D0, [X0]
.text:0000000000028818                 STR             X0, [SP,#0x30+var_30]
.text:000000000002881C                 B.CS            loc_28834
.text:0000000000028820                 STR             X0, [X8]
.text:0000000000028824                 LDR             X8, [X19,#0x40]
.text:0000000000028828                 ADD             X8, X8, #8
.text:000000000002882C                 STR             X8, [X19,#0x40]
.text:0000000000028830                 B               loc_28840
.text:0000000000028834 ; ---------------------------------------------------------------------------
.text:0000000000028834 loc_28834                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+304↑j
.text:0000000000028834                 MOV             X1, SP
.text:0000000000028838                 MOV             X0, X20
.text:000000000002883C                 BL              loc_1CAB0
.text:0000000000028840 loc_28840                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+318↑j
.text:0000000000028840                 LDR             X8, [X21,#0x28]
.text:0000000000028844                 LDR             X9, [SP,#0x30+var_28]
.text:0000000000028848                 CMP             X8, X9
.text:000000000002884C                 B.NE            loc_28864
.text:0000000000028850                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000028854                 LDP             X20, X19, [SP,#0x30+var_10]
.text:0000000000028858                 LDR             X21, [SP,#0x30+var_20]
.text:000000000002885C                 ADD             SP, SP, #0x40 ; '@'
.text:0000000000028860                 RET
.text:0000000000028864 ; ---------------------------------------------------------------------------
.text:0000000000028864 loc_28864                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+334↑j
.text:0000000000028864                 BL              .__stack_chk_fail
.text:0000000000028864 ; } // starts at 28518
.text:0000000000028864 ; End of function gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)
.text:0000000000028868 ; =============== S U B R O U T I N E =======================================
.text:0000000000028868 ; Attributes: bp-based frame
.text:0000000000028868 ; __int64 __fastcall gui::LayoutManager::updateConfig(gui::LayoutManager *__hidden this)
.text:0000000000028868                 EXPORT _ZN3gui13LayoutManager12updateConfigEv
.text:0000000000028868 _ZN3gui13LayoutManager12updateConfigEv  ; CODE XREF: gui::LayoutManager::updateConfig(void)+C↓j
.text:0000000000028868                                         ; DATA XREF: LOAD:00000000000020A0↑o ...
.text:0000000000028868 var_10          = -0x10
.text:0000000000028868 var_s0          =  0
.text:0000000000028868 ; __unwind {
.text:0000000000028868                 STR             X19, [SP,#-0x10+var_10]!
.text:000000000002886C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000028870                 ADD             X29, SP, #0x10
.text:0000000000028874                 MOV             X19, X0
.text:0000000000028878                 BL              ._ZN3gui15WidgetsSettings4loadEv ; gui::WidgetsSettings::load(void)
.text:000000000002887C                 TBZ             W0, #0, loc_2898C ; this
.text:0000000000028880                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:0000000000028884                 LDR             X8, [X19,#0x38]
.text:0000000000028888                 LDR             X9, [X0,#0x18]
.text:000000000002888C                 LDR             X8, [X8]
.text:0000000000028890                 LDR             W9, [X9,#0x28]
.text:0000000000028894                 STR             W9, [X8,#0x18]
.text:0000000000028898                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:000000000002889C                 LDR             X8, [X19,#0x38]
.text:00000000000288A0                 LDR             X9, [X0,#0x58]
.text:00000000000288A4                 LDR             X8, [X8,#8]
.text:00000000000288A8                 LDR             W9, [X9,#0x28]
.text:00000000000288AC                 STR             W9, [X8,#0x18]
.text:00000000000288B0                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:00000000000288B4                 LDR             X8, [X19,#0x38]
.text:00000000000288B8                 LDR             X9, [X0,#0x98]
.text:00000000000288BC                 LDR             X8, [X8,#0x10]
.text:00000000000288C0                 LDR             W9, [X9,#0x28]
.text:00000000000288C4                 STR             W9, [X8,#0x18]
.text:00000000000288C8                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:00000000000288CC                 LDR             X8, [X19,#0x38]
.text:00000000000288D0                 LDR             X9, [X0,#0xD0]
.text:00000000000288D4                 LDR             X8, [X8,#0x18]
.text:00000000000288D8                 LDR             W9, [X9,#0x28]
.text:00000000000288DC                 STR             W9, [X8,#0x18]
.text:00000000000288E0                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:00000000000288E4                 LDR             X8, [X19,#0x38]
.text:00000000000288E8                 LDR             X9, [X0,#0xE0]
.text:00000000000288EC                 LDR             X8, [X8,#0x20]
.text:00000000000288F0                 LDR             W9, [X9,#0x28]
.text:00000000000288F4                 STR             W9, [X8,#0x18]
.text:00000000000288F8                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:00000000000288FC                 ADD             X0, X0, #0x10 ; this
.text:0000000000028900                 BL              ._ZN3gui15WidgetsSettings7Widgets3Fps7enabledEv ; gui::WidgetsSettings::Widgets::Fps::enabled(void)
.text:0000000000028904                 LDR             X8, [X19,#0x38]
.text:0000000000028908                 AND             W9, W0, #1
.text:000000000002890C                 LDR             X8, [X8]
.text:0000000000028910                 STRB            W9, [X8,#0x1C]
.text:0000000000028914                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:0000000000028918                 ADD             X0, X0, #0x50 ; 'P' ; this
.text:000000000002891C                 BL              ._ZN3gui15WidgetsSettings7Widgets6CpuGpu7enabledEv ; gui::WidgetsSettings::Widgets::CpuGpu::enabled(void)
.text:0000000000028920                 LDR             X8, [X19,#0x38]
.text:0000000000028924                 AND             W9, W0, #1
.text:0000000000028928                 LDR             X8, [X8,#8]
.text:000000000002892C                 STRB            W9, [X8,#0x1C]
.text:0000000000028930                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:0000000000028934                 ADD             X0, X0, #0x90 ; this
.text:0000000000028938                 BL              ._ZN3gui15WidgetsSettings7Widgets11GpuActivity7enabledEv ; gui::WidgetsSettings::Widgets::GpuActivity::enabled(void)
.text:000000000002893C                 LDR             X8, [X19,#0x38]
.text:0000000000028940                 AND             W9, W0, #1
.text:0000000000028944                 LDR             X8, [X8,#0x10]
.text:0000000000028948                 STRB            W9, [X8,#0x1C]
.text:000000000002894C                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:0000000000028950                 ADD             X0, X0, #0x90 ; this
.text:0000000000028954                 BL              ._ZN3gui15WidgetsSettings7Widgets11GpuActivity16thumbnailEnabledEv ; gui::WidgetsSettings::Widgets::GpuActivity::thumbnailEnabled(void)
.text:0000000000028958                 LDR             X8, [X19,#0x38]
.text:000000000002895C                 AND             W9, W0, #1
.text:0000000000028960                 LDR             X8, [X8,#0x18]
.text:0000000000028964                 STRB            W9, [X8,#0x1C]
.text:0000000000028968                 BL              ._ZN3gui15WidgetsSettings10getWidgetsEv ; gui::WidgetsSettings::getWidgets(void)
.text:000000000002896C                 ADD             X0, X0, #0xD8 ; this
.text:0000000000028970                 BL              ._ZN3gui15WidgetsSettings7Widgets6Memory7enabledEv ; gui::WidgetsSettings::Widgets::Memory::enabled(void)
.text:0000000000028974                 LDR             X8, [X19,#0x38]
.text:0000000000028978                 AND             W9, W0, #1
.text:000000000002897C                 MOV             W0, #1
.text:0000000000028980                 LDR             X8, [X8,#0x20]
.text:0000000000028984                 STRB            W9, [X8,#0x1C]
.text:0000000000028988                 B               loc_28990
.text:000000000002898C ; ---------------------------------------------------------------------------
.text:000000000002898C loc_2898C                               ; CODE XREF: gui::LayoutManager::updateConfig(void)+14↑j
.text:000000000002898C                 MOV             W0, WZR
.text:0000000000028990 loc_28990                               ; CODE XREF: gui::LayoutManager::updateConfig(void)+120↑j
.text:0000000000028990                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000028994                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000028998                 RET
.text:0000000000028998 ; } // starts at 28868
.text:0000000000028998 ; End of function gui::LayoutManager::updateConfig(void)
.text:0000000000028998 ; ---------------------------------------------------------------------------
.text:000000000002899C                 ALIGN 0x20
.text:00000000000289A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000289A0 ; gui::LayoutManager::getWidget(gui::WidgetType)const
.text:00000000000289A0                 EXPORT _ZNK3gui13LayoutManager9getWidgetENS_10WidgetTypeE
.text:00000000000289A0 _ZNK3gui13LayoutManager9getWidgetENS_10WidgetTypeE
.text:00000000000289A0                                         ; DATA XREF: LOAD:0000000000001D88↑o
.text:00000000000289A0 ; __unwind {
.text:00000000000289A0                 LDR             X8, [X0,#0x38]
.text:00000000000289A4                 LDR             X0, [X8,W1,SXTW#3]
.text:00000000000289A8                 RET
.text:00000000000289A8 ; } // starts at 289A0
.text:00000000000289A8 ; End of function gui::LayoutManager::getWidget(gui::WidgetType)
.text:00000000000289A8 ; ---------------------------------------------------------------------------
.text:00000000000289AC                 ALIGN 0x10
.text:00000000000289B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000289B0 ; gui::LayoutManager::getRenderArea(gui::RenderAreaType)const
.text:00000000000289B0                 EXPORT _ZNK3gui13LayoutManager13getRenderAreaENS_14RenderAreaTypeE
.text:00000000000289B0 _ZNK3gui13LayoutManager13getRenderAreaENS_14RenderAreaTypeE
.text:00000000000289B0                                         ; DATA XREF: LOAD:0000000000000DE0↑o
.text:00000000000289B0 ; __unwind {
.text:00000000000289B0                 LDRB            W9, [X0]
.text:00000000000289B4                 MOV             W8, #0x20 ; ' '
.text:00000000000289B8                 CMP             W9, #0
.text:00000000000289BC                 MOV             W9, #8
.text:00000000000289C0                 CSEL            X8, X9, X8, EQ
.text:00000000000289C4                 LDR             X8, [X0,X8]
.text:00000000000289C8                 ADD             X8, X8, W1,UXTW#4
.text:00000000000289CC                 LDP             S0, S1, [X8]
.text:00000000000289D0                 LDP             S2, S3, [X8,#8]
.text:00000000000289D4                 RET
.text:00000000000289D4 ; } // starts at 289B0
.text:00000000000289D4 ; End of function gui::LayoutManager::getRenderArea(gui::RenderAreaType)
.text:00000000000289D8 ; =============== S U B R O U T I N E =======================================
.text:00000000000289D8 ; Attributes: bp-based frame
.text:00000000000289D8 ; __int64 __fastcall gui::LayoutManager::getInstance(gui::LayoutManager *__hidden this)
.text:00000000000289D8                 EXPORT _ZN3gui13LayoutManager11getInstanceEv
.text:00000000000289D8 _ZN3gui13LayoutManager11getInstanceEv   ; CODE XREF: gui::LayoutManager::getInstance(void)+C↓j
.text:00000000000289D8                                         ; DATA XREF: LOAD:00000000000020E8↑o ...
.text:00000000000289D8 var_s0          =  0
.text:00000000000289D8 ; __unwind {
.text:00000000000289D8                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000289DC                 MOV             X29, SP
.text:00000000000289E0                 ADRP            X8, #unk_311F0@PAGE
.text:00000000000289E4                 ADD             X8, X8, #unk_311F0@PAGEOFF
.text:00000000000289E8                 LDARB           W8, [X8]
.text:00000000000289EC                 TBZ             W8, #0, loc_28A00
.text:00000000000289F0 loc_289F0                               ; CODE XREF: gui::LayoutManager::getInstance(void)+34↓j
.text:00000000000289F0                                         ; gui::LayoutManager::getInstance(void)+80↓j
.text:00000000000289F0                 ADRP            X0, #byte_311A0@PAGE
.text:00000000000289F4                 ADD             X0, X0, #byte_311A0@PAGEOFF
.text:00000000000289F8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000289FC                 RET
.text:0000000000028A00 ; ---------------------------------------------------------------------------
.text:0000000000028A00 loc_28A00                               ; CODE XREF: gui::LayoutManager::getInstance(void)+14↑j
.text:0000000000028A00                 ADRP            X0, #unk_311F0@PAGE
.text:0000000000028A04                 ADD             X0, X0, #unk_311F0@PAGEOFF ; __guard *
.text:0000000000028A08                 BL              .__cxa_guard_acquire
.text:0000000000028A0C                 CBZ             W0, loc_289F0
.text:0000000000028A10                 MOVI            V0.2D, #0
.text:0000000000028A14                 ADRP            X1, #byte_311A0@PAGE
.text:0000000000028A18                 ADRP            X0, #loc_28A60@PAGE
.text:0000000000028A1C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000028A20                 MOV             W8, #1
.text:0000000000028A24                 ADD             X1, X1, #byte_311A0@PAGEOFF ; obj
.text:0000000000028A28                 ADD             X0, X0, #loc_28A60@PAGEOFF ; lpfunc
.text:0000000000028A2C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000028A30                 STR             XZR, [X1,#(qword_311E8 - 0x311A0)]
.text:0000000000028A34                 STRB            W8, [X1]
.text:0000000000028A38                 STUR            Q0, [X1,#0x38]
.text:0000000000028A3C                 STUR            Q0, [X1,#0x28]
.text:0000000000028A40                 STUR            Q0, [X1,#0x18]
.text:0000000000028A44                 STUR            Q0, [X1,#8]
.text:0000000000028A48                 BL              .__cxa_atexit
.text:0000000000028A4C                 ADRP            X0, #unk_311F0@PAGE
.text:0000000000028A50                 ADD             X0, X0, #unk_311F0@PAGEOFF ; __guard *
.text:0000000000028A54                 BL              .__cxa_guard_release
.text:0000000000028A58                 B               loc_289F0
.text:0000000000028A58 ; } // starts at 289D8
.text:0000000000028A58 ; End of function gui::LayoutManager::getInstance(void)
.text:0000000000028A58 ; ---------------------------------------------------------------------------
.text:0000000000028A5C                 ALIGN 0x20
.text:0000000000028A60 loc_28A60                               ; DATA XREF: gui::LayoutManager::getInstance(void)+40↑o
.text:0000000000028A60                                         ; gui::LayoutManager::getInstance(void)+50↑o
.text:0000000000028A60 ; __unwind {
.text:0000000000028A60                 STR             X19, [SP,#-0x20]!
.text:0000000000028A64                 STP             X29, X30, [SP,#0x10]
.text:0000000000028A68                 ADD             X29, SP, #0x10
.text:0000000000028A6C                 MOV             X19, X0
.text:0000000000028A70                 LDR             X0, [X0,#0x38]
.text:0000000000028A74                 CBZ             X0, loc_28A80
.text:0000000000028A78                 STR             X0, [X19,#0x40]
.text:0000000000028A7C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028A80 loc_28A80                               ; CODE XREF: .text:0000000000028A74↑j
.text:0000000000028A80                 LDR             X0, [X19,#0x20]
.text:0000000000028A84                 CBZ             X0, loc_28A90
.text:0000000000028A88                 STR             X0, [X19,#0x28]
.text:0000000000028A8C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028A90 loc_28A90                               ; CODE XREF: .text:0000000000028A84↑j
.text:0000000000028A90                 LDR             X0, [X19,#8]
.text:0000000000028A94                 CBZ             X0, loc_28AA8
.text:0000000000028A98                 STR             X0, [X19,#0x10]
.text:0000000000028A9C                 LDP             X29, X30, [SP,#0x10]
.text:0000000000028AA0                 LDR             X19, [SP],#0x20
.text:0000000000028AA4                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000028AA8 ; ---------------------------------------------------------------------------
.text:0000000000028AA8 loc_28AA8                               ; CODE XREF: .text:0000000000028A94↑j
.text:0000000000028AA8                 LDP             X29, X30, [SP,#0x10]
.text:0000000000028AAC                 LDR             X19, [SP],#0x20
.text:0000000000028AB0                 RET
.text:0000000000028AB0 ; } // starts at 28A60
.text:0000000000028AB0 ; ---------------------------------------------------------------------------
.text:0000000000028AB4                 ALIGN 8
.text:0000000000028AB8 ; =============== S U B R O U T I N E =======================================
.text:0000000000028AB8 ; gui::LayoutManager::updateDrawerLayout(drawer::Drawer *)
.text:0000000000028AB8                 EXPORT _ZN3gui13LayoutManager18updateDrawerLayoutEPN6drawer6DrawerE
.text:0000000000028AB8 _ZN3gui13LayoutManager18updateDrawerLayoutEPN6drawer6DrawerE
.text:0000000000028AB8                                         ; DATA XREF: LOAD:0000000000001D70↑o
.text:0000000000028AB8 ; __unwind {
.text:0000000000028AB8                 LDRB            W8, [X0]
.text:0000000000028ABC                 MOV             W9, #0x20 ; ' '
.text:0000000000028AC0                 MOV             W10, #8
.text:0000000000028AC4                 CMP             W8, #0
.text:0000000000028AC8                 CSEL            X8, X10, X9, EQ
.text:0000000000028ACC                 LDR             W9, [X1,#0x34]
.text:0000000000028AD0                 LDR             X8, [X0,X8]
.text:0000000000028AD4                 ADD             X8, X8, X9,LSL#4
.text:0000000000028AD8                 LDR             X9, [X1,#0x10]
.text:0000000000028ADC                 LDR             D0, [X8]
.text:0000000000028AE0                 LDR             X8, [X8,#8]
.text:0000000000028AE4                 CBZ             X9, loc_28AF0
.text:0000000000028AE8                 LDR             D1, [X9,#8]
.text:0000000000028AEC                 FADD            V0.2S, V0.2S, V1.2S
.text:0000000000028AF0 loc_28AF0                               ; CODE XREF: gui::LayoutManager::updateDrawerLayout(drawer::Drawer *)+2C↑j
.text:0000000000028AF0                 STR             X8, [X1,#0x18]
.text:0000000000028AF4                 STR             D0, [X1,#0x20]
.text:0000000000028AF8                 RET
.text:0000000000028AF8 ; } // starts at 28AB8
.text:0000000000028AF8 ; End of function gui::LayoutManager::updateDrawerLayout(drawer::Drawer *)
.text:0000000000028AF8 ; ---------------------------------------------------------------------------
.text:0000000000028AFC                 ALIGN 0x20
.text:0000000000028B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000028B00 ; Attributes: bp-based frame
.text:0000000000028B00 ; __int64 __fastcall gui::LayoutManager::updateWidgetsLayouts(gui::LayoutManager *__hidden this, bool)
.text:0000000000028B00                 EXPORT _ZN3gui13LayoutManager20updateWidgetsLayoutsEb
.text:0000000000028B00 _ZN3gui13LayoutManager20updateWidgetsLayoutsEb
.text:0000000000028B00                                         ; DATA XREF: LOAD:0000000000001260↑o
.text:0000000000028B00 var_B0          = -0xB0
.text:0000000000028B00 var_A8          = -0xA8
.text:0000000000028B00 var_A0          = -0xA0
.text:0000000000028B00 var_98          = -0x98
.text:0000000000028B00 var_94          = -0x94
.text:0000000000028B00 var_90          = -0x90
.text:0000000000028B00 var_8C          = -0x8C
.text:0000000000028B00 var_88          = -0x88
.text:0000000000028B00 var_80          = -0x80
.text:0000000000028B00 var_78          = -0x78
.text:0000000000028B00 var_70          = -0x70
.text:0000000000028B00 var_68          = -0x68
.text:0000000000028B00 var_60          = -0x60
.text:0000000000028B00 var_58          = -0x58
.text:0000000000028B00 var_54          = -0x54
.text:0000000000028B00 var_50          = -0x50
.text:0000000000028B00 var_4C          = -0x4C
.text:0000000000028B00 var_48          = -0x48
.text:0000000000028B00 var_40          = -0x40
.text:0000000000028B00 var_30          = -0x30
.text:0000000000028B00 var_20          = -0x20
.text:0000000000028B00 var_10          = -0x10
.text:0000000000028B00 var_s0          =  0
.text:0000000000028B00 ; __unwind {
.text:0000000000028B00                 SUB             SP, SP, #0xC0
.text:0000000000028B04                 STP             D9, D8, [SP,#0xB0+var_40]
.text:0000000000028B08                 STP             X24, X23, [SP,#0xB0+var_30]
.text:0000000000028B0C                 STP             X22, X21, [SP,#0xB0+var_20]
.text:0000000000028B10                 STP             X20, X19, [SP,#0xB0+var_10]
.text:0000000000028B14                 STP             X29, X30, [SP,#0xB0+var_s0]
.text:0000000000028B18                 ADD             X29, SP, #0xB0
.text:0000000000028B1C                 MRS             X20, #3, c13, c0, #2
.text:0000000000028B20                 AND             W10, W1, #1
.text:0000000000028B24                 LDR             X8, [X20,#0x28]
.text:0000000000028B28                 MOV             W9, #0x20 ; ' '
.text:0000000000028B2C                 TST             W1, #1
.text:0000000000028B30                 STUR            X8, [X29,#var_48]
.text:0000000000028B34                 MOV             W8, #8
.text:0000000000028B38                 LDR             X11, [X0,#0x38]
.text:0000000000028B3C                 STRB            W10, [X0]
.text:0000000000028B40                 CSEL            X10, X9, X8, NE
.text:0000000000028B44                 LDR             X11, [X11]
.text:0000000000028B48                 LDR             X10, [X0,X10]
.text:0000000000028B4C                 LDR             W12, [X11,#4]
.text:0000000000028B50                 LDR             Q0, [X10,X12,LSL#4]
.text:0000000000028B54                 STUR            Q0, [X11,#8]
.text:0000000000028B58                 LDR             X10, [X0,#0x38]
.text:0000000000028B5C                 LDRB            W11, [X0]
.text:0000000000028B60                 LDR             X10, [X10,#8]
.text:0000000000028B64                 CMP             W11, #0
.text:0000000000028B68                 CSEL            X11, X8, X9, EQ
.text:0000000000028B6C                 LDR             W12, [X10,#4]
.text:0000000000028B70                 LDR             X11, [X0,X11]
.text:0000000000028B74                 LDR             Q0, [X11,X12,LSL#4]
.text:0000000000028B78                 STUR            Q0, [X10,#8]
.text:0000000000028B7C                 LDR             X10, [X0,#0x38]
.text:0000000000028B80                 LDRB            W11, [X0]
.text:0000000000028B84                 LDR             X10, [X10,#0x10]
.text:0000000000028B88                 CMP             W11, #0
.text:0000000000028B8C                 CSEL            X11, X8, X9, EQ
.text:0000000000028B90                 LDR             W12, [X10,#4]
.text:0000000000028B94                 LDR             X11, [X0,X11]
.text:0000000000028B98                 LDR             Q0, [X11,X12,LSL#4]
.text:0000000000028B9C                 STUR            Q0, [X10,#8]
.text:0000000000028BA0                 LDR             X10, [X0,#0x38]
.text:0000000000028BA4                 LDRB            W11, [X0]
.text:0000000000028BA8                 LDR             X10, [X10,#0x18]
.text:0000000000028BAC                 CMP             W11, #0
.text:0000000000028BB0                 CSEL            X11, X8, X9, EQ
.text:0000000000028BB4                 LDR             W12, [X10,#4]
.text:0000000000028BB8                 LDR             X11, [X0,X11]
.text:0000000000028BBC                 LDR             Q0, [X11,X12,LSL#4]
.text:0000000000028BC0                 STUR            Q0, [X10,#8]
.text:0000000000028BC4                 LDR             X10, [X0,#0x38]
.text:0000000000028BC8                 LDRB            W11, [X0]
.text:0000000000028BCC                 LDR             X10, [X10,#0x20]
.text:0000000000028BD0                 CMP             W11, #0
.text:0000000000028BD4                 CSEL            X11, X8, X9, EQ
.text:0000000000028BD8                 LDR             W12, [X10,#4]
.text:0000000000028BDC                 LDR             X11, [X0,X11]
.text:0000000000028BE0                 LDR             Q0, [X11,X12,LSL#4]
.text:0000000000028BE4                 STUR            Q0, [X10,#8]
.text:0000000000028BE8                 MOV             X10, SP
.text:0000000000028BEC                 LDRB            W11, [X0]
.text:0000000000028BF0                 STP             XZR, XZR, [SP,#0xB0+var_70]
.text:0000000000028BF4                 STP             XZR, XZR, [SP,#0xB0+var_88]
.text:0000000000028BF8                 STP             X10, X10, [SP,#0xB0+var_B0]
.text:0000000000028BFC                 CMP             W11, #0
.text:0000000000028C00                 STR             XZR, [SP,#0xB0+var_60]
.text:0000000000028C04                 CSEL            X8, X8, X9, EQ
.text:0000000000028C08                 STR             XZR, [SP,#0xB0+var_78]
.text:0000000000028C0C                 LDR             X8, [X0,X8]
.text:0000000000028C10                 STR             XZR, [SP,#0xB0+var_A0]
.text:0000000000028C14                 LDP             X21, X22, [X0,#0x38]
.text:0000000000028C18                 LDR             W9, [X8,#0x2D8]
.text:0000000000028C1C                 LDR             S9, [X8,#0x2DC]
.text:0000000000028C20                 LDR             W10, [X8,#0x2E8]
.text:0000000000028C24                 CMP             X21, X22
.text:0000000000028C28                 LDR             S8, [X8,#0x2EC]
.text:0000000000028C2C                 STUR            W9, [X29,#var_50]
.text:0000000000028C30                 STUR            S9, [X29,#var_4C]
.text:0000000000028C34                 STR             W10, [SP,#0xB0+var_58]
.text:0000000000028C38                 STR             S8, [SP,#0xB0+var_54]
.text:0000000000028C3C                 STR             W9, [SP,#0xB0+var_98]
.text:0000000000028C40                 STR             S9, [SP,#0xB0+var_94]
.text:0000000000028C44                 STR             W10, [SP,#0xB0+var_90]
.text:0000000000028C48                 STR             S8, [SP,#0xB0+var_8C]
.text:0000000000028C4C                 B.EQ            loc_28D90
.text:0000000000028C50                 MOV             W23, #1
.text:0000000000028C54                 MOV             W24, #5
.text:0000000000028C58 loc_28C58                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+1D0↓j
.text:0000000000028C58                 LDR             X19, [X21]
.text:0000000000028C5C                 LDRB            W8, [X19,#0x1C]
.text:0000000000028C60                 CBZ             W8, loc_28CC8
.text:0000000000028C64                 LDR             W8, [X19,#0x18]
.text:0000000000028C68                 CMP             W8, #7
.text:0000000000028C6C                 B.HI            loc_28CC8
.text:0000000000028C70                 LSL             W8, W23, W8
.text:0000000000028C74                 TST             W8, #7
.text:0000000000028C78                 B.NE            loc_28C98
.text:0000000000028C7C                 TST             W8, #0xE0
.text:0000000000028C80                 B.NE            loc_28CB4
.text:0000000000028C84                 MOV             X0, SP
.text:0000000000028C88                 MOV             X1, X19
.text:0000000000028C8C                 BL              sub_29018
.text:0000000000028C90                 TBNZ            W0, #0, loc_28CC8
.text:0000000000028C94                 STR             WZR, [X19,#0x18]
.text:0000000000028C98 loc_28C98                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+178↑j
.text:0000000000028C98                 ADD             X1, SP, #0xB0+var_70
.text:0000000000028C9C                 SUB             X2, X29, #-var_50
.text:0000000000028CA0                 ADD             X3, SP, #0xB0+var_58
.text:0000000000028CA4                 MOV             X0, X19
.text:0000000000028CA8                 BL              sub_291D0
.text:0000000000028CAC                 TBNZ            W0, #0, loc_28CC8
.text:0000000000028CB0                 STR             W24, [X19,#0x18]
.text:0000000000028CB4 loc_28CB4                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+180↑j
.text:0000000000028CB4                 ADD             X1, SP, #0xB0+var_88
.text:0000000000028CB8                 SUB             X2, X29, #-var_50
.text:0000000000028CBC                 ADD             X3, SP, #0xB0+var_58
.text:0000000000028CC0                 MOV             X0, X19
.text:0000000000028CC4                 BL              sub_291D0
.text:0000000000028CC8 loc_28CC8                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+160↑j
.text:0000000000028CC8                                         ; gui::LayoutManager::updateWidgetsLayouts(bool)+16C↑j ...
.text:0000000000028CC8                 ADD             X21, X21, #8
.text:0000000000028CCC                 CMP             X22, X21
.text:0000000000028CD0                 B.NE            loc_28C58
.text:0000000000028CD4                 FMOV            S0, #1.0
.text:0000000000028CD8                 LDP             X9, X8, [SP,#0xB0+var_70]
.text:0000000000028CDC                 CMP             X9, X8
.text:0000000000028CE0                 FSUB            S0, S0, S9
.text:0000000000028CE4                 B.EQ            loc_28D98
.text:0000000000028CE8                 FMOV            S1, WZR
.text:0000000000028CEC                 FMOV            S3, #0.5
.text:0000000000028CF0                 FADD            S2, S9, S1
.text:0000000000028CF4 loc_28CF4                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+288↓j
.text:0000000000028CF4                 LDR             X10, [X9,#8]
.text:0000000000028CF8                 CMP             X9, X10
.text:0000000000028CFC                 B.EQ            loc_28D50
.text:0000000000028D00 loc_28D00                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+248↓j
.text:0000000000028D00                 LDR             X11, [X10,#0x10]
.text:0000000000028D04                 MOV             V4.16B, V1.16B
.text:0000000000028D08                 LDR             W12, [X11,#0x18]
.text:0000000000028D0C                 SUB             W13, W12, #5
.text:0000000000028D10                 SUB             W12, W12, #3
.text:0000000000028D14                 CMP             W13, #2
.text:0000000000028D18                 B.HI            loc_28D20
.text:0000000000028D1C                 LDR             S4, [X11,#0x14]
.text:0000000000028D20 loc_28D20                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+218↑j
.text:0000000000028D20                 FSUB            S4, S2, S4
.text:0000000000028D24                 CMP             W12, #1
.text:0000000000028D28                 MOV             V5.16B, V1.16B
.text:0000000000028D2C                 B.HI            loc_28D38
.text:0000000000028D30                 LDR             S5, [X11,#0x14]
.text:0000000000028D34                 FMUL            S5, S5, S3
.text:0000000000028D38 loc_28D38                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+22C↑j
.text:0000000000028D38                 FSUB            S4, S4, S5
.text:0000000000028D3C                 STR             S4, [X11,#0xC]
.text:0000000000028D40                 LDR             X10, [X10,#8]
.text:0000000000028D44                 CMP             X9, X10
.text:0000000000028D48                 B.NE            loc_28D00
.text:0000000000028D4C                 LDR             X10, [X9,#8]
.text:0000000000028D50 loc_28D50                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+1FC↑j
.text:0000000000028D50                 MOV             V4.16B, V1.16B
.text:0000000000028D54                 CMP             X9, X10
.text:0000000000028D58                 B.EQ            loc_28D78
.text:0000000000028D5C                 MOV             V4.16B, V1.16B
.text:0000000000028D60 loc_28D60                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+274↓j
.text:0000000000028D60                 LDP             X10, X11, [X10,#8]
.text:0000000000028D64                 LDR             S5, [X11,#0x14]
.text:0000000000028D68                 FCMP            S5, S4
.text:0000000000028D6C                 FCSEL           S4, S4, S5, MI
.text:0000000000028D70                 CMP             X9, X10
.text:0000000000028D74                 B.NE            loc_28D60
.text:0000000000028D78 loc_28D78                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+258↑j
.text:0000000000028D78                 FADD            S4, S8, S4
.text:0000000000028D7C                 ADD             X9, X9, #0x28 ; '('
.text:0000000000028D80                 CMP             X9, X8
.text:0000000000028D84                 FADD            S2, S2, S4
.text:0000000000028D88                 B.NE            loc_28CF4
.text:0000000000028D8C                 B               loc_28D98
.text:0000000000028D90 ; ---------------------------------------------------------------------------
.text:0000000000028D90 loc_28D90                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+14C↑j
.text:0000000000028D90                 FMOV            S0, #1.0
.text:0000000000028D94                 FSUB            S0, S0, S9
.text:0000000000028D98 loc_28D98                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+1E4↑j
.text:0000000000028D98                                         ; gui::LayoutManager::updateWidgetsLayouts(bool)+28C↑j
.text:0000000000028D98                 LDP             X9, X8, [SP,#0xB0+var_88]
.text:0000000000028D9C                 CMP             X9, X8
.text:0000000000028DA0                 B.EQ            loc_28E44
.text:0000000000028DA4                 FMOV            S1, WZR
.text:0000000000028DA8                 FMOV            S2, #0.5
.text:0000000000028DAC loc_28DAC                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+340↓j
.text:0000000000028DAC                 LDR             X10, [X9,#8]
.text:0000000000028DB0                 CMP             X9, X10
.text:0000000000028DB4                 B.EQ            loc_28E08
.text:0000000000028DB8 loc_28DB8                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+300↓j
.text:0000000000028DB8                 LDR             X11, [X10,#0x10]
.text:0000000000028DBC                 MOV             V3.16B, V1.16B
.text:0000000000028DC0                 LDR             W12, [X11,#0x18]
.text:0000000000028DC4                 SUB             W13, W12, #5
.text:0000000000028DC8                 SUB             W12, W12, #3
.text:0000000000028DCC                 CMP             W13, #2
.text:0000000000028DD0                 B.HI            loc_28DD8
.text:0000000000028DD4                 LDR             S3, [X11,#0x14]
.text:0000000000028DD8 loc_28DD8                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+2D0↑j
.text:0000000000028DD8                 FSUB            S3, S0, S3
.text:0000000000028DDC                 CMP             W12, #1
.text:0000000000028DE0                 MOV             V4.16B, V1.16B
.text:0000000000028DE4                 B.HI            loc_28DF0
.text:0000000000028DE8                 LDR             S4, [X11,#0x14]
.text:0000000000028DEC                 FMUL            S4, S4, S2
.text:0000000000028DF0 loc_28DF0                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+2E4↑j
.text:0000000000028DF0                 FSUB            S3, S3, S4
.text:0000000000028DF4                 STR             S3, [X11,#0xC]
.text:0000000000028DF8                 LDR             X10, [X10,#8]
.text:0000000000028DFC                 CMP             X9, X10
.text:0000000000028E00                 B.NE            loc_28DB8
.text:0000000000028E04                 LDR             X10, [X9,#8]
.text:0000000000028E08 loc_28E08                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+2B4↑j
.text:0000000000028E08                 MOV             V3.16B, V1.16B
.text:0000000000028E0C                 CMP             X9, X10
.text:0000000000028E10                 B.EQ            loc_28E30
.text:0000000000028E14                 MOV             V3.16B, V1.16B
.text:0000000000028E18 loc_28E18                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+32C↓j
.text:0000000000028E18                 LDP             X10, X11, [X10,#8]
.text:0000000000028E1C                 LDR             S4, [X11,#0x14]
.text:0000000000028E20                 FCMP            S4, S3
.text:0000000000028E24                 FCSEL           S3, S3, S4, MI
.text:0000000000028E28                 CMP             X9, X10
.text:0000000000028E2C                 B.NE            loc_28E18
.text:0000000000028E30 loc_28E30                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+310↑j
.text:0000000000028E30                 FADD            S3, S8, S3
.text:0000000000028E34                 ADD             X9, X9, #0x28 ; '('
.text:0000000000028E38                 CMP             X9, X8
.text:0000000000028E3C                 FSUB            S0, S0, S3
.text:0000000000028E40                 B.NE            loc_28DAC
.text:0000000000028E44 loc_28E44                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+2A0↑j
.text:0000000000028E44                 LDR             X8, [SP,#0xB0+var_A8]
.text:0000000000028E48                 MOV             X9, SP
.text:0000000000028E4C                 CMP             X9, X8
.text:0000000000028E50                 B.EQ            loc_28EA8
.text:0000000000028E54                 FMOV            S0, WZR
.text:0000000000028E58                 FMOV            S1, #0.5
.text:0000000000028E5C loc_28E5C                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+3A4↓j
.text:0000000000028E5C                 LDR             X10, [X8,#0x10]
.text:0000000000028E60                 MOV             V2.16B, V0.16B
.text:0000000000028E64                 LDR             W11, [X10,#0x18]
.text:0000000000028E68                 SUB             W12, W11, #5
.text:0000000000028E6C                 SUB             W11, W11, #3
.text:0000000000028E70                 CMP             W12, #2
.text:0000000000028E74                 B.HI            loc_28E7C
.text:0000000000028E78                 LDR             S2, [X10,#0x14]
.text:0000000000028E7C loc_28E7C                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+374↑j
.text:0000000000028E7C                 FSUB            S2, S1, S2
.text:0000000000028E80                 CMP             W11, #1
.text:0000000000028E84                 MOV             V3.16B, V0.16B
.text:0000000000028E88                 B.HI            loc_28E94
.text:0000000000028E8C                 LDR             S3, [X10,#0x14]
.text:0000000000028E90                 FMUL            S3, S3, S1
.text:0000000000028E94 loc_28E94                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+388↑j
.text:0000000000028E94                 FSUB            S2, S2, S3
.text:0000000000028E98                 STR             S2, [X10,#0xC]
.text:0000000000028E9C                 LDR             X8, [X8,#8]
.text:0000000000028EA0                 CMP             X9, X8
.text:0000000000028EA4                 B.NE            loc_28E5C
.text:0000000000028EA8 loc_28EA8                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+350↑j
.text:0000000000028EA8                 LDR             X8, [SP,#0xB0+var_A0]
.text:0000000000028EAC                 CBZ             X8, loc_28EF0
.text:0000000000028EB0                 LDP             X8, X0, [SP,#0xB0+var_B0] ; void *
.text:0000000000028EB4                 MOV             X19, SP
.text:0000000000028EB8                 LDR             X9, [X8,#8]
.text:0000000000028EBC                 CMP             X0, X19
.text:0000000000028EC0                 LDR             X10, [X0]
.text:0000000000028EC4                 STR             X9, [X10,#8]
.text:0000000000028EC8                 LDR             X9, [X0]
.text:0000000000028ECC                 LDR             X8, [X8,#8]
.text:0000000000028ED0                 STR             X9, [X8]
.text:0000000000028ED4                 STR             XZR, [SP,#0xB0+var_A0]
.text:0000000000028ED8                 B.EQ            loc_28EF0
.text:0000000000028EDC loc_28EDC                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+3EC↓j
.text:0000000000028EDC                 LDR             X21, [X0,#8]
.text:0000000000028EE0                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028EE4                 MOV             X0, X21
.text:0000000000028EE8                 CMP             X21, X19
.text:0000000000028EEC                 B.NE            loc_28EDC
.text:0000000000028EF0 loc_28EF0                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+3AC↑j
.text:0000000000028EF0                                         ; gui::LayoutManager::updateWidgetsLayouts(bool)+3D8↑j
.text:0000000000028EF0                 LDR             X19, [SP,#0xB0+var_88]
.text:0000000000028EF4                 CBZ             X19, loc_28F6C
.text:0000000000028EF8                 LDR             X8, [SP,#0xB0+var_80]
.text:0000000000028EFC                 CMP             X8, X19
.text:0000000000028F00                 B.EQ            loc_28F60
.text:0000000000028F04 loc_28F04                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+454↓j
.text:0000000000028F04                 LDUR            X9, [X8,#-0x18]
.text:0000000000028F08                 SUB             X21, X8, #0x28 ; '('
.text:0000000000028F0C                 CBZ             X9, loc_28F4C
.text:0000000000028F10                 LDP             X9, X0, [X8,#-0x28] ; void *
.text:0000000000028F14                 LDR             X10, [X9,#8]
.text:0000000000028F18                 CMP             X0, X21
.text:0000000000028F1C                 LDR             X11, [X0]
.text:0000000000028F20                 STR             X10, [X11,#8]
.text:0000000000028F24                 LDR             X10, [X0]
.text:0000000000028F28                 LDR             X9, [X9,#8]
.text:0000000000028F2C                 STR             X10, [X9]
.text:0000000000028F30                 STUR            XZR, [X8,#-0x18]
.text:0000000000028F34                 B.EQ            loc_28F4C
.text:0000000000028F38 loc_28F38                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+448↓j
.text:0000000000028F38                 LDR             X22, [X0,#8]
.text:0000000000028F3C                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028F40                 MOV             X0, X22
.text:0000000000028F44                 CMP             X22, X21
.text:0000000000028F48                 B.NE            loc_28F38
.text:0000000000028F4C loc_28F4C                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+40C↑j
.text:0000000000028F4C                                         ; gui::LayoutManager::updateWidgetsLayouts(bool)+434↑j
.text:0000000000028F4C                 MOV             X8, X21
.text:0000000000028F50                 CMP             X21, X19
.text:0000000000028F54                 B.NE            loc_28F04
.text:0000000000028F58                 LDR             X0, [SP,#0xB0+var_88]
.text:0000000000028F5C                 B               loc_28F64
.text:0000000000028F60 ; ---------------------------------------------------------------------------
.text:0000000000028F60 loc_28F60                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+400↑j
.text:0000000000028F60                 MOV             X0, X19 ; void *
.text:0000000000028F64 loc_28F64                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+45C↑j
.text:0000000000028F64                 STR             X19, [SP,#0xB0+var_80]
.text:0000000000028F68                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028F6C loc_28F6C                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+3F4↑j
.text:0000000000028F6C                 LDR             X19, [SP,#0xB0+var_70]
.text:0000000000028F70                 CBZ             X19, loc_28FE8
.text:0000000000028F74                 LDR             X8, [SP,#0xB0+var_68]
.text:0000000000028F78                 CMP             X8, X19
.text:0000000000028F7C                 B.EQ            loc_28FDC
.text:0000000000028F80 loc_28F80                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+4D0↓j
.text:0000000000028F80                 LDUR            X9, [X8,#-0x18]
.text:0000000000028F84                 SUB             X21, X8, #0x28 ; '('
.text:0000000000028F88                 CBZ             X9, loc_28FC8
.text:0000000000028F8C                 LDP             X9, X0, [X8,#-0x28] ; void *
.text:0000000000028F90                 LDR             X10, [X9,#8]
.text:0000000000028F94                 CMP             X0, X21
.text:0000000000028F98                 LDR             X11, [X0]
.text:0000000000028F9C                 STR             X10, [X11,#8]
.text:0000000000028FA0                 LDR             X10, [X0]
.text:0000000000028FA4                 LDR             X9, [X9,#8]
.text:0000000000028FA8                 STR             X10, [X9]
.text:0000000000028FAC                 STUR            XZR, [X8,#-0x18]
.text:0000000000028FB0                 B.EQ            loc_28FC8
.text:0000000000028FB4 loc_28FB4                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+4C4↓j
.text:0000000000028FB4                 LDR             X22, [X0,#8]
.text:0000000000028FB8                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028FBC                 MOV             X0, X22
.text:0000000000028FC0                 CMP             X22, X21
.text:0000000000028FC4                 B.NE            loc_28FB4
.text:0000000000028FC8 loc_28FC8                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+488↑j
.text:0000000000028FC8                                         ; gui::LayoutManager::updateWidgetsLayouts(bool)+4B0↑j
.text:0000000000028FC8                 MOV             X8, X21
.text:0000000000028FCC                 CMP             X21, X19
.text:0000000000028FD0                 B.NE            loc_28F80
.text:0000000000028FD4                 LDR             X0, [SP,#0xB0+var_70]
.text:0000000000028FD8                 B               loc_28FE0
.text:0000000000028FDC ; ---------------------------------------------------------------------------
.text:0000000000028FDC loc_28FDC                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+47C↑j
.text:0000000000028FDC                 MOV             X0, X19 ; void *
.text:0000000000028FE0 loc_28FE0                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+4D8↑j
.text:0000000000028FE0                 STR             X19, [SP,#0xB0+var_68]
.text:0000000000028FE4                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000028FE8 loc_28FE8                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+470↑j
.text:0000000000028FE8                 LDR             X8, [X20,#0x28]
.text:0000000000028FEC                 LDUR            X9, [X29,#var_48]
.text:0000000000028FF0                 CMP             X8, X9
.text:0000000000028FF4                 B.NE            loc_29014
.text:0000000000028FF8                 LDP             X29, X30, [SP,#0xB0+var_s0]
.text:0000000000028FFC                 LDP             X20, X19, [SP,#0xB0+var_10]
.text:0000000000029000                 LDP             X22, X21, [SP,#0xB0+var_20]
.text:0000000000029004                 LDP             X24, X23, [SP,#0xB0+var_30]
.text:0000000000029008                 LDP             D9, D8, [SP,#0xB0+var_40]
.text:000000000002900C                 ADD             SP, SP, #0xC0
.text:0000000000029010                 RET
.text:0000000000029014 ; ---------------------------------------------------------------------------
.text:0000000000029014 loc_29014                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+4F4↑j
.text:0000000000029014                 BL              .__stack_chk_fail
.text:0000000000029014 ; } // starts at 28B00
.text:0000000000029014 ; End of function gui::LayoutManager::updateWidgetsLayouts(bool)
.text:0000000000029018 ; =============== S U B R O U T I N E =======================================
.text:0000000000029018 ; Attributes: bp-based frame
.text:0000000000029018 sub_29018                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+18C↑p
.text:0000000000029018                                         ; sub_291D0+4C↓p ...
.text:0000000000029018 var_20          = -0x20
.text:0000000000029018 var_10          = -0x10
.text:0000000000029018 var_s0          =  0
.text:0000000000029018 ; FUNCTION CHUNK AT .text:0000000000029370 SIZE 000001DC BYTES
.text:0000000000029018 ; FUNCTION CHUNK AT .text:0000000000029550 SIZE 000001FC BYTES
.text:0000000000029018 ; __unwind {
.text:0000000000029018                 STR             X21, [SP,#-0x10+var_20]!
.text:000000000002901C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029020                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029024                 ADD             X29, SP, #0x20
.text:0000000000029028                 LDR             W8, [X1,#0x18]
.text:000000000002902C                 CMP             W8, #7
.text:0000000000029030                 B.HI            loc_29130
.text:0000000000029034                 MOV             X20, X1
.text:0000000000029038                 MOV             X19, X0
.text:000000000002903C                 MOV             W9, #1
.text:0000000000029040                 MOV             W10, #0x29 ; ')'
.text:0000000000029044                 LSL             W8, W9, W8
.text:0000000000029048                 TST             W8, W10
.text:000000000002904C                 B.NE            loc_29074
.text:0000000000029050                 MOV             W9, #0x94
.text:0000000000029054                 TST             W8, W9
.text:0000000000029058                 B.EQ            loc_2908C
.text:000000000002905C                 MOV             X0, X19
.text:0000000000029060                 MOV             X1, X20
.text:0000000000029064                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029068                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000002906C                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029070                 B               loc_29550
.text:0000000000029074 ; ---------------------------------------------------------------------------
.text:0000000000029074 loc_29074                               ; CODE XREF: sub_29018+34↑j
.text:0000000000029074                 MOV             X0, X19
.text:0000000000029078                 MOV             X1, X20
.text:000000000002907C                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029080                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029084                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029088                 B               loc_29370
.text:000000000002908C ; ---------------------------------------------------------------------------
.text:000000000002908C loc_2908C                               ; CODE XREF: sub_29018+40↑j
.text:000000000002908C                 FMOV            S0, #0.5
.text:0000000000029090                 LDR             S1, [X20,#0x10]
.text:0000000000029094                 STR             WZR, [X20,#0xC]
.text:0000000000029098                 FMUL            S2, S1, S0
.text:000000000002909C                 FSUB            S0, S0, S2
.text:00000000000290A0                 STR             S0, [X20,#8]
.text:00000000000290A4                 FADD            S2, S1, S0
.text:00000000000290A8                 LDR             X21, [X19,#8]
.text:00000000000290AC                 CMP             X19, X21
.text:00000000000290B0                 B.EQ            loc_29120
.text:00000000000290B4                 FMOV            S3, WZR
.text:00000000000290B8                 LDR             S4, [X20,#0x14]
.text:00000000000290BC                 MOV             X8, X21
.text:00000000000290C0                 FADD            S5, S4, S3
.text:00000000000290C4 loc_290C4                               ; CODE XREF: sub_29018+104↓j
.text:00000000000290C4                 LDR             X9, [X8,#0x10]
.text:00000000000290C8                 LDP             S16, S6, [X9,#0xC]
.text:00000000000290CC                 LDR             S7, [X9,#8]
.text:00000000000290D0                 LDR             S17, [X9,#0x14]
.text:00000000000290D4                 FADD            S18, S7, S6
.text:00000000000290D8                 FADD            S6, S1, S6
.text:00000000000290DC                 FADD            S19, S16, S17
.text:00000000000290E0                 FMIN            S16, S16, S3
.text:00000000000290E4                 FADD            S17, S4, S17
.text:00000000000290E8                 FCMP            S18, S2
.text:00000000000290EC                 FCSEL           S18, S2, S18, MI
.text:00000000000290F0                 FCMP            S7, S0
.text:00000000000290F4                 FCSEL           S7, S0, S7, GT
.text:00000000000290F8                 FCMP            S19, S5
.text:00000000000290FC                 FSUB            S7, S18, S7
.text:0000000000029100                 FCSEL           S18, S5, S19, MI
.text:0000000000029104                 FCMP            S7, S6
.text:0000000000029108                 FSUB            S16, S18, S16
.text:000000000002910C                 FCCMP           S16, S17, #0, MI
.text:0000000000029110                 B.MI            loc_29130
.text:0000000000029114                 LDR             X8, [X8,#8]
.text:0000000000029118                 CMP             X19, X8
.text:000000000002911C                 B.NE            loc_290C4
.text:0000000000029120 loc_29120                               ; CODE XREF: sub_29018+98↑j
.text:0000000000029120                 FCMP            S0, #0.0
.text:0000000000029124                 FMOV            S1, #1.0
.text:0000000000029128                 FCCMP           S2, S1, #2, GE
.text:000000000002912C                 B.LS            loc_2913C
.text:0000000000029130 loc_29130                               ; CODE XREF: sub_29018+18↑j
.text:0000000000029130                                         ; sub_29018+F8↑j
.text:0000000000029130                 MOV             W0, WZR
.text:0000000000029134                 B               loc_291BC
.text:0000000000029138 ; ---------------------------------------------------------------------------
.text:0000000000029138 loc_29138                               ; CODE XREF: sub_29018+138↓j
.text:0000000000029138                 LDR             X21, [X21,#8]
.text:000000000002913C loc_2913C                               ; CODE XREF: sub_29018+114↑j
.text:000000000002913C                 CMP             X19, X21
.text:0000000000029140                 B.EQ            loc_2918C
.text:0000000000029144                 LDR             X8, [X21,#0x10]
.text:0000000000029148                 LDR             S1, [X8,#8]
.text:000000000002914C                 FCMP            S0, S1
.text:0000000000029150                 B.LE            loc_29138
.text:0000000000029154                 MOV             W0, #0x18 ; unsigned __int64
.text:0000000000029158                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002915C                 MOV             X8, X0
.text:0000000000029160                 MOV             W0, #1
.text:0000000000029164                 STR             XZR, [X8]
.text:0000000000029168                 STR             X20, [X8,#0x10]
.text:000000000002916C                 LDR             X9, [X21]
.text:0000000000029170                 STR             X8, [X9,#8]
.text:0000000000029174                 LDR             X9, [X21]
.text:0000000000029178                 STR             X9, [X8]
.text:000000000002917C                 STR             X8, [X21]
.text:0000000000029180                 LDR             X9, [X19,#0x10]
.text:0000000000029184                 STR             X21, [X8,#8]
.text:0000000000029188                 B               loc_291B4
.text:000000000002918C ; ---------------------------------------------------------------------------
.text:000000000002918C loc_2918C                               ; CODE XREF: sub_29018+128↑j
.text:000000000002918C                 MOV             W0, #0x18 ; unsigned __int64
.text:0000000000029190                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000029194                 LDR             X9, [X19]
.text:0000000000029198                 MOV             X8, X0
.text:000000000002919C                 MOV             W0, #1
.text:00000000000291A0                 STP             X19, X20, [X8,#8]
.text:00000000000291A4                 STR             X9, [X8]
.text:00000000000291A8                 STR             X8, [X9,#8]
.text:00000000000291AC                 LDR             X9, [X19,#0x10]
.text:00000000000291B0                 STR             X8, [X19]
.text:00000000000291B4 loc_291B4                               ; CODE XREF: sub_29018+170↑j
.text:00000000000291B4                 ADD             X9, X9, #1
.text:00000000000291B8                 STR             X9, [X19,#0x10]
.text:00000000000291BC loc_291BC                               ; CODE XREF: sub_29018+11C↑j
.text:00000000000291BC                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000291C0                 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000291C4                 LDR             X21, [SP+0x20+var_20],#0x30
.text:00000000000291C8                 RET
.text:00000000000291C8 ; } // starts at 29018
.text:00000000000291C8 ; End of function sub_29018
.text:00000000000291C8 ; ---------------------------------------------------------------------------
.text:00000000000291CC                 ALIGN 0x10
.text:00000000000291D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000291D0 ; Attributes: bp-based frame
.text:00000000000291D0 sub_291D0                               ; CODE XREF: gui::LayoutManager::updateWidgetsLayouts(bool)+1A8↑p
.text:00000000000291D0                                         ; gui::LayoutManager::updateWidgetsLayouts(bool)+1C4↑p
.text:00000000000291D0 var_70          = -0x70
.text:00000000000291D0 var_60          = -0x60
.text:00000000000291D0 var_50          = -0x50
.text:00000000000291D0 var_48          = -0x48
.text:00000000000291D0 var_40          = -0x40
.text:00000000000291D0 var_30          = -0x30
.text:00000000000291D0 var_20          = -0x20
.text:00000000000291D0 var_10          = -0x10
.text:00000000000291D0 var_s0          =  0
.text:00000000000291D0 ; __unwind {
.text:00000000000291D0                 SUB             SP, SP, #0x80
.text:00000000000291D4                 STR             X25, [SP,#0x70+var_40]
.text:00000000000291D8                 STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000291DC                 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000291E0                 STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000291E4                 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000291E8                 ADD             X29, SP, #0x70
.text:00000000000291EC                 MRS             X24, #3, c13, c0, #2
.text:00000000000291F0                 MOV             X22, X3
.text:00000000000291F4                 LDR             X8, [X24,#0x28]
.text:00000000000291F8                 MOV             X23, X2
.text:00000000000291FC                 MOV             X19, X1
.text:0000000000029200                 MOV             X20, X0
.text:0000000000029204                 STR             X8, [SP,#0x70+var_48]
.text:0000000000029208                 LDP             X21, X25, [X1]
.text:000000000002920C                 CMP             X21, X25
.text:0000000000029210                 B.EQ            loc_29234
.text:0000000000029214 loc_29214                               ; CODE XREF: sub_291D0+5C↓j
.text:0000000000029214                 MOV             X0, X21
.text:0000000000029218                 MOV             X1, X20
.text:000000000002921C                 BL              sub_29018
.text:0000000000029220                 TBNZ            W0, #0, loc_29334
.text:0000000000029224                 ADD             X21, X21, #0x28 ; '('
.text:0000000000029228                 CMP             X25, X21
.text:000000000002922C                 B.NE            loc_29214
.text:0000000000029230                 LDR             X21, [X19,#8]
.text:0000000000029234 loc_29234                               ; CODE XREF: sub_291D0+40↑j
.text:0000000000029234                 LDR             X11, [X19,#0x10]
.text:0000000000029238                 MOV             X9, SP
.text:000000000002923C                 LDR             X8, [X23]
.text:0000000000029240                 LDR             X10, [X22]
.text:0000000000029244                 STP             X9, X9, [SP,#0x70+var_70]
.text:0000000000029248                 CMP             X21, X11
.text:000000000002924C                 STP             XZR, X8, [SP,#0x70+var_60]
.text:0000000000029250                 STR             X10, [SP,#0x70+var_50]
.text:0000000000029254                 B.CS            loc_292C8
.text:0000000000029258                 STP             X21, X21, [X21]
.text:000000000002925C                 STR             XZR, [X21,#0x10]
.text:0000000000029260                 LDR             X8, [SP,#0x70+var_60]
.text:0000000000029264                 CBZ             X8, loc_292B0
.text:0000000000029268                 LDP             X8, X9, [SP,#0x70+var_70]
.text:000000000002926C                 LDR             X10, [X8,#8]
.text:0000000000029270                 LDR             X11, [X9]
.text:0000000000029274                 STR             X10, [X11,#8]
.text:0000000000029278                 LDR             X10, [X9]
.text:000000000002927C                 LDR             X11, [X8,#8]
.text:0000000000029280                 STR             X10, [X11]
.text:0000000000029284                 LDR             X10, [X21]
.text:0000000000029288                 STR             X9, [X10,#8]
.text:000000000002928C                 LDR             X10, [X21]
.text:0000000000029290                 STR             X10, [X9]
.text:0000000000029294                 STR             X8, [X21]
.text:0000000000029298                 STR             X21, [X8,#8]
.text:000000000002929C                 LDR             X8, [SP,#0x70+var_60]
.text:00000000000292A0                 LDR             X9, [X21,#0x10]
.text:00000000000292A4                 ADD             X8, X9, X8
.text:00000000000292A8                 STR             X8, [X21,#0x10]
.text:00000000000292AC                 STR             XZR, [SP,#0x70+var_60]
.text:00000000000292B0 loc_292B0                               ; CODE XREF: sub_291D0+94↑j
.text:00000000000292B0                 LDUR            Q0, [SP,#0x18]
.text:00000000000292B4                 STUR            Q0, [X21,#0x18]
.text:00000000000292B8                 LDR             X8, [X19,#8]
.text:00000000000292BC                 ADD             X8, X8, #0x28 ; '('
.text:00000000000292C0                 STR             X8, [X19,#8]
.text:00000000000292C4                 B               loc_29320
.text:00000000000292C8 ; ---------------------------------------------------------------------------
.text:00000000000292C8 loc_292C8                               ; CODE XREF: sub_291D0+84↑j
.text:00000000000292C8                 MOV             X1, SP
.text:00000000000292CC                 MOV             X0, X19
.text:00000000000292D0                 MOV             X21, SP
.text:00000000000292D4                 BL              loc_29750
.text:00000000000292D8                 LDR             X8, [SP,#0x70+var_60]
.text:00000000000292DC                 CBZ             X8, loc_29320
.text:00000000000292E0                 LDP             X8, X0, [SP,#0x70+var_70] ; void *
.text:00000000000292E4                 LDR             X9, [X8,#8]
.text:00000000000292E8                 CMP             X0, X21
.text:00000000000292EC                 LDR             X10, [X0]
.text:00000000000292F0                 STR             X9, [X10,#8]
.text:00000000000292F4                 LDR             X9, [X0]
.text:00000000000292F8                 LDR             X8, [X8,#8]
.text:00000000000292FC                 STR             X9, [X8]
.text:0000000000029300                 STR             XZR, [SP,#0x70+var_60]
.text:0000000000029304                 B.EQ            loc_29320
.text:0000000000029308                 MOV             X21, SP
.text:000000000002930C loc_2930C                               ; CODE XREF: sub_291D0+14C↓j
.text:000000000002930C                 LDR             X22, [X0,#8]
.text:0000000000029310                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000029314                 MOV             X0, X22
.text:0000000000029318                 CMP             X22, X21
.text:000000000002931C                 B.NE            loc_2930C
.text:0000000000029320 loc_29320                               ; CODE XREF: sub_291D0+F4↑j
.text:0000000000029320                                         ; sub_291D0+10C↑j ...
.text:0000000000029320                 LDR             X8, [X19,#8]
.text:0000000000029324                 MOV             X1, X20
.text:0000000000029328                 SUB             X0, X8, #0x28 ; '('
.text:000000000002932C                 BL              sub_29018
.text:0000000000029330                 B               loc_29338
.text:0000000000029334 ; ---------------------------------------------------------------------------
.text:0000000000029334 loc_29334                               ; CODE XREF: sub_291D0+50↑j
.text:0000000000029334                 MOV             W0, #1
.text:0000000000029338 loc_29338                               ; CODE XREF: sub_291D0+160↑j
.text:0000000000029338                 LDR             X8, [X24,#0x28]
.text:000000000002933C                 LDR             X9, [SP,#0x70+var_48]
.text:0000000000029340                 CMP             X8, X9
.text:0000000000029344                 B.NE            loc_29368
.text:0000000000029348                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:000000000002934C                 LDP             X20, X19, [SP,#0x70+var_10]
.text:0000000000029350                 LDP             X22, X21, [SP,#0x70+var_20]
.text:0000000000029354                 LDP             X24, X23, [SP,#0x70+var_30]
.text:0000000000029358                 LDR             X25, [SP,#0x70+var_40]
.text:000000000002935C                 AND             W0, W0, #1
.text:0000000000029360                 ADD             SP, SP, #0x80
.text:0000000000029364                 RET
.text:0000000000029368 ; ---------------------------------------------------------------------------
.text:0000000000029368 loc_29368                               ; CODE XREF: sub_291D0+174↑j
.text:0000000000029368                 BL              .__stack_chk_fail
.text:0000000000029368 ; } // starts at 291D0
.text:0000000000029368 ; End of function sub_291D0
.text:0000000000029368 ; ---------------------------------------------------------------------------
.text:000000000002936C                 ALIGN 0x10
.text:0000000000029370 ; START OF FUNCTION CHUNK FOR sub_29018
.text:0000000000029370 loc_29370                               ; CODE XREF: sub_29018+70↑j
.text:0000000000029370 ; __unwind {
.text:0000000000029370                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000029374                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029378                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000002937C                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000029380                 LDR             S0, [X0,#0x18]
.text:0000000000029384                 MOV             X20, X1
.text:0000000000029388                 STR             WZR, [X1,#0xC]
.text:000000000002938C                 MOV             X19, X0
.text:0000000000029390                 STR             S0, [X1,#8]
.text:0000000000029394                 LDR             X21, [X0,#8]
.text:0000000000029398                 CMP             X0, X21
.text:000000000002939C                 B.EQ            loc_293FC
.text:00000000000293A0                 MOVI            D1, #0
.text:00000000000293A4                 LDR             D2, [X20,#0x10]
.text:00000000000293A8                 MOV             X8, X21
.text:00000000000293AC                 INS             V1.S[0], V0.S[0]
.text:00000000000293B0                 FADD            V3.2S, V1.2S, V2.2S
.text:00000000000293B4 loc_293B4                               ; CODE XREF: sub_29018+3E0↓j
.text:00000000000293B4                 LDR             X9, [X8,#0x10]
.text:00000000000293B8                 LDP             D4, D5, [X9,#8]
.text:00000000000293BC                 FADD            V6.2S, V4.2S, V5.2S
.text:00000000000293C0                 FCMGT           V7.2S, V4.2S, V1.2S
.text:00000000000293C4                 FADD            V5.2S, V2.2S, V5.2S
.text:00000000000293C8                 FCMGT           V16.2S, V3.2S, V6.2S
.text:00000000000293CC                 BSL             V7.8B, V1.8B, V4.8B
.text:00000000000293D0                 BSL             V16.8B, V3.8B, V6.8B
.text:00000000000293D4                 FSUB            V4.2S, V16.2S, V7.2S
.text:00000000000293D8                 FCMGT           V4.2S, V5.2S, V4.2S
.text:00000000000293DC                 MVN             V4.8B, V4.8B
.text:00000000000293E0                 FMOV            W9, S4
.text:00000000000293E4                 TBNZ            W9, #0, loc_293F0
.text:00000000000293E8                 UMOV            W9, V4.S[1]
.text:00000000000293EC                 TBZ             W9, #0, loc_29418
.text:00000000000293F0 loc_293F0                               ; CODE XREF: sub_29018+3CC↑j
.text:00000000000293F0                 LDR             X8, [X8,#8]
.text:00000000000293F4                 CMP             X19, X8
.text:00000000000293F8                 B.NE            loc_293B4
.text:00000000000293FC loc_293FC                               ; CODE XREF: sub_29018+384↑j
.text:00000000000293FC                 FCMP            S0, #0.0
.text:0000000000029400                 B.LT            loc_29418
.text:0000000000029404                 LDR             S1, [X20,#0x10]
.text:0000000000029408                 FADD            S0, S0, S1
.text:000000000002940C                 FMOV            S1, #1.0
.text:0000000000029410                 FCMP            S0, S1
.text:0000000000029414                 B.LS            loc_294D8
.text:0000000000029418 loc_29418                               ; CODE XREF: sub_29018+3D4↑j
.text:0000000000029418                                         ; sub_29018+3E8↑j
.text:0000000000029418                 CMP             X19, X21
.text:000000000002941C                 B.EQ            loc_294D0
.text:0000000000029420                 FMOV            S0, #1.0
.text:0000000000029424                 MOVI            D1, #0
.text:0000000000029428 loc_29428                               ; CODE XREF: sub_29018+4B4↓j
.text:0000000000029428                 LDR             X8, [X21,#0x10]
.text:000000000002942C                 LDR             S2, [X8,#8]
.text:0000000000029430                 LDR             S3, [X8,#0x10]
.text:0000000000029434                 FADD            S2, S2, S3
.text:0000000000029438                 LDR             S3, [X19,#0x20]
.text:000000000002943C                 STR             WZR, [X20,#0xC]
.text:0000000000029440                 FADD            S2, S2, S3
.text:0000000000029444                 STR             S2, [X20,#8]
.text:0000000000029448                 LDR             X8, [X19,#8]
.text:000000000002944C                 CMP             X19, X8
.text:0000000000029450                 B.EQ            loc_294AC
.text:0000000000029454                 MOV             V3.16B, V1.16B
.text:0000000000029458                 LDR             D4, [X20,#0x10]
.text:000000000002945C                 INS             V3.S[0], V2.S[0]
.text:0000000000029460                 FADD            V5.2S, V3.2S, V4.2S
.text:0000000000029464 loc_29464                               ; CODE XREF: sub_29018+490↓j
.text:0000000000029464                 LDR             X9, [X8,#0x10]
.text:0000000000029468                 LDP             D6, D7, [X9,#8]
.text:000000000002946C                 FADD            V16.2S, V6.2S, V7.2S
.text:0000000000029470                 FCMGT           V17.2S, V6.2S, V3.2S
.text:0000000000029474                 FADD            V7.2S, V4.2S, V7.2S
.text:0000000000029478                 FCMGT           V18.2S, V5.2S, V16.2S
.text:000000000002947C                 BSL             V17.8B, V3.8B, V6.8B
.text:0000000000029480                 BSL             V18.8B, V5.8B, V16.8B
.text:0000000000029484                 FSUB            V6.2S, V18.2S, V17.2S
.text:0000000000029488                 FCMGT           V6.2S, V7.2S, V6.2S
.text:000000000002948C                 MVN             V6.8B, V6.8B
.text:0000000000029490                 FMOV            W9, S6
.text:0000000000029494                 TBNZ            W9, #0, loc_294A0
.text:0000000000029498                 UMOV            W9, V6.S[1]
.text:000000000002949C                 TBZ             W9, #0, loc_294C4
.text:00000000000294A0 loc_294A0                               ; CODE XREF: sub_29018+47C↑j
.text:00000000000294A0                 LDR             X8, [X8,#8]
.text:00000000000294A4                 CMP             X19, X8
.text:00000000000294A8                 B.NE            loc_29464
.text:00000000000294AC loc_294AC                               ; CODE XREF: sub_29018+438↑j
.text:00000000000294AC                 FCMP            S2, #0.0
.text:00000000000294B0                 B.LT            loc_294C4
.text:00000000000294B4                 LDR             S3, [X20,#0x10]
.text:00000000000294B8                 FADD            S2, S2, S3
.text:00000000000294BC                 FCMP            S2, S0
.text:00000000000294C0                 B.LS            loc_29500
.text:00000000000294C4 loc_294C4                               ; CODE XREF: sub_29018+484↑j
.text:00000000000294C4                                         ; sub_29018+498↑j
.text:00000000000294C4                 LDR             X21, [X21,#8]
.text:00000000000294C8                 CMP             X19, X21
.text:00000000000294CC                 B.NE            loc_29428
.text:00000000000294D0 loc_294D0                               ; CODE XREF: sub_29018+404↑j
.text:00000000000294D0                 MOV             W0, WZR
.text:00000000000294D4                 B               loc_2953C
.text:00000000000294D8 ; ---------------------------------------------------------------------------
.text:00000000000294D8 loc_294D8                               ; CODE XREF: sub_29018+3FC↑j
.text:00000000000294D8                 MOV             W0, #0x18 ; unsigned __int64
.text:00000000000294DC                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000294E0                 MOV             X8, X0
.text:00000000000294E4                 MOV             W0, #1
.text:00000000000294E8                 STP             X21, X20, [X8,#8]
.text:00000000000294EC                 STR             X19, [X8]
.text:00000000000294F0                 STR             X8, [X21]
.text:00000000000294F4                 LDR             X9, [X19,#0x10]
.text:00000000000294F8                 STR             X8, [X19,#8]
.text:00000000000294FC                 B               loc_29534
.text:0000000000029500 ; ---------------------------------------------------------------------------
.text:0000000000029500 loc_29500                               ; CODE XREF: sub_29018+4A8↑j
.text:0000000000029500                 MOV             W0, #0x18 ; unsigned __int64
.text:0000000000029504                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000029508                 MOV             X8, X0
.text:000000000002950C                 MOV             W0, #1
.text:0000000000029510                 STR             XZR, [X8]
.text:0000000000029514                 STR             X20, [X8,#0x10]
.text:0000000000029518                 LDR             X9, [X21]
.text:000000000002951C                 STR             X8, [X9,#8]
.text:0000000000029520                 LDR             X9, [X21]
.text:0000000000029524                 STR             X9, [X8]
.text:0000000000029528                 STR             X8, [X21]
.text:000000000002952C                 LDR             X9, [X19,#0x10]
.text:0000000000029530                 STR             X21, [X8,#8]
.text:0000000000029534 loc_29534                               ; CODE XREF: sub_29018+4E4↑j
.text:0000000000029534                 ADD             X9, X9, #1
.text:0000000000029538                 STR             X9, [X19,#0x10]
.text:000000000002953C loc_2953C                               ; CODE XREF: sub_29018+4BC↑j
.text:000000000002953C                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029540                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029544                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029548                 RET
.text:0000000000029548 ; } // starts at 29370
.text:0000000000029548 ; END OF FUNCTION CHUNK FOR sub_29018
.text:0000000000029548 ; ---------------------------------------------------------------------------
.text:000000000002954C                 ALIGN 0x10
.text:0000000000029550 ; START OF FUNCTION CHUNK FOR sub_29018
.text:0000000000029550 loc_29550                               ; CODE XREF: sub_29018+58↑j
.text:0000000000029550 ; __unwind {
.text:0000000000029550                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000029554                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029558                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000002955C                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000029560                 FMOV            S0, #1.0
.text:0000000000029564                 LDR             S1, [X1,#0x10]
.text:0000000000029568                 LDR             S2, [X0,#0x18]
.text:000000000002956C                 MOV             X20, X1
.text:0000000000029570                 STR             WZR, [X1,#0xC]
.text:0000000000029574                 MOV             X19, X0
.text:0000000000029578                 FSUB            S3, S0, S1
.text:000000000002957C                 FSUB            S2, S3, S2
.text:0000000000029580                 STR             S2, [X1,#8]
.text:0000000000029584                 FADD            S3, S1, S2
.text:0000000000029588                 LDR             X8, [X0,#8]
.text:000000000002958C                 CMP             X0, X8
.text:0000000000029590                 B.EQ            loc_29600
.text:0000000000029594                 FMOV            S4, WZR
.text:0000000000029598                 LDR             S5, [X20,#0x14]
.text:000000000002959C                 MOV             X9, X8
.text:00000000000295A0                 FADD            S6, S5, S4
.text:00000000000295A4 loc_295A4                               ; CODE XREF: sub_29018+5E4↓j
.text:00000000000295A4                 LDR             X10, [X9,#0x10]
.text:00000000000295A8                 LDP             S17, S7, [X10,#0xC]
.text:00000000000295AC                 LDR             S16, [X10,#8]
.text:00000000000295B0                 LDR             S18, [X10,#0x14]
.text:00000000000295B4                 FADD            S19, S16, S7
.text:00000000000295B8                 FADD            S7, S1, S7
.text:00000000000295BC                 FADD            S20, S17, S18
.text:00000000000295C0                 FMIN            S17, S17, S4
.text:00000000000295C4                 FADD            S18, S5, S18
.text:00000000000295C8                 FCMP            S19, S3
.text:00000000000295CC                 FCSEL           S19, S3, S19, MI
.text:00000000000295D0                 FCMP            S16, S2
.text:00000000000295D4                 FCSEL           S16, S2, S16, GT
.text:00000000000295D8                 FCMP            S20, S6
.text:00000000000295DC                 FSUB            S16, S19, S16
.text:00000000000295E0                 FCSEL           S19, S6, S20, MI
.text:00000000000295E4                 FCMP            S16, S7
.text:00000000000295E8                 FSUB            S17, S19, S17
.text:00000000000295EC                 FCCMP           S17, S18, #0, MI
.text:00000000000295F0                 B.MI            loc_2960C
.text:00000000000295F4                 LDR             X9, [X9,#8]
.text:00000000000295F8                 CMP             X19, X9
.text:00000000000295FC                 B.NE            loc_295A4
.text:0000000000029600 loc_29600                               ; CODE XREF: sub_29018+578↑j
.text:0000000000029600                 FCMP            S2, #0.0
.text:0000000000029604                 FCCMP           S3, S0, #2, GE
.text:0000000000029608                 B.LS            loc_296D4
.text:000000000002960C loc_2960C                               ; CODE XREF: sub_29018+5D8↑j
.text:000000000002960C                 CMP             X19, X8
.text:0000000000029610                 B.EQ            loc_296CC
.text:0000000000029614                 FMOV            S2, WZR
.text:0000000000029618                 MOV             X21, X19
.text:000000000002961C loc_2961C                               ; CODE XREF: sub_29018+6B0↓j
.text:000000000002961C                 LDR             X8, [X21]
.text:0000000000029620                 LDR             S4, [X19,#0x20]
.text:0000000000029624                 LDR             X8, [X8,#0x10]
.text:0000000000029628                 LDR             S3, [X8,#8]
.text:000000000002962C                 STR             WZR, [X20,#0xC]
.text:0000000000029630                 FSUB            S3, S3, S1
.text:0000000000029634                 FSUB            S3, S3, S4
.text:0000000000029638                 STR             S3, [X20,#8]
.text:000000000002963C                 FADD            S4, S1, S3
.text:0000000000029640                 LDR             X8, [X19,#8]
.text:0000000000029644                 CMP             X19, X8
.text:0000000000029648                 B.EQ            loc_296B4
.text:000000000002964C                 LDR             S5, [X20,#0x14]
.text:0000000000029650                 MOV             X9, X8
.text:0000000000029654                 FADD            S6, S5, S2
.text:0000000000029658 loc_29658                               ; CODE XREF: sub_29018+698↓j
.text:0000000000029658                 LDR             X10, [X9,#0x10]
.text:000000000002965C                 LDP             S17, S7, [X10,#0xC]
.text:0000000000029660                 LDR             S16, [X10,#8]
.text:0000000000029664                 LDR             S18, [X10,#0x14]
.text:0000000000029668                 FADD            S19, S16, S7
.text:000000000002966C                 FADD            S7, S1, S7
.text:0000000000029670                 FADD            S20, S17, S18
.text:0000000000029674                 FMIN            S17, S17, S2
.text:0000000000029678                 FADD            S18, S5, S18
.text:000000000002967C                 FCMP            S19, S4
.text:0000000000029680                 FCSEL           S19, S4, S19, MI
.text:0000000000029684                 FCMP            S16, S3
.text:0000000000029688                 FCSEL           S16, S3, S16, GT
.text:000000000002968C                 FCMP            S20, S6
.text:0000000000029690                 FSUB            S16, S19, S16
.text:0000000000029694                 FCSEL           S19, S6, S20, MI
.text:0000000000029698                 FCMP            S16, S7
.text:000000000002969C                 FSUB            S17, S19, S17
.text:00000000000296A0                 FCCMP           S17, S18, #0, MI
.text:00000000000296A4                 B.MI            loc_296C0
.text:00000000000296A8                 LDR             X9, [X9,#8]
.text:00000000000296AC                 CMP             X19, X9
.text:00000000000296B0                 B.NE            loc_29658
.text:00000000000296B4 loc_296B4                               ; CODE XREF: sub_29018+630↑j
.text:00000000000296B4                 FCMP            S3, #0.0
.text:00000000000296B8                 FCCMP           S4, S0, #2, GE
.text:00000000000296BC                 B.LS            loc_29700
.text:00000000000296C0 loc_296C0                               ; CODE XREF: sub_29018+68C↑j
.text:00000000000296C0                 LDR             X21, [X21]
.text:00000000000296C4                 CMP             X8, X21
.text:00000000000296C8                 B.NE            loc_2961C
.text:00000000000296CC loc_296CC                               ; CODE XREF: sub_29018+5F8↑j
.text:00000000000296CC                 MOV             W0, WZR
.text:00000000000296D0                 B               loc_2973C
.text:00000000000296D4 ; ---------------------------------------------------------------------------
.text:00000000000296D4 loc_296D4                               ; CODE XREF: sub_29018+5F0↑j
.text:00000000000296D4                 MOV             W0, #0x18 ; unsigned __int64
.text:00000000000296D8                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000296DC                 LDR             X9, [X19]
.text:00000000000296E0                 MOV             X8, X0
.text:00000000000296E4                 MOV             W0, #1
.text:00000000000296E8                 STP             X19, X20, [X8,#8]
.text:00000000000296EC                 STR             X9, [X8]
.text:00000000000296F0                 STR             X8, [X9,#8]
.text:00000000000296F4                 LDR             X9, [X19,#0x10]
.text:00000000000296F8                 STR             X8, [X19]
.text:00000000000296FC                 B               loc_29734
.text:0000000000029700 ; ---------------------------------------------------------------------------
.text:0000000000029700 loc_29700                               ; CODE XREF: sub_29018+6A4↑j
.text:0000000000029700                 MOV             W0, #0x18 ; unsigned __int64
.text:0000000000029704                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000029708                 MOV             X8, X0
.text:000000000002970C                 MOV             W0, #1
.text:0000000000029710                 STR             XZR, [X8]
.text:0000000000029714                 STR             X20, [X8,#0x10]
.text:0000000000029718                 LDR             X9, [X21]
.text:000000000002971C                 STR             X8, [X9,#8]
.text:0000000000029720                 LDR             X9, [X21]
.text:0000000000029724                 STR             X9, [X8]
.text:0000000000029728                 STR             X8, [X21]
.text:000000000002972C                 LDR             X9, [X19,#0x10]
.text:0000000000029730                 STR             X21, [X8,#8]
.text:0000000000029734 loc_29734                               ; CODE XREF: sub_29018+6E4↑j
.text:0000000000029734                 ADD             X9, X9, #1
.text:0000000000029738                 STR             X9, [X19,#0x10]
.text:000000000002973C loc_2973C                               ; CODE XREF: sub_29018+6B8↑j
.text:000000000002973C                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029740                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029744                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029748                 RET
.text:0000000000029748 ; } // starts at 29550
.text:0000000000029748 ; END OF FUNCTION CHUNK FOR sub_29018
.text:0000000000029748 ; ---------------------------------------------------------------------------
.text:000000000002974C                 ALIGN 0x10
.text:0000000000029750 loc_29750                               ; CODE XREF: sub_291D0+104↑p
.text:0000000000029750 ; __unwind {
.text:0000000000029750                 STP             X24, X23, [SP,#-0x40]!
.text:0000000000029754                 STP             X22, X21, [SP,#0x10]
.text:0000000000029758                 STP             X20, X19, [SP,#0x20]
.text:000000000002975C                 STP             X29, X30, [SP,#0x30]
.text:0000000000029760                 ADD             X29, SP, #0x30 ; '0'
.text:0000000000029764                 LDP             X24, X21, [X0]
.text:0000000000029768                 MOV             X9, #0xCCCCCCCCCCCCCCCD
.text:0000000000029770                 MOV             X23, #0x6666666666666666
.text:0000000000029774                 SUB             X8, X21, X24
.text:0000000000029778                 ASR             X8, X8, #3
.text:000000000002977C                 MUL             X22, X8, X9
.text:0000000000029780                 MOV             X19, X0
.text:0000000000029784                 MOVK            X23, #0x666,LSL#48
.text:0000000000029788                 ADD             X8, X22, #1
.text:000000000002978C                 CMP             X8, X23
.text:0000000000029790                 B.HI            loc_29994
.text:0000000000029794                 LDR             X10, [X19,#0x10]
.text:0000000000029798                 MOV             X20, X1
.text:000000000002979C                 SUB             X10, X10, X24
.text:00000000000297A0                 ASR             X10, X10, #3
.text:00000000000297A4                 MUL             X9, X10, X9
.text:00000000000297A8                 MOV             X10, #0x333333333333332
.text:00000000000297B4                 CMP             X9, X10
.text:00000000000297B8                 B.HI            loc_297CC
.text:00000000000297BC                 LSL             X9, X9, #1
.text:00000000000297C0                 CMP             X9, X8
.text:00000000000297C4                 CSEL            X23, X8, X9, CC
.text:00000000000297C8                 CBZ             X23, loc_2998C
.text:00000000000297CC loc_297CC                               ; CODE XREF: .text:00000000000297B8↑j
.text:00000000000297CC                 ADD             X8, X23, X23,LSL#2
.text:00000000000297D0                 LSL             X0, X8, #3
.text:00000000000297D4                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000297D8 loc_297D8                               ; CODE XREF: .text:0000000000029990↓j
.text:00000000000297D8                 MOV             W9, #0x28 ; '('
.text:00000000000297DC                 LDR             X11, [X20,#0x10]
.text:00000000000297E0                 NOP
.text:00000000000297E4                 MADD            X8, X22, X9, X0
.text:00000000000297E8                 MOV             X10, X8
.text:00000000000297EC                 STR             XZR, [X10,#0x10]!
.text:00000000000297F0                 STP             X8, X8, [X8]
.text:00000000000297F4                 CBZ             X11, loc_29844
.text:00000000000297F8                 LDP             X11, X12, [X20]
.text:00000000000297FC                 LDR             X13, [X11,#8]
.text:0000000000029800                 LDR             X14, [X12]
.text:0000000000029804                 STR             X13, [X14,#8]
.text:0000000000029808                 LDR             X13, [X12]
.text:000000000002980C                 LDR             X14, [X11,#8]
.text:0000000000029810                 STR             X13, [X14]
.text:0000000000029814                 LDR             X13, [X8]
.text:0000000000029818                 STR             X12, [X13,#8]
.text:000000000002981C                 LDR             X13, [X8]
.text:0000000000029820                 STR             X13, [X12]
.text:0000000000029824                 STR             X11, [X8]
.text:0000000000029828                 STR             X8, [X11,#8]
.text:000000000002982C                 LDR             X11, [X20,#0x10]
.text:0000000000029830                 LDR             X12, [X10]
.text:0000000000029834                 STR             XZR, [X20,#0x10]
.text:0000000000029838                 LDP             X24, X21, [X19]
.text:000000000002983C                 ADD             X11, X12, X11
.text:0000000000029840                 STR             X11, [X10]
.text:0000000000029844 loc_29844                               ; CODE XREF: .text:00000000000297F4↑j
.text:0000000000029844                 MOV             W10, #0x28 ; '('
.text:0000000000029848                 LDUR            Q0, [X20,#0x18]
.text:000000000002984C                 NOP
.text:0000000000029850                 MADD            X9, X23, X9, X0
.text:0000000000029854                 CMP             X21, X24
.text:0000000000029858                 MADD            X11, X22, X10, X0
.text:000000000002985C                 ADD             X10, X8, #0x28 ; '('
.text:0000000000029860                 STUR            Q0, [X11,#0x18]
.text:0000000000029864                 B.EQ            loc_298F4
.text:0000000000029868                 MOV             X11, XZR
.text:000000000002986C                 SUB             X12, X24, X21
.text:0000000000029870 loc_29870                               ; CODE XREF: .text:00000000000298E4↓j
.text:0000000000029870                 ADD             X13, X8, X11
.text:0000000000029874                 SUB             X15, X13, #0x28 ; '('
.text:0000000000029878                 ADD             X14, X21, X11
.text:000000000002987C                 STUR            XZR, [X13,#-0x18]
.text:0000000000029880                 STP             X15, X15, [X13,#-0x28]
.text:0000000000029884                 LDUR            X16, [X14,#-0x18]
.text:0000000000029888                 CBZ             X16, loc_298D4
.text:000000000002988C                 LDP             X16, X17, [X14,#-0x28]
.text:0000000000029890                 LDR             X0, [X16,#8]
.text:0000000000029894                 LDR             X1, [X17]
.text:0000000000029898                 STR             X0, [X1,#8]
.text:000000000002989C                 LDR             X0, [X17]
.text:00000000000298A0                 LDR             X1, [X16,#8]
.text:00000000000298A4                 STR             X0, [X1]
.text:00000000000298A8                 LDUR            X0, [X13,#-0x28]
.text:00000000000298AC                 STR             X17, [X0,#8]
.text:00000000000298B0                 LDUR            X0, [X13,#-0x28]
.text:00000000000298B4                 STR             X0, [X17]
.text:00000000000298B8                 STUR            X16, [X13,#-0x28]
.text:00000000000298BC                 STR             X15, [X16,#8]
.text:00000000000298C0                 LDUR            X15, [X14,#-0x18]
.text:00000000000298C4                 LDUR            X16, [X13,#-0x18]
.text:00000000000298C8                 ADD             X15, X16, X15
.text:00000000000298CC                 STUR            X15, [X13,#-0x18]
.text:00000000000298D0                 STUR            XZR, [X14,#-0x18]
.text:00000000000298D4 loc_298D4                               ; CODE XREF: .text:0000000000029888↑j
.text:00000000000298D4                 LDUR            Q0, [X14,#-0x10]
.text:00000000000298D8                 SUB             X11, X11, #0x28 ; '('
.text:00000000000298DC                 CMP             X12, X11
.text:00000000000298E0                 STUR            Q0, [X13,#-0x10]
.text:00000000000298E4                 B.NE            loc_29870
.text:00000000000298E8                 LDP             X20, X21, [X19]
.text:00000000000298EC                 ADD             X8, X8, X11
.text:00000000000298F0                 B               loc_298F8
.text:00000000000298F4 ; ---------------------------------------------------------------------------
.text:00000000000298F4 loc_298F4                               ; CODE XREF: .text:0000000000029864↑j
.text:00000000000298F4                 MOV             X20, X21
.text:00000000000298F8 loc_298F8                               ; CODE XREF: .text:00000000000298F0↑j
.text:00000000000298F8                 CMP             X21, X20
.text:00000000000298FC                 STP             X8, X10, [X19]
.text:0000000000029900                 STR             X9, [X19,#0x10]
.text:0000000000029904                 B.EQ            loc_2995C
.text:0000000000029908 loc_29908                               ; CODE XREF: .text:0000000000029958↓j
.text:0000000000029908                 LDUR            X8, [X21,#-0x18]
.text:000000000002990C                 SUB             X19, X21, #0x28 ; '('
.text:0000000000029910                 CBZ             X8, loc_29950
.text:0000000000029914                 LDP             X8, X0, [X21,#-0x28]
.text:0000000000029918                 LDR             X9, [X8,#8]
.text:000000000002991C                 CMP             X0, X19
.text:0000000000029920                 LDR             X10, [X0]
.text:0000000000029924                 STR             X9, [X10,#8]
.text:0000000000029928                 LDR             X9, [X0]
.text:000000000002992C                 LDR             X8, [X8,#8]
.text:0000000000029930                 STR             X9, [X8]
.text:0000000000029934                 STUR            XZR, [X21,#-0x18]
.text:0000000000029938                 B.EQ            loc_29950
.text:000000000002993C loc_2993C                               ; CODE XREF: .text:000000000002994C↓j
.text:000000000002993C                 LDR             X21, [X0,#8]
.text:0000000000029940                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000029944                 MOV             X0, X21
.text:0000000000029948                 CMP             X21, X19
.text:000000000002994C                 B.NE            loc_2993C
.text:0000000000029950 loc_29950                               ; CODE XREF: .text:0000000000029910↑j
.text:0000000000029950                                         ; .text:0000000000029938↑j
.text:0000000000029950                 MOV             X21, X19
.text:0000000000029954                 CMP             X19, X20
.text:0000000000029958                 B.NE            loc_29908
.text:000000000002995C loc_2995C                               ; CODE XREF: .text:0000000000029904↑j
.text:000000000002995C                 CBZ             X20, loc_29978
.text:0000000000029960                 MOV             X0, X20
.text:0000000000029964                 LDP             X29, X30, [SP,#0x30]
.text:0000000000029968                 LDP             X20, X19, [SP,#0x20]
.text:000000000002996C                 LDP             X22, X21, [SP,#0x10]
.text:0000000000029970                 LDP             X24, X23, [SP],#0x40
.text:0000000000029974                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000029978 ; ---------------------------------------------------------------------------
.text:0000000000029978 loc_29978                               ; CODE XREF: .text:loc_2995C↑j
.text:0000000000029978                 LDP             X29, X30, [SP,#0x30]
.text:000000000002997C                 LDP             X20, X19, [SP,#0x20]
.text:0000000000029980                 LDP             X22, X21, [SP,#0x10]
.text:0000000000029984                 LDP             X24, X23, [SP],#0x40
.text:0000000000029988                 RET
.text:000000000002998C ; ---------------------------------------------------------------------------
.text:000000000002998C loc_2998C                               ; CODE XREF: .text:00000000000297C8↑j
.text:000000000002998C                 MOV             X0, XZR
.text:0000000000029990                 B               loc_297D8
.text:0000000000029994 ; ---------------------------------------------------------------------------
.text:0000000000029994 loc_29994                               ; CODE XREF: .text:0000000000029790↑j
.text:0000000000029994                 MOV             X0, X19
.text:0000000000029998                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000029998 ; } // starts at 29750
.text:0000000000029998 ; ---------------------------------------------------------------------------
.text:000000000002999C                 DCD 0
.text:00000000000299A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000299A0 ; Attributes: bp-based frame
.text:00000000000299A0 sub_299A0                               ; CODE XREF: gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+40↑p
.text:00000000000299A0                                         ; gui::LayoutManager::init(std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&,std::__1::vector<gui::RenderArea,std::__1::allocator<gui::RenderArea>> const&)+54↑p
.text:00000000000299A0 var_40          = -0x40
.text:00000000000299A0 var_30          = -0x30
.text:00000000000299A0 var_20          = -0x20
.text:00000000000299A0 var_10          = -0x10
.text:00000000000299A0 var_s0          =  0
.text:00000000000299A0 ; __unwind {
.text:00000000000299A0                 STP             X26, X25, [SP,#-0x10+var_40]!
.text:00000000000299A4                 STP             X24, X23, [SP,#0x40+var_30]
.text:00000000000299A8                 STP             X22, X21, [SP,#0x40+var_20]
.text:00000000000299AC                 STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000299B0                 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000299B4                 ADD             X29, SP, #0x40
.text:00000000000299B8                 LDR             X8, [X0,#0x10]
.text:00000000000299BC                 MOV             X19, X0
.text:00000000000299C0                 LDR             X22, [X0]
.text:00000000000299C4                 MOV             X20, X1
.text:00000000000299C8                 SUB             X21, X2, X1
.text:00000000000299CC                 ASR             X25, X21, #4
.text:00000000000299D0                 SUB             X9, X8, X22
.text:00000000000299D4                 CMP             X25, X9,ASR#4
.text:00000000000299D8                 B.LS            loc_29A2C
.text:00000000000299DC                 CBZ             X22, loc_299F8
.text:00000000000299E0                 MOV             X0, X22 ; void *
.text:00000000000299E4                 STR             X22, [X19,#8]
.text:00000000000299E8                 BL              ._ZdlPv ; operator delete(void *)
.text:00000000000299EC                 MOV             X8, XZR
.text:00000000000299F0                 STP             XZR, XZR, [X19]
.text:00000000000299F4                 STR             XZR, [X19,#0x10]
.text:00000000000299F8 loc_299F8                               ; CODE XREF: sub_299A0+3C↑j
.text:00000000000299F8                 LSR             X9, X25, #0x3C ; '<'
.text:00000000000299FC                 CBNZ            X9, loc_29A24
.text:0000000000029A00                 MOV             X9, #0x7FFFFFFFFFFFFFE
.text:0000000000029A04                 CMP             X9, X8,ASR#4
.text:0000000000029A08                 B.CC            loc_29A9C
.text:0000000000029A0C                 ASR             X8, X8, #3
.text:0000000000029A10                 CMP             X8, X25
.text:0000000000029A14                 B.CC            loc_29AA0
.text:0000000000029A18                 MOV             X25, X8
.text:0000000000029A1C                 LSR             X9, X8, #0x3C ; '<'
.text:0000000000029A20                 CBZ             X9, loc_29AA0
.text:0000000000029A24 loc_29A24                               ; CODE XREF: sub_299A0+5C↑j
.text:0000000000029A24                 MOV             X0, X19
.text:0000000000029A28                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000029A2C loc_29A2C                               ; CODE XREF: sub_299A0+38↑j
.text:0000000000029A2C                 LDR             X8, [X19,#8]
.text:0000000000029A30                 MOV             X23, X2
.text:0000000000029A34                 SUB             X8, X8, X22
.text:0000000000029A38                 ASR             X26, X8, #4
.text:0000000000029A3C                 ADD             X8, X20, X8
.text:0000000000029A40                 CMP             X25, X26
.text:0000000000029A44                 CSEL            X21, X8, X2, HI
.text:0000000000029A48                 SUBS            X24, X21, X20
.text:0000000000029A4C                 B.EQ            loc_29A60
.text:0000000000029A50                 MOV             X0, X22 ; dest
.text:0000000000029A54                 MOV             X1, X20 ; src
.text:0000000000029A58                 MOV             X2, X24 ; n
.text:0000000000029A5C                 BL              .memmove
.text:0000000000029A60 loc_29A60                               ; CODE XREF: sub_299A0+AC↑j
.text:0000000000029A60                 CMP             X25, X26
.text:0000000000029A64                 B.LS            loc_29A90
.text:0000000000029A68                 SUB             X20, X23, X21
.text:0000000000029A6C                 CMP             X20, #1
.text:0000000000029A70                 B.LT            loc_29AD8
.text:0000000000029A74                 LDR             X0, [X19,#8] ; dest
.text:0000000000029A78                 MOV             X1, X21 ; src
.text:0000000000029A7C                 MOV             X2, X20 ; n
.text:0000000000029A80                 BL              .memcpy
.text:0000000000029A84                 LDR             X8, [X19,#8]
.text:0000000000029A88                 ADD             X8, X8, X20
.text:0000000000029A8C                 B               loc_29AD4
.text:0000000000029A90 ; ---------------------------------------------------------------------------
.text:0000000000029A90 loc_29A90                               ; CODE XREF: sub_299A0+C4↑j
.text:0000000000029A90                 ASR             X8, X24, #4
.text:0000000000029A94                 ADD             X8, X22, X8,LSL#4
.text:0000000000029A98                 B               loc_29AD4
.text:0000000000029A9C ; ---------------------------------------------------------------------------
.text:0000000000029A9C loc_29A9C                               ; CODE XREF: sub_299A0+68↑j
.text:0000000000029A9C                 MOV             X25, #0xFFFFFFFFFFFFFFF
.text:0000000000029AA0 loc_29AA0                               ; CODE XREF: sub_299A0+74↑j
.text:0000000000029AA0                                         ; sub_299A0+80↑j
.text:0000000000029AA0                 LSL             X22, X25, #4
.text:0000000000029AA4                 MOV             X0, X22 ; unsigned __int64
.text:0000000000029AA8                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000029AAC                 ADD             X8, X0, X22
.text:0000000000029AB0                 STP             X0, X0, [X19]
.text:0000000000029AB4                 CMP             X21, #1
.text:0000000000029AB8                 STR             X8, [X19,#0x10]
.text:0000000000029ABC                 B.LT            loc_29AD8
.text:0000000000029AC0                 MOV             X1, X20 ; src
.text:0000000000029AC4                 MOV             X2, X21 ; n
.text:0000000000029AC8                 BL              .memcpy
.text:0000000000029ACC                 LDR             X8, [X19,#8]
.text:0000000000029AD0                 ADD             X8, X8, X21
.text:0000000000029AD4 loc_29AD4                               ; CODE XREF: sub_299A0+EC↑j
.text:0000000000029AD4                                         ; sub_299A0+F8↑j
.text:0000000000029AD4                 STR             X8, [X19,#8]
.text:0000000000029AD8 loc_29AD8                               ; CODE XREF: sub_299A0+D0↑j
.text:0000000000029AD8                                         ; sub_299A0+11C↑j
.text:0000000000029AD8                 LDP             X29, X30, [SP,#0x40+var_s0]
.text:0000000000029ADC                 LDP             X20, X19, [SP,#0x40+var_10]
.text:0000000000029AE0                 LDP             X22, X21, [SP,#0x40+var_20]
.text:0000000000029AE4                 LDP             X24, X23, [SP,#0x40+var_30]
.text:0000000000029AE8                 LDP             X26, X25, [SP+0x40+var_40],#0x50
.text:0000000000029AEC                 RET
.text:0000000000029AEC ; } // starts at 299A0
.text:0000000000029AEC ; End of function sub_299A0
.text:0000000000029AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000029AF0 ; Attributes: bp-based frame
.text:0000000000029AF0 sub_29AF0                               ; DATA XREF: .init_array:00000000000305F8↓o
.text:0000000000029AF0 var_s0          =  0
.text:0000000000029AF0 ; __unwind {
.text:0000000000029AF0                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000029AF4                 MOV             X29, SP
.text:0000000000029AF8                 ADRP            X8, #unk_31008@PAGE
.text:0000000000029AFC                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:0000000000029B00                 LDARB           W8, [X8]
.text:0000000000029B04                 TBNZ            W8, #0, loc_29B44
.text:0000000000029B08                 ADRP            X0, #unk_31008@PAGE
.text:0000000000029B0C                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000029B10                 BL              .__cxa_guard_acquire
.text:0000000000029B14                 CBZ             W0, loc_29B44
.text:0000000000029B18                 ADRP            X1, #qword_31000@PAGE
.text:0000000000029B1C                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:0000000000029B20                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:0000000000029B24                 ADRP            X2, #off_2F000@PAGE
.text:0000000000029B28                 STR             XZR, [X1]
.text:0000000000029B2C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000029B30                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000029B34                 BL              .__cxa_atexit
.text:0000000000029B38                 ADRP            X0, #unk_31008@PAGE
.text:0000000000029B3C                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:0000000000029B40                 BL              .__cxa_guard_release
.text:0000000000029B44 loc_29B44                               ; CODE XREF: sub_29AF0+14↑j
.text:0000000000029B44                                         ; sub_29AF0+24↑j
.text:0000000000029B44                 ADRP            X8, #unk_31038@PAGE
.text:0000000000029B48                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:0000000000029B4C                 LDARB           W8, [X8]
.text:0000000000029B50                 TBNZ            W8, #0, loc_29B8C
.text:0000000000029B54                 ADRP            X0, #unk_31038@PAGE
.text:0000000000029B58                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000029B5C                 BL              .__cxa_guard_acquire
.text:0000000000029B60                 CBZ             W0, loc_29B8C
.text:0000000000029B64                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:0000000000029B68                 ADRP            X1, #unk_31010@PAGE
.text:0000000000029B6C                 ADRP            X2, #off_2F000@PAGE
.text:0000000000029B70                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:0000000000029B74                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:0000000000029B78                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000029B7C                 BL              .__cxa_atexit
.text:0000000000029B80                 ADRP            X0, #unk_31038@PAGE
.text:0000000000029B84                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:0000000000029B88                 BL              .__cxa_guard_release
.text:0000000000029B8C loc_29B8C                               ; CODE XREF: sub_29AF0+60↑j
.text:0000000000029B8C                                         ; sub_29AF0+70↑j
.text:0000000000029B8C                 ADRP            X8, #unk_31058@PAGE
.text:0000000000029B90                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:0000000000029B94                 LDARB           W8, [X8]
.text:0000000000029B98                 TBNZ            W8, #0, loc_29BDC
.text:0000000000029B9C                 ADRP            X0, #unk_31058@PAGE
.text:0000000000029BA0                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000029BA4                 BL              .__cxa_guard_acquire
.text:0000000000029BA8                 CBZ             W0, loc_29BDC
.text:0000000000029BAC                 ADRP            X1, #unk_31040@PAGE
.text:0000000000029BB0                 ADRP            X0, #loc_1C078@PAGE
.text:0000000000029BB4                 ADRP            X2, #off_2F000@PAGE
.text:0000000000029BB8                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:0000000000029BBC                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:0000000000029BC0                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000029BC4                 STP             XZR, XZR, [X1]
.text:0000000000029BC8                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:0000000000029BCC                 BL              .__cxa_atexit
.text:0000000000029BD0                 ADRP            X0, #unk_31058@PAGE
.text:0000000000029BD4                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:0000000000029BD8                 BL              .__cxa_guard_release
.text:0000000000029BDC loc_29BDC                               ; CODE XREF: sub_29AF0+A8↑j
.text:0000000000029BDC                                         ; sub_29AF0+B8↑j
.text:0000000000029BDC                 ADRP            X8, #unk_31078@PAGE
.text:0000000000029BE0                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:0000000000029BE4                 LDARB           W8, [X8]
.text:0000000000029BE8                 TBNZ            W8, #0, loc_29C30
.text:0000000000029BEC                 ADRP            X0, #unk_31078@PAGE
.text:0000000000029BF0                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000029BF4                 BL              .__cxa_guard_acquire
.text:0000000000029BF8                 CBZ             W0, loc_29C30
.text:0000000000029BFC                 ADRP            X1, #unk_31060@PAGE
.text:0000000000029C00                 ADRP            X0, #loc_1C100@PAGE
.text:0000000000029C04                 ADRP            X2, #off_2F000@PAGE
.text:0000000000029C08                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:0000000000029C0C                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:0000000000029C10                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:0000000000029C14                 STP             XZR, XZR, [X1]
.text:0000000000029C18                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:0000000000029C1C                 BL              .__cxa_atexit
.text:0000000000029C20                 ADRP            X0, #unk_31078@PAGE
.text:0000000000029C24                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:0000000000029C28                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000029C2C                 B               .__cxa_guard_release
.text:0000000000029C30 ; ---------------------------------------------------------------------------
.text:0000000000029C30 loc_29C30                               ; CODE XREF: sub_29AF0+F8↑j
.text:0000000000029C30                                         ; sub_29AF0+108↑j
.text:0000000000029C30                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000029C34                 RET
.text:0000000000029C34 ; } // starts at 29AF0
.text:0000000000029C34 ; End of function sub_29AF0
.text:0000000000029C38 ; ---------------------------------------------------------------------------
.text:0000000000029C38 ; gui::RenderPassData::RenderPassData(float, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>> const&)
.text:0000000000029C38                 EXPORT _ZN3gui14RenderPassDataC2EfRKNSt3__16vectorIjNS1_9allocatorIjEEEE
.text:0000000000029C38 _ZN3gui14RenderPassDataC2EfRKNSt3__16vectorIjNS1_9allocatorIjEEEE
.text:0000000000029C38                                         ; DATA XREF: LOAD:00000000000014E8↑o
.text:0000000000029C38                                         ; LOAD:0000000000001F08↑o
.text:0000000000029C38 ; __unwind {                            ; Alternative name is 'gui::RenderPassData::RenderPassData(float, std::__1::vector<unsigned int, std::__1::allocator<unsigned int>> const&)'
.text:0000000000029C38                 STR             X21, [SP,#-0x30]!
.text:0000000000029C3C                 STP             X20, X19, [SP,#0x10]
.text:0000000000029C40                 STP             X29, X30, [SP,#0x20]
.text:0000000000029C44                 ADD             X29, SP, #0x20 ; ' '
.text:0000000000029C48                 MOV             X19, X0
.text:0000000000029C4C                 STR             WZR, [X0]
.text:0000000000029C50                 STR             S0, [X0,#4]
.text:0000000000029C54                 STP             XZR, XZR, [X0,#0x10]
.text:0000000000029C58                 STR             XZR, [X0,#8]!
.text:0000000000029C5C                 LDP             X8, X9, [X1]
.text:0000000000029C60                 SUBS            X8, X9, X8
.text:0000000000029C64                 B.EQ            loc_29CB0
.text:0000000000029C68                 ASR             X21, X8, #2
.text:0000000000029C6C                 LSR             X9, X21, #0x3E ; '>'
.text:0000000000029C70                 CBNZ            X9, loc_29CD0
.text:0000000000029C74                 MOV             X0, X8
.text:0000000000029C78                 MOV             X20, X1
.text:0000000000029C7C                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000029C80                 ADD             X8, X0, X21,LSL#2
.text:0000000000029C84                 STP             X0, X0, [X19,#8]
.text:0000000000029C88                 STR             X8, [X19,#0x18]
.text:0000000000029C8C                 LDP             X1, X8, [X20]
.text:0000000000029C90                 SUB             X20, X8, X1
.text:0000000000029C94                 CMP             X20, #1
.text:0000000000029C98                 B.LT            loc_29CB0
.text:0000000000029C9C                 MOV             X2, X20
.text:0000000000029CA0                 BL              .memcpy
.text:0000000000029CA4                 LDR             X8, [X19,#0x10]
.text:0000000000029CA8                 ADD             X8, X8, X20
.text:0000000000029CAC                 STR             X8, [X19,#0x10]
.text:0000000000029CB0 loc_29CB0                               ; CODE XREF: .text:0000000000029C64↑j
.text:0000000000029CB0                                         ; .text:0000000000029C98↑j
.text:0000000000029CB0                 MOVI            V0.2D, #0
.text:0000000000029CB4                 STR             XZR, [X19,#0x50]
.text:0000000000029CB8                 STP             Q0, Q0, [X19,#0x30]
.text:0000000000029CBC                 STR             Q0, [X19,#0x20]
.text:0000000000029CC0                 LDP             X29, X30, [SP,#0x20]
.text:0000000000029CC4                 LDP             X20, X19, [SP,#0x10]
.text:0000000000029CC8                 LDR             X21, [SP],#0x30
.text:0000000000029CCC                 RET
.text:0000000000029CD0 ; ---------------------------------------------------------------------------
.text:0000000000029CD0 loc_29CD0                               ; CODE XREF: .text:0000000000029C70↑j
.text:0000000000029CD0                 BL              ._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv ; std::__1::__vector_base_common<true>::__throw_length_error(void)
.text:0000000000029CD0 ; } // starts at 29C38
.text:0000000000029CD0 ; ---------------------------------------------------------------------------
.text:0000000000029CD4                 DCD 0
.text:0000000000029CD8 ; =============== S U B R O U T I N E =======================================
.text:0000000000029CD8 ; Attributes: bp-based frame
.text:0000000000029CD8 ; void __fastcall gui::RenderPassData::~RenderPassData(gui::RenderPassData *__hidden this)
.text:0000000000029CD8                 EXPORT _ZN3gui14RenderPassDataD2Ev
.text:0000000000029CD8 _ZN3gui14RenderPassDataD2Ev             ; CODE XREF: gui::RenderPassData::~RenderPassData()+C↓j
.text:0000000000029CD8                                         ; DATA XREF: LOAD:00000000000017B8↑o ...
.text:0000000000029CD8 var_20          = -0x20
.text:0000000000029CD8 var_10          = -0x10
.text:0000000000029CD8 var_s0          =  0
.text:0000000000029CD8 ; __unwind {
.text:0000000000029CD8                 STR             X21, [SP,#-0x10+var_20]! ; Alternative name is 'gui::RenderPassData::~RenderPassData()'
.text:0000000000029CDC                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029CE0                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029CE4                 ADD             X29, SP, #0x20
.text:0000000000029CE8                 LDR             X20, [X0,#0x40]
.text:0000000000029CEC                 MOV             X19, X0
.text:0000000000029CF0                 CBZ             X20, loc_29D34
.text:0000000000029CF4                 LDR             X8, [X19,#0x48]
.text:0000000000029CF8                 CMP             X8, X20
.text:0000000000029CFC                 B.EQ            loc_29D28
.text:0000000000029D00                 MOV             X21, X8
.text:0000000000029D04 loc_29D04                               ; CODE XREF: gui::RenderPassData::~RenderPassData()+44↓j
.text:0000000000029D04                 LDRB            W9, [X21,#-0x18]!
.text:0000000000029D08                 TBZ             W9, #0, loc_29D14
.text:0000000000029D0C                 LDUR            X0, [X8,#-8] ; void *
.text:0000000000029D10                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000029D14 loc_29D14                               ; CODE XREF: gui::RenderPassData::~RenderPassData()+30↑j
.text:0000000000029D14                 MOV             X8, X21
.text:0000000000029D18                 CMP             X20, X21
.text:0000000000029D1C                 B.NE            loc_29D04
.text:0000000000029D20                 LDR             X0, [X19,#0x40]
.text:0000000000029D24                 B               loc_29D2C
.text:0000000000029D28 ; ---------------------------------------------------------------------------
.text:0000000000029D28 loc_29D28                               ; CODE XREF: gui::RenderPassData::~RenderPassData()+24↑j
.text:0000000000029D28                 MOV             X0, X20 ; void *
.text:0000000000029D2C loc_29D2C                               ; CODE XREF: gui::RenderPassData::~RenderPassData()+4C↑j
.text:0000000000029D2C                 STR             X20, [X19,#0x48]
.text:0000000000029D30                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000029D34 loc_29D34                               ; CODE XREF: gui::RenderPassData::~RenderPassData()+18↑j
.text:0000000000029D34                 LDR             X0, [X19,#8] ; void *
.text:0000000000029D38                 CBZ             X0, loc_29D50
.text:0000000000029D3C                 STR             X0, [X19,#0x10]
.text:0000000000029D40                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029D44                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029D48                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029D4C                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000029D50 ; ---------------------------------------------------------------------------
.text:0000000000029D50 loc_29D50                               ; CODE XREF: gui::RenderPassData::~RenderPassData()+60↑j
.text:0000000000029D50                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029D54                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029D58                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029D5C                 RET
.text:0000000000029D5C ; } // starts at 29CD8
.text:0000000000029D5C ; End of function gui::RenderPassData::~RenderPassData()
.text:0000000000029D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000029D60 ; __int64 __fastcall gui::RenderPassData::setIndex(gui::RenderPassData *__hidden this, unsigned int)
.text:0000000000029D60                 EXPORT _ZN3gui14RenderPassData8setIndexEj
.text:0000000000029D60 _ZN3gui14RenderPassData8setIndexEj      ; DATA XREF: LOAD:0000000000002088↑o
.text:0000000000029D60 ; __unwind {
.text:0000000000029D60                 STR             W1, [X0]
.text:0000000000029D64                 RET
.text:0000000000029D64 ; } // starts at 29D60
.text:0000000000029D64 ; End of function gui::RenderPassData::setIndex(uint)
.text:0000000000029D68 ; =============== S U B R O U T I N E =======================================
.text:0000000000029D68 ; Attributes: bp-based frame
.text:0000000000029D68 ; __int64 __fastcall gui::RenderPassData::addValue(gui::RenderPassData *__hidden this, unsigned int)
.text:0000000000029D68                 EXPORT _ZN3gui14RenderPassData8addValueEj
.text:0000000000029D68 _ZN3gui14RenderPassData8addValueEj      ; DATA XREF: LOAD:0000000000001D28↑o
.text:0000000000029D68 var_1C          = -0x1C
.text:0000000000029D68 var_18          = -0x18
.text:0000000000029D68 var_10          = -0x10
.text:0000000000029D68 var_s0          =  0
.text:0000000000029D68 ; __unwind {
.text:0000000000029D68                 SUB             SP, SP, #0x30
.text:0000000000029D6C                 STR             X19, [SP,#0x20+var_10]
.text:0000000000029D70                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029D74                 ADD             X29, SP, #0x20
.text:0000000000029D78                 MRS             X19, #3, c13, c0, #2
.text:0000000000029D7C                 LDR             X8, [X19,#0x28]
.text:0000000000029D80                 STR             X8, [SP,#0x20+var_18]
.text:0000000000029D84                 LDP             X8, X9, [X0,#0x10]
.text:0000000000029D88                 STR             W1, [SP,#0x20+var_1C]
.text:0000000000029D8C                 CMP             X8, X9
.text:0000000000029D90                 B.EQ            loc_29DA8
.text:0000000000029D94                 STR             W1, [X8]
.text:0000000000029D98                 LDR             X8, [X0,#0x10]
.text:0000000000029D9C                 ADD             X8, X8, #4
.text:0000000000029DA0                 STR             X8, [X0,#0x10]
.text:0000000000029DA4                 B               loc_29DB4
.text:0000000000029DA8 ; ---------------------------------------------------------------------------
.text:0000000000029DA8 loc_29DA8                               ; CODE XREF: gui::RenderPassData::addValue(uint)+28↑j
.text:0000000000029DA8                 ADD             X0, X0, #8
.text:0000000000029DAC                 ADD             X1, SP, #0x20+var_1C
.text:0000000000029DB0                 BL              loc_1DCB8
.text:0000000000029DB4 loc_29DB4                               ; CODE XREF: gui::RenderPassData::addValue(uint)+3C↑j
.text:0000000000029DB4                 LDR             X8, [X19,#0x28]
.text:0000000000029DB8                 LDR             X9, [SP,#0x20+var_18]
.text:0000000000029DBC                 CMP             X8, X9
.text:0000000000029DC0                 B.NE            loc_29DD4
.text:0000000000029DC4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029DC8                 LDR             X19, [SP,#0x20+var_10]
.text:0000000000029DCC                 ADD             SP, SP, #0x30 ; '0'
.text:0000000000029DD0                 RET
.text:0000000000029DD4 ; ---------------------------------------------------------------------------
.text:0000000000029DD4 loc_29DD4                               ; CODE XREF: gui::RenderPassData::addValue(uint)+58↑j
.text:0000000000029DD4                 BL              .__stack_chk_fail
.text:0000000000029DD4 ; } // starts at 29D68
.text:0000000000029DD4 ; End of function gui::RenderPassData::addValue(uint)
.text:0000000000029DD8 ; =============== S U B R O U T I N E =======================================
.text:0000000000029DD8 ; Attributes: bp-based frame
.text:0000000000029DD8 ; __int64 __fastcall gui::RenderPassData::addTimestampInfo(gui::RenderPassData *__hidden this, long double, long double)
.text:0000000000029DD8                 EXPORT _ZN3gui14RenderPassData16addTimestampInfoEee
.text:0000000000029DD8 _ZN3gui14RenderPassData16addTimestampInfoEee
.text:0000000000029DD8                                         ; DATA XREF: LOAD:00000000000022B0↑o
.text:0000000000029DD8 var_30          = -0x30
.text:0000000000029DD8 var_20          = -0x20
.text:0000000000029DD8 var_10          = -0x10
.text:0000000000029DD8 var_s0          =  0
.text:0000000000029DD8 ; __unwind {
.text:0000000000029DD8                 SUB             SP, SP, #0x40
.text:0000000000029DDC                 STR             X19, [SP,#0x30+var_10]
.text:0000000000029DE0                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000029DE4                 ADD             X29, SP, #0x30
.text:0000000000029DE8                 MOV             V2.16B, V0.16B
.text:0000000000029DEC                 MOV             X19, X0
.text:0000000000029DF0                 MOV             V0.16B, V1.16B
.text:0000000000029DF4                 STP             Q2, Q1, [SP,#0x30+var_30]
.text:0000000000029DF8                 MOV             V1.16B, V2.16B
.text:0000000000029DFC                 STR             Q2, [X0,#0x20]
.text:0000000000029E00                 BL              .__lttf2
.text:0000000000029E04                 LDR             Q0, [SP,#0x30+var_20]
.text:0000000000029E08                 CMP             W0, #0
.text:0000000000029E0C                 B.GE            loc_29E14
.text:0000000000029E10                 LDR             Q0, [SP,#0x30+var_30]
.text:0000000000029E14 loc_29E14                               ; CODE XREF: gui::RenderPassData::addTimestampInfo(long double,long double)+34↑j
.text:0000000000029E14                 STR             Q0, [X19,#0x30]
.text:0000000000029E18                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000029E1C                 LDR             X19, [SP,#0x30+var_10]
.text:0000000000029E20                 ADD             SP, SP, #0x40 ; '@'
.text:0000000000029E24                 RET
.text:0000000000029E24 ; } // starts at 29DD8
.text:0000000000029E24 ; End of function gui::RenderPassData::addTimestampInfo(long double,long double)
.text:0000000000029E28 ; =============== S U B R O U T I N E =======================================
.text:0000000000029E28 ; Attributes: bp-based frame
.text:0000000000029E28 sub_29E28                               ; DATA XREF: sub_2B130+448↓o
.text:0000000000029E28                                         ; sub_2B130+450↓o
.text:0000000000029E28 var_20          = -0x20
.text:0000000000029E28 var_10          = -0x10
.text:0000000000029E28 var_s0          =  0
.text:0000000000029E28 ; __unwind {
.text:0000000000029E28                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000029E2C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029E30                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029E34                 ADD             X29, SP, #0x20
.text:0000000000029E38                 LDR             X21, [X0]
.text:0000000000029E3C                 CBZ             X21, loc_29E6C
.text:0000000000029E40                 LDR             X20, [X0,#8]
.text:0000000000029E44                 MOV             X19, X0
.text:0000000000029E48                 CMP             X20, X21
.text:0000000000029E4C                 B.EQ            loc_29E7C
.text:0000000000029E50 loc_29E50                               ; CODE XREF: sub_29E28+38↓j
.text:0000000000029E50                 SUB             X20, X20, #0x10
.text:0000000000029E54                 MOV             X0, X20 ; this
.text:0000000000029E58                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:0000000000029E5C                 CMP             X21, X20
.text:0000000000029E60                 B.NE            loc_29E50
.text:0000000000029E64                 LDR             X0, [X19]
.text:0000000000029E68                 B               loc_29E80
.text:0000000000029E6C ; ---------------------------------------------------------------------------
.text:0000000000029E6C loc_29E6C                               ; CODE XREF: sub_29E28+14↑j
.text:0000000000029E6C                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029E70                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029E74                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029E78                 RET
.text:0000000000029E7C ; ---------------------------------------------------------------------------
.text:0000000000029E7C loc_29E7C                               ; CODE XREF: sub_29E28+24↑j
.text:0000000000029E7C                 MOV             X0, X21 ; void *
.text:0000000000029E80 loc_29E80                               ; CODE XREF: sub_29E28+40↑j
.text:0000000000029E80                 STR             X21, [X19,#8]
.text:0000000000029E84                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000029E88                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000029E8C                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000029E90                 B               ._ZdlPv ; operator delete(void *)
.text:0000000000029E90 ; } // starts at 29E28
.text:0000000000029E90 ; End of function sub_29E28
.text:0000000000029E90 ; ---------------------------------------------------------------------------
.text:0000000000029E94                 ALIGN 8
.text:0000000000029E98 ; =============== S U B R O U T I N E =======================================
.text:0000000000029E98 ; Attributes: bp-based frame
.text:0000000000029E98 ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, bool, unsigned long)
.text:0000000000029E98                 EXPORT _ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm
.text:0000000000029E98 _ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm
.text:0000000000029E98                                         ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+C↓j
.text:0000000000029E98                                         ; DATA XREF: LOAD:00000000000016B0↑o ...
.text:0000000000029E98 var_78          = -0x78
.text:0000000000029E98 var_70          = -0x70
.text:0000000000029E98 var_68          = -0x68
.text:0000000000029E98 var_60          = -0x60
.text:0000000000029E98 var_50          = -0x50
.text:0000000000029E98 var_48          = -0x48
.text:0000000000029E98 var_40          = -0x40
.text:0000000000029E98 var_30          = -0x30
.text:0000000000029E98 var_20          = -0x20
.text:0000000000029E98 var_10          = -0x10
.text:0000000000029E98 var_s0          =  0
.text:0000000000029E98 ; __unwind {
.text:0000000000029E98                 SUB             SP, SP, #0x90
.text:0000000000029E9C                 STR             X25, [SP,#0x80+var_40]
.text:0000000000029EA0                 STP             X24, X23, [SP,#0x80+var_30]
.text:0000000000029EA4                 STP             X22, X21, [SP,#0x80+var_20]
.text:0000000000029EA8                 STP             X20, X19, [SP,#0x80+var_10]
.text:0000000000029EAC                 STP             X29, X30, [SP,#0x80+var_s0]
.text:0000000000029EB0                 ADD             X29, SP, #0x80
.text:0000000000029EB4                 MRS             X25, #3, c13, c0, #2
.text:0000000000029EB8                 MOV             X19, X0
.text:0000000000029EBC                 LDR             X8, [X25,#0x28]
.text:0000000000029EC0                 ADD             X0, SP, #0x80+var_60
.text:0000000000029EC4                 MOV             X20, X3
.text:0000000000029EC8                 MOV             W21, W2
.text:0000000000029ECC                 MOV             X22, X1
.text:0000000000029ED0                 STR             X8, [SP,#0x80+var_48]
.text:0000000000029ED4                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:0000000000029ED8                 AND             W1, W21, #1
.text:0000000000029EDC                 ADD             X0, SP, #0x80+var_60
.text:0000000000029EE0                 BL              sub_1C118
.text:0000000000029EE4                 LDRB            W8, [SP,#0x80+var_60]
.text:0000000000029EE8                 MOV             X21, X0
.text:0000000000029EEC                 TBZ             W8, #0, loc_29EF8
.text:0000000000029EF0                 LDR             X0, [SP,#0x80+var_50] ; void *
.text:0000000000029EF4                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000029EF8 loc_29EF8                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+54↑j
.text:0000000000029EF8                 STR             X21, [X19]
.text:0000000000029EFC                 LDRB            W8, [X22]
.text:0000000000029F00                 LDP             X9, X10, [X22,#8]
.text:0000000000029F04                 STP             XZR, XZR, [SP,#0x80+var_78]
.text:0000000000029F08                 TST             W8, #1
.text:0000000000029F0C                 STR             XZR, [SP,#0x80+var_68]
.text:0000000000029F10                 LSR             X11, X8, #1
.text:0000000000029F14                 CSEL            X21, X11, X9, EQ
.text:0000000000029F18                 CSINC           X22, X10, X22, NE
.text:0000000000029F1C                 ADD             X8, X21, #6
.text:0000000000029F20                 CMN             X8, #0x10
.text:0000000000029F24                 B.CS            loc_29FE0
.text:0000000000029F28                 CMP             X8, #0x17
.text:0000000000029F2C                 B.CS            loc_29F48
.text:0000000000029F30                 ADD             X9, SP, #0x80+var_78
.text:0000000000029F34                 ORR             X23, X9, #1
.text:0000000000029F38                 LSL             W8, W21, #1
.text:0000000000029F3C                 STRB            W8, [SP,#0x80+var_78]
.text:0000000000029F40                 CBNZ            X21, loc_29F68
.text:0000000000029F44                 B               loc_29F78
.text:0000000000029F48 ; ---------------------------------------------------------------------------
.text:0000000000029F48 loc_29F48                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+94↑j
.text:0000000000029F48                 ADD             X8, X21, #0x16
.text:0000000000029F4C                 AND             X24, X8, #0xFFFFFFFFFFFFFFF0
.text:0000000000029F50                 MOV             X0, X24 ; unsigned __int64
.text:0000000000029F54                 BL              ._Znwm  ; operator new(ulong)
.text:0000000000029F58                 ORR             X8, X24, #1
.text:0000000000029F5C                 STP             X21, X0, [SP,#0x80+var_70]
.text:0000000000029F60                 MOV             X23, X0
.text:0000000000029F64                 STR             X8, [SP,#0x80+var_78]
.text:0000000000029F68 loc_29F68                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+A8↑j
.text:0000000000029F68                 MOV             X0, X23 ; dest
.text:0000000000029F6C                 MOV             X1, X22 ; src
.text:0000000000029F70                 MOV             X2, X21 ; n
.text:0000000000029F74                 BL              .memcpy
.text:0000000000029F78 loc_29F78                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+AC↑j
.text:0000000000029F78                 ADRP            X1, #aColor@PAGE ; "_color"
.text:0000000000029F7C                 STRB            WZR, [X23,X21]
.text:0000000000029F80                 ADD             X1, X1, #aColor@PAGEOFF ; "_color"
.text:0000000000029F84                 ADD             X0, SP, #0x80+var_78
.text:0000000000029F88                 MOV             W2, #6
.text:0000000000029F8C                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::append(char const*,ulong)
.text:0000000000029F90                 ADD             X0, SP, #0x80+var_78
.text:0000000000029F94                 MOV             X1, X20
.text:0000000000029F98                 BL              sub_29FF0
.text:0000000000029F9C                 LDRB            W8, [SP,#0x80+var_78]
.text:0000000000029FA0                 MOV             X20, X0
.text:0000000000029FA4                 TBZ             W8, #0, loc_29FB0
.text:0000000000029FA8                 LDR             X0, [SP,#0x80+var_68] ; void *
.text:0000000000029FAC                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000029FB0 loc_29FB0                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+10C↑j
.text:0000000000029FB0                 STR             X20, [X19,#8]
.text:0000000000029FB4                 LDR             X8, [X25,#0x28]
.text:0000000000029FB8                 LDR             X9, [SP,#0x80+var_48]
.text:0000000000029FBC                 CMP             X8, X9
.text:0000000000029FC0                 B.NE            loc_29FE8
.text:0000000000029FC4                 LDP             X29, X30, [SP,#0x80+var_s0]
.text:0000000000029FC8                 LDP             X20, X19, [SP,#0x80+var_10]
.text:0000000000029FCC                 LDP             X22, X21, [SP,#0x80+var_20]
.text:0000000000029FD0                 LDP             X24, X23, [SP,#0x80+var_30]
.text:0000000000029FD4                 LDR             X25, [SP,#0x80+var_40]
.text:0000000000029FD8                 ADD             SP, SP, #0x90
.text:0000000000029FDC                 RET
.text:0000000000029FE0 ; ---------------------------------------------------------------------------
.text:0000000000029FE0 loc_29FE0                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+8C↑j
.text:0000000000029FE0                 ADD             X0, SP, #0x80+var_78
.text:0000000000029FE4                 BL              ._ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv ; std::__1::__basic_string_common<true>::__throw_length_error(void)
.text:0000000000029FE8 loc_29FE8                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+128↑j
.text:0000000000029FE8                 BL              .__stack_chk_fail
.text:0000000000029FE8 ; } // starts at 29E98
.text:0000000000029FE8 ; End of function gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:0000000000029FE8 ; ---------------------------------------------------------------------------
.text:0000000000029FEC                 ALIGN 0x10
.text:0000000000029FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000029FF0 ; Attributes: bp-based frame
.text:0000000000029FF0 sub_29FF0                               ; CODE XREF: gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)+100↑p
.text:0000000000029FF0                                         ; sub_2A598+60↓p ...
.text:0000000000029FF0 var_41          = -0x41
.text:0000000000029FF0 var_38          = -0x38
.text:0000000000029FF0 var_31          = -0x31
.text:0000000000029FF0 var_28          = -0x28
.text:0000000000029FF0 var_20          = -0x20
.text:0000000000029FF0 var_10          = -0x10
.text:0000000000029FF0 var_s0          =  0
.text:0000000000029FF0 ; __unwind {
.text:0000000000029FF0                 SUB             SP, SP, #0x60
.text:0000000000029FF4                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000029FF8                 STP             X20, X19, [SP,#0x50+var_10]
.text:0000000000029FFC                 STP             X29, X30, [SP,#0x50+var_s0]
.text:000000000002A000                 ADD             X29, SP, #0x50
.text:000000000002A004                 MRS             X22, #3, c13, c0, #2
.text:000000000002A008                 MOV             X21, X0
.text:000000000002A00C                 LDR             X8, [X22,#0x28]
.text:000000000002A010                 MOV             W0, #0x38 ; '8' ; unsigned __int64
.text:000000000002A014                 MOV             X20, X1
.text:000000000002A018                 STR             X8, [SP,#0x50+var_28]
.text:000000000002A01C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A020                 LDP             X8, X11, [X21,#8]
.text:000000000002A024                 LDUR            X9, [X21,#1]
.text:000000000002A028                 MOV             X12, X0
.text:000000000002A02C                 LDRB            W10, [X21]
.text:000000000002A030                 MOV             X19, X0
.text:000000000002A034                 STUR            X8, [SP,#0x50+var_41]
.text:000000000002A038                 STR             X9, [SP,#8]
.text:000000000002A03C                 LDUR            X8, [SP,#0x50+var_41]
.text:000000000002A040                 STP             XZR, XZR, [X21]
.text:000000000002A044                 TST             W10, #1
.text:000000000002A048                 STR             XZR, [X21,#0x10]
.text:000000000002A04C                 STRB            W10, [X0,#8]
.text:000000000002A050                 STUR            X8, [SP,#0x50+var_31]
.text:000000000002A054                 STR             X9, [SP,#0x18]
.text:000000000002A058                 LDUR            X8, [SP,#0x50+var_31]
.text:000000000002A05C                 STUR            XZR, [SP,#0x50+var_41]
.text:000000000002A060                 STR             XZR, [SP,#8]
.text:000000000002A064                 STP             X8, X11, [X0,#0x10]
.text:000000000002A068                 ADRP            X8, #off_30530@PAGE
.text:000000000002A06C                 ADD             X8, X8, #off_30530@PAGEOFF
.text:000000000002A070                 STR             X9, [X12,#9]!
.text:000000000002A074                 STR             X8, [X0]
.text:000000000002A078                 CSEL            X0, X12, X11, EQ
.text:000000000002A07C                 STP             XZR, X20, [X19,#0x20]
.text:000000000002A080                 STR             X20, [X19,#0x30]
.text:000000000002A084                 BL              .__system_property_find
.text:000000000002A088                 STR             X0, [X19,#0x20]
.text:000000000002A08C                 CBZ             X0, loc_2A0A0
.text:000000000002A090                 ADRP            X1, #sub_1CAA0@PAGE
.text:000000000002A094                 ADD             X1, X1, #sub_1CAA0@PAGEOFF
.text:000000000002A098                 MOV             X2, X19
.text:000000000002A09C                 BL              .__system_property_read_callback
.text:000000000002A0A0 loc_2A0A0                               ; CODE XREF: sub_29FF0+9C↑j
.text:000000000002A0A0                 ADRP            X0, #unk_31010@PAGE
.text:000000000002A0A4                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000002A0A8                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000002A0AC                 ADRP            X9, #qword_31068@PAGE
.text:000000000002A0B0                 STR             X19, [SP,#0x18]
.text:000000000002A0B4                 ADD             X9, X9, #qword_31068@PAGEOFF
.text:000000000002A0B8                 LDP             X8, X9, [X9]
.text:000000000002A0BC                 CMP             X8, X9
.text:000000000002A0C0                 B.CS            loc_2A0DC
.text:000000000002A0C4                 ADRP            X9, #qword_31068@PAGE
.text:000000000002A0C8                 STR             X19, [X8]
.text:000000000002A0CC                 LDR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000002A0D0                 ADD             X8, X8, #8
.text:000000000002A0D4                 STR             X8, [X9,#qword_31068@PAGEOFF]
.text:000000000002A0D8                 B               loc_2A0EC
.text:000000000002A0DC ; ---------------------------------------------------------------------------
.text:000000000002A0DC loc_2A0DC                               ; CODE XREF: sub_29FF0+D0↑j
.text:000000000002A0DC                 ADRP            X0, #unk_31060@PAGE
.text:000000000002A0E0                 ADD             X0, X0, #unk_31060@PAGEOFF
.text:000000000002A0E4                 ADD             X1, SP, #0x50+var_38
.text:000000000002A0E8                 BL              loc_1CAB0
.text:000000000002A0EC loc_2A0EC                               ; CODE XREF: sub_29FF0+E8↑j
.text:000000000002A0EC                 ADRP            X0, #unk_31010@PAGE
.text:000000000002A0F0                 ADD             X0, X0, #unk_31010@PAGEOFF ; this
.text:000000000002A0F4                 BL              ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000002A0F8                 LDR             X8, [X22,#0x28]
.text:000000000002A0FC                 LDR             X9, [SP,#0x50+var_28]
.text:000000000002A100                 CMP             X8, X9
.text:000000000002A104                 B.NE            loc_2A120
.text:000000000002A108                 MOV             X0, X19
.text:000000000002A10C                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:000000000002A110                 LDP             X20, X19, [SP,#0x50+var_10]
.text:000000000002A114                 LDP             X22, X21, [SP,#0x50+var_20]
.text:000000000002A118                 ADD             SP, SP, #0x60 ; '`'
.text:000000000002A11C                 RET
.text:000000000002A120 ; ---------------------------------------------------------------------------
.text:000000000002A120 loc_2A120                               ; CODE XREF: sub_29FF0+114↑j
.text:000000000002A120                 BL              .__stack_chk_fail
.text:000000000002A120 ; } // starts at 29FF0
.text:000000000002A120 ; End of function sub_29FF0
.text:000000000002A120 ; ---------------------------------------------------------------------------
.text:000000000002A124                 ALIGN 8
.text:000000000002A128 ; =============== S U B R O U T I N E =======================================
.text:000000000002A128 ; __int64 __fastcall gui::WidgetsSettings::Graph::getTextColor(gui::WidgetsSettings::Graph *__hidden this)
.text:000000000002A128                 EXPORT _ZN3gui15WidgetsSettings5Graph12getTextColorEv
.text:000000000002A128 _ZN3gui15WidgetsSettings5Graph12getTextColorEv
.text:000000000002A128                                         ; DATA XREF: LOAD:0000000000001C38↑o
.text:000000000002A128 ; __unwind {
.text:000000000002A128                 LDR             X8, [X0]
.text:000000000002A12C                 LDRB            W8, [X8,#0x28]
.text:000000000002A130                 CBZ             W8, loc_2A180
.text:000000000002A134                 LDR             X8, [X0,#8]
.text:000000000002A138                 MOV             W10, #0x437F0000
.text:000000000002A13C                 MOV             X11, #0x3F80000000000000
.text:000000000002A140                 FMOV            S1, W10
.text:000000000002A144                 LDR             X8, [X8,#0x28]
.text:000000000002A148                 UBFX            X9, X8, #0x10, #8
.text:000000000002A14C                 SCVTF           S0, X9
.text:000000000002A150                 UBFX            X9, X8, #8, #8
.text:000000000002A154                 AND             X8, X8, #0xFF
.text:000000000002A158                 SCVTF           S2, X9
.text:000000000002A15C                 SCVTF           S3, X8
.text:000000000002A160                 FDIV            S0, S0, S1
.text:000000000002A164                 FDIV            S2, S2, S1
.text:000000000002A168                 FMOV            W8, S0
.text:000000000002A16C                 FDIV            S1, S3, S1
.text:000000000002A170                 FMOV            W10, S2
.text:000000000002A174                 LSL             X10, X10, #0x20 ; ' '
.text:000000000002A178                 FMOV            W9, S1
.text:000000000002A17C                 B               loc_2A190
.text:000000000002A180 ; ---------------------------------------------------------------------------
.text:000000000002A180 loc_2A180                               ; CODE XREF: gui::WidgetsSettings::Graph::getTextColor(void)+8↑j
.text:000000000002A180                 MOV             X8, XZR
.text:000000000002A184                 MOV             X10, XZR
.text:000000000002A188                 MOV             X9, XZR
.text:000000000002A18C                 MOV             X11, XZR
.text:000000000002A190 loc_2A190                               ; CODE XREF: gui::WidgetsSettings::Graph::getTextColor(void)+54↑j
.text:000000000002A190                 ORR             X0, X10, X8
.text:000000000002A194                 ORR             X1, X11, X9
.text:000000000002A198                 RET
.text:000000000002A198 ; } // starts at 2A128
.text:000000000002A198 ; End of function gui::WidgetsSettings::Graph::getTextColor(void)
.text:000000000002A198 ; ---------------------------------------------------------------------------
.text:000000000002A19C                 ALIGN 0x20
.text:000000000002A1A0 ; =============== S U B R O U T I N E =======================================
.text:000000000002A1A0 ; __int64 __fastcall gui::WidgetsSettings::Graph::getGraphColor(gui::WidgetsSettings::Graph *__hidden this, unsigned __int64)
.text:000000000002A1A0                 EXPORT _ZN3gui15WidgetsSettings5Graph13getGraphColorEm
.text:000000000002A1A0 _ZN3gui15WidgetsSettings5Graph13getGraphColorEm
.text:000000000002A1A0                                         ; DATA XREF: LOAD:0000000000001EC0↑o
.text:000000000002A1A0 ; __unwind {
.text:000000000002A1A0                 LDR             X8, [X0]
.text:000000000002A1A4                 LDRB            W8, [X8,#0x28]
.text:000000000002A1A8                 CBZ             W8, loc_2A208
.text:000000000002A1AC                 LDR             X8, [X0,#8]
.text:000000000002A1B0                 MOV             W10, #0x437F0000
.text:000000000002A1B4                 FMOV            S4, #1.0
.text:000000000002A1B8                 FMOV            S1, W10
.text:000000000002A1BC                 LDR             X8, [X8,#0x28]
.text:000000000002A1C0                 UBFX            X9, X8, #0x10, #8
.text:000000000002A1C4                 SCVTF           S0, X9
.text:000000000002A1C8                 UBFX            X9, X8, #8, #8
.text:000000000002A1CC                 AND             X8, X8, #0xFF
.text:000000000002A1D0                 SCVTF           S2, X9
.text:000000000002A1D4                 SCVTF           S3, X8
.text:000000000002A1D8                 FDIV            S0, S0, S1
.text:000000000002A1DC                 FDIV            S2, S2, S1
.text:000000000002A1E0                 FMOV            W8, S0
.text:000000000002A1E4                 FDIV            S1, S3, S1
.text:000000000002A1E8                 UCVTF           S3, X1
.text:000000000002A1EC                 FMOV            W10, S2
.text:000000000002A1F0                 LSL             X10, X10, #0x20 ; ' '
.text:000000000002A1F4                 FDIV            S3, S4, S3
.text:000000000002A1F8                 FMOV            W9, S1
.text:000000000002A1FC                 FMOV            W11, S3
.text:000000000002A200                 LSL             X11, X11, #0x20 ; ' '
.text:000000000002A204                 B               loc_2A218
.text:000000000002A208 ; ---------------------------------------------------------------------------
.text:000000000002A208 loc_2A208                               ; CODE XREF: gui::WidgetsSettings::Graph::getGraphColor(ulong)+8↑j
.text:000000000002A208                 MOV             X8, XZR
.text:000000000002A20C                 MOV             X10, XZR
.text:000000000002A210                 MOV             X9, XZR
.text:000000000002A214                 MOV             X11, XZR
.text:000000000002A218 loc_2A218                               ; CODE XREF: gui::WidgetsSettings::Graph::getGraphColor(ulong)+64↑j
.text:000000000002A218                 ORR             X0, X10, X8
.text:000000000002A21C                 ORR             X1, X11, X9
.text:000000000002A220                 RET
.text:000000000002A220 ; } // starts at 2A1A0
.text:000000000002A220 ; End of function gui::WidgetsSettings::Graph::getGraphColor(ulong)
.text:000000000002A220 ; ---------------------------------------------------------------------------
.text:000000000002A224                 ALIGN 8
.text:000000000002A228 ; =============== S U B R O U T I N E =======================================
.text:000000000002A228 ; __int64 __fastcall gui::WidgetsSettings::Widgets::bgColor(gui::WidgetsSettings::Widgets *__hidden this)
.text:000000000002A228                 EXPORT _ZN3gui15WidgetsSettings7Widgets7bgColorEv
.text:000000000002A228 _ZN3gui15WidgetsSettings7Widgets7bgColorEv
.text:000000000002A228                                         ; DATA XREF: LOAD:0000000000001C20↑o
.text:000000000002A228 ; __unwind {
.text:000000000002A228                 LDP             X9, X10, [X0]
.text:000000000002A22C                 MOV             W8, #0x437F0000
.text:000000000002A230                 FMOV            S0, #1.0
.text:000000000002A234                 LDR             X9, [X9,#0x28]
.text:000000000002A238                 FMOV            S2, W8
.text:000000000002A23C                 UBFX            X8, X9, #8, #8
.text:000000000002A240                 UBFX            X11, X9, #0x10, #8
.text:000000000002A244                 SCVTF           S3, X8
.text:000000000002A248                 LDR             X8, [X10,#0x28]
.text:000000000002A24C                 SCVTF           S1, X11
.text:000000000002A250                 UCVTF           S4, X8
.text:000000000002A254                 AND             X8, X9, #0xFF
.text:000000000002A258                 FDIV            S3, S3, S2
.text:000000000002A25C                 SCVTF           S5, X8
.text:000000000002A260                 FDIV            S4, S4, S2
.text:000000000002A264                 FMOV            W8, S3
.text:000000000002A268                 FDIV            S1, S1, S2
.text:000000000002A26C                 FMIN            S0, S4, S0
.text:000000000002A270                 FMOV            W9, S0
.text:000000000002A274                 FDIV            S2, S5, S2
.text:000000000002A278                 FMOV            W0, S1
.text:000000000002A27C                 BFI             X0, X8, #0x20, #0x20 ; ' '
.text:000000000002A280                 FMOV            W1, S2
.text:000000000002A284                 BFI             X1, X9, #0x20, #0x20 ; ' '
.text:000000000002A288                 RET
.text:000000000002A288 ; } // starts at 2A228
.text:000000000002A288 ; End of function gui::WidgetsSettings::Widgets::bgColor(void)
.text:000000000002A288 ; ---------------------------------------------------------------------------
.text:000000000002A28C                 ALIGN 0x10
.text:000000000002A290 ; =============== S U B R O U T I N E =======================================
.text:000000000002A290 ; __int64 __fastcall gui::WidgetsSettings::Widgets::Fps::enabled(gui::WidgetsSettings::Widgets::Fps *__hidden this)
.text:000000000002A290                 EXPORT _ZN3gui15WidgetsSettings7Widgets3Fps7enabledEv
.text:000000000002A290 _ZN3gui15WidgetsSettings7Widgets3Fps7enabledEv
.text:000000000002A290                                         ; CODE XREF: gui::WidgetsSettings::Widgets::Fps::enabled(void)+C↓j
.text:000000000002A290                                         ; DATA XREF: LOAD:0000000000002070↑o ...
.text:000000000002A290 ; __unwind {
.text:000000000002A290                 LDR             X8, [X0]
.text:000000000002A294                 LDRB            W8, [X8,#0x28]
.text:000000000002A298                 CBZ             W8, loc_2A2B0
.text:000000000002A29C                 LDR             X8, [X0,#0x10]
.text:000000000002A2A0                 LDRB            W8, [X8,#0x28]
.text:000000000002A2A4                 CBZ             W8, loc_2A2B8
.text:000000000002A2A8                 MOV             W0, #1
.text:000000000002A2AC                 RET
.text:000000000002A2B0 ; ---------------------------------------------------------------------------
.text:000000000002A2B0 loc_2A2B0                               ; CODE XREF: gui::WidgetsSettings::Widgets::Fps::enabled(void)+8↑j
.text:000000000002A2B0                 MOV             W0, WZR
.text:000000000002A2B4                 RET
.text:000000000002A2B8 ; ---------------------------------------------------------------------------
.text:000000000002A2B8 loc_2A2B8                               ; CODE XREF: gui::WidgetsSettings::Widgets::Fps::enabled(void)+14↑j
.text:000000000002A2B8                 LDR             X8, [X0,#0x20]
.text:000000000002A2BC                 LDRB            W8, [X8,#0x28]
.text:000000000002A2C0                 CBZ             W8, loc_2A2CC
.text:000000000002A2C4                 MOV             W0, #1
.text:000000000002A2C8                 RET
.text:000000000002A2CC ; ---------------------------------------------------------------------------
.text:000000000002A2CC loc_2A2CC                               ; CODE XREF: gui::WidgetsSettings::Widgets::Fps::enabled(void)+30↑j
.text:000000000002A2CC                 LDR             X8, [X0,#0x30]
.text:000000000002A2D0                 LDRB            W8, [X8,#0x28]
.text:000000000002A2D4                 CMP             W8, #0
.text:000000000002A2D8                 CSET            W0, NE
.text:000000000002A2DC                 RET
.text:000000000002A2DC ; } // starts at 2A290
.text:000000000002A2DC ; End of function gui::WidgetsSettings::Widgets::Fps::enabled(void)
.text:000000000002A2E0 ; =============== S U B R O U T I N E =======================================
.text:000000000002A2E0 ; __int64 __fastcall gui::WidgetsSettings::Widgets::CpuGpu::enabled(gui::WidgetsSettings::Widgets::CpuGpu *__hidden this)
.text:000000000002A2E0                 EXPORT _ZN3gui15WidgetsSettings7Widgets6CpuGpu7enabledEv
.text:000000000002A2E0 _ZN3gui15WidgetsSettings7Widgets6CpuGpu7enabledEv
.text:000000000002A2E0                                         ; CODE XREF: gui::WidgetsSettings::Widgets::CpuGpu::enabled(void)+C↓j
.text:000000000002A2E0                                         ; DATA XREF: LOAD:0000000000001530↑o ...
.text:000000000002A2E0 ; __unwind {
.text:000000000002A2E0                 LDR             X8, [X0]
.text:000000000002A2E4                 LDRB            W8, [X8,#0x28]
.text:000000000002A2E8                 CBZ             W8, loc_2A300
.text:000000000002A2EC                 LDR             X8, [X0,#0x30]
.text:000000000002A2F0                 LDRB            W8, [X8,#0x28]
.text:000000000002A2F4                 CBZ             W8, loc_2A308
.text:000000000002A2F8                 MOV             W0, #1
.text:000000000002A2FC                 RET
.text:000000000002A300 ; ---------------------------------------------------------------------------
.text:000000000002A300 loc_2A300                               ; CODE XREF: gui::WidgetsSettings::Widgets::CpuGpu::enabled(void)+8↑j
.text:000000000002A300                 MOV             W0, WZR
.text:000000000002A304                 RET
.text:000000000002A308 ; ---------------------------------------------------------------------------
.text:000000000002A308 loc_2A308                               ; CODE XREF: gui::WidgetsSettings::Widgets::CpuGpu::enabled(void)+14↑j
.text:000000000002A308                 LDR             X8, [X0,#0x20]
.text:000000000002A30C                 LDRB            W8, [X8,#0x28]
.text:000000000002A310                 CBZ             W8, loc_2A31C
.text:000000000002A314                 MOV             W0, #1
.text:000000000002A318                 RET
.text:000000000002A31C ; ---------------------------------------------------------------------------
.text:000000000002A31C loc_2A31C                               ; CODE XREF: gui::WidgetsSettings::Widgets::CpuGpu::enabled(void)+30↑j
.text:000000000002A31C                 LDR             X8, [X0,#0x10]
.text:000000000002A320                 LDRB            W8, [X8,#0x28]
.text:000000000002A324                 CMP             W8, #0
.text:000000000002A328                 CSET            W0, NE
.text:000000000002A32C                 RET
.text:000000000002A32C ; } // starts at 2A2E0
.text:000000000002A32C ; End of function gui::WidgetsSettings::Widgets::CpuGpu::enabled(void)
.text:000000000002A330 ; =============== S U B R O U T I N E =======================================
.text:000000000002A330 ; __int64 __fastcall gui::WidgetsSettings::Widgets::GpuActivity::enabled(gui::WidgetsSettings::Widgets::GpuActivity *__hidden this)
.text:000000000002A330                 EXPORT _ZN3gui15WidgetsSettings7Widgets11GpuActivity7enabledEv
.text:000000000002A330 _ZN3gui15WidgetsSettings7Widgets11GpuActivity7enabledEv
.text:000000000002A330                                         ; CODE XREF: gui::WidgetsSettings::Widgets::GpuActivity::enabled(void)+C↓j
.text:000000000002A330                                         ; DATA XREF: LOAD:0000000000002220↑o ...
.text:000000000002A330 ; __unwind {
.text:000000000002A330                 LDR             X8, [X0]
.text:000000000002A334                 LDRB            W8, [X8,#0x28]
.text:000000000002A338                 CBZ             W8, loc_2A350
.text:000000000002A33C                 LDR             X8, [X0,#0x10]
.text:000000000002A340                 LDRB            W8, [X8,#0x28]
.text:000000000002A344                 CBZ             W8, loc_2A358
.text:000000000002A348                 MOV             W0, #1
.text:000000000002A34C                 RET
.text:000000000002A350 ; ---------------------------------------------------------------------------
.text:000000000002A350 loc_2A350                               ; CODE XREF: gui::WidgetsSettings::Widgets::GpuActivity::enabled(void)+8↑j
.text:000000000002A350                 MOV             W0, WZR
.text:000000000002A354                 RET
.text:000000000002A358 ; ---------------------------------------------------------------------------
.text:000000000002A358 loc_2A358                               ; CODE XREF: gui::WidgetsSettings::Widgets::GpuActivity::enabled(void)+14↑j
.text:000000000002A358                 LDR             X8, [X0,#0x20]
.text:000000000002A35C                 LDRB            W8, [X8,#0x28]
.text:000000000002A360                 CBZ             W8, loc_2A36C
.text:000000000002A364                 MOV             W0, #1
.text:000000000002A368                 RET
.text:000000000002A36C ; ---------------------------------------------------------------------------
.text:000000000002A36C loc_2A36C                               ; CODE XREF: gui::WidgetsSettings::Widgets::GpuActivity::enabled(void)+30↑j
.text:000000000002A36C                 LDR             X8, [X0,#0x30]
.text:000000000002A370                 LDRB            W8, [X8,#0x28]
.text:000000000002A374                 CBZ             W8, loc_2A380
.text:000000000002A378                 MOV             W0, #1
.text:000000000002A37C                 RET
.text:000000000002A380 ; ---------------------------------------------------------------------------
.text:000000000002A380 loc_2A380                               ; CODE XREF: gui::WidgetsSettings::Widgets::GpuActivity::enabled(void)+44↑j
.text:000000000002A380                 LDR             X8, [X0,#0x38]
.text:000000000002A384                 LDRB            W8, [X8,#0x28]
.text:000000000002A388                 CMP             W8, #0
.text:000000000002A38C                 CSET            W0, NE
.text:000000000002A390                 RET
.text:000000000002A390 ; } // starts at 2A330
.text:000000000002A390 ; End of function gui::WidgetsSettings::Widgets::GpuActivity::enabled(void)
.text:000000000002A390 ; ---------------------------------------------------------------------------
.text:000000000002A394                 ALIGN 8
.text:000000000002A398 ; =============== S U B R O U T I N E =======================================
.text:000000000002A398 ; __int64 __fastcall gui::WidgetsSettings::Widgets::GpuActivity::thumbnailEnabled(gui::WidgetsSettings::Widgets::GpuActivity *__hidden this)
.text:000000000002A398                 EXPORT _ZN3gui15WidgetsSettings7Widgets11GpuActivity16thumbnailEnabledEv
.text:000000000002A398 _ZN3gui15WidgetsSettings7Widgets11GpuActivity16thumbnailEnabledEv
.text:000000000002A398                                         ; CODE XREF: gui::WidgetsSettings::Widgets::GpuActivity::thumbnailEnabled(void)+C↓j
.text:000000000002A398                                         ; DATA XREF: LOAD:0000000000001008↑o ...
.text:000000000002A398 ; __unwind {
.text:000000000002A398                 LDR             X8, [X0]
.text:000000000002A39C                 LDRB            W8, [X8,#0x28]
.text:000000000002A3A0                 CBZ             W8, loc_2A3B8
.text:000000000002A3A4                 LDR             X8, [X0,#0x38]
.text:000000000002A3A8                 LDRB            W8, [X8,#0x28]
.text:000000000002A3AC                 CMP             W8, #0
.text:000000000002A3B0                 CSET            W0, NE
.text:000000000002A3B4                 RET
.text:000000000002A3B8 ; ---------------------------------------------------------------------------
.text:000000000002A3B8 loc_2A3B8                               ; CODE XREF: gui::WidgetsSettings::Widgets::GpuActivity::thumbnailEnabled(void)+8↑j
.text:000000000002A3B8                 MOV             W0, WZR
.text:000000000002A3BC                 RET
.text:000000000002A3BC ; } // starts at 2A398
.text:000000000002A3BC ; End of function gui::WidgetsSettings::Widgets::GpuActivity::thumbnailEnabled(void)
.text:000000000002A3C0 ; =============== S U B R O U T I N E =======================================
.text:000000000002A3C0 ; __int64 __fastcall gui::WidgetsSettings::Widgets::Memory::enabled(gui::WidgetsSettings::Widgets::Memory *__hidden this)
.text:000000000002A3C0                 EXPORT _ZN3gui15WidgetsSettings7Widgets6Memory7enabledEv
.text:000000000002A3C0 _ZN3gui15WidgetsSettings7Widgets6Memory7enabledEv
.text:000000000002A3C0                                         ; CODE XREF: gui::WidgetsSettings::Widgets::Memory::enabled(void)+C↓j
.text:000000000002A3C0                                         ; DATA XREF: LOAD:00000000000015C0↑o ...
.text:000000000002A3C0 ; __unwind {
.text:000000000002A3C0                 LDR             X8, [X0]
.text:000000000002A3C4                 LDRB            W8, [X8,#0x28]
.text:000000000002A3C8                 CBZ             W8, loc_2A3E0
.text:000000000002A3CC                 LDR             X8, [X0,#0x10]
.text:000000000002A3D0                 LDRB            W8, [X8,#0x28]
.text:000000000002A3D4                 CBZ             W8, loc_2A3E8
.text:000000000002A3D8                 MOV             W0, #1
.text:000000000002A3DC                 RET
.text:000000000002A3E0 ; ---------------------------------------------------------------------------
.text:000000000002A3E0 loc_2A3E0                               ; CODE XREF: gui::WidgetsSettings::Widgets::Memory::enabled(void)+8↑j
.text:000000000002A3E0                 MOV             W0, WZR
.text:000000000002A3E4                 RET
.text:000000000002A3E8 ; ---------------------------------------------------------------------------
.text:000000000002A3E8 loc_2A3E8                               ; CODE XREF: gui::WidgetsSettings::Widgets::Memory::enabled(void)+14↑j
.text:000000000002A3E8                 LDR             X8, [X0,#0x20]
.text:000000000002A3EC                 LDRB            W8, [X8,#0x28]
.text:000000000002A3F0                 CBZ             W8, loc_2A3FC
.text:000000000002A3F4                 MOV             W0, #1
.text:000000000002A3F8                 RET
.text:000000000002A3FC ; ---------------------------------------------------------------------------
.text:000000000002A3FC loc_2A3FC                               ; CODE XREF: gui::WidgetsSettings::Widgets::Memory::enabled(void)+30↑j
.text:000000000002A3FC                 LDR             X8, [X0,#0x30]
.text:000000000002A400                 LDRB            W8, [X8,#0x28]
.text:000000000002A404                 CBZ             W8, loc_2A410
.text:000000000002A408                 MOV             W0, #1
.text:000000000002A40C                 RET
.text:000000000002A410 ; ---------------------------------------------------------------------------
.text:000000000002A410 loc_2A410                               ; CODE XREF: gui::WidgetsSettings::Widgets::Memory::enabled(void)+44↑j
.text:000000000002A410                 LDR             X8, [X0,#0x40]
.text:000000000002A414                 LDRB            W8, [X8,#0x28]
.text:000000000002A418                 CBZ             W8, loc_2A424
.text:000000000002A41C                 MOV             W0, #1
.text:000000000002A420                 RET
.text:000000000002A424 ; ---------------------------------------------------------------------------
.text:000000000002A424 loc_2A424                               ; CODE XREF: gui::WidgetsSettings::Widgets::Memory::enabled(void)+58↑j
.text:000000000002A424                 LDR             X8, [X0,#0x50]
.text:000000000002A428                 LDRB            W8, [X8,#0x28]
.text:000000000002A42C                 CMP             W8, #0
.text:000000000002A430                 CSET            W0, NE
.text:000000000002A434                 RET
.text:000000000002A434 ; } // starts at 2A3C0
.text:000000000002A434 ; End of function gui::WidgetsSettings::Widgets::Memory::enabled(void)
.text:000000000002A438 ; =============== S U B R O U T I N E =======================================
.text:000000000002A438 ; Attributes: bp-based frame
.text:000000000002A438 ; __int64 __fastcall gui::WidgetsSettings::load(gui::WidgetsSettings *__hidden this)
.text:000000000002A438                 EXPORT _ZN3gui15WidgetsSettings4loadEv
.text:000000000002A438 _ZN3gui15WidgetsSettings4loadEv         ; CODE XREF: gui::WidgetsSettings::load(void)+C↓j
.text:000000000002A438                                         ; DATA XREF: LOAD:0000000000000D08↑o ...
.text:000000000002A438 var_70          = -0x70
.text:000000000002A438 var_60          = -0x60
.text:000000000002A438 var_50          = -0x50
.text:000000000002A438 var_30          = -0x30
.text:000000000002A438 var_18          = -0x18
.text:000000000002A438 var_10          = -0x10
.text:000000000002A438 var_s0          =  0
.text:000000000002A438 ; __unwind {
.text:000000000002A438                 SUB             SP, SP, #0x80
.text:000000000002A43C                 STP             X20, X19, [SP,#0x70+var_10]
.text:000000000002A440                 STP             X29, X30, [SP,#0x70+var_s0]
.text:000000000002A444                 ADD             X29, SP, #0x70
.text:000000000002A448                 ADRP            X8, #_ZN3gui15WidgetsSettings8isInitedE_ptr@PAGE
.text:000000000002A44C                 MRS             X19, #3, c13, c0, #2
.text:000000000002A450                 LDR             X9, [X19,#0x28]
.text:000000000002A454                 LDR             X8, [X8,#_ZN3gui15WidgetsSettings8isInitedE_ptr@PAGEOFF]
.text:000000000002A458                 STUR            X9, [X29,#var_18]
.text:000000000002A45C                 LDRB            W9, [X8] ; gui::WidgetsSettings::isInited
.text:000000000002A460                 CBNZ            W9, loc_2A4FC
.text:000000000002A464                 ADRP            X10, #off_30558@PAGE
.text:000000000002A468                 MOV             W9, #1
.text:000000000002A46C                 ADD             X20, SP, #0x70+var_50
.text:000000000002A470                 ADD             X10, X10, #off_30558@PAGEOFF
.text:000000000002A474                 ADD             X0, SP, #0x70+var_50
.text:000000000002A478                 STRB            W9, [X8] ; gui::WidgetsSettings::isInited
.text:000000000002A47C                 STR             X20, [SP,#0x70+var_30]
.text:000000000002A480                 STR             X10, [SP,#0x70+var_50]
.text:000000000002A484                 BL              sub_1FDF8
.text:000000000002A488                 LDR             X0, [SP,#0x70+var_30]
.text:000000000002A48C                 CMP             X20, X0
.text:000000000002A490                 B.EQ            loc_2A4A4
.text:000000000002A494                 CBZ             X0, loc_2A4B0
.text:000000000002A498                 LDR             X8, [X0]
.text:000000000002A49C                 LDR             X8, [X8,#0x28]
.text:000000000002A4A0                 B               loc_2A4AC
.text:000000000002A4A4 ; ---------------------------------------------------------------------------
.text:000000000002A4A4 loc_2A4A4                               ; CODE XREF: gui::WidgetsSettings::load(void)+58↑j
.text:000000000002A4A4                 LDR             X8, [X0]
.text:000000000002A4A8                 LDR             X8, [X8,#0x20]
.text:000000000002A4AC loc_2A4AC                               ; CODE XREF: gui::WidgetsSettings::load(void)+68↑j
.text:000000000002A4AC                 BLR             X8
.text:000000000002A4B0 loc_2A4B0                               ; CODE XREF: gui::WidgetsSettings::load(void)+5C↑j
.text:000000000002A4B0                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002A4B4                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A4B8                 ADRP            X9, #_ZN3gui15WidgetsSettings15propToWatchNameE_ptr@PAGE
.text:000000000002A4BC                 ADRP            X8, #xmmword_7B00@PAGE
.text:000000000002A4C0                 MOV             W1, #0x3E8
.text:000000000002A4C4                 LDR             X9, [X9,#_ZN3gui15WidgetsSettings15propToWatchNameE_ptr@PAGEOFF]
.text:000000000002A4C8                 LDR             Q0, [X8,#xmmword_7B00@PAGEOFF]
.text:000000000002A4CC                 MOV             W8, #0x6E ; 'n'
.text:000000000002A4D0                 STR             X0, [SP,#0x70+var_60]
.text:000000000002A4D4                 LDP             Q1, Q2, [X9]
.text:000000000002A4D8                 STRH            W8, [X0,#0x20]
.text:000000000002A4DC                 STR             Q0, [SP,#0x70+var_70]
.text:000000000002A4E0                 STP             Q1, Q2, [X0]
.text:000000000002A4E4                 MOV             X0, SP
.text:000000000002A4E8                 BL              sub_1FC50
.text:000000000002A4EC                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002A4F0                 TBZ             W8, #0, loc_2A4FC
.text:000000000002A4F4                 LDR             X0, [SP,#0x70+var_60] ; void *
.text:000000000002A4F8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A4FC loc_2A4FC                               ; CODE XREF: gui::WidgetsSettings::load(void)+28↑j
.text:000000000002A4FC                                         ; gui::WidgetsSettings::load(void)+B8↑j
.text:000000000002A4FC                 ADRP            X9, #_ZN3gui15WidgetsSettings10wasChangedE_ptr@PAGE
.text:000000000002A500                 LDR             X9, [X9,#_ZN3gui15WidgetsSettings10wasChangedE_ptr@PAGEOFF]
.text:000000000002A504                 LDRB            W8, [X9] ; gui::WidgetsSettings::wasChanged
.text:000000000002A508                 CBZ             W8, loc_2A510
.text:000000000002A50C                 STRB            WZR, [X9] ; gui::WidgetsSettings::wasChanged
.text:000000000002A510 loc_2A510                               ; CODE XREF: gui::WidgetsSettings::load(void)+D0↑j
.text:000000000002A510                 LDR             X9, [X19,#0x28]
.text:000000000002A514                 CMP             W8, #0
.text:000000000002A518                 LDUR            X10, [X29,#var_18]
.text:000000000002A51C                 CSET            W0, NE
.text:000000000002A520                 CMP             X9, X10
.text:000000000002A524                 B.NE            loc_2A538
.text:000000000002A528                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:000000000002A52C                 LDP             X20, X19, [SP,#0x70+var_10]
.text:000000000002A530                 ADD             SP, SP, #0x80
.text:000000000002A534                 RET
.text:000000000002A538 ; ---------------------------------------------------------------------------
.text:000000000002A538 loc_2A538                               ; CODE XREF: gui::WidgetsSettings::load(void)+EC↑j
.text:000000000002A538                 BL              .__stack_chk_fail
.text:000000000002A538 ; } // starts at 2A438
.text:000000000002A538 ; End of function gui::WidgetsSettings::load(void)
.text:000000000002A538 ; ---------------------------------------------------------------------------
.text:000000000002A53C                 ALIGN 0x20
.text:000000000002A540 ; =============== S U B R O U T I N E =======================================
.text:000000000002A540 ; Attributes: bp-based frame
.text:000000000002A540 ; __int64 __fastcall gui::WidgetsSettings::getWidgets(gui::WidgetsSettings *__hidden this)
.text:000000000002A540                 EXPORT _ZN3gui15WidgetsSettings10getWidgetsEv
.text:000000000002A540 _ZN3gui15WidgetsSettings10getWidgetsEv  ; CODE XREF: gui::WidgetsSettings::getWidgets(void)+C↓j
.text:000000000002A540                                         ; DATA XREF: LOAD:0000000000001848↑o ...
.text:000000000002A540 var_s0          =  0
.text:000000000002A540 ; __unwind {
.text:000000000002A540                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002A544                 MOV             X29, SP
.text:000000000002A548                 ADRP            X8, #unk_31350@PAGE
.text:000000000002A54C                 ADD             X8, X8, #unk_31350@PAGEOFF
.text:000000000002A550                 LDARB           W8, [X8]
.text:000000000002A554                 TBZ             W8, #0, loc_2A568
.text:000000000002A558 loc_2A558                               ; CODE XREF: gui::WidgetsSettings::getWidgets(void)+34↓j
.text:000000000002A558                                         ; gui::WidgetsSettings::getWidgets(void)+50↓j
.text:000000000002A558                 ADRP            X0, #unk_31218@PAGE
.text:000000000002A55C                 ADD             X0, X0, #unk_31218@PAGEOFF
.text:000000000002A560                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002A564                 RET
.text:000000000002A568 ; ---------------------------------------------------------------------------
.text:000000000002A568 loc_2A568                               ; CODE XREF: gui::WidgetsSettings::getWidgets(void)+14↑j
.text:000000000002A568                 ADRP            X0, #unk_31350@PAGE
.text:000000000002A56C                 ADD             X0, X0, #unk_31350@PAGEOFF ; __guard *
.text:000000000002A570                 BL              .__cxa_guard_acquire
.text:000000000002A574                 CBZ             W0, loc_2A558
.text:000000000002A578                 ADRP            X0, #unk_31218@PAGE
.text:000000000002A57C                 ADD             X0, X0, #unk_31218@PAGEOFF
.text:000000000002A580                 BL              sub_2A598
.text:000000000002A584                 ADRP            X0, #unk_31350@PAGE
.text:000000000002A588                 ADD             X0, X0, #unk_31350@PAGEOFF ; __guard *
.text:000000000002A58C                 BL              .__cxa_guard_release
.text:000000000002A590                 B               loc_2A558
.text:000000000002A590 ; } // starts at 2A540
.text:000000000002A590 ; End of function gui::WidgetsSettings::getWidgets(void)
.text:000000000002A590 ; ---------------------------------------------------------------------------
.text:000000000002A594                 ALIGN 8
.text:000000000002A598 ; =============== S U B R O U T I N E =======================================
.text:000000000002A598 ; Attributes: bp-based frame
.text:000000000002A598 sub_2A598                               ; CODE XREF: gui::WidgetsSettings::getWidgets(void)+40↑p
.text:000000000002A598 var_60          = -0x60
.text:000000000002A598 var_50          = -0x50
.text:000000000002A598 var_40          = -0x40
.text:000000000002A598 var_30          = -0x30
.text:000000000002A598 var_28          = -0x28
.text:000000000002A598 var_20          = -0x20
.text:000000000002A598 var_10          = -0x10
.text:000000000002A598 var_s0          =  0
.text:000000000002A598 ; __unwind {
.text:000000000002A598                 SUB             SP, SP, #0x70
.text:000000000002A59C                 STR             X21, [SP,#0x60+var_20]
.text:000000000002A5A0                 STP             X20, X19, [SP,#0x60+var_10]
.text:000000000002A5A4                 STP             X29, X30, [SP,#0x60+var_s0]
.text:000000000002A5A8                 ADD             X29, SP, #0x60
.text:000000000002A5AC                 MRS             X21, #3, c13, c0, #2
.text:000000000002A5B0                 MOV             X19, X0
.text:000000000002A5B4                 LDR             X8, [X21,#0x28]
.text:000000000002A5B8                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000002A5BC                 STUR            X8, [X29,#var_28]
.text:000000000002A5C0                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A5C4                 ADRP            X9, #aDebugGpuwatchB@PAGE ; "debug.gpuwatch.bg_color"
.text:000000000002A5C8                 STR             X0, [SP,#0x60+var_30]
.text:000000000002A5CC                 ADD             X9, X9, #aDebugGpuwatchB@PAGEOFF ; "debug.gpuwatch.bg_color"
.text:000000000002A5D0                 STRB            WZR, [X0,#0x17]
.text:000000000002A5D4                 ADRP            X8, #xmmword_7AF0@PAGE
.text:000000000002A5D8                 MOV             W1, #0xFF000000
.text:000000000002A5DC                 LDUR            X10, [X9,#0xF]
.text:000000000002A5E0                 LDR             Q0, [X9] ; "debug.gpuwatch.bg_color"
.text:000000000002A5E4                 LDR             Q1, [X8,#xmmword_7AF0@PAGEOFF]
.text:000000000002A5E8                 STUR            X10, [X0,#0xF]
.text:000000000002A5EC                 STR             Q0, [X0]
.text:000000000002A5F0                 ADD             X0, SP, #0x60+var_40
.text:000000000002A5F4                 STR             Q1, [SP,#0x60+var_40]
.text:000000000002A5F8                 BL              sub_29FF0
.text:000000000002A5FC                 LDRB            W8, [SP,#0x60+var_40]
.text:000000000002A600                 MOV             X20, X0
.text:000000000002A604                 TBZ             W8, #0, loc_2A610
.text:000000000002A608                 LDR             X0, [SP,#0x60+var_30] ; void *
.text:000000000002A60C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A610 loc_2A610                               ; CODE XREF: sub_2A598+6C↑j
.text:000000000002A610                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000002A614                 STR             X20, [X19]
.text:000000000002A618                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A61C                 ADRP            X9, #aDebugGpuwatchB_0@PAGE ; "debug.gpuwatch.bg_transparency"
.text:000000000002A620                 STR             X0, [SP,#0x60+var_50]
.text:000000000002A624                 ADD             X9, X9, #aDebugGpuwatchB_0@PAGEOFF ; "debug.gpuwatch.bg_transparency"
.text:000000000002A628                 STRB            WZR, [X0,#0x1E]
.text:000000000002A62C                 ADRP            X8, #xmmword_7AE0@PAGE
.text:000000000002A630                 MOV             W1, #0x80
.text:000000000002A634                 LDUR            Q0, [X9,#0xE]
.text:000000000002A638                 LDR             Q1, [X9] ; "debug.gpuwatch.bg_transparency"
.text:000000000002A63C                 LDR             Q2, [X8,#xmmword_7AE0@PAGEOFF]
.text:000000000002A640                 STUR            Q0, [X0,#0xE]
.text:000000000002A644                 STR             Q1, [X0]
.text:000000000002A648                 MOV             X0, SP
.text:000000000002A64C                 STR             Q2, [SP,#0x60+var_60]
.text:000000000002A650                 BL              sub_29FF0
.text:000000000002A654                 LDRB            W8, [SP,#0x60+var_60]
.text:000000000002A658                 MOV             X20, X0
.text:000000000002A65C                 TBZ             W8, #0, loc_2A668
.text:000000000002A660                 LDR             X0, [SP,#0x60+var_50] ; void *
.text:000000000002A664                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A668 loc_2A668                               ; CODE XREF: sub_2A598+C4↑j
.text:000000000002A668                 ADD             X0, X19, #0x10
.text:000000000002A66C                 STR             X20, [X19,#8]
.text:000000000002A670                 BL              sub_2A6B8
.text:000000000002A674                 ADD             X0, X19, #0x50 ; 'P'
.text:000000000002A678                 BL              sub_2A8C8
.text:000000000002A67C                 ADD             X0, X19, #0x90
.text:000000000002A680                 BL              sub_2AAD8
.text:000000000002A684                 ADD             X0, X19, #0xD8
.text:000000000002A688                 BL              sub_2ADA0
.text:000000000002A68C                 LDR             X8, [X21,#0x28]
.text:000000000002A690                 LDUR            X9, [X29,#var_28]
.text:000000000002A694                 CMP             X8, X9
.text:000000000002A698                 B.NE            loc_2A6B0
.text:000000000002A69C                 LDP             X29, X30, [SP,#0x60+var_s0]
.text:000000000002A6A0                 LDP             X20, X19, [SP,#0x60+var_10]
.text:000000000002A6A4                 LDR             X21, [SP,#0x60+var_20]
.text:000000000002A6A8                 ADD             SP, SP, #0x70 ; 'p'
.text:000000000002A6AC                 RET
.text:000000000002A6B0 ; ---------------------------------------------------------------------------
.text:000000000002A6B0 loc_2A6B0                               ; CODE XREF: sub_2A598+100↑j
.text:000000000002A6B0                 BL              .__stack_chk_fail
.text:000000000002A6B0 ; } // starts at 2A598
.text:000000000002A6B0 ; End of function sub_2A598
.text:000000000002A6B0 ; ---------------------------------------------------------------------------
.text:000000000002A6B4                 ALIGN 8
.text:000000000002A6B8 ; =============== S U B R O U T I N E =======================================
.text:000000000002A6B8 ; Attributes: bp-based frame
.text:000000000002A6B8 sub_2A6B8                               ; CODE XREF: sub_2A598+D8↑p
.text:000000000002A6B8 var_80          = -0x80
.text:000000000002A6B8 var_70          = -0x70
.text:000000000002A6B8 var_60          = -0x60
.text:000000000002A6B8 var_50          = -0x50
.text:000000000002A6B8 var_40          = -0x40
.text:000000000002A6B8 var_30          = -0x30
.text:000000000002A6B8 var_28          = -0x28
.text:000000000002A6B8 var_20          = -0x20
.text:000000000002A6B8 var_10          = -0x10
.text:000000000002A6B8 var_s0          =  0
.text:000000000002A6B8 ; __unwind {
.text:000000000002A6B8                 SUB             SP, SP, #0x90
.text:000000000002A6BC                 STP             X22, X21, [SP,#0x80+var_20]
.text:000000000002A6C0                 STP             X20, X19, [SP,#0x80+var_10]
.text:000000000002A6C4                 STP             X29, X30, [SP,#0x80+var_s0]
.text:000000000002A6C8                 ADD             X29, SP, #0x80
.text:000000000002A6CC                 MRS             X22, #3, c13, c0, #2
.text:000000000002A6D0                 MOV             X19, X0
.text:000000000002A6D4                 LDR             X8, [X22,#0x28]
.text:000000000002A6D8                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000002A6DC                 STUR            X8, [X29,#var_28]
.text:000000000002A6E0                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A6E4                 ADRP            X9, #aDebugGpuwatchW@PAGE ; "debug.gpuwatch.widget_fps"
.text:000000000002A6E8                 STR             X0, [SP,#0x80+var_30]
.text:000000000002A6EC                 ADD             X9, X9, #aDebugGpuwatchW@PAGEOFF ; "debug.gpuwatch.widget_fps"
.text:000000000002A6F0                 STRB            WZR, [X0,#0x19]
.text:000000000002A6F4                 ADRP            X8, #xmmword_79D0@PAGE
.text:000000000002A6F8                 MOV             W1, #1
.text:000000000002A6FC                 LDUR            Q0, [X9,#9]
.text:000000000002A700                 LDR             Q1, [X9] ; "debug.gpuwatch.widget_fps"
.text:000000000002A704                 LDR             Q2, [X8,#xmmword_79D0@PAGEOFF]
.text:000000000002A708                 STUR            Q0, [X0,#9]
.text:000000000002A70C                 STR             Q1, [X0]
.text:000000000002A710                 ADD             X0, SP, #0x80+var_40
.text:000000000002A714                 STR             Q2, [SP,#0x80+var_40]
.text:000000000002A718                 BL              sub_1C118
.text:000000000002A71C                 LDRB            W8, [SP,#0x80+var_40]
.text:000000000002A720                 MOV             X20, X0
.text:000000000002A724                 TBZ             W8, #0, loc_2A730
.text:000000000002A728                 LDR             X0, [SP,#0x80+var_30] ; void *
.text:000000000002A72C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A730 loc_2A730                               ; CODE XREF: sub_2A6B8+6C↑j
.text:000000000002A730                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002A734                 STR             X20, [X19]
.text:000000000002A738                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A73C                 ADRP            X8, #aDebugGpuwatchW_0@PAGE ; "debug.gpuwatch.widget_fps_position"
.text:000000000002A740                 STR             X0, [SP,#0x80+var_50]
.text:000000000002A744                 ADD             X8, X8, #aDebugGpuwatchW_0@PAGEOFF ; "debug.gpuwatch.widget_fps_position"
.text:000000000002A748                 STRB            WZR, [X0,#0x22]
.text:000000000002A74C                 ADRP            X9, #xmmword_7BD0@PAGE
.text:000000000002A750                 MOV             W10, #0x6E6F
.text:000000000002A754                 LDP             Q0, Q1, [X8]
.text:000000000002A758                 MOV             W1, WZR
.text:000000000002A75C                 LDR             Q2, [X9,#xmmword_7BD0@PAGEOFF]
.text:000000000002A760                 STRH            W10, [X0,#0x20]
.text:000000000002A764                 STP             Q0, Q1, [X0]
.text:000000000002A768                 ADD             X0, SP, #0x80+var_60
.text:000000000002A76C                 STR             Q2, [SP,#0x80+var_60]
.text:000000000002A770                 BL              sub_1C250
.text:000000000002A774                 LDRB            W8, [SP,#0x80+var_60]
.text:000000000002A778                 MOV             X20, X0
.text:000000000002A77C                 TBZ             W8, #0, loc_2A788
.text:000000000002A780                 LDR             X0, [SP,#0x80+var_50] ; void *
.text:000000000002A784                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A788 loc_2A788                               ; CODE XREF: sub_2A6B8+C4↑j
.text:000000000002A788                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002A78C                 STR             X20, [X19,#8]
.text:000000000002A790                 ADD             X21, X19, #0x10
.text:000000000002A794                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A798                 ADRP            X9, #aDebugGpuwatchW_1@PAGE ; "debug.gpuwatch.widget_fps_current"
.text:000000000002A79C                 STR             X0, [SP,#0x80+var_70]
.text:000000000002A7A0                 ADD             X9, X9, #aDebugGpuwatchW_1@PAGEOFF ; "debug.gpuwatch.widget_fps_current"
.text:000000000002A7A4                 ADRP            X8, #xmmword_7B00@PAGE
.text:000000000002A7A8                 MOV             W10, #0x74 ; 't'
.text:000000000002A7AC                 LDP             Q0, Q1, [X9]
.text:000000000002A7B0                 MOV             W3, #0x84FF
.text:000000000002A7B4                 LDR             Q2, [X8,#xmmword_7B00@PAGEOFF]
.text:000000000002A7B8                 MOVK            W3, #0xFF00,LSL#16
.text:000000000002A7BC                 STRH            W10, [X0,#0x20]
.text:000000000002A7C0                 MOV             X1, SP
.text:000000000002A7C4                 STP             Q0, Q1, [X0]
.text:000000000002A7C8                 MOV             X0, X21
.text:000000000002A7CC                 MOV             W2, #1
.text:000000000002A7D0                 STR             Q2, [SP,#0x80+var_80]
.text:000000000002A7D4                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002A7D8                 LDRB            W8, [SP,#0x80+var_80]
.text:000000000002A7DC                 TBZ             W8, #0, loc_2A7E8
.text:000000000002A7E0                 LDR             X0, [SP,#0x80+var_70] ; void *
.text:000000000002A7E4                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A7E8 loc_2A7E8                               ; CODE XREF: sub_2A6B8+124↑j
.text:000000000002A7E8                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002A7EC                 ADD             X20, X19, #0x20 ; ' '
.text:000000000002A7F0                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A7F4                 ADRP            X9, #aDebugGpuwatchW_2@PAGE ; "debug.gpuwatch.widget_fps_median"
.text:000000000002A7F8                 STR             X0, [SP,#0x80+var_70]
.text:000000000002A7FC                 ADD             X9, X9, #aDebugGpuwatchW_2@PAGEOFF ; "debug.gpuwatch.widget_fps_median"
.text:000000000002A800                 STRB            WZR, [X0,#0x20]
.text:000000000002A804                 ADRP            X8, #xmmword_7AA0@PAGE
.text:000000000002A808                 MOV             W3, #0xFFFF7200
.text:000000000002A80C                 LDP             Q1, Q0, [X9]
.text:000000000002A810                 MOV             X1, SP
.text:000000000002A814                 LDR             Q2, [X8,#xmmword_7AA0@PAGEOFF]
.text:000000000002A818                 MOV             W2, #1
.text:000000000002A81C                 STP             Q1, Q0, [X0]
.text:000000000002A820                 MOV             X0, X20
.text:000000000002A824                 STR             Q2, [SP,#0x80+var_80]
.text:000000000002A828                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002A82C                 LDRB            W8, [SP,#0x80+var_80]
.text:000000000002A830                 TBZ             W8, #0, loc_2A83C
.text:000000000002A834                 LDR             X0, [SP,#0x80+var_70] ; void *
.text:000000000002A838                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A83C loc_2A83C                               ; CODE XREF: sub_2A6B8+178↑j
.text:000000000002A83C                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002A840                 ADD             X19, X19, #0x30 ; '0'
.text:000000000002A844                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A848                 ADRP            X8, #aDebugGpuwatchW_3@PAGE ; "debug.gpuwatch.widget_fps_stability"
.text:000000000002A84C                 STR             X0, [SP,#0x80+var_70]
.text:000000000002A850                 ADD             X8, X8, #aDebugGpuwatchW_3@PAGEOFF ; "debug.gpuwatch.widget_fps_stability"
.text:000000000002A854                 STRB            WZR, [X0,#0x23]
.text:000000000002A858                 ADRP            X9, #xmmword_7A60@PAGE
.text:000000000002A85C                 MOV             W10, #0x696C
.text:000000000002A860                 LDP             Q0, Q1, [X8]
.text:000000000002A864                 MOVK            W10, #0x7974,LSL#16
.text:000000000002A868                 LDR             Q2, [X9,#xmmword_7A60@PAGEOFF]
.text:000000000002A86C                 MOV             X1, SP
.text:000000000002A870                 MOV             W2, #1
.text:000000000002A874                 STUR            W10, [X0,#0x1F]
.text:000000000002A878                 MOV             W3, #0xFFFFFF00
.text:000000000002A87C                 STP             Q0, Q1, [X0]
.text:000000000002A880                 MOV             X0, X19
.text:000000000002A884                 STR             Q2, [SP,#0x80+var_80]
.text:000000000002A888                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002A88C                 LDRB            W8, [SP,#0x80+var_80]
.text:000000000002A890                 TBZ             W8, #0, loc_2A89C
.text:000000000002A894                 LDR             X0, [SP,#0x80+var_70] ; void *
.text:000000000002A898                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A89C loc_2A89C                               ; CODE XREF: sub_2A6B8+1D8↑j
.text:000000000002A89C                 LDR             X8, [X22,#0x28]
.text:000000000002A8A0                 LDUR            X9, [X29,#var_28]
.text:000000000002A8A4                 CMP             X8, X9
.text:000000000002A8A8                 B.NE            loc_2A8C0
.text:000000000002A8AC                 LDP             X29, X30, [SP,#0x80+var_s0]
.text:000000000002A8B0                 LDP             X20, X19, [SP,#0x80+var_10]
.text:000000000002A8B4                 LDP             X22, X21, [SP,#0x80+var_20]
.text:000000000002A8B8                 ADD             SP, SP, #0x90
.text:000000000002A8BC                 RET
.text:000000000002A8C0 ; ---------------------------------------------------------------------------
.text:000000000002A8C0 loc_2A8C0                               ; CODE XREF: sub_2A6B8+1F0↑j
.text:000000000002A8C0                 BL              .__stack_chk_fail
.text:000000000002A8C0 ; } // starts at 2A6B8
.text:000000000002A8C0 ; End of function sub_2A6B8
.text:000000000002A8C0 ; ---------------------------------------------------------------------------
.text:000000000002A8C4                 ALIGN 8
.text:000000000002A8C8 ; =============== S U B R O U T I N E =======================================
.text:000000000002A8C8 ; Attributes: bp-based frame
.text:000000000002A8C8 sub_2A8C8                               ; CODE XREF: sub_2A598+E0↑p
.text:000000000002A8C8 var_90          = -0x90
.text:000000000002A8C8 var_80          = -0x80
.text:000000000002A8C8 var_70          = -0x70
.text:000000000002A8C8 var_60          = -0x60
.text:000000000002A8C8 var_50          = -0x50
.text:000000000002A8C8 var_40          = -0x40
.text:000000000002A8C8 var_30          = -0x30
.text:000000000002A8C8 var_28          = -0x28
.text:000000000002A8C8 var_20          = -0x20
.text:000000000002A8C8 var_10          = -0x10
.text:000000000002A8C8 var_s0          =  0
.text:000000000002A8C8 ; __unwind {
.text:000000000002A8C8                 SUB             SP, SP, #0xA0
.text:000000000002A8CC                 STP             X22, X21, [SP,#0x90+var_20]
.text:000000000002A8D0                 STP             X20, X19, [SP,#0x90+var_10]
.text:000000000002A8D4                 STP             X29, X30, [SP,#0x90+var_s0]
.text:000000000002A8D8                 ADD             X29, SP, #0x90
.text:000000000002A8DC                 MRS             X22, #3, c13, c0, #2
.text:000000000002A8E0                 MOV             X19, X0
.text:000000000002A8E4                 LDR             X8, [X22,#0x28]
.text:000000000002A8E8                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000002A8EC                 STUR            X8, [X29,#var_28]
.text:000000000002A8F0                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A8F4                 ADRP            X9, #aDebugGpuwatchW_4@PAGE ; "debug.gpuwatch.widget_cpu_gpu"
.text:000000000002A8F8                 STUR            X0, [X29,#var_30]
.text:000000000002A8FC                 ADD             X9, X9, #aDebugGpuwatchW_4@PAGEOFF ; "debug.gpuwatch.widget_cpu_gpu"
.text:000000000002A900                 STRB            WZR, [X0,#0x1D]
.text:000000000002A904                 ADRP            X8, #xmmword_7B40@PAGE
.text:000000000002A908                 MOV             W1, #1
.text:000000000002A90C                 LDUR            Q0, [X9,#0xD]
.text:000000000002A910                 LDR             Q1, [X9] ; "debug.gpuwatch.widget_cpu_gpu"
.text:000000000002A914                 LDR             Q2, [X8,#xmmword_7B40@PAGEOFF]
.text:000000000002A918                 STUR            Q0, [X0,#0xD]
.text:000000000002A91C                 STR             Q1, [X0]
.text:000000000002A920                 SUB             X0, X29, #-var_40
.text:000000000002A924                 STUR            Q2, [X29,#var_40]
.text:000000000002A928                 BL              sub_1C118
.text:000000000002A92C                 LDURB           W8, [X29,#var_40]
.text:000000000002A930                 MOV             X20, X0
.text:000000000002A934                 TBZ             W8, #0, loc_2A940
.text:000000000002A938                 LDUR            X0, [X29,#var_30] ; void *
.text:000000000002A93C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A940 loc_2A940                               ; CODE XREF: sub_2A8C8+6C↑j
.text:000000000002A940                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002A944                 STR             X20, [X19]
.text:000000000002A948                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A94C                 ADRP            X8, #aDebugGpuwatchW_5@PAGE ; "debug.gpuwatch.widget_cpu_gpu_position"
.text:000000000002A950                 STR             X0, [SP,#0x90+var_50]
.text:000000000002A954                 ADD             X8, X8, #aDebugGpuwatchW_5@PAGEOFF ; "debug.gpuwatch.widget_cpu_gpu_position"
.text:000000000002A958                 STRB            WZR, [X0,#0x26]
.text:000000000002A95C                 ADRP            X9, #xmmword_7A30@PAGE
.text:000000000002A960                 MOV             W1, #2
.text:000000000002A964                 LDUR            X10, [X8,#0x1E]
.text:000000000002A968                 LDP             Q0, Q1, [X8]
.text:000000000002A96C                 LDR             Q2, [X9,#xmmword_7A30@PAGEOFF]
.text:000000000002A970                 STUR            X10, [X0,#0x1E]
.text:000000000002A974                 STP             Q0, Q1, [X0]
.text:000000000002A978                 ADD             X0, SP, #0x90+var_60
.text:000000000002A97C                 STR             Q2, [SP,#0x90+var_90]
.text:000000000002A980                 STR             Q2, [SP,#0x90+var_60]
.text:000000000002A984                 BL              sub_1C250
.text:000000000002A988                 LDRB            W8, [SP,#0x90+var_60]
.text:000000000002A98C                 MOV             X20, X0
.text:000000000002A990                 TBZ             W8, #0, loc_2A99C
.text:000000000002A994                 LDR             X0, [SP,#0x90+var_50] ; void *
.text:000000000002A998                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A99C loc_2A99C                               ; CODE XREF: sub_2A8C8+C8↑j
.text:000000000002A99C                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002A9A0                 STR             X20, [X19,#8]
.text:000000000002A9A4                 ADD             X21, X19, #0x10
.text:000000000002A9A8                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002A9AC                 LDR             Q0, [SP,#0x90+var_90]
.text:000000000002A9B0                 ADRP            X8, #aDebugGpuwatchW_6@PAGE ; "debug.gpuwatch.widget_cpu_gpu_cpu_load"
.text:000000000002A9B4                 ADD             X8, X8, #aDebugGpuwatchW_6@PAGEOFF ; "debug.gpuwatch.widget_cpu_gpu_cpu_load"
.text:000000000002A9B8                 STR             X0, [SP,#0x90+var_70]
.text:000000000002A9BC                 MOV             W3, #0x84FF
.text:000000000002A9C0                 STRB            WZR, [X0,#0x26]
.text:000000000002A9C4                 MOVK            W3, #0xFF00,LSL#16
.text:000000000002A9C8                 STR             Q0, [SP,#0x90+var_80]
.text:000000000002A9CC                 ADD             X1, SP, #0x90+var_80
.text:000000000002A9D0                 LDUR            X9, [X8,#0x1E]
.text:000000000002A9D4                 MOV             W2, #1
.text:000000000002A9D8                 LDP             Q1, Q0, [X8]
.text:000000000002A9DC                 STUR            X9, [X0,#0x1E]
.text:000000000002A9E0                 STP             Q1, Q0, [X0]
.text:000000000002A9E4                 MOV             X0, X21
.text:000000000002A9E8                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002A9EC                 LDRB            W8, [SP,#0x90+var_80]
.text:000000000002A9F0                 TBZ             W8, #0, loc_2A9FC
.text:000000000002A9F4                 LDR             X0, [SP,#0x90+var_70] ; void *
.text:000000000002A9F8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002A9FC loc_2A9FC                               ; CODE XREF: sub_2A8C8+128↑j
.text:000000000002A9FC                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AA00                 ADD             X20, X19, #0x20 ; ' '
.text:000000000002AA04                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AA08                 LDR             Q0, [SP,#0x90+var_90]
.text:000000000002AA0C                 ADRP            X8, #aDebugGpuwatchW_7@PAGE ; "debug.gpuwatch.widget_cpu_gpu_gpu_freq"
.text:000000000002AA10                 ADD             X8, X8, #aDebugGpuwatchW_7@PAGEOFF ; "debug.gpuwatch.widget_cpu_gpu_gpu_freq"
.text:000000000002AA14                 STR             X0, [SP,#0x90+var_70]
.text:000000000002AA18                 STRB            WZR, [X0,#0x26]
.text:000000000002AA1C                 ADD             X1, SP, #0x90+var_80
.text:000000000002AA20                 MOV             W2, WZR
.text:000000000002AA24                 STR             Q0, [SP,#0x90+var_80]
.text:000000000002AA28                 MOV             W3, #0xFFFFFF00
.text:000000000002AA2C                 LDUR            X9, [X8,#0x1E]
.text:000000000002AA30                 LDP             Q1, Q0, [X8]
.text:000000000002AA34                 STUR            X9, [X0,#0x1E]
.text:000000000002AA38                 STP             Q1, Q0, [X0]
.text:000000000002AA3C                 MOV             X0, X20
.text:000000000002AA40                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002AA44                 LDRB            W8, [SP,#0x90+var_80]
.text:000000000002AA48                 TBZ             W8, #0, loc_2AA54
.text:000000000002AA4C                 LDR             X0, [SP,#0x90+var_70] ; void *
.text:000000000002AA50                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AA54 loc_2AA54                               ; CODE XREF: sub_2A8C8+180↑j
.text:000000000002AA54                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AA58                 ADD             X19, X19, #0x30 ; '0'
.text:000000000002AA5C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AA60                 LDR             Q0, [SP,#0x90+var_90]
.text:000000000002AA64                 ADRP            X8, #aDebugGpuwatchW_8@PAGE ; "debug.gpuwatch.widget_cpu_gpu_gpu_load"
.text:000000000002AA68                 ADD             X8, X8, #aDebugGpuwatchW_8@PAGEOFF ; "debug.gpuwatch.widget_cpu_gpu_gpu_load"
.text:000000000002AA6C                 STR             X0, [SP,#0x90+var_70]
.text:000000000002AA70                 STRB            WZR, [X0,#0x26]
.text:000000000002AA74                 MOV             W3, #0xFFFF7200
.text:000000000002AA78                 ADD             X1, SP, #0x90+var_80
.text:000000000002AA7C                 STR             Q0, [SP,#0x90+var_80]
.text:000000000002AA80                 MOV             W2, #1
.text:000000000002AA84                 LDUR            X9, [X8,#0x1E]
.text:000000000002AA88                 LDP             Q1, Q0, [X8]
.text:000000000002AA8C                 STUR            X9, [X0,#0x1E]
.text:000000000002AA90                 STP             Q1, Q0, [X0]
.text:000000000002AA94                 MOV             X0, X19
.text:000000000002AA98                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002AA9C                 LDRB            W8, [SP,#0x90+var_80]
.text:000000000002AAA0                 TBZ             W8, #0, loc_2AAAC
.text:000000000002AAA4                 LDR             X0, [SP,#0x90+var_70] ; void *
.text:000000000002AAA8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AAAC loc_2AAAC                               ; CODE XREF: sub_2A8C8+1D8↑j
.text:000000000002AAAC                 LDR             X8, [X22,#0x28]
.text:000000000002AAB0                 LDUR            X9, [X29,#var_28]
.text:000000000002AAB4                 CMP             X8, X9
.text:000000000002AAB8                 B.NE            loc_2AAD0
.text:000000000002AABC                 LDP             X29, X30, [SP,#0x90+var_s0]
.text:000000000002AAC0                 LDP             X20, X19, [SP,#0x90+var_10]
.text:000000000002AAC4                 LDP             X22, X21, [SP,#0x90+var_20]
.text:000000000002AAC8                 ADD             SP, SP, #0xA0
.text:000000000002AACC                 RET
.text:000000000002AAD0 ; ---------------------------------------------------------------------------
.text:000000000002AAD0 loc_2AAD0                               ; CODE XREF: sub_2A8C8+1F0↑j
.text:000000000002AAD0                 BL              .__stack_chk_fail
.text:000000000002AAD0 ; } // starts at 2A8C8
.text:000000000002AAD0 ; End of function sub_2A8C8
.text:000000000002AAD0 ; ---------------------------------------------------------------------------
.text:000000000002AAD4                 ALIGN 8
.text:000000000002AAD8 ; =============== S U B R O U T I N E =======================================
.text:000000000002AAD8 ; Attributes: bp-based frame
.text:000000000002AAD8 sub_2AAD8                               ; CODE XREF: sub_2A598+E8↑p
.text:000000000002AAD8 var_E0          = -0xE0
.text:000000000002AAD8 var_D0          = -0xD0
.text:000000000002AAD8 var_C0          = -0xC0
.text:000000000002AAD8 var_B0          = -0xB0
.text:000000000002AAD8 var_A0          = -0xA0
.text:000000000002AAD8 var_90          = -0x90
.text:000000000002AAD8 var_80          = -0x80
.text:000000000002AAD8 var_70          = -0x70
.text:000000000002AAD8 var_60          = -0x60
.text:000000000002AAD8 var_50          = -0x50
.text:000000000002AAD8 var_40          = -0x40
.text:000000000002AAD8 var_30          = -0x30
.text:000000000002AAD8 var_28          = -0x28
.text:000000000002AAD8 var_20          = -0x20
.text:000000000002AAD8 var_10          = -0x10
.text:000000000002AAD8 var_s0          =  0
.text:000000000002AAD8 ; __unwind {
.text:000000000002AAD8                 SUB             SP, SP, #0xF0
.text:000000000002AADC                 STP             X22, X21, [SP,#0xE0+var_20]
.text:000000000002AAE0                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000002AAE4                 STP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000002AAE8                 ADD             X29, SP, #0xE0
.text:000000000002AAEC                 MRS             X22, #3, c13, c0, #2
.text:000000000002AAF0                 MOV             X19, X0
.text:000000000002AAF4                 LDR             X8, [X22,#0x28]
.text:000000000002AAF8                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AAFC                 STUR            X8, [X29,#var_28]
.text:000000000002AB00                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AB04                 ADRP            X8, #aDebugGpuwatchW_9@PAGE ; "debug.gpuwatch.widget_gpu_activity"
.text:000000000002AB08                 STUR            X0, [X29,#var_30]
.text:000000000002AB0C                 ADD             X8, X8, #aDebugGpuwatchW_9@PAGEOFF ; "debug.gpuwatch.widget_gpu_activity"
.text:000000000002AB10                 STRB            WZR, [X0,#0x22]
.text:000000000002AB14                 ADRP            X9, #xmmword_7BD0@PAGE
.text:000000000002AB18                 MOV             W10, #0x7974
.text:000000000002AB1C                 LDP             Q0, Q1, [X8]
.text:000000000002AB20                 MOV             W1, #1
.text:000000000002AB24                 LDR             Q2, [X9,#xmmword_7BD0@PAGEOFF]
.text:000000000002AB28                 STRH            W10, [X0,#0x20]
.text:000000000002AB2C                 STP             Q0, Q1, [X0]
.text:000000000002AB30                 SUB             X0, X29, #-var_40
.text:000000000002AB34                 STUR            Q2, [X29,#var_40]
.text:000000000002AB38                 BL              sub_1C118
.text:000000000002AB3C                 LDURB           W8, [X29,#var_40]
.text:000000000002AB40                 MOV             X20, X0
.text:000000000002AB44                 TBZ             W8, #0, loc_2AB50
.text:000000000002AB48                 LDUR            X0, [X29,#var_30] ; void *
.text:000000000002AB4C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AB50 loc_2AB50                               ; CODE XREF: sub_2AAD8+6C↑j
.text:000000000002AB50                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AB54                 STR             X20, [X19]
.text:000000000002AB58                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AB5C                 ADRP            X8, #aDebugGpuwatchW_10@PAGE ; "debug.gpuwatch.widget_gpu_activity_posi"...
.text:000000000002AB60                 STUR            X0, [X29,#var_50]
.text:000000000002AB64                 ADD             X8, X8, #aDebugGpuwatchW_10@PAGEOFF ; "debug.gpuwatch.widget_gpu_activity_posi"...
.text:000000000002AB68                 STRB            WZR, [X0,#0x2B]
.text:000000000002AB6C                 ADRP            X9, #xmmword_7B90@PAGE
.text:000000000002AB70                 MOV             W1, #6
.text:000000000002AB74                 LDUR            Q0, [X8,#0x1B]
.text:000000000002AB78                 LDP             Q1, Q2, [X8]
.text:000000000002AB7C                 LDR             Q3, [X9,#xmmword_7B90@PAGEOFF]
.text:000000000002AB80                 STUR            Q0, [X0,#0x1B]
.text:000000000002AB84                 STP             Q1, Q2, [X0]
.text:000000000002AB88                 SUB             X0, X29, #-var_60
.text:000000000002AB8C                 STUR            Q3, [X29,#var_60]
.text:000000000002AB90                 BL              sub_1C250
.text:000000000002AB94                 LDURB           W8, [X29,#var_60]
.text:000000000002AB98                 MOV             X20, X0
.text:000000000002AB9C                 TBZ             W8, #0, loc_2ABA8
.text:000000000002ABA0                 LDUR            X0, [X29,#var_50] ; void *
.text:000000000002ABA4                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002ABA8 loc_2ABA8                               ; CODE XREF: sub_2AAD8+C4↑j
.text:000000000002ABA8                 MOV             W0, #0x40 ; '@' ; unsigned __int64
.text:000000000002ABAC                 STR             X20, [X19,#8]
.text:000000000002ABB0                 ADD             X21, X19, #0x10
.text:000000000002ABB4                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002ABB8                 ADRP            X8, #aDebugGpuwatchW_11@PAGE ; "debug.gpuwatch.widget_gpu_activity_frag"...
.text:000000000002ABBC                 STR             X0, [SP,#0xE0+var_70]
.text:000000000002ABC0                 ADD             X8, X8, #aDebugGpuwatchW_11@PAGEOFF ; "debug.gpuwatch.widget_gpu_activity_frag"...
.text:000000000002ABC4                 STRB            WZR, [X0,#0x30]
.text:000000000002ABC8                 ADRP            X9, #xmmword_7A10@PAGE
.text:000000000002ABCC                 MOV             W3, #0xFFFF7200
.text:000000000002ABD0                 LDP             Q0, Q1, [X8]
.text:000000000002ABD4                 LDR             Q2, [X8,#(aDebugGpuwatchW_11+0x20 - 0x7EE2)] ; "ty_fragment_load"
.text:000000000002ABD8                 ADD             X1, SP, #0xE0+var_80
.text:000000000002ABDC                 LDR             Q3, [X9,#xmmword_7A10@PAGEOFF]
.text:000000000002ABE0                 MOV             W2, #1
.text:000000000002ABE4                 STR             Q0, [X0]
.text:000000000002ABE8                 STP             Q1, Q2, [X0,#0x10]
.text:000000000002ABEC                 MOV             X0, X21
.text:000000000002ABF0                 STR             Q3, [SP,#0xE0+var_80]
.text:000000000002ABF4                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002ABF8                 LDRB            W8, [SP,#0xE0+var_80]
.text:000000000002ABFC                 TBZ             W8, #0, loc_2AC08
.text:000000000002AC00                 LDR             X0, [SP,#0xE0+var_70] ; void *
.text:000000000002AC04                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AC08 loc_2AC08                               ; CODE XREF: sub_2AAD8+124↑j
.text:000000000002AC08                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AC0C                 ADD             X20, X19, #0x20 ; ' '
.text:000000000002AC10                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AC14                 ADRP            X8, #aDebugGpuwatchW_12@PAGE ; "debug.gpuwatch.widget_gpu_activity_vert"...
.text:000000000002AC18                 STR             X0, [SP,#0xE0+var_70]
.text:000000000002AC1C                 ADD             X8, X8, #aDebugGpuwatchW_12@PAGEOFF ; "debug.gpuwatch.widget_gpu_activity_vert"...
.text:000000000002AC20                 STRB            WZR, [X0,#0x2E]
.text:000000000002AC24                 ADRP            X9, #xmmword_79B0@PAGE
.text:000000000002AC28                 MOV             W3, #0x84FF
.text:000000000002AC2C                 LDUR            Q0, [X8,#0x1E]
.text:000000000002AC30                 MOVK            W3, #0xFF00,LSL#16
.text:000000000002AC34                 LDP             Q1, Q2, [X8]
.text:000000000002AC38                 LDR             Q3, [X9,#xmmword_79B0@PAGEOFF]
.text:000000000002AC3C                 ADD             X1, SP, #0xE0+var_80
.text:000000000002AC40                 STUR            Q0, [X0,#0x1E]
.text:000000000002AC44                 MOV             W2, #1
.text:000000000002AC48                 STP             Q1, Q2, [X0]
.text:000000000002AC4C                 MOV             X0, X20
.text:000000000002AC50                 STR             Q3, [SP,#0xE0+var_80]
.text:000000000002AC54                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002AC58                 LDRB            W8, [SP,#0xE0+var_80]
.text:000000000002AC5C                 TBZ             W8, #0, loc_2AC68
.text:000000000002AC60                 LDR             X0, [SP,#0xE0+var_70] ; void *
.text:000000000002AC64                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AC68 loc_2AC68                               ; CODE XREF: sub_2AAD8+184↑j
.text:000000000002AC68                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AC6C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AC70                 ADRP            X8, #aDebugGpuwatchW_13@PAGE ; "debug.gpuwatch.widget_gpu_activity_rend"...
.text:000000000002AC74                 STR             X0, [SP,#0xE0+var_90]
.text:000000000002AC78                 ADD             X8, X8, #aDebugGpuwatchW_13@PAGEOFF ; "debug.gpuwatch.widget_gpu_activity_rend"...
.text:000000000002AC7C                 STRB            WZR, [X0,#0x2D]
.text:000000000002AC80                 ADRP            X9, #xmmword_7B50@PAGE
.text:000000000002AC84                 MOV             W1, #1
.text:000000000002AC88                 LDUR            Q0, [X8,#0x1D]
.text:000000000002AC8C                 LDP             Q1, Q2, [X8]
.text:000000000002AC90                 LDR             Q3, [X9,#xmmword_7B50@PAGEOFF]
.text:000000000002AC94                 STUR            Q0, [X0,#0x1D]
.text:000000000002AC98                 STP             Q1, Q2, [X0]
.text:000000000002AC9C                 ADD             X0, SP, #0xE0+var_A0
.text:000000000002ACA0                 STR             Q3, [SP,#0xE0+var_A0]
.text:000000000002ACA4                 BL              sub_1C118
.text:000000000002ACA8                 LDRB            W8, [SP,#0xE0+var_A0]
.text:000000000002ACAC                 MOV             X20, X0
.text:000000000002ACB0                 TBZ             W8, #0, loc_2ACBC
.text:000000000002ACB4                 LDR             X0, [SP,#0xE0+var_90] ; void *
.text:000000000002ACB8                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002ACBC loc_2ACBC                               ; CODE XREF: sub_2AAD8+1D8↑j
.text:000000000002ACBC                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002ACC0                 STR             X20, [X19,#0x30]
.text:000000000002ACC4                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002ACC8                 ADRP            X8, #aDebugGpuwatchW_14@PAGE ; "debug.gpuwatch.widget_gpu_activity_thum"...
.text:000000000002ACCC                 STR             X0, [SP,#0xE0+var_B0]
.text:000000000002ACD0                 ADD             X8, X8, #aDebugGpuwatchW_14@PAGEOFF ; "debug.gpuwatch.widget_gpu_activity_thum"...
.text:000000000002ACD4                 STRB            WZR, [X0,#0x2C]
.text:000000000002ACD8                 ADRP            X9, #xmmword_79F0@PAGE
.text:000000000002ACDC                 MOV             W1, #1
.text:000000000002ACE0                 LDUR            Q0, [X8,#0x1C]
.text:000000000002ACE4                 LDP             Q1, Q2, [X8]
.text:000000000002ACE8                 LDR             Q3, [X9,#xmmword_79F0@PAGEOFF]
.text:000000000002ACEC                 STUR            Q0, [X0,#0x1C]
.text:000000000002ACF0                 STP             Q1, Q2, [X0]
.text:000000000002ACF4                 ADD             X0, SP, #0xE0+var_C0
.text:000000000002ACF8                 STR             Q3, [SP,#0xE0+var_C0]
.text:000000000002ACFC                 BL              sub_1C118
.text:000000000002AD00                 LDRB            W8, [SP,#0xE0+var_C0]
.text:000000000002AD04                 MOV             X20, X0
.text:000000000002AD08                 TBZ             W8, #0, loc_2AD14
.text:000000000002AD0C                 LDR             X0, [SP,#0xE0+var_B0] ; void *
.text:000000000002AD10                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AD14 loc_2AD14                               ; CODE XREF: sub_2AAD8+230↑j
.text:000000000002AD14                 MOV             W0, #0x40 ; '@' ; unsigned __int64
.text:000000000002AD18                 STR             X20, [X19,#0x38]
.text:000000000002AD1C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AD20                 ADRP            X9, #aDebugGpuwatchW_15@PAGE ; "debug.gpuwatch.widget_gpu_activity_thum"...
.text:000000000002AD24                 STR             X0, [SP,#0xE0+var_D0]
.text:000000000002AD28                 ADRP            X8, #xmmword_7B20@PAGE
.text:000000000002AD2C                 STRB            WZR, [X0,#0x35]
.text:000000000002AD30                 ADD             X9, X9, #aDebugGpuwatchW_15@PAGEOFF ; "debug.gpuwatch.widget_gpu_activity_thum"...
.text:000000000002AD34                 MOV             W1, #5
.text:000000000002AD38                 LDR             Q0, [X8,#xmmword_7B20@PAGEOFF]
.text:000000000002AD3C                 LDUR            X8, [X9,#0x2D]
.text:000000000002AD40                 LDP             Q3, Q1, [X9,#0x10]
.text:000000000002AD44                 LDR             Q2, [X9] ; "debug.gpuwatch.widget_gpu_activity_thum"...
.text:000000000002AD48                 STUR            X8, [X0,#0x2D]
.text:000000000002AD4C                 STP             Q3, Q1, [X0,#0x10]
.text:000000000002AD50                 STR             Q2, [X0]
.text:000000000002AD54                 MOV             X0, SP
.text:000000000002AD58                 STR             Q0, [SP,#0xE0+var_E0]
.text:000000000002AD5C                 BL              sub_1C250
.text:000000000002AD60                 LDRB            W8, [SP,#0xE0+var_E0]
.text:000000000002AD64                 MOV             X20, X0
.text:000000000002AD68                 TBZ             W8, #0, loc_2AD74
.text:000000000002AD6C                 LDR             X0, [SP,#0xE0+var_D0] ; void *
.text:000000000002AD70                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AD74 loc_2AD74                               ; CODE XREF: sub_2AAD8+290↑j
.text:000000000002AD74                 STR             X20, [X19,#0x40]
.text:000000000002AD78                 LDR             X8, [X22,#0x28]
.text:000000000002AD7C                 LDUR            X9, [X29,#var_28]
.text:000000000002AD80                 CMP             X8, X9
.text:000000000002AD84                 B.NE            loc_2AD9C
.text:000000000002AD88                 LDP             X29, X30, [SP,#0xE0+var_s0]
.text:000000000002AD8C                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000002AD90                 LDP             X22, X21, [SP,#0xE0+var_20]
.text:000000000002AD94                 ADD             SP, SP, #0xF0
.text:000000000002AD98                 RET
.text:000000000002AD9C ; ---------------------------------------------------------------------------
.text:000000000002AD9C loc_2AD9C                               ; CODE XREF: sub_2AAD8+2AC↑j
.text:000000000002AD9C                 BL              .__stack_chk_fail
.text:000000000002AD9C ; } // starts at 2AAD8
.text:000000000002AD9C ; End of function sub_2AAD8
.text:000000000002ADA0 ; =============== S U B R O U T I N E =======================================
.text:000000000002ADA0 ; Attributes: bp-based frame
.text:000000000002ADA0 sub_2ADA0                               ; CODE XREF: sub_2A598+F0↑p
.text:000000000002ADA0 var_A0          = -0xA0
.text:000000000002ADA0 var_90          = -0x90
.text:000000000002ADA0 var_80          = -0x80
.text:000000000002ADA0 var_70          = -0x70
.text:000000000002ADA0 var_60          = -0x60
.text:000000000002ADA0 var_50          = -0x50
.text:000000000002ADA0 var_40          = -0x40
.text:000000000002ADA0 var_30          = -0x30
.text:000000000002ADA0 var_28          = -0x28
.text:000000000002ADA0 var_20          = -0x20
.text:000000000002ADA0 var_10          = -0x10
.text:000000000002ADA0 var_s0          =  0
.text:000000000002ADA0 ; __unwind {
.text:000000000002ADA0                 SUB             SP, SP, #0xB0
.text:000000000002ADA4                 STP             X22, X21, [SP,#0xA0+var_20]
.text:000000000002ADA8                 STP             X20, X19, [SP,#0xA0+var_10]
.text:000000000002ADAC                 STP             X29, X30, [SP,#0xA0+var_s0]
.text:000000000002ADB0                 ADD             X29, SP, #0xA0
.text:000000000002ADB4                 MRS             X22, #3, c13, c0, #2
.text:000000000002ADB8                 MOV             X19, X0
.text:000000000002ADBC                 LDR             X8, [X22,#0x28]
.text:000000000002ADC0                 MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:000000000002ADC4                 STUR            X8, [X29,#var_28]
.text:000000000002ADC8                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002ADCC                 ADRP            X9, #aDebugGpuwatchW_16@PAGE ; "debug.gpuwatch.widget_memory"
.text:000000000002ADD0                 STUR            X0, [X29,#var_30]
.text:000000000002ADD4                 ADD             X9, X9, #aDebugGpuwatchW_16@PAGEOFF ; "debug.gpuwatch.widget_memory"
.text:000000000002ADD8                 STRB            WZR, [X0,#0x1C]
.text:000000000002ADDC                 ADRP            X8, #xmmword_7BE0@PAGE
.text:000000000002ADE0                 MOV             W1, WZR
.text:000000000002ADE4                 LDUR            Q0, [X9,#0xC]
.text:000000000002ADE8                 LDR             Q1, [X9] ; "debug.gpuwatch.widget_memory"
.text:000000000002ADEC                 LDR             Q2, [X8,#xmmword_7BE0@PAGEOFF]
.text:000000000002ADF0                 STUR            Q0, [X0,#0xC]
.text:000000000002ADF4                 STR             Q1, [X0]
.text:000000000002ADF8                 SUB             X0, X29, #-var_40
.text:000000000002ADFC                 STUR            Q2, [X29,#var_40]
.text:000000000002AE00                 BL              sub_1C118
.text:000000000002AE04                 LDURB           W8, [X29,#var_40]
.text:000000000002AE08                 MOV             X20, X0
.text:000000000002AE0C                 TBZ             W8, #0, loc_2AE18
.text:000000000002AE10                 LDUR            X0, [X29,#var_30] ; void *
.text:000000000002AE14                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AE18 loc_2AE18                               ; CODE XREF: sub_2ADA0+6C↑j
.text:000000000002AE18                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AE1C                 STR             X20, [X19]
.text:000000000002AE20                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AE24                 ADRP            X8, #aDebugGpuwatchW_17@PAGE ; "debug.gpuwatch.widget_memory_position"
.text:000000000002AE28                 STR             X0, [SP,#0xA0+var_50]
.text:000000000002AE2C                 ADD             X8, X8, #aDebugGpuwatchW_17@PAGEOFF ; "debug.gpuwatch.widget_memory_position"
.text:000000000002AE30                 STRB            WZR, [X0,#0x25]
.text:000000000002AE34                 ADRP            X9, #xmmword_7A40@PAGE
.text:000000000002AE38                 MOV             W1, #1
.text:000000000002AE3C                 LDUR            X10, [X8,#0x1D]
.text:000000000002AE40                 LDP             Q0, Q1, [X8]
.text:000000000002AE44                 LDR             Q2, [X9,#xmmword_7A40@PAGEOFF]
.text:000000000002AE48                 STUR            X10, [X0,#0x1D]
.text:000000000002AE4C                 STP             Q0, Q1, [X0]
.text:000000000002AE50                 ADD             X0, SP, #0xA0+var_60
.text:000000000002AE54                 STR             Q2, [SP,#0xA0+var_90]
.text:000000000002AE58                 STR             Q2, [SP,#0xA0+var_60]
.text:000000000002AE5C                 BL              sub_1C250
.text:000000000002AE60                 LDRB            W8, [SP,#0xA0+var_60]
.text:000000000002AE64                 MOV             X20, X0
.text:000000000002AE68                 TBZ             W8, #0, loc_2AE74
.text:000000000002AE6C                 LDR             X0, [SP,#0xA0+var_50] ; void *
.text:000000000002AE70                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AE74 loc_2AE74                               ; CODE XREF: sub_2ADA0+C8↑j
.text:000000000002AE74                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AE78                 STR             X20, [X19,#8]
.text:000000000002AE7C                 ADD             X21, X19, #0x10
.text:000000000002AE80                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AE84                 ADRP            X9, #aDebugGpuwatchW_18@PAGE ; "debug.gpuwatch.widget_memory_pss"
.text:000000000002AE88                 STR             X0, [SP,#0xA0+var_70]
.text:000000000002AE8C                 ADD             X9, X9, #aDebugGpuwatchW_18@PAGEOFF ; "debug.gpuwatch.widget_memory_pss"
.text:000000000002AE90                 STRB            WZR, [X0,#0x20]
.text:000000000002AE94                 ADRP            X8, #xmmword_7AA0@PAGE
.text:000000000002AE98                 MOV             W3, #0x84FF
.text:000000000002AE9C                 LDP             Q1, Q0, [X9]
.text:000000000002AEA0                 MOVK            W3, #0xFF00,LSL#16
.text:000000000002AEA4                 LDR             Q2, [X8,#xmmword_7AA0@PAGEOFF]
.text:000000000002AEA8                 ADD             X1, SP, #0xA0+var_80
.text:000000000002AEAC                 MOV             W2, #1
.text:000000000002AEB0                 STP             Q1, Q0, [X0]
.text:000000000002AEB4                 MOV             X0, X21
.text:000000000002AEB8                 STR             Q2, [SP,#0xA0+var_80]
.text:000000000002AEBC                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002AEC0                 LDRB            W8, [SP,#0xA0+var_80]
.text:000000000002AEC4                 TBZ             W8, #0, loc_2AED0
.text:000000000002AEC8                 LDR             X0, [SP,#0xA0+var_70] ; void *
.text:000000000002AECC                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AED0 loc_2AED0                               ; CODE XREF: sub_2ADA0+124↑j
.text:000000000002AED0                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AED4                 ADD             X20, X19, #0x20 ; ' '
.text:000000000002AED8                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AEDC                 ADRP            X8, #aDebugGpuwatchW_19@PAGE ; "debug.gpuwatch.widget_memory_gpu_total"
.text:000000000002AEE0                 STR             X0, [SP,#0xA0+var_70]
.text:000000000002AEE4                 ADD             X8, X8, #aDebugGpuwatchW_19@PAGEOFF ; "debug.gpuwatch.widget_memory_gpu_total"
.text:000000000002AEE8                 STRB            WZR, [X0,#0x26]
.text:000000000002AEEC                 ADRP            X9, #xmmword_7A30@PAGE
.text:000000000002AEF0                 ADD             X1, SP, #0xA0+var_80
.text:000000000002AEF4                 LDUR            X10, [X8,#0x1E]
.text:000000000002AEF8                 MOV             W2, #1
.text:000000000002AEFC                 LDP             Q0, Q1, [X8]
.text:000000000002AF00                 LDR             Q2, [X9,#xmmword_7A30@PAGEOFF]
.text:000000000002AF04                 MOV             W3, #0xFFFFFF00
.text:000000000002AF08                 STUR            X10, [X0,#0x1E]
.text:000000000002AF0C                 STP             Q0, Q1, [X0]
.text:000000000002AF10                 MOV             X0, X20
.text:000000000002AF14                 STR             Q2, [SP,#0xA0+var_80]
.text:000000000002AF18                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002AF1C                 LDRB            W8, [SP,#0xA0+var_80]
.text:000000000002AF20                 TBZ             W8, #0, loc_2AF2C
.text:000000000002AF24                 LDR             X0, [SP,#0xA0+var_70] ; void *
.text:000000000002AF28                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AF2C loc_2AF2C                               ; CODE XREF: sub_2ADA0+180↑j
.text:000000000002AF2C                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AF30                 ADD             X20, X19, #0x30 ; '0'
.text:000000000002AF34                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AF38                 ADRP            X8, #aDebugGpuwatchW_20@PAGE ; "debug.gpuwatch.widget_memory_gpu_surfac"...
.text:000000000002AF3C                 STR             X0, [SP,#0xA0+var_70]
.text:000000000002AF40                 ADD             X8, X8, #aDebugGpuwatchW_20@PAGEOFF ; "debug.gpuwatch.widget_memory_gpu_surfac"...
.text:000000000002AF44                 STRB            WZR, [X0,#0x28]
.text:000000000002AF48                 ADRP            X9, #xmmword_79E0@PAGE
.text:000000000002AF4C                 MOV             W3, #0xFFFF7200
.text:000000000002AF50                 LDR             X10, [X8,#(aDebugGpuwatchW_20+0x20 - 0x830B)] ; "_surface"
.text:000000000002AF54                 ADD             X1, SP, #0xA0+var_80
.text:000000000002AF58                 LDP             Q0, Q1, [X8]
.text:000000000002AF5C                 LDR             Q2, [X9,#xmmword_79E0@PAGEOFF]
.text:000000000002AF60                 MOV             W2, #1
.text:000000000002AF64                 STR             X10, [X0,#0x20]
.text:000000000002AF68                 STP             Q0, Q1, [X0]
.text:000000000002AF6C                 MOV             X0, X20
.text:000000000002AF70                 STR             Q2, [SP,#0xA0+var_A0]
.text:000000000002AF74                 STR             Q2, [SP,#0xA0+var_80]
.text:000000000002AF78                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002AF7C                 LDRB            W8, [SP,#0xA0+var_80]
.text:000000000002AF80                 TBZ             W8, #0, loc_2AF8C
.text:000000000002AF84                 LDR             X0, [SP,#0xA0+var_70] ; void *
.text:000000000002AF88                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AF8C loc_2AF8C                               ; CODE XREF: sub_2ADA0+1E0↑j
.text:000000000002AF8C                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AF90                 ADD             X20, X19, #0x40 ; '@'
.text:000000000002AF94                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AF98                 LDR             Q0, [SP,#0xA0+var_A0]
.text:000000000002AF9C                 ADRP            X8, #aDebugGpuwatchW_21@PAGE ; "debug.gpuwatch.widget_memory_gpu_textur"...
.text:000000000002AFA0                 ADD             X8, X8, #aDebugGpuwatchW_21@PAGEOFF ; "debug.gpuwatch.widget_memory_gpu_textur"...
.text:000000000002AFA4                 STR             X0, [SP,#0xA0+var_70]
.text:000000000002AFA8                 STRB            WZR, [X0,#0x28]
.text:000000000002AFAC                 ADD             X1, SP, #0xA0+var_80
.text:000000000002AFB0                 MOV             W2, #1
.text:000000000002AFB4                 STR             Q0, [SP,#0xA0+var_80]
.text:000000000002AFB8                 MOV             W3, #0xFFFF0000
.text:000000000002AFBC                 LDR             X9, [X8,#(aDebugGpuwatchW_21+0x20 - 0x7D46)] ; "_texture"
.text:000000000002AFC0                 LDP             Q1, Q0, [X8]
.text:000000000002AFC4                 STR             X9, [X0,#0x20]
.text:000000000002AFC8                 STP             Q1, Q0, [X0]
.text:000000000002AFCC                 MOV             X0, X20
.text:000000000002AFD0                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002AFD4                 LDRB            W8, [SP,#0xA0+var_80]
.text:000000000002AFD8                 TBZ             W8, #0, loc_2AFE4
.text:000000000002AFDC                 LDR             X0, [SP,#0xA0+var_70] ; void *
.text:000000000002AFE0                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002AFE4 loc_2AFE4                               ; CODE XREF: sub_2ADA0+238↑j
.text:000000000002AFE4                 MOV             W0, #0x30 ; '0' ; unsigned __int64
.text:000000000002AFE8                 ADD             X19, X19, #0x50 ; 'P'
.text:000000000002AFEC                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002AFF0                 LDR             Q0, [SP,#0xA0+var_90]
.text:000000000002AFF4                 ADRP            X8, #aDebugGpuwatchW_22@PAGE ; "debug.gpuwatch.widget_memory_sys_free"
.text:000000000002AFF8                 ADD             X8, X8, #aDebugGpuwatchW_22@PAGEOFF ; "debug.gpuwatch.widget_memory_sys_free"
.text:000000000002AFFC                 STR             X0, [SP,#0xA0+var_70]
.text:000000000002B000                 STRB            WZR, [X0,#0x25]
.text:000000000002B004                 ADD             X1, SP, #0xA0+var_80
.text:000000000002B008                 MOV             W2, #1
.text:000000000002B00C                 STR             Q0, [SP,#0xA0+var_80]
.text:000000000002B010                 MOV             W3, #0xFF00FF00
.text:000000000002B014                 LDUR            X9, [X8,#0x1D]
.text:000000000002B018                 LDP             Q1, Q0, [X8]
.text:000000000002B01C                 STUR            X9, [X0,#0x1D]
.text:000000000002B020                 STP             Q1, Q0, [X0]
.text:000000000002B024                 MOV             X0, X19
.text:000000000002B028                 BL              ._ZN3gui15WidgetsSettings5GraphC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbm ; gui::WidgetsSettings::Graph::Graph(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&,bool,ulong)
.text:000000000002B02C                 LDRB            W8, [SP,#0xA0+var_80]
.text:000000000002B030                 TBZ             W8, #0, loc_2B03C
.text:000000000002B034                 LDR             X0, [SP,#0xA0+var_70] ; void *
.text:000000000002B038                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002B03C loc_2B03C                               ; CODE XREF: sub_2ADA0+290↑j
.text:000000000002B03C                 LDR             X8, [X22,#0x28]
.text:000000000002B040                 LDUR            X9, [X29,#var_28]
.text:000000000002B044                 CMP             X8, X9
.text:000000000002B048                 B.NE            loc_2B060
.text:000000000002B04C                 LDP             X29, X30, [SP,#0xA0+var_s0]
.text:000000000002B050                 LDP             X20, X19, [SP,#0xA0+var_10]
.text:000000000002B054                 LDP             X22, X21, [SP,#0xA0+var_20]
.text:000000000002B058                 ADD             SP, SP, #0xB0
.text:000000000002B05C                 RET
.text:000000000002B060 ; ---------------------------------------------------------------------------
.text:000000000002B060 loc_2B060                               ; CODE XREF: sub_2ADA0+2A8↑j
.text:000000000002B060                 BL              .__stack_chk_fail
.text:000000000002B060 ; } // starts at 2ADA0
.text:000000000002B060 ; End of function sub_2ADA0
.text:000000000002B060 ; ---------------------------------------------------------------------------
.text:000000000002B064                 ALIGN 8
.text:000000000002B068 ; =============== S U B R O U T I N E =======================================
.text:000000000002B068 ; Attributes: bp-based frame
.text:000000000002B068 sub_2B068                               ; DATA XREF: .data.rel.ro:0000000000030540↓o
.text:000000000002B068 var_30          = -0x30
.text:000000000002B068 var_28          = -0x28
.text:000000000002B068 var_20          = -0x20
.text:000000000002B068 var_10          = -0x10
.text:000000000002B068 var_s0          =  0
.text:000000000002B068 ; __unwind {
.text:000000000002B068                 SUB             SP, SP, #0x40
.text:000000000002B06C                 STR             X21, [SP,#0x30+var_20]
.text:000000000002B070                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000002B074                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000002B078                 ADD             X29, SP, #0x30
.text:000000000002B07C                 MRS             X20, #3, c13, c0, #2
.text:000000000002B080                 MOV             X19, X0
.text:000000000002B084                 LDR             X8, [X20,#0x28]
.text:000000000002B088                 MOV             X2, SP
.text:000000000002B08C                 STR             X8, [SP,#0x30+var_28]
.text:000000000002B090                 LDR             X21, [X0,#0x30]
.text:000000000002B094                 MOV             X0, X1  ; s
.text:000000000002B098                 ADRP            X1, #aJd@PAGE ; "%jd"
.text:000000000002B09C                 STR             XZR, [SP,#0x30+var_30]
.text:000000000002B0A0                 ADD             X1, X1, #aJd@PAGEOFF ; "%jd"
.text:000000000002B0A4                 BL              .sscanf
.text:000000000002B0A8                 LDR             X8, [SP,#0x30+var_30]
.text:000000000002B0AC                 CMP             W0, #1
.text:000000000002B0B0                 CSEL            X8, X8, X21, EQ
.text:000000000002B0B4                 STR             X8, [X19,#0x28]
.text:000000000002B0B8                 LDR             X8, [X20,#0x28]
.text:000000000002B0BC                 LDR             X9, [SP,#0x30+var_28]
.text:000000000002B0C0                 CMP             X8, X9
.text:000000000002B0C4                 B.NE            loc_2B0DC
.text:000000000002B0C8                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000002B0CC                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000002B0D0                 LDR             X21, [SP,#0x30+var_20]
.text:000000000002B0D4                 ADD             SP, SP, #0x40 ; '@'
.text:000000000002B0D8                 RET
.text:000000000002B0DC ; ---------------------------------------------------------------------------
.text:000000000002B0DC loc_2B0DC                               ; CODE XREF: sub_2B068+5C↑j
.text:000000000002B0DC                 BL              .__stack_chk_fail
.text:000000000002B0DC ; } // starts at 2B068
.text:000000000002B0DC ; End of function sub_2B068
.text:000000000002B0E0 ; =============== S U B R O U T I N E =======================================
.text:000000000002B0E0 ; Attributes: bp-based frame
.text:000000000002B0E0 sub_2B0E0                               ; DATA XREF: .data.rel.ro:0000000000030568↓o
.text:000000000002B0E0 var_s0          =  0
.text:000000000002B0E0 ; __unwind {
.text:000000000002B0E0                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002B0E4                 MOV             X29, SP
.text:000000000002B0E8                 MOV             W0, #0x10 ; unsigned __int64
.text:000000000002B0EC                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002B0F0                 ADRP            X8, #off_30558@PAGE
.text:000000000002B0F4                 ADD             X8, X8, #off_30558@PAGEOFF
.text:000000000002B0F8                 STR             X8, [X0]
.text:000000000002B0FC                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002B100                 RET
.text:000000000002B100 ; } // starts at 2B0E0
.text:000000000002B100 ; End of function sub_2B0E0
.text:000000000002B100 ; ---------------------------------------------------------------------------
.text:000000000002B104                 ALIGN 8
.text:000000000002B108 ; =============== S U B R O U T I N E =======================================
.text:000000000002B108 sub_2B108                               ; DATA XREF: .data.rel.ro:0000000000030570↓o
.text:000000000002B108 ; __unwind {
.text:000000000002B108                 ADRP            X8, #off_30558@PAGE
.text:000000000002B10C                 ADD             X8, X8, #off_30558@PAGEOFF
.text:000000000002B110                 STR             X8, [X1]
.text:000000000002B114                 RET
.text:000000000002B114 ; } // starts at 2B108
.text:000000000002B114 ; End of function sub_2B108
.text:000000000002B118 ; =============== S U B R O U T I N E =======================================
.text:000000000002B118 sub_2B118                               ; DATA XREF: .data.rel.ro:0000000000030588↓o
.text:000000000002B118 ; __unwind {
.text:000000000002B118                 ADRP            X8, #_ZN3gui15WidgetsSettings10wasChangedE_ptr@PAGE
.text:000000000002B11C                 MOV             W9, #1
.text:000000000002B120                 LDR             X8, [X8,#_ZN3gui15WidgetsSettings10wasChangedE_ptr@PAGEOFF]
.text:000000000002B124                 STRB            W9, [X8] ; gui::WidgetsSettings::wasChanged
.text:000000000002B128                 RET
.text:000000000002B128 ; } // starts at 2B118
.text:000000000002B128 ; End of function sub_2B118
.text:000000000002B128 ; ---------------------------------------------------------------------------
.text:000000000002B12C                 ALIGN 0x10
.text:000000000002B130 ; =============== S U B R O U T I N E =======================================
.text:000000000002B130 ; Attributes: bp-based frame
.text:000000000002B130 sub_2B130                               ; DATA XREF: .init_array:0000000000030600↓o
.text:000000000002B130 var_150         = -0x150
.text:000000000002B130 var_148         = -0x148
.text:000000000002B130 var_140         = -0x140
.text:000000000002B130 var_138         = -0x138
.text:000000000002B130 var_130         = -0x130
.text:000000000002B130 var_128         = -0x128
.text:000000000002B130 var_120         = -0x120
.text:000000000002B130 var_118         = -0x118
.text:000000000002B130 var_108         = -0x108
.text:000000000002B130 var_F8          = -0xF8
.text:000000000002B130 var_E8          = -0xE8
.text:000000000002B130 var_D8          = -0xD8
.text:000000000002B130 var_C8          = -0xC8
.text:000000000002B130 var_B8          = -0xB8
.text:000000000002B130 var_A8          = -0xA8
.text:000000000002B130 var_98          = -0x98
.text:000000000002B130 var_88          = -0x88
.text:000000000002B130 var_78          = -0x78
.text:000000000002B130 var_70          = -0x70
.text:000000000002B130 var_60          = -0x60
.text:000000000002B130 var_50          = -0x50
.text:000000000002B130 var_40          = -0x40
.text:000000000002B130 var_30          = -0x30
.text:000000000002B130 var_20          = -0x20
.text:000000000002B130 var_10          = -0x10
.text:000000000002B130 var_s0          =  0
.text:000000000002B130 ; __unwind {
.text:000000000002B130                 SUB             SP, SP, #0x160
.text:000000000002B134                 STP             D9, D8, [SP,#0x150+var_60]
.text:000000000002B138                 STP             X28, X27, [SP,#0x150+var_50]
.text:000000000002B13C                 STP             X26, X25, [SP,#0x150+var_40]
.text:000000000002B140                 STP             X24, X23, [SP,#0x150+var_30]
.text:000000000002B144                 STP             X22, X21, [SP,#0x150+var_20]
.text:000000000002B148                 STP             X20, X19, [SP,#0x150+var_10]
.text:000000000002B14C                 STP             X29, X30, [SP,#0x150+var_s0]
.text:000000000002B150                 ADD             X29, SP, #0x150
.text:000000000002B154                 MRS             X8, #3, c13, c0, #2
.text:000000000002B158                 STR             X8, [SP,#0x150+var_130]
.text:000000000002B15C                 LDR             X8, [X8,#0x28]
.text:000000000002B160                 STUR            X8, [X29,#var_70]
.text:000000000002B164                 ADRP            X8, #unk_31008@PAGE
.text:000000000002B168                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:000000000002B16C                 LDARB           W8, [X8]
.text:000000000002B170                 TBNZ            W8, #0, loc_2B1B0
.text:000000000002B174                 ADRP            X0, #unk_31008@PAGE
.text:000000000002B178                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000002B17C                 BL              .__cxa_guard_acquire
.text:000000000002B180                 CBZ             W0, loc_2B1B0
.text:000000000002B184                 ADRP            X1, #qword_31000@PAGE
.text:000000000002B188                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:000000000002B18C                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:000000000002B190                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B194                 STR             XZR, [X1]
.text:000000000002B198                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B19C                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002B1A0                 BL              .__cxa_atexit
.text:000000000002B1A4                 ADRP            X0, #unk_31008@PAGE
.text:000000000002B1A8                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000002B1AC                 BL              .__cxa_guard_release
.text:000000000002B1B0 loc_2B1B0                               ; CODE XREF: sub_2B130+40↑j
.text:000000000002B1B0                                         ; sub_2B130+50↑j
.text:000000000002B1B0                 ADRP            X8, #unk_31038@PAGE
.text:000000000002B1B4                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:000000000002B1B8                 LDARB           W8, [X8]
.text:000000000002B1BC                 TBNZ            W8, #0, loc_2B1F8
.text:000000000002B1C0                 ADRP            X0, #unk_31038@PAGE
.text:000000000002B1C4                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000002B1C8                 BL              .__cxa_guard_acquire
.text:000000000002B1CC                 CBZ             W0, loc_2B1F8
.text:000000000002B1D0                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:000000000002B1D4                 ADRP            X1, #unk_31010@PAGE
.text:000000000002B1D8                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B1DC                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002B1E0                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:000000000002B1E4                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B1E8                 BL              .__cxa_atexit
.text:000000000002B1EC                 ADRP            X0, #unk_31038@PAGE
.text:000000000002B1F0                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000002B1F4                 BL              .__cxa_guard_release
.text:000000000002B1F8 loc_2B1F8                               ; CODE XREF: sub_2B130+8C↑j
.text:000000000002B1F8                                         ; sub_2B130+9C↑j
.text:000000000002B1F8                 ADRP            X8, #unk_31058@PAGE
.text:000000000002B1FC                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:000000000002B200                 LDARB           W8, [X8]
.text:000000000002B204                 TBNZ            W8, #0, loc_2B248
.text:000000000002B208                 ADRP            X0, #unk_31058@PAGE
.text:000000000002B20C                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002B210                 BL              .__cxa_guard_acquire
.text:000000000002B214                 CBZ             W0, loc_2B248
.text:000000000002B218                 ADRP            X1, #unk_31040@PAGE
.text:000000000002B21C                 ADRP            X0, #loc_1C078@PAGE
.text:000000000002B220                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B224                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:000000000002B228                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:000000000002B22C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B230                 STP             XZR, XZR, [X1]
.text:000000000002B234                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:000000000002B238                 BL              .__cxa_atexit
.text:000000000002B23C                 ADRP            X0, #unk_31058@PAGE
.text:000000000002B240                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002B244                 BL              .__cxa_guard_release
.text:000000000002B248 loc_2B248                               ; CODE XREF: sub_2B130+D4↑j
.text:000000000002B248                                         ; sub_2B130+E4↑j
.text:000000000002B248                 ADRP            X8, #unk_31078@PAGE
.text:000000000002B24C                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000002B250                 LDARB           W8, [X8]
.text:000000000002B254                 TBNZ            W8, #0, loc_2B298
.text:000000000002B258                 ADRP            X0, #unk_31078@PAGE
.text:000000000002B25C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002B260                 BL              .__cxa_guard_acquire
.text:000000000002B264                 CBZ             W0, loc_2B298
.text:000000000002B268                 ADRP            X1, #unk_31060@PAGE
.text:000000000002B26C                 ADRP            X0, #loc_1C100@PAGE
.text:000000000002B270                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B274                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:000000000002B278                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:000000000002B27C                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B280                 STP             XZR, XZR, [X1]
.text:000000000002B284                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:000000000002B288                 BL              .__cxa_atexit
.text:000000000002B28C                 ADRP            X0, #unk_31078@PAGE
.text:000000000002B290                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002B294                 BL              .__cxa_guard_release
.text:000000000002B298 loc_2B298                               ; CODE XREF: sub_2B130+124↑j
.text:000000000002B298                                         ; sub_2B130+134↑j
.text:000000000002B298                 ADRP            X1, #aFps@PAGE ; "Fps"
.text:000000000002B29C                 ADD             X1, X1, #aFps@PAGEOFF ; "Fps"
.text:000000000002B2A0                 ADD             X0, SP, #0x150+var_120 ; this
.text:000000000002B2A4                 ADD             X19, SP, #0x150+var_120
.text:000000000002B2A8                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B2AC                 MOVI            V8.2S, #1
.text:000000000002B2B0                 ADD             X22, X19, #0x10
.text:000000000002B2B4                 ADRP            X1, #aFpsmedian@PAGE ; "FpsMedian"
.text:000000000002B2B8                 ADD             X1, X1, #aFpsmedian@PAGEOFF ; "FpsMedian"
.text:000000000002B2BC                 MOV             X0, X22 ; this
.text:000000000002B2C0                 STR             X22, [SP,#0x150+var_138]
.text:000000000002B2C4                 STR             D8, [SP,#0x150+var_118]
.text:000000000002B2C8                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B2CC                 ADRP            X8, #qword_7990@PAGE
.text:000000000002B2D0                 ADRP            X1, #aFpsstability@PAGE ; "FpsStability(%)"
.text:000000000002B2D4                 ADD             X0, X19, #0x20 ; ' ' ; this
.text:000000000002B2D8                 LDR             D9, [X8,#qword_7990@PAGEOFF]
.text:000000000002B2DC                 ADD             X1, X1, #aFpsstability@PAGEOFF ; "FpsStability(%)"
.text:000000000002B2E0                 STR             X0, [SP,#0x150+var_128]
.text:000000000002B2E4                 STR             D9, [SP,#0x150+var_108]
.text:000000000002B2E8                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B2EC                 ADD             X23, X19, #0x30 ; '0'
.text:000000000002B2F0                 STR             D9, [SP,#0x150+var_F8]
.text:000000000002B2F4                 ADRP            X1, #aCpuload@PAGE ; "CpuLoad(%)"
.text:000000000002B2F8                 ADD             X1, X1, #aCpuload@PAGEOFF ; "CpuLoad(%)"
.text:000000000002B2FC                 MOV             X0, X23 ; this
.text:000000000002B300                 STR             X23, [SP,#0x150+var_150]
.text:000000000002B304                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B308                 ADRP            X1, #aGpuload@PAGE ; "GpuLoad(%)"
.text:000000000002B30C                 STR             D8, [SP,#0x150+var_E8]
.text:000000000002B310                 ADD             X0, X19, #0x40 ; '@' ; this
.text:000000000002B314                 ADD             X1, X1, #aGpuload@PAGEOFF ; "GpuLoad(%)"
.text:000000000002B318                 STR             X0, [SP,#0x150+var_148]
.text:000000000002B31C                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B320                 ADD             X24, X19, #0x50 ; 'P'
.text:000000000002B324                 STR             D8, [SP,#0x150+var_D8]
.text:000000000002B328                 ADRP            X1, #aGpufreqMhz@PAGE ; "GpuFreq(MHz)"
.text:000000000002B32C                 ADD             X1, X1, #aGpufreqMhz@PAGEOFF ; "GpuFreq(MHz)"
.text:000000000002B330                 MOV             X0, X24 ; this
.text:000000000002B334                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B338                 ADRP            X8, #qword_7930@PAGE
.text:000000000002B33C                 ADRP            X1, #aMempssBytes@PAGE ; "MemPss(Bytes)"
.text:000000000002B340                 ADD             X0, X19, #0x60 ; '`' ; this
.text:000000000002B344                 LDR             D0, [X8,#qword_7930@PAGEOFF]
.text:000000000002B348                 ADD             X1, X1, #aMempssBytes@PAGEOFF ; "MemPss(Bytes)"
.text:000000000002B34C                 STR             X0, [SP,#0x150+var_140]
.text:000000000002B350                 STR             D0, [SP,#0x150+var_C8]
.text:000000000002B354                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B358                 ADRP            X8, #qword_7958@PAGE
.text:000000000002B35C                 ADD             X25, X19, #0x70 ; 'p'
.text:000000000002B360                 ADRP            X1, #aMemgpuBytes@PAGE ; "MemGpu(Bytes)"
.text:000000000002B364                 LDR             D8, [X8,#qword_7958@PAGEOFF]
.text:000000000002B368                 ADD             X1, X1, #aMemgpuBytes@PAGEOFF ; "MemGpu(Bytes)"
.text:000000000002B36C                 MOV             X0, X25 ; this
.text:000000000002B370                 STR             D8, [SP,#0x150+var_B8]
.text:000000000002B374                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B378                 ADD             X27, X19, #0x80
.text:000000000002B37C                 STR             D8, [SP,#0x150+var_A8]
.text:000000000002B380                 ADRP            X1, #aMemsurfBytes@PAGE ; "MemSurf(Bytes)"
.text:000000000002B384                 ADD             X1, X1, #aMemsurfBytes@PAGEOFF ; "MemSurf(Bytes)"
.text:000000000002B388                 MOV             X0, X27 ; this
.text:000000000002B38C                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B390                 ADD             X28, X19, #0x90
.text:000000000002B394                 STR             D8, [SP,#0x150+var_98]
.text:000000000002B398                 ADRP            X1, #aMemtexBytes@PAGE ; "MemTex(Bytes)"
.text:000000000002B39C                 ADD             X1, X1, #aMemtexBytes@PAGEOFF ; "MemTex(Bytes)"
.text:000000000002B3A0                 MOV             X0, X28 ; this
.text:000000000002B3A4                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B3A8                 ADD             X19, X19, #0xA0
.text:000000000002B3AC                 STR             D8, [SP,#0x150+var_88]
.text:000000000002B3B0                 ADRP            X1, #aMemsysfreeheap@PAGE ; "MemSysFreeHeap(Bytes)"
.text:000000000002B3B4                 ADD             X1, X1, #aMemsysfreeheap@PAGEOFF ; "MemSysFreeHeap(Bytes)"
.text:000000000002B3B8                 MOV             X0, X19 ; this
.text:000000000002B3BC                 BL              ._ZN7android7String8C1EPKc ; android::String8::String8(char const*)
.text:000000000002B3C0                 MOV             W0, #0xB0 ; unsigned __int64
.text:000000000002B3C4                 STR             D8, [SP,#0x150+var_78]
.text:000000000002B3C8                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002B3CC                 ADRP            X26, #_ZN3gui12gWidgetsMetaE_ptr@PAGE
.text:000000000002B3D0                 ADD             X8, X0, #0xB0
.text:000000000002B3D4                 ADD             X1, SP, #0x150+var_120 ; android::String8 *
.text:000000000002B3D8                 LDR             X26, [X26,#_ZN3gui12gWidgetsMetaE_ptr@PAGEOFF]
.text:000000000002B3DC                 MOV             X20, X0
.text:000000000002B3E0                 STP             X0, X0, [X26]
.text:000000000002B3E4                 STR             X8, [X26,#(qword_31208 - 0x311F8)]
.text:000000000002B3E8                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B3EC                 LDR             X21, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B3F0                 MOV             X1, X22 ; android::String8 *
.text:000000000002B3F4                 LDR             X8, [SP,#0x150+var_118]
.text:000000000002B3F8                 ADD             X0, X21, #0x10 ; this
.text:000000000002B3FC                 STR             X8, [X20,#8]
.text:000000000002B400                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B404                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B408                 LDR             X20, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B40C                 LDR             X8, [SP,#0x150+var_108]
.text:000000000002B410                 LDR             X1, [SP,#0x150+var_128] ; android::String8 *
.text:000000000002B414                 ADD             X0, X20, #0x10 ; this
.text:000000000002B418                 STR             X8, [X21,#0x18]
.text:000000000002B41C                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B420                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B424                 LDR             X21, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B428                 MOV             X1, X23 ; android::String8 *
.text:000000000002B42C                 LDR             X8, [SP,#0x150+var_F8]
.text:000000000002B430                 ADD             X0, X21, #0x10 ; this
.text:000000000002B434                 STR             X8, [X20,#0x18]
.text:000000000002B438                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B43C                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B440                 LDR             X20, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B444                 LDR             X23, [SP,#0x150+var_148]
.text:000000000002B448                 LDR             X8, [SP,#0x150+var_E8]
.text:000000000002B44C                 ADD             X0, X20, #0x10 ; this
.text:000000000002B450                 MOV             X1, X23 ; android::String8 *
.text:000000000002B454                 STR             X8, [X21,#0x18]
.text:000000000002B458                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B45C                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B460                 LDR             X21, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B464                 MOV             X1, X24 ; android::String8 *
.text:000000000002B468                 LDR             X8, [SP,#0x150+var_D8]
.text:000000000002B46C                 ADD             X0, X21, #0x10 ; this
.text:000000000002B470                 STR             X8, [X20,#0x18]
.text:000000000002B474                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B478                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B47C                 LDR             X20, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B480                 LDR             X22, [SP,#0x150+var_140]
.text:000000000002B484                 LDR             X8, [SP,#0x150+var_C8]
.text:000000000002B488                 ADD             X0, X20, #0x10 ; this
.text:000000000002B48C                 MOV             X1, X22 ; android::String8 *
.text:000000000002B490                 STR             X8, [X21,#0x18]
.text:000000000002B494                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B498                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B49C                 LDR             X21, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B4A0                 MOV             X1, X25 ; android::String8 *
.text:000000000002B4A4                 LDR             X8, [SP,#0x150+var_B8]
.text:000000000002B4A8                 ADD             X0, X21, #0x10 ; this
.text:000000000002B4AC                 STR             X8, [X20,#0x18]
.text:000000000002B4B0                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B4B4                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B4B8                 LDR             X20, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B4BC                 MOV             X1, X27 ; android::String8 *
.text:000000000002B4C0                 LDR             X8, [SP,#0x150+var_A8]
.text:000000000002B4C4                 ADD             X0, X20, #0x10 ; this
.text:000000000002B4C8                 STR             X8, [X21,#0x18]
.text:000000000002B4CC                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B4D0                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B4D4                 LDR             X21, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B4D8                 MOV             X1, X28 ; android::String8 *
.text:000000000002B4DC                 LDR             X8, [SP,#0x150+var_98]
.text:000000000002B4E0                 ADD             X0, X21, #0x10 ; this
.text:000000000002B4E4                 STR             X8, [X20,#0x18]
.text:000000000002B4E8                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B4EC                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B4F0                 LDR             X20, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B4F4                 MOV             X1, X19 ; android::String8 *
.text:000000000002B4F8                 LDR             X8, [SP,#0x150+var_88]
.text:000000000002B4FC                 ADD             X0, X20, #0x10 ; this
.text:000000000002B500                 STR             X8, [X21,#0x18]
.text:000000000002B504                 STR             X0, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B508                 BL              ._ZN7android7String8C1ERKS0_ ; android::String8::String8(android::String8 const&)
.text:000000000002B50C                 LDR             X8, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B510                 MOV             X0, X19 ; this
.text:000000000002B514                 LDR             X9, [SP,#0x150+var_78]
.text:000000000002B518                 ADD             X8, X8, #0x10
.text:000000000002B51C                 STR             X9, [X20,#0x18]
.text:000000000002B520                 STR             X8, [X26,#(qword_31200 - 0x311F8)]
.text:000000000002B524                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B528                 MOV             X0, X28 ; this
.text:000000000002B52C                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B530                 MOV             X0, X27 ; this
.text:000000000002B534                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B538                 MOV             X0, X25 ; this
.text:000000000002B53C                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B540                 MOV             X0, X22 ; this
.text:000000000002B544                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B548                 MOV             X0, X24 ; this
.text:000000000002B54C                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B550                 MOV             X0, X23 ; this
.text:000000000002B554                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B558                 LDR             X0, [SP,#0x150+var_150] ; this
.text:000000000002B55C                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B560                 LDR             X0, [SP,#0x150+var_128] ; this
.text:000000000002B564                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B568                 LDR             X0, [SP,#0x150+var_138] ; this
.text:000000000002B56C                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B570                 ADD             X0, SP, #0x150+var_120 ; this
.text:000000000002B574                 BL              ._ZN7android7String8D1Ev ; android::String8::~String8()
.text:000000000002B578                 ADRP            X0, #sub_29E28@PAGE
.text:000000000002B57C                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B580                 ADD             X0, X0, #sub_29E28@PAGEOFF ; lpfunc
.text:000000000002B584                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B588                 MOV             X1, X26 ; obj
.text:000000000002B58C                 BL              .__cxa_atexit
.text:000000000002B590                 LDR             X8, [SP,#0x150+var_130]
.text:000000000002B594                 LDR             X8, [X8,#0x28]
.text:000000000002B598                 LDUR            X9, [X29,#var_70]
.text:000000000002B59C                 CMP             X8, X9
.text:000000000002B5A0                 B.NE            loc_2B5C8
.text:000000000002B5A4                 LDP             X29, X30, [SP,#0x150+var_s0]
.text:000000000002B5A8                 LDP             X20, X19, [SP,#0x150+var_10]
.text:000000000002B5AC                 LDP             X22, X21, [SP,#0x150+var_20]
.text:000000000002B5B0                 LDP             X24, X23, [SP,#0x150+var_30]
.text:000000000002B5B4                 LDP             X26, X25, [SP,#0x150+var_40]
.text:000000000002B5B8                 LDP             X28, X27, [SP,#0x150+var_50]
.text:000000000002B5BC                 LDP             D9, D8, [SP,#0x150+var_60]
.text:000000000002B5C0                 ADD             SP, SP, #0x160
.text:000000000002B5C4                 RET
.text:000000000002B5C8 ; ---------------------------------------------------------------------------
.text:000000000002B5C8 loc_2B5C8                               ; CODE XREF: sub_2B130+470↑j
.text:000000000002B5C8                 BL              .__stack_chk_fail
.text:000000000002B5C8 ; } // starts at 2B130
.text:000000000002B5C8 ; End of function sub_2B130
.text:000000000002B5C8 ; ---------------------------------------------------------------------------
.text:000000000002B5CC                 ALIGN 0x10
.text:000000000002B5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000002B5D0 ; Attributes: bp-based frame
.text:000000000002B5D0 sub_2B5D0                               ; DATA XREF: .init_array:0000000000030608↓o
.text:000000000002B5D0 var_70          = -0x70
.text:000000000002B5D0 var_68          = -0x68
.text:000000000002B5D0 var_60          = -0x60
.text:000000000002B5D0 var_58          = -0x58
.text:000000000002B5D0 var_48          = -0x48
.text:000000000002B5D0 var_40          = -0x40
.text:000000000002B5D0 var_30          = -0x30
.text:000000000002B5D0 var_28          = -0x28
.text:000000000002B5D0 var_20          = -0x20
.text:000000000002B5D0 var_10          = -0x10
.text:000000000002B5D0 var_s0          =  0
.text:000000000002B5D0 ; __unwind {
.text:000000000002B5D0                 SUB             SP, SP, #0x80
.text:000000000002B5D4                 STR             X21, [SP,#0x70+var_20]
.text:000000000002B5D8                 STP             X20, X19, [SP,#0x70+var_10]
.text:000000000002B5DC                 STP             X29, X30, [SP,#0x70+var_s0]
.text:000000000002B5E0                 ADD             X29, SP, #0x70
.text:000000000002B5E4                 MRS             X20, #3, c13, c0, #2
.text:000000000002B5E8                 LDR             X8, [X20,#0x28]
.text:000000000002B5EC                 STUR            X8, [X29,#var_28]
.text:000000000002B5F0                 ADRP            X8, #unk_31008@PAGE
.text:000000000002B5F4                 ADD             X8, X8, #unk_31008@PAGEOFF
.text:000000000002B5F8                 LDARB           W8, [X8]
.text:000000000002B5FC                 TBNZ            W8, #0, loc_2B63C
.text:000000000002B600                 ADRP            X0, #unk_31008@PAGE
.text:000000000002B604                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000002B608                 BL              .__cxa_guard_acquire
.text:000000000002B60C                 CBZ             W0, loc_2B63C
.text:000000000002B610                 ADRP            X1, #qword_31000@PAGE
.text:000000000002B614                 ADD             X1, X1, #qword_31000@PAGEOFF ; obj
.text:000000000002B618                 ADRP            X0, #_ZNSt3__16threadD1Ev_ptr@PAGE
.text:000000000002B61C                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B620                 STR             XZR, [X1]
.text:000000000002B624                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B628                 LDR             X0, [X0,#_ZNSt3__16threadD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002B62C                 BL              .__cxa_atexit
.text:000000000002B630                 ADRP            X0, #unk_31008@PAGE
.text:000000000002B634                 ADD             X0, X0, #unk_31008@PAGEOFF ; __guard *
.text:000000000002B638                 BL              .__cxa_guard_release
.text:000000000002B63C loc_2B63C                               ; CODE XREF: sub_2B5D0+2C↑j
.text:000000000002B63C                                         ; sub_2B5D0+3C↑j
.text:000000000002B63C                 ADRP            X8, #unk_31038@PAGE
.text:000000000002B640                 ADD             X8, X8, #unk_31038@PAGEOFF
.text:000000000002B644                 LDARB           W8, [X8]
.text:000000000002B648                 TBNZ            W8, #0, loc_2B684
.text:000000000002B64C                 ADRP            X0, #unk_31038@PAGE
.text:000000000002B650                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000002B654                 BL              .__cxa_guard_acquire
.text:000000000002B658                 CBZ             W0, loc_2B684
.text:000000000002B65C                 ADRP            X0, #_ZNSt3__15mutexD1Ev_ptr@PAGE
.text:000000000002B660                 ADRP            X1, #unk_31010@PAGE
.text:000000000002B664                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B668                 LDR             X0, [X0,#_ZNSt3__15mutexD1Ev_ptr@PAGEOFF] ; lpfunc
.text:000000000002B66C                 ADD             X1, X1, #unk_31010@PAGEOFF ; obj
.text:000000000002B670                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B674                 BL              .__cxa_atexit
.text:000000000002B678                 ADRP            X0, #unk_31038@PAGE
.text:000000000002B67C                 ADD             X0, X0, #unk_31038@PAGEOFF ; __guard *
.text:000000000002B680                 BL              .__cxa_guard_release
.text:000000000002B684 loc_2B684                               ; CODE XREF: sub_2B5D0+78↑j
.text:000000000002B684                                         ; sub_2B5D0+88↑j
.text:000000000002B684                 ADRP            X8, #unk_31058@PAGE
.text:000000000002B688                 ADD             X8, X8, #unk_31058@PAGEOFF
.text:000000000002B68C                 LDARB           W8, [X8]
.text:000000000002B690                 TBNZ            W8, #0, loc_2B6D4
.text:000000000002B694                 ADRP            X0, #unk_31058@PAGE
.text:000000000002B698                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002B69C                 BL              .__cxa_guard_acquire
.text:000000000002B6A0                 CBZ             W0, loc_2B6D4
.text:000000000002B6A4                 ADRP            X1, #unk_31040@PAGE
.text:000000000002B6A8                 ADRP            X0, #loc_1C078@PAGE
.text:000000000002B6AC                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B6B0                 ADD             X1, X1, #unk_31040@PAGEOFF ; obj
.text:000000000002B6B4                 ADD             X0, X0, #loc_1C078@PAGEOFF ; lpfunc
.text:000000000002B6B8                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B6BC                 STP             XZR, XZR, [X1]
.text:000000000002B6C0                 STR             XZR, [X1,#(qword_31050 - 0x31040)]
.text:000000000002B6C4                 BL              .__cxa_atexit
.text:000000000002B6C8                 ADRP            X0, #unk_31058@PAGE
.text:000000000002B6CC                 ADD             X0, X0, #unk_31058@PAGEOFF ; __guard *
.text:000000000002B6D0                 BL              .__cxa_guard_release
.text:000000000002B6D4 loc_2B6D4                               ; CODE XREF: sub_2B5D0+C0↑j
.text:000000000002B6D4                                         ; sub_2B5D0+D0↑j
.text:000000000002B6D4                 ADRP            X8, #unk_31078@PAGE
.text:000000000002B6D8                 ADD             X8, X8, #unk_31078@PAGEOFF
.text:000000000002B6DC                 LDARB           W8, [X8]
.text:000000000002B6E0                 TBNZ            W8, #0, loc_2B724
.text:000000000002B6E4                 ADRP            X0, #unk_31078@PAGE
.text:000000000002B6E8                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002B6EC                 BL              .__cxa_guard_acquire
.text:000000000002B6F0                 CBZ             W0, loc_2B724
.text:000000000002B6F4                 ADRP            X1, #unk_31060@PAGE
.text:000000000002B6F8                 ADRP            X0, #loc_1C100@PAGE
.text:000000000002B6FC                 ADRP            X2, #off_2F000@PAGE
.text:000000000002B700                 ADD             X1, X1, #unk_31060@PAGEOFF ; obj
.text:000000000002B704                 ADD             X0, X0, #loc_1C100@PAGEOFF ; lpfunc
.text:000000000002B708                 ADD             X2, X2, #off_2F000@PAGEOFF ; lpdso_handle
.text:000000000002B70C                 STP             XZR, XZR, [X1]
.text:000000000002B710                 STR             XZR, [X1,#(qword_31070 - 0x31060)]
.text:000000000002B714                 BL              .__cxa_atexit
.text:000000000002B718                 ADRP            X0, #unk_31078@PAGE
.text:000000000002B71C                 ADD             X0, X0, #unk_31078@PAGEOFF ; __guard *
.text:000000000002B720                 BL              .__cxa_guard_release
.text:000000000002B724 loc_2B724                               ; CODE XREF: sub_2B5D0+110↑j
.text:000000000002B724                                         ; sub_2B5D0+120↑j
.text:000000000002B724                 ADRP            X8, #unk_31368@PAGE
.text:000000000002B728                 ADD             X8, X8, #unk_31368@PAGEOFF
.text:000000000002B72C                 LDARB           W8, [X8]
.text:000000000002B730                 TBZ             W8, #0, loc_2BA04
.text:000000000002B734 loc_2B734                               ; CODE XREF: sub_2B5D0+440↓j
.text:000000000002B734                                         ; sub_2B5D0+4B4↓j
.text:000000000002B734                 ADRP            X8, #qword_31360@PAGE
.text:000000000002B738                 LDR             X21, [X8,#qword_31360@PAGEOFF]
.text:000000000002B73C                 ADD             X19, X21, #0x40 ; '@'
.text:000000000002B740                 MOV             X0, X19 ; this
.text:000000000002B744                 BL              ._ZNSt3__15mutex4lockEv ; std::__1::mutex::lock(void)
.text:000000000002B748                 ADD             X1, X21, #0x28 ; '('
.text:000000000002B74C                 MOV             X0, SP
.text:000000000002B750                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_ ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::basic_string(std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>> const&)
.text:000000000002B754                 MOV             X0, X19 ; this
.text:000000000002B758                 BL              ._ZNSt3__15mutex6unlockEv ; std::__1::mutex::unlock(void)
.text:000000000002B75C                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B760                 LDR             X9, [SP,#0x70+var_68]
.text:000000000002B764                 TST             W8, #1
.text:000000000002B768                 LSR             X10, X8, #1
.text:000000000002B76C                 CSEL            X8, X10, X9, EQ
.text:000000000002B770                 CMP             X8, #6
.text:000000000002B774                 B.CS            loc_2B7BC
.text:000000000002B778 loc_2B778                               ; CODE XREF: sub_2B5D0+39C↓j
.text:000000000002B778                 MOV             W19, #7
.text:000000000002B77C                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B780                 TBZ             W8, #0, loc_2B78C
.text:000000000002B784 loc_2B784                               ; CODE XREF: sub_2B5D0+3CC↓j
.text:000000000002B784                                         ; sub_2B5D0+3DC↓j ...
.text:000000000002B784                 LDR             X0, [SP,#0x70+var_60] ; void *
.text:000000000002B788                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002B78C loc_2B78C                               ; CODE XREF: sub_2B5D0+1B0↑j
.text:000000000002B78C                                         ; sub_2B5D0+3D0↓j ...
.text:000000000002B78C                 ADRP            X8, #_ZN5utils11deviceModelE_ptr@PAGE
.text:000000000002B790                 LDR             X8, [X8,#_ZN5utils11deviceModelE_ptr@PAGEOFF]
.text:000000000002B794                 STR             W19, [X8] ; utils::deviceModel
.text:000000000002B798                 LDR             X8, [X20,#0x28]
.text:000000000002B79C                 LDUR            X9, [X29,#var_28]
.text:000000000002B7A0                 CMP             X8, X9
.text:000000000002B7A4                 B.NE            loc_2BA88
.text:000000000002B7A8                 LDP             X29, X30, [SP,#0x70+var_s0]
.text:000000000002B7AC                 LDP             X20, X19, [SP,#0x70+var_10]
.text:000000000002B7B0                 LDR             X21, [SP,#0x70+var_20]
.text:000000000002B7B4                 ADD             SP, SP, #0x80
.text:000000000002B7B8                 RET
.text:000000000002B7BC ; ---------------------------------------------------------------------------
.text:000000000002B7BC loc_2B7BC                               ; CODE XREF: sub_2B5D0+1A4↑j
.text:000000000002B7BC                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B7C0                 MOV             X0, SP
.text:000000000002B7C4                 MOV             W1, #6
.text:000000000002B7C8                 BL              ._ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEmm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::erase(ulong,ulong)
.text:000000000002B7CC                 LDRB            W9, [SP,#0x70+var_70]
.text:000000000002B7D0                 LDR             X8, [SP,#0x70+var_68]
.text:000000000002B7D4                 TST             W9, #1
.text:000000000002B7D8                 LSR             X10, X9, #1
.text:000000000002B7DC                 CSEL            X11, X10, X8, EQ
.text:000000000002B7E0                 CMP             X11, #6
.text:000000000002B7E4                 B.NE            loc_2B81C
.text:000000000002B7E8                 ADRP            X3, #aSmG96@PAGE ; "SM-G96"
.text:000000000002B7EC                 ADD             X3, X3, #aSmG96@PAGEOFF ; "SM-G96"
.text:000000000002B7F0                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B7F4                 MOV             X0, SP
.text:000000000002B7F8                 MOV             X1, XZR
.text:000000000002B7FC                 MOV             W4, #6
.text:000000000002B800                 BL              ._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::compare(ulong,ulong,char const*,ulong)
.text:000000000002B804                 CBZ             W0, loc_2B9A4
.text:000000000002B808                 LDRB            W10, [SP,#0x70+var_70]
.text:000000000002B80C                 LDR             X8, [SP,#0x70+var_68]
.text:000000000002B810                 AND             W9, W10, #1
.text:000000000002B814                 LSR             X10, X10, #1
.text:000000000002B818                 B               loc_2B820
.text:000000000002B81C ; ---------------------------------------------------------------------------
.text:000000000002B81C loc_2B81C                               ; CODE XREF: sub_2B5D0+214↑j
.text:000000000002B81C                 AND             W9, W9, #1
.text:000000000002B820 loc_2B820                               ; CODE XREF: sub_2B5D0+248↑j
.text:000000000002B820                 CMP             W9, #0
.text:000000000002B824                 CSEL            X11, X10, X8, EQ
.text:000000000002B828                 CMP             X11, #6
.text:000000000002B82C                 B.NE            loc_2B860
.text:000000000002B830                 ADRP            X3, #aSmN96@PAGE ; "SM-N96"
.text:000000000002B834                 ADD             X3, X3, #aSmN96@PAGEOFF ; "SM-N96"
.text:000000000002B838                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B83C                 MOV             X0, SP
.text:000000000002B840                 MOV             X1, XZR
.text:000000000002B844                 MOV             W4, #6
.text:000000000002B848                 BL              ._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::compare(ulong,ulong,char const*,ulong)
.text:000000000002B84C                 CBZ             W0, loc_2B9B4
.text:000000000002B850                 LDRB            W10, [SP,#0x70+var_70]
.text:000000000002B854                 LDR             X8, [SP,#0x70+var_68]
.text:000000000002B858                 AND             W9, W10, #1
.text:000000000002B85C                 LSR             X10, X10, #1
.text:000000000002B860 loc_2B860                               ; CODE XREF: sub_2B5D0+25C↑j
.text:000000000002B860                 CMP             W9, #0
.text:000000000002B864                 CSEL            X11, X10, X8, EQ
.text:000000000002B868                 CMP             X11, #6
.text:000000000002B86C                 B.NE            loc_2B8A0
.text:000000000002B870                 ADRP            X3, #aSmG97@PAGE ; "SM-G97"
.text:000000000002B874                 ADD             X3, X3, #aSmG97@PAGEOFF ; "SM-G97"
.text:000000000002B878                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B87C                 MOV             X0, SP
.text:000000000002B880                 MOV             X1, XZR
.text:000000000002B884                 MOV             W4, #6
.text:000000000002B888                 BL              ._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::compare(ulong,ulong,char const*,ulong)
.text:000000000002B88C                 CBZ             W0, loc_2B9C4
.text:000000000002B890                 LDRB            W10, [SP,#0x70+var_70]
.text:000000000002B894                 LDR             X8, [SP,#0x70+var_68]
.text:000000000002B898                 AND             W9, W10, #1
.text:000000000002B89C                 LSR             X10, X10, #1
.text:000000000002B8A0 loc_2B8A0                               ; CODE XREF: sub_2B5D0+29C↑j
.text:000000000002B8A0                 CMP             W9, #0
.text:000000000002B8A4                 CSEL            X11, X10, X8, EQ
.text:000000000002B8A8                 CMP             X11, #6
.text:000000000002B8AC                 B.NE            loc_2B8E0
.text:000000000002B8B0                 ADRP            X3, #aSmN97@PAGE ; "SM-N97"
.text:000000000002B8B4                 ADD             X3, X3, #aSmN97@PAGEOFF ; "SM-N97"
.text:000000000002B8B8                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B8BC                 MOV             X0, SP
.text:000000000002B8C0                 MOV             X1, XZR
.text:000000000002B8C4                 MOV             W4, #6
.text:000000000002B8C8                 BL              ._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::compare(ulong,ulong,char const*,ulong)
.text:000000000002B8CC                 CBZ             W0, loc_2B9D4
.text:000000000002B8D0                 LDRB            W10, [SP,#0x70+var_70]
.text:000000000002B8D4                 LDR             X8, [SP,#0x70+var_68]
.text:000000000002B8D8                 AND             W9, W10, #1
.text:000000000002B8DC                 LSR             X10, X10, #1
.text:000000000002B8E0 loc_2B8E0                               ; CODE XREF: sub_2B5D0+2DC↑j
.text:000000000002B8E0                 CMP             W9, #0
.text:000000000002B8E4                 CSEL            X11, X10, X8, EQ
.text:000000000002B8E8                 CMP             X11, #6
.text:000000000002B8EC                 B.NE            loc_2B920
.text:000000000002B8F0                 ADRP            X3, #aSmF90@PAGE ; "SM-F90"
.text:000000000002B8F4                 ADD             X3, X3, #aSmF90@PAGEOFF ; "SM-F90"
.text:000000000002B8F8                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B8FC                 MOV             X0, SP
.text:000000000002B900                 MOV             X1, XZR
.text:000000000002B904                 MOV             W4, #6
.text:000000000002B908                 BL              ._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::compare(ulong,ulong,char const*,ulong)
.text:000000000002B90C                 CBZ             W0, loc_2B9E4
.text:000000000002B910                 LDRB            W10, [SP,#0x70+var_70]
.text:000000000002B914                 LDR             X8, [SP,#0x70+var_68]
.text:000000000002B918                 AND             W9, W10, #1
.text:000000000002B91C                 LSR             X10, X10, #1
.text:000000000002B920 loc_2B920                               ; CODE XREF: sub_2B5D0+31C↑j
.text:000000000002B920                 CMP             W9, #0
.text:000000000002B924                 CSEL            X11, X10, X8, EQ
.text:000000000002B928                 CMP             X11, #6
.text:000000000002B92C                 B.NE            loc_2B960
.text:000000000002B930                 ADRP            X3, #aSmF70@PAGE ; "SM-F70"
.text:000000000002B934                 ADD             X3, X3, #aSmF70@PAGEOFF ; "SM-F70"
.text:000000000002B938                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B93C                 MOV             X0, SP
.text:000000000002B940                 MOV             X1, XZR
.text:000000000002B944                 MOV             W4, #6
.text:000000000002B948                 BL              ._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::compare(ulong,ulong,char const*,ulong)
.text:000000000002B94C                 CBZ             W0, loc_2B9F4
.text:000000000002B950                 LDRB            W10, [SP,#0x70+var_70]
.text:000000000002B954                 LDR             X8, [SP,#0x70+var_68]
.text:000000000002B958                 AND             W9, W10, #1
.text:000000000002B95C                 LSR             X10, X10, #1
.text:000000000002B960 loc_2B960                               ; CODE XREF: sub_2B5D0+35C↑j
.text:000000000002B960                 CMP             W9, #0
.text:000000000002B964                 CSEL            X8, X10, X8, EQ
.text:000000000002B968                 CMP             X8, #6
.text:000000000002B96C                 B.NE            loc_2B778
.text:000000000002B970                 ADRP            X3, #aSmG98@PAGE ; "SM-G98"
.text:000000000002B974                 ADD             X3, X3, #aSmG98@PAGEOFF ; "SM-G98"
.text:000000000002B978                 MOV             X2, #0xFFFFFFFFFFFFFFFF
.text:000000000002B97C                 MOV             X0, SP
.text:000000000002B980                 MOV             X1, XZR
.text:000000000002B984                 MOV             W4, #6
.text:000000000002B988                 MOV             W19, #6
.text:000000000002B98C                 BL              ._ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm ; std::__1::basic_string<char,std::__1::char_traits<char>,std::__1::allocator<char>>::compare(ulong,ulong,char const*,ulong)
.text:000000000002B990                 CMP             W0, #0
.text:000000000002B994                 CINC            W19, W19, NE
.text:000000000002B998                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B99C                 TBNZ            W8, #0, loc_2B784
.text:000000000002B9A0                 B               loc_2B78C
.text:000000000002B9A4 ; ---------------------------------------------------------------------------
.text:000000000002B9A4 loc_2B9A4                               ; CODE XREF: sub_2B5D0+234↑j
.text:000000000002B9A4                 MOV             W19, WZR
.text:000000000002B9A8                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B9AC                 TBNZ            W8, #0, loc_2B784
.text:000000000002B9B0                 B               loc_2B78C
.text:000000000002B9B4 ; ---------------------------------------------------------------------------
.text:000000000002B9B4 loc_2B9B4                               ; CODE XREF: sub_2B5D0+27C↑j
.text:000000000002B9B4                 MOV             W19, #1
.text:000000000002B9B8                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B9BC                 TBNZ            W8, #0, loc_2B784
.text:000000000002B9C0                 B               loc_2B78C
.text:000000000002B9C4 ; ---------------------------------------------------------------------------
.text:000000000002B9C4 loc_2B9C4                               ; CODE XREF: sub_2B5D0+2BC↑j
.text:000000000002B9C4                 MOV             W19, #2
.text:000000000002B9C8                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B9CC                 TBNZ            W8, #0, loc_2B784
.text:000000000002B9D0                 B               loc_2B78C
.text:000000000002B9D4 ; ---------------------------------------------------------------------------
.text:000000000002B9D4 loc_2B9D4                               ; CODE XREF: sub_2B5D0+2FC↑j
.text:000000000002B9D4                 MOV             W19, #3
.text:000000000002B9D8                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B9DC                 TBNZ            W8, #0, loc_2B784
.text:000000000002B9E0                 B               loc_2B78C
.text:000000000002B9E4 ; ---------------------------------------------------------------------------
.text:000000000002B9E4 loc_2B9E4                               ; CODE XREF: sub_2B5D0+33C↑j
.text:000000000002B9E4                 MOV             W19, #4
.text:000000000002B9E8                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B9EC                 TBNZ            W8, #0, loc_2B784
.text:000000000002B9F0                 B               loc_2B78C
.text:000000000002B9F4 ; ---------------------------------------------------------------------------
.text:000000000002B9F4 loc_2B9F4                               ; CODE XREF: sub_2B5D0+37C↑j
.text:000000000002B9F4                 MOV             W19, #5
.text:000000000002B9F8                 LDRB            W8, [SP,#0x70+var_70]
.text:000000000002B9FC                 TBNZ            W8, #0, loc_2B784
.text:000000000002BA00                 B               loc_2B78C
.text:000000000002BA04 ; ---------------------------------------------------------------------------
.text:000000000002BA04 loc_2BA04                               ; CODE XREF: sub_2B5D0+160↑j
.text:000000000002BA04                 ADRP            X0, #unk_31368@PAGE
.text:000000000002BA08                 ADD             X0, X0, #unk_31368@PAGEOFF ; __guard *
.text:000000000002BA0C                 BL              .__cxa_guard_acquire
.text:000000000002BA10                 CBZ             W0, loc_2B734
.text:000000000002BA14                 ADRP            X8, #aRoProductModel@PAGE ; "ro.product.model"
.text:000000000002BA18                 STP             XZR, XZR, [SP,#0x70+var_40]
.text:000000000002BA1C                 ADD             X8, X8, #aRoProductModel@PAGEOFF ; "ro.product.model"
.text:000000000002BA20                 STR             XZR, [SP,#0x70+var_30]
.text:000000000002BA24                 MOV             W9, #0x20 ; ' '
.text:000000000002BA28                 STRB            WZR, [SP,#0x70+var_30+1]
.text:000000000002BA2C                 ADD             X0, SP, #0x70+var_40
.text:000000000002BA30                 STP             XZR, XZR, [SP,#0x70+var_58]
.text:000000000002BA34                 LDR             Q0, [X8] ; "ro.product.model"
.text:000000000002BA38                 ADD             X1, SP, #0x70+var_58
.text:000000000002BA3C                 STRB            W9, [SP,#0x70+var_40]
.text:000000000002BA40                 STR             XZR, [SP,#0x70+var_48]
.text:000000000002BA44                 STUR            Q0, [SP,#0x70+var_40+1]
.text:000000000002BA48                 BL              sub_1C388
.text:000000000002BA4C                 LDRB            W8, [SP,#0x70+var_58]
.text:000000000002BA50                 MOV             X19, X0
.text:000000000002BA54                 TBZ             W8, #0, loc_2BA60
.text:000000000002BA58                 LDR             X0, [SP,#0x70+var_48] ; void *
.text:000000000002BA5C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002BA60 loc_2BA60                               ; CODE XREF: sub_2B5D0+484↑j
.text:000000000002BA60                 LDRB            W8, [SP,#0x70+var_40]
.text:000000000002BA64                 TBZ             W8, #0, loc_2BA70
.text:000000000002BA68                 LDR             X0, [SP,#0x70+var_30] ; void *
.text:000000000002BA6C                 BL              ._ZdlPv ; operator delete(void *)
.text:000000000002BA70 loc_2BA70                               ; CODE XREF: sub_2B5D0+494↑j
.text:000000000002BA70                 ADRP            X0, #unk_31368@PAGE
.text:000000000002BA74                 ADRP            X8, #qword_31360@PAGE
.text:000000000002BA78                 ADD             X0, X0, #unk_31368@PAGEOFF ; __guard *
.text:000000000002BA7C                 STR             X19, [X8,#qword_31360@PAGEOFF]
.text:000000000002BA80                 BL              .__cxa_guard_release
.text:000000000002BA84                 B               loc_2B734
.text:000000000002BA88 ; ---------------------------------------------------------------------------
.text:000000000002BA88 loc_2BA88                               ; CODE XREF: sub_2B5D0+1D4↑j
.text:000000000002BA88                 BL              .__stack_chk_fail
.text:000000000002BA88 ; } // starts at 2B5D0
.text:000000000002BA88 ; End of function sub_2B5D0
.text:000000000002BA88 ; ---------------------------------------------------------------------------
.text:000000000002BA8C                 ALIGN 0x10
.text:000000000002BA90 ; =============== S U B R O U T I N E =======================================
.text:000000000002BA90 ; __int64 __fastcall utils::getUtcTime_usec(utils *__hidden this)
.text:000000000002BA90                 EXPORT _ZN5utils15getUtcTime_usecEv
.text:000000000002BA90 _ZN5utils15getUtcTime_usecEv            ; CODE XREF: utils::getUtcTime_usec(void)+C↓j
.text:000000000002BA90                                         ; DATA XREF: LOAD:00000000000015D8↑o ...
.text:000000000002BA90 ; __unwind {
.text:000000000002BA90                 B               ._ZNSt3__16chrono12system_clock3nowEv ; std::__1::chrono::system_clock::now(void)
.text:000000000002BA90 ; } // starts at 2BA90
.text:000000000002BA90 ; End of function utils::getUtcTime_usec(void)
.text:000000000002BA90 ; ---------------------------------------------------------------------------
.text:000000000002BA94                 ALIGN 8
.text:000000000002BA98 ; =============== S U B R O U T I N E =======================================
.text:000000000002BA98 ; Attributes: bp-based frame
.text:000000000002BA98 ; __int64 __fastcall utils::getUtcTime_msec(utils *__hidden this)
.text:000000000002BA98                 EXPORT _ZN5utils15getUtcTime_msecEv
.text:000000000002BA98 _ZN5utils15getUtcTime_msecEv            ; CODE XREF: utils::getUtcTime_msec(void)+C↓j
.text:000000000002BA98                                         ; DATA XREF: LOAD:00000000000012D8↑o ...
.text:000000000002BA98 var_s0          =  0
.text:000000000002BA98 ; __unwind {
.text:000000000002BA98                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002BA9C                 MOV             X29, SP
.text:000000000002BAA0                 BL              ._ZNSt3__16chrono12system_clock3nowEv ; std::__1::chrono::system_clock::now(void)
.text:000000000002BAA4                 MOV             X8, #0x20C49BA5E353F7CF
.text:000000000002BAB4                 SMULH           X8, X0, X8
.text:000000000002BAB8                 ASR             X9, X8, #7
.text:000000000002BABC                 ADD             X0, X9, X8,LSR#63
.text:000000000002BAC0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002BAC4                 RET
.text:000000000002BAC4 ; } // starts at 2BA98
.text:000000000002BAC4 ; End of function utils::getUtcTime_msec(void)
.text:000000000002BAC8 ; =============== S U B R O U T I N E =======================================
.text:000000000002BAC8 ; Attributes: bp-based frame
.text:000000000002BAC8 ; __int64 __fastcall utils::getUtcTimes_sec(utils *__hidden this)
.text:000000000002BAC8                 EXPORT _ZN5utils15getUtcTimes_secEv
.text:000000000002BAC8 _ZN5utils15getUtcTimes_secEv            ; DATA XREF: LOAD:00000000000013C8↑o
.text:000000000002BAC8 var_s0          =  0
.text:000000000002BAC8 ; __unwind {
.text:000000000002BAC8                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000002BACC                 MOV             X29, SP
.text:000000000002BAD0                 BL              ._ZNSt3__16chrono12system_clock3nowEv ; std::__1::chrono::system_clock::now(void)
.text:000000000002BAD4                 MOV             X8, #0x431BDE82D7B634DB
.text:000000000002BAE4                 SMULH           X8, X0, X8
.text:000000000002BAE8                 ASR             X9, X8, #0x12
.text:000000000002BAEC                 ADD             X0, X9, X8,LSR#63
.text:000000000002BAF0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:000000000002BAF4                 RET
.text:000000000002BAF4 ; } // starts at 2BAC8
.text:000000000002BAF4 ; End of function utils::getUtcTimes_sec(void)
.text:000000000002BAF8 ; =============== S U B R O U T I N E =======================================
.text:000000000002BAF8 ; Attributes: bp-based frame
.text:000000000002BAF8 ; __int64 __fastcall utils::ValueDamper::ValueDamper(utils::ValueDamper *__hidden this)
.text:000000000002BAF8                 EXPORT _ZN5utils11ValueDamperC2Ev
.text:000000000002BAF8 _ZN5utils11ValueDamperC2Ev              ; DATA XREF: LOAD:0000000000001368↑o
.text:000000000002BAF8                                         ; LOAD:0000000000001E00↑o
.text:000000000002BAF8 var_10          = -0x10
.text:000000000002BAF8 var_s0          =  0
.text:000000000002BAF8 ; __unwind {
.text:000000000002BAF8                 STR             X19, [SP,#-0x10+var_10]! ; Alternative name is 'utils::ValueDamper::ValueDamper(void)'
.text:000000000002BAFC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000002BB00                 ADD             X29, SP, #0x10
.text:000000000002BB04                 MOV             W8, #0xA
.text:000000000002BB08                 STR             WZR, [X0,#0x20]
.text:000000000002BB0C                 MOV             X19, X0
.text:000000000002BB10                 STR             XZR, [X0,#0x28]
.text:000000000002BB14                 STR             X8, [X0,#0x18]
.text:000000000002BB18                 MOV             W0, #0x28 ; '(' ; unsigned __int64
.text:000000000002BB1C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002BB20                 ADD             X8, X0, #0x28 ; '('
.text:000000000002BB24                 STP             X0, X0, [X19]
.text:000000000002BB28                 STR             X8, [X19,#0x10]
.text:000000000002BB2C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000002BB30                 LDR             X19, [SP+0x10+var_10],#0x20
.text:000000000002BB34                 RET
.text:000000000002BB34 ; } // starts at 2BAF8
.text:000000000002BB34 ; End of function utils::ValueDamper::ValueDamper(void)
.text:000000000002BB38 ; =============== S U B R O U T I N E =======================================
.text:000000000002BB38 ; Attributes: bp-based frame
.text:000000000002BB38 ; _QWORD __fastcall utils::ValueDamper::ValueDamper(utils::ValueDamper *__hidden this, unsigned __int64)
.text:000000000002BB38                 EXPORT _ZN5utils11ValueDamperC2Em
.text:000000000002BB38 _ZN5utils11ValueDamperC2Em              ; DATA XREF: LOAD:0000000000001110↑o
.text:000000000002BB38                                         ; LOAD:00000000000019E0↑o
.text:000000000002BB38 var_10          = -0x10
.text:000000000002BB38 var_s0          =  0
.text:000000000002BB38 ; __unwind {
.text:000000000002BB38                 STP             X20, X19, [SP,#-0x10+var_10]! ; Alternative name is 'utils::ValueDamper::ValueDamper(unsigned long)'
.text:000000000002BB3C                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000002BB40                 ADD             X29, SP, #0x10
.text:000000000002BB44                 STP             XZR, XZR, [X0]
.text:000000000002BB48                 STP             XZR, X1, [X0,#0x10]
.text:000000000002BB4C                 STR             WZR, [X0,#0x20]
.text:000000000002BB50                 STR             XZR, [X0,#0x28]
.text:000000000002BB54                 CBZ             X1, loc_2BB80
.text:000000000002BB58                 LSR             X8, X1, #0x3E ; '>'
.text:000000000002BB5C                 CBNZ            X8, loc_2BB8C
.text:000000000002BB60                 MOV             X19, X0
.text:000000000002BB64                 LSL             X20, X1, #2
.text:000000000002BB68                 MOV             X0, X20 ; unsigned __int64
.text:000000000002BB6C                 BL              ._Znwm  ; operator new(ulong)
.text:000000000002BB70                 DUP             V0.2D, X0
.text:000000000002BB74                 ADD             X8, X0, X20
.text:000000000002BB78                 STR             X8, [X19,#0x10]
.text:000000000002BB7C                 STR             Q0, [X19]
.text:000000000002BB80 loc_2BB80                               ; CODE XREF: utils::ValueDamper::ValueDamper(ulong)+1C↑j
.text:000000000002BB80                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000002BB84                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000002BB88                 RET
.text:000000000002BB8C ; ---------------------------------------------------------------------------
.text:000000000002BB8C loc_2BB8C                               ; CODE XREF: utils::ValueDamper::ValueDamper(ulong)+24↑j
.text:000000000002BB8C                 BL              .abort
.text:000000000002BB8C ; } // starts at 2BB38
.text:000000000002BB8C ; End of function utils::ValueDamper::ValueDamper(ulong)
.text:000000000002BB90 ; =============== S U B R O U T I N E =======================================
.text:000000000002BB90 ; Attributes: bp-based frame
.text:000000000002BB90 ; __int64 __fastcall utils::ValueDamper::setValue(utils::ValueDamper *__hidden this, float)
.text:000000000002BB90                 EXPORT _ZN5utils11ValueDamper8setValueEf
.text:000000000002BB90 _ZN5utils11ValueDamper8setValueEf       ; DATA XREF: LOAD:0000000000001B00↑o
.text:000000000002BB90 var_2C          = -0x2C
.text:000000000002BB90 var_28          = -0x28
.text:000000000002BB90 var_20          = -0x20
.text:000000000002BB90 var_10          = -0x10
.text:000000000002BB90 var_s0          =  0
.text:000000000002BB90 ; __unwind {
.text:000000000002BB90                 SUB             SP, SP, #0x40
.text:000000000002BB94                 STR             D8, [SP,#0x30+var_20]
.text:000000000002BB98                 STP             X20, X19, [SP,#0x30+var_10]
.text:000000000002BB9C                 STP             X29, X30, [SP,#0x30+var_s0]
.text:000000000002BBA0                 ADD             X29, SP, #0x30
.text:000000000002BBA4                 FMOV            S8, WZR
.text:000000000002BBA8                 MRS             X20, #3, c13, c0, #2
.text:000000000002BBAC                 LDR             X8, [X20,#0x28]
.text:000000000002BBB0                 FMOV            S1, #1.0
.text:000000000002BBB4                 MOV             X19, X0
.text:000000000002BBB8                 STR             X8, [SP,#0x30+var_28]
.text:000000000002BBBC                 FMAX            S0, S0, S8
.text:000000000002BBC0                 LDR             X10, [X0,#0x18]
.text:000000000002BBC4                 LDP             X9, X8, [X0]
.text:000000000002BBC8                 SUB             X11, X8, X9
.text:000000000002BBCC                 FMIN            S0, S0, S1
.text:000000000002BBD0                 CMP             X10, X11,ASR#2
.text:000000000002BBD4                 STR             S0, [SP,#0x30+var_2C]
.text:000000000002BBD8                 B.CS            loc_2BBE8
.text:000000000002BBDC                 LDR             X8, [X19,#0x28]
.text:000000000002BBE0                 STR             S0, [X9,X8,LSL#2]
.text:000000000002BBE4                 B               loc_2BC14
.text:000000000002BBE8 ; ---------------------------------------------------------------------------
.text:000000000002BBE8 loc_2BBE8                               ; CODE XREF: utils::ValueDamper::setValue(float)+48↑j
.text:000000000002BBE8                 LDR             X9, [X19,#0x10]
.text:000000000002BBEC                 CMP             X9, X8
.text:000000000002BBF0                 B.EQ            loc_2BC08
.text:000000000002BBF4                 STR             S0, [X8]
.text:000000000002BBF8                 LDR             X8, [X19,#8]
.text:000000000002BBFC                 ADD             X8, X8, #4
.text:000000000002BC00                 STR             X8, [X19,#8]
.text:000000000002BC04                 B               loc_2BC14
.text:000000000002BC08 ; ---------------------------------------------------------------------------
.text:000000000002BC08 loc_2BC08                               ; CODE XREF: utils::ValueDamper::setValue(float)+60↑j
.text:000000000002BC08                 ADD             X1, SP, #0x30+var_2C
.text:000000000002BC0C                 MOV             X0, X19
.text:000000000002BC10                 BL              loc_1DCB8
.text:000000000002BC14 loc_2BC14                               ; CODE XREF: utils::ValueDamper::setValue(float)+54↑j
.text:000000000002BC14                                         ; utils::ValueDamper::setValue(float)+74↑j
.text:000000000002BC14                 LDR             X10, [X19,#0x28]
.text:000000000002BC18                 LDR             X11, [X19,#0x18]
.text:000000000002BC1C                 LDP             X8, X9, [X19]
.text:000000000002BC20                 STR             WZR, [X19,#0x20]
.text:000000000002BC24                 CMP             X10, X11
.text:000000000002BC28                 CSINC           X10, XZR, X10, CS
.text:000000000002BC2C                 CMP             X8, X9
.text:000000000002BC30                 STR             X10, [X19,#0x28]
.text:000000000002BC34                 B.EQ            loc_2BC54
.text:000000000002BC38                 FMOV            S8, WZR
.text:000000000002BC3C                 MOV             X10, X8
.text:000000000002BC40 loc_2BC40                               ; CODE XREF: utils::ValueDamper::setValue(float)+C0↓j
.text:000000000002BC40                 LDR             S0, [X10],#4
.text:000000000002BC44                 FADD            S8, S8, S0
.text:000000000002BC48                 CMP             X9, X10
.text:000000000002BC4C                 STR             S8, [X19,#0x20]
.text:000000000002BC50                 B.NE            loc_2BC40
.text:000000000002BC54 loc_2BC54                               ; CODE XREF: utils::ValueDamper::setValue(float)+A4↑j
.text:000000000002BC54                 SUB             X8, X9, X8
.text:000000000002BC58                 ASR             X8, X8, #2
.text:000000000002BC5C                 UCVTF           S0, X8
.text:000000000002BC60                 FDIV            S0, S8, S0
.text:000000000002BC64                 STR             S0, [X19,#0x20]
.text:000000000002BC68                 LDR             X8, [X20,#0x28]
.text:000000000002BC6C                 LDR             X9, [SP,#0x30+var_28]
.text:000000000002BC70                 CMP             X8, X9
.text:000000000002BC74                 B.NE            loc_2BC8C
.text:000000000002BC78                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000002BC7C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:000000000002BC80                 LDR             D8, [SP,#0x30+var_20]
.text:000000000002BC84                 ADD             SP, SP, #0x40 ; '@'
.text:000000000002BC88                 RET
.text:000000000002BC8C ; ---------------------------------------------------------------------------
.text:000000000002BC8C loc_2BC8C                               ; CODE XREF: utils::ValueDamper::setValue(float)+E4↑j
.text:000000000002BC8C                 BL              .__stack_chk_fail
.text:000000000002BC8C ; } // starts at 2BB90
.text:000000000002BC8C ; End of function utils::ValueDamper::setValue(float)
.text:000000000002BC90 ; =============== S U B R O U T I N E =======================================
.text:000000000002BC90 ; Attributes: bp-based frame
.text:000000000002BC90 ; __int64 __fastcall utils::ValueDamper::setValueUnclamped(utils::ValueDamper *__hidden this, float)
.text:000000000002BC90                 EXPORT _ZN5utils11ValueDamper17setValueUnclampedEf
.text:000000000002BC90 _ZN5utils11ValueDamper17setValueUnclampedEf
.text:000000000002BC90                                         ; DATA XREF: LOAD:0000000000001308↑o
.text:000000000002BC90 var_1C          = -0x1C
.text:000000000002BC90 var_18          = -0x18
.text:000000000002BC90 var_10          = -0x10
.text:000000000002BC90 var_s0          =  0
.text:000000000002BC90 ; __unwind {
.text:000000000002BC90                 SUB             SP, SP, #0x30
.text:000000000002BC94                 STP             X20, X19, [SP,#0x20+var_10]
.text:000000000002BC98                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000002BC9C                 ADD             X29, SP, #0x20
.text:000000000002BCA0                 MRS             X20, #3, c13, c0, #2
.text:000000000002BCA4                 MOV             X19, X0
.text:000000000002BCA8                 LDR             X8, [X20,#0x28]
.text:000000000002BCAC                 STR             X8, [SP,#0x20+var_18]
.text:000000000002BCB0                 LDP             X9, X8, [X0]
.text:000000000002BCB4                 LDR             X10, [X0,#0x18]
.text:000000000002BCB8                 STR             S0, [SP,#0x20+var_1C]
.text:000000000002BCBC                 SUB             X11, X8, X9
.text:000000000002BCC0                 CMP             X10, X11,ASR#2
.text:000000000002BCC4                 B.CS            loc_2BCD4
.text:000000000002BCC8                 LDR             X8, [X19,#0x28]
.text:000000000002BCCC                 STR             S0, [X9,X8,LSL#2]
.text:000000000002BCD0                 B               loc_2BD00
.text:000000000002BCD4 ; ---------------------------------------------------------------------------
.text:000000000002BCD4 loc_2BCD4                               ; CODE XREF: utils::ValueDamper::setValueUnclamped(float)+34↑j
.text:000000000002BCD4                 LDR             X9, [X19,#0x10]
.text:000000000002BCD8                 CMP             X9, X8
.text:000000000002BCDC                 B.EQ            loc_2BCF4
.text:000000000002BCE0                 STR             S0, [X8]
.text:000000000002BCE4                 LDR             X8, [X19,#8]
.text:000000000002BCE8                 ADD             X8, X8, #4
.text:000000000002BCEC                 STR             X8, [X19,#8]
.text:000000000002BCF0                 B               loc_2BD00
.text:000000000002BCF4 ; ---------------------------------------------------------------------------
.text:000000000002BCF4 loc_2BCF4                               ; CODE XREF: utils::ValueDamper::setValueUnclamped(float)+4C↑j
.text:000000000002BCF4                 ADD             X1, SP, #0x20+var_1C
.text:000000000002BCF8                 MOV             X0, X19
.text:000000000002BCFC                 BL              loc_1DCB8
.text:000000000002BD00 loc_2BD00                               ; CODE XREF: utils::ValueDamper::setValueUnclamped(float)+40↑j
.text:000000000002BD00                                         ; utils::ValueDamper::setValueUnclamped(float)+60↑j
.text:000000000002BD00                 LDR             X10, [X19,#0x28]
.text:000000000002BD04                 FMOV            S0, WZR
.text:000000000002BD08                 LDR             X11, [X19,#0x18]
.text:000000000002BD0C                 LDP             X8, X9, [X19]
.text:000000000002BD10                 STR             WZR, [X19,#0x20]
.text:000000000002BD14                 CMP             X10, X11
.text:000000000002BD18                 CSINC           X10, XZR, X10, CS
.text:000000000002BD1C                 CMP             X8, X9
.text:000000000002BD20                 STR             X10, [X19,#0x28]
.text:000000000002BD24                 B.EQ            loc_2BD40
.text:000000000002BD28                 MOV             X10, X8
.text:000000000002BD2C loc_2BD2C                               ; CODE XREF: utils::ValueDamper::setValueUnclamped(float)+AC↓j
.text:000000000002BD2C                 LDR             S1, [X10],#4
.text:000000000002BD30                 FADD            S0, S1, S0
.text:000000000002BD34                 CMP             X9, X10
.text:000000000002BD38                 STR             S0, [X19,#0x20]
.text:000000000002BD3C                 B.NE            loc_2BD2C
.text:000000000002BD40 loc_2BD40                               ; CODE XREF: utils::ValueDamper::setValueUnclamped(float)+94↑j
.text:000000000002BD40                 SUB             X8, X9, X8
.text:000000000002BD44                 ASR             X8, X8, #2
.text:000000000002BD48                 UCVTF           S1, X8
.text:000000000002BD4C                 FDIV            S0, S0, S1
.text:000000000002BD50                 STR             S0, [X19,#0x20]
.text:000000000002BD54                 LDR             X8, [X20,#0x28]
.text:000000000002BD58                 LDR             X9, [SP,#0x20+var_18]
.text:000000000002BD5C                 CMP             X8, X9
.text:000000000002BD60                 B.NE            loc_2BD74
.text:000000000002BD64                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:000000000002BD68                 LDP             X20, X19, [SP,#0x20+var_10]
.text:000000000002BD6C                 ADD             SP, SP, #0x30 ; '0'
.text:000000000002BD70                 RET
.text:000000000002BD74 ; ---------------------------------------------------------------------------
.text:000000000002BD74 loc_2BD74                               ; CODE XREF: utils::ValueDamper::setValueUnclamped(float)+D0↑j
.text:000000000002BD74                 BL              .__stack_chk_fail
.text:000000000002BD74 ; } // starts at 2BC90
.text:000000000002BD74 ; End of function utils::ValueDamper::setValueUnclamped(float)
.text:000000000002BD78 ; =============== S U B R O U T I N E =======================================
.text:000000000002BD78                 EXPORT __letf2
.text:000000000002BD78 __letf2                                 ; DATA XREF: LOAD:0000000000000D80↑o
.text:000000000002BD78                                         ; LOAD:0000000000002100↑o
.text:000000000002BD78 var_20          = -0x20
.text:000000000002BD78 var_10          = -0x10
.text:000000000002BD78 ; __unwind {
.text:000000000002BD78                 STP             Q1, Q0, [SP,#var_20]! ; Alternative name is '__cmptf2'
.text:000000000002BD7C                 LDP             X9, X8, [SP,#0x20+var_10]
.text:000000000002BD80                 MOV             X13, #0x7FFF000000000000
.text:000000000002BD84                 MOV             W0, #1
.text:000000000002BD88                 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002BD8C                 CMP             X9, #0
.text:000000000002BD90                 CSET            W10, NE
.text:000000000002BD94                 CMP             X12, X13
.text:000000000002BD98                 CSET            W11, HI
.text:000000000002BD9C                 CSEL            W10, W10, W11, EQ
.text:000000000002BDA0                 TBNZ            W10, #0, loc_2BE44
.text:000000000002BDA4                 LDP             X11, X10, [SP,#0x20+var_20]
.text:000000000002BDA8                 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:000000000002BDAC                 CMP             X11, #0
.text:000000000002BDB0                 CSET            W15, NE
.text:000000000002BDB4                 CMP             X14, X13
.text:000000000002BDB8                 CSET            W13, HI
.text:000000000002BDBC                 CSEL            W13, W15, W13, EQ
.text:000000000002BDC0                 TBNZ            W13, #0, loc_2BE44
.text:000000000002BDC4                 ORR             X13, X11, X9
.text:000000000002BDC8                 ORR             X12, X14, X12
.text:000000000002BDCC                 ORR             X12, X13, X12
.text:000000000002BDD0                 CBZ             X12, loc_2BE00
.text:000000000002BDD4                 TST             X10, X8
.text:000000000002BDD8                 B.LT            loc_2BE0C
.text:000000000002BDDC                 CMP             X9, X11
.text:000000000002BDE0                 CSET            W12, CC
.text:000000000002BDE4                 CMP             X8, X10
.text:000000000002BDE8                 CSET            W13, LT
.text:000000000002BDEC                 CSEL            W12, W12, W13, EQ
.text:000000000002BDF0                 TBZ             W12, #0, loc_2BE30
.text:000000000002BDF4                 MOV             W0, #0xFFFFFFFF
.text:000000000002BDF8                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BDFC                 RET
.text:000000000002BE00 ; ---------------------------------------------------------------------------
.text:000000000002BE00 loc_2BE00                               ; CODE XREF: __letf2+58↑j
.text:000000000002BE00                 MOV             W0, WZR
.text:000000000002BE04                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BE08                 RET
.text:000000000002BE0C ; ---------------------------------------------------------------------------
.text:000000000002BE0C loc_2BE0C                               ; CODE XREF: __letf2+60↑j
.text:000000000002BE0C                 CMP             X9, X11
.text:000000000002BE10                 CSET            W12, HI
.text:000000000002BE14                 CMP             X8, X10
.text:000000000002BE18                 CSET            W13, GT
.text:000000000002BE1C                 CSEL            W12, W12, W13, EQ
.text:000000000002BE20                 TBZ             W12, #0, loc_2BE30
.text:000000000002BE24                 MOV             W0, #0xFFFFFFFF
.text:000000000002BE28                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BE2C                 RET
.text:000000000002BE30 ; ---------------------------------------------------------------------------
.text:000000000002BE30 loc_2BE30                               ; CODE XREF: __letf2+78↑j
.text:000000000002BE30                                         ; __letf2+A8↑j
.text:000000000002BE30                 EOR             X9, X9, X11
.text:000000000002BE34                 EOR             X8, X8, X10
.text:000000000002BE38                 ORR             X8, X9, X8
.text:000000000002BE3C                 CMP             X8, #0
.text:000000000002BE40                 CSET            W0, NE
.text:000000000002BE44 loc_2BE44                               ; CODE XREF: __letf2+28↑j
.text:000000000002BE44                                         ; __letf2+48↑j
.text:000000000002BE44                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BE48                 RET
.text:000000000002BE48 ; } // starts at 2BD78
.text:000000000002BE48 ; End of function __letf2
.text:000000000002BE4C ; =============== S U B R O U T I N E =======================================
.text:000000000002BE4C                 EXPORT __getf2
.text:000000000002BE4C __getf2                                 ; DATA XREF: LOAD:00000000000011D0↑o
.text:000000000002BE4C var_20          = -0x20
.text:000000000002BE4C var_10          = -0x10
.text:000000000002BE4C ; __unwind {
.text:000000000002BE4C                 STP             Q1, Q0, [SP,#var_20]!
.text:000000000002BE50                 LDP             X9, X8, [SP,#0x20+var_10]
.text:000000000002BE54                 MOV             X13, #0x7FFF000000000000
.text:000000000002BE58                 MOV             W0, #0xFFFFFFFF
.text:000000000002BE5C                 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002BE60                 CMP             X9, #0
.text:000000000002BE64                 CSET            W10, NE
.text:000000000002BE68                 CMP             X12, X13
.text:000000000002BE6C                 CSET            W11, HI
.text:000000000002BE70                 CSEL            W10, W10, W11, EQ
.text:000000000002BE74                 TBNZ            W10, #0, loc_2BF18
.text:000000000002BE78                 LDP             X11, X10, [SP,#0x20+var_20]
.text:000000000002BE7C                 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:000000000002BE80                 CMP             X11, #0
.text:000000000002BE84                 CSET            W15, NE
.text:000000000002BE88                 CMP             X14, X13
.text:000000000002BE8C                 CSET            W13, HI
.text:000000000002BE90                 CSEL            W13, W15, W13, EQ
.text:000000000002BE94                 TBNZ            W13, #0, loc_2BF18
.text:000000000002BE98                 ORR             X13, X11, X9
.text:000000000002BE9C                 ORR             X12, X14, X12
.text:000000000002BEA0                 ORR             X12, X13, X12
.text:000000000002BEA4                 CBZ             X12, loc_2BED4
.text:000000000002BEA8                 TST             X10, X8
.text:000000000002BEAC                 B.LT            loc_2BEE0
.text:000000000002BEB0                 CMP             X9, X11
.text:000000000002BEB4                 CSET            W12, CC
.text:000000000002BEB8                 CMP             X8, X10
.text:000000000002BEBC                 CSET            W13, LT
.text:000000000002BEC0                 CSEL            W12, W12, W13, EQ
.text:000000000002BEC4                 TBZ             W12, #0, loc_2BF04
.text:000000000002BEC8                 MOV             W0, #0xFFFFFFFF
.text:000000000002BECC                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BED0                 RET
.text:000000000002BED4 ; ---------------------------------------------------------------------------
.text:000000000002BED4 loc_2BED4                               ; CODE XREF: __getf2+58↑j
.text:000000000002BED4                 MOV             W0, WZR
.text:000000000002BED8                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BEDC                 RET
.text:000000000002BEE0 ; ---------------------------------------------------------------------------
.text:000000000002BEE0 loc_2BEE0                               ; CODE XREF: __getf2+60↑j
.text:000000000002BEE0                 CMP             X9, X11
.text:000000000002BEE4                 CSET            W12, HI
.text:000000000002BEE8                 CMP             X8, X10
.text:000000000002BEEC                 CSET            W13, GT
.text:000000000002BEF0                 CSEL            W12, W12, W13, EQ
.text:000000000002BEF4                 TBZ             W12, #0, loc_2BF04
.text:000000000002BEF8                 MOV             W0, #0xFFFFFFFF
.text:000000000002BEFC                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BF00                 RET
.text:000000000002BF04 ; ---------------------------------------------------------------------------
.text:000000000002BF04 loc_2BF04                               ; CODE XREF: __getf2+78↑j
.text:000000000002BF04                                         ; __getf2+A8↑j
.text:000000000002BF04                 EOR             X9, X9, X11
.text:000000000002BF08                 EOR             X8, X8, X10
.text:000000000002BF0C                 ORR             X8, X9, X8
.text:000000000002BF10                 CMP             X8, #0
.text:000000000002BF14                 CSET            W0, NE
.text:000000000002BF18 loc_2BF18                               ; CODE XREF: __getf2+28↑j
.text:000000000002BF18                                         ; __getf2+48↑j
.text:000000000002BF18                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BF1C                 RET
.text:000000000002BF1C ; } // starts at 2BE4C
.text:000000000002BF1C ; End of function __getf2
.text:000000000002BF20 ; =============== S U B R O U T I N E =======================================
.text:000000000002BF20                 EXPORT __unordtf2
.text:000000000002BF20 __unordtf2                              ; DATA XREF: LOAD:0000000000001C68↑o
.text:000000000002BF20 var_20          = -0x20
.text:000000000002BF20 var_10          = -0x10
.text:000000000002BF20 ; __unwind {
.text:000000000002BF20                 STP             Q1, Q0, [SP,#var_20]!
.text:000000000002BF24                 LDP             X10, X9, [SP,#0x20+var_10]
.text:000000000002BF28                 MOV             X8, #0x7FFF000000000000
.text:000000000002BF2C                 LDP             X12, X11, [SP+0x20+var_20],#0x20
.text:000000000002BF30                 AND             X9, X9, #0x7FFFFFFFFFFFFFFF
.text:000000000002BF34                 CMP             X10, #0
.text:000000000002BF38                 AND             X10, X11, #0x7FFFFFFFFFFFFFFF
.text:000000000002BF3C                 CSET            W11, NE
.text:000000000002BF40                 CMP             X9, X8
.text:000000000002BF44                 CSET            W9, HI
.text:000000000002BF48                 CSEL            W9, W11, W9, EQ
.text:000000000002BF4C                 CMP             X12, #0
.text:000000000002BF50                 CSET            W11, NE
.text:000000000002BF54                 CMP             X10, X8
.text:000000000002BF58                 CSET            W8, HI
.text:000000000002BF5C                 CSEL            W8, W11, W8, EQ
.text:000000000002BF60                 ORR             W0, W9, W8
.text:000000000002BF64                 RET
.text:000000000002BF64 ; } // starts at 2BF20
.text:000000000002BF64 ; End of function __unordtf2
.text:000000000002BF68 ; =============== S U B R O U T I N E =======================================
.text:000000000002BF68                 EXPORT __eqtf2
.text:000000000002BF68 __eqtf2                                 ; DATA XREF: LOAD:0000000000001278↑o
.text:000000000002BF68 var_20          = -0x20
.text:000000000002BF68 var_10          = -0x10
.text:000000000002BF68 ; __unwind {
.text:000000000002BF68                 STP             Q1, Q0, [SP,#var_20]!
.text:000000000002BF6C                 LDP             X9, X8, [SP,#0x20+var_10]
.text:000000000002BF70                 MOV             X13, #0x7FFF000000000000
.text:000000000002BF74                 MOV             W0, #1
.text:000000000002BF78                 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002BF7C                 CMP             X9, #0
.text:000000000002BF80                 CSET            W10, NE
.text:000000000002BF84                 CMP             X12, X13
.text:000000000002BF88                 CSET            W11, HI
.text:000000000002BF8C                 CSEL            W10, W10, W11, EQ
.text:000000000002BF90                 TBNZ            W10, #0, loc_2C034
.text:000000000002BF94                 LDP             X11, X10, [SP,#0x20+var_20]
.text:000000000002BF98                 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:000000000002BF9C                 CMP             X11, #0
.text:000000000002BFA0                 CSET            W15, NE
.text:000000000002BFA4                 CMP             X14, X13
.text:000000000002BFA8                 CSET            W13, HI
.text:000000000002BFAC                 CSEL            W13, W15, W13, EQ
.text:000000000002BFB0                 TBNZ            W13, #0, loc_2C034
.text:000000000002BFB4                 ORR             X13, X11, X9
.text:000000000002BFB8                 ORR             X12, X14, X12
.text:000000000002BFBC                 ORR             X12, X13, X12
.text:000000000002BFC0                 CBZ             X12, loc_2BFF0
.text:000000000002BFC4                 TST             X10, X8
.text:000000000002BFC8                 B.LT            loc_2BFFC
.text:000000000002BFCC                 CMP             X9, X11
.text:000000000002BFD0                 CSET            W12, CC
.text:000000000002BFD4                 CMP             X8, X10
.text:000000000002BFD8                 CSET            W13, LT
.text:000000000002BFDC                 CSEL            W12, W12, W13, EQ
.text:000000000002BFE0                 TBZ             W12, #0, loc_2C020
.text:000000000002BFE4                 MOV             W0, #0xFFFFFFFF
.text:000000000002BFE8                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BFEC                 RET
.text:000000000002BFF0 ; ---------------------------------------------------------------------------
.text:000000000002BFF0 loc_2BFF0                               ; CODE XREF: __eqtf2+58↑j
.text:000000000002BFF0                 MOV             W0, WZR
.text:000000000002BFF4                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002BFF8                 RET
.text:000000000002BFFC ; ---------------------------------------------------------------------------
.text:000000000002BFFC loc_2BFFC                               ; CODE XREF: __eqtf2+60↑j
.text:000000000002BFFC                 CMP             X9, X11
.text:000000000002C000                 CSET            W12, HI
.text:000000000002C004                 CMP             X8, X10
.text:000000000002C008                 CSET            W13, GT
.text:000000000002C00C                 CSEL            W12, W12, W13, EQ
.text:000000000002C010                 TBZ             W12, #0, loc_2C020
.text:000000000002C014                 MOV             W0, #0xFFFFFFFF
.text:000000000002C018                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C01C                 RET
.text:000000000002C020 ; ---------------------------------------------------------------------------
.text:000000000002C020 loc_2C020                               ; CODE XREF: __eqtf2+78↑j
.text:000000000002C020                                         ; __eqtf2+A8↑j
.text:000000000002C020                 EOR             X9, X9, X11
.text:000000000002C024                 EOR             X8, X8, X10
.text:000000000002C028                 ORR             X8, X9, X8
.text:000000000002C02C                 CMP             X8, #0
.text:000000000002C030                 CSET            W0, NE
.text:000000000002C034 loc_2C034                               ; CODE XREF: __eqtf2+28↑j
.text:000000000002C034                                         ; __eqtf2+48↑j
.text:000000000002C034                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C038                 RET
.text:000000000002C038 ; } // starts at 2BF68
.text:000000000002C038 ; End of function __eqtf2
.text:000000000002C03C ; =============== S U B R O U T I N E =======================================
.text:000000000002C03C                 EXPORT __lttf2
.text:000000000002C03C __lttf2                                 ; CODE XREF: .__lttf2+C↓j
.text:000000000002C03C                                         ; DATA XREF: LOAD:00000000000016E0↑o ...
.text:000000000002C03C var_20          = -0x20
.text:000000000002C03C var_10          = -0x10
.text:000000000002C03C ; __unwind {
.text:000000000002C03C                 STP             Q1, Q0, [SP,#var_20]!
.text:000000000002C040                 LDP             X9, X8, [SP,#0x20+var_10]
.text:000000000002C044                 MOV             X13, #0x7FFF000000000000
.text:000000000002C048                 MOV             W0, #1
.text:000000000002C04C                 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002C050                 CMP             X9, #0
.text:000000000002C054                 CSET            W10, NE
.text:000000000002C058                 CMP             X12, X13
.text:000000000002C05C                 CSET            W11, HI
.text:000000000002C060                 CSEL            W10, W10, W11, EQ
.text:000000000002C064                 TBNZ            W10, #0, loc_2C108
.text:000000000002C068                 LDP             X11, X10, [SP,#0x20+var_20]
.text:000000000002C06C                 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:000000000002C070                 CMP             X11, #0
.text:000000000002C074                 CSET            W15, NE
.text:000000000002C078                 CMP             X14, X13
.text:000000000002C07C                 CSET            W13, HI
.text:000000000002C080                 CSEL            W13, W15, W13, EQ
.text:000000000002C084                 TBNZ            W13, #0, loc_2C108
.text:000000000002C088                 ORR             X13, X11, X9
.text:000000000002C08C                 ORR             X12, X14, X12
.text:000000000002C090                 ORR             X12, X13, X12
.text:000000000002C094                 CBZ             X12, loc_2C0C4
.text:000000000002C098                 TST             X10, X8
.text:000000000002C09C                 B.LT            loc_2C0D0
.text:000000000002C0A0                 CMP             X9, X11
.text:000000000002C0A4                 CSET            W12, CC
.text:000000000002C0A8                 CMP             X8, X10
.text:000000000002C0AC                 CSET            W13, LT
.text:000000000002C0B0                 CSEL            W12, W12, W13, EQ
.text:000000000002C0B4                 TBZ             W12, #0, loc_2C0F4
.text:000000000002C0B8                 MOV             W0, #0xFFFFFFFF
.text:000000000002C0BC                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C0C0                 RET
.text:000000000002C0C4 ; ---------------------------------------------------------------------------
.text:000000000002C0C4 loc_2C0C4                               ; CODE XREF: __lttf2+58↑j
.text:000000000002C0C4                 MOV             W0, WZR
.text:000000000002C0C8                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C0CC                 RET
.text:000000000002C0D0 ; ---------------------------------------------------------------------------
.text:000000000002C0D0 loc_2C0D0                               ; CODE XREF: __lttf2+60↑j
.text:000000000002C0D0                 CMP             X9, X11
.text:000000000002C0D4                 CSET            W12, HI
.text:000000000002C0D8                 CMP             X8, X10
.text:000000000002C0DC                 CSET            W13, GT
.text:000000000002C0E0                 CSEL            W12, W12, W13, EQ
.text:000000000002C0E4                 TBZ             W12, #0, loc_2C0F4
.text:000000000002C0E8                 MOV             W0, #0xFFFFFFFF
.text:000000000002C0EC                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C0F0                 RET
.text:000000000002C0F4 ; ---------------------------------------------------------------------------
.text:000000000002C0F4 loc_2C0F4                               ; CODE XREF: __lttf2+78↑j
.text:000000000002C0F4                                         ; __lttf2+A8↑j
.text:000000000002C0F4                 EOR             X9, X9, X11
.text:000000000002C0F8                 EOR             X8, X8, X10
.text:000000000002C0FC                 ORR             X8, X9, X8
.text:000000000002C100                 CMP             X8, #0
.text:000000000002C104                 CSET            W0, NE
.text:000000000002C108 loc_2C108                               ; CODE XREF: __lttf2+28↑j
.text:000000000002C108                                         ; __lttf2+48↑j
.text:000000000002C108                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C10C                 RET
.text:000000000002C10C ; } // starts at 2C03C
.text:000000000002C10C ; End of function __lttf2
.text:000000000002C110 ; =============== S U B R O U T I N E =======================================
.text:000000000002C110                 EXPORT __netf2
.text:000000000002C110 __netf2                                 ; DATA XREF: LOAD:0000000000001890↑o
.text:000000000002C110 var_20          = -0x20
.text:000000000002C110 var_10          = -0x10
.text:000000000002C110 ; __unwind {
.text:000000000002C110                 STP             Q1, Q0, [SP,#var_20]!
.text:000000000002C114                 LDP             X9, X8, [SP,#0x20+var_10]
.text:000000000002C118                 MOV             X13, #0x7FFF000000000000
.text:000000000002C11C                 MOV             W0, #1
.text:000000000002C120                 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002C124                 CMP             X9, #0
.text:000000000002C128                 CSET            W10, NE
.text:000000000002C12C                 CMP             X12, X13
.text:000000000002C130                 CSET            W11, HI
.text:000000000002C134                 CSEL            W10, W10, W11, EQ
.text:000000000002C138                 TBNZ            W10, #0, loc_2C1DC
.text:000000000002C13C                 LDP             X11, X10, [SP,#0x20+var_20]
.text:000000000002C140                 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:000000000002C144                 CMP             X11, #0
.text:000000000002C148                 CSET            W15, NE
.text:000000000002C14C                 CMP             X14, X13
.text:000000000002C150                 CSET            W13, HI
.text:000000000002C154                 CSEL            W13, W15, W13, EQ
.text:000000000002C158                 TBNZ            W13, #0, loc_2C1DC
.text:000000000002C15C                 ORR             X13, X11, X9
.text:000000000002C160                 ORR             X12, X14, X12
.text:000000000002C164                 ORR             X12, X13, X12
.text:000000000002C168                 CBZ             X12, loc_2C198
.text:000000000002C16C                 TST             X10, X8
.text:000000000002C170                 B.LT            loc_2C1A4
.text:000000000002C174                 CMP             X9, X11
.text:000000000002C178                 CSET            W12, CC
.text:000000000002C17C                 CMP             X8, X10
.text:000000000002C180                 CSET            W13, LT
.text:000000000002C184                 CSEL            W12, W12, W13, EQ
.text:000000000002C188                 TBZ             W12, #0, loc_2C1C8
.text:000000000002C18C                 MOV             W0, #0xFFFFFFFF
.text:000000000002C190                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C194                 RET
.text:000000000002C198 ; ---------------------------------------------------------------------------
.text:000000000002C198 loc_2C198                               ; CODE XREF: __netf2+58↑j
.text:000000000002C198                 MOV             W0, WZR
.text:000000000002C19C                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C1A0                 RET
.text:000000000002C1A4 ; ---------------------------------------------------------------------------
.text:000000000002C1A4 loc_2C1A4                               ; CODE XREF: __netf2+60↑j
.text:000000000002C1A4                 CMP             X9, X11
.text:000000000002C1A8                 CSET            W12, HI
.text:000000000002C1AC                 CMP             X8, X10
.text:000000000002C1B0                 CSET            W13, GT
.text:000000000002C1B4                 CSEL            W12, W12, W13, EQ
.text:000000000002C1B8                 TBZ             W12, #0, loc_2C1C8
.text:000000000002C1BC                 MOV             W0, #0xFFFFFFFF
.text:000000000002C1C0                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C1C4                 RET
.text:000000000002C1C8 ; ---------------------------------------------------------------------------
.text:000000000002C1C8 loc_2C1C8                               ; CODE XREF: __netf2+78↑j
.text:000000000002C1C8                                         ; __netf2+A8↑j
.text:000000000002C1C8                 EOR             X9, X9, X11
.text:000000000002C1CC                 EOR             X8, X8, X10
.text:000000000002C1D0                 ORR             X8, X9, X8
.text:000000000002C1D4                 CMP             X8, #0
.text:000000000002C1D8                 CSET            W0, NE
.text:000000000002C1DC loc_2C1DC                               ; CODE XREF: __netf2+28↑j
.text:000000000002C1DC                                         ; __netf2+48↑j
.text:000000000002C1DC                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C1E0                 RET
.text:000000000002C1E0 ; } // starts at 2C110
.text:000000000002C1E0 ; End of function __netf2
.text:000000000002C1E4 ; =============== S U B R O U T I N E =======================================
.text:000000000002C1E4                 EXPORT __gttf2
.text:000000000002C1E4 __gttf2                                 ; CODE XREF: .__gttf2+C↓j
.text:000000000002C1E4                                         ; DATA XREF: LOAD:0000000000001BF0↑o ...
.text:000000000002C1E4 var_20          = -0x20
.text:000000000002C1E4 var_10          = -0x10
.text:000000000002C1E4 ; __unwind {
.text:000000000002C1E4                 STP             Q1, Q0, [SP,#var_20]!
.text:000000000002C1E8                 LDP             X9, X8, [SP,#0x20+var_10]
.text:000000000002C1EC                 MOV             X13, #0x7FFF000000000000
.text:000000000002C1F0                 MOV             W0, #0xFFFFFFFF
.text:000000000002C1F4                 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002C1F8                 CMP             X9, #0
.text:000000000002C1FC                 CSET            W10, NE
.text:000000000002C200                 CMP             X12, X13
.text:000000000002C204                 CSET            W11, HI
.text:000000000002C208                 CSEL            W10, W10, W11, EQ
.text:000000000002C20C                 TBNZ            W10, #0, loc_2C2B0
.text:000000000002C210                 LDP             X11, X10, [SP,#0x20+var_20]
.text:000000000002C214                 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:000000000002C218                 CMP             X11, #0
.text:000000000002C21C                 CSET            W15, NE
.text:000000000002C220                 CMP             X14, X13
.text:000000000002C224                 CSET            W13, HI
.text:000000000002C228                 CSEL            W13, W15, W13, EQ
.text:000000000002C22C                 TBNZ            W13, #0, loc_2C2B0
.text:000000000002C230                 ORR             X13, X11, X9
.text:000000000002C234                 ORR             X12, X14, X12
.text:000000000002C238                 ORR             X12, X13, X12
.text:000000000002C23C                 CBZ             X12, loc_2C26C
.text:000000000002C240                 TST             X10, X8
.text:000000000002C244                 B.LT            loc_2C278
.text:000000000002C248                 CMP             X9, X11
.text:000000000002C24C                 CSET            W12, CC
.text:000000000002C250                 CMP             X8, X10
.text:000000000002C254                 CSET            W13, LT
.text:000000000002C258                 CSEL            W12, W12, W13, EQ
.text:000000000002C25C                 TBZ             W12, #0, loc_2C29C
.text:000000000002C260                 MOV             W0, #0xFFFFFFFF
.text:000000000002C264                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C268                 RET
.text:000000000002C26C ; ---------------------------------------------------------------------------
.text:000000000002C26C loc_2C26C                               ; CODE XREF: __gttf2+58↑j
.text:000000000002C26C                 MOV             W0, WZR
.text:000000000002C270                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C274                 RET
.text:000000000002C278 ; ---------------------------------------------------------------------------
.text:000000000002C278 loc_2C278                               ; CODE XREF: __gttf2+60↑j
.text:000000000002C278                 CMP             X9, X11
.text:000000000002C27C                 CSET            W12, HI
.text:000000000002C280                 CMP             X8, X10
.text:000000000002C284                 CSET            W13, GT
.text:000000000002C288                 CSEL            W12, W12, W13, EQ
.text:000000000002C28C                 TBZ             W12, #0, loc_2C29C
.text:000000000002C290                 MOV             W0, #0xFFFFFFFF
.text:000000000002C294                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C298                 RET
.text:000000000002C29C ; ---------------------------------------------------------------------------
.text:000000000002C29C loc_2C29C                               ; CODE XREF: __gttf2+78↑j
.text:000000000002C29C                                         ; __gttf2+A8↑j
.text:000000000002C29C                 EOR             X9, X9, X11
.text:000000000002C2A0                 EOR             X8, X8, X10
.text:000000000002C2A4                 ORR             X8, X9, X8
.text:000000000002C2A8                 CMP             X8, #0
.text:000000000002C2AC                 CSET            W0, NE
.text:000000000002C2B0 loc_2C2B0                               ; CODE XREF: __gttf2+28↑j
.text:000000000002C2B0                                         ; __gttf2+48↑j
.text:000000000002C2B0                 ADD             SP, SP, #0x20 ; ' '
.text:000000000002C2B4                 RET
.text:000000000002C2B4 ; } // starts at 2C1E4
.text:000000000002C2B4 ; End of function __gttf2
.text:000000000002C2B8 ; =============== S U B R O U T I N E =======================================
.text:000000000002C2B8                 EXPORT __extendsftf2
.text:000000000002C2B8 __extendsftf2                           ; CODE XREF: .__extendsftf2+C↓j
.text:000000000002C2B8                                         ; DATA XREF: LOAD:0000000000001068↑o ...
.text:000000000002C2B8 var_10          = -0x10
.text:000000000002C2B8 ; __unwind {
.text:000000000002C2B8                 FMOV            W11, S0
.text:000000000002C2BC                 AND             W9, W11, #0x7FFFFFFF
.text:000000000002C2C0                 SUB             W8, W9, #0x800,LSL#12
.text:000000000002C2C4                 LSR             W8, W8, #0x18
.text:000000000002C2C8                 CMP             W8, #0x7E ; '~'
.text:000000000002C2CC                 AND             W8, W11, #0x80000000
.text:000000000002C2D0                 B.HI            loc_2C2F0
.text:000000000002C2D4                 MOV             X11, #0x3F80000000000000
.text:000000000002C2D8                 MOV             X10, XZR
.text:000000000002C2DC                 ADD             X9, X11, X9,LSL#25
.text:000000000002C2E0                 ORR             X8, X9, X8,LSL#32
.text:000000000002C2E4                 STP             X10, X8, [SP,#var_10]!
.text:000000000002C2E8                 LDR             Q0, [SP+0x10+var_10],#0x10
.text:000000000002C2EC                 RET
.text:000000000002C2F0 ; ---------------------------------------------------------------------------
.text:000000000002C2F0 loc_2C2F0                               ; CODE XREF: __extendsftf2+18↑j
.text:000000000002C2F0                 LSR             W10, W9, #0x17
.text:000000000002C2F4                 CMP             W10, #0xFF
.text:000000000002C2F8                 B.CC            loc_2C31C
.text:000000000002C2FC                 MOV             W9, W11
.text:000000000002C300                 LSL             X9, X9, #0x19
.text:000000000002C304                 MOV             X10, XZR
.text:000000000002C308                 ORR             X9, X9, #0x7FFF000000000000
.text:000000000002C30C                 ORR             X8, X9, X8,LSL#32
.text:000000000002C310                 STP             X10, X8, [SP,#var_10]!
.text:000000000002C314                 LDR             Q0, [SP+0x10+var_10],#0x10
.text:000000000002C318                 RET
.text:000000000002C31C ; ---------------------------------------------------------------------------
.text:000000000002C31C loc_2C31C                               ; CODE XREF: __extendsftf2+40↑j
.text:000000000002C31C                 CBZ             W9, loc_2C370
.text:000000000002C320                 CLZ             W11, W9
.text:000000000002C324                 ADD             W10, W11, #0x51 ; 'Q'
.text:000000000002C328                 NEG             X13, X10
.text:000000000002C32C                 CMP             X10, #0
.text:000000000002C330                 LSL             X14, X9, X10
.text:000000000002C334                 LSR             X13, X9, X13
.text:000000000002C338                 LSL             X9, X9, X10
.text:000000000002C33C                 SUB             X10, X10, #0x40 ; '@'
.text:000000000002C340                 CSEL            X13, XZR, X13, EQ
.text:000000000002C344                 CMP             X10, #0
.text:000000000002C348                 MOV             W12, #0x3F89
.text:000000000002C34C                 CSEL            X13, X14, X13, GE
.text:000000000002C350                 CSEL            X10, XZR, X9, GE
.text:000000000002C354                 EOR             X9, X13, #0x1000000000000
.text:000000000002C358                 SUB             W11, W12, W11
.text:000000000002C35C                 ORR             X9, X9, X11,LSL#48
.text:000000000002C360                 ORR             X8, X9, X8,LSL#32
.text:000000000002C364                 STP             X10, X8, [SP,#var_10]!
.text:000000000002C368                 LDR             Q0, [SP+0x10+var_10],#0x10
.text:000000000002C36C                 RET
.text:000000000002C370 ; ---------------------------------------------------------------------------
.text:000000000002C370 loc_2C370                               ; CODE XREF: __extendsftf2:loc_2C31C↑j
.text:000000000002C370                 MOV             X10, XZR
.text:000000000002C374                 MOV             X9, XZR
.text:000000000002C378                 ORR             X8, X9, X8,LSL#32
.text:000000000002C37C                 STP             X10, X8, [SP,#var_10]!
.text:000000000002C380                 LDR             Q0, [SP+0x10+var_10],#0x10
.text:000000000002C384                 RET
.text:000000000002C384 ; } // starts at 2C2B8
.text:000000000002C384 ; End of function __extendsftf2
.text:000000000002C388 ; =============== S U B R O U T I N E =======================================
.text:000000000002C388                 EXPORT __floatsitf
.text:000000000002C388 __floatsitf                             ; CODE XREF: .__floatsitf+C↓j
.text:000000000002C388                                         ; DATA XREF: LOAD:0000000000001038↑o ...
.text:000000000002C388 var_10          = -0x10
.text:000000000002C388 ; __unwind {
.text:000000000002C388                 CBZ             W0, loc_2C3E8
.text:000000000002C38C                 CMP             W0, #0
.text:000000000002C390                 CINV            W10, W0, MI
.text:000000000002C394                 CLZ             W11, W10
.text:000000000002C398                 MOV             W9, #0x401E
.text:000000000002C39C                 ADD             W12, W11, #0x51 ; 'Q'
.text:000000000002C3A0                 SUB             W9, W9, W11
.text:000000000002C3A4                 NEG             X11, X12
.text:000000000002C3A8                 CMP             X12, #0
.text:000000000002C3AC                 LSL             X13, X10, X12
.text:000000000002C3B0                 SUB             X14, X12, #0x40 ; '@'
.text:000000000002C3B4                 LSL             X12, X10, X12
.text:000000000002C3B8                 LSR             X10, X10, X11
.text:000000000002C3BC                 CSEL            X10, XZR, X10, EQ
.text:000000000002C3C0                 CMP             X14, #0
.text:000000000002C3C4                 CSEL            X10, X13, X10, GE
.text:000000000002C3C8                 EOR             X10, X10, #0x1000000000000
.text:000000000002C3CC                 AND             W8, W0, #0x80000000
.text:000000000002C3D0                 ADD             X9, X10, X9,LSL#48
.text:000000000002C3D4                 CSEL            X11, XZR, X12, GE
.text:000000000002C3D8                 ORR             X8, X9, X8,LSL#32
.text:000000000002C3DC                 STP             X11, X8, [SP,#var_10]!
.text:000000000002C3E0                 LDR             Q0, [SP+0x10+var_10],#0x10
.text:000000000002C3E4                 RET
.text:000000000002C3E8 ; ---------------------------------------------------------------------------
.text:000000000002C3E8 loc_2C3E8                               ; CODE XREF: __floatsitf↑j
.text:000000000002C3E8                 ADRP            X8, #xmmword_79C0@PAGE
.text:000000000002C3EC                 LDR             Q0, [X8,#xmmword_79C0@PAGEOFF]
.text:000000000002C3F0                 RET
.text:000000000002C3F0 ; } // starts at 2C388
.text:000000000002C3F0 ; End of function __floatsitf
.text:000000000002C3F4 ; =============== S U B R O U T I N E =======================================
.text:000000000002C3F4                 EXPORT __floatunditf
.text:000000000002C3F4 __floatunditf                           ; CODE XREF: .__floatunditf+C↓j
.text:000000000002C3F4                                         ; DATA XREF: LOAD:0000000000001F98↑o ...
.text:000000000002C3F4 var_10          = -0x10
.text:000000000002C3F4 ; __unwind {
.text:000000000002C3F4                 CBZ             X0, loc_2C444
.text:000000000002C3F8                 CLZ             X8, X0
.text:000000000002C3FC                 MOV             W9, #0x403E
.text:000000000002C400                 ADD             W10, W8, #0x31 ; '1'
.text:000000000002C404                 SUB             W8, W9, W8
.text:000000000002C408                 NEG             X9, X10
.text:000000000002C40C                 CMP             X10, #0
.text:000000000002C410                 SUB             X12, X10, #0x40 ; '@'
.text:000000000002C414                 LSR             X9, X0, X9
.text:000000000002C418                 LSL             X11, X0, X10
.text:000000000002C41C                 CSEL            X9, XZR, X9, EQ
.text:000000000002C420                 CMP             X12, #0
.text:000000000002C424                 CSEL            X9, X11, X9, GE
.text:000000000002C428                 LSL             X10, X0, X10
.text:000000000002C42C                 EOR             X9, X9, #0x1000000000000
.text:000000000002C430                 CSEL            X10, XZR, X10, GE
.text:000000000002C434                 ADD             X8, X9, X8,LSL#48
.text:000000000002C438                 STP             X10, X8, [SP,#var_10]!
.text:000000000002C43C                 LDR             Q0, [SP+0x10+var_10],#0x10
.text:000000000002C440                 RET
.text:000000000002C444 ; ---------------------------------------------------------------------------
.text:000000000002C444 loc_2C444                               ; CODE XREF: __floatunditf↑j
.text:000000000002C444                 ADRP            X8, #xmmword_79C0@PAGE
.text:000000000002C448                 LDR             Q0, [X8,#xmmword_79C0@PAGEOFF]
.text:000000000002C44C                 RET
.text:000000000002C44C ; } // starts at 2C3F4
.text:000000000002C44C ; End of function __floatunditf
.text:000000000002C450 ; =============== S U B R O U T I N E =======================================
.text:000000000002C450                 EXPORT __trunctfdf2
.text:000000000002C450 __trunctfdf2                            ; CODE XREF: .__trunctfdf2+C↓j
.text:000000000002C450                                         ; DATA XREF: LOAD:00000000000010C8↑o ...
.text:000000000002C450 var_10          = -0x10
.text:000000000002C450 ; __unwind {
.text:000000000002C450                 STR             Q0, [SP,#var_10]!
.text:000000000002C454                 LDP             X9, X8, [SP,#0x10+var_10]
.text:000000000002C458                 MOV             X11, #0xC3FF000000000000
.text:000000000002C45C                 MOV             X12, #0xBC01000000000000
.text:000000000002C460                 AND             X10, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002C464                 ADD             X11, X10, X11
.text:000000000002C468                 ADD             X12, X10, X12
.text:000000000002C46C                 CMP             X11, X12
.text:000000000002C470                 B.CS            loc_2C49C
.text:000000000002C474                 MOV             X11, #1
.text:000000000002C478                 AND             X10, X9, #0xFFFFFFFFFFFFFFF
.text:000000000002C47C                 MOVK            X11, #0x800,LSL#48
.text:000000000002C480                 CMP             X10, X11
.text:000000000002C484                 EXTR            X9, X8, X9, #0x3C ; '<'
.text:000000000002C488                 B.CC            loc_2C4C8
.text:000000000002C48C                 MOV             X10, #0x4000000000000001
.text:000000000002C494                 ADD             X9, X9, X10
.text:000000000002C498                 B               loc_2C5C0
.text:000000000002C49C ; ---------------------------------------------------------------------------
.text:000000000002C49C loc_2C49C                               ; CODE XREF: __trunctfdf2+20↑j
.text:000000000002C49C                 CMP             X9, #0
.text:000000000002C4A0                 MOV             X11, #0x7FFF000000000000
.text:000000000002C4A4                 CSET            W12, EQ
.text:000000000002C4A8                 CMP             X10, X11
.text:000000000002C4AC                 CSET            W11, CC
.text:000000000002C4B0                 CSEL            W11, W12, W11, EQ
.text:000000000002C4B4                 TBNZ            W11, #0, loc_2C4E4
.text:000000000002C4B8                 EXTR            X10, X8, X9, #0x3C ; '<'
.text:000000000002C4BC                 MOV             X9, #0x7FF8000000000000
.text:000000000002C4C0                 BFXIL           X9, X10, #0, #0x33 ; '3'
.text:000000000002C4C4                 B               loc_2C5C0
.text:000000000002C4C8 ; ---------------------------------------------------------------------------
.text:000000000002C4C8 loc_2C4C8                               ; CODE XREF: __trunctfdf2+38↑j
.text:000000000002C4C8                 MOV             X11, #0x4000000000000000
.text:000000000002C4CC                 EOR             X10, X10, #0x800000000000000
.text:000000000002C4D0                 ADD             X9, X9, X11
.text:000000000002C4D4                 CBNZ            X10, loc_2C5C0
.text:000000000002C4D8 loc_2C4D8                               ; CODE XREF: __trunctfdf2+16C↓j
.text:000000000002C4D8                 AND             X10, X9, #1
.text:000000000002C4DC                 ADD             X9, X10, X9
.text:000000000002C4E0                 B               loc_2C5C0
.text:000000000002C4E4 ; ---------------------------------------------------------------------------
.text:000000000002C4E4 loc_2C4E4                               ; CODE XREF: __trunctfdf2+64↑j
.text:000000000002C4E4                 MOV             X11, #0x43FEFFFFFFFFFFFF
.text:000000000002C4E8                 CMP             X10, X11
.text:000000000002C4EC                 B.LS            loc_2C4F8
.text:000000000002C4F0                 MOV             X9, #0x7FF0000000000000
.text:000000000002C4F4                 B               loc_2C5C0
.text:000000000002C4F8 ; ---------------------------------------------------------------------------
.text:000000000002C4F8 loc_2C4F8                               ; CODE XREF: __trunctfdf2+9C↑j
.text:000000000002C4F8                 LSR             X10, X10, #0x30 ; '0'
.text:000000000002C4FC                 MOV             W11, #0x3C00
.text:000000000002C500                 SUB             W10, W11, W10
.text:000000000002C504                 CMP             W10, #0x6F ; 'o'
.text:000000000002C508                 B.LE            loc_2C514
.text:000000000002C50C                 MOV             X9, XZR
.text:000000000002C510                 B               loc_2C5C0
.text:000000000002C514 ; ---------------------------------------------------------------------------
.text:000000000002C514 loc_2C514                               ; CODE XREF: __trunctfdf2+B8↑j
.text:000000000002C514                 MOV             W13, #0x7F
.text:000000000002C518                 ADD             W12, W10, #1
.text:000000000002C51C                 SUB             W10, W13, W10
.text:000000000002C520                 MOV             X11, #0x1000000000000
.text:000000000002C524                 NEG             X14, X10
.text:000000000002C528                 BFXIL           X11, X8, #0, #0x30 ; '0'
.text:000000000002C52C                 CMP             X10, #0
.text:000000000002C530                 SUB             X15, X10, #0x40 ; '@'
.text:000000000002C534                 LSR             X14, X9, X14
.text:000000000002C538                 CSEL            X14, XZR, X14, EQ
.text:000000000002C53C                 CMP             X15, #0
.text:000000000002C540                 LSL             X15, X11, X10
.text:000000000002C544                 ORR             X14, X14, X15
.text:000000000002C548                 LSL             X15, X9, X10
.text:000000000002C54C                 LSL             X10, X9, X10
.text:000000000002C550                 CSEL            X10, X10, X14, GE
.text:000000000002C554                 CSEL            X15, XZR, X15, GE
.text:000000000002C558                 ORR             X10, X15, X10
.text:000000000002C55C                 NEG             X13, X12
.text:000000000002C560                 CMP             X10, #0
.text:000000000002C564                 LSL             X13, X11, X13
.text:000000000002C568                 CSET            W10, NE
.text:000000000002C56C                 CMP             X12, #0
.text:000000000002C570                 LSR             X9, X9, X12
.text:000000000002C574                 SUB             X14, X12, #0x40 ; '@'
.text:000000000002C578                 LSR             X15, X11, X12
.text:000000000002C57C                 LSR             X11, X11, X12
.text:000000000002C580                 CSEL            X12, XZR, X13, EQ
.text:000000000002C584                 CMP             X14, #0
.text:000000000002C588                 ORR             X9, X9, X12
.text:000000000002C58C                 CSEL            X9, X15, X9, GE
.text:000000000002C590                 AND             X12, X9, #0xFFFFFFFFFFFFFFF
.text:000000000002C594                 ORR             X10, X12, X10
.text:000000000002C598                 MOV             X12, #1
.text:000000000002C59C                 CSEL            X11, XZR, X11, GE
.text:000000000002C5A0                 MOVK            X12, #0x800,LSL#48
.text:000000000002C5A4                 CMP             X10, X12
.text:000000000002C5A8                 EXTR            X9, X11, X9, #0x3C ; '<'
.text:000000000002C5AC                 B.CC            loc_2C5B8
.text:000000000002C5B0                 ADD             X9, X9, #1
.text:000000000002C5B4                 B               loc_2C5C0
.text:000000000002C5B8 ; ---------------------------------------------------------------------------
.text:000000000002C5B8 loc_2C5B8                               ; CODE XREF: __trunctfdf2+15C↑j
.text:000000000002C5B8                 EOR             X10, X10, #0x800000000000000
.text:000000000002C5BC                 CBZ             X10, loc_2C4D8
.text:000000000002C5C0 loc_2C5C0                               ; CODE XREF: __trunctfdf2+48↑j
.text:000000000002C5C0                                         ; __trunctfdf2+74↑j ...
.text:000000000002C5C0                 AND             X8, X8, #0x8000000000000000
.text:000000000002C5C4                 ORR             X8, X9, X8
.text:000000000002C5C8                 FMOV            D0, X8
.text:000000000002C5CC                 ADD             SP, SP, #0x10
.text:000000000002C5D0                 RET
.text:000000000002C5D0 ; } // starts at 2C450
.text:000000000002C5D0 ; End of function __trunctfdf2
.text:000000000002C5D4 ; =============== S U B R O U T I N E =======================================
.text:000000000002C5D4                 EXPORT __trunctfsf2
.text:000000000002C5D4 __trunctfsf2                            ; CODE XREF: .__trunctfsf2+C↓j
.text:000000000002C5D4                                         ; DATA XREF: LOAD:0000000000001AB8↑o ...
.text:000000000002C5D4 var_10          = -0x10
.text:000000000002C5D4 ; __unwind {
.text:000000000002C5D4                 STR             Q0, [SP,#var_10]!
.text:000000000002C5D8                 LDP             X9, X8, [SP,#0x10+var_10]
.text:000000000002C5DC                 MOV             X11, #0xC07F000000000000
.text:000000000002C5E0                 MOV             X12, #0xBF81000000000000
.text:000000000002C5E4                 AND             X10, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002C5E8                 ADD             X11, X10, X11
.text:000000000002C5EC                 ADD             X12, X10, X12
.text:000000000002C5F0                 CMP             X11, X12
.text:000000000002C5F4                 B.CS            loc_2C634
.text:000000000002C5F8                 CMP             X9, #0
.text:000000000002C5FC                 UBFX            X11, X8, #0x18, #1
.text:000000000002C600                 AND             X10, X8, #0x1FFFFFF
.text:000000000002C604                 MOV             W12, #0x1000000
.text:000000000002C608                 CSET            W13, EQ
.text:000000000002C60C                 CMP             X11, #0
.text:000000000002C610                 CSET            W11, EQ
.text:000000000002C614                 CMP             X10, X12
.text:000000000002C618                 CSEL            W12, W13, W11, EQ
.text:000000000002C61C                 LSR             X11, X8, #0x19
.text:000000000002C620                 TBNZ            W12, #0, loc_2C65C
.text:000000000002C624                 MOV             W9, #0x40000001
.text:000000000002C62C                 ADD             W9, W11, W9
.text:000000000002C630                 B               loc_2C770
.text:000000000002C634 ; ---------------------------------------------------------------------------
.text:000000000002C634 loc_2C634                               ; CODE XREF: __trunctfsf2+20↑j
.text:000000000002C634                 CMP             X9, #0
.text:000000000002C638                 MOV             X11, #0x7FFF000000000000
.text:000000000002C63C                 CSET            W12, EQ
.text:000000000002C640                 CMP             X10, X11
.text:000000000002C644                 CSET            W11, CC
.text:000000000002C648                 CSEL            W11, W12, W11, EQ
.text:000000000002C64C                 TBNZ            W11, #0, loc_2C67C
.text:000000000002C650                 UBFX            X9, X8, #0x19, #0x16
.text:000000000002C654                 ORR             W9, W9, #0x7FC00000
.text:000000000002C658                 B               loc_2C770
.text:000000000002C65C ; ---------------------------------------------------------------------------
.text:000000000002C65C loc_2C65C                               ; CODE XREF: __trunctfsf2+4C↑j
.text:000000000002C65C                 MOV             W12, #0x40000000
.text:000000000002C660                 EOR             X10, X10, #0x1000000
.text:000000000002C664                 ORR             X10, X9, X10
.text:000000000002C668                 ADD             W9, W11, W12
.text:000000000002C66C                 CBNZ            X10, loc_2C770
.text:000000000002C670 loc_2C670                               ; CODE XREF: __trunctfsf2+198↓j
.text:000000000002C670                 AND             W10, W9, #1
.text:000000000002C674                 ADD             W9, W10, W9
.text:000000000002C678                 B               loc_2C770
.text:000000000002C67C ; ---------------------------------------------------------------------------
.text:000000000002C67C loc_2C67C                               ; CODE XREF: __trunctfsf2+78↑j
.text:000000000002C67C                 MOV             X11, #0x407EFFFFFFFFFFFF
.text:000000000002C680                 CMP             X10, X11
.text:000000000002C684                 B.LS            loc_2C690
.text:000000000002C688                 MOV             W9, #0x7F800000
.text:000000000002C68C                 B               loc_2C770
.text:000000000002C690 ; ---------------------------------------------------------------------------
.text:000000000002C690 loc_2C690                               ; CODE XREF: __trunctfsf2+B0↑j
.text:000000000002C690                 LSR             X10, X10, #0x30 ; '0'
.text:000000000002C694                 MOV             W11, #0x3F80
.text:000000000002C698                 SUB             W10, W11, W10
.text:000000000002C69C                 CMP             W10, #0x6F ; 'o'
.text:000000000002C6A0                 B.LE            loc_2C6AC
.text:000000000002C6A4                 MOV             W9, WZR
.text:000000000002C6A8                 B               loc_2C770
.text:000000000002C6AC ; ---------------------------------------------------------------------------
.text:000000000002C6AC loc_2C6AC                               ; CODE XREF: __trunctfsf2+CC↑j
.text:000000000002C6AC                 MOV             W13, #0x7F
.text:000000000002C6B0                 ADD             W12, W10, #1
.text:000000000002C6B4                 SUB             W10, W13, W10
.text:000000000002C6B8                 MOV             X11, #0x1000000000000
.text:000000000002C6BC                 NEG             X13, X10
.text:000000000002C6C0                 BFXIL           X11, X8, #0, #0x30 ; '0'
.text:000000000002C6C4                 CMP             X10, #0
.text:000000000002C6C8                 SUB             X15, X10, #0x40 ; '@'
.text:000000000002C6CC                 LSR             X13, X9, X13
.text:000000000002C6D0                 CSEL            X13, XZR, X13, EQ
.text:000000000002C6D4                 CMP             X15, #0
.text:000000000002C6D8                 LSL             X15, X11, X10
.text:000000000002C6DC                 ORR             X13, X13, X15
.text:000000000002C6E0                 LSL             X15, X9, X10
.text:000000000002C6E4                 LSL             X10, X9, X10
.text:000000000002C6E8                 CSEL            X13, X15, X13, GE
.text:000000000002C6EC                 CSEL            X10, XZR, X10, GE
.text:000000000002C6F0                 ORR             X10, X10, X13
.text:000000000002C6F4                 NEG             X15, X12
.text:000000000002C6F8                 CMP             X10, #0
.text:000000000002C6FC                 LSL             X15, X11, X15
.text:000000000002C700                 CSET            W16, NE
.text:000000000002C704                 CMP             X12, #0
.text:000000000002C708                 LSR             X9, X9, X12
.text:000000000002C70C                 LSR             X13, X11, X12
.text:000000000002C710                 LSR             X11, X11, X12
.text:000000000002C714                 SUB             X10, X12, #0x40 ; '@'
.text:000000000002C718                 CSEL            X12, XZR, X15, EQ
.text:000000000002C71C                 CMP             X10, #0
.text:000000000002C720                 ORR             X9, X9, X12
.text:000000000002C724                 CSEL            X9, X13, X9, GE
.text:000000000002C728                 CSEL            X12, XZR, X11, GE
.text:000000000002C72C                 ORR             X11, X9, X16
.text:000000000002C730                 UBFX            X13, X12, #0x18, #1
.text:000000000002C734                 CMP             X11, #0
.text:000000000002C738                 MOV             W14, #0x1000000
.text:000000000002C73C                 AND             X10, X12, #0x1FFFFFF
.text:000000000002C740                 CSET            W9, EQ
.text:000000000002C744                 CMP             X13, #0
.text:000000000002C748                 CSET            W13, EQ
.text:000000000002C74C                 CMP             X10, X14
.text:000000000002C750                 CSEL            W13, W9, W13, EQ
.text:000000000002C754                 LSR             X9, X12, #0x19
.text:000000000002C758                 TBNZ            W13, #0, loc_2C764
.text:000000000002C75C                 ADD             W9, W9, #1
.text:000000000002C760                 B               loc_2C770
.text:000000000002C764 ; ---------------------------------------------------------------------------
.text:000000000002C764 loc_2C764                               ; CODE XREF: __trunctfsf2+184↑j
.text:000000000002C764                 EOR             X10, X10, #0x1000000
.text:000000000002C768                 ORR             X10, X11, X10
.text:000000000002C76C                 CBZ             X10, loc_2C670
.text:000000000002C770 loc_2C770                               ; CODE XREF: __trunctfsf2+5C↑j
.text:000000000002C770                                         ; __trunctfsf2+84↑j ...
.text:000000000002C770                 LSR             X8, X8, #0x20 ; ' '
.text:000000000002C774                 AND             W8, W8, #0x80000000
.text:000000000002C778                 ORR             W8, W9, W8
.text:000000000002C77C                 FMOV            S0, W8
.text:000000000002C780                 ADD             SP, SP, #0x10
.text:000000000002C784                 RET
.text:000000000002C784 ; } // starts at 2C5D4
.text:000000000002C784 ; End of function __trunctfsf2
.text:000000000002C788 ; =============== S U B R O U T I N E =======================================
.text:000000000002C788                 EXPORT __divtf3
.text:000000000002C788 __divtf3                                ; CODE XREF: .__divtf3+C↓j
.text:000000000002C788                                         ; DATA XREF: LOAD:0000000000001B18↑o ...
.text:000000000002C788 var_E0          = -0xE0
.text:000000000002C788 var_D0          = -0xD0
.text:000000000002C788 var_C0          = -0xC0
.text:000000000002C788 var_B0          = -0xB0
.text:000000000002C788 var_A0          = -0xA0
.text:000000000002C788 var_90          = -0x90
.text:000000000002C788 var_80          = -0x80
.text:000000000002C788 var_70          = -0x70
.text:000000000002C788 var_60          = -0x60
.text:000000000002C788 var_50          = -0x50
.text:000000000002C788 var_40          = -0x40
.text:000000000002C788 var_30          = -0x30
.text:000000000002C788 var_20          = -0x20
.text:000000000002C788 var_10          = -0x10
.text:000000000002C788 ; __unwind {
.text:000000000002C788                 SUB             SP, SP, #0xE0
.text:000000000002C78C                 STR             X23, [SP,#0xE0+var_30]
.text:000000000002C790                 STP             X22, X21, [SP,#0xE0+var_20]
.text:000000000002C794                 STP             X20, X19, [SP,#0xE0+var_10]
.text:000000000002C798                 STP             Q1, Q0, [SP,#0xE0+var_50]
.text:000000000002C79C                 LDP             X11, X12, [SP,#0xE0+var_40]
.text:000000000002C7A0                 LDP             X9, X17, [SP,#0xE0+var_50]
.text:000000000002C7A4                 MOV             W10, #0x7FFD
.text:000000000002C7A8                 UBFX            X15, X12, #0x30, #0xF ; '0'
.text:000000000002C7AC                 EOR             X8, X17, X12
.text:000000000002C7B0                 SUB             W14, W15, #1
.text:000000000002C7B4                 AND             X13, X12, #0xFFFFFFFFFFFF
.text:000000000002C7B8                 UBFX            X16, X17, #0x30, #0xF ; '0'
.text:000000000002C7BC                 AND             X8, X8, #0x8000000000000000
.text:000000000002C7C0                 CMP             W14, W10
.text:000000000002C7C4                 AND             X10, X17, #0xFFFFFFFFFFFF
.text:000000000002C7C8                 B.HI            loc_2CAD4
.text:000000000002C7CC                 SUB             W14, W16, #1
.text:000000000002C7D0                 MOV             W0, #0x7FFE
.text:000000000002C7D4                 CMP             W14, W0
.text:000000000002C7D8                 B.CS            loc_2CAD4
.text:000000000002C7DC                 MOV             W14, WZR
.text:000000000002C7E0 loc_2C7E0                               ; CODE XREF: __divtf3+564↓j
.text:000000000002C7E0                                         ; __divtf3+59C↓j ...
.text:000000000002C7E0                 SUB             W15, W15, W16
.text:000000000002C7E4                 MOV             X16, #0xF9DE6484
.text:000000000002C7EC                 ORR             X12, X10, #0x1000000000000
.text:000000000002C7F0                 MOVK            X16, #0xF333,LSL#32
.text:000000000002C7F4                 MOVK            X16, #0x7504,LSL#48
.text:000000000002C7F8                 LSR             X2, X13, #0x1E
.text:000000000002C7FC                 EXTR            X5, X12, X9, #0x31 ; '1'
.text:000000000002C800                 EXTR            X13, X13, X11, #0x3E ; '>'
.text:000000000002C804                 AND             X2, X2, #0xFFFFFFFF
.text:000000000002C808                 SUB             X16, X16, X5
.text:000000000002C80C                 AND             X7, X13, #0xFFFFFFFF
.text:000000000002C810                 ORR             X13, X2, #0x40000
.text:000000000002C814                 UMULH           X2, X5, X16
.text:000000000002C818                 NEG             X20, X2
.text:000000000002C81C                 MNEG            X2, X2, X16
.text:000000000002C820                 UMULH           X16, X20, X16
.text:000000000002C824                 EXTR            X16, X16, X2, #0x3F ; '?'
.text:000000000002C828                 UMULH           X2, X16, X5
.text:000000000002C82C                 NEG             X20, X2
.text:000000000002C830                 MNEG            X2, X2, X16
.text:000000000002C834                 UMULH           X16, X16, X20
.text:000000000002C838                 EXTR            X16, X16, X2, #0x3F ; '?'
.text:000000000002C83C                 UMULH           X2, X16, X5
.text:000000000002C840                 NEG             X20, X2
.text:000000000002C844                 MNEG            X2, X2, X16
.text:000000000002C848                 UMULH           X16, X16, X20
.text:000000000002C84C                 EXTR            X16, X16, X2, #0x3F ; '?'
.text:000000000002C850                 UMULH           X2, X16, X5
.text:000000000002C854                 NEG             X20, X2
.text:000000000002C858                 MNEG            X2, X2, X16
.text:000000000002C85C                 UMULH           X16, X16, X20
.text:000000000002C860                 EXTR            X16, X16, X2, #0x3F ; '?'
.text:000000000002C864                 UMULH           X2, X16, X5
.text:000000000002C868                 AND             X19, X5, #0xFFFFFFFF
.text:000000000002C86C                 NEG             X5, X2
.text:000000000002C870                 MNEG            X2, X2, X16
.text:000000000002C874                 UMULH           X16, X16, X5
.text:000000000002C878                 EXTR            X16, X16, X2, #0x3F ; '?'
.text:000000000002C87C                 SUB             X16, X16, #1
.text:000000000002C880                 UBFX            X6, X12, #0x11, #0x20 ; ' '
.text:000000000002C884                 LSR             X2, X16, #0x20 ; ' '
.text:000000000002C888                 AND             X16, X16, #0xFFFFFFFF
.text:000000000002C88C                 MUL             X5, X2, X19
.text:000000000002C890                 MUL             X20, X16, X6
.text:000000000002C894                 ADDS            X5, X20, X5
.text:000000000002C898                 MUL             X19, X16, X19
.text:000000000002C89C                 ADCS            X20, XZR, XZR
.text:000000000002C8A0                 UBFX            X17, X9, #0x11, #0x20 ; ' '
.text:000000000002C8A4                 UBFIZ           X0, X9, #0xF, #0x11
.text:000000000002C8A8                 ADDS            X19, X19, X5,LSL#32
.text:000000000002C8AC                 MUL             X21, X2, X0
.text:000000000002C8B0                 MUL             X22, X16, X17
.text:000000000002C8B4                 EXTR            X5, X20, X5, #0x20 ; ' '
.text:000000000002C8B8                 ADCS            X20, XZR, XZR
.text:000000000002C8BC                 MADD            X5, X2, X6, X5
.text:000000000002C8C0                 ADDS            X6, X22, X21
.text:000000000002C8C4                 MUL             X0, X16, X0
.text:000000000002C8C8                 ADD             X5, X20, X5
.text:000000000002C8CC                 ADCS            X20, XZR, XZR
.text:000000000002C8D0                 CMN             X0, X6,LSL#32
.text:000000000002C8D4                 EXTR            X0, X20, X6, #0x20 ; ' '
.text:000000000002C8D8                 ADCS            X6, XZR, XZR
.text:000000000002C8DC                 MADD            X17, X2, X17, X0
.text:000000000002C8E0                 ADD             X17, X6, X17
.text:000000000002C8E4                 ADDS            X17, X19, X17
.text:000000000002C8E8                 ADCS            X0, X5, XZR
.text:000000000002C8EC                 NEGS            X17, X17
.text:000000000002C8F0                 NGCS            X0, X0
.text:000000000002C8F4                 LSR             X6, X0, #0x20 ; ' '
.text:000000000002C8F8                 AND             X0, X0, #0xFFFFFFFF
.text:000000000002C8FC                 LSR             X5, X17, #0x20 ; ' '
.text:000000000002C900                 AND             X17, X17, #0xFFFFFFFF
.text:000000000002C904                 MUL             X21, X0, X2
.text:000000000002C908                 MUL             X22, X16, X6
.text:000000000002C90C                 MUL             X19, X17, X2
.text:000000000002C910                 MUL             X20, X5, X16
.text:000000000002C914                 MUL             X17, X17, X16
.text:000000000002C918                 MUL             X16, X0, X16
.text:000000000002C91C                 ADDS            X0, X21, X22
.text:000000000002C920                 ADCS            X21, XZR, XZR
.text:000000000002C924                 ADDS            X19, X20, X19
.text:000000000002C928                 ADCS            X20, XZR, XZR
.text:000000000002C92C                 CMN             X17, X19,LSL#32
.text:000000000002C930                 EXTR            X17, X20, X19, #0x20 ; ' '
.text:000000000002C934                 ADCS            X19, XZR, XZR
.text:000000000002C938                 EXTR            X21, X21, X0, #0x20 ; ' '
.text:000000000002C93C                 MADD            X17, X5, X2, X17
.text:000000000002C940                 ADDS            X16, X16, X0,LSL#32
.text:000000000002C944                 MADD            X6, X2, X6, X21
.text:000000000002C948                 ADD             X17, X19, X17
.text:000000000002C94C                 ADCS            X0, XZR, XZR
.text:000000000002C950                 ADD             X0, X0, X6
.text:000000000002C954                 ADDS            X16, X16, X17
.text:000000000002C958                 ADCS            X17, X0, XZR
.text:000000000002C95C                 SUBS            X16, X16, #2
.text:000000000002C960                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:000000000002C964                 UBFX            X3, X11, #0x1E, #0x20 ; ' '
.text:000000000002C968                 UBFIZ           X4, X11, #2, #0x1E
.text:000000000002C96C                 LSR             X0, X16, #0x20 ; ' '
.text:000000000002C970                 AND             X16, X16, #0xFFFFFFFF
.text:000000000002C974                 ADCS            X17, X17, X1
.text:000000000002C978                 MUL             X2, X0, X13
.text:000000000002C97C                 MUL             X5, X16, X13
.text:000000000002C980                 MUL             X6, X0, X7
.text:000000000002C984                 MUL             X19, X16, X7
.text:000000000002C988                 MUL             X20, X0, X3
.text:000000000002C98C                 MUL             X16, X16, X3
.text:000000000002C990                 MUL             X0, X0, X4
.text:000000000002C994                 ADDS            X16, X0, X16
.text:000000000002C998                 ADCS            X0, XZR, XZR
.text:000000000002C99C                 LSR             X1, X17, #0x20 ; ' '
.text:000000000002C9A0                 AND             X17, X17, #0xFFFFFFFF
.text:000000000002C9A4                 ADDS            X19, X20, X19
.text:000000000002C9A8                 MUL             X21, X17, X13
.text:000000000002C9AC                 MUL             X22, X7, X1
.text:000000000002C9B0                 MUL             X7, X17, X7
.text:000000000002C9B4                 MUL             X23, X3, X1
.text:000000000002C9B8                 MUL             X3, X17, X3
.text:000000000002C9BC                 MUL             X17, X17, X4
.text:000000000002C9C0                 EXTR            X16, X0, X16, #0x20 ; ' '
.text:000000000002C9C4                 ADCS            X0, XZR, XZR
.text:000000000002C9C8                 ADDS            X17, X19, X17
.text:000000000002C9CC                 MUL             X4, X4, X1
.text:000000000002C9D0                 ADCS            X0, X0, XZR
.text:000000000002C9D4                 ADDS            X4, X4, X5
.text:000000000002C9D8                 ADCS            X5, XZR, XZR
.text:000000000002C9DC                 ADDS            X4, X4, X6
.text:000000000002C9E0                 ADCS            X5, X5, XZR
.text:000000000002C9E4                 ADDS            X3, X4, X3
.text:000000000002C9E8                 ADCS            X4, X5, XZR
.text:000000000002C9EC                 ADDS            X5, X21, X22
.text:000000000002C9F0                 ADCS            X19, XZR, XZR
.text:000000000002C9F4                 ADDS            X16, X17, X16
.text:000000000002C9F8                 EXTR            X17, X19, X5, #0x20 ; ' '
.text:000000000002C9FC                 ADCS            X19, XZR, XZR
.text:000000000002CA00                 CMN             X16, X3,LSL#32
.text:000000000002CA04                 ADCS            X16, X19, XZR
.text:000000000002CA08                 LSR             X6, X4, #0x20 ; ' '
.text:000000000002CA0C                 EXTR            X4, X4, X3, #0x20 ; ' '
.text:000000000002CA10                 ADDS            X3, X7, X23
.text:000000000002CA14                 ADCS            X7, XZR, XZR
.text:000000000002CA18                 ADDS            X2, X3, X2
.text:000000000002CA1C                 ADCS            X3, X7, XZR
.text:000000000002CA20                 MADD            X13, X13, X1, X3
.text:000000000002CA24                 ADDS            X1, X2, X5,LSL#32
.text:000000000002CA28                 ADCS            X13, X13, X17
.text:000000000002CA2C                 ADDS            X17, X1, X0
.text:000000000002CA30                 ADCS            X13, X13, XZR
.text:000000000002CA34                 ADDS            X17, X17, X4
.text:000000000002CA38                 ADCS            X13, X13, X6
.text:000000000002CA3C                 ADDS            X17, X17, X16
.text:000000000002CA40                 ADCS            X16, X13, XZR
.text:000000000002CA44                 LSR             X0, X16, #0x31 ; '1'
.text:000000000002CA48                 ADD             W13, W14, W15
.text:000000000002CA4C                 CBNZ            X0, loc_2CB04
.text:000000000002CA50                 EXTR            X4, X16, X17, #0x20 ; ' '
.text:000000000002CA54                 LSR             X14, X16, #0x20 ; ' '
.text:000000000002CA58                 AND             X0, X10, #0xFFFFFFFF
.text:000000000002CA5C                 LSR             X1, X9, #0x20 ; ' '
.text:000000000002CA60                 AND             X2, X9, #0xFFFFFFFF
.text:000000000002CA64                 AND             X6, X17, #0xFFFFFFFF
.text:000000000002CA68                 AND             X4, X4, #0xFFFFFFFF
.text:000000000002CA6C                 LSR             X15, X12, #0x20 ; ' '
.text:000000000002CA70                 AND             X3, X16, #0xFFFFFFFF
.text:000000000002CA74                 MUL             W14, W9, W14
.text:000000000002CA78                 MUL             X0, X6, X0
.text:000000000002CA7C                 MUL             X7, X6, X1
.text:000000000002CA80                 MUL             X19, X4, X2
.text:000000000002CA84                 MADD            W14, W17, W15, W14
.text:000000000002CA88                 MADD            X15, X3, X2, X0
.text:000000000002CA8C                 ADDS            X0, X19, X7
.text:000000000002CA90                 LSR             X5, X17, #0x20 ; ' '
.text:000000000002CA94                 MUL             X6, X6, X2
.text:000000000002CA98                 MADD            W14, W16, W1, W14
.text:000000000002CA9C                 MADD            X15, X4, X1, X15
.text:000000000002CAA0                 ADCS            X1, XZR, XZR
.text:000000000002CAA4                 LSL             X11, X11, #0x31 ; '1'
.text:000000000002CAA8                 MADD            W10, W5, W10, W14
.text:000000000002CAAC                 EXTR            X14, X1, X0, #0x20 ; ' '
.text:000000000002CAB0                 NEGS            X1, X6
.text:000000000002CAB4                 ADD             X14, X15, X14
.text:000000000002CAB8                 SBCS            X11, X11, XZR
.text:000000000002CABC                 ADD             X14, X14, X10,LSL#32
.text:000000000002CAC0                 SUBS            X10, X1, X0,LSL#32
.text:000000000002CAC4                 SBCS            X11, X11, XZR
.text:000000000002CAC8                 SUB             X11, X11, X14
.text:000000000002CACC                 SUB             W13, W13, #1
.text:000000000002CAD0                 B               loc_2CB88
.text:000000000002CAD4 ; ---------------------------------------------------------------------------
.text:000000000002CAD4 loc_2CAD4                               ; CODE XREF: __divtf3+40↑j
.text:000000000002CAD4                                         ; __divtf3+50↑j
.text:000000000002CAD4                 AND             X14, X12, #0x7FFFFFFFFFFFFFFF
.text:000000000002CAD8                 CMP             X11, #0
.text:000000000002CADC                 MOV             X0, #0x7FFF000000000000
.text:000000000002CAE0                 CSET            W1, EQ
.text:000000000002CAE4                 CMP             X14, X0
.text:000000000002CAE8                 CSET            W2, CC
.text:000000000002CAEC                 CSEL            W1, W1, W2, EQ
.text:000000000002CAF0                 TBNZ            W1, #0, loc_2CBE8
.text:000000000002CAF4                 ORR             X8, X12, #0x800000000000
.text:000000000002CAF8                 STP             X11, X8, [SP,#0xE0+var_E0]
.text:000000000002CAFC                 LDR             Q0, [SP,#0xE0+var_E0]
.text:000000000002CB00                 B               loc_2CC68
.text:000000000002CB04 ; ---------------------------------------------------------------------------
.text:000000000002CB04 loc_2CB04                               ; CODE XREF: __divtf3+2C4↑j
.text:000000000002CB04                 LSR             X14, X17, #1
.text:000000000002CB08                 EXTR            X15, X16, X17, #0x21 ; '!'
.text:000000000002CB0C                 EXTR            X17, X16, X17, #1
.text:000000000002CB10                 LSR             X0, X16, #0x21 ; '!'
.text:000000000002CB14                 LSR             X4, X9, #0x20 ; ' '
.text:000000000002CB18                 AND             X5, X9, #0xFFFFFFFF
.text:000000000002CB1C                 AND             X6, X15, #0xFFFFFFFF
.text:000000000002CB20                 AND             X7, X17, #0xFFFFFFFF
.text:000000000002CB24                 UBFX            X1, X16, #1, #0x20 ; ' '
.text:000000000002CB28                 LSR             X2, X12, #0x20 ; ' '
.text:000000000002CB2C                 MUL             W0, W9, W0
.text:000000000002CB30                 MUL             X19, X6, X5
.text:000000000002CB34                 MUL             X20, X7, X4
.text:000000000002CB38                 LSR             X16, X16, #1
.text:000000000002CB3C                 MUL             X1, X1, X5
.text:000000000002CB40                 MADD            W14, W14, W2, W0
.text:000000000002CB44                 ADDS            X0, X20, X19
.text:000000000002CB48                 AND             X3, X10, #0xFFFFFFFF
.text:000000000002CB4C                 MUL             X5, X7, X5
.text:000000000002CB50                 MADD            X1, X6, X4, X1
.text:000000000002CB54                 MADD            W14, W16, W4, W14
.text:000000000002CB58                 ADCS            X2, XZR, XZR
.text:000000000002CB5C                 LSL             X11, X11, #0x30 ; '0'
.text:000000000002CB60                 MADD            X1, X7, X3, X1
.text:000000000002CB64                 MADD            W10, W15, W10, W14
.text:000000000002CB68                 EXTR            X14, X2, X0, #0x20 ; ' '
.text:000000000002CB6C                 NEGS            X15, X5
.text:000000000002CB70                 ADD             X14, X1, X14
.text:000000000002CB74                 SBCS            X11, X11, XZR
.text:000000000002CB78                 ADD             X14, X14, X10,LSL#32
.text:000000000002CB7C                 SUBS            X10, X15, X0,LSL#32
.text:000000000002CB80                 SBCS            X11, X11, XZR
.text:000000000002CB84                 SUB             X11, X11, X14
.text:000000000002CB88 loc_2CB88                               ; CODE XREF: __divtf3+348↑j
.text:000000000002CB88                 MOV             W14, #0x3FFF
.text:000000000002CB8C                 ADD             W13, W13, W14
.text:000000000002CB90                 MOV             W14, #0x7FFF
.text:000000000002CB94                 CMP             W13, W14
.text:000000000002CB98                 B.LT            loc_2CBAC
.text:000000000002CB9C                 ORR             X8, X8, #0x7FFF000000000000
.text:000000000002CBA0                 STP             XZR, X8, [SP,#0xE0+var_90]
.text:000000000002CBA4                 LDR             Q0, [SP,#0xE0+var_90]
.text:000000000002CBA8                 B               loc_2CC68
.text:000000000002CBAC ; ---------------------------------------------------------------------------
.text:000000000002CBAC loc_2CBAC                               ; CODE XREF: __divtf3+410↑j
.text:000000000002CBAC                 CMP             W13, #0
.text:000000000002CBB0                 B.LE            loc_2CC38
.text:000000000002CBB4                 EXTR            X11, X11, X10, #0x3F ; '?'
.text:000000000002CBB8                 CMP             X9, X10,LSL#1
.text:000000000002CBBC                 CSET            W9, LS
.text:000000000002CBC0                 CMP             X11, X12
.text:000000000002CBC4                 CSET            W10, CS
.text:000000000002CBC8                 CSEL            W9, W9, W10, EQ
.text:000000000002CBCC                 BFI             X16, X13, #0x30, #0x10 ; '0'
.text:000000000002CBD0                 ADDS            X9, X17, X9
.text:000000000002CBD4                 ADCS            X10, X16, XZR
.text:000000000002CBD8                 ORR             X8, X10, X8
.text:000000000002CBDC                 STP             X9, X8, [SP,#0xE0+var_70]
.text:000000000002CBE0                 LDR             Q0, [SP,#0xE0+var_70]
.text:000000000002CBE4                 B               loc_2CC68
.text:000000000002CBE8 ; ---------------------------------------------------------------------------
.text:000000000002CBE8 loc_2CBE8                               ; CODE XREF: __divtf3+368↑j
.text:000000000002CBE8                 AND             X12, X17, #0x7FFFFFFFFFFFFFFF
.text:000000000002CBEC                 CMP             X9, #0
.text:000000000002CBF0                 CSET            W1, EQ
.text:000000000002CBF4                 CMP             X12, X0
.text:000000000002CBF8                 CSET            W0, CC
.text:000000000002CBFC                 CSEL            W0, W1, W0, EQ
.text:000000000002CC00                 TBNZ            W0, #0, loc_2CC14
.text:000000000002CC04                 ORR             X8, X17, #0x800000000000
.text:000000000002CC08                 STP             X9, X8, [SP,#0xE0+var_D0]
.text:000000000002CC0C                 LDR             Q0, [SP,#0xE0+var_D0]
.text:000000000002CC10                 B               loc_2CC68
.text:000000000002CC14 ; ---------------------------------------------------------------------------
.text:000000000002CC14 loc_2CC14                               ; CODE XREF: __divtf3+478↑j
.text:000000000002CC14                 EOR             X17, X14, #0x7FFF000000000000
.text:000000000002CC18                 ORR             X17, X11, X17
.text:000000000002CC1C                 CBNZ            X17, loc_2CC44
.text:000000000002CC20                 EOR             X10, X12, #0x7FFF000000000000
.text:000000000002CC24                 ORR             X9, X9, X10
.text:000000000002CC28                 CBNZ            X9, loc_2CC5C
.text:000000000002CC2C loc_2CC2C                               ; CODE XREF: __divtf3+578↓j
.text:000000000002CC2C                 ADRP            X8, #xmmword_7A70@PAGE
.text:000000000002CC30                 LDR             Q0, [X8,#xmmword_7A70@PAGEOFF]
.text:000000000002CC34                 B               loc_2CC68
.text:000000000002CC38 ; ---------------------------------------------------------------------------
.text:000000000002CC38 loc_2CC38                               ; CODE XREF: __divtf3+428↑j
.text:000000000002CC38                 STP             XZR, X8, [SP,#0xE0+var_80]
.text:000000000002CC3C                 LDR             Q0, [SP,#0xE0+var_80]
.text:000000000002CC40                 B               loc_2CC68
.text:000000000002CC44 ; ---------------------------------------------------------------------------
.text:000000000002CC44 loc_2CC44                               ; CODE XREF: __divtf3+494↑j
.text:000000000002CC44                 EOR             X17, X12, #0x7FFF000000000000
.text:000000000002CC48                 ORR             X17, X9, X17
.text:000000000002CC4C                 CBNZ            X17, loc_2CC7C
.text:000000000002CC50                 STP             XZR, X8, [SP,#0xE0+var_B0]
.text:000000000002CC54                 LDR             Q0, [SP,#0xE0+var_B0]
.text:000000000002CC58                 B               loc_2CC68
.text:000000000002CC5C ; ---------------------------------------------------------------------------
.text:000000000002CC5C loc_2CC5C                               ; CODE XREF: __divtf3+4A0↑j
.text:000000000002CC5C                 ORR             X8, X8, #0x7FFF000000000000
.text:000000000002CC60                 STP             XZR, X8, [SP,#0xE0+var_C0]
.text:000000000002CC64                 LDR             Q0, [SP,#0xE0+var_C0]
.text:000000000002CC68 loc_2CC68                               ; CODE XREF: __divtf3+378↑j
.text:000000000002CC68                                         ; __divtf3+420↑j ...
.text:000000000002CC68                 LDP             X20, X19, [SP,#0xE0+var_10]
.text:000000000002CC6C                 LDP             X22, X21, [SP,#0xE0+var_20]
.text:000000000002CC70                 LDR             X23, [SP,#0xE0+var_30]
.text:000000000002CC74                 ADD             SP, SP, #0xE0
.text:000000000002CC78                 RET
.text:000000000002CC7C ; ---------------------------------------------------------------------------
.text:000000000002CC7C loc_2CC7C                               ; CODE XREF: __divtf3+4C4↑j
.text:000000000002CC7C                 ORR             X17, X11, X14
.text:000000000002CC80                 CBZ             X17, loc_2CCF4
.text:000000000002CC84                 ORR             X17, X9, X12
.text:000000000002CC88                 CBZ             X17, loc_2CD0C
.text:000000000002CC8C                 LSR             X14, X14, #0x30 ; '0'
.text:000000000002CC90                 CBNZ            X14, loc_2CD1C
.text:000000000002CC94                 CMP             X13, #0
.text:000000000002CC98                 CSEL            X0, X11, X13, EQ
.text:000000000002CC9C                 CSET            W17, EQ
.text:000000000002CCA0                 CLZ             X0, X0
.text:000000000002CCA4                 ADD             W17, W0, W17,LSL#6
.text:000000000002CCA8                 SUB             W0, W17, #0xF
.text:000000000002CCAC                 NEG             X1, X0
.text:000000000002CCB0                 CMP             X0, #0
.text:000000000002CCB4                 LSL             X2, X11, X0
.text:000000000002CCB8                 LSL             X13, X13, X0
.text:000000000002CCBC                 LSR             X1, X11, X1
.text:000000000002CCC0                 LSL             X11, X11, X0
.text:000000000002CCC4                 SUB             X0, X0, #0x40 ; '@'
.text:000000000002CCC8                 CSEL            X1, XZR, X1, EQ
.text:000000000002CCCC                 CMP             X0, #0
.text:000000000002CCD0                 MOV             W14, #0x10
.text:000000000002CCD4                 CSEL            X0, XZR, X2, GE
.text:000000000002CCD8                 ORR             X13, X1, X13
.text:000000000002CCDC                 CSEL            X13, X11, X13, GE
.text:000000000002CCE0                 SUB             W14, W14, W17
.text:000000000002CCE4                 MOV             X11, X0
.text:000000000002CCE8                 LSR             X12, X12, #0x30 ; '0'
.text:000000000002CCEC                 CBNZ            X12, loc_2C7E0
.text:000000000002CCF0                 B               loc_2CD28
.text:000000000002CCF4 ; ---------------------------------------------------------------------------
.text:000000000002CCF4 loc_2CCF4                               ; CODE XREF: __divtf3+4F8↑j
.text:000000000002CCF4                 ORR             X9, X9, X12
.text:000000000002CCF8                 CMP             X9, #0
.text:000000000002CCFC                 STP             XZR, X8, [SP,#0xE0+var_A0]
.text:000000000002CD00                 B.EQ            loc_2CC2C
.text:000000000002CD04                 LDR             Q0, [SP,#0xE0+var_A0]
.text:000000000002CD08                 B               loc_2CC68
.text:000000000002CD0C ; ---------------------------------------------------------------------------
.text:000000000002CD0C loc_2CD0C                               ; CODE XREF: __divtf3+500↑j
.text:000000000002CD0C                 ORR             X8, X8, #0x7FFF000000000000
.text:000000000002CD10                 STP             XZR, X8, [SP,#0xE0+var_60]
.text:000000000002CD14                 LDR             Q0, [SP,#0xE0+var_60]
.text:000000000002CD18                 B               loc_2CC68
.text:000000000002CD1C ; ---------------------------------------------------------------------------
.text:000000000002CD1C loc_2CD1C                               ; CODE XREF: __divtf3+508↑j
.text:000000000002CD1C                 MOV             W14, WZR
.text:000000000002CD20                 LSR             X12, X12, #0x30 ; '0'
.text:000000000002CD24                 CBNZ            X12, loc_2C7E0
.text:000000000002CD28 loc_2CD28                               ; CODE XREF: __divtf3+568↑j
.text:000000000002CD28                 CMP             X10, #0
.text:000000000002CD2C                 CSEL            X17, X9, X10, EQ
.text:000000000002CD30                 CSET            W12, EQ
.text:000000000002CD34                 CLZ             X17, X17
.text:000000000002CD38                 ADD             W12, W17, W12,LSL#6
.text:000000000002CD3C                 SUB             W17, W12, #0xF
.text:000000000002CD40                 ADD             W12, W12, W14
.text:000000000002CD44                 NEG             X14, X17
.text:000000000002CD48                 CMP             X17, #0
.text:000000000002CD4C                 LSL             X0, X9, X17
.text:000000000002CD50                 SUB             X1, X17, #0x40 ; '@'
.text:000000000002CD54                 LSL             X10, X10, X17
.text:000000000002CD58                 LSL             X17, X9, X17
.text:000000000002CD5C                 LSR             X9, X9, X14
.text:000000000002CD60                 CSEL            X9, XZR, X9, EQ
.text:000000000002CD64                 CMP             X1, #0
.text:000000000002CD68                 CSEL            X0, XZR, X0, GE
.text:000000000002CD6C                 ORR             X9, X9, X10
.text:000000000002CD70                 CSEL            X10, X17, X9, GE
.text:000000000002CD74                 SUB             W14, W12, #0x10
.text:000000000002CD78                 MOV             X9, X0
.text:000000000002CD7C                 B               loc_2C7E0
.text:000000000002CD7C ; } // starts at 2C788
.text:000000000002CD7C ; End of function __divtf3
.text:000000000002CD80 ; =============== S U B R O U T I N E =======================================
.text:000000000002CD80                 EXPORT __multf3
.text:000000000002CD80 __multf3                                ; CODE XREF: .__multf3+C↓j
.text:000000000002CD80                                         ; DATA XREF: LOAD:0000000000001980↑o ...
.text:000000000002CD80 var_C0          = -0xC0
.text:000000000002CD80 var_B0          = -0xB0
.text:000000000002CD80 var_A0          = -0xA0
.text:000000000002CD80 var_90          = -0x90
.text:000000000002CD80 var_80          = -0x80
.text:000000000002CD80 var_70          = -0x70
.text:000000000002CD80 var_60          = -0x60
.text:000000000002CD80 var_50          = -0x50
.text:000000000002CD80 var_40          = -0x40
.text:000000000002CD80 var_30          = -0x30
.text:000000000002CD80 var_20          = -0x20
.text:000000000002CD80 var_10          = -0x10
.text:000000000002CD80 ; __unwind {
.text:000000000002CD80                 SUB             SP, SP, #0xC0
.text:000000000002CD84                 STP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002CD88                 STP             Q1, Q0, [SP,#0xC0+var_30]
.text:000000000002CD8C                 LDP             X12, X3, [SP,#0xC0+var_20]
.text:000000000002CD90                 LDP             X14, X4, [SP,#0xC0+var_30]
.text:000000000002CD94                 MOV             W11, #0x7FFD
.text:000000000002CD98                 UBFX            X9, X3, #0x30, #0xF ; '0'
.text:000000000002CD9C                 EOR             X8, X4, X3
.text:000000000002CDA0                 AND             X2, X4, #0xFFFFFFFFFFFF
.text:000000000002CDA4                 SUB             W16, W9, #1
.text:000000000002CDA8                 AND             X13, X3, #0xFFFFFFFFFFFF
.text:000000000002CDAC                 EXTR            X15, X3, X12, #0x20 ; ' '
.text:000000000002CDB0                 UBFX            X0, X3, #0x20, #0x10 ; ' '
.text:000000000002CDB4                 UBFX            X10, X4, #0x30, #0xF ; '0'
.text:000000000002CDB8                 EXTR            X17, X4, X14, #0x11
.text:000000000002CDBC                 AND             X8, X8, #0x8000000000000000
.text:000000000002CDC0                 EXTR            X1, X2, X14, #0x31 ; '1'
.text:000000000002CDC4                 CMP             W16, W11
.text:000000000002CDC8                 UBFX            X11, X4, #0x11, #0x1F
.text:000000000002CDCC                 B.HI            loc_2CF1C
.text:000000000002CDD0                 SUB             W16, W10, #1
.text:000000000002CDD4                 MOV             W5, #0x7FFE
.text:000000000002CDD8                 CMP             W16, W5
.text:000000000002CDDC                 B.CS            loc_2CF1C
.text:000000000002CDE0                 MOV             W16, WZR
.text:000000000002CDE4 loc_2CDE4                               ; CODE XREF: __multf3+448↓j
.text:000000000002CDE4                                         ; __multf3+480↓j ...
.text:000000000002CDE4                 ORR             X0, X0, #0x10000
.text:000000000002CDE8                 MOV             W2, #0x80000000
.text:000000000002CDEC                 AND             X17, X17, #0xFFFFFFFF
.text:000000000002CDF0                 UBFIZ           X14, X14, #0xF, #0x11
.text:000000000002CDF4                 AND             X13, X13, #0xFFFFFFFF
.text:000000000002CDF8                 AND             X15, X15, #0xFFFFFFFF
.text:000000000002CDFC                 AND             X12, X12, #0xFFFFFFFF
.text:000000000002CE00                 AND             X1, X1, #0xFFFFFFFF
.text:000000000002CE04                 ADD             W9, W9, W10
.text:000000000002CE08                 BFXIL           X2, X11, #0, #0x1F
.text:000000000002CE0C                 MUL             X3, X17, X0
.text:000000000002CE10                 MUL             X5, X17, X13
.text:000000000002CE14                 MUL             X19, X17, X15
.text:000000000002CE18                 MUL             X20, X14, X15
.text:000000000002CE1C                 MUL             X17, X17, X12
.text:000000000002CE20                 MUL             X4, X1, X13
.text:000000000002CE24                 MUL             X6, X14, X13
.text:000000000002CE28                 MUL             X7, X1, X15
.text:000000000002CE2C                 ADD             W16, W9, W16
.text:000000000002CE30                 MUL             X9, X2, X13
.text:000000000002CE34                 MUL             X13, X2, X15
.text:000000000002CE38                 ADDS            X15, X17, X20
.text:000000000002CE3C                 ADCS            X17, XZR, XZR
.text:000000000002CE40                 ADDS            X6, X19, X6
.text:000000000002CE44                 MUL             X10, X1, X0
.text:000000000002CE48                 MUL             X1, X1, X12
.text:000000000002CE4C                 ADCS            X19, XZR, XZR
.text:000000000002CE50                 ADDS            X1, X6, X1
.text:000000000002CE54                 MUL             X11, X14, X0
.text:000000000002CE58                 ADCS            X6, X19, XZR
.text:000000000002CE5C                 ADDS            X11, X5, X11
.text:000000000002CE60                 ADCS            X5, XZR, XZR
.text:000000000002CE64                 ADDS            X11, X11, X7
.text:000000000002CE68                 MUL             X14, X14, X12
.text:000000000002CE6C                 MUL             X12, X2, X12
.text:000000000002CE70                 ADCS            X5, X5, XZR
.text:000000000002CE74                 ADDS            X11, X11, X12
.text:000000000002CE78                 ADCS            X12, X5, XZR
.text:000000000002CE7C                 ADDS            X9, X9, X10
.text:000000000002CE80                 ADCS            X7, XZR, XZR
.text:000000000002CE84                 ADDS            X10, X14, X15,LSL#32
.text:000000000002CE88                 EXTR            X17, X17, X15, #0x20 ; ' '
.text:000000000002CE8C                 ADCS            X15, XZR, XZR
.text:000000000002CE90                 ADDS            X17, X1, X17
.text:000000000002CE94                 ADCS            X1, XZR, XZR
.text:000000000002CE98                 LSR             X5, X12, #0x20 ; ' '
.text:000000000002CE9C                 EXTR            X12, X12, X11, #0x20 ; ' '
.text:000000000002CEA0                 ADDS            X11, X17, X11,LSL#32
.text:000000000002CEA4                 ADCS            X17, X1, XZR
.text:000000000002CEA8                 ADD             X11, X15, X11
.text:000000000002CEAC                 ADDS            X15, X4, X3
.text:000000000002CEB0                 ADCS            X1, XZR, XZR
.text:000000000002CEB4                 ADDS            X13, X15, X13
.text:000000000002CEB8                 ADCS            X15, X1, XZR
.text:000000000002CEBC                 ADDS            X13, X13, X6
.text:000000000002CEC0                 ADCS            X15, X15, XZR
.text:000000000002CEC4                 EXTR            X14, X7, X9, #0x20 ; ' '
.text:000000000002CEC8                 MADD            X15, X2, X0, X15
.text:000000000002CECC                 ADDS            X9, X13, X9,LSL#32
.text:000000000002CED0                 ADCS            X13, X15, X14
.text:000000000002CED4                 ADDS            X9, X9, X12
.text:000000000002CED8                 ADCS            X12, X13, X5
.text:000000000002CEDC                 ADDS            X9, X9, X17
.text:000000000002CEE0                 MOV             W13, #0xFFFFC001
.text:000000000002CEE4                 ADCS            X12, X12, XZR
.text:000000000002CEE8                 ADD             W13, W16, W13
.text:000000000002CEEC                 TBNZ            X12, #0x30, loc_2CF54 ; '0'
.text:000000000002CEF0                 EXTR            X12, X12, X9, #0x3F ; '?'
.text:000000000002CEF4                 EXTR            X9, X9, X11, #0x3F ; '?'
.text:000000000002CEF8                 EXTR            X11, X11, X10, #0x3F ; '?'
.text:000000000002CEFC                 LSL             X10, X10, #1
.text:000000000002CF00                 MOV             W14, #0x7FFF
.text:000000000002CF04                 CMP             W13, W14
.text:000000000002CF08                 B.GE            loc_2CF64
.text:000000000002CF0C loc_2CF0C                               ; CODE XREF: __multf3+1E0↓j
.text:000000000002CF0C                 CMP             W13, #0
.text:000000000002CF10                 B.LE            loc_2CFDC
.text:000000000002CF14                 BFI             X12, X13, #0x30, #0x10 ; '0'
.text:000000000002CF18                 B               loc_2D0E4
.text:000000000002CF1C ; ---------------------------------------------------------------------------
.text:000000000002CF1C loc_2CF1C                               ; CODE XREF: __multf3+4C↑j
.text:000000000002CF1C                                         ; __multf3+5C↑j
.text:000000000002CF1C                 AND             X16, X3, #0x7FFFFFFFFFFFFFFF
.text:000000000002CF20                 CMP             X12, #0
.text:000000000002CF24                 MOV             X5, #0x7FFF000000000000
.text:000000000002CF28                 CSET            W6, EQ
.text:000000000002CF2C                 CMP             X16, X5
.text:000000000002CF30                 CSET            W7, CC
.text:000000000002CF34                 CSEL            W6, W6, W7, EQ
.text:000000000002CF38                 TBNZ            W6, #0, loc_2CF7C
.text:000000000002CF3C                 ORR             X8, X3, #0x800000000000
.text:000000000002CF40                 STP             X12, X8, [SP,#0xC0+var_C0]
.text:000000000002CF44                 LDR             Q0, [SP,#0xC0+var_C0]
.text:000000000002CF48                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002CF4C                 ADD             SP, SP, #0xC0
.text:000000000002CF50                 RET
.text:000000000002CF54 ; ---------------------------------------------------------------------------
.text:000000000002CF54 loc_2CF54                               ; CODE XREF: __multf3+16C↑j
.text:000000000002CF54                 ADD             W13, W13, #1
.text:000000000002CF58                 MOV             W14, #0x7FFF
.text:000000000002CF5C                 CMP             W13, W14
.text:000000000002CF60                 B.LT            loc_2CF0C
.text:000000000002CF64 loc_2CF64                               ; CODE XREF: __multf3+188↑j
.text:000000000002CF64                 ORR             X8, X8, #0x7FFF000000000000
.text:000000000002CF68                 STP             XZR, X8, [SP,#0xC0+var_70]
.text:000000000002CF6C                 LDR             Q0, [SP,#0xC0+var_70]
.text:000000000002CF70                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002CF74                 ADD             SP, SP, #0xC0
.text:000000000002CF78                 RET
.text:000000000002CF7C ; ---------------------------------------------------------------------------
.text:000000000002CF7C loc_2CF7C                               ; CODE XREF: __multf3+1B8↑j
.text:000000000002CF7C                 AND             X3, X4, #0x7FFFFFFFFFFFFFFF
.text:000000000002CF80                 CMP             X14, #0
.text:000000000002CF84                 CSET            W6, EQ
.text:000000000002CF88                 CMP             X3, X5
.text:000000000002CF8C                 CSET            W5, CC
.text:000000000002CF90                 CSEL            W5, W6, W5, EQ
.text:000000000002CF94                 TBNZ            W5, #0, loc_2CFB0
.text:000000000002CF98                 ORR             X8, X4, #0x800000000000
.text:000000000002CF9C                 STP             X14, X8, [SP,#0xC0+var_B0]
.text:000000000002CFA0                 LDR             Q0, [SP,#0xC0+var_B0]
.text:000000000002CFA4                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002CFA8                 ADD             SP, SP, #0xC0
.text:000000000002CFAC                 RET
.text:000000000002CFB0 ; ---------------------------------------------------------------------------
.text:000000000002CFB0 loc_2CFB0                               ; CODE XREF: __multf3+214↑j
.text:000000000002CFB0                 EOR             X4, X16, #0x7FFF000000000000
.text:000000000002CFB4                 ORR             X4, X12, X4
.text:000000000002CFB8                 CBNZ            X4, loc_2D000
.text:000000000002CFBC                 ORR             X9, X14, X3
.text:000000000002CFC0                 CBZ             X9, loc_2D13C
.text:000000000002CFC4                 ORR             X8, X8, #0x7FFF000000000000
.text:000000000002CFC8                 STP             XZR, X8, [SP,#0xC0+var_A0]
.text:000000000002CFCC                 LDR             Q0, [SP,#0xC0+var_A0]
.text:000000000002CFD0                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002CFD4                 ADD             SP, SP, #0xC0
.text:000000000002CFD8                 RET
.text:000000000002CFDC ; ---------------------------------------------------------------------------
.text:000000000002CFDC loc_2CFDC                               ; CODE XREF: __multf3+190↑j
.text:000000000002CFDC                 MOV             W14, #1
.text:000000000002CFE0                 SUB             W13, W14, W13
.text:000000000002CFE4                 CMP             W13, #0x7F
.text:000000000002CFE8                 B.LS            loc_2D02C
.text:000000000002CFEC                 STP             XZR, X8, [SP,#0xC0+var_60]
.text:000000000002CFF0                 LDR             Q0, [SP,#0xC0+var_60]
.text:000000000002CFF4                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002CFF8                 ADD             SP, SP, #0xC0
.text:000000000002CFFC                 RET
.text:000000000002D000 ; ---------------------------------------------------------------------------
.text:000000000002D000 loc_2D000                               ; CODE XREF: __multf3+238↑j
.text:000000000002D000                 EOR             X4, X3, #0x7FFF000000000000
.text:000000000002D004                 ORR             X4, X14, X4
.text:000000000002D008                 CBNZ            X4, loc_2D150
.text:000000000002D00C                 ORR             X9, X12, X16
.text:000000000002D010                 CBZ             X9, loc_2D13C
.text:000000000002D014                 ORR             X8, X8, #0x7FFF000000000000
.text:000000000002D018                 STP             XZR, X8, [SP,#0xC0+var_90]
.text:000000000002D01C                 LDR             Q0, [SP,#0xC0+var_90]
.text:000000000002D020                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002D024                 ADD             SP, SP, #0xC0
.text:000000000002D028                 RET
.text:000000000002D02C ; ---------------------------------------------------------------------------
.text:000000000002D02C loc_2D02C                               ; CODE XREF: __multf3+268↑j
.text:000000000002D02C                 MOV             W14, #0x80
.text:000000000002D030                 MOV             W16, #0x40 ; '@'
.text:000000000002D034                 NEG             X15, X13
.text:000000000002D038                 SUB             X14, X14, X13
.text:000000000002D03C                 SUB             X16, X16, X13
.text:000000000002D040                 LSL             X1, X9, X15
.text:000000000002D044                 NEG             X2, X14
.text:000000000002D048                 CMP             X16, #0
.text:000000000002D04C                 CSEL            X3, XZR, X1, GE
.text:000000000002D050                 CMP             X14, #0
.text:000000000002D054                 LSR             X14, X10, X2
.text:000000000002D058                 LSR             X2, X9, X2
.text:000000000002D05C                 LSR             X0, X10, X13
.text:000000000002D060                 CSEL            X14, XZR, X14, EQ
.text:000000000002D064                 CSEL            X2, XZR, X2, EQ
.text:000000000002D068                 CMP             X16, #0
.text:000000000002D06C                 LSL             X16, X12, X15
.text:000000000002D070                 LSL             X10, X10, X15
.text:000000000002D074                 LSL             X15, X11, X15
.text:000000000002D078                 ORR             X14, X14, X15
.text:000000000002D07C                 CSEL            X14, X10, X14, GE
.text:000000000002D080                 CSEL            X10, XZR, X10, GE
.text:000000000002D084                 ORR             X2, X2, X16
.text:000000000002D088                 ORR             X10, X10, X14
.text:000000000002D08C                 CSEL            X1, X1, X2, GE
.text:000000000002D090                 CMP             X10, #0
.text:000000000002D094                 CSET            W10, NE
.text:000000000002D098                 CMP             X13, #0
.text:000000000002D09C                 SUB             X17, X13, #0x40 ; '@'
.text:000000000002D0A0                 LSR             X2, X11, X13
.text:000000000002D0A4                 LSR             X11, X11, X13
.text:000000000002D0A8                 LSR             X9, X9, X13
.text:000000000002D0AC                 LSR             X14, X12, X13
.text:000000000002D0B0                 LSR             X12, X12, X13
.text:000000000002D0B4                 CSEL            X13, XZR, X15, EQ
.text:000000000002D0B8                 CSEL            X15, XZR, X16, EQ
.text:000000000002D0BC                 CMP             X17, #0
.text:000000000002D0C0                 ORR             X13, X0, X13
.text:000000000002D0C4                 CSEL            X13, X2, X13, GE
.text:000000000002D0C8                 CSEL            X11, XZR, X11, GE
.text:000000000002D0CC                 ORR             X9, X9, X15
.text:000000000002D0D0                 ORR             X13, X3, X13
.text:000000000002D0D4                 ORR             X11, X1, X11
.text:000000000002D0D8                 CSEL            X9, X14, X9, GE
.text:000000000002D0DC                 ORR             X10, X13, X10
.text:000000000002D0E0                 CSEL            X12, XZR, X12, GE
.text:000000000002D0E4 loc_2D0E4                               ; CODE XREF: __multf3+198↑j
.text:000000000002D0E4                 CMP             X10, #0
.text:000000000002D0E8                 MOV             X13, #0x8000000000000000
.text:000000000002D0EC                 CSET            W14, EQ
.text:000000000002D0F0                 CMP             X11, #0
.text:000000000002D0F4                 CSET            W15, GE
.text:000000000002D0F8                 CMP             X11, X13
.text:000000000002D0FC                 CSEL            W13, W14, W15, EQ
.text:000000000002D100                 ORR             X8, X12, X8
.text:000000000002D104                 TBNZ            W13, #0, loc_2D110
.text:000000000002D108                 ADDS            X9, X9, #1
.text:000000000002D10C                 B               loc_2D124
.text:000000000002D110 ; ---------------------------------------------------------------------------
.text:000000000002D110 loc_2D110                               ; CODE XREF: __multf3+384↑j
.text:000000000002D110                 EOR             X11, X11, #0x8000000000000000
.text:000000000002D114                 ORR             X10, X10, X11
.text:000000000002D118                 CBNZ            X10, loc_2D128
.text:000000000002D11C                 AND             X10, X9, #1
.text:000000000002D120                 ADDS            X9, X9, X10
.text:000000000002D124 loc_2D124                               ; CODE XREF: __multf3+38C↑j
.text:000000000002D124                 ADCS            X8, X8, XZR
.text:000000000002D128 loc_2D128                               ; CODE XREF: __multf3+398↑j
.text:000000000002D128                 STP             X9, X8, [SP,#0xC0+var_50]
.text:000000000002D12C                 LDR             Q0, [SP,#0xC0+var_50]
.text:000000000002D130                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002D134                 ADD             SP, SP, #0xC0
.text:000000000002D138                 RET
.text:000000000002D13C ; ---------------------------------------------------------------------------
.text:000000000002D13C loc_2D13C                               ; CODE XREF: __multf3+240↑j
.text:000000000002D13C                                         ; __multf3+290↑j
.text:000000000002D13C                 ADRP            X8, #xmmword_7A70@PAGE
.text:000000000002D140                 LDR             Q0, [X8,#xmmword_7A70@PAGEOFF]
.text:000000000002D144                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002D148                 ADD             SP, SP, #0xC0
.text:000000000002D14C                 RET
.text:000000000002D150 ; ---------------------------------------------------------------------------
.text:000000000002D150 loc_2D150                               ; CODE XREF: __multf3+288↑j
.text:000000000002D150                 ORR             X4, X12, X16
.text:000000000002D154                 CBZ             X4, loc_2D1D0
.text:000000000002D158                 ORR             X4, X14, X3
.text:000000000002D15C                 CBZ             X4, loc_2D1E4
.text:000000000002D160                 LSR             X16, X16, #0x30 ; '0'
.text:000000000002D164                 CBNZ            X16, loc_2D1F8
.text:000000000002D168                 CMP             X13, #0
.text:000000000002D16C                 CSEL            X0, X12, X13, EQ
.text:000000000002D170                 CSET            W16, EQ
.text:000000000002D174                 CLZ             X0, X0
.text:000000000002D178                 ADD             W16, W0, W16,LSL#6
.text:000000000002D17C                 MOV             W15, #0x10
.text:000000000002D180                 SUB             W0, W16, #0xF
.text:000000000002D184                 SUB             W16, W15, W16
.text:000000000002D188                 NEG             X15, X0
.text:000000000002D18C                 CMP             X0, #0
.text:000000000002D190                 LSL             X4, X12, X0
.text:000000000002D194                 SUB             X5, X0, #0x40 ; '@'
.text:000000000002D198                 LSL             X13, X13, X0
.text:000000000002D19C                 LSL             X0, X12, X0
.text:000000000002D1A0                 LSR             X12, X12, X15
.text:000000000002D1A4                 CSEL            X12, XZR, X12, EQ
.text:000000000002D1A8                 CMP             X5, #0
.text:000000000002D1AC                 ORR             X12, X12, X13
.text:000000000002D1B0                 CSEL            X4, XZR, X4, GE
.text:000000000002D1B4                 CSEL            X13, X0, X12, GE
.text:000000000002D1B8                 EXTR            X15, X13, X4, #0x20 ; ' '
.text:000000000002D1BC                 LSR             X0, X13, #0x20 ; ' '
.text:000000000002D1C0                 MOV             X12, X4
.text:000000000002D1C4                 LSR             X3, X3, #0x30 ; '0'
.text:000000000002D1C8                 CBNZ            X3, loc_2CDE4
.text:000000000002D1CC                 B               loc_2D204
.text:000000000002D1D0 ; ---------------------------------------------------------------------------
.text:000000000002D1D0 loc_2D1D0                               ; CODE XREF: __multf3+3D4↑j
.text:000000000002D1D0                 STP             XZR, X8, [SP,#0xC0+var_40]
.text:000000000002D1D4                 LDR             Q0, [SP,#0xC0+var_40]
.text:000000000002D1D8                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002D1DC                 ADD             SP, SP, #0xC0
.text:000000000002D1E0                 RET
.text:000000000002D1E4 ; ---------------------------------------------------------------------------
.text:000000000002D1E4 loc_2D1E4                               ; CODE XREF: __multf3+3DC↑j
.text:000000000002D1E4                 STP             XZR, X8, [SP,#0xC0+var_80]
.text:000000000002D1E8                 LDR             Q0, [SP,#0xC0+var_80]
.text:000000000002D1EC                 LDP             X20, X19, [SP,#0xC0+var_10]
.text:000000000002D1F0                 ADD             SP, SP, #0xC0
.text:000000000002D1F4                 RET
.text:000000000002D1F8 ; ---------------------------------------------------------------------------
.text:000000000002D1F8 loc_2D1F8                               ; CODE XREF: __multf3+3E4↑j
.text:000000000002D1F8                 MOV             W16, WZR
.text:000000000002D1FC                 LSR             X3, X3, #0x30 ; '0'
.text:000000000002D200                 CBNZ            X3, loc_2CDE4
.text:000000000002D204 loc_2D204                               ; CODE XREF: __multf3+44C↑j
.text:000000000002D204                 CMP             X2, #0
.text:000000000002D208                 CSEL            X1, X14, X2, EQ
.text:000000000002D20C                 CSET            W17, EQ
.text:000000000002D210                 CLZ             X1, X1
.text:000000000002D214                 ADD             W17, W1, W17,LSL#6
.text:000000000002D218                 MOV             W11, #0x10
.text:000000000002D21C                 SUB             W1, W17, #0xF
.text:000000000002D220                 SUB             W11, W11, W17
.text:000000000002D224                 NEG             X17, X1
.text:000000000002D228                 CMP             X1, #0
.text:000000000002D22C                 ADD             W16, W11, W16
.text:000000000002D230                 LSR             X11, X14, X17
.text:000000000002D234                 SUB             X4, X1, #0x40 ; '@'
.text:000000000002D238                 LSL             X2, X2, X1
.text:000000000002D23C                 CSEL            X11, XZR, X11, EQ
.text:000000000002D240                 LSL             X3, X14, X1
.text:000000000002D244                 LSL             X1, X14, X1
.text:000000000002D248                 CMP             X4, #0
.text:000000000002D24C                 ORR             X11, X11, X2
.text:000000000002D250                 CSEL            X14, XZR, X3, GE
.text:000000000002D254                 CSEL            X1, X1, X11, GE
.text:000000000002D258                 EXTR            X17, X1, X14, #0x11
.text:000000000002D25C                 LSR             X11, X1, #0x11
.text:000000000002D260                 EXTR            X1, X1, X14, #0x31 ; '1'
.text:000000000002D264                 B               loc_2CDE4
.text:000000000002D264 ; } // starts at 2CD80
.text:000000000002D264 ; End of function __multf3
.text:000000000002D268 ; =============== S U B R O U T I N E =======================================
.text:000000000002D268                 EXPORT __subtf3
.text:000000000002D268 __subtf3                                ; CODE XREF: .__subtf3+C↓j
.text:000000000002D268                                         ; DATA XREF: LOAD:0000000000001548↑o ...
.text:000000000002D268 var_20          = -0x20
.text:000000000002D268 var_10          = -0x10
.text:000000000002D268 ; __unwind {
.text:000000000002D268                 SUB             SP, SP, #0x20
.text:000000000002D26C                 STR             Q1, [SP,#0x20+var_10]
.text:000000000002D270                 LDP             X9, X8, [SP,#0x20+var_10]
.text:000000000002D274                 EOR             X8, X8, #0x8000000000000000
.text:000000000002D278                 STP             X9, X8, [SP,#0x20+var_20]
.text:000000000002D27C                 LDR             Q1, [SP+0x20+var_20],#0x20
.text:000000000002D280                 B               .__addtf3
.text:000000000002D280 ; } // starts at 2D268
.text:000000000002D280 ; End of function __subtf3
.text:000000000002D284 ; =============== S U B R O U T I N E =======================================
.text:000000000002D284                 EXPORT __addtf3
.text:000000000002D284 __addtf3                                ; CODE XREF: .__addtf3+C↓j
.text:000000000002D284                                         ; DATA XREF: LOAD:00000000000017D0↑o ...
.text:000000000002D284 var_A0          = -0xA0
.text:000000000002D284 var_90          = -0x90
.text:000000000002D284 var_80          = -0x80
.text:000000000002D284 var_70          = -0x70
.text:000000000002D284 var_60          = -0x60
.text:000000000002D284 var_50          = -0x50
.text:000000000002D284 var_40          = -0x40
.text:000000000002D284 var_30          = -0x30
.text:000000000002D284 var_20          = -0x20
.text:000000000002D284 var_10          = -0x10
.text:000000000002D284 ; __unwind {
.text:000000000002D284                 SUB             SP, SP, #0xA0
.text:000000000002D288                 STR             X22, [SP,#0xA0+var_30]
.text:000000000002D28C                 STP             X21, X20, [SP,#0xA0+var_20]
.text:000000000002D290                 STP             X19, X30, [SP,#0xA0+var_10]
.text:000000000002D294                 STP             Q1, Q0, [SP,#0xA0+var_50]
.text:000000000002D298                 LDP             X10, X8, [SP,#0xA0+var_40]
.text:000000000002D29C                 MOV             X15, #0xFFFFFFFFFFFFFFFF
.text:000000000002D2A0                 LDP             X13, X9, [SP,#0xA0+var_50]
.text:000000000002D2A4                 MOV             X14, #0x7FFEFFFFFFFFFFFF
.text:000000000002D2A8                 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:000000000002D2AC                 SUBS            X16, X10, #1
.text:000000000002D2B0                 ADCS            X17, X12, X15
.text:000000000002D2B4                 CMN             X16, #1
.text:000000000002D2B8                 CSET            W16, EQ
.text:000000000002D2BC                 CMP             X17, X14
.text:000000000002D2C0                 CSET            W17, HI
.text:000000000002D2C4                 AND             X11, X9, #0x7FFFFFFFFFFFFFFF
.text:000000000002D2C8                 CSEL            W17, W16, W17, EQ
.text:000000000002D2CC                 SUBS            X16, X13, #1
.text:000000000002D2D0                 ADCS            X15, X11, X15
.text:000000000002D2D4                 TBNZ            W17, #0, loc_2D408
.text:000000000002D2D8                 MOV             X17, #0xFFFFFFFFFFFFFFFE
.text:000000000002D2DC                 CMP             X16, X17
.text:000000000002D2E0                 CSET            W16, LS
.text:000000000002D2E4                 CMP             X15, X14
.text:000000000002D2E8                 CSET            W14, LS
.text:000000000002D2EC                 CSEL            W14, W16, W14, EQ
.text:000000000002D2F0                 TBZ             W14, #0, loc_2D408
.text:000000000002D2F4 loc_2D2F4                               ; CODE XREF: __addtf3+46C↓j
.text:000000000002D2F4                 CMP             X13, X10
.text:000000000002D2F8                 CSET            W14, HI
.text:000000000002D2FC                 CMP             X11, X12
.text:000000000002D300                 CSET            W11, HI
.text:000000000002D304                 CSEL            W11, W14, W11, EQ
.text:000000000002D308                 CMP             W11, #0
.text:000000000002D30C                 CSEL            X11, X8, X9, NE
.text:000000000002D310                 CSEL            X8, X9, X8, NE
.text:000000000002D314                 CSEL            X12, X10, X13, NE
.text:000000000002D318                 CSEL            X10, X13, X10, NE
.text:000000000002D31C                 UBFX            X9, X8, #0x30, #0xF ; '0'
.text:000000000002D320                 UBFX            X14, X11, #0x30, #0xF ; '0'
.text:000000000002D324                 AND             X13, X8, #0xFFFFFFFFFFFF
.text:000000000002D328                 CBZ             W9, loc_2D45C
.text:000000000002D32C                 AND             X15, X11, #0xFFFFFFFFFFFF
.text:000000000002D330                 CBZ             W14, loc_2D4B8
.text:000000000002D334 loc_2D334                               ; CODE XREF: __addtf3+230↓j
.text:000000000002D334                                         ; __addtf3+288↓j
.text:000000000002D334                 EXTR            X16, X15, X12, #0x3D ; '='
.text:000000000002D338                 EOR             X11, X8, X11
.text:000000000002D33C                 EXTR            X13, X13, X10, #0x3D ; '='
.text:000000000002D340                 LSL             X15, X12, #3
.text:000000000002D344                 SUBS            W14, W9, W14
.text:000000000002D348                 ORR             X12, X16, #0x8000000000000
.text:000000000002D34C                 B.EQ            loc_2D3C8
.text:000000000002D350                 CMP             W14, #0x7F
.text:000000000002D354                 B.HI            loc_2D510
.text:000000000002D358                 MOV             W16, #0x80
.text:000000000002D35C                 SUBS            X16, X16, X14
.text:000000000002D360                 NEG             X16, X16
.text:000000000002D364                 NEG             X17, X14
.text:000000000002D368                 MOV             W0, #0x40 ; '@'
.text:000000000002D36C                 LSR             X16, X15, X16
.text:000000000002D370                 LSR             X1, X15, X14
.text:000000000002D374                 SUB             X0, X0, X14
.text:000000000002D378                 CSEL            X16, XZR, X16, EQ
.text:000000000002D37C                 LSL             X15, X15, X17
.text:000000000002D380                 LSL             X17, X12, X17
.text:000000000002D384                 CMP             X0, #0
.text:000000000002D388                 ORR             X16, X16, X17
.text:000000000002D38C                 CSEL            X16, X15, X16, GE
.text:000000000002D390                 CSEL            X15, XZR, X15, GE
.text:000000000002D394                 ORR             X15, X15, X16
.text:000000000002D398                 CMP             X15, #0
.text:000000000002D39C                 CSET            W15, NE
.text:000000000002D3A0                 CMP             X14, #0
.text:000000000002D3A4                 LSR             X0, X12, X14
.text:000000000002D3A8                 SUB             X16, X14, #0x40 ; '@'
.text:000000000002D3AC                 LSR             X12, X12, X14
.text:000000000002D3B0                 CSEL            X14, XZR, X17, EQ
.text:000000000002D3B4                 CMP             X16, #0
.text:000000000002D3B8                 ORR             X14, X1, X14
.text:000000000002D3BC                 CSEL            X14, X0, X14, GE
.text:000000000002D3C0                 CSEL            X12, XZR, X12, GE
.text:000000000002D3C4                 ORR             X15, X14, X15
.text:000000000002D3C8 loc_2D3C8                               ; CODE XREF: __addtf3+C8↑j
.text:000000000002D3C8                 LSL             X14, X10, #3
.text:000000000002D3CC                 ORR             X10, X13, #0x8000000000000
.text:000000000002D3D0                 TBNZ            X11, #0x3F, loc_2D524 ; '?'
.text:000000000002D3D4 loc_2D3D4                               ; CODE XREF: __addtf3+29C↓j
.text:000000000002D3D4                 ADDS            X11, X15, X14
.text:000000000002D3D8                 ADCS            X10, X12, X10
.text:000000000002D3DC                 TBZ             X10, #0x34, loc_2D58C ; '4'
.text:000000000002D3E0                 AND             X12, X11, #1
.text:000000000002D3E4                 EXTR            X11, X10, X11, #1
.text:000000000002D3E8                 LSR             X10, X10, #1
.text:000000000002D3EC                 ORR             X11, X11, X12
.text:000000000002D3F0                 ADD             W9, W9, #1
.text:000000000002D3F4                 MOV             W12, #0x7FFF
.text:000000000002D3F8                 CMP             W9, W12
.text:000000000002D3FC                 AND             X21, X8, #0x8000000000000000
.text:000000000002D400                 B.GE            loc_2D59C
.text:000000000002D404                 B               loc_2D5AC
.text:000000000002D408 ; ---------------------------------------------------------------------------
.text:000000000002D408 loc_2D408                               ; CODE XREF: __addtf3+50↑j
.text:000000000002D408                                         ; __addtf3+6C↑j
.text:000000000002D408                 CMP             X10, #0
.text:000000000002D40C                 MOV             X14, #0x7FFF000000000000
.text:000000000002D410                 CSET            W15, EQ
.text:000000000002D414                 CMP             X12, X14
.text:000000000002D418                 CSET            W16, CC
.text:000000000002D41C                 CSEL            W15, W15, W16, EQ
.text:000000000002D420                 TBNZ            W15, #0, loc_2D434
.text:000000000002D424                 ORR             X8, X8, #0x800000000000
.text:000000000002D428                 STP             X10, X8, [SP,#0xA0+var_A0]
.text:000000000002D42C                 LDR             Q1, [SP,#0xA0+var_A0]
.text:000000000002D430                 B               loc_2D730
.text:000000000002D434 ; ---------------------------------------------------------------------------
.text:000000000002D434 loc_2D434                               ; CODE XREF: __addtf3+19C↑j
.text:000000000002D434                 CMP             X13, #0
.text:000000000002D438                 CSET            W15, EQ
.text:000000000002D43C                 CMP             X11, X14
.text:000000000002D440                 CSET            W14, CC
.text:000000000002D444                 CSEL            W14, W15, W14, EQ
.text:000000000002D448                 TBNZ            W14, #0, loc_2D694
.text:000000000002D44C                 ORR             X8, X9, #0x800000000000
.text:000000000002D450                 STP             X13, X8, [SP,#0xA0+var_90]
.text:000000000002D454                 LDR             Q1, [SP,#0xA0+var_90]
.text:000000000002D458                 B               loc_2D730
.text:000000000002D45C ; ---------------------------------------------------------------------------
.text:000000000002D45C loc_2D45C                               ; CODE XREF: __addtf3+A4↑j
.text:000000000002D45C                 CMP             X13, #0
.text:000000000002D460                 CSEL            X16, X10, X13, EQ
.text:000000000002D464                 CSET            W15, EQ
.text:000000000002D468                 CLZ             X16, X16
.text:000000000002D46C                 ADD             W15, W16, W15,LSL#6
.text:000000000002D470                 SUB             W16, W15, #0xF
.text:000000000002D474                 NEG             X17, X16
.text:000000000002D478                 CMP             X16, #0
.text:000000000002D47C                 LSL             X0, X10, X16
.text:000000000002D480                 LSL             X13, X13, X16
.text:000000000002D484                 LSR             X17, X10, X17
.text:000000000002D488                 LSL             X10, X10, X16
.text:000000000002D48C                 SUB             X16, X16, #0x40 ; '@'
.text:000000000002D490                 CSEL            X17, XZR, X17, EQ
.text:000000000002D494                 CMP             X16, #0
.text:000000000002D498                 MOV             W9, #0x10
.text:000000000002D49C                 CSEL            X16, XZR, X0, GE
.text:000000000002D4A0                 ORR             X13, X17, X13
.text:000000000002D4A4                 CSEL            X13, X10, X13, GE
.text:000000000002D4A8                 SUB             W9, W9, W15
.text:000000000002D4AC                 MOV             X10, X16
.text:000000000002D4B0                 AND             X15, X11, #0xFFFFFFFFFFFF
.text:000000000002D4B4                 CBNZ            W14, loc_2D334
.text:000000000002D4B8 loc_2D4B8                               ; CODE XREF: __addtf3+AC↑j
.text:000000000002D4B8                 CMP             X15, #0
.text:000000000002D4BC                 CSEL            X17, X12, X15, EQ
.text:000000000002D4C0                 CSET            W16, EQ
.text:000000000002D4C4                 CLZ             X17, X17
.text:000000000002D4C8                 ADD             W16, W17, W16,LSL#6
.text:000000000002D4CC                 SUB             W17, W16, #0xF
.text:000000000002D4D0                 NEG             X0, X17
.text:000000000002D4D4                 CMP             X17, #0
.text:000000000002D4D8                 LSL             X1, X12, X17
.text:000000000002D4DC                 LSL             X15, X15, X17
.text:000000000002D4E0                 LSR             X0, X12, X0
.text:000000000002D4E4                 LSL             X12, X12, X17
.text:000000000002D4E8                 SUB             X17, X17, #0x40 ; '@'
.text:000000000002D4EC                 CSEL            X0, XZR, X0, EQ
.text:000000000002D4F0                 CMP             X17, #0
.text:000000000002D4F4                 MOV             W14, #0x10
.text:000000000002D4F8                 CSEL            X17, XZR, X1, GE
.text:000000000002D4FC                 ORR             X15, X0, X15
.text:000000000002D500                 CSEL            X15, X12, X15, GE
.text:000000000002D504                 SUB             W14, W14, W16
.text:000000000002D508                 MOV             X12, X17
.text:000000000002D50C                 B               loc_2D334
.text:000000000002D510 ; ---------------------------------------------------------------------------
.text:000000000002D510 loc_2D510                               ; CODE XREF: __addtf3+D0↑j
.text:000000000002D510                 MOV             X12, XZR
.text:000000000002D514                 MOV             W15, #1
.text:000000000002D518                 LSL             X14, X10, #3
.text:000000000002D51C                 ORR             X10, X13, #0x8000000000000
.text:000000000002D520                 TBZ             X11, #0x3F, loc_2D3D4 ; '?'
.text:000000000002D524 loc_2D524                               ; CODE XREF: __addtf3+14C↑j
.text:000000000002D524                 SUBS            X11, X14, X15
.text:000000000002D528                 SBCS            X10, X10, X12
.text:000000000002D52C                 ORR             X12, X11, X10
.text:000000000002D530                 CBZ             X12, loc_2D6C8
.text:000000000002D534                 LSR             X12, X10, #0x33 ; '3'
.text:000000000002D538                 CBNZ            X12, loc_2D58C
.text:000000000002D53C                 CMP             X10, #0
.text:000000000002D540                 CSEL            X13, X11, X10, EQ
.text:000000000002D544                 CSET            W12, EQ
.text:000000000002D548                 CLZ             X13, X13
.text:000000000002D54C                 ADD             W12, W13, W12,LSL#6
.text:000000000002D550                 SUB             W12, W12, #0xC
.text:000000000002D554                 NEG             X13, X12
.text:000000000002D558                 CMP             X12, #0
.text:000000000002D55C                 SUB             X15, X12, #0x40 ; '@'
.text:000000000002D560                 LSR             X13, X11, X13
.text:000000000002D564                 LSL             X14, X11, X12
.text:000000000002D568                 LSL             X10, X10, X12
.text:000000000002D56C                 CSEL            X13, XZR, X13, EQ
.text:000000000002D570                 CMP             X15, #0
.text:000000000002D574                 LSL             X11, X11, X12
.text:000000000002D578                 CSEL            X14, XZR, X14, GE
.text:000000000002D57C                 ORR             X10, X13, X10
.text:000000000002D580                 CSEL            X10, X11, X10, GE
.text:000000000002D584                 SUB             W9, W9, W12
.text:000000000002D588                 MOV             X11, X14
.text:000000000002D58C loc_2D58C                               ; CODE XREF: __addtf3+158↑j
.text:000000000002D58C                                         ; __addtf3+2B4↑j
.text:000000000002D58C                 MOV             W12, #0x7FFF
.text:000000000002D590                 CMP             W9, W12
.text:000000000002D594                 AND             X21, X8, #0x8000000000000000
.text:000000000002D598                 B.LT            loc_2D5AC
.text:000000000002D59C loc_2D59C                               ; CODE XREF: __addtf3+17C↑j
.text:000000000002D59C                 ORR             X8, X21, #0x7FFF000000000000
.text:000000000002D5A0                 STP             XZR, X8, [SP,#0xA0+var_70]
.text:000000000002D5A4                 LDR             Q1, [SP,#0xA0+var_70]
.text:000000000002D5A8                 B               loc_2D730
.text:000000000002D5AC ; ---------------------------------------------------------------------------
.text:000000000002D5AC loc_2D5AC                               ; CODE XREF: __addtf3+180↑j
.text:000000000002D5AC                                         ; __addtf3+314↑j
.text:000000000002D5AC                 CMP             W9, #0
.text:000000000002D5B0                 B.GT            loc_2D640
.text:000000000002D5B4                 MOV             W8, #1
.text:000000000002D5B8                 SUB             W8, W8, W9
.text:000000000002D5BC                 MOV             W12, #0x80
.text:000000000002D5C0                 SXTW            X9, W8
.text:000000000002D5C4                 SUBS            X12, X12, X9
.text:000000000002D5C8                 MOV             W13, #0x40 ; '@'
.text:000000000002D5CC                 NEG             X12, X12
.text:000000000002D5D0                 SUB             X13, X13, X9
.text:000000000002D5D4                 NEG             X9, X9
.text:000000000002D5D8                 LSR             X12, X11, X12
.text:000000000002D5DC                 CSEL            X12, XZR, X12, EQ
.text:000000000002D5E0                 CMP             X13, #0
.text:000000000002D5E4                 LSL             X13, X10, X9
.text:000000000002D5E8                 ORR             X12, X12, X13
.text:000000000002D5EC                 LSL             X9, X11, X9
.text:000000000002D5F0                 CSEL            X12, X9, X12, GE
.text:000000000002D5F4                 CSEL            X9, XZR, X9, GE
.text:000000000002D5F8                 ORR             X9, X9, X12
.text:000000000002D5FC                 NEG             X14, X8
.text:000000000002D600                 CMP             X9, #0
.text:000000000002D604                 LSL             X14, X10, X14
.text:000000000002D608                 CSET            W9, NE
.text:000000000002D60C                 CMP             X8, #0
.text:000000000002D610                 LSR             X15, X10, X8
.text:000000000002D614                 SUB             X13, X8, #0x40 ; '@'
.text:000000000002D618                 LSR             X11, X11, X8
.text:000000000002D61C                 LSR             X10, X10, X8
.text:000000000002D620                 CSEL            X8, XZR, X14, EQ
.text:000000000002D624                 CMP             X13, #0
.text:000000000002D628                 ORR             X8, X11, X8
.text:000000000002D62C                 CSEL            X12, XZR, X15, GE
.text:000000000002D630                 CSEL            X8, X10, X8, GE
.text:000000000002D634                 ORR             X11, X8, X9
.text:000000000002D638                 MOV             X10, X12
.text:000000000002D63C                 MOV             W9, WZR
.text:000000000002D640 loc_2D640                               ; CODE XREF: __addtf3+32C↑j
.text:000000000002D640                 UBFX            X8, X10, #3, #0x30 ; '0'
.text:000000000002D644                 ORR             X8, X8, X21
.text:000000000002D648                 AND             W22, W11, #7
.text:000000000002D64C                 EXTR            X19, X10, X11, #3
.text:000000000002D650                 ORR             X20, X8, X9,LSL#48
.text:000000000002D654                 BL              .__fe_getround
.text:000000000002D658                 CMP             W0, #2
.text:000000000002D65C                 B.EQ            loc_2D6F8
.text:000000000002D660                 CMP             W0, #1
.text:000000000002D664                 B.EQ            loc_2D704
.text:000000000002D668                 CBNZ            W0, loc_2D720
.text:000000000002D66C                 CMP             W22, #4
.text:000000000002D670                 CSET            W8, HI
.text:000000000002D674                 ADDS            X19, X19, X8
.text:000000000002D678                 ADCS            X20, X20, XZR
.text:000000000002D67C                 CMP             W22, #4
.text:000000000002D680                 B.NE            loc_2D720
.text:000000000002D684                 AND             X8, X19, #1
.text:000000000002D688                 ADDS            X19, X8, X19
.text:000000000002D68C                 ADCS            X20, X20, XZR
.text:000000000002D690                 B               loc_2D724
.text:000000000002D694 ; ---------------------------------------------------------------------------
.text:000000000002D694 loc_2D694                               ; CODE XREF: __addtf3+1C4↑j
.text:000000000002D694                 EOR             X14, X12, #0x7FFF000000000000
.text:000000000002D698                 ORR             X14, X10, X14
.text:000000000002D69C                 CBNZ            X14, loc_2D6D4
.text:000000000002D6A0                 EOR             X8, X9, X8
.text:000000000002D6A4                 EOR             X10, X13, X10
.text:000000000002D6A8                 EOR             X8, X8, #0x8000000000000000
.text:000000000002D6AC                 ORR             X8, X10, X8
.text:000000000002D6B0                 CMP             X8, #0
.text:000000000002D6B4                 B.NE            loc_2D6C0
.text:000000000002D6B8                 ADRP            X8, #xmmword_7A70@PAGE
.text:000000000002D6BC                 LDR             Q0, [X8,#xmmword_7A70@PAGEOFF]
.text:000000000002D6C0 loc_2D6C0                               ; CODE XREF: __addtf3+430↑j
.text:000000000002D6C0                 MOV             V1.16B, V0.16B
.text:000000000002D6C4                 B               loc_2D730
.text:000000000002D6C8 ; ---------------------------------------------------------------------------
.text:000000000002D6C8 loc_2D6C8                               ; CODE XREF: __addtf3+2AC↑j
.text:000000000002D6C8                 ADRP            X8, #xmmword_79C0@PAGE
.text:000000000002D6CC                 LDR             Q1, [X8,#xmmword_79C0@PAGEOFF]
.text:000000000002D6D0                 B               loc_2D730
.text:000000000002D6D4 ; ---------------------------------------------------------------------------
.text:000000000002D6D4 loc_2D6D4                               ; CODE XREF: __addtf3+418↑j
.text:000000000002D6D4                 EOR             X14, X11, #0x7FFF000000000000
.text:000000000002D6D8                 ORR             X14, X13, X14
.text:000000000002D6DC                 CBZ             X14, loc_2D730
.text:000000000002D6E0                 ORR             X14, X10, X12
.text:000000000002D6E4                 CBZ             X14, loc_2D748
.text:000000000002D6E8                 ORR             X14, X13, X11
.text:000000000002D6EC                 MOV             V1.16B, V0.16B
.text:000000000002D6F0                 CBNZ            X14, loc_2D2F4
.text:000000000002D6F4                 B               loc_2D730
.text:000000000002D6F8 ; ---------------------------------------------------------------------------
.text:000000000002D6F8 loc_2D6F8                               ; CODE XREF: __addtf3+3D8↑j
.text:000000000002D6F8                 CMP             X21, #0
.text:000000000002D6FC                 CSET            W8, EQ
.text:000000000002D700                 B               loc_2D70C
.text:000000000002D704 ; ---------------------------------------------------------------------------
.text:000000000002D704 loc_2D704                               ; CODE XREF: __addtf3+3E0↑j
.text:000000000002D704                 CMP             X21, #0
.text:000000000002D708                 CSET            W8, NE
.text:000000000002D70C loc_2D70C                               ; CODE XREF: __addtf3+47C↑j
.text:000000000002D70C                 CMP             W22, #0
.text:000000000002D710                 CSET            W9, NE
.text:000000000002D714                 AND             W8, W8, W9
.text:000000000002D718                 ADDS            X19, X19, X8
.text:000000000002D71C                 ADCS            X20, X20, XZR
.text:000000000002D720 loc_2D720                               ; CODE XREF: __addtf3+3E4↑j
.text:000000000002D720                                         ; __addtf3+3FC↑j
.text:000000000002D720                 CBZ             W22, loc_2D728
.text:000000000002D724 loc_2D724                               ; CODE XREF: __addtf3+40C↑j
.text:000000000002D724                 BL              .__fe_raise_inexact
.text:000000000002D728 loc_2D728                               ; CODE XREF: __addtf3:loc_2D720↑j
.text:000000000002D728                 STP             X19, X20, [SP,#0xA0+var_60]
.text:000000000002D72C                 LDR             Q1, [SP,#0xA0+var_60]
.text:000000000002D730 loc_2D730                               ; CODE XREF: __addtf3+1AC↑j
.text:000000000002D730                                         ; __addtf3+1D4↑j ...
.text:000000000002D730                 LDP             X19, X30, [SP,#0xA0+var_10]
.text:000000000002D734                 LDP             X21, X20, [SP,#0xA0+var_20]
.text:000000000002D738                 LDR             X22, [SP,#0xA0+var_30]
.text:000000000002D73C                 MOV             V0.16B, V1.16B
.text:000000000002D740                 ADD             SP, SP, #0xA0
.text:000000000002D744                 RET
.text:000000000002D748 ; ---------------------------------------------------------------------------
.text:000000000002D748 loc_2D748                               ; CODE XREF: __addtf3+460↑j
.text:000000000002D748                 ORR             X11, X13, X11
.text:000000000002D74C                 CBNZ            X11, loc_2D730
.text:000000000002D750                 AND             X10, X13, X10
.text:000000000002D754                 AND             X8, X9, X8
.text:000000000002D758                 STP             X10, X8, [SP,#0xA0+var_80]
.text:000000000002D75C                 LDR             Q1, [SP,#0xA0+var_80]
.text:000000000002D760                 B               loc_2D730
.text:000000000002D760 ; } // starts at 2D284
.text:000000000002D760 ; End of function __addtf3
.text:000000000002D764 ; =============== S U B R O U T I N E =======================================
.text:000000000002D764                 EXPORT __fe_getround
.text:000000000002D764 __fe_getround                           ; CODE XREF: .__fe_getround+C↓j
.text:000000000002D764                                         ; DATA XREF: LOAD:00000000000022E0↑o ...
.text:000000000002D764 ; __unwind {
.text:000000000002D764                 MRS             X8, #3, c4, c4, #0
.text:000000000002D768                 UBFX            X8, X8, #0x16, #2
.text:000000000002D76C                 SUB             X8, X8, #1
.text:000000000002D770                 CMP             X8, #2
.text:000000000002D774                 B.HI            loc_2D788
.text:000000000002D778                 ADRP            X9, #unk_18C9C@PAGE
.text:000000000002D77C                 ADD             X9, X9, #unk_18C9C@PAGEOFF
.text:000000000002D780                 LDR             W0, [X9,X8,LSL#2]
.text:000000000002D784                 RET
.text:000000000002D788 ; ---------------------------------------------------------------------------
.text:000000000002D788 loc_2D788                               ; CODE XREF: __fe_getround+10↑j
.text:000000000002D788                 MOV             W0, WZR
.text:000000000002D78C                 RET
.text:000000000002D78C ; } // starts at 2D764
.text:000000000002D78C ; End of function __fe_getround
.text:000000000002D790 ; =============== S U B R O U T I N E =======================================
.text:000000000002D790                 EXPORT __fe_raise_inexact
.text:000000000002D790 __fe_raise_inexact                      ; CODE XREF: .__fe_raise_inexact+C↓j
.text:000000000002D790                                         ; DATA XREF: LOAD:0000000000000C18↑o ...
.text:000000000002D790 ; __unwind {
.text:000000000002D790                 MRS             X8, #3, c4, c4, #1
.text:000000000002D794                 MOV             W0, WZR
.text:000000000002D798                 ORR             X8, X8, #0x10
.text:000000000002D79C                 MSR             #3, c4, c4, #1, X8
.text:000000000002D7A0                 RET
.text:000000000002D7A0 ; } // starts at 2D790
.text:000000000002D7A0 ; End of function __fe_raise_inexact
.text:000000000002D7A4 ; ---------------------------------------------------------------------------
.text:000000000002D7A4 ; START OF FUNCTION CHUNK FOR sub_1CD30
.text:000000000002D7A4 loc_2D7A4                               ; CODE XREF: sub_1CD30+2D4↑j
.text:000000000002D7A4                 LDR             X0, [X0,#_ZGVN4core9StateInfo13mFixClockPropE_ptr@PAGEOFF] ; __guard *
.text:000000000002D7A8                 B               loc_1D008
.text:000000000002D7A8 ; END OF FUNCTION CHUNK FOR sub_1CD30
.text:000000000002D7A8 ; .text         ends
.got:0000000000030908                                         ; DATA XREF: .text:0000000000020FD8↑o
.got:0000000000030908                                         ; .text:0000000000020FE0↑r ...
