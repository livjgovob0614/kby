.text:0000000000001E40 ; ===========================================================================
.text:0000000000001E40 ; Segment type: Pure code
.text:0000000000001E40                 AREA .text, CODE
.text:0000000000001E40                 ; ORG 0x1E40
.text:0000000000001E40                 CODE64
.text:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E40                 EXPORT __on_dlclose
.text:0000000000001E40 __on_dlclose                            ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001E40                                         ; LOAD:0000000000000430↑o ...
.text:0000000000001E40                 ADRP            X0, #__dso_handle@PAGE
.text:0000000000001E44                 ADD             X0, X0, #__dso_handle@PAGEOFF ; void *
.text:0000000000001E48                 B               .__cxa_finalize
.text:0000000000001E48 ; End of function __on_dlclose
.text:0000000000001E4C ; =============== S U B R O U T I N E =======================================
.text:0000000000001E4C ; Attributes: bp-based frame
.text:0000000000001E4C __atexit_handler_wrapper                ; DATA XREF: atexit+8↓o
.text:0000000000001E4C                                         ; atexit+10↓o
.text:0000000000001E4C var_s0          =  0
.text:0000000000001E4C                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000001E50                 MOV             X29, SP
.text:0000000000001E54                 CBZ             X0, loc_1E5C
.text:0000000000001E58                 BLR             X0
.text:0000000000001E5C loc_1E5C                                ; CODE XREF: __atexit_handler_wrapper+8↑j
.text:0000000000001E5C                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000001E60                 RET
.text:0000000000001E60 ; End of function __atexit_handler_wrapper
.text:0000000000001E64 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E64 ; __int64 __fastcall atexit(void *obj)
.text:0000000000001E64 atexit
.text:0000000000001E64                 MOV             X1, X0  ; obj
.text:0000000000001E68                 ADRP            X2, #__dso_handle@PAGE
.text:0000000000001E6C                 ADRP            X0, #__atexit_handler_wrapper@PAGE
.text:0000000000001E70                 ADD             X2, X2, #__dso_handle@PAGEOFF ; lpdso_handle
.text:0000000000001E74                 ADD             X0, X0, #__atexit_handler_wrapper@PAGEOFF ; lpfunc
.text:0000000000001E78                 B               .__cxa_atexit
.text:0000000000001E78 ; End of function atexit
.text:0000000000001E7C ; =============== S U B R O U T I N E =======================================
.text:0000000000001E7C pthread_atfork
.text:0000000000001E7C                 ADRP            X3, #__dso_handle@PAGE
.text:0000000000001E80                 ADD             X3, X3, #__dso_handle@PAGEOFF
.text:0000000000001E84                 B               .__register_atfork
.text:0000000000001E84 ; End of function pthread_atfork
.text:0000000000001E88 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E88 ; Attributes: bp-based frame
.text:0000000000001E88 ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_Init(SAG_VM_Score *__hidden this)
.text:0000000000001E88                 EXPORT _ZN12SAG_VM_Score17SAG_VM_Score_InitEv
.text:0000000000001E88 _ZN12SAG_VM_Score17SAG_VM_Score_InitEv  ; DATA XREF: LOAD:0000000000000928↑o
.text:0000000000001E88                                         ; .data.rel.ro:0000000000018590↓o
.text:0000000000001E88 var_20          = -0x20
.text:0000000000001E88 timer           = -0x18
.text:0000000000001E88 var_10          = -0x10
.text:0000000000001E88 var_s0          =  0
.text:0000000000001E88 ; __unwind {
.text:0000000000001E88                 STR             X21, [SP,#-0x10+var_20]!
.text:0000000000001E8C                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000001E90                 STP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000001E94                 ADD             X29, SP, #0x20
.text:0000000000001E98                 ADRP            X1, #aSagVmScoreA64@PAGE ; "SAG_VM_SCORE a64"
.text:0000000000001E9C                 ADRP            X2, #aSagVmScoreInit@PAGE ; "SAG_VM_Score_Init %d\n"
.text:0000000000001EA0                 MOV             X20, X0
.text:0000000000001EA4                 ADD             X1, X1, #aSagVmScoreA64@PAGEOFF ; "SAG_VM_SCORE a64"
.text:0000000000001EA8                 ADD             X2, X2, #aSagVmScoreInit@PAGEOFF ; "SAG_VM_Score_Init %d\n"
.text:0000000000001EAC                 MOV             W0, #4
.text:0000000000001EB0                 BL              .__android_log_print
.text:0000000000001EB4                 ADD             X19, X20, #0x60 ; '`'
.text:0000000000001EB8                 MOV             W2, #0xD24 ; n
.text:0000000000001EBC                 MOV             X0, X19 ; s
.text:0000000000001EC0                 MOV             W1, WZR ; c
.text:0000000000001EC4                 STP             XZR, XZR, [X20,#0x20]
.text:0000000000001EC8                 STP             XZR, XZR, [X20,#0x10]
.text:0000000000001ECC                 STR             XZR, [X20,#8]
.text:0000000000001ED0                 STR             WZR, [X20,#0x30]
.text:0000000000001ED4                 BL              .memset
.text:0000000000001ED8                 MOV             X8, #0xFFFFFFFFFFFFFFFF
.text:0000000000001EDC                 ADD             X0, SP, #0x20+timer ; timer
.text:0000000000001EE0                 STUR            X8, [X20,#0x54]
.text:0000000000001EE4                 STUR            X8, [X20,#0x4C]
.text:0000000000001EE8                 STUR            X8, [X20,#0x44]
.text:0000000000001EEC                 STUR            X8, [X20,#0x3C]
.text:0000000000001EF0                 STUR            X8, [X20,#0x34]
.text:0000000000001EF4                 BL              .time
.text:0000000000001EF8                 STR             X0, [SP,#0x20+timer]
.text:0000000000001EFC                 ADD             X0, SP, #0x20+timer ; timer
.text:0000000000001F00                 BL              .localtime
.text:0000000000001F04                 LDR             W8, [X0,#0x14]
.text:0000000000001F08                 ADD             X21, X20, #0xDD0
.text:0000000000001F0C                 ADRP            X1, #aRb@PAGE ; "rb"
.text:0000000000001F10                 ADD             X1, X1, #aRb@PAGEOFF ; "rb"
.text:0000000000001F14                 ADD             W8, W8, #0x76C
.text:0000000000001F18                 STRH            W8, [X20,#0xD5C]
.text:0000000000001F1C                 LDR             W8, [X0,#0x10]
.text:0000000000001F20                 STRH            W8, [X20,#0xD5E]
.text:0000000000001F24                 LDR             W8, [X0,#0xC]
.text:0000000000001F28                 STRH            W8, [X20,#0xD60]
.text:0000000000001F2C                 LDR             W8, [X0,#8]
.text:0000000000001F30                 STRH            W8, [X20,#0xD62]
.text:0000000000001F34                 LDR             W8, [X0,#4]
.text:0000000000001F38                 STRH            W8, [X20,#0xD64]
.text:0000000000001F3C                 LDR             W8, [X0]
.text:0000000000001F40                 MOV             X0, X21 ; filename
.text:0000000000001F44                 STRH            W8, [X20,#0xD66]
.text:0000000000001F48                 BL              .fopen
.text:0000000000001F4C                 MOV             X8, X0
.text:0000000000001F50                 STR             X8, [X20,#0xDC8]
.text:0000000000001F54                 CBZ             X8, loc_1F7C
.text:0000000000001F58                 MOV             W1, #1  ; size
.text:0000000000001F5C                 MOV             W2, #0xD20 ; n
.text:0000000000001F60                 MOV             X0, X19 ; ptr
.text:0000000000001F64                 MOV             X3, X8  ; stream
.text:0000000000001F68                 BL              .fread
.text:0000000000001F6C                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000001F70                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000001F74                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000001F78                 RET
.text:0000000000001F7C ; ---------------------------------------------------------------------------
.text:0000000000001F7C loc_1F7C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Init(void)+CC↑j
.text:0000000000001F7C                 ADRP            X1, #aWb@PAGE ; "wb"
.text:0000000000001F80                 ADD             X1, X1, #aWb@PAGEOFF ; "wb"
.text:0000000000001F84                 MOV             X0, X21 ; filename
.text:0000000000001F88                 BL              .fopen
.text:0000000000001F8C                 MOV             X8, X0
.text:0000000000001F90                 STR             X8, [X20,#0xDC8]
.text:0000000000001F94                 CBZ             X8, loc_1FBC
.text:0000000000001F98                 MOV             W1, #1  ; size
.text:0000000000001F9C                 MOV             W2, #0xD20 ; n
.text:0000000000001FA0                 MOV             X0, X19 ; ptr
.text:0000000000001FA4                 MOV             X3, X8  ; s
.text:0000000000001FA8                 BL              .fwrite
.text:0000000000001FAC                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000001FB0                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000001FB4                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000001FB8                 RET
.text:0000000000001FBC ; ---------------------------------------------------------------------------
.text:0000000000001FBC loc_1FBC                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Init(void)+10C↑j
.text:0000000000001FBC                 ADRP            X1, #aSagVmScoreA64@PAGE ; "SAG_VM_SCORE a64"
.text:0000000000001FC0                 ADRP            X2, #aSagVmScoreInit_0@PAGE ; "SAG_VM_Score_Init Failed to create file"...
.text:0000000000001FC4                 ADD             X1, X1, #aSagVmScoreA64@PAGEOFF ; "SAG_VM_SCORE a64"
.text:0000000000001FC8                 ADD             X2, X2, #aSagVmScoreInit_0@PAGEOFF ; "SAG_VM_Score_Init Failed to create file"...
.text:0000000000001FCC                 MOV             W0, #6
.text:0000000000001FD0                 BL              .__android_log_print
.text:0000000000001FD4                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000001FD8                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000001FDC                 LDR             X21, [SP+0x20+var_20],#0x30
.text:0000000000001FE0                 RET
.text:0000000000001FE0 ; } // starts at 1E88
.text:0000000000001FE0 ; End of function SAG_VM_Score::SAG_VM_Score_Init(void)
.text:0000000000001FE4 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FE4 ; Attributes: bp-based frame
.text:0000000000001FE4 ; SAG_VM_Score::SAG_VM_Score_Get_Time(DateTime *)
.text:0000000000001FE4                 EXPORT _ZN12SAG_VM_Score21SAG_VM_Score_Get_TimeEP8DateTime
.text:0000000000001FE4 _ZN12SAG_VM_Score21SAG_VM_Score_Get_TimeEP8DateTime
.text:0000000000001FE4                                         ; DATA XREF: LOAD:0000000000000850↑o
.text:0000000000001FE4 var_10          = -0x10
.text:0000000000001FE4 timer           = -8
.text:0000000000001FE4 var_s0          =  0
.text:0000000000001FE4 ; __unwind {
.text:0000000000001FE4                 STR             X19, [SP,#-0x10+var_10]!
.text:0000000000001FE8                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000001FEC                 ADD             X29, SP, #0x10
.text:0000000000001FF0                 ADD             X0, SP, #0x10+timer ; timer
.text:0000000000001FF4                 MOV             X19, X1
.text:0000000000001FF8                 BL              .time
.text:0000000000001FFC                 STR             X0, [SP,#0x10+timer]
.text:0000000000002000                 ADD             X0, SP, #0x10+timer ; timer
.text:0000000000002004                 BL              .localtime
.text:0000000000002008                 LDR             W8, [X0,#0x14]
.text:000000000000200C                 ADD             W8, W8, #0x76C
.text:0000000000002010                 STRH            W8, [X19]
.text:0000000000002014                 LDR             W8, [X0,#0x10]
.text:0000000000002018                 STRH            W8, [X19,#2]
.text:000000000000201C                 LDR             W8, [X0,#0xC]
.text:0000000000002020                 STRH            W8, [X19,#4]
.text:0000000000002024                 LDR             W8, [X0,#8]
.text:0000000000002028                 STRH            W8, [X19,#6]
.text:000000000000202C                 LDR             W8, [X0,#4]
.text:0000000000002030                 STRH            W8, [X19,#8]
.text:0000000000002034                 LDR             W8, [X0]
.text:0000000000002038                 STRH            W8, [X19,#0xA]
.text:000000000000203C                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000002040                 LDR             X19, [SP+0x10+var_10],#0x20
.text:0000000000002044                 RET
.text:0000000000002044 ; } // starts at 1FE4
.text:0000000000002044 ; End of function SAG_VM_Score::SAG_VM_Score_Get_Time(DateTime *)
.text:0000000000002048 ; =============== S U B R O U T I N E =======================================
.text:0000000000002048 ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_CleanBuf(SAG_VM_Score *__hidden this, unsigned int *, __int64 *)
.text:0000000000002048                 EXPORT _ZN12SAG_VM_Score21SAG_VM_Score_CleanBufEPjPx
.text:0000000000002048 _ZN12SAG_VM_Score21SAG_VM_Score_CleanBufEPjPx
.text:0000000000002048                                         ; DATA XREF: LOAD:00000000000006B8↑o
.text:0000000000002048                 STR             XZR, [X2]
.text:000000000000204C                 STR             XZR, [X1]
.text:0000000000002050                 RET
.text:0000000000002050 ; End of function SAG_VM_Score::SAG_VM_Score_CleanBuf(uint *,long long *)
.text:0000000000002054 ; =============== S U B R O U T I N E =======================================
.text:0000000000002054 ; Attributes: bp-based frame
.text:0000000000002054 ; _QWORD SAG_VM_Score::SAG_VM_Score_Reset(SAG_VM_Score *__hidden this)
.text:0000000000002054                 EXPORT _ZN12SAG_VM_Score18SAG_VM_Score_ResetEv
.text:0000000000002054 _ZN12SAG_VM_Score18SAG_VM_Score_ResetEv ; DATA XREF: LOAD:0000000000000970↑o
.text:0000000000002054                                         ; .data.rel.ro:00000000000185A0↓o
.text:0000000000002054 var_10          = -0x10
.text:0000000000002054 var_s0          =  0
.text:0000000000002054                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:0000000000002058                 MOV             X19, X0
.text:000000000000205C                 ADD             X0, X19, #0x60 ; '`' ; s
.text:0000000000002060                 MOV             W2, #0xD18 ; n
.text:0000000000002064                 MOV             W1, WZR ; c
.text:0000000000002068                 STP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000206C                 ADD             X29, SP, #0x10
.text:0000000000002070                 ADD             X20, X19, #0xD6C
.text:0000000000002074                 BL              .memset
.text:0000000000002078                 ADRP            X8, #qword_6C60@PAGE
.text:000000000000207C                 LDR             D0, [X8,#qword_6C60@PAGEOFF]
.text:0000000000002080                 ADD             X8, X19, #0xD54
.text:0000000000002084                 MOVI            D1, #0
.text:0000000000002088                 STR             D0, [X20]
.text:000000000000208C                 STR             XZR, [X19,#0xD78]
.text:0000000000002090                 STR             D1, [X8]
.text:0000000000002094                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000002098                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:000000000000209C                 RET
.text:000000000000209C ; End of function SAG_VM_Score::SAG_VM_Score_Reset(void)
.text:00000000000020A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020A0 ; Attributes: bp-based frame
.text:00000000000020A0 ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_SetPar(SAG_VM_Score *__hidden this, int)
.text:00000000000020A0                 EXPORT _ZN12SAG_VM_Score19SAG_VM_Score_SetParEi
.text:00000000000020A0 _ZN12SAG_VM_Score19SAG_VM_Score_SetParEi
.text:00000000000020A0                                         ; DATA XREF: LOAD:0000000000000700↑o
.text:00000000000020A0                                         ; .data.rel.ro:00000000000185A8↓o
.text:00000000000020A0 var_10          = -0x10
.text:00000000000020A0 var_s0          =  0
.text:00000000000020A0 ; __unwind {
.text:00000000000020A0                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000020A4                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000020A8                 ADD             X29, SP, #0x10
.text:00000000000020AC                 MOV             W19, W1
.text:00000000000020B0                 ADRP            X1, #aSagVmScoreA64@PAGE ; "SAG_VM_SCORE a64"
.text:00000000000020B4                 ADRP            X2, #aSagVmScoreSetp@PAGE ; "SAG_VM_Score_SetPar %d\n"
.text:00000000000020B8                 MOV             X20, X0
.text:00000000000020BC                 ADD             X1, X1, #aSagVmScoreA64@PAGEOFF ; "SAG_VM_SCORE a64"
.text:00000000000020C0                 ADD             X2, X2, #aSagVmScoreSetp@PAGEOFF ; "SAG_VM_Score_SetPar %d\n"
.text:00000000000020C4                 MOV             W0, #4
.text:00000000000020C8                 MOV             W3, W19
.text:00000000000020CC                 BL              .__android_log_print
.text:00000000000020D0                 BIC             W8, W19, W19,ASR#31
.text:00000000000020D4                 CMP             W8, #1
.text:00000000000020D8                 CSINC           W8, W8, WZR, LT
.text:00000000000020DC                 STR             W8, [X20,#0xD6C]
.text:00000000000020E0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000020E4                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:00000000000020E8                 RET
.text:00000000000020E8 ; } // starts at 20A0
.text:00000000000020E8 ; End of function SAG_VM_Score::SAG_VM_Score_SetPar(int)
.text:00000000000020EC ; =============== S U B R O U T I N E =======================================
.text:00000000000020EC ; Attributes: bp-based frame
.text:00000000000020EC ; SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)
.text:00000000000020EC                 EXPORT _ZN12SAG_VM_Score16SAG_VM_Score_ExeEP24SAG_VM_ENERGY_STATUS_ALL
.text:00000000000020EC _ZN12SAG_VM_Score16SAG_VM_Score_ExeEP24SAG_VM_ENERGY_STATUS_ALL
.text:00000000000020EC                                         ; DATA XREF: LOAD:0000000000000A60↑o
.text:00000000000020EC                                         ; .data.rel.ro:0000000000018598↓o
.text:00000000000020EC var_20          = -0x20
.text:00000000000020EC var_10          = -0x10
.text:00000000000020EC var_s0          =  0
.text:00000000000020EC                 SUB             SP, SP, #0x120
.text:00000000000020F0                 STP             X20, X19, [SP,#0x110+var_10]
.text:00000000000020F4                 MOV             X20, X1
.text:00000000000020F8                 MOV             X19, X0
.text:00000000000020FC                 MOV             X0, SP  ; s
.text:0000000000002100                 MOV             W2, #0xF0 ; n
.text:0000000000002104                 MOV             W1, WZR ; c
.text:0000000000002108                 STR             X28, [SP,#0x110+var_20]
.text:000000000000210C                 STP             X29, X30, [SP,#0x110+var_s0]
.text:0000000000002110                 ADD             X29, SP, #0x110
.text:0000000000002114                 BL              .memset
.text:0000000000002118                 LDRSW           X12, [X20]
.text:000000000000211C                 LDRSW           X11, [X20,#0xF4]
.text:0000000000002120                 LDRSW           X9, [X20,#0x1E8]
.text:0000000000002124                 LDR             W13, [X19,#0xED0]
.text:0000000000002128                 BIC             W10, W12, W12,ASR#31
.text:000000000000212C                 CMP             W10, W11
.text:0000000000002130                 CSEL            W10, W11, W10, LT
.text:0000000000002134                 LDR             W14, [X19,#0xED4]
.text:0000000000002138                 CMP             W10, W9
.text:000000000000213C                 CSEL            W10, W9, W10, LT
.text:0000000000002140                 MOV             W8, #0x3C ; '<'
.text:0000000000002144                 CMP             W10, #0x3C ; '<'
.text:0000000000002148                 CSEL            W8, W10, W8, LT
.text:000000000000214C                 MADD            W13, W13, W8, W14
.text:0000000000002150                 CMP             W12, #1
.text:0000000000002154                 STR             W13, [X19,#0xED4]
.text:0000000000002158                 B.LT            loc_21D4
.text:000000000000215C                 CMP             W12, #8
.text:0000000000002160                 B.CS            loc_216C
.text:0000000000002164                 MOV             X13, XZR
.text:0000000000002168                 B               loc_21AC
.text:000000000000216C ; ---------------------------------------------------------------------------
.text:000000000000216C loc_216C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+74↑j
.text:000000000000216C                 AND             X13, X12, #0xFFFFFFFFFFFFFFF8
.text:0000000000002170                 MOV             X15, SP
.text:0000000000002174                 ADD             X14, X20, #0x14
.text:0000000000002178                 ADD             X15, X15, #0x10
.text:000000000000217C                 MOV             X16, X13
.text:0000000000002180 loc_2180                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+B4↓j
.text:0000000000002180                 LDP             Q0, Q1, [X14,#-0x10]
.text:0000000000002184                 LDP             Q2, Q3, [X15,#-0x10]
.text:0000000000002188                 ADD             X14, X14, #0x20 ; ' '
.text:000000000000218C                 SUBS            X16, X16, #8
.text:0000000000002190                 FADD            V0.4S, V0.4S, V2.4S
.text:0000000000002194                 FADD            V1.4S, V1.4S, V3.4S
.text:0000000000002198                 STP             Q0, Q1, [X15,#-0x10]
.text:000000000000219C                 ADD             X15, X15, #0x20 ; ' '
.text:00000000000021A0                 B.NE            loc_2180
.text:00000000000021A4                 CMP             X13, X12
.text:00000000000021A8                 B.EQ            loc_21D4
.text:00000000000021AC loc_21AC                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+7C↑j
.text:00000000000021AC                 MOV             X14, SP
.text:00000000000021B0 loc_21B0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+E4↓j
.text:00000000000021B0                 LSL             X15, X13, #2
.text:00000000000021B4                 ADD             X16, X20, X15
.text:00000000000021B8                 LDR             S0, [X14,X15]
.text:00000000000021BC                 LDR             S1, [X16,#4]
.text:00000000000021C0                 ADD             X13, X13, #1
.text:00000000000021C4                 CMP             X13, X12
.text:00000000000021C8                 FADD            S0, S1, S0
.text:00000000000021CC                 STR             S0, [X14,X15]
.text:00000000000021D0                 B.LT            loc_21B0
.text:00000000000021D4 loc_21D4                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+6C↑j
.text:00000000000021D4                                         ; SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+BC↑j
.text:00000000000021D4                 CMP             W11, #0
.text:00000000000021D8                 B.LE            loc_2254
.text:00000000000021DC                 CMP             W11, #8
.text:00000000000021E0                 B.CS            loc_21EC
.text:00000000000021E4                 MOV             X12, XZR
.text:00000000000021E8                 B               loc_222C
.text:00000000000021EC ; ---------------------------------------------------------------------------
.text:00000000000021EC loc_21EC                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+F4↑j
.text:00000000000021EC                 AND             X12, X11, #0xFFFFFFFFFFFFFFF8
.text:00000000000021F0                 MOV             X14, SP
.text:00000000000021F4                 ADD             X13, X20, #0x108
.text:00000000000021F8                 ADD             X14, X14, #0x10
.text:00000000000021FC                 MOV             X15, X12
.text:0000000000002200 loc_2200                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+134↓j
.text:0000000000002200                 LDP             Q0, Q1, [X13,#-0x10]
.text:0000000000002204                 LDP             Q2, Q3, [X14,#-0x10]
.text:0000000000002208                 ADD             X13, X13, #0x20 ; ' '
.text:000000000000220C                 SUBS            X15, X15, #8
.text:0000000000002210                 FADD            V0.4S, V0.4S, V2.4S
.text:0000000000002214                 FADD            V1.4S, V1.4S, V3.4S
.text:0000000000002218                 STP             Q0, Q1, [X14,#-0x10]
.text:000000000000221C                 ADD             X14, X14, #0x20 ; ' '
.text:0000000000002220                 B.NE            loc_2200
.text:0000000000002224                 CMP             X12, X11
.text:0000000000002228                 B.EQ            loc_2254
.text:000000000000222C loc_222C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+FC↑j
.text:000000000000222C                 MOV             X13, SP
.text:0000000000002230 loc_2230                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+164↓j
.text:0000000000002230                 LSL             X14, X12, #2
.text:0000000000002234                 ADD             X15, X20, X14
.text:0000000000002238                 LDR             S0, [X13,X14]
.text:000000000000223C                 LDR             S1, [X15,#0xF8]
.text:0000000000002240                 ADD             X12, X12, #1
.text:0000000000002244                 CMP             X12, X11
.text:0000000000002248                 FADD            S0, S1, S0
.text:000000000000224C                 STR             S0, [X13,X14]
.text:0000000000002250                 B.LT            loc_2230
.text:0000000000002254 loc_2254                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+EC↑j
.text:0000000000002254                                         ; SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+13C↑j
.text:0000000000002254                 CMP             W9, #1
.text:0000000000002258                 B.LT            loc_22D4
.text:000000000000225C                 CMP             W9, #8
.text:0000000000002260                 B.CS            loc_226C
.text:0000000000002264                 MOV             X11, XZR
.text:0000000000002268                 B               loc_22AC
.text:000000000000226C ; ---------------------------------------------------------------------------
.text:000000000000226C loc_226C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+174↑j
.text:000000000000226C                 AND             X11, X9, #0xFFFFFFFFFFFFFFF8
.text:0000000000002270                 MOV             X13, SP
.text:0000000000002274                 ADD             X12, X20, #0x1FC
.text:0000000000002278                 ADD             X13, X13, #0x10
.text:000000000000227C                 MOV             X14, X11
.text:0000000000002280 loc_2280                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+1B4↓j
.text:0000000000002280                 LDP             Q0, Q1, [X12,#-0x10]
.text:0000000000002284                 LDP             Q2, Q3, [X13,#-0x10]
.text:0000000000002288                 ADD             X12, X12, #0x20 ; ' '
.text:000000000000228C                 SUBS            X14, X14, #8
.text:0000000000002290                 FADD            V0.4S, V0.4S, V2.4S
.text:0000000000002294                 FADD            V1.4S, V1.4S, V3.4S
.text:0000000000002298                 STP             Q0, Q1, [X13,#-0x10]
.text:000000000000229C                 ADD             X13, X13, #0x20 ; ' '
.text:00000000000022A0                 B.NE            loc_2280
.text:00000000000022A4                 CMP             X11, X9
.text:00000000000022A8                 B.EQ            loc_22D4
.text:00000000000022AC loc_22AC                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+17C↑j
.text:00000000000022AC                 MOV             X12, SP
.text:00000000000022B0 loc_22B0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+1E4↓j
.text:00000000000022B0                 LSL             X13, X11, #2
.text:00000000000022B4                 ADD             X14, X20, X13
.text:00000000000022B8                 LDR             S0, [X12,X13]
.text:00000000000022BC                 LDR             S1, [X14,#0x1EC]
.text:00000000000022C0                 ADD             X11, X11, #1
.text:00000000000022C4                 CMP             X11, X9
.text:00000000000022C8                 FADD            S0, S1, S0
.text:00000000000022CC                 STR             S0, [X12,X13]
.text:00000000000022D0                 B.LT            loc_22B0
.text:00000000000022D4 loc_22D4                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+16C↑j
.text:00000000000022D4                                         ; SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+1BC↑j
.text:00000000000022D4                 CMP             W10, #0
.text:00000000000022D8                 B.LE            loc_23D8
.text:00000000000022DC                 LDR             S1, [X19,#0x2C]
.text:00000000000022E0                 LDR             S0, [X19,#0xD80]
.text:00000000000022E4                 LDR             W11, [X19,#0x28]
.text:00000000000022E8                 ADRP            X13, #_ZL15m_Ear_risk_thrs@PAGE ; m_Ear_risk_thrs
.text:00000000000022EC                 ADRP            X15, #_ZL16m_Ear_risk_score@PAGE ; m_Ear_risk_score
.text:00000000000022F0                 ADRP            X16, #_ZL13m_Ear_risk_db@PAGE ; m_Ear_risk_db
.text:00000000000022F4                 MOV             X9, XZR
.text:00000000000022F8                 MOV             W10, W8
.text:00000000000022FC                 FMOV            S3, WZR
.text:0000000000002300                 MOV             X12, SP
.text:0000000000002304                 ADD             X13, X13, #_ZL15m_Ear_risk_thrs@PAGEOFF ; m_Ear_risk_thrs
.text:0000000000002308                 MOV             X14, #0xFFFFFFFF00000000
.text:000000000000230C                 ADD             X15, X15, #_ZL16m_Ear_risk_score@PAGEOFF ; m_Ear_risk_score
.text:0000000000002310                 ADD             X16, X16, #_ZL13m_Ear_risk_db@PAGEOFF ; m_Ear_risk_db
.text:0000000000002314                 FMOV            S2, #6.0
.text:0000000000002318                 FMOV            S4, WZR
.text:000000000000231C loc_231C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+278↓j
.text:000000000000231C                                         ; SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+2DC↓j
.text:000000000000231C                 LDR             S5, [X12,X9,LSL#2]
.text:0000000000002320                 MOV             W17, #1
.text:0000000000002324 loc_2324                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+250↓j
.text:0000000000002324                 LDR             S6, [X13,X17,LSL#2]
.text:0000000000002328                 FCMP            S5, S6
.text:000000000000232C                 B.MI            loc_2370
.text:0000000000002330                 ADD             X18, X17, #1
.text:0000000000002334                 CMP             X17, #0x65 ; 'e'
.text:0000000000002338                 MOV             X17, X18
.text:000000000000233C                 B.CC            loc_2324
.text:0000000000002340                 CMP             W18, #0x66 ; 'f'
.text:0000000000002344                 B.EQ            loc_236C
.text:0000000000002348                 ADD             W11, W11, #1
.text:000000000000234C                 CMP             W11, #6
.text:0000000000002350                 FADD            S1, S3, S1
.text:0000000000002354                 B.EQ            loc_2390
.text:0000000000002358 loc_2358                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+2A0↓j
.text:0000000000002358                 ADD             X9, X9, #1
.text:000000000000235C                 CMP             X9, X10
.text:0000000000002360                 FADD            S0, S4, S0
.text:0000000000002364                 B.LT            loc_231C
.text:0000000000002368                 B               loc_23CC
.text:000000000000236C ; ---------------------------------------------------------------------------
.text:000000000000236C loc_236C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+258↑j
.text:000000000000236C                 MOV             W17, #0x66 ; 'f'
.text:0000000000002370 loc_2370                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+240↑j
.text:0000000000002370                 ADD             X17, X14, X17,LSL#32
.text:0000000000002374                 ASR             X17, X17, #0x1E
.text:0000000000002378                 LDR             S4, [X15,X17]
.text:000000000000237C                 LDR             S3, [X16,X17]
.text:0000000000002380                 ADD             W11, W11, #1
.text:0000000000002384                 CMP             W11, #6
.text:0000000000002388                 FADD            S1, S3, S1
.text:000000000000238C                 B.NE            loc_2358
.text:0000000000002390 loc_2390                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+268↑j
.text:0000000000002390                 LDR             W17, [X19,#0x54]
.text:0000000000002394                 LDUR            Q5, [X19,#0x44]
.text:0000000000002398                 LDUR            Q6, [X19,#0x34]
.text:000000000000239C                 FDIV            S1, S1, S2
.text:00000000000023A0                 MOV             W11, WZR
.text:00000000000023A4                 FCVTMS          W18, S1
.text:00000000000023A8                 FMOV            S1, WZR
.text:00000000000023AC                 STR             W18, [X19,#0x34]
.text:00000000000023B0                 STR             W17, [X19,#0x58]
.text:00000000000023B4                 STUR            Q5, [X19,#0x48]
.text:00000000000023B8                 STUR            Q6, [X19,#0x38]
.text:00000000000023BC                 ADD             X9, X9, #1
.text:00000000000023C0                 CMP             X9, X10
.text:00000000000023C4                 FADD            S0, S4, S0
.text:00000000000023C8                 B.LT            loc_231C
.text:00000000000023CC loc_23CC                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+27C↑j
.text:00000000000023CC                 STR             W11, [X19,#0x28]
.text:00000000000023D0                 STR             S1, [X19,#0x2C]
.text:00000000000023D4                 STR             S0, [X19,#0xD80]
.text:00000000000023D8 loc_23D8                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+1EC↑j
.text:00000000000023D8                 CMP             W8, #0
.text:00000000000023DC                 B.GT            loc_23F0
.text:00000000000023E0                 MOVI            V0.2D, #0
.text:00000000000023E4                 STUR            XZR, [X19,#0x54]
.text:00000000000023E8                 STUR            Q0, [X19,#0x44]
.text:00000000000023EC                 STUR            Q0, [X19,#0x34]
.text:00000000000023F0 loc_23F0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)+2F0↑j
.text:00000000000023F0                 LDP             X29, X30, [SP,#0x110+var_s0]
.text:00000000000023F4                 LDP             X20, X19, [SP,#0x110+var_10]
.text:00000000000023F8                 LDR             X28, [SP,#0x110+var_20]
.text:00000000000023FC                 ADD             SP, SP, #0x120
.text:0000000000002400                 RET
.text:0000000000002400 ; End of function SAG_VM_Score::SAG_VM_Score_Exe(SAG_VM_ENERGY_STATUS_ALL *)
.text:0000000000002404 ; =============== S U B R O U T I N E =======================================
.text:0000000000002404 ; SAG_VM_Score::SAG_VM_Score_Timediff_Calc(DateTime *, DateTime *)
.text:0000000000002404                 EXPORT _ZN12SAG_VM_Score26SAG_VM_Score_Timediff_CalcEP8DateTimeS1_
.text:0000000000002404 _ZN12SAG_VM_Score26SAG_VM_Score_Timediff_CalcEP8DateTimeS1_
.text:0000000000002404                                         ; DATA XREF: LOAD:0000000000000628↑o
.text:0000000000002404                 LDRSH           W9, [X1]
.text:0000000000002408                 LDRSH           W8, [X2]
.text:000000000000240C                 SUB             W8, W9, W8
.text:0000000000002410                 CMP             W8, #1
.text:0000000000002414                 B.GT            loc_24F8
.text:0000000000002418                 LDRSH           W10, [X1,#2]
.text:000000000000241C                 LDRSH           W11, [X2,#2]
.text:0000000000002420                 MOV             W12, #0xC
.text:0000000000002424                 MADD            W8, W8, W12, W10
.text:0000000000002428                 SUB             W8, W8, W11
.text:000000000000242C                 CMP             W8, #1
.text:0000000000002430                 B.GT            loc_2504
.text:0000000000002434                 SUB             W11, W10, #1
.text:0000000000002438                 CMP             W10, #0
.text:000000000000243C                 MOV             W10, #0xB
.text:0000000000002440                 CSEL            W11, W10, W11, EQ
.text:0000000000002444                 ADRP            X10, #unk_71EC@PAGE
.text:0000000000002448                 ADD             X10, X10, #unk_71EC@PAGEOFF
.text:000000000000244C                 LDR             W10, [X10,W11,SXTW#2]
.text:0000000000002450                 CMP             W11, #1
.text:0000000000002454                 B.NE            loc_249C
.text:0000000000002458                 MOV             W11, #0x51EB851F
.text:0000000000002460                 SMULL           X11, W9, W11
.text:0000000000002464                 ASR             X13, X11, #0x25 ; '%'
.text:0000000000002468                 LSR             X14, X11, #0x3F ; '?'
.text:000000000000246C                 MOV             W12, #0x64 ; 'd'
.text:0000000000002470                 ASR             X11, X11, #0x27 ; '''
.text:0000000000002474                 ADD             W13, W13, W14
.text:0000000000002478                 ADD             W11, W11, W14
.text:000000000000247C                 MOV             W14, #0x190
.text:0000000000002480                 TST             W9, #3
.text:0000000000002484                 MSUB            W12, W13, W12, W9
.text:0000000000002488                 MSUB            W9, W11, W14, W9
.text:000000000000248C                 CCMP            W12, #0, #4, EQ
.text:0000000000002490                 CCMP            W9, #0, #4, EQ
.text:0000000000002494                 MOV             W9, #0x1D
.text:0000000000002498                 CSEL            W10, W9, W10, EQ
.text:000000000000249C loc_249C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Timediff_Calc(DateTime *,DateTime *)+50↑j
.text:000000000000249C                 LDRSH           W9, [X1,#4]
.text:00000000000024A0                 LDRSH           W11, [X2,#4]
.text:00000000000024A4                 MADD            W8, W10, W8, W9
.text:00000000000024A8                 SUB             W8, W8, W11
.text:00000000000024AC                 CMP             W8, #2
.text:00000000000024B0                 B.GT            loc_2510
.text:00000000000024B4                 LDRSH           W10, [X1,#6]
.text:00000000000024B8                 LDRSH           W11, [X2,#6]
.text:00000000000024BC                 LDRSH           W15, [X1,#8]
.text:00000000000024C0                 MOV             W9, #0x18
.text:00000000000024C4                 LDRSH           W13, [X1,#0xA]
.text:00000000000024C8                 LDRSH           W14, [X2,#0xA]
.text:00000000000024CC                 LDRSH           W16, [X2,#8]
.text:00000000000024D0                 MADD            W8, W8, W9, W10
.text:00000000000024D4                 MOV             W12, #0x3C ; '<'
.text:00000000000024D8                 SUB             W8, W8, W11
.text:00000000000024DC                 MADD            W8, W8, W12, W15
.text:00000000000024E0                 SUB             W9, W13, W14
.text:00000000000024E4                 SUB             W8, W8, W16
.text:00000000000024E8                 MADD            W8, W8, W12, W9
.text:00000000000024EC                 MOV             W9, #1
.text:00000000000024F0                 MUL             W0, W9, W8
.text:00000000000024F4                 RET
.text:00000000000024F8 ; ---------------------------------------------------------------------------
.text:00000000000024F8 loc_24F8                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Timediff_Calc(DateTime *,DateTime *)+10↑j
.text:00000000000024F8                 MOV             W9, #0xFFFFFFFF
.text:00000000000024FC                 MUL             W0, W9, W8
.text:0000000000002500                 RET
.text:0000000000002504 ; ---------------------------------------------------------------------------
.text:0000000000002504 loc_2504                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Timediff_Calc(DateTime *,DateTime *)+2C↑j
.text:0000000000002504                 MOV             W9, #0xFFFFFFFF
.text:0000000000002508                 MUL             W0, W9, W8
.text:000000000000250C                 RET
.text:0000000000002510 ; ---------------------------------------------------------------------------
.text:0000000000002510 loc_2510                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Timediff_Calc(DateTime *,DateTime *)+AC↑j
.text:0000000000002510                 MOV             W9, #0xFFFFFFFF
.text:0000000000002514                 MUL             W0, W9, W8
.text:0000000000002518                 RET
.text:0000000000002518 ; End of function SAG_VM_Score::SAG_VM_Score_Timediff_Calc(DateTime *,DateTime *)
.text:000000000000251C ; =============== S U B R O U T I N E =======================================
.text:000000000000251C ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_Get_Loudness_Status(SAG_VM_Score *__hidden this)
.text:000000000000251C                 EXPORT _ZN12SAG_VM_Score32SAG_VM_Score_Get_Loudness_StatusEv
.text:000000000000251C _ZN12SAG_VM_Score32SAG_VM_Score_Get_Loudness_StatusEv
.text:000000000000251C                                         ; DATA XREF: LOAD:00000000000006E8↑o
.text:000000000000251C                                         ; .data.rel.ro:00000000000185F0↓o
.text:000000000000251C                 LDR             W0, [X0,#0xD68]
.text:0000000000002520                 RET
.text:0000000000002520 ; End of function SAG_VM_Score::SAG_VM_Score_Get_Loudness_Status(void)
.text:0000000000002524 ; =============== S U B R O U T I N E =======================================
.text:0000000000002524 ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_Get_Percent(SAG_VM_Score *__hidden this)
.text:0000000000002524                 EXPORT _ZN12SAG_VM_Score24SAG_VM_Score_Get_PercentEv
.text:0000000000002524 _ZN12SAG_VM_Score24SAG_VM_Score_Get_PercentEv
.text:0000000000002524                                         ; DATA XREF: LOAD:0000000000000580↑o
.text:0000000000002524                                         ; .data.rel.ro:00000000000185E8↓o
.text:0000000000002524                 LDR             W0, [X0,#0xD70]
.text:0000000000002528                 RET
.text:0000000000002528 ; End of function SAG_VM_Score::SAG_VM_Score_Get_Percent(void)
.text:000000000000252C ; =============== S U B R O U T I N E =======================================
.text:000000000000252C ; Attributes: bp-based frame
.text:000000000000252C ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float, DateTime *)
.text:000000000000252C                 EXPORT _ZN12SAG_VM_Score35SAG_VM_Score_Hearing_History_UpdateEfP8DateTime
.text:000000000000252C _ZN12SAG_VM_Score35SAG_VM_Score_Hearing_History_UpdateEfP8DateTime
.text:000000000000252C                                         ; DATA XREF: LOAD:0000000000000490↑o
.text:000000000000252C                                         ; .data.rel.ro:00000000000185E0↓o
.text:000000000000252C var_20          = -0x20
.text:000000000000252C var_18          = -0x18
.text:000000000000252C var_10          = -0x10
.text:000000000000252C var_s0          =  0
.text:000000000000252C ; __unwind {
.text:000000000000252C                 STR             D8, [SP,#-0x10+var_20]!
.text:0000000000002530                 STR             X21, [SP,#0x20+var_18]
.text:0000000000002534                 STP             X20, X19, [SP,#0x20+var_10]
.text:0000000000002538                 STP             X29, X30, [SP,#0x20+var_s0]
.text:000000000000253C                 ADD             X29, SP, #0x20
.text:0000000000002540                 MOV             X19, X0
.text:0000000000002544                 LDR             W8, [X19,#0xD6C]
.text:0000000000002548                 MOV             X20, X1
.text:000000000000254C                 MOV             V8.16B, V0.16B
.text:0000000000002550                 CBZ             W8, loc_2FD8
.text:0000000000002554                 LDRSH           W15, [X20]
.text:0000000000002558                 LDRSH           W8, [X19,#0xD5C]
.text:000000000000255C                 SUB             W8, W15, W8
.text:0000000000002560                 CMP             W8, #1
.text:0000000000002564                 B.GT            loc_2680
.text:0000000000002568                 LDRSH           W18, [X20,#2]
.text:000000000000256C                 LDRSH           W9, [X19,#0xD5E]
.text:0000000000002570                 MOV             W10, #0xC
.text:0000000000002574                 MADD            W8, W8, W10, W18
.text:0000000000002578                 SUB             W8, W8, W9
.text:000000000000257C                 CMP             W8, #1
.text:0000000000002580                 B.GT            loc_2680
.text:0000000000002584                 SUB             W0, W18, #1
.text:0000000000002588                 CMP             W18, #0
.text:000000000000258C                 MOV             W18, #0xB
.text:0000000000002590                 CSEL            W0, W18, W0, EQ
.text:0000000000002594                 ADRP            X18, #unk_71EC@PAGE
.text:0000000000002598                 ADD             X18, X18, #unk_71EC@PAGEOFF
.text:000000000000259C                 LDRSH           W16, [X20,#4]
.text:00000000000025A0                 LDRSH           W10, [X20,#6]
.text:00000000000025A4                 LDRSH           W9, [X20,#8]
.text:00000000000025A8                 LDRSH           W17, [X19,#0xD60]
.text:00000000000025AC                 LDRSH           W14, [X19,#0xD62]
.text:00000000000025B0                 LDRSH           W11, [X19,#0xD64]
.text:00000000000025B4                 LDRSH           X12, [X20,#0xA]
.text:00000000000025B8                 LDRSH           X13, [X19,#0xD66]
.text:00000000000025BC                 LDR             W18, [X18,W0,SXTW#2]
.text:00000000000025C0                 CMP             W0, #1
.text:00000000000025C4                 B.NE            loc_260C
.text:00000000000025C8                 MOV             W0, #0x51EB851F
.text:00000000000025D0                 SMULL           X0, W15, W0
.text:00000000000025D4                 ASR             X2, X0, #0x25 ; '%'
.text:00000000000025D8                 LSR             X3, X0, #0x3F ; '?'
.text:00000000000025DC                 MOV             W1, #0x64 ; 'd'
.text:00000000000025E0                 ASR             X0, X0, #0x27 ; '''
.text:00000000000025E4                 ADD             W2, W2, W3
.text:00000000000025E8                 ADD             W0, W0, W3
.text:00000000000025EC                 MOV             W3, #0x190
.text:00000000000025F0                 TST             W15, #3
.text:00000000000025F4                 MSUB            W1, W2, W1, W15
.text:00000000000025F8                 MSUB            W15, W0, W3, W15
.text:00000000000025FC                 CCMP            W1, #0, #4, EQ
.text:0000000000002600                 CCMP            W15, #0, #4, EQ
.text:0000000000002604                 MOV             W15, #0x1D
.text:0000000000002608                 CSEL            W18, W15, W18, EQ
.text:000000000000260C loc_260C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+98↑j
.text:000000000000260C                 SUB             W15, W16, W17
.text:0000000000002610                 MADD            W8, W18, W8, W15
.text:0000000000002614                 CMP             W8, #2
.text:0000000000002618                 B.GT            loc_2680
.text:000000000000261C                 MOV             W15, #0x2AAAAAAB
.text:0000000000002624                 MOV             W16, #0x18
.text:0000000000002628                 SUB             W10, W10, W14
.text:000000000000262C                 SUB             W9, W9, W11
.text:0000000000002630                 MUL             X11, X12, X15
.text:0000000000002634                 MOV             W14, #0x3C ; '<'
.text:0000000000002638                 MUL             X12, X13, X15
.text:000000000000263C                 MADD            W8, W8, W16, W10
.text:0000000000002640                 LSR             X10, X11, #0x3F ; '?'
.text:0000000000002644                 LSR             X11, X11, #0x20 ; ' '
.text:0000000000002648                 LSR             X13, X12, #0x3F ; '?'
.text:000000000000264C                 LSR             X12, X12, #0x20 ; ' '
.text:0000000000002650                 MADD            W8, W8, W14, W9
.text:0000000000002654                 ADD             W9, W11, W10
.text:0000000000002658                 ADD             W10, W12, W13
.text:000000000000265C                 ADD             W9, W9, W9,LSL#1
.text:0000000000002660                 ADD             W10, W10, W10,LSL#1
.text:0000000000002664                 LSL             W9, W9, #1
.text:0000000000002668                 LSL             W10, W10, #1
.text:000000000000266C                 SXTH            W9, W9
.text:0000000000002670                 SUB             W9, W9, W10,SXTH
.text:0000000000002674                 MADD            W8, W8, W14, W9
.text:0000000000002678                 MOV             W9, #1
.text:000000000000267C                 B               loc_2684
.text:0000000000002680 ; ---------------------------------------------------------------------------
.text:0000000000002680 loc_2680                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+38↑j
.text:0000000000002680                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+54↑j ...
.text:0000000000002680                 MOV             W9, #0xFFFFFFFF
.text:0000000000002684 loc_2684                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+150↑j
.text:0000000000002684                 MUL             W21, W9, W8
.text:0000000000002688                 MOV             W8, #0x15181
.text:0000000000002690                 CMP             W21, W8
.text:0000000000002694                 B.CC            loc_26C0
.text:0000000000002698                 LDR             X8, [X19]
.text:000000000000269C                 STR             XZR, [X19,#0x60]
.text:00000000000026A0                 STR             XZR, [X19,#0x118]
.text:00000000000026A4                 MOV             X0, X19
.text:00000000000026A8                 LDR             X8, [X8,#0x10]
.text:00000000000026AC                 BLR             X8
.text:00000000000026B0                 ADRP            X8, #qword_6C68@PAGE
.text:00000000000026B4                 LDR             D0, [X8,#qword_6C68@PAGEOFF]
.text:00000000000026B8                 STR             D0, [X19,#0xD68]
.text:00000000000026BC                 B               loc_27AC
.text:00000000000026C0 ; ---------------------------------------------------------------------------
.text:00000000000026C0 loc_26C0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+168↑j
.text:00000000000026C0                 CMP             W21, #0xD
.text:00000000000026C4                 B.LT            loc_27A8
.text:00000000000026C8                 MOV             W9, #0xAAAAAAAB
.text:00000000000026D0                 MOV             X10, #0x3A07
.text:00000000000026D4                 UMULL           X9, W21, W9
.text:00000000000026D8                 MOVK            X10, #0xA06D,LSL#16
.text:00000000000026DC                 LSR             X9, X9, #0x22 ; '"'
.text:00000000000026E0                 MOVK            X10, #0x6D3,LSL#32
.text:00000000000026E4                 MOV             W8, WZR
.text:00000000000026E8                 SUB             W9, W9, #1
.text:00000000000026EC                 MOVK            X10, #0x6D3A,LSL#48
.text:00000000000026F0 loc_26F0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+278↓j
.text:00000000000026F0                 LDR             W11, [X19,#0xD58]
.text:00000000000026F4                 CMP             W11, #0x258
.text:00000000000026F8                 B.LT            loc_2788
.text:00000000000026FC                 LDR             W12, [X19,#0xD54]
.text:0000000000002700                 STR             WZR, [X19,#0xD58]
.text:0000000000002704                 CMP             W12, #0x17
.text:0000000000002708                 B.LT            loc_2720
.text:000000000000270C                 MOV             W12, WZR
.text:0000000000002710                 MOV             W11, #1
.text:0000000000002714                 STR             WZR, [X19,#0xD54]
.text:0000000000002718                 STR             W11, [X19,#0xC]
.text:000000000000271C                 B               loc_2724
.text:0000000000002720 ; ---------------------------------------------------------------------------
.text:0000000000002720 loc_2720                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+1DC↑j
.text:0000000000002720                 MOV             W11, WZR
.text:0000000000002724 loc_2724                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+1F0↑j
.text:0000000000002724                 ADD             X12, X19, W12,SXTW#3
.text:0000000000002728                 LDR             X13, [X12,#0x60]
.text:000000000000272C                 STR             XZR, [X12,#0x60]
.text:0000000000002730                 LDR             W14, [X19,#0x118]
.text:0000000000002734                 SMULH           X13, X13, X10
.text:0000000000002738                 LSR             X15, X13, #0x3F ; '?'
.text:000000000000273C                 LSR             X13, X13, #8
.text:0000000000002740                 STR             X14, [X12,#0x60]
.text:0000000000002744                 ADD             W12, W13, W15
.text:0000000000002748                 MOV             W13, #0x11C
.text:000000000000274C                 STR             W12, [X19,#0x118]
.text:0000000000002750 loc_2750                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+248↓j
.text:0000000000002750                 LDRSW           X14, [X19,#0xD54]
.text:0000000000002754                 LDR             W15, [X19,X13]
.text:0000000000002758                 ADD             X14, X19, X14,LSL#3
.text:000000000000275C                 LDR             X16, [X14,#0x60]
.text:0000000000002760                 ADD             X15, X16, X15
.text:0000000000002764                 STR             X15, [X14,#0x60]
.text:0000000000002768                 STR             W12, [X19,X13]
.text:000000000000276C                 ADD             X13, X13, #4
.text:0000000000002770                 CMP             X13, #0xA78
.text:0000000000002774                 B.NE            loc_2750
.text:0000000000002778                 CBNZ            W11, loc_2788
.text:000000000000277C                 LDR             W11, [X19,#0xD54]
.text:0000000000002780                 ADD             W11, W11, #1
.text:0000000000002784                 STR             W11, [X19,#0xD54]
.text:0000000000002788 loc_2788                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+1CC↑j
.text:0000000000002788                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+24C↑j
.text:0000000000002788                 LDRSW           X11, [X19,#0xD58]
.text:000000000000278C                 ADD             W8, W8, #1
.text:0000000000002790                 CMP             W8, W9
.text:0000000000002794                 ADD             W12, W11, #1
.text:0000000000002798                 ADD             X11, X19, X11,LSL#2
.text:000000000000279C                 STR             W12, [X19,#0xD58]
.text:00000000000027A0                 STR             WZR, [X11,#0x118]
.text:00000000000027A4                 B.LT            loc_26F0
.text:00000000000027A8 loc_27A8                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+198↑j
.text:00000000000027A8                 CBZ             W21, loc_2FD8
.text:00000000000027AC loc_27AC                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+190↑j
.text:00000000000027AC                 ADRP            X8, #dword_6C80@PAGE
.text:00000000000027B0                 LDR             S0, [X8,#dword_6C80@PAGEOFF]
.text:00000000000027B4                 ADD             X8, X19, #0xD5C
.text:00000000000027B8                 CMP             W21, #6
.text:00000000000027BC                 FDIV            S0, S8, S0
.text:00000000000027C0                 B.LT            loc_27E4
.text:00000000000027C4                 LDR             W10, [X19,#0xD58]
.text:00000000000027C8                 ADD             X9, X19, #0xD58
.text:00000000000027CC                 CMP             W10, #0x257
.text:00000000000027D0                 B.GT            loc_2850
.text:00000000000027D4                 SXTW            X10, W10
.text:00000000000027D8                 FCVTZU          W11, S0, #0x1F
.text:00000000000027DC                 ADD             X10, X19, X10,LSL#2
.text:00000000000027E0                 B               loc_2814
.text:00000000000027E4 ; ---------------------------------------------------------------------------
.text:00000000000027E4 loc_27E4                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+294↑j
.text:00000000000027E4                 ADD             W9, W21, #5
.text:00000000000027E8                 CMP             W9, #0xA
.text:00000000000027EC                 ADD             X9, X19, #0xD58
.text:00000000000027F0                 B.HI            loc_2818
.text:00000000000027F4                 LDR             W10, [X9]
.text:00000000000027F8                 CMP             W10, #0x257
.text:00000000000027FC                 B.GT            loc_2850
.text:0000000000002800                 SXTW            X10, W10
.text:0000000000002804                 ADD             X10, X19, X10,LSL#2
.text:0000000000002808                 LDR             W11, [X10,#0x118]
.text:000000000000280C                 FCVTZU          W12, S0, #0x1F
.text:0000000000002810                 ADD             W11, W11, W12
.text:0000000000002814 loc_2814                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+2B4↑j
.text:0000000000002814                 STR             W11, [X10,#0x118]
.text:0000000000002818 loc_2818                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+2C4↑j
.text:0000000000002818                 LDR             W10, [X9]
.text:000000000000281C                 ADD             W11, W10, #1
.text:0000000000002820                 CMP             W10, #0x257
.text:0000000000002824                 STR             W11, [X9]
.text:0000000000002828                 B.LT            loc_28E0
.text:000000000000282C                 LDR             W10, [X19,#0xD54]
.text:0000000000002830                 STR             WZR, [X19,#0xD58]
.text:0000000000002834                 CMP             W10, #0x17
.text:0000000000002838                 B.LT            loc_2868
.text:000000000000283C loc_283C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+338↓j
.text:000000000000283C                 MOV             W10, WZR
.text:0000000000002840                 MOV             W9, #1
.text:0000000000002844                 STR             WZR, [X19,#0xD54]
.text:0000000000002848                 STR             W9, [X19,#0xC]
.text:000000000000284C                 B               loc_286C
.text:0000000000002850 ; ---------------------------------------------------------------------------
.text:0000000000002850 loc_2850                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+2A4↑j
.text:0000000000002850                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+2D0↑j
.text:0000000000002850                 ADD             W10, W10, #1
.text:0000000000002854                 STR             W10, [X9]
.text:0000000000002858                 LDR             W10, [X19,#0xD54]
.text:000000000000285C                 STR             WZR, [X19,#0xD58]
.text:0000000000002860                 CMP             W10, #0x17
.text:0000000000002864                 B.GE            loc_283C
.text:0000000000002868 loc_2868                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+30C↑j
.text:0000000000002868                 MOV             W9, WZR
.text:000000000000286C loc_286C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+320↑j
.text:000000000000286C                 ADD             X10, X19, W10,SXTW#3
.text:0000000000002870                 LDR             X11, [X10,#0x60]
.text:0000000000002874                 MOV             X12, #0xA06D3A07
.text:000000000000287C                 STR             XZR, [X10,#0x60]
.text:0000000000002880                 MOVK            X12, #0x6D3,LSL#32
.text:0000000000002884                 LDR             W13, [X19,#0x118]
.text:0000000000002888                 MOVK            X12, #0x6D3A,LSL#48
.text:000000000000288C                 SMULH           X11, X11, X12
.text:0000000000002890                 LSR             X12, X11, #0x3F ; '?'
.text:0000000000002894                 LSR             X11, X11, #8
.text:0000000000002898                 STR             X13, [X10,#0x60]
.text:000000000000289C                 ADD             W10, W11, W12
.text:00000000000028A0                 MOV             W11, #0x11C
.text:00000000000028A4                 STR             W10, [X19,#0x118]
.text:00000000000028A8 loc_28A8                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+3A0↓j
.text:00000000000028A8                 LDRSW           X12, [X19,#0xD54]
.text:00000000000028AC                 LDR             W13, [X19,X11]
.text:00000000000028B0                 ADD             X12, X19, X12,LSL#3
.text:00000000000028B4                 LDR             X14, [X12,#0x60]
.text:00000000000028B8                 ADD             X13, X14, X13
.text:00000000000028BC                 STR             X13, [X12,#0x60]
.text:00000000000028C0                 STR             W10, [X19,X11]
.text:00000000000028C4                 ADD             X11, X11, #4
.text:00000000000028C8                 CMP             X11, #0xA78
.text:00000000000028CC                 B.NE            loc_28A8
.text:00000000000028D0                 CBNZ            W9, loc_28E0
.text:00000000000028D4                 LDR             W9, [X19,#0xD54]
.text:00000000000028D8                 ADD             W9, W9, #1
.text:00000000000028DC                 STR             W9, [X19,#0xD54]
.text:00000000000028E0 loc_28E0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+2FC↑j
.text:00000000000028E0                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+3A4↑j
.text:00000000000028E0                 LDR             X9, [X20]
.text:00000000000028E4                 MOV             W10, #0x7FFFFFFF
.text:00000000000028E8                 STR             X9, [X8]
.text:00000000000028EC                 LDRH            W8, [X20,#8]
.text:00000000000028F0                 LDR             X9, [X19,#0x60]
.text:00000000000028F4                 STRH            W8, [X19,#0xD64]
.text:00000000000028F8                 LDRH            W8, [X20,#0xA]
.text:00000000000028FC                 CMP             X9, X10
.text:0000000000002900                 STR             X9, [X19,#0x10]
.text:0000000000002904                 STRH            W8, [X19,#0xD66]
.text:0000000000002908                 MOV             X8, X9
.text:000000000000290C                 B.GT            loc_2B14
.text:0000000000002910                 LDR             X8, [X19,#0x68]
.text:0000000000002914                 MOV             W10, #0x80000000
.text:0000000000002918                 ADD             X8, X9, X8
.text:000000000000291C                 CMP             X8, X10
.text:0000000000002920                 STR             X8, [X19,#0x10]
.text:0000000000002924                 B.GE            loc_2B14
.text:0000000000002928                 LDR             X10, [X19,#0x70]
.text:000000000000292C                 ADD             X8, X8, X10
.text:0000000000002930                 MOV             W10, #0x7FFFFFFF
.text:0000000000002934                 CMP             X8, X10
.text:0000000000002938                 STR             X8, [X19,#0x10]
.text:000000000000293C                 B.GT            loc_2B14
.text:0000000000002940                 LDR             X10, [X19,#0x78]
.text:0000000000002944                 ADD             X8, X8, X10
.text:0000000000002948                 MOV             W10, #0x7FFFFFFF
.text:000000000000294C                 CMP             X8, X10
.text:0000000000002950                 STR             X8, [X19,#0x10]
.text:0000000000002954                 B.GT            loc_2B14
.text:0000000000002958                 LDR             X10, [X19,#0x80]
.text:000000000000295C                 ADD             X8, X8, X10
.text:0000000000002960                 MOV             W10, #0x7FFFFFFF
.text:0000000000002964                 CMP             X8, X10
.text:0000000000002968                 STR             X8, [X19,#0x10]
.text:000000000000296C                 B.GT            loc_2B14
.text:0000000000002970                 LDR             X10, [X19,#0x88]
.text:0000000000002974                 ADD             X8, X8, X10
.text:0000000000002978                 MOV             W10, #0x7FFFFFFF
.text:000000000000297C                 CMP             X8, X10
.text:0000000000002980                 STR             X8, [X19,#0x10]
.text:0000000000002984                 B.GT            loc_2B14
.text:0000000000002988                 LDR             X10, [X19,#0x90]
.text:000000000000298C                 ADD             X8, X8, X10
.text:0000000000002990                 MOV             W10, #0x7FFFFFFF
.text:0000000000002994                 CMP             X8, X10
.text:0000000000002998                 STR             X8, [X19,#0x10]
.text:000000000000299C                 B.GT            loc_2B14
.text:00000000000029A0                 LDR             X10, [X19,#0x98]
.text:00000000000029A4                 ADD             X8, X8, X10
.text:00000000000029A8                 MOV             W10, #0x7FFFFFFF
.text:00000000000029AC                 CMP             X8, X10
.text:00000000000029B0                 STR             X8, [X19,#0x10]
.text:00000000000029B4                 B.GT            loc_2B14
.text:00000000000029B8                 LDR             X10, [X19,#0xA0]
.text:00000000000029BC                 ADD             X8, X8, X10
.text:00000000000029C0                 MOV             W10, #0x7FFFFFFF
.text:00000000000029C4                 CMP             X8, X10
.text:00000000000029C8                 STR             X8, [X19,#0x10]
.text:00000000000029CC                 B.GT            loc_2B14
.text:00000000000029D0                 LDR             X10, [X19,#0xA8]
.text:00000000000029D4                 ADD             X8, X8, X10
.text:00000000000029D8                 MOV             W10, #0x7FFFFFFF
.text:00000000000029DC                 CMP             X8, X10
.text:00000000000029E0                 STR             X8, [X19,#0x10]
.text:00000000000029E4                 B.GT            loc_2B14
.text:00000000000029E8                 LDR             X10, [X19,#0xB0]
.text:00000000000029EC                 ADD             X8, X8, X10
.text:00000000000029F0                 MOV             W10, #0x7FFFFFFF
.text:00000000000029F4                 CMP             X8, X10
.text:00000000000029F8                 STR             X8, [X19,#0x10]
.text:00000000000029FC                 B.GT            loc_2B14
.text:0000000000002A00                 LDR             X10, [X19,#0xB8]
.text:0000000000002A04                 ADD             X8, X8, X10
.text:0000000000002A08                 MOV             W10, #0x7FFFFFFF
.text:0000000000002A0C                 CMP             X8, X10
.text:0000000000002A10                 STR             X8, [X19,#0x10]
.text:0000000000002A14                 B.GT            loc_2B14
.text:0000000000002A18                 LDR             X10, [X19,#0xC0]
.text:0000000000002A1C                 ADD             X8, X8, X10
.text:0000000000002A20                 MOV             W10, #0x7FFFFFFF
.text:0000000000002A24                 CMP             X8, X10
.text:0000000000002A28                 STR             X8, [X19,#0x10]
.text:0000000000002A2C                 B.GT            loc_2B14
.text:0000000000002A30                 LDR             X10, [X19,#0xC8]
.text:0000000000002A34                 ADD             X8, X8, X10
.text:0000000000002A38                 MOV             W10, #0x7FFFFFFF
.text:0000000000002A3C                 CMP             X8, X10
.text:0000000000002A40                 STR             X8, [X19,#0x10]
.text:0000000000002A44                 B.GT            loc_2B14
.text:0000000000002A48                 LDR             X10, [X19,#0xD0]
.text:0000000000002A4C                 ADD             X8, X8, X10
.text:0000000000002A50                 MOV             W10, #0x7FFFFFFF
.text:0000000000002A54                 CMP             X8, X10
.text:0000000000002A58                 STR             X8, [X19,#0x10]
.text:0000000000002A5C                 B.GT            loc_2B14
.text:0000000000002A60                 LDR             X10, [X19,#0xD8]
.text:0000000000002A64                 ADD             X8, X8, X10
.text:0000000000002A68                 MOV             W10, #0x7FFFFFFF
.text:0000000000002A6C                 CMP             X8, X10
.text:0000000000002A70                 STR             X8, [X19,#0x10]
.text:0000000000002A74                 B.GT            loc_2B14
.text:0000000000002A78                 LDR             X10, [X19,#0xE0]
.text:0000000000002A7C                 ADD             X8, X8, X10
.text:0000000000002A80                 MOV             W10, #0x7FFFFFFF
.text:0000000000002A84                 CMP             X8, X10
.text:0000000000002A88                 STR             X8, [X19,#0x10]
.text:0000000000002A8C                 B.GT            loc_2B14
.text:0000000000002A90                 LDR             X10, [X19,#0xE8]
.text:0000000000002A94                 ADD             X8, X8, X10
.text:0000000000002A98                 MOV             W10, #0x7FFFFFFF
.text:0000000000002A9C                 CMP             X8, X10
.text:0000000000002AA0                 STR             X8, [X19,#0x10]
.text:0000000000002AA4                 B.GT            loc_2B14
.text:0000000000002AA8                 LDR             X10, [X19,#0xF0]
.text:0000000000002AAC                 ADD             X8, X8, X10
.text:0000000000002AB0                 MOV             W10, #0x7FFFFFFF
.text:0000000000002AB4                 CMP             X8, X10
.text:0000000000002AB8                 STR             X8, [X19,#0x10]
.text:0000000000002ABC                 B.GT            loc_2B14
.text:0000000000002AC0                 LDR             X10, [X19,#0xF8]
.text:0000000000002AC4                 ADD             X8, X8, X10
.text:0000000000002AC8                 MOV             W10, #0x7FFFFFFF
.text:0000000000002ACC                 CMP             X8, X10
.text:0000000000002AD0                 STR             X8, [X19,#0x10]
.text:0000000000002AD4                 B.GT            loc_2B14
.text:0000000000002AD8                 LDR             X10, [X19,#0x100]
.text:0000000000002ADC                 ADD             X8, X8, X10
.text:0000000000002AE0                 MOV             W10, #0x7FFFFFFF
.text:0000000000002AE4                 CMP             X8, X10
.text:0000000000002AE8                 STR             X8, [X19,#0x10]
.text:0000000000002AEC                 B.GT            loc_2B14
.text:0000000000002AF0                 LDR             X10, [X19,#0x108]
.text:0000000000002AF4                 ADD             X8, X8, X10
.text:0000000000002AF8                 MOV             W10, #0x7FFFFFFF
.text:0000000000002AFC                 CMP             X8, X10
.text:0000000000002B00                 STR             X8, [X19,#0x10]
.text:0000000000002B04                 B.GT            loc_2B14
.text:0000000000002B08                 LDR             X10, [X19,#0x110]
.text:0000000000002B0C                 ADD             X8, X8, X10
.text:0000000000002B10                 STR             X8, [X19,#0x10]
.text:0000000000002B14 loc_2B14                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+3E0↑j
.text:0000000000002B14                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+3F8↑j ...
.text:0000000000002B14                 MOV             W10, #0x46 ; 'F'
.text:0000000000002B18                 MOV             W11, #0x80000000
.text:0000000000002B1C loc_2B1C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+60C↓j
.text:0000000000002B1C                 LDR             W12, [X19,X10,LSL#2]
.text:0000000000002B20                 ADD             X8, X8, X12
.text:0000000000002B24                 CMP             X8, X11
.text:0000000000002B28                 B.GE            loc_2B3C
.text:0000000000002B2C                 SUB             X12, X10, #0x46 ; 'F'
.text:0000000000002B30                 ADD             X10, X10, #1
.text:0000000000002B34                 CMP             X12, #0x256
.text:0000000000002B38                 B.LS            loc_2B1C
.text:0000000000002B3C loc_2B3C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+5FC↑j
.text:0000000000002B3C                 LDP             X11, X12, [X19,#0x68]
.text:0000000000002B40                 LDP             X13, X14, [X19,#0x78]
.text:0000000000002B44                 DUP             V0.2D, XZR
.text:0000000000002B48                 MOV             X10, XZR
.text:0000000000002B4C                 ADD             X11, X9, X11
.text:0000000000002B50                 ADD             X11, X11, X12
.text:0000000000002B54                 LDP             X12, X15, [X19,#0x88]
.text:0000000000002B58                 ADD             X11, X11, X13
.text:0000000000002B5C                 ADD             X11, X11, X14
.text:0000000000002B60                 LDP             X13, X14, [X19,#0x98]
.text:0000000000002B64                 ADD             X11, X11, X12
.text:0000000000002B68                 ADD             X11, X11, X15
.text:0000000000002B6C                 LDP             X12, X15, [X19,#0xA8]
.text:0000000000002B70                 ADD             X11, X11, X13
.text:0000000000002B74                 ADD             X11, X11, X14
.text:0000000000002B78                 LDP             X13, X14, [X19,#0xB8]
.text:0000000000002B7C                 ADD             X11, X11, X12
.text:0000000000002B80                 ADD             X11, X11, X15
.text:0000000000002B84                 LDP             X12, X15, [X19,#0xC8]
.text:0000000000002B88                 ADD             X11, X11, X13
.text:0000000000002B8C                 ADD             X11, X11, X14
.text:0000000000002B90                 LDP             X13, X14, [X19,#0xD8]
.text:0000000000002B94                 ADD             X11, X11, X12
.text:0000000000002B98                 ADD             X11, X11, X15
.text:0000000000002B9C                 LDP             X12, X15, [X19,#0xE8]
.text:0000000000002BA0                 ADD             X11, X11, X13
.text:0000000000002BA4                 ADD             X11, X11, X14
.text:0000000000002BA8                 LDP             X13, X14, [X19,#0xF8]
.text:0000000000002BAC                 ADD             X11, X11, X12
.text:0000000000002BB0                 ADD             X11, X11, X15
.text:0000000000002BB4                 LDP             X12, X15, [X19,#0x108]
.text:0000000000002BB8                 ADD             X11, X11, X13
.text:0000000000002BBC                 ADD             X11, X11, X14
.text:0000000000002BC0                 MOVI            V1.2D, #0
.text:0000000000002BC4                 ADD             X11, X11, X12
.text:0000000000002BC8                 ADD             X11, X11, X15
.text:0000000000002BCC                 INS             V0.D[0], X11
.text:0000000000002BD0                 STR             X8, [X19,#0x10]
.text:0000000000002BD4                 STR             X11, [X19,#0x20]
.text:0000000000002BD8 loc_2BD8                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+6C4↓j
.text:0000000000002BD8                 ADD             X11, X19, X10
.text:0000000000002BDC                 LDP             D2, D3, [X11,#0x118]
.text:0000000000002BE0                 ADD             X10, X10, #0x10
.text:0000000000002BE4                 CMP             X10, #0x960
.text:0000000000002BE8                 UADDW           V0.2D, V0.2D, V2.2S
.text:0000000000002BEC                 UADDW           V1.2D, V1.2D, V3.2S
.text:0000000000002BF0                 B.NE            loc_2BD8
.text:0000000000002BF4                 ADD             V0.2D, V1.2D, V0.2D
.text:0000000000002BF8                 ADDP            D1, V0.2D
.text:0000000000002BFC                 ADD             X10, X19, #0x20 ; ' '
.text:0000000000002C00                 ST1             {V1.D}[0], [X10]
.text:0000000000002C04                 LDR             W10, [X19,#0xC]
.text:0000000000002C08                 CMP             W10, #1
.text:0000000000002C0C                 B.NE            loc_2F28
.text:0000000000002C10                 ADRP            X10, #qword_6C70@PAGE
.text:0000000000002C14                 LDR             D0, [X10,#qword_6C70@PAGEOFF]
.text:0000000000002C18                 FMOV            X10, D1
.text:0000000000002C1C                 SCVTF           D1, X10
.text:0000000000002C20                 FMOV            D2, #1.0
.text:0000000000002C24                 FDIV            D1, D1, D0
.text:0000000000002C28                 FCMP            D1, D2
.text:0000000000002C2C                 B.LE            loc_2F28
.text:0000000000002C30                 MOV             X8, XZR
.text:0000000000002C34                 B               loc_2C40
.text:0000000000002C38 ; ---------------------------------------------------------------------------
.text:0000000000002C38 loc_2C38                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+738↓j
.text:0000000000002C38                 LDR             X9, [X11,#0x68]
.text:0000000000002C3C                 ADD             X8, X8, #8
.text:0000000000002C40 loc_2C40                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+708↑j
.text:0000000000002C40                 SCVTF           D1, X10
.text:0000000000002C44                 FDIV            D1, D1, D0
.text:0000000000002C48                 SCVTF           D2, X9
.text:0000000000002C4C                 FDIV            D1, D2, D1
.text:0000000000002C50                 ADD             X11, X19, X8
.text:0000000000002C54                 FCVTZS          X9, D1
.text:0000000000002C58                 STR             X9, [X11,#0x60]
.text:0000000000002C5C                 LDR             X10, [X19,#0x20]
.text:0000000000002C60                 CMP             X8, #0xB0
.text:0000000000002C64                 B.NE            loc_2C38
.text:0000000000002C68                 SCVTF           D1, X10
.text:0000000000002C6C                 FDIV            D0, D1, D0
.text:0000000000002C70                 DUP             V0.2D, V0.D[0]
.text:0000000000002C74                 MOV             W8, #0x128
.text:0000000000002C78 loc_2C78                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+7B0↓j
.text:0000000000002C78                 ADD             X9, X19, X8
.text:0000000000002C7C                 LDP             Q1, Q2, [X9,#-0x10]
.text:0000000000002C80                 ADD             X8, X8, #0x20 ; ' '
.text:0000000000002C84                 CMP             X8, #0xA88
.text:0000000000002C88                 USHLL           V3.2D, V1.2S, #0
.text:0000000000002C8C                 USHLL           V4.2D, V2.2S, #0
.text:0000000000002C90                 USHLL2          V1.2D, V1.4S, #0
.text:0000000000002C94                 USHLL2          V2.2D, V2.4S, #0
.text:0000000000002C98                 UCVTF           V3.2D, V3.2D
.text:0000000000002C9C                 UCVTF           V4.2D, V4.2D
.text:0000000000002CA0                 UCVTF           V1.2D, V1.2D
.text:0000000000002CA4                 UCVTF           V2.2D, V2.2D
.text:0000000000002CA8                 FDIV            V3.2D, V3.2D, V0.2D
.text:0000000000002CAC                 FDIV            V4.2D, V4.2D, V0.2D
.text:0000000000002CB0                 FDIV            V1.2D, V1.2D, V0.2D
.text:0000000000002CB4                 FDIV            V2.2D, V2.2D, V0.2D
.text:0000000000002CB8                 FCVTZU          V3.2D, V3.2D
.text:0000000000002CBC                 FCVTZU          V4.2D, V4.2D
.text:0000000000002CC0                 FCVTZU          V1.2D, V1.2D
.text:0000000000002CC4                 FCVTZU          V2.2D, V2.2D
.text:0000000000002CC8                 XTN             V3.2S, V3.2D
.text:0000000000002CCC                 XTN             V4.2S, V4.2D
.text:0000000000002CD0                 XTN2            V3.4S, V1.2D
.text:0000000000002CD4                 XTN2            V4.4S, V2.2D
.text:0000000000002CD8                 STP             Q3, Q4, [X9,#-0x10]
.text:0000000000002CDC                 B.NE            loc_2C78
.text:0000000000002CE0                 LDR             X8, [X19,#0x60]
.text:0000000000002CE4                 MOV             W9, #0x7FFFFFFF
.text:0000000000002CE8                 STR             WZR, [X19,#0xC]
.text:0000000000002CEC                 CMP             X8, X9
.text:0000000000002CF0                 STR             X8, [X19,#0x10]
.text:0000000000002CF4                 B.GT            loc_2EFC
.text:0000000000002CF8                 LDR             X9, [X19,#0x68]
.text:0000000000002CFC                 ADD             X8, X8, X9
.text:0000000000002D00                 MOV             W9, #0x80000000
.text:0000000000002D04                 CMP             X8, X9
.text:0000000000002D08                 STR             X8, [X19,#0x10]
.text:0000000000002D0C                 B.GE            loc_2EFC
.text:0000000000002D10                 LDR             X9, [X19,#0x70]
.text:0000000000002D14                 ADD             X8, X8, X9
.text:0000000000002D18                 MOV             W9, #0x7FFFFFFF
.text:0000000000002D1C                 CMP             X8, X9
.text:0000000000002D20                 STR             X8, [X19,#0x10]
.text:0000000000002D24                 B.GT            loc_2EFC
.text:0000000000002D28                 LDR             X9, [X19,#0x78]
.text:0000000000002D2C                 ADD             X8, X8, X9
.text:0000000000002D30                 MOV             W9, #0x7FFFFFFF
.text:0000000000002D34                 CMP             X8, X9
.text:0000000000002D38                 STR             X8, [X19,#0x10]
.text:0000000000002D3C                 B.GT            loc_2EFC
.text:0000000000002D40                 LDR             X9, [X19,#0x80]
.text:0000000000002D44                 ADD             X8, X8, X9
.text:0000000000002D48                 MOV             W9, #0x7FFFFFFF
.text:0000000000002D4C                 CMP             X8, X9
.text:0000000000002D50                 STR             X8, [X19,#0x10]
.text:0000000000002D54                 B.GT            loc_2EFC
.text:0000000000002D58                 LDR             X9, [X19,#0x88]
.text:0000000000002D5C                 ADD             X8, X8, X9
.text:0000000000002D60                 MOV             W9, #0x7FFFFFFF
.text:0000000000002D64                 CMP             X8, X9
.text:0000000000002D68                 STR             X8, [X19,#0x10]
.text:0000000000002D6C                 B.GT            loc_2EFC
.text:0000000000002D70                 LDR             X9, [X19,#0x90]
.text:0000000000002D74                 ADD             X8, X8, X9
.text:0000000000002D78                 MOV             W9, #0x7FFFFFFF
.text:0000000000002D7C                 CMP             X8, X9
.text:0000000000002D80                 STR             X8, [X19,#0x10]
.text:0000000000002D84                 B.GT            loc_2EFC
.text:0000000000002D88                 LDR             X9, [X19,#0x98]
.text:0000000000002D8C                 ADD             X8, X8, X9
.text:0000000000002D90                 MOV             W9, #0x7FFFFFFF
.text:0000000000002D94                 CMP             X8, X9
.text:0000000000002D98                 STR             X8, [X19,#0x10]
.text:0000000000002D9C                 B.GT            loc_2EFC
.text:0000000000002DA0                 LDR             X9, [X19,#0xA0]
.text:0000000000002DA4                 ADD             X8, X8, X9
.text:0000000000002DA8                 MOV             W9, #0x7FFFFFFF
.text:0000000000002DAC                 CMP             X8, X9
.text:0000000000002DB0                 STR             X8, [X19,#0x10]
.text:0000000000002DB4                 B.GT            loc_2EFC
.text:0000000000002DB8                 LDR             X9, [X19,#0xA8]
.text:0000000000002DBC                 ADD             X8, X8, X9
.text:0000000000002DC0                 MOV             W9, #0x7FFFFFFF
.text:0000000000002DC4                 CMP             X8, X9
.text:0000000000002DC8                 STR             X8, [X19,#0x10]
.text:0000000000002DCC                 B.GT            loc_2EFC
.text:0000000000002DD0                 LDR             X9, [X19,#0xB0]
.text:0000000000002DD4                 ADD             X8, X8, X9
.text:0000000000002DD8                 MOV             W9, #0x7FFFFFFF
.text:0000000000002DDC                 CMP             X8, X9
.text:0000000000002DE0                 STR             X8, [X19,#0x10]
.text:0000000000002DE4                 B.GT            loc_2EFC
.text:0000000000002DE8                 LDR             X9, [X19,#0xB8]
.text:0000000000002DEC                 ADD             X8, X8, X9
.text:0000000000002DF0                 MOV             W9, #0x7FFFFFFF
.text:0000000000002DF4                 CMP             X8, X9
.text:0000000000002DF8                 STR             X8, [X19,#0x10]
.text:0000000000002DFC                 B.GT            loc_2EFC
.text:0000000000002E00                 LDR             X9, [X19,#0xC0]
.text:0000000000002E04                 ADD             X8, X8, X9
.text:0000000000002E08                 MOV             W9, #0x7FFFFFFF
.text:0000000000002E0C                 CMP             X8, X9
.text:0000000000002E10                 STR             X8, [X19,#0x10]
.text:0000000000002E14                 B.GT            loc_2EFC
.text:0000000000002E18                 LDR             X9, [X19,#0xC8]
.text:0000000000002E1C                 ADD             X8, X8, X9
.text:0000000000002E20                 MOV             W9, #0x7FFFFFFF
.text:0000000000002E24                 CMP             X8, X9
.text:0000000000002E28                 STR             X8, [X19,#0x10]
.text:0000000000002E2C                 B.GT            loc_2EFC
.text:0000000000002E30                 LDR             X9, [X19,#0xD0]
.text:0000000000002E34                 ADD             X8, X8, X9
.text:0000000000002E38                 MOV             W9, #0x7FFFFFFF
.text:0000000000002E3C                 CMP             X8, X9
.text:0000000000002E40                 STR             X8, [X19,#0x10]
.text:0000000000002E44                 B.GT            loc_2EFC
.text:0000000000002E48                 LDR             X9, [X19,#0xD8]
.text:0000000000002E4C                 ADD             X8, X8, X9
.text:0000000000002E50                 MOV             W9, #0x7FFFFFFF
.text:0000000000002E54                 CMP             X8, X9
.text:0000000000002E58                 STR             X8, [X19,#0x10]
.text:0000000000002E5C                 B.GT            loc_2EFC
.text:0000000000002E60                 LDR             X9, [X19,#0xE0]
.text:0000000000002E64                 ADD             X8, X8, X9
.text:0000000000002E68                 MOV             W9, #0x7FFFFFFF
.text:0000000000002E6C                 CMP             X8, X9
.text:0000000000002E70                 STR             X8, [X19,#0x10]
.text:0000000000002E74                 B.GT            loc_2EFC
.text:0000000000002E78                 LDR             X9, [X19,#0xE8]
.text:0000000000002E7C                 ADD             X8, X8, X9
.text:0000000000002E80                 MOV             W9, #0x7FFFFFFF
.text:0000000000002E84                 CMP             X8, X9
.text:0000000000002E88                 STR             X8, [X19,#0x10]
.text:0000000000002E8C                 B.GT            loc_2EFC
.text:0000000000002E90                 LDR             X9, [X19,#0xF0]
.text:0000000000002E94                 ADD             X8, X8, X9
.text:0000000000002E98                 MOV             W9, #0x7FFFFFFF
.text:0000000000002E9C                 CMP             X8, X9
.text:0000000000002EA0                 STR             X8, [X19,#0x10]
.text:0000000000002EA4                 B.GT            loc_2EFC
.text:0000000000002EA8                 LDR             X9, [X19,#0xF8]
.text:0000000000002EAC                 ADD             X8, X8, X9
.text:0000000000002EB0                 MOV             W9, #0x7FFFFFFF
.text:0000000000002EB4                 CMP             X8, X9
.text:0000000000002EB8                 STR             X8, [X19,#0x10]
.text:0000000000002EBC                 B.GT            loc_2EFC
.text:0000000000002EC0                 LDR             X9, [X19,#0x100]
.text:0000000000002EC4                 ADD             X8, X8, X9
.text:0000000000002EC8                 MOV             W9, #0x7FFFFFFF
.text:0000000000002ECC                 CMP             X8, X9
.text:0000000000002ED0                 STR             X8, [X19,#0x10]
.text:0000000000002ED4                 B.GT            loc_2EFC
.text:0000000000002ED8                 LDR             X9, [X19,#0x108]
.text:0000000000002EDC                 ADD             X8, X8, X9
.text:0000000000002EE0                 MOV             W9, #0x7FFFFFFF
.text:0000000000002EE4                 CMP             X8, X9
.text:0000000000002EE8                 STR             X8, [X19,#0x10]
.text:0000000000002EEC                 B.GT            loc_2EFC
.text:0000000000002EF0                 LDR             X9, [X19,#0x110]
.text:0000000000002EF4                 ADD             X8, X8, X9
.text:0000000000002EF8                 STR             X8, [X19,#0x10]
.text:0000000000002EFC loc_2EFC                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+7C8↑j
.text:0000000000002EFC                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+7E0↑j ...
.text:0000000000002EFC                 MOV             W9, #0x46 ; 'F'
.text:0000000000002F00                 MOV             W10, #0x80000000
.text:0000000000002F04 loc_2F04                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+9F4↓j
.text:0000000000002F04                 LDR             W11, [X19,X9,LSL#2]
.text:0000000000002F08                 ADD             X8, X8, X11
.text:0000000000002F0C                 CMP             X8, X10
.text:0000000000002F10                 B.GE            loc_2F24
.text:0000000000002F14                 SUB             X11, X9, #0x46 ; 'F'
.text:0000000000002F18                 ADD             X9, X9, #1
.text:0000000000002F1C                 CMP             X11, #0x256
.text:0000000000002F20                 B.LS            loc_2F04
.text:0000000000002F24 loc_2F24                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+9E4↑j
.text:0000000000002F24                 STR             X8, [X19,#0x10]
.text:0000000000002F28 loc_2F28                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+6E0↑j
.text:0000000000002F28                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+700↑j
.text:0000000000002F28                 LDR             W9, [X19,#0xD68]
.text:0000000000002F2C                 CMP             W9, #1
.text:0000000000002F30                 B.EQ            loc_2F50
.text:0000000000002F34                 CBNZ            W9, loc_2F64
.text:0000000000002F38                 MOV             W9, #0x6CCCCCCB
.text:0000000000002F44                 CMP             X8, X9
.text:0000000000002F48                 B.GT            loc_2F80
.text:0000000000002F4C                 B               loc_2FA0
.text:0000000000002F50 ; ---------------------------------------------------------------------------
.text:0000000000002F50 loc_2F50                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A04↑j
.text:0000000000002F50                 MOV             W9, #0x7FFFFFFF
.text:0000000000002F54                 CMP             X8, X9
.text:0000000000002F58                 B.LT            loc_2F8C
.text:0000000000002F5C                 MOV             W9, #2
.text:0000000000002F60                 B               loc_2F84
.text:0000000000002F64 ; ---------------------------------------------------------------------------
.text:0000000000002F64 loc_2F64                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A08↑j
.text:0000000000002F64                 MOV             W9, #0x6CCCCCCC
.text:0000000000002F6C                 CMP             X8, X9
.text:0000000000002F70                 B.LT            loc_2F9C
.text:0000000000002F74                 MOV             W9, #0x7FFFFFFE
.text:0000000000002F78                 CMP             X8, X9
.text:0000000000002F7C                 B.GT            loc_2FA0
.text:0000000000002F80 loc_2F80                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A1C↑j
.text:0000000000002F80                 MOV             W9, #1
.text:0000000000002F84 loc_2F84                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A34↑j
.text:0000000000002F84                 STR             W9, [X19,#0xD68]
.text:0000000000002F88                 B               loc_2FA0
.text:0000000000002F8C ; ---------------------------------------------------------------------------
.text:0000000000002F8C loc_2F8C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A2C↑j
.text:0000000000002F8C                 MOV             W9, #0x6CCCCCCC
.text:0000000000002F94                 CMP             X8, X9
.text:0000000000002F98                 B.GE            loc_2FA0
.text:0000000000002F9C loc_2F9C                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A44↑j
.text:0000000000002F9C                 STR             WZR, [X19,#0xD68]
.text:0000000000002FA0 loc_2FA0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A20↑j
.text:0000000000002FA0                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+A50↑j ...
.text:0000000000002FA0                 ADRP            X11, #qword_6C70@PAGE
.text:0000000000002FA4                 LDR             D0, [X11,#qword_6C70@PAGEOFF]
.text:0000000000002FA8                 LDRSH           W9, [X20,#4]
.text:0000000000002FAC                 MOV             W10, #0x64 ; 'd'
.text:0000000000002FB0                 MUL             X11, X8, X10
.text:0000000000002FB4                 SCVTF           D1, X11
.text:0000000000002FB8                 FDIV            D0, D1, D0
.text:0000000000002FBC                 STR             W9, [X19,#8]
.text:0000000000002FC0                 FCVTZS          W9, D0
.text:0000000000002FC4                 CMP             W9, #0x64 ; 'd'
.text:0000000000002FC8                 CSEL            W9, W9, W10, LT
.text:0000000000002FCC                 STR             X8, [X19,#0x18]
.text:0000000000002FD0                 STR             W9, [X19,#0xD70]
.text:0000000000002FD4                 STR             X8, [X19,#0xD78]
.text:0000000000002FD8 loc_2FD8                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)+24↑j
.text:0000000000002FD8                                         ; SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *):loc_27A8↑j
.text:0000000000002FD8                 LDP             X29, X30, [SP,#0x20+var_s0]
.text:0000000000002FDC                 LDP             X20, X19, [SP,#0x20+var_10]
.text:0000000000002FE0                 LDR             X21, [SP,#0x20+var_18]
.text:0000000000002FE4                 LDR             D8, [SP+0x20+var_20],#0x30
.text:0000000000002FE8                 RET
.text:0000000000002FE8 ; } // starts at 252C
.text:0000000000002FE8 ; End of function SAG_VM_Score::SAG_VM_Score_Hearing_History_Update(float,DateTime *)
.text:0000000000002FEC ; =============== S U B R O U T I N E =======================================
.text:0000000000002FEC ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_Get_Score(SAG_VM_Score *__hidden this)
.text:0000000000002FEC                 EXPORT _ZN12SAG_VM_Score22SAG_VM_Score_Get_ScoreEv
.text:0000000000002FEC _ZN12SAG_VM_Score22SAG_VM_Score_Get_ScoreEv
.text:0000000000002FEC                                         ; DATA XREF: LOAD:00000000000007A8↑o
.text:0000000000002FEC                                         ; .data.rel.ro:00000000000185D8↓o
.text:0000000000002FEC                 LDR             S0, [X0,#0xD80]
.text:0000000000002FF0                 STR             WZR, [X0,#0xD80]
.text:0000000000002FF4                 RET
.text:0000000000002FF4 ; End of function SAG_VM_Score::SAG_VM_Score_Get_Score(void)
.text:0000000000002FF8 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FF8 ; Attributes: bp-based frame
.text:0000000000002FF8 ; __int64 __fastcall SAG_VM_Score::SAG_VM_update_1min_array_db(SAG_VM_Score *__hidden this)
.text:0000000000002FF8                 EXPORT _ZN12SAG_VM_Score27SAG_VM_update_1min_array_dbEv
.text:0000000000002FF8 _ZN12SAG_VM_Score27SAG_VM_update_1min_array_dbEv
.text:0000000000002FF8                                         ; DATA XREF: LOAD:0000000000000B38↑o
.text:0000000000002FF8                                         ; .data.rel.ro:00000000000185F8↓o
.text:0000000000002FF8 var_50          = -0x50
.text:0000000000002FF8 s               = -0x48
.text:0000000000002FF8 var_40          = -0x40
.text:0000000000002FF8 var_30          = -0x30
.text:0000000000002FF8 var_20          = -0x20
.text:0000000000002FF8 var_10          = -0x10
.text:0000000000002FF8 var_s0          =  0
.text:0000000000002FF8 ; __unwind {
.text:0000000000002FF8                 STR             X27, [SP,#-0x10+var_50]!
.text:0000000000002FFC                 STP             X26, X25, [SP,#0x50+var_40]
.text:0000000000003000                 STP             X24, X23, [SP,#0x50+var_30]
.text:0000000000003004                 STP             X22, X21, [SP,#0x50+var_20]
.text:0000000000003008                 STP             X20, X19, [SP,#0x50+var_10]
.text:000000000000300C                 STP             X29, X30, [SP,#0x50+var_s0]
.text:0000000000003010                 ADD             X29, SP, #0x50
.text:0000000000003014                 MOV             X19, X0
.text:0000000000003018                 LDR             X8, [X19]
.text:000000000000301C                 LDR             X8, [X8,#0x60]
.text:0000000000003020                 BLR             X8
.text:0000000000003024                 LDR             X8, [X19]
.text:0000000000003028                 MOV             W21, W0
.text:000000000000302C                 MOV             X0, X19
.text:0000000000003030                 LDR             X8, [X8,#0x58]
.text:0000000000003034                 BLR             X8
.text:0000000000003038                 ADD             X8, SP, #0x50+s
.text:000000000000303C                 ADRP            X22, #aD@PAGE ; "%d"
.text:0000000000003040                 MOV             W20, W0
.text:0000000000003044                 MOV             X24, XZR
.text:0000000000003048                 MOV             W23, WZR
.text:000000000000304C                 ADD             X25, X19, #0xD87
.text:0000000000003050                 ADD             X22, X22, #aD@PAGEOFF ; "%d"
.text:0000000000003054                 ORR             X26, X8, #1
.text:0000000000003058                 MOV             W27, #0x7C ; '|'
.text:000000000000305C loc_305C                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+CC↓j
.text:000000000000305C                 ADD             X8, X19, X24,LSL#2
.text:0000000000003060                 LDR             W8, [X8,#0x34]
.text:0000000000003064                 ADD             X0, SP, #0x50+s ; s
.text:0000000000003068                 MOV             X1, X22 ; format
.text:000000000000306C                 BIC             W2, W8, W8,ASR#31
.text:0000000000003070                 BL              .sprintf
.text:0000000000003074                 LDRB            W8, [SP,#0x50+s]
.text:0000000000003078                 SXTW            X9, W23
.text:000000000000307C                 ADD             X23, X9, #1
.text:0000000000003080                 ADD             X9, X19, X9
.text:0000000000003084                 ADD             X9, X9, #0xD88
.text:0000000000003088                 CBZ             W8, loc_30B0
.text:000000000000308C                 ADD             X10, X25, X23
.text:0000000000003090                 MOV             X11, X26
.text:0000000000003094 loc_3094                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+B0↓j
.text:0000000000003094                 STRB            W8, [X9]
.text:0000000000003098                 LDRB            W8, [X11],#1
.text:000000000000309C                 ADD             X10, X10, #1
.text:00000000000030A0                 ADD             W23, W23, #1
.text:00000000000030A4                 MOV             X9, X10
.text:00000000000030A8                 CBNZ            W8, loc_3094
.text:00000000000030AC                 MOV             X9, X10
.text:00000000000030B0 loc_30B0                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+90↑j
.text:00000000000030B0                 CMP             W23, #0x31 ; '1'
.text:00000000000030B4                 STRB            W27, [X9]
.text:00000000000030B8                 B.GT            loc_30C8
.text:00000000000030BC                 CMP             X24, #9
.text:00000000000030C0                 ADD             X24, X24, #1
.text:00000000000030C4                 B.CC            loc_305C
.text:00000000000030C8 loc_30C8                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+C0↑j
.text:00000000000030C8                 ADRP            X1, #aD@PAGE ; "%d"
.text:00000000000030CC                 ADD             X1, X1, #aD@PAGEOFF ; "%d"
.text:00000000000030D0                 ADD             X0, SP, #0x50+s ; s
.text:00000000000030D4                 MOV             W2, W21
.text:00000000000030D8                 ADD             X22, SP, #0x50+s
.text:00000000000030DC                 BL              .sprintf
.text:00000000000030E0                 LDRB            W8, [SP,#0x50+s]
.text:00000000000030E4                 CBZ             W8, loc_3104
.text:00000000000030E8                 ADD             X9, X19, W23,SXTW
.text:00000000000030EC                 ADD             X9, X9, #0xD88
.text:00000000000030F0                 ORR             X10, X22, #1
.text:00000000000030F4 loc_30F4                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+108↓j
.text:00000000000030F4                 STRB            W8, [X9],#1
.text:00000000000030F8                 LDRB            W8, [X10],#1
.text:00000000000030FC                 ADD             W23, W23, #1
.text:0000000000003100                 CBNZ            W8, loc_30F4
.text:0000000000003104 loc_3104                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+EC↑j
.text:0000000000003104                 ADRP            X1, #aD@PAGE ; "%d"
.text:0000000000003108                 ADD             X8, X19, W23,SXTW
.text:000000000000310C                 MOV             W21, #0x7C ; '|'
.text:0000000000003110                 ADD             X1, X1, #aD@PAGEOFF ; "%d"
.text:0000000000003114                 ADD             X0, SP, #0x50+s ; s
.text:0000000000003118                 MOV             W2, W20
.text:000000000000311C                 STRB            W21, [X8,#0xD88]
.text:0000000000003120                 ADD             X22, SP, #0x50+s
.text:0000000000003124                 BL              .sprintf
.text:0000000000003128                 LDRB            W8, [SP,#0x50+s]
.text:000000000000312C                 ADD             W9, W23, #1
.text:0000000000003130                 CBZ             W8, loc_3154
.text:0000000000003134                 ADD             X10, X19, W9,SXTW
.text:0000000000003138                 ORR             X9, X22, #1
.text:000000000000313C                 ADD             X10, X10, #0xD88
.text:0000000000003140 loc_3140                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+154↓j
.text:0000000000003140                 STRB            W8, [X10],#1
.text:0000000000003144                 LDRB            W8, [X9],#1
.text:0000000000003148                 ADD             W23, W23, #1
.text:000000000000314C                 CBNZ            W8, loc_3140
.text:0000000000003150                 ADD             W9, W23, #1
.text:0000000000003154 loc_3154                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+138↑j
.text:0000000000003154                 ADD             X8, X19, W9,SXTW
.text:0000000000003158                 CMP             W23, #0x2F ; '/'
.text:000000000000315C                 STRB            W21, [X8,#0xD88]
.text:0000000000003160                 B.GT            loc_31D8
.text:0000000000003164                 MOV             W8, #0x30 ; '0'
.text:0000000000003168                 SUB             W11, W8, W23
.text:000000000000316C                 ADD             W10, W23, #2
.text:0000000000003170                 CMP             W11, #0x20 ; ' '
.text:0000000000003174                 ADD             W8, W23, #3
.text:0000000000003178                 B.CS            loc_3184
.text:000000000000317C                 MOV             W9, W10
.text:0000000000003180                 B               loc_31C0
.text:0000000000003184 ; ---------------------------------------------------------------------------
.text:0000000000003184 loc_3184                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+180↑j
.text:0000000000003184                 AND             W12, W11, #0xFFFFFFE0
.text:0000000000003188                 ADD             W8, W8, W12
.text:000000000000318C                 ADD             W9, W10, W12
.text:0000000000003190                 MOVI            V0.2D, #0
.text:0000000000003194                 MOV             W13, W12
.text:0000000000003198 loc_3198                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+1BC↓j
.text:0000000000003198                 ADD             X14, X19, W10,SXTW
.text:000000000000319C                 SUBS            W13, W13, #0x20 ; ' '
.text:00000000000031A0                 ADD             X15, X14, #0xD88
.text:00000000000031A4                 ADD             X14, X14, #0xD98
.text:00000000000031A8                 ADD             W10, W10, #0x20 ; ' '
.text:00000000000031AC                 STR             Q0, [X15]
.text:00000000000031B0                 STR             Q0, [X14]
.text:00000000000031B4                 B.NE            loc_3198
.text:00000000000031B8                 CMP             W11, W12
.text:00000000000031BC                 B.EQ            loc_31D8
.text:00000000000031C0 loc_31C0                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+188↑j
.text:00000000000031C0                                         ; SAG_VM_Score::SAG_VM_update_1min_array_db(void)+1DC↓j
.text:00000000000031C0                 ADD             X10, X19, W9,SXTW
.text:00000000000031C4                 CMP             W8, #0x32 ; '2'
.text:00000000000031C8                 MOV             W9, W8
.text:00000000000031CC                 ADD             W8, W8, #1
.text:00000000000031D0                 STRB            WZR, [X10,#0xD88]
.text:00000000000031D4                 B.LT            loc_31C0
.text:00000000000031D8 loc_31D8                                ; CODE XREF: SAG_VM_Score::SAG_VM_update_1min_array_db(void)+168↑j
.text:00000000000031D8                                         ; SAG_VM_Score::SAG_VM_update_1min_array_db(void)+1C4↑j
.text:00000000000031D8                 LDP             X29, X30, [SP,#0x50+var_s0]
.text:00000000000031DC                 LDP             X20, X19, [SP,#0x50+var_10]
.text:00000000000031E0                 LDP             X22, X21, [SP,#0x50+var_20]
.text:00000000000031E4                 LDP             X24, X23, [SP,#0x50+var_30]
.text:00000000000031E8                 LDP             X26, X25, [SP,#0x50+var_40]
.text:00000000000031EC                 LDR             X27, [SP+0x50+var_50],#0x60
.text:00000000000031F0                 RET
.text:00000000000031F0 ; } // starts at 2FF8
.text:00000000000031F0 ; End of function SAG_VM_Score::SAG_VM_update_1min_array_db(void)
.text:00000000000031F4 ; =============== S U B R O U T I N E =======================================
.text:00000000000031F4 ; Attributes: bp-based frame
.text:00000000000031F4 ; SAG_VM_Score::SAG_VM_Score_Get_Final_Status(DateTime *, void **, int *)
.text:00000000000031F4                 EXPORT _ZN12SAG_VM_Score29SAG_VM_Score_Get_Final_StatusEP8DateTimePPvPi
.text:00000000000031F4 _ZN12SAG_VM_Score29SAG_VM_Score_Get_Final_StatusEP8DateTimePPvPi
.text:00000000000031F4                                         ; DATA XREF: LOAD:00000000000006D0↑o
.text:00000000000031F4                                         ; .data.rel.ro:00000000000185B0↓o
.text:00000000000031F4 var_30          = -0x30
.text:00000000000031F4 timer           = -0x28
.text:00000000000031F4 var_20          = -0x20
.text:00000000000031F4 var_10          = -0x10
.text:00000000000031F4 var_s0          =  0
.text:00000000000031F4 ; __unwind {
.text:00000000000031F4                 STR             D8, [SP,#-0x10+var_30]!
.text:00000000000031F8                 STP             X22, X21, [SP,#0x30+var_20]
.text:00000000000031FC                 STP             X20, X19, [SP,#0x30+var_10]
.text:0000000000003200                 STP             X29, X30, [SP,#0x30+var_s0]
.text:0000000000003204                 ADD             X29, SP, #0x30
.text:0000000000003208                 MOV             X19, X0
.text:000000000000320C                 LDR             X8, [X19]
.text:0000000000003210                 MOV             X20, X3
.text:0000000000003214                 MOV             X21, X2
.text:0000000000003218                 MOV             X22, X1
.text:000000000000321C                 LDR             X8, [X8,#0x48]
.text:0000000000003220                 BLR             X8
.text:0000000000003224                 ADD             X0, SP, #0x30+timer ; timer
.text:0000000000003228                 MOV             V8.16B, V0.16B
.text:000000000000322C                 BL              .time
.text:0000000000003230                 STR             X0, [SP,#0x30+timer]
.text:0000000000003234                 ADD             X0, SP, #0x30+timer ; timer
.text:0000000000003238                 BL              .localtime
.text:000000000000323C                 LDR             W8, [X0,#0x14]
.text:0000000000003240                 MOV             V0.16B, V8.16B
.text:0000000000003244                 MOV             X1, X22
.text:0000000000003248                 ADD             W8, W8, #0x76C
.text:000000000000324C                 STRH            W8, [X22]
.text:0000000000003250                 LDR             W8, [X0,#0x10]
.text:0000000000003254                 STRH            W8, [X22,#2]
.text:0000000000003258                 LDR             W8, [X0,#0xC]
.text:000000000000325C                 STRH            W8, [X22,#4]
.text:0000000000003260                 LDR             W8, [X0,#8]
.text:0000000000003264                 STRH            W8, [X22,#6]
.text:0000000000003268                 LDR             W8, [X0,#4]
.text:000000000000326C                 STRH            W8, [X22,#8]
.text:0000000000003270                 LDR             W8, [X0]
.text:0000000000003274                 MOV             X0, X19
.text:0000000000003278                 STRH            W8, [X22,#0xA]
.text:000000000000327C                 LDR             X8, [X19]
.text:0000000000003280                 LDR             X8, [X8,#0x50]
.text:0000000000003284                 BLR             X8
.text:0000000000003288                 LDR             X8, [X19]
.text:000000000000328C                 MOV             X0, X19
.text:0000000000003290                 LDR             X8, [X8,#0x68]
.text:0000000000003294                 BLR             X8
.text:0000000000003298                 ADD             X8, X19, #0xD88
.text:000000000000329C                 MOV             W9, #0x3C ; '<'
.text:00000000000032A0                 STR             X8, [X21]
.text:00000000000032A4                 STR             W9, [X20]
.text:00000000000032A8                 LDR             W8, [X22,#8]
.text:00000000000032AC                 ADRP            X1, #aWb@PAGE ; "wb"
.text:00000000000032B0                 ADD             X9, X19, #0xD5C
.text:00000000000032B4                 ADD             X0, X19, #0xDD0 ; filename
.text:00000000000032B8                 STR             W8, [X19,#0xD64]
.text:00000000000032BC                 LDR             X8, [X22]
.text:00000000000032C0                 ADD             X1, X1, #aWb@PAGEOFF ; "wb"
.text:00000000000032C4                 STR             X8, [X9]
.text:00000000000032C8                 BL              .fopen
.text:00000000000032CC                 MOV             X8, X0
.text:00000000000032D0                 STR             X8, [X19,#0xDC8]
.text:00000000000032D4                 CBZ             X8, loc_32F0
.text:00000000000032D8                 ADD             X0, X19, #0x60 ; '`' ; ptr
.text:00000000000032DC                 MOV             W1, #1  ; size
.text:00000000000032E0                 MOV             W2, #0xD20 ; n
.text:00000000000032E4                 MOV             X3, X8  ; s
.text:00000000000032E8                 BL              .fwrite
.text:00000000000032EC                 B               loc_3308
.text:00000000000032F0 ; ---------------------------------------------------------------------------
.text:00000000000032F0 loc_32F0                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Get_Final_Status(DateTime *,void **,int *)+E0↑j
.text:00000000000032F0                 ADRP            X1, #aSagVmScoreA64@PAGE ; "SAG_VM_SCORE a64"
.text:00000000000032F4                 ADRP            X2, #aSagVmScoreInit_0@PAGE ; "SAG_VM_Score_Init Failed to create file"...
.text:00000000000032F8                 ADD             X1, X1, #aSagVmScoreA64@PAGEOFF ; "SAG_VM_SCORE a64"
.text:00000000000032FC                 ADD             X2, X2, #aSagVmScoreInit_0@PAGEOFF ; "SAG_VM_Score_Init Failed to create file"...
.text:0000000000003300                 MOV             W0, #6
.text:0000000000003304                 BL              .__android_log_print
.text:0000000000003308 loc_3308                                ; CODE XREF: SAG_VM_Score::SAG_VM_Score_Get_Final_Status(DateTime *,void **,int *)+F8↑j
.text:0000000000003308                 LDP             X29, X30, [SP,#0x30+var_s0]
.text:000000000000330C                 LDP             X20, X19, [SP,#0x30+var_10]
.text:0000000000003310                 LDP             X22, X21, [SP,#0x30+var_20]
.text:0000000000003314                 LDR             D8, [SP+0x30+var_30],#0x40
.text:0000000000003318                 RET
.text:0000000000003318 ; } // starts at 31F4
.text:0000000000003318 ; End of function SAG_VM_Score::SAG_VM_Score_Get_Final_Status(DateTime *,void **,int *)
.text:000000000000331C ; =============== S U B R O U T I N E =======================================
.text:000000000000331C ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_Get_Debug_Handle(SAG_VM_Score *__hidden this)
.text:000000000000331C                 EXPORT _ZN12SAG_VM_Score29SAG_VM_Score_Get_Debug_HandleEv
.text:000000000000331C _ZN12SAG_VM_Score29SAG_VM_Score_Get_Debug_HandleEv
.text:000000000000331C                                         ; DATA XREF: LOAD:0000000000000820↑o
.text:000000000000331C                                         ; .data.rel.ro:00000000000185B8↓o
.text:000000000000331C                 ADD             X0, X0, #0x60 ; '`'
.text:0000000000003320                 RET
.text:0000000000003320 ; End of function SAG_VM_Score::SAG_VM_Score_Get_Debug_Handle(void)
.text:0000000000003324 ; =============== S U B R O U T I N E =======================================
.text:0000000000003324 ; __int64 __fastcall SAG_VM_Score::SAG_VM_Score_Get_Version(SAG_VM_Score *__hidden this)
.text:0000000000003324                 EXPORT _ZN12SAG_VM_Score24SAG_VM_Score_Get_VersionEv
.text:0000000000003324 _ZN12SAG_VM_Score24SAG_VM_Score_Get_VersionEv
.text:0000000000003324                                         ; DATA XREF: LOAD:0000000000000538↑o
.text:0000000000003324                                         ; .data.rel.ro:00000000000185C0↓o
.text:0000000000003324                 ADRP            X0, #_ZL20SAG_VM_Score_Version@PAGE ; "SAG VM Score v217 a64(2019.12.05)"
.text:0000000000003328                 ADD             X0, X0, #_ZL20SAG_VM_Score_Version@PAGEOFF ; "SAG VM Score v217 a64(2019.12.05)"
.text:000000000000332C                 RET
.text:000000000000332C ; End of function SAG_VM_Score::SAG_VM_Score_Get_Version(void)
.text:0000000000003330 ; =============== S U B R O U T I N E =======================================
.text:0000000000003330 ; Attributes: bp-based frame
.text:0000000000003330 ; SAG_VM_Score *__fastcall SAG_VM_Score::SAG_VM_Score(SAG_VM_Score *__hidden this)
.text:0000000000003330                 EXPORT _ZN12SAG_VM_ScoreC2Ev
.text:0000000000003330 _ZN12SAG_VM_ScoreC2Ev                   ; DATA XREF: LOAD:0000000000000658↑o
.text:0000000000003330                                         ; LOAD:0000000000000A90↑o
.text:0000000000003330 var_10          = -0x10
.text:0000000000003330 var_s0          =  0
.text:0000000000003330 ; __unwind {
.text:0000000000003330                 STR             X19, [SP,#-0x10+var_10]! ; Alternative name is 'SAG_VM_Score::SAG_VM_Score(void)'
.text:0000000000003334                 STP             X29, X30, [SP,#0x10+var_s0]
.text:0000000000003338                 ADD             X29, SP, #0x10
.text:000000000000333C                 ADRP            X8, #_ZTV12SAG_VM_Score_ptr@PAGE
.text:0000000000003340                 LDR             X8, [X8,#_ZTV12SAG_VM_Score_ptr@PAGEOFF]
.text:0000000000003344                 ADRP            X9, #_ZN12SAG_VM_Score8globalIDE_ptr@PAGE
.text:0000000000003348                 LDR             X9, [X9,#_ZN12SAG_VM_Score8globalIDE_ptr@PAGEOFF]
.text:000000000000334C                 MOV             X19, X0
.text:0000000000003350                 ADD             X8, X8, #0x10
.text:0000000000003354                 STR             X8, [X19]
.text:0000000000003358                 LDR             W3, [X9] ; SAG_VM_Score::globalID
.text:000000000000335C                 ADRP            X1, #aSagVmScoreA64@PAGE ; "SAG_VM_SCORE a64"
.text:0000000000003360                 ADRP            X2, #aSagVmScoreIdDS@PAGE ; "SAG_VM_Score ID = %d, %s\n"
.text:0000000000003364                 ADRP            X4, #_ZL20SAG_VM_Score_Version@PAGE ; "SAG VM Score v217 a64(2019.12.05)"
.text:0000000000003368                 ADD             W8, W3, #1
.text:000000000000336C                 ADD             X1, X1, #aSagVmScoreA64@PAGEOFF ; "SAG_VM_SCORE a64"
.text:0000000000003370                 ADD             X2, X2, #aSagVmScoreIdDS@PAGEOFF ; "SAG_VM_Score ID = %d, %s\n"
.text:0000000000003374                 ADD             X4, X4, #_ZL20SAG_VM_Score_Version@PAGEOFF ; "SAG VM Score v217 a64(2019.12.05)"
.text:0000000000003378                 MOV             W0, #4
.text:000000000000337C                 STR             W8, [X9] ; SAG_VM_Score::globalID
.text:0000000000003380                 STR             W3, [X19,#0xD84]
.text:0000000000003384                 BL              .__android_log_print
.text:0000000000003388                 ADRP            X8, #(aSagVmScoreInit_0+0x28)@PAGE ; "/data/snd/vmHist.bin"
.text:000000000000338C                 ADD             X8, X8, #(aSagVmScoreInit_0+0x28)@PAGEOFF ; "/data/snd/vmHist.bin"
.text:0000000000003390                 LDUR            X9, [X8,#0xD]
.text:0000000000003394                 LDR             Q0, [X8] ; "/data/snd/vmHist.bin"
.text:0000000000003398                 ADD             X8, X19, #0xDDD
.text:000000000000339C                 ADRP            X10, #qword_6C78@PAGE
.text:00000000000033A0                 STR             X9, [X8]
.text:00000000000033A4                 STR             Q0, [X19,#0xDD0]
.text:00000000000033A8                 LDR             D0, [X10,#qword_6C78@PAGEOFF]
.text:00000000000033AC                 LDR             X8, [X19]
.text:00000000000033B0                 STP             XZR, XZR, [X19,#0x18]
.text:00000000000033B4                 STP             XZR, XZR, [X19,#8]
.text:00000000000033B8                 STR             D0, [X19,#0xED0]
.text:00000000000033BC                 LDR             X1, [X8]
.text:00000000000033C0                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000033C4                 MOV             X0, X19
.text:00000000000033C8                 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000033CC                 BR              X1
.text:00000000000033CC ; } // starts at 3330
.text:00000000000033CC ; End of function SAG_VM_Score::SAG_VM_Score(void)
.text:00000000000033D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D0 ; void __fastcall SAG_VM_Score::~SAG_VM_Score(SAG_VM_Score *__hidden this)
.text:00000000000033D0                 EXPORT _ZN12SAG_VM_ScoreD2Ev
.text:00000000000033D0 _ZN12SAG_VM_ScoreD2Ev                   ; DATA XREF: LOAD:0000000000000508↑o
.text:00000000000033D0                                         ; LOAD:0000000000000AF0↑o ...
.text:00000000000033D0                 RET                     ; Alternative name is 'SAG_VM_Score::~SAG_VM_Score()'
.text:00000000000033D0 ; End of function SAG_VM_Score::~SAG_VM_Score()
.text:00000000000033D4 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D4 ; void __fastcall SAG_VM_Score::~SAG_VM_Score(SAG_VM_Score *__hidden this)
.text:00000000000033D4                 EXPORT _ZN12SAG_VM_ScoreD0Ev
.text:00000000000033D4 _ZN12SAG_VM_ScoreD0Ev                   ; DATA XREF: LOAD:0000000000000A00↑o
.text:00000000000033D4                                         ; .data.rel.ro:00000000000185D0↓o
.text:00000000000033D4                 B               ._ZdlPv ; operator delete(void *)
.text:00000000000033D4 ; End of function SAG_VM_Score::~SAG_VM_Score()
.text:00000000000033D8 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D8 ; Attributes: bp-based frame
.text:00000000000033D8 ; __int64 __fastcall SAG_VM_Score_Factory::Create(SAG_VM_Score_Factory *__hidden this)
.text:00000000000033D8                 EXPORT _ZN20SAG_VM_Score_Factory6CreateEv
.text:00000000000033D8 _ZN20SAG_VM_Score_Factory6CreateEv      ; DATA XREF: LOAD:0000000000000910↑o
.text:00000000000033D8 var_10          = -0x10
.text:00000000000033D8 var_s0          =  0
.text:00000000000033D8 ; __unwind { // __gxx_personality_v0
.text:00000000000033D8                 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000033DC                 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000033E0                 ADD             X29, SP, #0x10
.text:00000000000033E4                 MOV             W0, #0xED8 ; unsigned __int64
.text:00000000000033E8                 BL              ._Znwm  ; operator new(ulong)
.text:00000000000033EC                 ADRP            X8, #_ZN12SAG_VM_Score8globalIDE_ptr@PAGE
.text:00000000000033F0                 LDR             X8, [X8,#_ZN12SAG_VM_Score8globalIDE_ptr@PAGEOFF]
.text:00000000000033F4                 ADRP            X9, #_ZTV12SAG_VM_Score_ptr@PAGE
.text:00000000000033F8                 MOV             X19, X0
.text:00000000000033FC                 LDR             W3, [X8] ; SAG_VM_Score::globalID
.text:0000000000003400                 LDR             X9, [X9,#_ZTV12SAG_VM_Score_ptr@PAGEOFF]
.text:0000000000003404                 STR             W3, [X19,#0xD84]
.text:0000000000003408                 ADD             X9, X9, #0x10
.text:000000000000340C                 STR             X9, [X19]
.text:0000000000003410                 ADD             W9, W3, #1
.text:0000000000003414                 STR             W9, [X8] ; SAG_VM_Score::globalID
.text:0000000000003418 ;   try {
.text:0000000000003418                 ADRP            X1, #aSagVmScoreA64@PAGE ; "SAG_VM_SCORE a64"
.text:000000000000341C                 ADRP            X2, #aSagVmScoreIdDS@PAGE ; "SAG_VM_Score ID = %d, %s\n"
.text:0000000000003420                 ADRP            X4, #_ZL20SAG_VM_Score_Version@PAGE ; "SAG VM Score v217 a64(2019.12.05)"
.text:0000000000003424                 ADD             X1, X1, #aSagVmScoreA64@PAGEOFF ; "SAG_VM_SCORE a64"
.text:0000000000003428                 ADD             X2, X2, #aSagVmScoreIdDS@PAGEOFF ; "SAG_VM_Score ID = %d, %s\n"
.text:000000000000342C                 ADD             X4, X4, #_ZL20SAG_VM_Score_Version@PAGEOFF ; "SAG VM Score v217 a64(2019.12.05)"
.text:0000000000003430                 MOV             W0, #4
.text:0000000000003434                 BL              .__android_log_print
.text:0000000000003438                 ADRP            X8, #(aSagVmScoreInit_0+0x28)@PAGE ; "/data/snd/vmHist.bin"
.text:000000000000343C                 ADD             X8, X8, #(aSagVmScoreInit_0+0x28)@PAGEOFF ; "/data/snd/vmHist.bin"
.text:0000000000003440                 LDUR            X9, [X8,#0xD]
.text:0000000000003444                 LDR             Q0, [X8] ; "/data/snd/vmHist.bin"
.text:0000000000003448                 ADD             X8, X19, #0xDDD
.text:000000000000344C                 ADRP            X10, #qword_6C78@PAGE
.text:0000000000003450                 STR             X9, [X8]
.text:0000000000003454                 STR             Q0, [X19,#0xDD0]
.text:0000000000003458                 LDR             D0, [X10,#qword_6C78@PAGEOFF]
.text:000000000000345C                 LDR             X8, [X19]
.text:0000000000003460                 STP             XZR, XZR, [X19,#0x18]
.text:0000000000003464                 STP             XZR, XZR, [X19,#8]
.text:0000000000003468                 STR             D0, [X19,#0xED0]
.text:000000000000346C                 LDR             X8, [X8]
.text:0000000000003470                 MOV             X0, X19
.text:0000000000003474                 BLR             X8
.text:0000000000003474 ;   } // starts at 3418
.text:0000000000003478                 LDP             X29, X30, [SP,#0x10+var_s0]
.text:000000000000347C                 MOV             X0, X19
.text:0000000000003480                 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:0000000000003484                 RET
.text:0000000000003488 ; ---------------------------------------------------------------------------
.text:0000000000003488 ;   cleanup() // owned by 3418
.text:0000000000003488                 MOV             X20, X0
.text:000000000000348C                 MOV             X0, X19 ; void *
.text:0000000000003490                 BL              ._ZdlPv ; operator delete(void *)
.text:0000000000003494                 MOV             X0, X20
.text:0000000000003498                 BL              ._Unwind_Resume
.text:0000000000003498 ; } // starts at 33D8
.text:0000000000003498 ; End of function SAG_VM_Score_Factory::Create(void)
.text:000000000000349C ; =============== S U B R O U T I N E =======================================
.text:000000000000349C ; SAG_VM_Score_Factory::Destroy(SAG_VM_Score_Interface *)
.text:000000000000349C                 EXPORT _ZN20SAG_VM_Score_Factory7DestroyEP22SAG_VM_Score_Interface
.text:000000000000349C _ZN20SAG_VM_Score_Factory7DestroyEP22SAG_VM_Score_Interface
.text:000000000000349C                                         ; DATA XREF: LOAD:0000000000000AA8↑o
.text:000000000000349C ; __unwind {
.text:000000000000349C                 CBZ             X0, locret_34AC
.text:00000000000034A0                 LDR             X8, [X0]
.text:00000000000034A4                 LDR             X1, [X8,#0x40]
.text:00000000000034A8                 BR              X1
.text:00000000000034AC ; ---------------------------------------------------------------------------
.text:00000000000034AC locret_34AC                             ; CODE XREF: SAG_VM_Score_Factory::Destroy(SAG_VM_Score_Interface *)↑j
.text:00000000000034AC                 RET
.text:00000000000034AC ; } // starts at 349C
.text:00000000000034AC ; End of function SAG_VM_Score_Factory::Destroy(SAG_VM_Score_Interface *)
.text:00000000000034B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034B0 read_uleb128                            ; CODE XREF: read_encoded_value_with_base+64↓p
.text:00000000000034B0                                         ; execute_cfa_program+164↓p ...
.text:00000000000034B0 ; __unwind {
.text:00000000000034B0                 MOV             X2, #0
.text:00000000000034B4                 MOV             W3, #0
.text:00000000000034B8 loc_34B8                                ; CODE XREF: read_uleb128+1C↓j
.text:00000000000034B8                 LDRB            W5, [X0],#1
.text:00000000000034BC                 AND             X4, X5, #0x7F
.text:00000000000034C0                 LSL             X4, X4, X3
.text:00000000000034C4                 ADD             W3, W3, #7
.text:00000000000034C8                 ORR             X2, X2, X4
.text:00000000000034CC                 TBNZ            W5, #7, loc_34B8
.text:00000000000034D0                 STR             X2, [X1]
.text:00000000000034D4                 RET
.text:00000000000034D4 ; } // starts at 34B0
.text:00000000000034D4 ; End of function read_uleb128
.text:00000000000034D8 ; =============== S U B R O U T I N E =======================================
.text:00000000000034D8 read_sleb128                            ; CODE XREF: read_encoded_value_with_base+74↓p
.text:00000000000034D8                                         ; execute_cfa_program+318↓p ...
.text:00000000000034D8 ; __unwind {
.text:00000000000034D8                 MOV             X2, #0
.text:00000000000034DC                 MOV             W3, #0
.text:00000000000034E0 loc_34E0                                ; CODE XREF: read_sleb128+1C↓j
.text:00000000000034E0                 LDRB            W4, [X0],#1
.text:00000000000034E4                 AND             X5, X4, #0x7F
.text:00000000000034E8                 LSL             X5, X5, X3
.text:00000000000034EC                 ADD             W3, W3, #7
.text:00000000000034F0                 ORR             X2, X2, X5
.text:00000000000034F4                 TBNZ            W4, #7, loc_34E0
.text:00000000000034F8                 CMP             W3, #0x3F ; '?'
.text:00000000000034FC                 B.HI            loc_3510
.text:0000000000003500                 TBZ             W4, #6, loc_3510
.text:0000000000003504                 MOV             X4, #0xFFFFFFFFFFFFFFFF
.text:0000000000003508                 LSL             X3, X4, X3
.text:000000000000350C                 ORR             X2, X3, X2
.text:0000000000003510 loc_3510                                ; CODE XREF: read_sleb128+24↑j
.text:0000000000003510                                         ; read_sleb128+28↑j
.text:0000000000003510                 STR             X2, [X1]
.text:0000000000003514                 RET
.text:0000000000003514 ; } // starts at 34D8
.text:0000000000003514 ; End of function read_sleb128
.text:0000000000003518 ; =============== S U B R O U T I N E =======================================
.text:0000000000003518 ; Attributes: bp-based frame fpd=0x40
.text:0000000000003518 read_encoded_value_with_base            ; CODE XREF: execute_cfa_program+100↓p
.text:0000000000003518                                         ; uw_frame_state_for+2D0↓p ...
.text:0000000000003518 var_40          = -0x40
.text:0000000000003518 var_30          = -0x30
.text:0000000000003518 var_20          = -0x20
.text:0000000000003518 var_8           = -8
.text:0000000000003518 ; __unwind {
.text:0000000000003518                 STP             X29, X30, [SP,#var_40]!
.text:000000000000351C                 MOV             X29, SP
.text:0000000000003520                 STP             X19, X20, [SP,#0x40+var_30]
.text:0000000000003524                 UXTB            W20, W0
.text:0000000000003528                 MOV             X19, X2
.text:000000000000352C                 STP             X21, X22, [SP,#0x40+var_20]
.text:0000000000003530                 CMP             W20, #0x50 ; 'P'
.text:0000000000003534                 MOV             X22, X1
.text:0000000000003538                 MOV             X21, X3
.text:000000000000353C                 B.NE            loc_3550
.text:0000000000003540                 ADD             X19, X2, #7
.text:0000000000003544                 AND             X0, X19, #0xFFFFFFFFFFFFFFF8
.text:0000000000003548                 LDR             X1, [X0],#8
.text:000000000000354C                 B               loc_35F4
.text:0000000000003550 ; ---------------------------------------------------------------------------
.text:0000000000003550 loc_3550                                ; CODE XREF: read_encoded_value_with_base+24↑j
.text:0000000000003550                 AND             W1, W20, #0xF
.text:0000000000003554                 CMP             W1, #0xC ; switch 13 cases
.text:0000000000003558                 B.HI            def_3570 ; jumptable 0000000000003570 default case, cases 5-8
.text:000000000000355C                 ADRP            X0, #jpt_3570@PAGE
.text:0000000000003560                 ADD             X0, X0, #jpt_3570@PAGEOFF
.text:0000000000003564                 LDRB            W0, [X0,W1,UXTW]
.text:0000000000003568                 ADR             X1, loc_3574 ; jumptable 0000000000003570 case 1
.text:000000000000356C                 ADD             X0, X1, W0,SXTB#2
.text:0000000000003570                 BR              X0      ; switch jump
.text:0000000000003574 ; ---------------------------------------------------------------------------
.text:0000000000003574 loc_3574                                ; CODE XREF: read_encoded_value_with_base+58↑j
.text:0000000000003574                                         ; DATA XREF: read_encoded_value_with_base+50↑o
.text:0000000000003574                 MOV             X0, X2  ; jumptable 0000000000003570 case 1
.text:0000000000003578                 ADD             X1, X29, #0x38 ; '8'
.text:000000000000357C                 BL              read_uleb128
.text:0000000000003580                 B               loc_3590
.text:0000000000003584 ; ---------------------------------------------------------------------------
.text:0000000000003584 loc_3584                                ; CODE XREF: read_encoded_value_with_base+58↑j
.text:0000000000003584                 MOV             X0, X2  ; jumptable 0000000000003570 case 9
.text:0000000000003588                 ADD             X1, X29, #0x38 ; '8'
.text:000000000000358C                 BL              read_sleb128
.text:0000000000003590 loc_3590                                ; CODE XREF: read_encoded_value_with_base+68↑j
.text:0000000000003590                 LDR             X1, [X29,#0x40+var_8]
.text:0000000000003594                 B               loc_35D8
.text:0000000000003598 ; ---------------------------------------------------------------------------
.text:0000000000003598 loc_3598                                ; CODE XREF: read_encoded_value_with_base+58↑j
.text:0000000000003598                 MOV             X0, X2  ; jumptable 0000000000003570 case 2
.text:000000000000359C                 LDRH            W1, [X0],#2
.text:00000000000035A0                 B               loc_35D8
.text:00000000000035A4 ; ---------------------------------------------------------------------------
.text:00000000000035A4 loc_35A4                                ; CODE XREF: read_encoded_value_with_base+58↑j
.text:00000000000035A4                 MOV             X0, X2  ; jumptable 0000000000003570 case 3
.text:00000000000035A8                 LDR             W1, [X0],#4
.text:00000000000035AC                 B               loc_35D8
.text:00000000000035B0 ; ---------------------------------------------------------------------------
.text:00000000000035B0 loc_35B0                                ; CODE XREF: read_encoded_value_with_base+58↑j
.text:00000000000035B0                 MOV             X0, X2  ; jumptable 0000000000003570 case 10
.text:00000000000035B4                 LDRSH           X1, [X0],#2
.text:00000000000035B8                 B               loc_35D8
.text:00000000000035BC ; ---------------------------------------------------------------------------
.text:00000000000035BC loc_35BC                                ; CODE XREF: read_encoded_value_with_base+58↑j
.text:00000000000035BC                 MOV             X0, X2  ; jumptable 0000000000003570 case 11
.text:00000000000035C0                 LDRSW           X1, [X0],#4
.text:00000000000035C4                 B               loc_35D8
.text:00000000000035C8 ; ---------------------------------------------------------------------------
.text:00000000000035C8 loc_35C8                                ; CODE XREF: read_encoded_value_with_base+58↑j
.text:00000000000035C8                 MOV             X0, X2  ; jumptable 0000000000003570 cases 0,4,12
.text:00000000000035CC                 LDR             X1, [X0],#8
.text:00000000000035D0                 B               loc_35D8
.text:00000000000035D4 ; ---------------------------------------------------------------------------
.text:00000000000035D4 def_3570                                ; CODE XREF: read_encoded_value_with_base+40↑j
.text:00000000000035D4                                         ; read_encoded_value_with_base+58↑j
.text:00000000000035D4                 BL              .abort  ; jumptable 0000000000003570 default case, cases 5-8
.text:00000000000035D8 ; ---------------------------------------------------------------------------
.text:00000000000035D8 loc_35D8                                ; CODE XREF: read_encoded_value_with_base+7C↑j
.text:00000000000035D8                                         ; read_encoded_value_with_base+88↑j ...
.text:00000000000035D8                 CBZ             X1, loc_35F4
.text:00000000000035DC                 AND             W2, W20, #0x70
.text:00000000000035E0                 CMP             W2, #0x10
.text:00000000000035E4                 CSEL            X19, X19, X22, EQ
.text:00000000000035E8                 ADD             X1, X1, X19
.text:00000000000035EC                 TBZ             W20, #7, loc_35F4
.text:00000000000035F0                 LDR             X1, [X1]
.text:00000000000035F4 loc_35F4                                ; CODE XREF: read_encoded_value_with_base+34↑j
.text:00000000000035F4                                         ; read_encoded_value_with_base:loc_35D8↑j ...
.text:00000000000035F4                 STR             X1, [X21]
.text:00000000000035F8                 LDP             X19, X20, [SP,#0x40+var_30]
.text:00000000000035FC                 LDP             X21, X22, [SP,#0x40+var_20]
.text:0000000000003600                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:0000000000003604                 RET
.text:0000000000003604 ; } // starts at 3518
.text:0000000000003604 ; End of function read_encoded_value_with_base
.text:0000000000003608 ; =============== S U B R O U T I N E =======================================
.text:0000000000003608 init_dwarf_reg_size_table               ; CODE XREF: uw_init_context_1+70↓p
.text:0000000000003608                                         ; DATA XREF: uw_init_context_1+7C↓o ...
.text:0000000000003608 ; __unwind {
.text:0000000000003608                 ADRP            X2, #dwarf_reg_size_table@PAGE
.text:000000000000360C                 MOV             W0, #8
.text:0000000000003610                 ADD             X1, X2, #dwarf_reg_size_table@PAGEOFF
.text:0000000000003614                 STRB            W0, [X2,#dwarf_reg_size_table@PAGEOFF]
.text:0000000000003618                 STRB            W0, [X1,#(byte_18991 - 0x18990)]
.text:000000000000361C                 STRB            W0, [X1,#(byte_18992 - 0x18990)]
.text:0000000000003620                 STRB            W0, [X1,#(byte_18993 - 0x18990)]
.text:0000000000003624                 STRB            W0, [X1,#(byte_18994 - 0x18990)]
.text:0000000000003628                 STRB            W0, [X1,#(byte_18995 - 0x18990)]
.text:000000000000362C                 STRB            W0, [X1,#(byte_18996 - 0x18990)]
.text:0000000000003630                 STRB            W0, [X1,#(byte_18997 - 0x18990)]
.text:0000000000003634                 STRB            W0, [X1,#(byte_18998 - 0x18990)]
.text:0000000000003638                 STRB            W0, [X1,#(byte_18999 - 0x18990)]
.text:000000000000363C                 STRB            W0, [X1,#(byte_1899A - 0x18990)]
.text:0000000000003640                 STRB            W0, [X1,#(byte_1899B - 0x18990)]
.text:0000000000003644                 STRB            W0, [X1,#(byte_1899C - 0x18990)]
.text:0000000000003648                 STRB            W0, [X1,#(byte_1899D - 0x18990)]
.text:000000000000364C                 STRB            W0, [X1,#(byte_1899E - 0x18990)]
.text:0000000000003650                 STRB            W0, [X1,#(byte_1899F - 0x18990)]
.text:0000000000003654                 STRB            W0, [X1,#(byte_189A0 - 0x18990)]
.text:0000000000003658                 STRB            W0, [X1,#(byte_189A1 - 0x18990)]
.text:000000000000365C                 STRB            W0, [X1,#(byte_189A2 - 0x18990)]
.text:0000000000003660                 STRB            W0, [X1,#(byte_189A3 - 0x18990)]
.text:0000000000003664                 STRB            W0, [X1,#(byte_189A4 - 0x18990)]
.text:0000000000003668                 STRB            W0, [X1,#(byte_189A5 - 0x18990)]
.text:000000000000366C                 STRB            W0, [X1,#(byte_189A6 - 0x18990)]
.text:0000000000003670                 STRB            W0, [X1,#(byte_189A7 - 0x18990)]
.text:0000000000003674                 STRB            W0, [X1,#(byte_189A8 - 0x18990)]
.text:0000000000003678                 STRB            W0, [X1,#(byte_189A9 - 0x18990)]
.text:000000000000367C                 STRB            W0, [X1,#(byte_189AA - 0x18990)]
.text:0000000000003680                 STRB            W0, [X1,#(byte_189AB - 0x18990)]
.text:0000000000003684                 STRB            W0, [X1,#(byte_189AC - 0x18990)]
.text:0000000000003688                 STRB            W0, [X1,#(byte_189AD - 0x18990)]
.text:000000000000368C                 STRB            W0, [X1,#(byte_189AE - 0x18990)]
.text:0000000000003690                 STRB            W0, [X1,#(byte_189AF - 0x18990)]
.text:0000000000003694                 STRB            W0, [X1,#(byte_189D0 - 0x18990)]
.text:0000000000003698                 STRB            W0, [X1,#(byte_189D1 - 0x18990)]
.text:000000000000369C                 STRB            W0, [X1,#(byte_189D2 - 0x18990)]
.text:00000000000036A0                 STRB            W0, [X1,#(byte_189D3 - 0x18990)]
.text:00000000000036A4                 STRB            W0, [X1,#(byte_189D4 - 0x18990)]
.text:00000000000036A8                 STRB            W0, [X1,#(byte_189D5 - 0x18990)]
.text:00000000000036AC                 STRB            W0, [X1,#(byte_189D6 - 0x18990)]
.text:00000000000036B0                 STRB            W0, [X1,#(byte_189D7 - 0x18990)]
.text:00000000000036B4                 STRB            W0, [X1,#(byte_189D8 - 0x18990)]
.text:00000000000036B8                 STRB            W0, [X1,#(byte_189D9 - 0x18990)]
.text:00000000000036BC                 STRB            W0, [X1,#(byte_189DA - 0x18990)]
.text:00000000000036C0                 STRB            W0, [X1,#(byte_189DB - 0x18990)]
.text:00000000000036C4                 STRB            W0, [X1,#(byte_189DC - 0x18990)]
.text:00000000000036C8                 STRB            W0, [X1,#(byte_189DD - 0x18990)]
.text:00000000000036CC                 STRB            W0, [X1,#(byte_189DE - 0x18990)]
.text:00000000000036D0                 STRB            W0, [X1,#(byte_189DF - 0x18990)]
.text:00000000000036D4                 STRB            W0, [X1,#(byte_189E0 - 0x18990)]
.text:00000000000036D8                 STRB            W0, [X1,#(byte_189E1 - 0x18990)]
.text:00000000000036DC                 STRB            W0, [X1,#(byte_189E2 - 0x18990)]
.text:00000000000036E0                 STRB            W0, [X1,#(byte_189E3 - 0x18990)]
.text:00000000000036E4                 STRB            W0, [X1,#(byte_189E4 - 0x18990)]
.text:00000000000036E8                 STRB            W0, [X1,#(byte_189E5 - 0x18990)]
.text:00000000000036EC                 STRB            W0, [X1,#(byte_189E6 - 0x18990)]
.text:00000000000036F0                 STRB            W0, [X1,#(byte_189E7 - 0x18990)]
.text:00000000000036F4                 STRB            W0, [X1,#(byte_189E8 - 0x18990)]
.text:00000000000036F8                 STRB            W0, [X1,#(byte_189E9 - 0x18990)]
.text:00000000000036FC                 STRB            W0, [X1,#(byte_189EA - 0x18990)]
.text:0000000000003700                 STRB            W0, [X1,#(byte_189EB - 0x18990)]
.text:0000000000003704                 STRB            W0, [X1,#(byte_189EC - 0x18990)]
.text:0000000000003708                 STRB            W0, [X1,#(byte_189ED - 0x18990)]
.text:000000000000370C                 STRB            W0, [X1,#(byte_189EE - 0x18990)]
.text:0000000000003710                 STRB            W0, [X1,#(byte_189EF - 0x18990)]
.text:0000000000003714                 STRB            W0, [X1,#(byte_189F0 - 0x18990)]
.text:0000000000003718                 RET
.text:0000000000003718 ; } // starts at 3608
.text:0000000000003718 ; End of function init_dwarf_reg_size_table
.text:000000000000371C ; =============== S U B R O U T I N E =======================================
.text:000000000000371C ; Attributes: bp-based frame
.text:000000000000371C _Unwind_SetSpColumn                     ; CODE XREF: uw_install_context_1+3C↓p
.text:000000000000371C                                         ; uw_update_context_1+60↓p ...
.text:000000000000371C var_s0          =  0
.text:000000000000371C ; __unwind {
.text:000000000000371C                 ADRP            X3, #byte_189AF@PAGE
.text:0000000000003720                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000003724                 MOV             X29, SP
.text:0000000000003728                 LDRB            W3, [X3,#byte_189AF@PAGEOFF]
.text:000000000000372C                 CMP             W3, #8
.text:0000000000003730                 B.NE            loc_3748
.text:0000000000003734                 STR             X1, [X2]
.text:0000000000003738                 LDR             X1, [X0,#0x340]
.text:000000000000373C                 TBZ             X1, #0x3E, loc_374C ; '>'
.text:0000000000003740                 STRB            WZR, [X0,#0x377]
.text:0000000000003744                 B               loc_374C
.text:0000000000003748 ; ---------------------------------------------------------------------------
.text:0000000000003748 loc_3748                                ; CODE XREF: _Unwind_SetSpColumn+14↑j
.text:0000000000003748                 BL              .abort
.text:000000000000374C ; ---------------------------------------------------------------------------
.text:000000000000374C loc_374C                                ; CODE XREF: _Unwind_SetSpColumn+20↑j
.text:000000000000374C                                         ; _Unwind_SetSpColumn+28↑j
.text:000000000000374C                 STR             X2, [X0,#0xF8]
.text:0000000000003750                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000003754                 RET
.text:0000000000003754 ; } // starts at 371C
.text:0000000000003754 ; End of function _Unwind_SetSpColumn
.text:0000000000003758 ; =============== S U B R O U T I N E =======================================
.text:0000000000003758 ; Attributes: bp-based frame
.text:0000000000003758 _Unwind_GetGR.localalias.0              ; CODE XREF: uw_install_context_1+E8↓p
.text:0000000000003758                                         ; execute_stack_op+1EC↓p ...
.text:0000000000003758 var_s0          =  0
.text:0000000000003758 ; __unwind {
.text:0000000000003758                 STP             X29, X30, [SP,#-0x10+var_s0]! ; Alternative name is '_Unwind_GetGR'
.text:000000000000375C                 CMP             W1, #0x61 ; 'a'
.text:0000000000003760                 MOV             X29, SP
.text:0000000000003764                 B.LE            loc_376C
.text:0000000000003768 loc_3768                                ; CODE XREF: _Unwind_GetGR.localalias.0+48↓j
.text:0000000000003768                 BL              .abort
.text:000000000000376C ; ---------------------------------------------------------------------------
.text:000000000000376C loc_376C                                ; CODE XREF: _Unwind_GetGR.localalias.0+C↑j
.text:000000000000376C                 ADRP            X3, #dwarf_reg_size_table@PAGE
.text:0000000000003770                 SXTW            X2, W1
.text:0000000000003774                 ADD             X3, X3, #dwarf_reg_size_table@PAGEOFF
.text:0000000000003778                 LDR             X4, [X0,#0x340]
.text:000000000000377C                 LDR             X1, [X0,W1,SXTW#3]
.text:0000000000003780                 LDRB            W3, [X3,X2]
.text:0000000000003784                 TBZ             X4, #0x3E, loc_379C ; '>'
.text:0000000000003788                 ADD             X2, X0, X2
.text:000000000000378C                 LDRB            W0, [X2,#0x358]
.text:0000000000003790                 CBZ             W0, loc_379C
.text:0000000000003794                 MOV             X0, X1
.text:0000000000003798                 B               loc_37A8
.text:000000000000379C ; ---------------------------------------------------------------------------
.text:000000000000379C loc_379C                                ; CODE XREF: _Unwind_GetGR.localalias.0+2C↑j
.text:000000000000379C                                         ; _Unwind_GetGR.localalias.0+38↑j
.text:000000000000379C                 CMP             W3, #8
.text:00000000000037A0                 B.NE            loc_3768
.text:00000000000037A4                 LDR             X0, [X1]
.text:00000000000037A8 loc_37A8                                ; CODE XREF: _Unwind_GetGR.localalias.0+40↑j
.text:00000000000037A8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000037AC                 RET
.text:00000000000037AC ; } // starts at 3758
.text:00000000000037AC ; End of function _Unwind_GetGR.localalias.0
.text:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037B0 ; Attributes: bp-based frame fpd=0x40
.text:00000000000037B0 uw_install_context_1                    ; CODE XREF: _Unwind_RaiseException+110↓p
.text:00000000000037B0                                         ; _Unwind_ForcedUnwind+94↓p ...
.text:00000000000037B0 var_40          = -0x40
.text:00000000000037B0 var_30          = -0x30
.text:00000000000037B0 var_20          = -0x20
.text:00000000000037B0 ; __unwind {
.text:00000000000037B0                 STP             X29, X30, [SP,#var_40]!
.text:00000000000037B4                 MOV             X29, SP
.text:00000000000037B8                 STP             X21, X22, [SP,#0x40+var_20]
.text:00000000000037BC                 MOV             X21, X0
.text:00000000000037C0                 LDR             X0, [X1,#0x340]
.text:00000000000037C4                 STP             X19, X20, [SP,#0x40+var_30]
.text:00000000000037C8                 MOV             X19, X1
.text:00000000000037CC                 TBZ             X0, #0x3E, loc_37D8 ; '>'
.text:00000000000037D0                 LDRB            W0, [X1,#0x377]
.text:00000000000037D4                 CBNZ            W0, loc_37F0
.text:00000000000037D8 loc_37D8                                ; CODE XREF: uw_install_context_1+1C↑j
.text:00000000000037D8                 LDR             X0, [X19,#0xF8]
.text:00000000000037DC                 CBNZ            X0, loc_37F0
.text:00000000000037E0                 LDR             X1, [X19,#0x310]
.text:00000000000037E4                 MOV             X0, X19
.text:00000000000037E8                 ADD             X2, X29, #0x38 ; '8'
.text:00000000000037EC                 BL              _Unwind_SetSpColumn
.text:00000000000037F0 loc_37F0                                ; CODE XREF: uw_install_context_1+24↑j
.text:00000000000037F0                                         ; uw_install_context_1+2C↑j
.text:00000000000037F0                 MOV             X20, #0
.text:00000000000037F4                 ADRP            X22, #dwarf_reg_size_table@PAGE
.text:00000000000037F8 loc_37F8                                ; CODE XREF: uw_install_context_1+BC↓j
.text:00000000000037F8                 ADD             X2, X21, X20
.text:00000000000037FC                 LDR             X0, [X21,X20,LSL#3] ; dest
.text:0000000000003800                 LDR             X1, [X19,X20,LSL#3] ; src
.text:0000000000003804                 LDRB            W2, [X2,#0x358]
.text:0000000000003808                 CBZ             W2, loc_3810
.text:000000000000380C loc_380C                                ; CODE XREF: uw_install_context_1+84↓j
.text:000000000000380C                 BL              .abort
.text:0000000000003810 ; ---------------------------------------------------------------------------
.text:0000000000003810 loc_3810                                ; CODE XREF: uw_install_context_1+58↑j
.text:0000000000003810                 ADD             X3, X19, X20
.text:0000000000003814                 CMP             X0, XZR
.text:0000000000003818                 CSET            W2, NE
.text:000000000000381C                 LDRB            W3, [X3,#0x358]
.text:0000000000003820                 CBZ             W3, loc_3840
.text:0000000000003824                 CBZ             W2, loc_3840
.text:0000000000003828                 ADD             X2, X22, #dwarf_reg_size_table@PAGEOFF
.text:000000000000382C                 LDRB            W2, [X20,X2]
.text:0000000000003830                 CMP             W2, #8
.text:0000000000003834                 B.NE            loc_380C
.text:0000000000003838                 STR             X1, [X0]
.text:000000000000383C                 B               loc_3864
.text:0000000000003840 ; ---------------------------------------------------------------------------
.text:0000000000003840 loc_3840                                ; CODE XREF: uw_install_context_1+70↑j
.text:0000000000003840                                         ; uw_install_context_1+74↑j
.text:0000000000003840                 CMP             X1, XZR
.text:0000000000003844                 CSET            W3, NE
.text:0000000000003848                 TST             W2, W3
.text:000000000000384C                 B.EQ            loc_3864
.text:0000000000003850                 CMP             X1, X0
.text:0000000000003854                 B.EQ            loc_3864
.text:0000000000003858                 ADD             X2, X22, #dwarf_reg_size_table@PAGEOFF
.text:000000000000385C                 LDRB            W2, [X2,X20] ; n
.text:0000000000003860                 BL              .memcpy
.text:0000000000003864 loc_3864                                ; CODE XREF: uw_install_context_1+8C↑j
.text:0000000000003864                                         ; uw_install_context_1+9C↑j ...
.text:0000000000003864                 ADD             X20, X20, #1
.text:0000000000003868                 CMP             X20, #0x61 ; 'a'
.text:000000000000386C                 B.NE            loc_37F8
.text:0000000000003870                 LDR             X0, [X21,#0x340]
.text:0000000000003874                 TBZ             X0, #0x3E, loc_3884 ; '>'
.text:0000000000003878                 LDRB            W1, [X21,#0x377]
.text:000000000000387C                 MOV             X0, #0
.text:0000000000003880                 CBNZ            W1, loc_38AC
.text:0000000000003884 loc_3884                                ; CODE XREF: uw_install_context_1+C4↑j
.text:0000000000003884                 LDR             X1, [X21,#0xF8]
.text:0000000000003888                 MOV             X0, #0
.text:000000000000388C                 CBNZ            X1, loc_38AC
.text:0000000000003890                 MOV             W1, #0x1F
.text:0000000000003894                 MOV             X0, X19
.text:0000000000003898                 BL              _Unwind_GetGR.localalias.0
.text:000000000000389C                 LDR             X1, [X21,#0x310]
.text:00000000000038A0                 LDR             X21, [X19,#0x350]
.text:00000000000038A4                 SUB             X0, X0, X1
.text:00000000000038A8                 ADD             X0, X0, X21
.text:00000000000038AC loc_38AC                                ; CODE XREF: uw_install_context_1+D0↑j
.text:00000000000038AC                                         ; uw_install_context_1+DC↑j
.text:00000000000038AC                 LDP             X19, X20, [SP,#0x40+var_30]
.text:00000000000038B0                 LDP             X21, X22, [SP,#0x40+var_20]
.text:00000000000038B4                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:00000000000038B8                 RET
.text:00000000000038B8 ; } // starts at 37B0
.text:00000000000038B8 ; End of function uw_install_context_1
.text:00000000000038BC ; =============== S U B R O U T I N E =======================================
.text:00000000000038BC                 EXPORT _Unwind_GetCFA
.text:00000000000038BC _Unwind_GetCFA                          ; CODE XREF: ._Unwind_GetCFA+C↑j
.text:00000000000038BC                                         ; DATA XREF: LOAD:0000000000000AC0↑o ...
.text:00000000000038BC ; __unwind {
.text:00000000000038BC                 LDR             X0, [X0,#0x310]
.text:00000000000038C0                 RET
.text:00000000000038C0 ; } // starts at 38BC
.text:00000000000038C0 ; End of function _Unwind_GetCFA
.text:00000000000038C4 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C4 ; Attributes: bp-based frame
.text:00000000000038C4                 EXPORT _Unwind_SetGR
.text:00000000000038C4 _Unwind_SetGR                           ; DATA XREF: LOAD:00000000000005C8↑o
.text:00000000000038C4 var_s0          =  0
.text:00000000000038C4 ; __unwind {
.text:00000000000038C4                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000038C8                 CMP             W1, #0x61 ; 'a'
.text:00000000000038CC                 MOV             X29, SP
.text:00000000000038D0                 B.LE            loc_38D8
.text:00000000000038D4 loc_38D4                                ; CODE XREF: _Unwind_SetGR+48↓j
.text:00000000000038D4                 BL              .abort
.text:00000000000038D8 ; ---------------------------------------------------------------------------
.text:00000000000038D8 loc_38D8                                ; CODE XREF: _Unwind_SetGR+C↑j
.text:00000000000038D8                 ADRP            X4, #dwarf_reg_size_table@PAGE
.text:00000000000038DC                 SXTW            X3, W1
.text:00000000000038E0                 ADD             X4, X4, #dwarf_reg_size_table@PAGEOFF
.text:00000000000038E4                 LDR             X5, [X0,#0x340]
.text:00000000000038E8                 LDRB            W4, [X4,X3]
.text:00000000000038EC                 TBZ             X5, #0x3E, loc_3904 ; '>'
.text:00000000000038F0                 ADD             X3, X0, X3
.text:00000000000038F4                 LDRB            W3, [X3,#0x358]
.text:00000000000038F8                 CBZ             W3, loc_3904
.text:00000000000038FC                 STR             X2, [X0,W1,SXTW#3]
.text:0000000000003900                 B               loc_3914
.text:0000000000003904 ; ---------------------------------------------------------------------------
.text:0000000000003904 loc_3904                                ; CODE XREF: _Unwind_SetGR+28↑j
.text:0000000000003904                                         ; _Unwind_SetGR+34↑j
.text:0000000000003904                 CMP             W4, #8
.text:0000000000003908                 LDR             X0, [X0,W1,SXTW#3]
.text:000000000000390C                 B.NE            loc_38D4
.text:0000000000003910                 STR             X2, [X0]
.text:0000000000003914 loc_3914                                ; CODE XREF: _Unwind_SetGR+3C↑j
.text:0000000000003914                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000003918                 RET
.text:0000000000003918 ; } // starts at 38C4
.text:0000000000003918 ; End of function _Unwind_SetGR
.text:000000000000391C ; =============== S U B R O U T I N E =======================================
.text:000000000000391C                 EXPORT _Unwind_GetIP
.text:000000000000391C _Unwind_GetIP                           ; DATA XREF: LOAD:0000000000000C28↑o
.text:000000000000391C ; __unwind {
.text:000000000000391C                 LDR             X0, [X0,#0x318]
.text:0000000000003920                 RET
.text:0000000000003920 ; } // starts at 391C
.text:0000000000003920 ; End of function _Unwind_GetIP
.text:0000000000003924 ; =============== S U B R O U T I N E =======================================
.text:0000000000003924                 EXPORT _Unwind_GetIPInfo
.text:0000000000003924 _Unwind_GetIPInfo                       ; DATA XREF: LOAD:0000000000000610↑o
.text:0000000000003924 ; __unwind {
.text:0000000000003924                 LDR             X2, [X0,#0x340]
.text:0000000000003928                 LDR             X0, [X0,#0x318]
.text:000000000000392C                 LSR             X2, X2, #0x3F ; '?'
.text:0000000000003930                 STR             W2, [X1]
.text:0000000000003934                 RET
.text:0000000000003934 ; } // starts at 3924
.text:0000000000003934 ; End of function _Unwind_GetIPInfo
.text:0000000000003938 ; =============== S U B R O U T I N E =======================================
.text:0000000000003938                 EXPORT _Unwind_SetIP
.text:0000000000003938 _Unwind_SetIP                           ; DATA XREF: LOAD:0000000000000958↑o
.text:0000000000003938 ; __unwind {
.text:0000000000003938                 STR             X1, [X0,#0x318]
.text:000000000000393C                 RET
.text:000000000000393C ; } // starts at 3938
.text:000000000000393C ; End of function _Unwind_SetIP
.text:0000000000003940 ; =============== S U B R O U T I N E =======================================
.text:0000000000003940                 EXPORT _Unwind_GetLanguageSpecificData
.text:0000000000003940 _Unwind_GetLanguageSpecificData         ; DATA XREF: LOAD:0000000000000640↑o
.text:0000000000003940 ; __unwind {
.text:0000000000003940                 LDR             X0, [X0,#0x320]
.text:0000000000003944                 RET
.text:0000000000003944 ; } // starts at 3940
.text:0000000000003944 ; End of function _Unwind_GetLanguageSpecificData
.text:0000000000003948 ; =============== S U B R O U T I N E =======================================
.text:0000000000003948                 EXPORT _Unwind_GetRegionStart
.text:0000000000003948 _Unwind_GetRegionStart                  ; CODE XREF: ._Unwind_GetRegionStart+C↑j
.text:0000000000003948                                         ; DATA XREF: LOAD:0000000000000A18↑o ...
.text:0000000000003948 ; __unwind {
.text:0000000000003948                 LDR             X0, [X0,#0x338]
.text:000000000000394C                 RET
.text:000000000000394C ; } // starts at 3948
.text:000000000000394C ; End of function _Unwind_GetRegionStart
.text:0000000000003950 ; =============== S U B R O U T I N E =======================================
.text:0000000000003950 ; Attributes: bp-based frame fpd=0x30
.text:0000000000003950                 EXPORT _Unwind_FindEnclosingFunction
.text:0000000000003950 _Unwind_FindEnclosingFunction           ; DATA XREF: LOAD:0000000000000748↑o
.text:0000000000003950 var_30          = -0x30
.text:0000000000003950 var_8           = -8
.text:0000000000003950 ; __unwind {
.text:0000000000003950                 STP             X29, X30, [SP,#var_30]!
.text:0000000000003954                 SUB             X0, X0, #1
.text:0000000000003958                 MOV             X29, SP
.text:000000000000395C                 ADD             X1, X29, #0x18
.text:0000000000003960                 BL              ._Unwind_Find_FDE
.text:0000000000003964                 CMP             X0, XZR
.text:0000000000003968                 LDR             X0, [X29,#0x30+var_8]
.text:000000000000396C                 LDP             X29, X30, [SP+0x30+var_30],#0x30
.text:0000000000003970                 CSEL            X0, X0, XZR, NE
.text:0000000000003974                 RET
.text:0000000000003974 ; } // starts at 3950
.text:0000000000003974 ; End of function _Unwind_FindEnclosingFunction
.text:0000000000003978 ; =============== S U B R O U T I N E =======================================
.text:0000000000003978                 EXPORT _Unwind_GetDataRelBase
.text:0000000000003978 _Unwind_GetDataRelBase                  ; CODE XREF: ._Unwind_GetDataRelBase+C↑j
.text:0000000000003978                                         ; DATA XREF: LOAD:0000000000000478↑o ...
.text:0000000000003978 ; __unwind {
.text:0000000000003978                 LDR             X0, [X0,#0x330]
.text:000000000000397C                 RET
.text:000000000000397C ; } // starts at 3978
.text:000000000000397C ; End of function _Unwind_GetDataRelBase
.text:0000000000003980 ; =============== S U B R O U T I N E =======================================
.text:0000000000003980                 EXPORT _Unwind_GetTextRelBase
.text:0000000000003980 _Unwind_GetTextRelBase                  ; CODE XREF: ._Unwind_GetTextRelBase+C↑j
.text:0000000000003980                                         ; DATA XREF: LOAD:0000000000000A78↑o ...
.text:0000000000003980 ; __unwind {
.text:0000000000003980                 LDR             X0, [X0,#0x328]
.text:0000000000003984                 RET
.text:0000000000003984 ; } // starts at 3980
.text:0000000000003984 ; End of function _Unwind_GetTextRelBase
.text:0000000000003988 ; =============== S U B R O U T I N E =======================================
.text:0000000000003988 ; Attributes: bp-based frame
.text:0000000000003988 base_of_encoded_value                   ; CODE XREF: execute_cfa_program+E8↓p
.text:0000000000003988                                         ; uw_frame_state_for+2BC↓p ...
.text:0000000000003988 var_s0          =  0
.text:0000000000003988 ; __unwind {
.text:0000000000003988                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000000398C                 UXTB            W2, W0
.text:0000000000003990                 MOV             X0, X1
.text:0000000000003994                 CMP             W2, #0xFF
.text:0000000000003998                 MOV             X29, SP
.text:000000000000399C                 B.EQ            loc_39F4
.text:00000000000039A0                 AND             W2, W2, #0x70
.text:00000000000039A4                 CMP             W2, #0x20 ; ' '
.text:00000000000039A8                 B.EQ            loc_39E0
.text:00000000000039AC                 B.HI            loc_39C0
.text:00000000000039B0                 CBZ             W2, loc_39F4
.text:00000000000039B4                 CMP             W2, #0x10
.text:00000000000039B8                 B.NE            loc_39F0
.text:00000000000039BC                 B               loc_39F4
.text:00000000000039C0 ; ---------------------------------------------------------------------------
.text:00000000000039C0 loc_39C0                                ; CODE XREF: base_of_encoded_value+24↑j
.text:00000000000039C0                 CMP             W2, #0x40 ; '@'
.text:00000000000039C4                 B.EQ            loc_39E8
.text:00000000000039C8                 CMP             W2, #0x50 ; 'P'
.text:00000000000039CC                 B.EQ            loc_39F4
.text:00000000000039D0                 CMP             W2, #0x30 ; '0'
.text:00000000000039D4                 B.NE            loc_39F0
.text:00000000000039D8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000039DC                 B               ._Unwind_GetDataRelBase
.text:00000000000039E0 ; ---------------------------------------------------------------------------
.text:00000000000039E0 loc_39E0                                ; CODE XREF: base_of_encoded_value+20↑j
.text:00000000000039E0                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000039E4                 B               ._Unwind_GetTextRelBase
.text:00000000000039E8 ; ---------------------------------------------------------------------------
.text:00000000000039E8 loc_39E8                                ; CODE XREF: base_of_encoded_value+3C↑j
.text:00000000000039E8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000039EC                 B               ._Unwind_GetRegionStart
.text:00000000000039F0 ; ---------------------------------------------------------------------------
.text:00000000000039F0 loc_39F0                                ; CODE XREF: base_of_encoded_value+30↑j
.text:00000000000039F0                                         ; base_of_encoded_value+4C↑j
.text:00000000000039F0                 BL              .abort
.text:00000000000039F4 ; ---------------------------------------------------------------------------
.text:00000000000039F4 loc_39F4                                ; CODE XREF: base_of_encoded_value+14↑j
.text:00000000000039F4                                         ; base_of_encoded_value+28↑j ...
.text:00000000000039F4                 MOV             X0, #0
.text:00000000000039F8                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000039FC                 RET
.text:00000000000039FC ; } // starts at 3988
.text:00000000000039FC ; End of function base_of_encoded_value
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00 ; Attributes: bp-based frame fpd=0x90
.text:0000000000003A00 execute_cfa_program                     ; CODE XREF: uw_frame_state_for+31C↓p
.text:0000000000003A00                                         ; uw_frame_state_for+3F8↓p
.text:0000000000003A00 var_90          = -0x90
.text:0000000000003A00 var_80          = -0x80
.text:0000000000003A00 var_70          = -0x70
.text:0000000000003A00 var_60          = -0x60
.text:0000000000003A00 var_50          = -0x50
.text:0000000000003A00 var_40          = -0x40
.text:0000000000003A00 var_28          = -0x28
.text:0000000000003A00 var_18          = -0x18
.text:0000000000003A00 var_10          = -0x10
.text:0000000000003A00 var_8           = -8
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 STP             X29, X30, [SP,#var_90]!
.text:0000000000003A04                 MOV             X29, SP
.text:0000000000003A08                 STP             X21, X22, [SP,#0x90+var_70]
.text:0000000000003A0C                 STP             X23, X24, [SP,#0x90+var_60]
.text:0000000000003A10                 STP             X25, X26, [SP,#0x90+var_50]
.text:0000000000003A14                 STP             X27, X28, [SP,#0x90+var_40]
.text:0000000000003A18                 STP             X19, X20, [SP,#0x90+var_80]
.text:0000000000003A1C                 ADRP            X27, #jpt_3AD4@PAGE
.text:0000000000003A20                 MOV             X28, X1
.text:0000000000003A24                 MOV             X26, X2
.text:0000000000003A28                 MOV             X19, X3
.text:0000000000003A2C                 STR             XZR, [X3,#0x620]
.text:0000000000003A30                 MOV             X24, #0
.text:0000000000003A34                 ADD             X27, X27, #jpt_3AD4@PAGEOFF
.text:0000000000003A38                 ADD             X22, X29, #0x78 ; 'x'
.text:0000000000003A3C                 ADD             X21, X29, #0x80
.text:0000000000003A40                 MOV             W23, #1
.text:0000000000003A44                 ADD             X25, X29, #0x88
.text:0000000000003A48 loc_3A48                                ; CODE XREF: execute_cfa_program+4D4↓j
.text:0000000000003A48                 CMP             X0, X28
.text:0000000000003A4C                 B.CS            loc_3ED8
.text:0000000000003A50                 LDR             X1, [X26,#0x340]
.text:0000000000003A54                 LDR             X3, [X26,#0x318]
.text:0000000000003A58                 LDR             X2, [X19,#0x648]
.text:0000000000003A5C                 ADD             X1, X3, X1,LSR#63
.text:0000000000003A60                 CMP             X2, X1
.text:0000000000003A64                 B.CS            loc_3ED8
.text:0000000000003A68                 LDRB            W1, [X0]
.text:0000000000003A6C                 ADD             X20, X0, #1
.text:0000000000003A70                 AND             W3, W1, #0xC0
.text:0000000000003A74                 CMP             W3, #0x40 ; '@'
.text:0000000000003A78                 B.NE            loc_3A90
.text:0000000000003A7C                 LDR             X0, [X19,#0x660]
.text:0000000000003A80                 AND             X1, X1, #0x3F
.text:0000000000003A84                 MADD            X1, X1, X0, X2
.text:0000000000003A88                 STR             X1, [X19,#0x648]
.text:0000000000003A8C                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003A90 ; ---------------------------------------------------------------------------
.text:0000000000003A90 loc_3A90                                ; CODE XREF: execute_cfa_program+78↑j
.text:0000000000003A90                 CMP             W3, #0x80
.text:0000000000003A94                 B.NE            loc_3AA8
.text:0000000000003A98                 AND             X1, X1, #0x3F
.text:0000000000003A9C                 MOV             X0, X20
.text:0000000000003AA0                 STR             X1, [X29,#0x90+var_18]
.text:0000000000003AA4                 B               loc_3B68
.text:0000000000003AA8 ; ---------------------------------------------------------------------------
.text:0000000000003AA8 loc_3AA8                                ; CODE XREF: execute_cfa_program+94↑j
.text:0000000000003AA8                 CMP             W3, #0xC0
.text:0000000000003AAC                 B.NE            loc_3AC0
.text:0000000000003AB0                 UBFIZ           X1, X1, #4, #6
.text:0000000000003AB4                 ADD             X1, X19, X1
.text:0000000000003AB8                 STR             WZR, [X1,#8]
.text:0000000000003ABC                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003AC0 ; ---------------------------------------------------------------------------
.text:0000000000003AC0 loc_3AC0                                ; CODE XREF: execute_cfa_program+AC↑j
.text:0000000000003AC0                 CMP             W1, #0x2F ; switch 48 cases
.text:0000000000003AC4                 B.HI            def_3AD4 ; jumptable 0000000000003AD4 default case, cases 23-44
.text:0000000000003AC8                 LDRH            W1, [X27,W1,UXTW#1]
.text:0000000000003ACC                 ADR             X3, loc_3AD8 ; jumptable 0000000000003AD4 case 1
.text:0000000000003AD0                 ADD             X1, X3, W1,SXTH#2
.text:0000000000003AD4                 BR              X1      ; switch jump
.text:0000000000003AD8 ; ---------------------------------------------------------------------------
.text:0000000000003AD8 loc_3AD8                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003AD8                                         ; DATA XREF: execute_cfa_program+CC↑o
.text:0000000000003AD8                 LDRB            W2, [X19,#0x670] ; jumptable 0000000000003AD4 case 1
.text:0000000000003ADC                 MOV             X1, X26
.text:0000000000003AE0                 STR             X2, [X29,#0x90+var_28]
.text:0000000000003AE4                 MOV             W0, W2
.text:0000000000003AE8                 BL              base_of_encoded_value
.text:0000000000003AEC                 MOV             X1, X0
.text:0000000000003AF0                 LDR             X2, [X29,#0x90+var_28]
.text:0000000000003AF4                 MOV             X3, X25
.text:0000000000003AF8                 MOV             W0, W2
.text:0000000000003AFC                 MOV             X2, X20
.text:0000000000003B00                 BL              read_encoded_value_with_base
.text:0000000000003B04                 MOV             X20, X0
.text:0000000000003B08                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000003B0C                 STR             X0, [X19,#0x648]
.text:0000000000003B10                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003B14 ; ---------------------------------------------------------------------------
.text:0000000000003B14 loc_3B14                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003B14                 LDRB            W1, [X0,#1] ; jumptable 0000000000003AD4 case 2
.text:0000000000003B18                 ADD             X20, X0, #2
.text:0000000000003B1C                 LDR             X3, [X19,#0x660]
.text:0000000000003B20                 MADD            X2, X1, X3, X2
.text:0000000000003B24                 STR             X2, [X19,#0x648]
.text:0000000000003B28                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003B2C ; ---------------------------------------------------------------------------
.text:0000000000003B2C loc_3B2C                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003B2C                 LDURH           W1, [X0,#1] ; jumptable 0000000000003AD4 case 3
.text:0000000000003B30                 ADD             X20, X0, #3
.text:0000000000003B34                 LDR             X3, [X19,#0x660]
.text:0000000000003B38                 MADD            X2, X1, X3, X2
.text:0000000000003B3C                 STR             X2, [X19,#0x648]
.text:0000000000003B40                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003B44 ; ---------------------------------------------------------------------------
.text:0000000000003B44 loc_3B44                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003B44                 LDUR            W1, [X0,#1] ; jumptable 0000000000003AD4 case 4
.text:0000000000003B48                 ADD             X20, X0, #5
.text:0000000000003B4C                 LDR             X3, [X19,#0x660]
.text:0000000000003B50                 MADD            X2, X1, X3, X2
.text:0000000000003B54                 STR             X2, [X19,#0x648]
.text:0000000000003B58                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003B5C ; ---------------------------------------------------------------------------
.text:0000000000003B5C loc_3B5C                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003B5C                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 5
.text:0000000000003B60                 MOV             X1, X22
.text:0000000000003B64                 BL              read_uleb128
.text:0000000000003B68 loc_3B68                                ; CODE XREF: execute_cfa_program+A4↑j
.text:0000000000003B68                 MOV             X1, X21
.text:0000000000003B6C                 BL              read_uleb128
.text:0000000000003B70                 MOV             X20, X0
.text:0000000000003B74                 LDR             X1, [X19,#0x658]
.text:0000000000003B78                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000003B7C                 B               loc_3D28
.text:0000000000003B80 ; ---------------------------------------------------------------------------
.text:0000000000003B80 loc_3B80                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003B80                 MOV             X0, X20 ; jumptable 0000000000003AD4 cases 6,8
.text:0000000000003B84                 MOV             X1, X22
.text:0000000000003B88                 BL              read_uleb128
.text:0000000000003B8C                 MOV             X20, X0
.text:0000000000003B90                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000003B94                 CMP             X0, #0x61 ; 'a'
.text:0000000000003B98                 B.HI            loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003B9C                 ADD             X0, X19, X0,LSL#4
.text:0000000000003BA0                 STR             WZR, [X0,#8]
.text:0000000000003BA4                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003BA8 ; ---------------------------------------------------------------------------
.text:0000000000003BA8 loc_3BA8                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003BA8                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 7
.text:0000000000003BAC                 MOV             X1, X22
.text:0000000000003BB0                 BL              read_uleb128
.text:0000000000003BB4                 MOV             X20, X0
.text:0000000000003BB8                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000003BBC                 CMP             X0, #0x61 ; 'a'
.text:0000000000003BC0                 B.HI            loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003BC4                 ADD             X0, X19, X0,LSL#4
.text:0000000000003BC8                 MOV             W1, #6
.text:0000000000003BCC                 STR             W1, [X0,#8]
.text:0000000000003BD0                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003BD4 ; ---------------------------------------------------------------------------
.text:0000000000003BD4 loc_3BD4                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003BD4                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 9
.text:0000000000003BD8                 MOV             X1, X22
.text:0000000000003BDC                 BL              read_uleb128
.text:0000000000003BE0                 MOV             X1, X25
.text:0000000000003BE4                 BL              read_uleb128
.text:0000000000003BE8                 MOV             X20, X0
.text:0000000000003BEC                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000003BF0                 CMP             X0, #0x61 ; 'a'
.text:0000000000003BF4                 B.HI            loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003BF8                 LSL             X0, X0, #4
.text:0000000000003BFC                 MOV             W2, #2
.text:0000000000003C00                 ADD             X1, X19, X0
.text:0000000000003C04                 STR             W2, [X1,#8]
.text:0000000000003C08                 LDR             X1, [X29,#0x90+var_8]
.text:0000000000003C0C                 B               loc_3EC4
.text:0000000000003C10 ; ---------------------------------------------------------------------------
.text:0000000000003C10 loc_3C10                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003C10                 CBZ             X24, loc_3C20 ; jumptable 0000000000003AD4 case 10
.text:0000000000003C14                 MOV             X3, X24
.text:0000000000003C18                 LDR             X24, [X24,#0x620]
.text:0000000000003C1C                 B               loc_3C28
.text:0000000000003C20 ; ---------------------------------------------------------------------------
.text:0000000000003C20 loc_3C20                                ; CODE XREF: execute_cfa_program:loc_3C10↑j
.text:0000000000003C20                 SUB             SP, SP, #0x660
.text:0000000000003C24                 MOV             X3, SP
.text:0000000000003C28 loc_3C28                                ; CODE XREF: execute_cfa_program+21C↑j
.text:0000000000003C28                 MOV             X0, X3  ; dest
.text:0000000000003C2C                 MOV             X1, X19 ; src
.text:0000000000003C30                 MOV             X2, #0x648 ; n
.text:0000000000003C34                 BL              .memcpy
.text:0000000000003C38                 STR             X0, [X19,#0x620]
.text:0000000000003C3C                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003C40 ; ---------------------------------------------------------------------------
.text:0000000000003C40 loc_3C40                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003C40                 LDR             X3, [X19,#0x620] ; jumptable 0000000000003AD4 case 11
.text:0000000000003C44                 MOV             X0, X19 ; dest
.text:0000000000003C48                 MOV             X2, #0x648 ; n
.text:0000000000003C4C                 STR             X3, [X29,#0x90+var_28]
.text:0000000000003C50                 MOV             X1, X3  ; src
.text:0000000000003C54                 BL              .memcpy
.text:0000000000003C58                 LDR             X3, [X29,#0x90+var_28]
.text:0000000000003C5C                 STR             X24, [X3,#0x620]
.text:0000000000003C60                 MOV             X24, X3
.text:0000000000003C64                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003C68 ; ---------------------------------------------------------------------------
.text:0000000000003C68 loc_3C68                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003C68                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 12
.text:0000000000003C6C                 MOV             X1, X21
.text:0000000000003C70                 BL              read_uleb128
.text:0000000000003C74                 LDR             X1, [X29,#0x90+var_10]
.text:0000000000003C78                 STR             X1, [X19,#0x630]
.text:0000000000003C7C                 MOV             X1, X21
.text:0000000000003C80                 BL              read_uleb128
.text:0000000000003C84                 MOV             X20, X0
.text:0000000000003C88                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000003C8C                 STR             X0, [X19,#0x628]
.text:0000000000003C90                 B               loc_3CAC
.text:0000000000003C94 ; ---------------------------------------------------------------------------
.text:0000000000003C94 loc_3C94                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003C94                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 13
.text:0000000000003C98                 MOV             X1, X21
.text:0000000000003C9C                 BL              read_uleb128
.text:0000000000003CA0                 MOV             X20, X0
.text:0000000000003CA4                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000003CA8                 STR             X0, [X19,#0x630]
.text:0000000000003CAC loc_3CAC                                ; CODE XREF: execute_cfa_program+290↑j
.text:0000000000003CAC                 STR             W23, [X19,#0x640]
.text:0000000000003CB0                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003CB4 ; ---------------------------------------------------------------------------
.text:0000000000003CB4 loc_3CB4                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003CB4                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 14
.text:0000000000003CB8                 MOV             X1, X21
.text:0000000000003CBC                 BL              read_uleb128
.text:0000000000003CC0                 MOV             X20, X0
.text:0000000000003CC4                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000003CC8                 B               loc_3D78
.text:0000000000003CCC ; ---------------------------------------------------------------------------
.text:0000000000003CCC loc_3CCC                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003CCC                 MOV             W0, #2  ; jumptable 0000000000003AD4 case 15
.text:0000000000003CD0                 STR             X20, [X19,#0x638]
.text:0000000000003CD4                 STR             W0, [X19,#0x640]
.text:0000000000003CD8                 MOV             X0, X20
.text:0000000000003CDC                 B               loc_3E28
.text:0000000000003CE0 ; ---------------------------------------------------------------------------
.text:0000000000003CE0 loc_3CE0                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003CE0                 MOV             X1, X22 ; jumptable 0000000000003AD4 case 16
.text:0000000000003CE4                 MOV             X0, X20
.text:0000000000003CE8                 BL              read_uleb128
.text:0000000000003CEC                 LDR             X1, [X29,#0x90+var_18]
.text:0000000000003CF0                 CMP             X1, #0x61 ; 'a'
.text:0000000000003CF4                 B.HI            loc_3E28
.text:0000000000003CF8                 LSL             X1, X1, #4
.text:0000000000003CFC                 MOV             W3, #3
.text:0000000000003D00                 ADD             X2, X19, X1
.text:0000000000003D04                 B               loc_3E20
.text:0000000000003D08 ; ---------------------------------------------------------------------------
.text:0000000000003D08 loc_3D08                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003D08                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 17
.text:0000000000003D0C                 MOV             X1, X22
.text:0000000000003D10                 BL              read_uleb128
.text:0000000000003D14                 MOV             X1, X25
.text:0000000000003D18                 BL              read_sleb128
.text:0000000000003D1C                 MOV             X20, X0
.text:0000000000003D20                 LDR             X1, [X19,#0x658]
.text:0000000000003D24                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000003D28 loc_3D28                                ; CODE XREF: execute_cfa_program+17C↑j
.text:0000000000003D28                 MUL             X1, X0, X1
.text:0000000000003D2C                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000003D30                 CMP             X0, #0x61 ; 'a'
.text:0000000000003D34                 B.HI            loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003D38                 LSL             X0, X0, #4
.text:0000000000003D3C                 ADD             X2, X19, X0
.text:0000000000003D40                 STR             W23, [X2,#8]
.text:0000000000003D44                 B               loc_3EC4
.text:0000000000003D48 ; ---------------------------------------------------------------------------
.text:0000000000003D48 loc_3D48                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003D48                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 18
.text:0000000000003D4C                 MOV             X1, X21
.text:0000000000003D50                 BL              read_uleb128
.text:0000000000003D54                 LDR             X1, [X29,#0x90+var_10]
.text:0000000000003D58                 STR             X1, [X19,#0x630]
.text:0000000000003D5C                 MOV             X1, X25
.text:0000000000003D60                 BL              read_sleb128
.text:0000000000003D64                 STR             W23, [X19,#0x640]
.text:0000000000003D68                 MOV             X20, X0
.text:0000000000003D6C loc_3D6C                                ; CODE XREF: execute_cfa_program+390↓j
.text:0000000000003D6C                 LDR             X1, [X19,#0x658]
.text:0000000000003D70                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000003D74                 MUL             X0, X0, X1
.text:0000000000003D78 loc_3D78                                ; CODE XREF: execute_cfa_program+2C8↑j
.text:0000000000003D78                 STR             X0, [X19,#0x628]
.text:0000000000003D7C                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003D80 ; ---------------------------------------------------------------------------
.text:0000000000003D80 loc_3D80                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003D80                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 19
.text:0000000000003D84                 MOV             X1, X25
.text:0000000000003D88                 BL              read_sleb128
.text:0000000000003D8C                 MOV             X20, X0
.text:0000000000003D90                 B               loc_3D6C
.text:0000000000003D94 ; ---------------------------------------------------------------------------
.text:0000000000003D94 loc_3D94                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003D94                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 20
.text:0000000000003D98                 MOV             X1, X22
.text:0000000000003D9C                 BL              read_uleb128
.text:0000000000003DA0                 MOV             X1, X21
.text:0000000000003DA4                 BL              read_uleb128
.text:0000000000003DA8                 MOV             X20, X0
.text:0000000000003DAC                 LDR             X1, [X19,#0x658]
.text:0000000000003DB0                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000003DB4                 B               loc_3DD8
.text:0000000000003DB8 ; ---------------------------------------------------------------------------
.text:0000000000003DB8 loc_3DB8                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003DB8                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 21
.text:0000000000003DBC                 MOV             X1, X22
.text:0000000000003DC0                 BL              read_uleb128
.text:0000000000003DC4                 MOV             X1, X25
.text:0000000000003DC8                 BL              read_sleb128
.text:0000000000003DCC                 MOV             X20, X0
.text:0000000000003DD0                 LDR             X1, [X19,#0x658]
.text:0000000000003DD4                 LDR             X0, [X29,#0x90+var_8]
.text:0000000000003DD8 loc_3DD8                                ; CODE XREF: execute_cfa_program+3B4↑j
.text:0000000000003DD8                 MUL             X1, X0, X1
.text:0000000000003DDC                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000003DE0                 CMP             X0, #0x61 ; 'a'
.text:0000000000003DE4                 B.HI            loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003DE8                 LSL             X0, X0, #4
.text:0000000000003DEC                 MOV             W3, #4
.text:0000000000003DF0                 ADD             X2, X19, X0
.text:0000000000003DF4                 STR             W3, [X2,#8]
.text:0000000000003DF8                 B               loc_3EC4
.text:0000000000003DFC ; ---------------------------------------------------------------------------
.text:0000000000003DFC loc_3DFC                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003DFC                 MOV             X1, X22 ; jumptable 0000000000003AD4 case 22
.text:0000000000003E00                 MOV             X0, X20
.text:0000000000003E04                 BL              read_uleb128
.text:0000000000003E08                 LDR             X1, [X29,#0x90+var_18]
.text:0000000000003E0C                 CMP             X1, #0x61 ; 'a'
.text:0000000000003E10                 B.HI            loc_3E28
.text:0000000000003E14                 LSL             X1, X1, #4
.text:0000000000003E18                 MOV             W3, #5
.text:0000000000003E1C                 ADD             X2, X19, X1
.text:0000000000003E20 loc_3E20                                ; CODE XREF: execute_cfa_program+304↑j
.text:0000000000003E20                 STR             W3, [X2,#8]
.text:0000000000003E24                 STR             X0, [X19,X1]
.text:0000000000003E28 loc_3E28                                ; CODE XREF: execute_cfa_program+2DC↑j
.text:0000000000003E28                                         ; execute_cfa_program+2F4↑j ...
.text:0000000000003E28                 MOV             X1, X21
.text:0000000000003E2C                 BL              read_uleb128
.text:0000000000003E30                 LDR             X20, [X29,#0x90+var_10]
.text:0000000000003E34                 ADD             X20, X0, X20
.text:0000000000003E38                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003E3C ; ---------------------------------------------------------------------------
.text:0000000000003E3C loc_3E3C                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003E3C                 MOV             X0, #0x10 ; jumptable 0000000000003AD4 case 45
.text:0000000000003E40                 ADD             X2, X19, #0x100
.text:0000000000003E44                 STR             X0, [X29,#0x90+var_18]
.text:0000000000003E48                 MOV             X1, #0
.text:0000000000003E4C loc_3E4C                                ; CODE XREF: execute_cfa_program+460↓j
.text:0000000000003E4C                 STR             W23, [X2,#8]
.text:0000000000003E50                 ADD             X0, X0, #1
.text:0000000000003E54                 STR             X1, [X2],#0x10
.text:0000000000003E58                 CMP             X0, #0x20 ; ' '
.text:0000000000003E5C                 ADD             X1, X1, #8
.text:0000000000003E60                 B.NE            loc_3E4C
.text:0000000000003E64                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003E68 ; ---------------------------------------------------------------------------
.text:0000000000003E68 loc_3E68                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003E68                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 46
.text:0000000000003E6C                 MOV             X1, X21
.text:0000000000003E70                 BL              read_uleb128
.text:0000000000003E74                 MOV             X20, X0
.text:0000000000003E78                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000003E7C                 STR             X0, [X26,#0x350]
.text:0000000000003E80                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003E84 ; ---------------------------------------------------------------------------
.text:0000000000003E84 loc_3E84                                ; CODE XREF: execute_cfa_program+D4↑j
.text:0000000000003E84                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 47
.text:0000000000003E88                 MOV             X1, X22
.text:0000000000003E8C                 BL              read_uleb128
.text:0000000000003E90                 MOV             X1, X21
.text:0000000000003E94                 BL              read_uleb128
.text:0000000000003E98                 MOV             X20, X0
.text:0000000000003E9C                 LDR             X1, [X29,#0x90+var_10]
.text:0000000000003EA0                 LDR             X0, [X19,#0x658]
.text:0000000000003EA4                 MUL             X1, X0, X1
.text:0000000000003EA8                 LDR             X0, [X29,#0x90+var_18]
.text:0000000000003EAC                 CMP             X0, #0x61 ; 'a'
.text:0000000000003EB0                 B.HI            loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003EB4                 LSL             X0, X0, #4
.text:0000000000003EB8                 NEG             X1, X1
.text:0000000000003EBC                 ADD             X2, X19, X0
.text:0000000000003EC0                 STR             W23, [X2,#8]
.text:0000000000003EC4 loc_3EC4                                ; CODE XREF: execute_cfa_program+20C↑j
.text:0000000000003EC4                                         ; execute_cfa_program+344↑j ...
.text:0000000000003EC4                 STR             X1, [X19,X0]
.text:0000000000003EC8                 B               loc_3ED0 ; jumptable 0000000000003AD4 case 0
.text:0000000000003ECC ; ---------------------------------------------------------------------------
.text:0000000000003ECC def_3AD4                                ; CODE XREF: execute_cfa_program+C4↑j
.text:0000000000003ECC                                         ; execute_cfa_program+D4↑j
.text:0000000000003ECC                 BL              .abort  ; jumptable 0000000000003AD4 default case, cases 23-44
.text:0000000000003ED0 ; ---------------------------------------------------------------------------
.text:0000000000003ED0 loc_3ED0                                ; CODE XREF: execute_cfa_program+8C↑j
.text:0000000000003ED0                                         ; execute_cfa_program+BC↑j ...
.text:0000000000003ED0                 MOV             X0, X20 ; jumptable 0000000000003AD4 case 0
.text:0000000000003ED4                 B               loc_3A48
.text:0000000000003ED8 ; ---------------------------------------------------------------------------
.text:0000000000003ED8 loc_3ED8                                ; CODE XREF: execute_cfa_program+4C↑j
.text:0000000000003ED8                                         ; execute_cfa_program+64↑j
.text:0000000000003ED8                 MOV             SP, X29
.text:0000000000003EDC                 LDP             X19, X20, [SP,#0x90+var_80]
.text:0000000000003EE0                 LDP             X21, X22, [SP,#0x90+var_70]
.text:0000000000003EE4                 LDP             X23, X24, [SP,#0x90+var_60]
.text:0000000000003EE8                 LDP             X25, X26, [SP,#0x90+var_50]
.text:0000000000003EEC                 LDP             X27, X28, [SP,#0x90+var_40]
.text:0000000000003EF0                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:0000000000003EF4                 RET
.text:0000000000003EF4 ; } // starts at 3A00
.text:0000000000003EF4 ; End of function execute_cfa_program
.text:0000000000003EF8 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF8 ; Attributes: bp-based frame fpd=0x90
.text:0000000000003EF8 uw_frame_state_for                      ; CODE XREF: uw_init_context_1+4C↓p
.text:0000000000003EF8                                         ; _Unwind_RaiseException_Phase2+30↓p ...
.text:0000000000003EF8 var_90          = -0x90
.text:0000000000003EF8 var_80          = -0x80
.text:0000000000003EF8 var_70          = -0x70
.text:0000000000003EF8 var_60          = -0x60
.text:0000000000003EF8 var_50          = -0x50
.text:0000000000003EF8 var_40          = -0x40
.text:0000000000003EF8 var_30          = -0x30
.text:0000000000003EF8 var_28          = -0x28
.text:0000000000003EF8 var_18          = -0x18
.text:0000000000003EF8 var_10          = -0x10
.text:0000000000003EF8 var_8           = -8
.text:0000000000003EF8 ; __unwind {
.text:0000000000003EF8                 STP             X29, X30, [SP,#var_90]!
.text:0000000000003EFC                 MOV             X2, #0x680 ; n
.text:0000000000003F00                 MOV             X29, SP
.text:0000000000003F04                 STP             X19, X20, [SP,#0x90+var_80]
.text:0000000000003F08                 MOV             X20, X0
.text:0000000000003F0C                 MOV             X19, X1
.text:0000000000003F10                 MOV             X0, X1  ; s
.text:0000000000003F14                 MOV             W1, #0  ; c
.text:0000000000003F18                 STP             X21, X22, [SP,#0x90+var_70]
.text:0000000000003F1C                 STP             X23, X24, [SP,#0x90+var_60]
.text:0000000000003F20                 STP             X25, X26, [SP,#0x90+var_50]
.text:0000000000003F24                 STR             X27, [SP,#0x90+var_40]
.text:0000000000003F28                 BL              .memset
.text:0000000000003F2C                 LDR             X1, [X20,#0x318]
.text:0000000000003F30                 STR             XZR, [X20,#0x350]
.text:0000000000003F34                 STR             XZR, [X20,#0x320]
.text:0000000000003F38                 CBNZ            X1, loc_3F44
.text:0000000000003F3C loc_3F3C                                ; CODE XREF: uw_frame_state_for+80↓j
.text:0000000000003F3C                                         ; uw_frame_state_for+98↓j
.text:0000000000003F3C                 MOV             W0, #5
.text:0000000000003F40                 B               loc_4300
.text:0000000000003F44 ; ---------------------------------------------------------------------------
.text:0000000000003F44 loc_3F44                                ; CODE XREF: uw_frame_state_for+40↑j
.text:0000000000003F44                 LDR             X0, [X20,#0x340]
.text:0000000000003F48                 LSR             X0, X0, #0x3F ; '?'
.text:0000000000003F4C                 SUB             X0, X0, #1
.text:0000000000003F50                 ADD             X0, X1, X0
.text:0000000000003F54                 ADD             X1, X20, #0x328
.text:0000000000003F58                 BL              ._Unwind_Find_FDE
.text:0000000000003F5C                 MOV             X21, X0
.text:0000000000003F60                 CBNZ            X0, loc_4060
.text:0000000000003F64                 LDR             X1, [X20,#0x318]
.text:0000000000003F68                 MOV             W0, #0xD2801168
.text:0000000000003F70                 LDR             W2, [X1]
.text:0000000000003F74                 CMP             W2, W0
.text:0000000000003F78                 B.NE            loc_3F3C
.text:0000000000003F7C                 LDR             W1, [X1,#4]
.text:0000000000003F80                 MOV             W0, #0xD4000001
.text:0000000000003F88                 CMP             W1, W0
.text:0000000000003F8C                 MOV             W1, #1
.text:0000000000003F90                 B.NE            loc_3F3C
.text:0000000000003F94                 LDR             X20, [X20,#0x310]
.text:0000000000003F98                 MOV             X0, #0x1F
.text:0000000000003F9C                 STR             X0, [X19,#0x630]
.text:0000000000003FA0                 MOV             X0, #0x130
.text:0000000000003FA4                 STR             W1, [X19,#0x640]
.text:0000000000003FA8                 ADD             X3, X20, #0x130
.text:0000000000003FAC                 STR             X0, [X19,#0x628]
.text:0000000000003FB0                 MOV             X4, #0x100
.text:0000000000003FB4                 MOV             X0, #8
.text:0000000000003FB8                 MOV             X2, X19
.text:0000000000003FBC loc_3FBC                                ; CODE XREF: uw_frame_state_for+D4↓j
.text:0000000000003FBC                 STR             W1, [X2,#8]
.text:0000000000003FC0                 STR             X0, [X2],#0x10
.text:0000000000003FC4                 ADD             X0, X0, #8
.text:0000000000003FC8                 CMP             X0, X4
.text:0000000000003FCC                 B.NE            loc_3FBC
.text:0000000000003FD0                 MOV             X1, #0xFFFFFFFFFFFFFC10
.text:0000000000003FD4                 ADD             X0, X20, #0x250
.text:0000000000003FD8                 SUB             X1, X1, X3
.text:0000000000003FDC                 ADD             X5, X19, #0x600
.text:0000000000003FE0                 MOV             W6, #1
.text:0000000000003FE4                 SUB             X1, X1, X19
.text:0000000000003FE8 loc_3FE8                                ; CODE XREF: uw_frame_state_for+12C↓j
.text:0000000000003FE8                 LDR             W2, [X0]
.text:0000000000003FEC                 CBZ             W2, loc_4028
.text:0000000000003FF0                 MOV             W4, #0x46508001
.text:0000000000003FF8                 CMP             W2, W4
.text:0000000000003FFC                 B.NE            loc_401C
.text:0000000000004000                 ADD             X2, X19, #0x400
.text:0000000000004004 loc_4004                                ; CODE XREF: uw_frame_state_for+120↓j
.text:0000000000004004                 ADD             X4, X1, X2
.text:0000000000004008                 STR             W6, [X2,#8]
.text:000000000000400C                 ADD             X4, X0, X4
.text:0000000000004010                 STR             X4, [X2],#0x10
.text:0000000000004014                 CMP             X2, X5
.text:0000000000004018                 B.NE            loc_4004
.text:000000000000401C loc_401C                                ; CODE XREF: uw_frame_state_for+104↑j
.text:000000000000401C                 LDR             W2, [X0,#4]
.text:0000000000004020                 ADD             X0, X0, X2
.text:0000000000004024                 B               loc_3FE8
.text:0000000000004028 ; ---------------------------------------------------------------------------
.text:0000000000004028 loc_4028                                ; CODE XREF: uw_frame_state_for+F4↑j
.text:0000000000004028                 ADD             X20, X20, #0x230
.text:000000000000402C                 MOV             W0, #1
.text:0000000000004030                 SUB             X20, X20, X3
.text:0000000000004034                 STRB            W0, [X19,#0x673]
.text:0000000000004038                 STR             X20, [X19,#0x1F0]
.text:000000000000403C                 STR             W0, [X19,#0x1F8]
.text:0000000000004040                 MOV             W0, #4
.text:0000000000004044                 STR             W0, [X19,#0x608]
.text:0000000000004048                 LDR             X0, [X3,#0x108]
.text:000000000000404C                 SUB             X3, X0, X3
.text:0000000000004050                 MOV             X0, #0x60 ; '`'
.text:0000000000004054                 STR             X3, [X19,#0x600]
.text:0000000000004058                 STR             X0, [X19,#0x668]
.text:000000000000405C                 B               loc_42F4
.text:0000000000004060 ; ---------------------------------------------------------------------------
.text:0000000000004060 loc_4060                                ; CODE XREF: uw_frame_state_for+68↑j
.text:0000000000004060                 LDRSW           X1, [X21,#4]
.text:0000000000004064                 ADD             X22, X21, #4
.text:0000000000004068                 LDR             X0, [X20,#0x338]
.text:000000000000406C                 SUB             X22, X22, X1
.text:0000000000004070                 STR             X0, [X19,#0x648]
.text:0000000000004074                 ADD             X23, X22, #9
.text:0000000000004078                 MOV             X0, X23 ; s
.text:000000000000407C                 BL              .strlen
.text:0000000000004080                 ADD             X0, X0, #1
.text:0000000000004084                 LDRB            W1, [X22,#9]
.text:0000000000004088                 ADD             X0, X23, X0
.text:000000000000408C                 CMP             W1, #0x65 ; 'e'
.text:0000000000004090                 B.NE            loc_40AC
.text:0000000000004094                 LDRB            W1, [X22,#0xA]
.text:0000000000004098                 CMP             W1, #0x68 ; 'h'
.text:000000000000409C                 B.NE            loc_40AC
.text:00000000000040A0                 LDR             X1, [X0],#8
.text:00000000000040A4                 ADD             X23, X22, #0xB
.text:00000000000040A8                 STR             X1, [X19,#0x678]
.text:00000000000040AC loc_40AC                                ; CODE XREF: uw_frame_state_for+198↑j
.text:00000000000040AC                                         ; uw_frame_state_for+1A4↑j
.text:00000000000040AC                 LDRB            W1, [X22,#8]
.text:00000000000040B0                 CMP             W1, #3
.text:00000000000040B4                 B.LS            loc_40D0
.text:00000000000040B8                 LDRB            W1, [X0]
.text:00000000000040BC                 CMP             W1, #8
.text:00000000000040C0                 B.NE            loc_42FC
.text:00000000000040C4                 LDRB            W1, [X0,#1]
.text:00000000000040C8                 CBNZ            W1, loc_42FC
.text:00000000000040CC                 ADD             X0, X0, #2
.text:00000000000040D0 loc_40D0                                ; CODE XREF: uw_frame_state_for+1BC↑j
.text:00000000000040D0                 ADD             X25, X29, #0x78 ; 'x'
.text:00000000000040D4                 MOV             X1, X25
.text:00000000000040D8                 BL              read_uleb128
.text:00000000000040DC                 LDR             X1, [X29,#0x90+var_18]
.text:00000000000040E0                 STR             X1, [X19,#0x660]
.text:00000000000040E4                 ADD             X1, X29, #0x80
.text:00000000000040E8                 BL              read_sleb128
.text:00000000000040EC                 MOV             X1, X0
.text:00000000000040F0                 LDR             X2, [X29,#0x90+var_10]
.text:00000000000040F4                 STR             X2, [X19,#0x658]
.text:00000000000040F8                 LDRB            W2, [X22,#8]
.text:00000000000040FC                 CMP             W2, #1
.text:0000000000004100                 B.NE            loc_4110
.text:0000000000004104                 ADD             X0, X0, #1
.text:0000000000004108                 LDRB            W1, [X1]
.text:000000000000410C                 B               loc_411C
.text:0000000000004110 ; ---------------------------------------------------------------------------
.text:0000000000004110 loc_4110                                ; CODE XREF: uw_frame_state_for+208↑j
.text:0000000000004110                 MOV             X1, X25
.text:0000000000004114                 BL              read_uleb128
.text:0000000000004118                 LDR             X1, [X29,#0x90+var_18]
.text:000000000000411C loc_411C                                ; CODE XREF: uw_frame_state_for+214↑j
.text:000000000000411C                 STR             X1, [X19,#0x668]
.text:0000000000004120                 MOV             W1, #0xFFFFFFFF
.text:0000000000004124                 STRB            W1, [X19,#0x671]
.text:0000000000004128                 MOV             X24, #0
.text:000000000000412C                 LDRB            W1, [X23]
.text:0000000000004130                 CMP             W1, #0x7A ; 'z'
.text:0000000000004134                 B.NE            loc_4154
.text:0000000000004138                 MOV             X1, X25
.text:000000000000413C                 ADD             X23, X23, #1
.text:0000000000004140                 BL              read_uleb128
.text:0000000000004144                 LDR             X24, [X29,#0x90+var_18]
.text:0000000000004148                 MOV             W1, #1
.text:000000000000414C                 STRB            W1, [X19,#0x672]
.text:0000000000004150                 ADD             X24, X0, X24
.text:0000000000004154 loc_4154                                ; CODE XREF: uw_frame_state_for+23C↑j
.text:0000000000004154                 ADD             X23, X23, #1
.text:0000000000004158                 MOV             W27, #1
.text:000000000000415C                 ADD             X25, X29, #0x88
.text:0000000000004160 loc_4160                                ; CODE XREF: uw_frame_state_for+2F0↓j
.text:0000000000004160                 LDURB           W1, [X23,#-1]
.text:0000000000004164                 CBZ             W1, loc_41EC
.text:0000000000004168                 CMP             W1, #0x4C ; 'L'
.text:000000000000416C                 B.NE            loc_417C
.text:0000000000004170                 LDRB            W1, [X0]
.text:0000000000004174                 STRB            W1, [X19,#0x671]
.text:0000000000004178                 B               loc_418C
.text:000000000000417C ; ---------------------------------------------------------------------------
.text:000000000000417C loc_417C                                ; CODE XREF: uw_frame_state_for+274↑j
.text:000000000000417C                 CMP             W1, #0x52 ; 'R'
.text:0000000000004180                 B.NE            loc_4194
.text:0000000000004184                 LDRB            W1, [X0]
.text:0000000000004188                 STRB            W1, [X19,#0x670]
.text:000000000000418C loc_418C                                ; CODE XREF: uw_frame_state_for+280↑j
.text:000000000000418C                 ADD             X0, X0, #1
.text:0000000000004190                 B               loc_41E4
.text:0000000000004194 ; ---------------------------------------------------------------------------
.text:0000000000004194 loc_4194                                ; CODE XREF: uw_frame_state_for+288↑j
.text:0000000000004194                 CMP             W1, #0x50 ; 'P'
.text:0000000000004198                 B.NE            loc_41D8
.text:000000000000419C                 MOV             X2, X0
.text:00000000000041A0                 MOV             X1, X20
.text:00000000000041A4                 LDRB            W26, [X2],#1
.text:00000000000041A8                 STR             X2, [X29,#0x90+var_28]
.text:00000000000041AC                 MOV             W0, W26
.text:00000000000041B0                 STR             X2, [X29,#0x90+var_30]
.text:00000000000041B4                 BL              base_of_encoded_value
.text:00000000000041B8                 MOV             X1, X0
.text:00000000000041BC                 LDR             X2, [X29,#0x90+var_28]
.text:00000000000041C0                 MOV             W0, W26
.text:00000000000041C4                 MOV             X3, X25
.text:00000000000041C8                 BL              read_encoded_value_with_base
.text:00000000000041CC                 LDR             X1, [X29,#0x90+var_8]
.text:00000000000041D0                 STR             X1, [X19,#0x650]
.text:00000000000041D4                 B               loc_41E4
.text:00000000000041D8 ; ---------------------------------------------------------------------------
.text:00000000000041D8 loc_41D8                                ; CODE XREF: uw_frame_state_for+2A0↑j
.text:00000000000041D8                 CMP             W1, #0x53 ; 'S'
.text:00000000000041DC                 B.NE            loc_41F8
.text:00000000000041E0                 STRB            W27, [X19,#0x673]
.text:00000000000041E4 loc_41E4                                ; CODE XREF: uw_frame_state_for+298↑j
.text:00000000000041E4                                         ; uw_frame_state_for+2DC↑j
.text:00000000000041E4                 ADD             X23, X23, #1
.text:00000000000041E8                 B               loc_4160
.text:00000000000041EC ; ---------------------------------------------------------------------------
.text:00000000000041EC loc_41EC                                ; CODE XREF: uw_frame_state_for+26C↑j
.text:00000000000041EC                 CMP             X24, XZR
.text:00000000000041F0                 CSEL            X0, X24, X0, NE
.text:00000000000041F4                 B               loc_41FC
.text:00000000000041F8 ; ---------------------------------------------------------------------------
.text:00000000000041F8 loc_41F8                                ; CODE XREF: uw_frame_state_for+2E4↑j
.text:00000000000041F8                 MOV             X0, X24
.text:00000000000041FC loc_41FC                                ; CODE XREF: uw_frame_state_for+2FC↑j
.text:00000000000041FC                 CBZ             X0, loc_42FC
.text:0000000000004200                 LDR             W1, [X22]
.text:0000000000004204                 MOV             X2, X20
.text:0000000000004208                 MOV             X3, X19
.text:000000000000420C                 ADD             X1, X1, #4
.text:0000000000004210                 ADD             X1, X22, X1
.text:0000000000004214                 BL              execute_cfa_program
.text:0000000000004218                 LDRB            W0, [X19,#0x670]
.text:000000000000421C                 CMP             W0, #0xFF
.text:0000000000004220                 B.EQ            loc_425C
.text:0000000000004224                 AND             W0, W0, #7
.text:0000000000004228                 CMP             W0, #4  ; switch 5 cases
.text:000000000000422C                 B.HI            def_4244 ; jumptable 0000000000004244 default case, case 1
.text:0000000000004230                 ADRP            X1, #jpt_4244@PAGE
.text:0000000000004234                 ADD             X1, X1, #jpt_4244@PAGEOFF
.text:0000000000004238                 LDRB            W0, [X1,W0,UXTW]
.text:000000000000423C                 ADR             X1, loc_4248 ; jumptable 0000000000004244 case 2
.text:0000000000004240                 ADD             X0, X1, W0,SXTB#2
.text:0000000000004244                 BR              X0      ; switch jump
.text:0000000000004248 ; ---------------------------------------------------------------------------
.text:0000000000004248 loc_4248                                ; CODE XREF: uw_frame_state_for+34C↑j
.text:0000000000004248                                         ; DATA XREF: uw_frame_state_for+344↑o
.text:0000000000004248                 MOV             W2, #2  ; jumptable 0000000000004244 case 2
.text:000000000000424C                 B               loc_4268
.text:0000000000004250 ; ---------------------------------------------------------------------------
.text:0000000000004250 loc_4250                                ; CODE XREF: uw_frame_state_for+34C↑j
.text:0000000000004250                 MOV             W2, #4  ; jumptable 0000000000004244 case 3
.text:0000000000004254                 B               loc_4268
.text:0000000000004258 ; ---------------------------------------------------------------------------
.text:0000000000004258 def_4244                                ; CODE XREF: uw_frame_state_for+334↑j
.text:0000000000004258                                         ; uw_frame_state_for+34C↑j
.text:0000000000004258                 BL              .abort  ; jumptable 0000000000004244 default case, case 1
.text:000000000000425C ; ---------------------------------------------------------------------------
.text:000000000000425C loc_425C                                ; CODE XREF: uw_frame_state_for+328↑j
.text:000000000000425C                 MOV             W2, #0
.text:0000000000004260                 B               loc_4268
.text:0000000000004264 ; ---------------------------------------------------------------------------
.text:0000000000004264 loc_4264                                ; CODE XREF: uw_frame_state_for+34C↑j
.text:0000000000004264                 MOV             W2, #8  ; jumptable 0000000000004244 cases 0,4
.text:0000000000004268 loc_4268                                ; CODE XREF: uw_frame_state_for+354↑j
.text:0000000000004268                                         ; uw_frame_state_for+35C↑j ...
.text:0000000000004268                 LDRB            W0, [X19,#0x672]
.text:000000000000426C                 LSL             W2, W2, #1
.text:0000000000004270                 ADD             X2, X2, #8
.text:0000000000004274                 MOV             X22, #0
.text:0000000000004278                 ADD             X2, X21, X2
.text:000000000000427C                 CBZ             W0, loc_4298
.text:0000000000004280                 MOV             X0, X2
.text:0000000000004284                 ADD             X1, X29, #0x88
.text:0000000000004288                 BL              read_uleb128
.text:000000000000428C                 LDR             X22, [X29,#0x90+var_8]
.text:0000000000004290                 MOV             X2, X0
.text:0000000000004294                 ADD             X22, X0, X22
.text:0000000000004298 loc_4298                                ; CODE XREF: uw_frame_state_for+384↑j
.text:0000000000004298                 LDRB            W23, [X19,#0x671]
.text:000000000000429C                 CMP             W23, #0xFF
.text:00000000000042A0                 B.EQ            loc_42D4
.text:00000000000042A4                 MOV             X1, X20
.text:00000000000042A8                 MOV             W0, W23
.text:00000000000042AC                 STR             X2, [X29,#0x90+var_28]
.text:00000000000042B0                 BL              base_of_encoded_value
.text:00000000000042B4                 MOV             X1, X0
.text:00000000000042B8                 LDR             X2, [X29,#0x90+var_28]
.text:00000000000042BC                 MOV             W0, W23
.text:00000000000042C0                 ADD             X3, X29, #0x88
.text:00000000000042C4                 BL              read_encoded_value_with_base
.text:00000000000042C8                 MOV             X2, X0
.text:00000000000042CC                 LDR             X0, [X29,#0x90+var_8]
.text:00000000000042D0                 STR             X0, [X20,#0x320]
.text:00000000000042D4 loc_42D4                                ; CODE XREF: uw_frame_state_for+3A8↑j
.text:00000000000042D4                 LDR             W1, [X21]
.text:00000000000042D8                 CMP             X22, XZR
.text:00000000000042DC                 CSEL            X0, X22, X2, NE
.text:00000000000042E0                 MOV             X3, X19
.text:00000000000042E4                 ADD             X1, X1, #4
.text:00000000000042E8                 MOV             X2, X20
.text:00000000000042EC                 ADD             X1, X21, X1
.text:00000000000042F0                 BL              execute_cfa_program
.text:00000000000042F4 loc_42F4                                ; CODE XREF: uw_frame_state_for+164↑j
.text:00000000000042F4                 MOV             W0, #0
.text:00000000000042F8                 B               loc_4300
.text:00000000000042FC ; ---------------------------------------------------------------------------
.text:00000000000042FC loc_42FC                                ; CODE XREF: uw_frame_state_for+1C8↑j
.text:00000000000042FC                                         ; uw_frame_state_for+1D0↑j ...
.text:00000000000042FC                 MOV             W0, #3
.text:0000000000004300 loc_4300                                ; CODE XREF: uw_frame_state_for+48↑j
.text:0000000000004300                                         ; uw_frame_state_for+400↑j
.text:0000000000004300                 LDP             X19, X20, [SP,#0x90+var_80]
.text:0000000000004304                 LDP             X21, X22, [SP,#0x90+var_70]
.text:0000000000004308                 LDP             X23, X24, [SP,#0x90+var_60]
.text:000000000000430C                 LDP             X25, X26, [SP,#0x90+var_50]
.text:0000000000004310                 LDR             X27, [SP,#0x90+var_40]
.text:0000000000004314                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:0000000000004318                 RET
.text:0000000000004318 ; } // starts at 3EF8
.text:0000000000004318 ; End of function uw_frame_state_for
.text:000000000000431C ; =============== S U B R O U T I N E =======================================
.text:000000000000431C ; Attributes: bp-based frame fpd=0x290
.text:000000000000431C execute_stack_op                        ; CODE XREF: uw_update_context_1+A8↓p
.text:000000000000431C                                         ; uw_update_context_1+170↓p ...
.text:000000000000431C var_290         = -0x290
.text:000000000000431C var_280         = -0x280
.text:000000000000431C var_270         = -0x270
.text:000000000000431C var_260         = -0x260
.text:000000000000431C var_250         = -0x250
.text:000000000000431C var_240         = -0x240
.text:000000000000431C var_228         = -0x228
.text:000000000000431C var_210         = -0x210
.text:000000000000431C ; __unwind {
.text:000000000000431C                 SUB             SP, SP, #0x230
.text:0000000000004320                 MOV             X4, X0
.text:0000000000004324                 STP             X29, X30, [SP,#0x230+var_290]!
.text:0000000000004328                 MOV             X29, SP
.text:000000000000432C                 STP             X27, X28, [SP,#0x290+var_240]
.text:0000000000004330                 ADD             X28, X29, #0x90
.text:0000000000004334                 STP             X21, X22, [SP,#0x290+var_270]
.text:0000000000004338                 STP             X23, X24, [SP,#0x290+var_260]
.text:000000000000433C                 ADRP            X22, #jpt_47A8@PAGE
.text:0000000000004340                 ADRP            X23, #jpt_4728@PAGE
.text:0000000000004344                 STP             X19, X20, [SP,#0x290+var_280]
.text:0000000000004348                 STP             X25, X26, [SP,#0x290+var_250]
.text:000000000000434C                 MOV             X24, X1
.text:0000000000004350                 MOV             X19, X2
.text:0000000000004354                 STR             X3, [X28]
.text:0000000000004358                 MOV             W25, #1
.text:000000000000435C                 ADD             X22, X22, #jpt_47A8@PAGEOFF
.text:0000000000004360                 ADD             X20, X29, #0x78 ; 'x'
.text:0000000000004364                 ADD             X23, X23, #jpt_4728@PAGEOFF
.text:0000000000004368                 ADD             X21, X29, #0x70 ; 'p'
.text:000000000000436C loc_436C                                ; CODE XREF: execute_stack_op+584↓j
.text:000000000000436C                 CMP             X4, X24
.text:0000000000004370                 B.CS            loc_48A4
.text:0000000000004374                 LDRB            W26, [X4]
.text:0000000000004378                 ADD             X27, X4, #1
.text:000000000000437C                 CMP             W26, #0x20 ; ' '
.text:0000000000004380                 B.HI            loc_4470
.text:0000000000004384                 CMP             W26, #0x1F
.text:0000000000004388                 B.CS            loc_46B4
.text:000000000000438C                 CMP             W26, #0x10
.text:0000000000004390                 B.EQ            loc_4594
.text:0000000000004394                 B.HI            loc_441C
.text:0000000000004398                 CMP             W26, #0xA
.text:000000000000439C                 B.EQ            loc_456C
.text:00000000000043A0                 B.HI            loc_43E0
.text:00000000000043A4                 CMP             W26, #6
.text:00000000000043A8                 B.EQ            loc_46B4
.text:00000000000043AC                 B.HI            loc_43C4
.text:00000000000043B0                 CMP             W26, #3
.text:00000000000043B4                 B.NE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000043B4                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:00000000000043B8                 LDUR            X0, [X4,#1]
.text:00000000000043BC                 ADD             X27, X4, #9
.text:00000000000043C0                 B               loc_488C
.text:00000000000043C4 ; ---------------------------------------------------------------------------
.text:00000000000043C4 loc_43C4                                ; CODE XREF: execute_stack_op+90↑j
.text:00000000000043C4                 CMP             W26, #8
.text:00000000000043C8                 ADD             X27, X4, #2
.text:00000000000043CC                 B.EQ            loc_4564
.text:00000000000043D0                 CMP             W26, #9
.text:00000000000043D4                 B.NE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000043D4                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:00000000000043D8                 LDRSB           X0, [X4,#1]
.text:00000000000043DC                 B               loc_488C
.text:00000000000043E0 ; ---------------------------------------------------------------------------
.text:00000000000043E0 loc_43E0                                ; CODE XREF: execute_stack_op+84↑j
.text:00000000000043E0                 CMP             W26, #0xD
.text:00000000000043E4                 B.EQ            loc_4580
.text:00000000000043E8                 B.HI            loc_4404
.text:00000000000043EC                 CMP             W26, #0xB
.text:00000000000043F0                 B.EQ            loc_4574
.text:00000000000043F4                 CMP             W26, #0xC
.text:00000000000043F8                 B.NE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000043F8                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:00000000000043FC                 LDUR            W0, [X4,#1]
.text:0000000000004400                 B               loc_4584
.text:0000000000004404 ; ---------------------------------------------------------------------------
.text:0000000000004404 loc_4404                                ; CODE XREF: execute_stack_op+CC↑j
.text:0000000000004404                 CMP             W26, #0xE
.text:0000000000004408                 ADD             X27, X4, #9
.text:000000000000440C                 B.EQ            loc_458C
.text:0000000000004410                 CMP             W26, #0xF
.text:0000000000004414                 B.EQ            loc_458C
.text:0000000000004418                 B               def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004418                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:000000000000441C ; ---------------------------------------------------------------------------
.text:000000000000441C loc_441C                                ; CODE XREF: execute_stack_op+78↑j
.text:000000000000441C                 CMP             W26, #0x15
.text:0000000000004420                 B.EQ            loc_4634
.text:0000000000004424                 B.HI            loc_4448
.text:0000000000004428                 CMP             W26, #0x12
.text:000000000000442C                 B.EQ            loc_461C
.text:0000000000004430                 B.CC            loc_45AC
.text:0000000000004434                 CMP             W26, #0x13
.text:0000000000004438                 B.EQ            loc_4628
.text:000000000000443C                 CMP             W26, #0x14
.text:0000000000004440                 B.EQ            loc_465C
.text:0000000000004444                 B               def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004444                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004448 ; ---------------------------------------------------------------------------
.text:0000000000004448 loc_4448                                ; CODE XREF: execute_stack_op+108↑j
.text:0000000000004448                 CMP             W26, #0x19
.text:000000000000444C                 B.EQ            loc_46B4
.text:0000000000004450                 B.HI            loc_4778
.text:0000000000004454                 CMP             W26, #0x16
.text:0000000000004458                 SUB             W1, W25, #1
.text:000000000000445C                 SUB             W0, W25, #2
.text:0000000000004460                 B.EQ            loc_4670
.text:0000000000004464                 CMP             W26, #0x17
.text:0000000000004468                 B.EQ            loc_468C
.text:000000000000446C                 B               def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:000000000000446C                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004470 ; ---------------------------------------------------------------------------
.text:0000000000004470 loc_4470                                ; CODE XREF: execute_stack_op+64↑j
.text:0000000000004470                 CMP             W26, #0x4F ; 'O'
.text:0000000000004474                 B.HI            loc_44B0
.text:0000000000004478                 CMP             W26, #0x30 ; '0'
.text:000000000000447C                 B.CS            loc_455C
.text:0000000000004480                 CMP             W26, #0x27 ; '''
.text:0000000000004484                 B.HI            loc_449C
.text:0000000000004488                 CMP             W26, #0x24 ; '$'
.text:000000000000448C                 B.CS            loc_4778
.text:0000000000004490                 CMP             W26, #0x22 ; '"'
.text:0000000000004494                 B.HI            loc_46B4
.text:0000000000004498                 B               loc_4778
.text:000000000000449C ; ---------------------------------------------------------------------------
.text:000000000000449C loc_449C                                ; CODE XREF: execute_stack_op+168↑j
.text:000000000000449C                 CMP             W26, #0x2E ; '.'
.text:00000000000044A0                 B.HI            loc_4854
.text:00000000000044A4                 CMP             W26, #0x29 ; ')'
.text:00000000000044A8                 B.CC            loc_4864
.text:00000000000044AC                 B               loc_4778
.text:00000000000044B0 ; ---------------------------------------------------------------------------
.text:00000000000044B0 loc_44B0                                ; CODE XREF: execute_stack_op+158↑j
.text:00000000000044B0                 CMP             W26, #0x90
.text:00000000000044B4                 B.EQ            loc_45C8
.text:00000000000044B8                 B.HI            loc_44D0
.text:00000000000044BC                 CMP             W26, #0x6F ; 'o'
.text:00000000000044C0                 B.HI            loc_45E8
.text:00000000000044C4                 MOV             X0, X19
.text:00000000000044C8                 SUB             W1, W26, #0x50 ; 'P'
.text:00000000000044CC                 B               loc_45E0
.text:00000000000044D0 ; ---------------------------------------------------------------------------
.text:00000000000044D0 loc_44D0                                ; CODE XREF: execute_stack_op+19C↑j
.text:00000000000044D0                 CMP             W26, #0x94
.text:00000000000044D4                 B.EQ            loc_46B4
.text:00000000000044D8                 B.HI            loc_4514
.text:00000000000044DC                 CMP             W26, #0x92
.text:00000000000044E0                 B.NE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000044E0                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:00000000000044E4                 MOV             X0, X27
.text:00000000000044E8                 MOV             X1, X21
.text:00000000000044EC                 ADD             X26, X29, #0x80
.text:00000000000044F0                 BL              read_uleb128
.text:00000000000044F4                 MOV             X1, X26
.text:00000000000044F8                 BL              read_sleb128
.text:00000000000044FC                 MOV             X27, X0
.text:0000000000004500                 LDR             W1, [X21]
.text:0000000000004504                 MOV             X0, X19
.text:0000000000004508                 BL              _Unwind_GetGR.localalias.0
.text:000000000000450C                 LDR             X1, [X26]
.text:0000000000004510                 B               loc_4614
.text:0000000000004514 ; ---------------------------------------------------------------------------
.text:0000000000004514 loc_4514                                ; CODE XREF: execute_stack_op+1BC↑j
.text:0000000000004514                 CMP             W26, #0x96
.text:0000000000004518                 B.EQ            loc_489C
.text:000000000000451C                 CMP             W26, #0xF1
.text:0000000000004520                 B.NE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004520                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004524                 LDRB            W2, [X4,#1]
.text:0000000000004528                 MOV             X1, X19
.text:000000000000452C                 ADD             X27, X4, #2
.text:0000000000004530                 STR             X2, [X29,#0x290+var_228]
.text:0000000000004534                 MOV             W0, W2
.text:0000000000004538                 ADD             X26, X29, #0x88
.text:000000000000453C                 BL              base_of_encoded_value
.text:0000000000004540                 MOV             X1, X0
.text:0000000000004544                 LDR             X2, [X29,#0x290+var_228]
.text:0000000000004548                 MOV             X3, X26
.text:000000000000454C                 MOV             W0, W2
.text:0000000000004550                 MOV             X2, X27
.text:0000000000004554                 BL              read_encoded_value_with_base
.text:0000000000004558                 B               loc_45BC
.text:000000000000455C ; ---------------------------------------------------------------------------
.text:000000000000455C loc_455C                                ; CODE XREF: execute_stack_op+160↑j
.text:000000000000455C                 SUB             W0, W26, #0x30 ; '0'
.text:0000000000004560                 B               loc_488C
.text:0000000000004564 ; ---------------------------------------------------------------------------
.text:0000000000004564 loc_4564                                ; CODE XREF: execute_stack_op+B0↑j
.text:0000000000004564                 LDRB            W0, [X4,#1]
.text:0000000000004568                 B               loc_488C
.text:000000000000456C ; ---------------------------------------------------------------------------
.text:000000000000456C loc_456C                                ; CODE XREF: execute_stack_op+80↑j
.text:000000000000456C                 LDURH           W0, [X4,#1]
.text:0000000000004570                 B               loc_4578
.text:0000000000004574 ; ---------------------------------------------------------------------------
.text:0000000000004574 loc_4574                                ; CODE XREF: execute_stack_op+D4↑j
.text:0000000000004574                 LDURSH          X0, [X4,#1]
.text:0000000000004578 loc_4578                                ; CODE XREF: execute_stack_op+254↑j
.text:0000000000004578                 ADD             X27, X4, #3
.text:000000000000457C                 B               loc_488C
.text:0000000000004580 ; ---------------------------------------------------------------------------
.text:0000000000004580 loc_4580                                ; CODE XREF: execute_stack_op+C8↑j
.text:0000000000004580                 LDURSW          X0, [X4,#1]
.text:0000000000004584 loc_4584                                ; CODE XREF: execute_stack_op+E4↑j
.text:0000000000004584                 ADD             X27, X4, #5
.text:0000000000004588                 B               loc_488C
.text:000000000000458C ; ---------------------------------------------------------------------------
.text:000000000000458C loc_458C                                ; CODE XREF: execute_stack_op+F0↑j
.text:000000000000458C                                         ; execute_stack_op+F8↑j
.text:000000000000458C                 LDUR            X0, [X4,#1]
.text:0000000000004590                 B               loc_488C
.text:0000000000004594 ; ---------------------------------------------------------------------------
.text:0000000000004594 loc_4594                                ; CODE XREF: execute_stack_op+74↑j
.text:0000000000004594                 MOV             X0, X27
.text:0000000000004598                 MOV             X1, X20
.text:000000000000459C                 BL              read_uleb128
.text:00000000000045A0                 MOV             X27, X0
.text:00000000000045A4                 LDR             X0, [X20]
.text:00000000000045A8                 B               loc_488C
.text:00000000000045AC ; ---------------------------------------------------------------------------
.text:00000000000045AC loc_45AC                                ; CODE XREF: execute_stack_op+114↑j
.text:00000000000045AC                 ADD             X26, X29, #0x88
.text:00000000000045B0                 MOV             X0, X27
.text:00000000000045B4                 MOV             X1, X26
.text:00000000000045B8                 BL              read_sleb128
.text:00000000000045BC loc_45BC                                ; CODE XREF: execute_stack_op+23C↑j
.text:00000000000045BC                 MOV             X27, X0
.text:00000000000045C0                 LDR             X0, [X26]
.text:00000000000045C4                 B               loc_488C
.text:00000000000045C8 ; ---------------------------------------------------------------------------
.text:00000000000045C8 loc_45C8                                ; CODE XREF: execute_stack_op+198↑j
.text:00000000000045C8                 MOV             X0, X27
.text:00000000000045CC                 MOV             X1, X21
.text:00000000000045D0                 BL              read_uleb128
.text:00000000000045D4                 MOV             X27, X0
.text:00000000000045D8                 LDR             W1, [X21]
.text:00000000000045DC                 MOV             X0, X19
.text:00000000000045E0 loc_45E0                                ; CODE XREF: execute_stack_op+1B0↑j
.text:00000000000045E0                 BL              _Unwind_GetGR.localalias.0
.text:00000000000045E4                 B               loc_488C
.text:00000000000045E8 ; ---------------------------------------------------------------------------
.text:00000000000045E8 loc_45E8                                ; CODE XREF: execute_stack_op+1A4↑j
.text:00000000000045E8                 ADD             X2, X29, #0x80
.text:00000000000045EC                 MOV             X0, X27
.text:00000000000045F0                 MOV             X1, X2
.text:00000000000045F4                 STR             X2, [X29,#0x290+var_228]
.text:00000000000045F8                 BL              read_sleb128
.text:00000000000045FC                 MOV             X27, X0
.text:0000000000004600                 SUB             W1, W26, #0x70 ; 'p'
.text:0000000000004604                 MOV             X0, X19
.text:0000000000004608                 BL              _Unwind_GetGR.localalias.0
.text:000000000000460C                 LDR             X2, [X29,#0x290+var_228]
.text:0000000000004610                 LDR             X1, [X2]
.text:0000000000004614 loc_4614                                ; CODE XREF: execute_stack_op+1F4↑j
.text:0000000000004614                 ADD             X0, X0, X1
.text:0000000000004618                 B               loc_488C
.text:000000000000461C ; ---------------------------------------------------------------------------
.text:000000000000461C loc_461C                                ; CODE XREF: execute_stack_op+110↑j
.text:000000000000461C                 CBZ             W25, def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:000000000000461C                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004620                 SUB             W0, W25, #1
.text:0000000000004624                 B               loc_4668
.text:0000000000004628 ; ---------------------------------------------------------------------------
.text:0000000000004628 loc_4628                                ; CODE XREF: execute_stack_op+11C↑j
.text:0000000000004628                 CBZ             W25, def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004628                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:000000000000462C                 SUB             W25, W25, #1
.text:0000000000004630                 B               loc_489C
.text:0000000000004634 ; ---------------------------------------------------------------------------
.text:0000000000004634 loc_4634                                ; CODE XREF: execute_stack_op+104↑j
.text:0000000000004634                 SUB             W0, W25, #1
.text:0000000000004638                 LDRB            W1, [X4,#1]
.text:000000000000463C                 STR             X1, [X29,#0x290+var_210]
.text:0000000000004640                 ADD             X27, X4, #2
.text:0000000000004644                 SXTW            X0, W0
.text:0000000000004648                 CMP             X1, X0
.text:000000000000464C                 B.GE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:000000000000464C                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004650                 SUB             X0, X0, X1
.text:0000000000004654                 LDR             X0, [X28,X0,LSL#3]
.text:0000000000004658                 B               loc_488C
.text:000000000000465C ; ---------------------------------------------------------------------------
.text:000000000000465C loc_465C                                ; CODE XREF: execute_stack_op+124↑j
.text:000000000000465C                 CMP             W25, #1
.text:0000000000004660                 B.LE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004660                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004664                 SUB             W0, W25, #2
.text:0000000000004668 loc_4668                                ; CODE XREF: execute_stack_op+308↑j
.text:0000000000004668                 LDR             X0, [X28,W0,SXTW#3]
.text:000000000000466C                 B               loc_488C
.text:0000000000004670 ; ---------------------------------------------------------------------------
.text:0000000000004670 loc_4670                                ; CODE XREF: execute_stack_op+144↑j
.text:0000000000004670                 CMP             W25, #1
.text:0000000000004674                 B.LE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004674                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004678                 LDR             X3, [X28,W0,SXTW#3]
.text:000000000000467C                 LDR             X2, [X28,W1,SXTW#3]
.text:0000000000004680                 STR             X3, [X28,W1,SXTW#3]
.text:0000000000004684                 STR             X2, [X28,W0,SXTW#3]
.text:0000000000004688                 B               loc_489C
.text:000000000000468C ; ---------------------------------------------------------------------------
.text:000000000000468C loc_468C                                ; CODE XREF: execute_stack_op+14C↑j
.text:000000000000468C                 CMP             W25, #2
.text:0000000000004690                 B.LE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004690                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004694                 SUB             W2, W25, #3
.text:0000000000004698                 LDR             X5, [X28,W0,SXTW#3]
.text:000000000000469C                 LDR             X3, [X28,W1,SXTW#3]
.text:00000000000046A0                 LDR             X4, [X28,W2,SXTW#3]
.text:00000000000046A4                 STR             X5, [X28,W1,SXTW#3]
.text:00000000000046A8                 STR             X4, [X28,W0,SXTW#3]
.text:00000000000046AC                 STR             X3, [X28,W2,SXTW#3]
.text:00000000000046B0                 B               loc_489C
.text:00000000000046B4 ; ---------------------------------------------------------------------------
.text:00000000000046B4 loc_46B4                                ; CODE XREF: execute_stack_op+6C↑j
.text:00000000000046B4                                         ; execute_stack_op+8C↑j ...
.text:00000000000046B4                 CBZ             W25, def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000046B4                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:00000000000046B8                 SUB             W25, W25, #1
.text:00000000000046BC                 CMP             W26, #0x1F
.text:00000000000046C0                 LDR             X2, [X28,W25,SXTW#3]
.text:00000000000046C4                 B.EQ            loc_474C
.text:00000000000046C8                 B.HI            loc_46E8
.text:00000000000046CC                 CMP             W26, #6
.text:00000000000046D0                 B.EQ            loc_4744 ; jumptable 0000000000004728 case 8
.text:00000000000046D4                 CMP             W26, #0x19
.text:00000000000046D8                 B.NE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000046D8                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:00000000000046DC                 EOR             X1, X2, X2,ASR#63
.text:00000000000046E0                 ADD             X0, X1, X2,LSR#63
.text:00000000000046E4                 B               loc_488C
.text:00000000000046E8 ; ---------------------------------------------------------------------------
.text:00000000000046E8 loc_46E8                                ; CODE XREF: execute_stack_op+3AC↑j
.text:00000000000046E8                 CMP             W26, #0x23 ; '#'
.text:00000000000046EC                 B.EQ            loc_4754
.text:00000000000046F0                 CMP             W26, #0x94
.text:00000000000046F4                 B.EQ            loc_4708
.text:00000000000046F8                 CMP             W26, #0x20 ; ' '
.text:00000000000046FC                 B.NE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000046FC                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004700                 MVN             X0, X2
.text:0000000000004704                 B               loc_488C
.text:0000000000004708 ; ---------------------------------------------------------------------------
.text:0000000000004708 loc_4708                                ; CODE XREF: execute_stack_op+3D8↑j
.text:0000000000004708                 LDRB            W0, [X4,#1]
.text:000000000000470C                 ADD             X27, X4, #2
.text:0000000000004710                 SUB             W0, W0, #1 ; switch 8 cases
.text:0000000000004714                 CMP             W0, #7
.text:0000000000004718                 B.HI            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004718                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:000000000000471C                 LDRB            W0, [X23,W0,UXTW]
.text:0000000000004720                 ADR             X1, loc_472C ; jumptable 0000000000004728 case 1
.text:0000000000004724                 ADD             X0, X1, W0,SXTB#2
.text:0000000000004728                 BR              X0      ; switch jump
.text:000000000000472C ; ---------------------------------------------------------------------------
.text:000000000000472C loc_472C                                ; CODE XREF: execute_stack_op+40C↑j
.text:000000000000472C                                         ; DATA XREF: execute_stack_op+404↑o
.text:000000000000472C                 LDRB            W0, [X2] ; jumptable 0000000000004728 case 1
.text:0000000000004730                 B               loc_488C
.text:0000000000004734 ; ---------------------------------------------------------------------------
.text:0000000000004734 loc_4734                                ; CODE XREF: execute_stack_op+40C↑j
.text:0000000000004734                 LDRH            W0, [X2] ; jumptable 0000000000004728 case 2
.text:0000000000004738                 B               loc_488C
.text:000000000000473C ; ---------------------------------------------------------------------------
.text:000000000000473C loc_473C                                ; CODE XREF: execute_stack_op+40C↑j
.text:000000000000473C                 LDR             W0, [X2] ; jumptable 0000000000004728 case 4
.text:0000000000004740                 B               loc_488C
.text:0000000000004744 ; ---------------------------------------------------------------------------
.text:0000000000004744 loc_4744                                ; CODE XREF: execute_stack_op+3B4↑j
.text:0000000000004744                                         ; execute_stack_op+40C↑j
.text:0000000000004744                 LDR             X0, [X2] ; jumptable 0000000000004728 case 8
.text:0000000000004748                 B               loc_488C
.text:000000000000474C ; ---------------------------------------------------------------------------
.text:000000000000474C loc_474C                                ; CODE XREF: execute_stack_op+3A8↑j
.text:000000000000474C                 NEG             X0, X2
.text:0000000000004750                 B               loc_488C
.text:0000000000004754 ; ---------------------------------------------------------------------------
.text:0000000000004754 loc_4754                                ; CODE XREF: execute_stack_op+3D0↑j
.text:0000000000004754                 MOV             X0, X27
.text:0000000000004758                 MOV             X1, X20
.text:000000000000475C                 STR             X2, [X29,#0x290+var_228]
.text:0000000000004760                 BL              read_uleb128
.text:0000000000004764                 MOV             X27, X0
.text:0000000000004768                 LDR             X1, [X20]
.text:000000000000476C                 LDR             X2, [X29,#0x290+var_228]
.text:0000000000004770                 ADD             X0, X2, X1
.text:0000000000004774                 B               loc_488C
.text:0000000000004778 ; ---------------------------------------------------------------------------
.text:0000000000004778 loc_4778                                ; CODE XREF: execute_stack_op+134↑j
.text:0000000000004778                                         ; execute_stack_op+170↑j ...
.text:0000000000004778                 CMP             W25, #1
.text:000000000000477C                 B.LE            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:000000000000477C                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004780                 SUB             W2, W25, #2
.text:0000000000004784                 SUB             W26, W26, #0x1A ; switch 21 cases
.text:0000000000004788                 SUB             W25, W25, #1
.text:000000000000478C                 CMP             W26, #0x14
.text:0000000000004790                 LDR             X1, [X28,W2,SXTW#3]
.text:0000000000004794                 LDR             X0, [X28,W25,SXTW#3]
.text:0000000000004798                 B.HI            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004798                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:000000000000479C                 LDRB            W3, [X22,W26,UXTW]
.text:00000000000047A0                 ADR             X4, loc_47AC ; jumptable 00000000000047A8 case 26
.text:00000000000047A4                 ADD             X3, X4, W3,SXTB#2
.text:00000000000047A8                 BR              X3      ; switch jump
.text:00000000000047AC ; ---------------------------------------------------------------------------
.text:00000000000047AC loc_47AC                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047AC                                         ; DATA XREF: execute_stack_op+484↑o
.text:00000000000047AC                 AND             X0, X0, X1 ; jumptable 00000000000047A8 case 26
.text:00000000000047B0                 B               loc_4840
.text:00000000000047B4 ; ---------------------------------------------------------------------------
.text:00000000000047B4 loc_47B4                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047B4                 SDIV            X0, X1, X0 ; jumptable 00000000000047A8 case 27
.text:00000000000047B8                 B               loc_4840
.text:00000000000047BC ; ---------------------------------------------------------------------------
.text:00000000000047BC loc_47BC                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047BC                 SUB             X0, X1, X0 ; jumptable 00000000000047A8 case 28
.text:00000000000047C0                 B               loc_4840
.text:00000000000047C4 ; ---------------------------------------------------------------------------
.text:00000000000047C4 loc_47C4                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047C4                 UDIV            X3, X1, X0 ; jumptable 00000000000047A8 case 29
.text:00000000000047C8                 MSUB            X0, X3, X0, X1
.text:00000000000047CC                 B               loc_4840
.text:00000000000047D0 ; ---------------------------------------------------------------------------
.text:00000000000047D0 loc_47D0                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047D0                 MUL             X0, X0, X1 ; jumptable 00000000000047A8 case 30
.text:00000000000047D4                 B               loc_4840
.text:00000000000047D8 ; ---------------------------------------------------------------------------
.text:00000000000047D8 loc_47D8                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047D8                 ORR             X0, X0, X1 ; jumptable 00000000000047A8 case 33
.text:00000000000047DC                 B               loc_4840
.text:00000000000047E0 ; ---------------------------------------------------------------------------
.text:00000000000047E0 loc_47E0                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047E0                 ADD             X0, X0, X1 ; jumptable 00000000000047A8 case 34
.text:00000000000047E4                 B               loc_4840
.text:00000000000047E8 ; ---------------------------------------------------------------------------
.text:00000000000047E8 loc_47E8                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047E8                 LSL             X0, X1, X0 ; jumptable 00000000000047A8 case 36
.text:00000000000047EC                 B               loc_4840
.text:00000000000047F0 ; ---------------------------------------------------------------------------
.text:00000000000047F0 loc_47F0                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047F0                 LSR             X0, X1, X0 ; jumptable 00000000000047A8 case 37
.text:00000000000047F4                 B               loc_4840
.text:00000000000047F8 ; ---------------------------------------------------------------------------
.text:00000000000047F8 loc_47F8                                ; CODE XREF: execute_stack_op+48C↑j
.text:00000000000047F8                 ASR             X0, X1, X0 ; jumptable 00000000000047A8 case 38
.text:00000000000047FC                 B               loc_4840
.text:0000000000004800 ; ---------------------------------------------------------------------------
.text:0000000000004800 loc_4800                                ; CODE XREF: execute_stack_op+48C↑j
.text:0000000000004800                 EOR             X0, X0, X1 ; jumptable 00000000000047A8 case 39
.text:0000000000004804                 B               loc_4840
.text:0000000000004808 ; ---------------------------------------------------------------------------
.text:0000000000004808 loc_4808                                ; CODE XREF: execute_stack_op+48C↑j
.text:0000000000004808                 CMP             X1, X0  ; jumptable 00000000000047A8 case 44
.text:000000000000480C                 CSET            X0, LE
.text:0000000000004810                 B               loc_4840
.text:0000000000004814 ; ---------------------------------------------------------------------------
.text:0000000000004814 loc_4814                                ; CODE XREF: execute_stack_op+48C↑j
.text:0000000000004814                 CMP             X1, X0  ; jumptable 00000000000047A8 case 42
.text:0000000000004818                 CSET            X0, GE
.text:000000000000481C                 B               loc_4840
.text:0000000000004820 ; ---------------------------------------------------------------------------
.text:0000000000004820 loc_4820                                ; CODE XREF: execute_stack_op+48C↑j
.text:0000000000004820                 CMP             X1, X0  ; jumptable 00000000000047A8 case 41
.text:0000000000004824                 CSET            X0, EQ
.text:0000000000004828                 B               loc_4840
.text:000000000000482C ; ---------------------------------------------------------------------------
.text:000000000000482C loc_482C                                ; CODE XREF: execute_stack_op+48C↑j
.text:000000000000482C                 CMP             X1, X0  ; jumptable 00000000000047A8 case 45
.text:0000000000004830                 CSET            X0, LT
.text:0000000000004834                 B               loc_4840
.text:0000000000004838 ; ---------------------------------------------------------------------------
.text:0000000000004838 loc_4838                                ; CODE XREF: execute_stack_op+48C↑j
.text:0000000000004838                 CMP             X1, X0  ; jumptable 00000000000047A8 case 43
.text:000000000000483C                 CSET            X0, GT
.text:0000000000004840 loc_4840                                ; CODE XREF: execute_stack_op+494↑j
.text:0000000000004840                                         ; execute_stack_op+49C↑j ...
.text:0000000000004840                 MOV             W25, W2
.text:0000000000004844                 B               loc_488C
.text:0000000000004848 ; ---------------------------------------------------------------------------
.text:0000000000004848 loc_4848                                ; CODE XREF: execute_stack_op+48C↑j
.text:0000000000004848                 CMP             X1, X0  ; jumptable 00000000000047A8 case 46
.text:000000000000484C                 CSET            X0, NE
.text:0000000000004850                 B               loc_4840
.text:0000000000004854 ; ---------------------------------------------------------------------------
.text:0000000000004854 loc_4854                                ; CODE XREF: execute_stack_op+184↑j
.text:0000000000004854                 LDURSH          X0, [X4,#1]
.text:0000000000004858                 ADD             X27, X4, #3
.text:000000000000485C                 ADD             X27, X27, X0
.text:0000000000004860                 B               loc_489C
.text:0000000000004864 ; ---------------------------------------------------------------------------
.text:0000000000004864 loc_4864                                ; CODE XREF: execute_stack_op+18C↑j
.text:0000000000004864                 CBZ             W25, def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004864                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004868                 SUB             W25, W25, #1
.text:000000000000486C                 ADD             X27, X4, #3
.text:0000000000004870                 LDURSH          W0, [X4,#1]
.text:0000000000004874                 ADD             X0, X27, W0,SXTH
.text:0000000000004878                 LDR             X1, [X28,W25,SXTW#3]
.text:000000000000487C                 CMP             X1, XZR
.text:0000000000004880                 CSEL            X27, X27, X0, EQ
.text:0000000000004884                 B               loc_489C
.text:0000000000004888 ; ---------------------------------------------------------------------------
.text:0000000000004888 def_4728                                ; CODE XREF: execute_stack_op+98↑j
.text:0000000000004888                                         ; execute_stack_op+B8↑j ...
.text:0000000000004888                 BL              .abort  ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004888                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:000000000000488C ; ---------------------------------------------------------------------------
.text:000000000000488C loc_488C                                ; CODE XREF: execute_stack_op+A4↑j
.text:000000000000488C                                         ; execute_stack_op+C0↑j ...
.text:000000000000488C                 CMP             W25, #0x3F ; '?'
.text:0000000000004890                 B.HI            def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:0000000000004890                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:0000000000004894                 STR             X0, [X28,W25,SXTW#3]
.text:0000000000004898                 ADD             W25, W25, #1
.text:000000000000489C loc_489C                                ; CODE XREF: execute_stack_op+1FC↑j
.text:000000000000489C                                         ; execute_stack_op+314↑j ...
.text:000000000000489C                 MOV             X4, X27
.text:00000000000048A0                 B               loc_436C
.text:00000000000048A4 ; ---------------------------------------------------------------------------
.text:00000000000048A4 loc_48A4                                ; CODE XREF: execute_stack_op+54↑j
.text:00000000000048A4                 CBZ             W25, def_4728 ; jumptable 0000000000004728 default case, cases 3,5-7
.text:00000000000048A4                                         ; jumptable 00000000000047A8 default case, cases 31,32,35,40
.text:00000000000048A8                 SUB             W25, W25, #1
.text:00000000000048AC                 LDP             X19, X20, [SP,#0x290+var_280]
.text:00000000000048B0                 LDP             X21, X22, [SP,#0x290+var_270]
.text:00000000000048B4                 LDR             X0, [X28,W25,SXTW#3]
.text:00000000000048B8                 LDP             X23, X24, [SP,#0x290+var_260]
.text:00000000000048BC                 LDP             X25, X26, [SP,#0x290+var_250]
.text:00000000000048C0                 LDP             X27, X28, [SP,#0x290+var_240]
.text:00000000000048C4                 LDP             X29, X30, [SP+0x290+var_290],#0x60
.text:00000000000048C8                 ADD             SP, SP, #0x230
.text:00000000000048CC                 RET
.text:00000000000048CC ; } // starts at 431C
.text:00000000000048CC ; End of function execute_stack_op
.text:00000000000048D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048D0 ; Attributes: bp-based frame fpd=0x440
.text:00000000000048D0 ; __int64 __fastcall uw_update_context_1(void *src)
.text:00000000000048D0 uw_update_context_1                     ; CODE XREF: uw_init_context_1+BC↓p
.text:00000000000048D0                                         ; uw_update_context+14↓p
.text:00000000000048D0 var_440         = -0x440
.text:00000000000048D0 var_430         = -0x430
.text:00000000000048D0 var_420         = -0x420
.text:00000000000048D0 var_410         = -0x410
.text:00000000000048D0 var_400         = -0x400
.text:00000000000048D0 var_3F0         = -0x3F0
.text:00000000000048D0 var_3D8         = -0x3D8
.text:00000000000048D0 var_80          = -0x80
.text:00000000000048D0 ; __unwind {
.text:00000000000048D0                 SUB             SP, SP, #0x3E0
.text:00000000000048D4                 MOV             X2, #0x3C0 ; n
.text:00000000000048D8                 STP             X29, X30, [SP,#0x3E0+var_440]!
.text:00000000000048DC                 MOV             X29, SP
.text:00000000000048E0                 STP             X19, X20, [SP,#0x440+var_430]
.text:00000000000048E4                 STP             X21, X22, [SP,#0x440+var_420]
.text:00000000000048E8                 MOV             X19, X0
.text:00000000000048EC                 ADD             X21, X29, #0x80
.text:00000000000048F0                 STP             X23, X24, [SP,#0x440+var_410]
.text:00000000000048F4                 MOV             X0, X21 ; dest
.text:00000000000048F8                 MOV             X24, X1
.text:00000000000048FC                 MOV             X1, X19 ; src
.text:0000000000004900                 STP             X25, X26, [SP,#0x440+var_400]
.text:0000000000004904                 STP             X27, X28, [SP,#0x440+var_3F0]
.text:0000000000004908                 BL              .memcpy
.text:000000000000490C                 LDR             X0, [X29,#0x440+var_80]
.text:0000000000004910                 TBZ             X0, #0x3E, loc_491C ; '>'
.text:0000000000004914                 LDRB            W0, [X21,#0x377]
.text:0000000000004918                 CBNZ            W0, loc_4934
.text:000000000000491C loc_491C                                ; CODE XREF: uw_update_context_1+40↑j
.text:000000000000491C                 LDR             X0, [X21,#0xF8]
.text:0000000000004920                 CBNZ            X0, loc_4934
.text:0000000000004924                 LDR             X1, [X19,#0x310]
.text:0000000000004928                 MOV             X0, X21
.text:000000000000492C                 ADD             X2, X29, #0x70 ; 'p'
.text:0000000000004930                 BL              _Unwind_SetSpColumn
.text:0000000000004934 loc_4934                                ; CODE XREF: uw_update_context_1+48↑j
.text:0000000000004934                                         ; uw_update_context_1+50↑j
.text:0000000000004934                 LDR             X0, [X19,#0x340]
.text:0000000000004938                 TBZ             X0, #0x3E, loc_4940 ; '>'
.text:000000000000493C                 STRB            WZR, [X19,#0x377]
.text:0000000000004940 loc_4940                                ; CODE XREF: uw_update_context_1+68↑j
.text:0000000000004940                 LDR             W0, [X24,#0x640]
.text:0000000000004944                 STR             XZR, [X19,#0xF8]
.text:0000000000004948                 CMP             W0, #1
.text:000000000000494C                 B.EQ            loc_4984
.text:0000000000004950                 CMP             W0, #2
.text:0000000000004954                 B.NE            loc_4A18
.text:0000000000004958                 ADD             X20, X29, #0x78 ; 'x'
.text:000000000000495C                 LDR             X0, [X24,#0x638]
.text:0000000000004960                 MOV             X1, X20
.text:0000000000004964                 BL              read_uleb128
.text:0000000000004968                 LDR             X1, [X20]
.text:000000000000496C                 MOV             X2, X21
.text:0000000000004970                 MOV             X3, #0
.text:0000000000004974                 ADD             X1, X0, X1
.text:0000000000004978                 BL              execute_stack_op
.text:000000000000497C                 MOV             X23, X0
.text:0000000000004980                 B               loc_4998
.text:0000000000004984 ; ---------------------------------------------------------------------------
.text:0000000000004984 loc_4984                                ; CODE XREF: uw_update_context_1+7C↑j
.text:0000000000004984                 LDR             W1, [X24,#0x630]
.text:0000000000004988                 MOV             X0, X21
.text:000000000000498C                 BL              _Unwind_GetGR.localalias.0
.text:0000000000004990                 LDR             X23, [X24,#0x628]
.text:0000000000004994                 ADD             X23, X0, X23
.text:0000000000004998 loc_4998                                ; CODE XREF: uw_update_context_1+B0↑j
.text:0000000000004998                 ADRP            X0, #unk_72E4@PAGE
.text:000000000000499C                 STR             X23, [X19,#0x310]
.text:00000000000049A0                 ADD             X0, X0, #unk_72E4@PAGEOFF
.text:00000000000049A4                 MOV             X26, X24
.text:00000000000049A8                 ADD             X22, X19, #0x358
.text:00000000000049AC                 MOV             X20, #0
.text:00000000000049B0                 STR             X0, [X29,#0x440+var_3D8]
.text:00000000000049B4                 ADD             X25, X29, #0x78 ; 'x'
.text:00000000000049B8                 ADRP            X27, #0x18000
.text:00000000000049BC                 MOV             W28, #1
.text:00000000000049C0 loc_49C0                                ; CODE XREF: uw_update_context_1+1CC↓j
.text:00000000000049C0                 LDR             W0, [X26,#8]
.text:00000000000049C4                 SUB             W0, W0, #1
.text:00000000000049C8                 CMP             W0, #4
.text:00000000000049CC                 B.HI            loc_4A8C
.text:00000000000049D0                 LDR             X1, [X29,#0x440+var_3D8]
.text:00000000000049D4                 LDRB            W0, [X1,W0,UXTW]
.text:00000000000049D8                 ADR             X1, loc_49E4
.text:00000000000049DC                 ADD             X0, X1, W0,SXTB#2
.text:00000000000049E0                 BR              X0
.text:00000000000049E4 ; ---------------------------------------------------------------------------
.text:00000000000049E4 loc_49E4                                ; DATA XREF: uw_update_context_1+108↑o
.text:00000000000049E4                 LDR             X0, [X26]
.text:00000000000049E8                 ADD             X0, X23, X0
.text:00000000000049EC                 B               loc_4A44
.text:00000000000049F0 ; ---------------------------------------------------------------------------
.text:00000000000049F0                 LDR             X1, [X26]
.text:00000000000049F4                 ADD             X0, X21, W1,SXTW
.text:00000000000049F8                 LDRB            W0, [X0,#0x358]
.text:00000000000049FC                 CBZ             W0, loc_4A1C
.text:0000000000004A00                 MOV             X0, X21
.text:0000000000004A04                 BL              _Unwind_GetGR.localalias.0
.text:0000000000004A08 loc_4A08                                ; CODE XREF: uw_update_context_1+18C↓j
.text:0000000000004A08                                         ; uw_update_context_1+1B0↓j
.text:0000000000004A08                 ADD             X1, X27, #0x990
.text:0000000000004A0C                 LDRB            W1, [X20,X1]
.text:0000000000004A10                 CMP             W1, #8
.text:0000000000004A14                 B.LS            loc_4A84
.text:0000000000004A18 loc_4A18                                ; CODE XREF: uw_update_context_1+84↑j
.text:0000000000004A18                 BL              .abort
.text:0000000000004A1C ; ---------------------------------------------------------------------------
.text:0000000000004A1C loc_4A1C                                ; CODE XREF: uw_update_context_1+12C↑j
.text:0000000000004A1C                 LDR             X0, [X21,W1,SXTW#3]
.text:0000000000004A20                 B               loc_4A44
.text:0000000000004A24 ; ---------------------------------------------------------------------------
.text:0000000000004A24                 LDR             X0, [X26]
.text:0000000000004A28                 MOV             X1, X25
.text:0000000000004A2C                 BL              read_uleb128
.text:0000000000004A30                 LDR             X1, [X25]
.text:0000000000004A34                 MOV             X2, X21
.text:0000000000004A38                 MOV             X3, X23
.text:0000000000004A3C                 ADD             X1, X0, X1
.text:0000000000004A40                 BL              execute_stack_op
.text:0000000000004A44 loc_4A44                                ; CODE XREF: uw_update_context_1+11C↑j
.text:0000000000004A44                                         ; uw_update_context_1+150↑j
.text:0000000000004A44                 LDR             X1, [X19,#0x340]
.text:0000000000004A48                 TBZ             X1, #0x3E, loc_4A88 ; '>'
.text:0000000000004A4C                 STRB            WZR, [X22]
.text:0000000000004A50                 B               loc_4A88
.text:0000000000004A54 ; ---------------------------------------------------------------------------
.text:0000000000004A54                 LDR             X0, [X26]
.text:0000000000004A58                 ADD             X0, X23, X0
.text:0000000000004A5C                 B               loc_4A08
.text:0000000000004A60 ; ---------------------------------------------------------------------------
.text:0000000000004A60                 LDR             X0, [X26]
.text:0000000000004A64                 MOV             X1, X25
.text:0000000000004A68                 BL              read_uleb128
.text:0000000000004A6C                 LDR             X1, [X25]
.text:0000000000004A70                 MOV             X2, X21
.text:0000000000004A74                 MOV             X3, X23
.text:0000000000004A78                 ADD             X1, X0, X1
.text:0000000000004A7C                 BL              execute_stack_op
.text:0000000000004A80                 B               loc_4A08
.text:0000000000004A84 ; ---------------------------------------------------------------------------
.text:0000000000004A84 loc_4A84                                ; CODE XREF: uw_update_context_1+144↑j
.text:0000000000004A84                 STRB            W28, [X22]
.text:0000000000004A88 loc_4A88                                ; CODE XREF: uw_update_context_1+178↑j
.text:0000000000004A88                                         ; uw_update_context_1+180↑j
.text:0000000000004A88                 STR             X0, [X19,X20,LSL#3]
.text:0000000000004A8C loc_4A8C                                ; CODE XREF: uw_update_context_1+FC↑j
.text:0000000000004A8C                 ADD             X20, X20, #1
.text:0000000000004A90                 ADD             X26, X26, #0x10
.text:0000000000004A94                 CMP             X20, #0x62 ; 'b'
.text:0000000000004A98                 ADD             X22, X22, #1
.text:0000000000004A9C                 B.NE            loc_49C0
.text:0000000000004AA0                 LDR             X0, [X19,#0x340]
.text:0000000000004AA4                 LDRB            W2, [X24,#0x673]
.text:0000000000004AA8                 ORR             X1, X0, #0x8000000000000000
.text:0000000000004AAC                 AND             X0, X0, #0x7FFFFFFFFFFFFFFF
.text:0000000000004AB0                 CMP             W2, WZR
.text:0000000000004AB4                 CSEL            X0, X0, X1, EQ
.text:0000000000004AB8                 STR             X0, [X19,#0x340]
.text:0000000000004ABC                 LDP             X21, X22, [SP,#0x440+var_420]
.text:0000000000004AC0                 LDP             X19, X20, [SP,#0x440+var_430]
.text:0000000000004AC4                 LDP             X23, X24, [SP,#0x440+var_410]
.text:0000000000004AC8                 LDP             X25, X26, [SP,#0x440+var_400]
.text:0000000000004ACC                 LDP             X27, X28, [SP,#0x440+var_3F0]
.text:0000000000004AD0                 LDP             X29, X30, [SP+0x440+var_440],#0x60
.text:0000000000004AD4                 ADD             SP, SP, #0x3E0
.text:0000000000004AD8                 RET
.text:0000000000004AD8 ; } // starts at 48D0
.text:0000000000004AD8 ; End of function uw_update_context_1
.text:0000000000004ADC ; =============== S U B R O U T I N E =======================================
.text:0000000000004ADC ; Attributes: bp-based frame fpd=0x6D0
.text:0000000000004ADC uw_init_context_1                       ; CODE XREF: _Unwind_RaiseException+50↓p
.text:0000000000004ADC                                         ; _Unwind_ForcedUnwind+58↓p ...
.text:0000000000004ADC var_6D0         = -0x6D0
.text:0000000000004ADC var_6C0         = -0x6C0
.text:0000000000004ADC var_6B0         = -0x6B0
.text:0000000000004ADC var_6A0         = -0x6A0
.text:0000000000004ADC var_58          = -0x58
.text:0000000000004ADC var_50          = -0x50
.text:0000000000004ADC var_40          = -0x40
.text:0000000000004ADC ; __unwind {
.text:0000000000004ADC                 SUB             SP, SP, #0x690
.text:0000000000004AE0                 STP             X29, X30, [SP,#0x690+var_6D0]!
.text:0000000000004AE4                 MOV             X29, SP
.text:0000000000004AE8                 STP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000004AEC                 STP             X21, X22, [SP,#0x6D0+var_6B0]
.text:0000000000004AF0                 MOV             X19, X0
.text:0000000000004AF4                 STR             X23, [SP,#0x6D0+var_6A0]
.text:0000000000004AF8                 MOV             X22, X2
.text:0000000000004AFC                 MOV             X23, X1
.text:0000000000004B00                 MOV             X2, #0x3C0 ; n
.text:0000000000004B04                 MOV             W1, #0  ; c
.text:0000000000004B08                 MOV             X20, X30
.text:0000000000004B0C                 BL              .memset
.text:0000000000004B10                 STR             X20, [X19,#0x318]
.text:0000000000004B14                 MOV             X0, #0x4000000000000000
.text:0000000000004B18                 ADD             X20, X29, #0x50 ; 'P'
.text:0000000000004B1C                 STR             X0, [X19,#0x340]
.text:0000000000004B20                 MOV             X1, X20
.text:0000000000004B24                 MOV             X0, X19
.text:0000000000004B28                 BL              uw_frame_state_for
.text:0000000000004B2C                 CBZ             W0, loc_4B34
.text:0000000000004B30                 BL              .abort
.text:0000000000004B34 ; ---------------------------------------------------------------------------
.text:0000000000004B34 loc_4B34                                ; CODE XREF: uw_init_context_1+50↑j
.text:0000000000004B34                 ADRP            X0, #pthread_create_ptr@PAGE
.text:0000000000004B38                 ADRP            X21, #dwarf_reg_size_table@PAGE
.text:0000000000004B3C                 LDR             X0, [X0,#pthread_create_ptr@PAGEOFF]
.text:0000000000004B40                 CBNZ            X0, loc_4B54
.text:0000000000004B44 loc_4B44                                ; CODE XREF: uw_init_context_1+8C↓j
.text:0000000000004B44                 LDRB            W0, [X21,#dwarf_reg_size_table@PAGEOFF]
.text:0000000000004B48                 CBNZ            W0, loc_4B6C
.text:0000000000004B4C                 BL              init_dwarf_reg_size_table
.text:0000000000004B50                 B               loc_4B6C
.text:0000000000004B54 ; ---------------------------------------------------------------------------
.text:0000000000004B54 loc_4B54                                ; CODE XREF: uw_init_context_1+64↑j
.text:0000000000004B54                 ADD             X0, X21, #dwarf_reg_size_table@PAGEOFF
.text:0000000000004B58                 ADRP            X1, #init_dwarf_reg_size_table@PAGE
.text:0000000000004B5C                 ADD             X0, X0, #0x64 ; 'd' ; once_control
.text:0000000000004B60                 ADD             X1, X1, #init_dwarf_reg_size_table@PAGEOFF ; init_routine
.text:0000000000004B64                 BL              .pthread_once
.text:0000000000004B68                 CBNZ            W0, loc_4B44
.text:0000000000004B6C loc_4B6C                                ; CODE XREF: uw_init_context_1+6C↑j
.text:0000000000004B6C                                         ; uw_init_context_1+74↑j
.text:0000000000004B6C                 ADD             X2, X29, #0x48 ; 'H'
.text:0000000000004B70                 MOV             X0, X19
.text:0000000000004B74                 MOV             X1, X23
.text:0000000000004B78                 BL              _Unwind_SetSpColumn
.text:0000000000004B7C                 STR             XZR, [X29,#0x6D0+var_58]
.text:0000000000004B80                 MOV             W0, #1
.text:0000000000004B84                 STR             W0, [X29,#0x6D0+var_40]
.text:0000000000004B88                 MOV             X0, #0x1F
.text:0000000000004B8C                 MOV             X1, X20
.text:0000000000004B90                 STR             X0, [X29,#0x6D0+var_50]
.text:0000000000004B94                 MOV             X0, X19 ; src
.text:0000000000004B98                 BL              uw_update_context_1
.text:0000000000004B9C                 STR             X22, [X19,#0x318]
.text:0000000000004BA0                 LDR             X23, [SP,#0x6D0+var_6A0]
.text:0000000000004BA4                 LDP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000004BA8                 LDP             X21, X22, [SP,#0x6D0+var_6B0]
.text:0000000000004BAC                 LDP             X29, X30, [SP+0x6D0+var_6D0],#0x40
.text:0000000000004BB0                 ADD             SP, SP, #0x690
.text:0000000000004BB4                 RET
.text:0000000000004BB4 ; } // starts at 4ADC
.text:0000000000004BB4 ; End of function uw_init_context_1
.text:0000000000004BB8 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB8 ; Attributes: bp-based frame
.text:0000000000004BB8 uw_update_context                       ; CODE XREF: _Unwind_RaiseException_Phase2+9C↓p
.text:0000000000004BB8                                         ; _Unwind_ForcedUnwind_Phase2+90↓p ...
.text:0000000000004BB8 var_s0          =  0
.text:0000000000004BB8 var_s10         =  0x10
.text:0000000000004BB8 ; __unwind {
.text:0000000000004BB8                 STP             X29, X30, [SP,#-0x20+var_s0]!
.text:0000000000004BBC                 MOV             X29, SP
.text:0000000000004BC0                 STP             X19, X20, [SP,#var_s10]
.text:0000000000004BC4                 MOV             X19, X1
.text:0000000000004BC8                 MOV             X20, X0
.text:0000000000004BCC                 BL              uw_update_context_1
.text:0000000000004BD0                 LDR             X1, [X19,#0x668]
.text:0000000000004BD4                 ADD             X19, X19, X1,LSL#4
.text:0000000000004BD8                 LDR             W0, [X19,#8]
.text:0000000000004BDC                 CMP             W0, #6
.text:0000000000004BE0                 B.NE            loc_4BEC
.text:0000000000004BE4                 STR             XZR, [X20,#0x318]
.text:0000000000004BE8                 B               loc_4BF8
.text:0000000000004BEC ; ---------------------------------------------------------------------------
.text:0000000000004BEC loc_4BEC                                ; CODE XREF: uw_update_context+28↑j
.text:0000000000004BEC                 MOV             X0, X20
.text:0000000000004BF0                 BL              _Unwind_GetGR.localalias.0
.text:0000000000004BF4                 STR             X0, [X20,#0x318]
.text:0000000000004BF8 loc_4BF8                                ; CODE XREF: uw_update_context+30↑j
.text:0000000000004BF8                 LDP             X19, X20, [SP,#var_s10]
.text:0000000000004BFC                 LDP             X29, X30, [SP+var_s0],#0x20
.text:0000000000004C00                 RET
.text:0000000000004C00 ; } // starts at 4BB8
.text:0000000000004C00 ; End of function uw_update_context
.text:0000000000004C04 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C04 ; Attributes: bp-based frame fpd=0x6C0
.text:0000000000004C04 _Unwind_RaiseException_Phase2           ; CODE XREF: _Unwind_RaiseException+FC↓p
.text:0000000000004C04                                         ; _Unwind_Resume+74↓p
.text:0000000000004C04 var_6C0         = -0x6C0
.text:0000000000004C04 var_6B0         = -0x6B0
.text:0000000000004C04 var_6A0         = -0x6A0
.text:0000000000004C04 var_690         = -0x690
.text:0000000000004C04 ; __unwind {
.text:0000000000004C04                 SUB             SP, SP, #0x680
.text:0000000000004C08                 STP             X29, X30, [SP,#0x680+var_6C0]!
.text:0000000000004C0C                 MOV             X29, SP
.text:0000000000004C10                 STP             X19, X20, [SP,#0x6C0+var_6B0]
.text:0000000000004C14                 STP             X21, X22, [SP,#0x6C0+var_6A0]
.text:0000000000004C18                 STP             X23, X24, [SP,#0x6C0+var_690]
.text:0000000000004C1C                 MOV             X21, X0
.text:0000000000004C20                 MOV             X19, X1
.text:0000000000004C24                 ADD             X20, X29, #0x40 ; '@'
.text:0000000000004C28                 MOV             W23, #4
.text:0000000000004C2C loc_4C2C                                ; CODE XREF: _Unwind_RaiseException_Phase2+A0↓j
.text:0000000000004C2C                 MOV             X1, X20
.text:0000000000004C30                 MOV             X0, X19
.text:0000000000004C34                 BL              uw_frame_state_for
.text:0000000000004C38                 MOV             W24, W0
.text:0000000000004C3C                 MOV             X0, X19
.text:0000000000004C40                 BL              ._Unwind_GetCFA
.text:0000000000004C44                 LDR             X1, [X19,#0x340]
.text:0000000000004C48                 SUB             X0, X0, X1,LSR#63
.text:0000000000004C4C                 LDR             X1, [X21,#0x18]
.text:0000000000004C50                 CMP             X0, X1
.text:0000000000004C54                 CSEL            W22, W23, WZR, EQ
.text:0000000000004C58                 CBNZ            W24, loc_4CA8
.text:0000000000004C5C                 LDR             X5, [X20,#0x650]
.text:0000000000004C60                 CBNZ            X5, loc_4C6C
.text:0000000000004C64 loc_4C64                                ; CODE XREF: _Unwind_RaiseException_Phase2+8C↓j
.text:0000000000004C64                 CBZ             W22, loc_4C98
.text:0000000000004C68                 BL              .abort
.text:0000000000004C6C ; ---------------------------------------------------------------------------
.text:0000000000004C6C loc_4C6C                                ; CODE XREF: _Unwind_RaiseException_Phase2+5C↑j
.text:0000000000004C6C                 LDR             X2, [X21]
.text:0000000000004C70                 MOV             W0, #1
.text:0000000000004C74                 ORR             W1, W22, #2
.text:0000000000004C78                 MOV             X3, X21
.text:0000000000004C7C                 MOV             X4, X19
.text:0000000000004C80                 BLR             X5
.text:0000000000004C84                 CMP             W0, #7
.text:0000000000004C88                 B.EQ            loc_4CAC
.text:0000000000004C8C                 CMP             W0, #8
.text:0000000000004C90                 B.EQ            loc_4C64
.text:0000000000004C94                 B               loc_4CA8
.text:0000000000004C98 ; ---------------------------------------------------------------------------
.text:0000000000004C98 loc_4C98                                ; CODE XREF: _Unwind_RaiseException_Phase2:loc_4C64↑j
.text:0000000000004C98                 MOV             X0, X19
.text:0000000000004C9C                 MOV             X1, X20
.text:0000000000004CA0                 BL              uw_update_context
.text:0000000000004CA4                 B               loc_4C2C
.text:0000000000004CA8 ; ---------------------------------------------------------------------------
.text:0000000000004CA8 loc_4CA8                                ; CODE XREF: _Unwind_RaiseException_Phase2+54↑j
.text:0000000000004CA8                                         ; _Unwind_RaiseException_Phase2+90↑j
.text:0000000000004CA8                 MOV             W0, #2
.text:0000000000004CAC loc_4CAC                                ; CODE XREF: _Unwind_RaiseException_Phase2+84↑j
.text:0000000000004CAC                 LDP             X19, X20, [SP,#0x6C0+var_6B0]
.text:0000000000004CB0                 LDP             X21, X22, [SP,#0x6C0+var_6A0]
.text:0000000000004CB4                 LDP             X23, X24, [SP,#0x6C0+var_690]
.text:0000000000004CB8                 LDP             X29, X30, [SP+0x6C0+var_6C0],#0x40
.text:0000000000004CBC                 ADD             SP, SP, #0x680
.text:0000000000004CC0                 RET
.text:0000000000004CC0 ; } // starts at 4C04
.text:0000000000004CC0 ; End of function _Unwind_RaiseException_Phase2
.text:0000000000004CC4 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CC4 ; Attributes: bp-based frame fpd=0x6D0
.text:0000000000004CC4 _Unwind_ForcedUnwind_Phase2             ; CODE XREF: _Unwind_ForcedUnwind+7C↓p
.text:0000000000004CC4                                         ; _Unwind_Resume+84↓p ...
.text:0000000000004CC4 var_6D0         = -0x6D0
.text:0000000000004CC4 var_6C0         = -0x6C0
.text:0000000000004CC4 var_6B0         = -0x6B0
.text:0000000000004CC4 var_6A0         = -0x6A0
.text:0000000000004CC4 var_690         = -0x690
.text:0000000000004CC4 ; __unwind {
.text:0000000000004CC4                 SUB             SP, SP, #0x680
.text:0000000000004CC8                 STP             X29, X30, [SP,#0x680+var_6D0]!
.text:0000000000004CCC                 MOV             X29, SP
.text:0000000000004CD0                 STP             X23, X24, [SP,#0x6D0+var_6A0]
.text:0000000000004CD4                 LDR             X23, [X0,#0x10]
.text:0000000000004CD8                 LDR             X24, [X0,#0x18]
.text:0000000000004CDC                 STP             X21, X22, [SP,#0x6D0+var_6B0]
.text:0000000000004CE0                 STP             X25, X26, [SP,#0x6D0+var_690]
.text:0000000000004CE4                 STP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000004CE8                 MOV             X21, X1
.text:0000000000004CEC                 MOV             X20, X0
.text:0000000000004CF0                 ADD             X22, X29, #0x50 ; 'P'
.text:0000000000004CF4                 MOV             W25, #0x1A
.text:0000000000004CF8                 MOV             W26, #0xA
.text:0000000000004CFC loc_4CFC                                ; CODE XREF: _Unwind_ForcedUnwind_Phase2+94↓j
.text:0000000000004CFC                 MOV             X0, X21
.text:0000000000004D00                 MOV             X1, X22
.text:0000000000004D04                 BL              uw_frame_state_for
.text:0000000000004D08                 CMP             W0, #5
.text:0000000000004D0C                 MOV             W19, W0
.text:0000000000004D10                 B.EQ            loc_4D18
.text:0000000000004D14                 CBNZ            W0, loc_4D88
.text:0000000000004D18 loc_4D18                                ; CODE XREF: _Unwind_ForcedUnwind_Phase2+4C↑j
.text:0000000000004D18                 CMP             W19, #5
.text:0000000000004D1C                 LDR             X2, [X20]
.text:0000000000004D20                 MOV             W0, #1
.text:0000000000004D24                 CSEL            W1, W25, W26, EQ
.text:0000000000004D28                 MOV             X3, X20
.text:0000000000004D2C                 MOV             X4, X21
.text:0000000000004D30                 MOV             X5, X24
.text:0000000000004D34                 BLR             X23
.text:0000000000004D38                 CBNZ            W0, loc_4D88
.text:0000000000004D3C                 CMP             W19, #5
.text:0000000000004D40                 B.EQ            loc_4D90
.text:0000000000004D44                 LDR             X5, [X22,#0x650]
.text:0000000000004D48                 CBNZ            X5, loc_4D5C
.text:0000000000004D4C loc_4D4C                                ; CODE XREF: _Unwind_ForcedUnwind_Phase2+C0↓j
.text:0000000000004D4C                 MOV             X0, X21
.text:0000000000004D50                 MOV             X1, X22
.text:0000000000004D54                 BL              uw_update_context
.text:0000000000004D58                 B               loc_4CFC
.text:0000000000004D5C ; ---------------------------------------------------------------------------
.text:0000000000004D5C loc_4D5C                                ; CODE XREF: _Unwind_ForcedUnwind_Phase2+84↑j
.text:0000000000004D5C                 LDR             X2, [X20]
.text:0000000000004D60                 MOV             W0, #1
.text:0000000000004D64                 MOV             W1, #0xA
.text:0000000000004D68                 MOV             X3, X20
.text:0000000000004D6C                 MOV             X4, X21
.text:0000000000004D70                 BLR             X5
.text:0000000000004D74                 CMP             W0, #7
.text:0000000000004D78                 MOV             W19, W0
.text:0000000000004D7C                 B.EQ            loc_4D90
.text:0000000000004D80                 CMP             W0, #8
.text:0000000000004D84                 B.EQ            loc_4D4C
.text:0000000000004D88 loc_4D88                                ; CODE XREF: _Unwind_ForcedUnwind_Phase2+50↑j
.text:0000000000004D88                                         ; _Unwind_ForcedUnwind_Phase2+74↑j
.text:0000000000004D88                 MOV             W0, #2
.text:0000000000004D8C                 B               loc_4D94
.text:0000000000004D90 ; ---------------------------------------------------------------------------
.text:0000000000004D90 loc_4D90                                ; CODE XREF: _Unwind_ForcedUnwind_Phase2+7C↑j
.text:0000000000004D90                                         ; _Unwind_ForcedUnwind_Phase2+B8↑j
.text:0000000000004D90                 MOV             W0, W19
.text:0000000000004D94 loc_4D94                                ; CODE XREF: _Unwind_ForcedUnwind_Phase2+C8↑j
.text:0000000000004D94                 LDP             X19, X20, [SP,#0x6D0+var_6C0]
.text:0000000000004D98                 LDP             X21, X22, [SP,#0x6D0+var_6B0]
.text:0000000000004D9C                 LDP             X23, X24, [SP,#0x6D0+var_6A0]
.text:0000000000004DA0                 LDP             X25, X26, [SP,#0x6D0+var_690]
.text:0000000000004DA4                 LDP             X29, X30, [SP+0x6D0+var_6D0],#0x50
.text:0000000000004DA8                 ADD             SP, SP, #0x680
.text:0000000000004DAC                 RET
.text:0000000000004DAC ; } // starts at 4CC4
.text:0000000000004DAC ; End of function _Unwind_ForcedUnwind_Phase2
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0 ; Attributes: bp-based frame fpd=0xA70
.text:0000000000004DB0                 EXPORT __frame_state_for
.text:0000000000004DB0 __frame_state_for                       ; DATA XREF: LOAD:00000000000009E8↑o
.text:0000000000004DB0 var_A70         = -0xA70
.text:0000000000004DB0 var_A60         = -0xA60
.text:0000000000004DB0 var_A50         = -0xA50
.text:0000000000004DB0 var_58          = -0x58
.text:0000000000004DB0 var_50          = -0x50
.text:0000000000004DB0 var_40          = -0x40
.text:0000000000004DB0 var_18          = -0x18
.text:0000000000004DB0 var_8           = -8
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 SUB             SP, SP, #0xA40
.text:0000000000004DB4                 MOV             X2, #0x3C0 ; n
.text:0000000000004DB8                 STP             X29, X30, [SP,#0xA40+var_A70]!
.text:0000000000004DBC                 MOV             X29, SP
.text:0000000000004DC0                 STP             X19, X20, [SP,#0xA70+var_A60]
.text:0000000000004DC4                 ADD             X20, X29, #0x30 ; '0'
.text:0000000000004DC8                 STR             X21, [SP,#0xA70+var_A50]
.text:0000000000004DCC                 MOV             X19, X1
.text:0000000000004DD0                 MOV             X21, X0
.text:0000000000004DD4                 MOV             W1, #0  ; c
.text:0000000000004DD8                 MOV             X0, X20 ; s
.text:0000000000004DDC                 ADD             X21, X21, #1
.text:0000000000004DE0                 BL              .memset
.text:0000000000004DE4                 STR             X21, [X20,#0x318]
.text:0000000000004DE8                 MOV             X0, #0x4000000000000000
.text:0000000000004DEC                 ADD             X21, X29, #0x3F0
.text:0000000000004DF0                 STR             X0, [X20,#0x340]
.text:0000000000004DF4                 MOV             X1, X21
.text:0000000000004DF8                 MOV             X0, X20
.text:0000000000004DFC                 BL              uw_frame_state_for
.text:0000000000004E00                 MOV             X1, #0
.text:0000000000004E04                 CBNZ            W0, loc_4E8C
.text:0000000000004E08                 LDR             W0, [X29,#0xA70+var_40]
.text:0000000000004E0C                 CMP             W0, #2
.text:0000000000004E10                 B.EQ            loc_4E8C
.text:0000000000004E14                 ADD             X0, X21, #8
.text:0000000000004E18                 ADD             X2, X19, #0x334
.text:0000000000004E1C                 ADD             X1, X19, #0x20 ; ' '
.text:0000000000004E20                 ADD             X21, X21, #0x628
.text:0000000000004E24 loc_4E24                                ; CODE XREF: __frame_state_for+AC↓j
.text:0000000000004E24                 LDRB            W3, [X0]
.text:0000000000004E28                 STRB            W3, [X2]
.text:0000000000004E2C                 CMP             W3, #1
.text:0000000000004E30                 B.EQ            loc_4E3C
.text:0000000000004E34                 CMP             W3, #2
.text:0000000000004E38                 B.NE            loc_4E48
.text:0000000000004E3C loc_4E3C                                ; CODE XREF: __frame_state_for+80↑j
.text:0000000000004E3C                 LDUR            X3, [X0,#-8]
.text:0000000000004E40                 STR             X3, [X1]
.text:0000000000004E44                 B               loc_4E4C
.text:0000000000004E48 ; ---------------------------------------------------------------------------
.text:0000000000004E48 loc_4E48                                ; CODE XREF: __frame_state_for+88↑j
.text:0000000000004E48                 STR             XZR, [X1]
.text:0000000000004E4C loc_4E4C                                ; CODE XREF: __frame_state_for+94↑j
.text:0000000000004E4C                 ADD             X0, X0, #0x10
.text:0000000000004E50                 ADD             X2, X2, #1
.text:0000000000004E54                 CMP             X0, X21
.text:0000000000004E58                 ADD             X1, X1, #8
.text:0000000000004E5C                 B.NE            loc_4E24
.text:0000000000004E60                 LDR             X0, [X29,#0xA70+var_58]
.text:0000000000004E64                 MOV             X1, X19
.text:0000000000004E68                 STR             X0, [X19,#0x10]
.text:0000000000004E6C                 LDR             X0, [X29,#0xA70+var_50]
.text:0000000000004E70                 STRH            W0, [X19,#0x330]
.text:0000000000004E74                 LDR             X0, [X29,#0xA70+var_18]
.text:0000000000004E78                 STRH            W0, [X19,#0x332]
.text:0000000000004E7C                 LDR             X0, [X20,#0x350]
.text:0000000000004E80                 STR             X0, [X19,#0x18]
.text:0000000000004E84                 LDR             X0, [X29,#0xA70+var_8]
.text:0000000000004E88                 STR             X0, [X19,#8]
.text:0000000000004E8C loc_4E8C                                ; CODE XREF: __frame_state_for+54↑j
.text:0000000000004E8C                                         ; __frame_state_for+60↑j
.text:0000000000004E8C                 LDP             X19, X20, [SP,#0xA70+var_A60]
.text:0000000000004E90                 LDR             X21, [SP,#0xA70+var_A50]
.text:0000000000004E94                 LDP             X29, X30, [SP+0xA70+var_A70],#0x30
.text:0000000000004E98                 MOV             X0, X1
.text:0000000000004E9C                 ADD             SP, SP, #0xA40
.text:0000000000004EA0                 RET
.text:0000000000004EA0 ; } // starts at 4DB0
.text:0000000000004EA0 ; End of function __frame_state_for
.text:0000000000004EA4 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA4 _Unwind_DebugHook                       ; CODE XREF: _Unwind_RaiseException+124↓p
.text:0000000000004EA4                                         ; _Unwind_ForcedUnwind+A8↓p ...
.text:0000000000004EA4 ; __unwind {
.text:0000000000004EA4                 RET
.text:0000000000004EA4 ; } // starts at 4EA4
.text:0000000000004EA4 ; End of function _Unwind_DebugHook
.text:0000000000004EA8 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA8 ; Attributes: bp-based frame fpd=0xED0
.text:0000000000004EA8                 EXPORT _Unwind_RaiseException
.text:0000000000004EA8 _Unwind_RaiseException                  ; CODE XREF: ._Unwind_RaiseException+C↑j
.text:0000000000004EA8                                         ; DATA XREF: LOAD:0000000000000940↑o ...
.text:0000000000004EA8 var_ED0         = -0xED0
.text:0000000000004EA8 var_EC8         = -0xEC8
.text:0000000000004EA8 var_EC0         = -0xEC0
.text:0000000000004EA8 var_EB0         = -0xEB0
.text:0000000000004EA8 var_EA0         = -0xEA0
.text:0000000000004EA8 var_E90         = -0xE90
.text:0000000000004EA8 var_E80         = -0xE80
.text:0000000000004EA8 var_E70         = -0xE70
.text:0000000000004EA8 var_E60         = -0xE60
.text:0000000000004EA8 var_E50         = -0xE50
.text:0000000000004EA8 var_E40         = -0xE40
.text:0000000000004EA8 var_E30         = -0xE30
.text:0000000000004EA8 var_E20         = -0xE20
.text:0000000000004EA8 var_E08         = -0xE08
.text:0000000000004EA8 ; __unwind {
.text:0000000000004EA8                 SUB             SP, SP, #0xE10
.text:0000000000004EAC                 STP             X29, X30, [SP,#0xE10+var_ED0]!
.text:0000000000004EB0                 MOV             X29, SP
.text:0000000000004EB4                 STP             X21, X22, [SP,#0xED0+var_E90]
.text:0000000000004EB8                 STP             D8, D9, [SP,#0xED0+var_E50]
.text:0000000000004EBC                 ADD             X21, X29, #0xD0
.text:0000000000004EC0                 STP             D10, D11, [SP,#0xED0+var_E40]
.text:0000000000004EC4                 STP             X0, X1, [SP,#0xED0+var_EC0]
.text:0000000000004EC8                 STP             D12, D13, [SP,#0xED0+var_E30]
.text:0000000000004ECC                 STP             X2, X3, [SP,#0xED0+var_EB0]
.text:0000000000004ED0                 STP             D14, D15, [SP,#0xED0+var_E20]
.text:0000000000004ED4                 STP             X19, X20, [SP,#0xED0+var_EA0]
.text:0000000000004ED8                 MOV             X2, X30
.text:0000000000004EDC                 ADD             X1, X29, #0xED0
.text:0000000000004EE0                 MOV             X20, X0
.text:0000000000004EE4                 MOV             X0, X21
.text:0000000000004EE8                 STP             X23, X24, [SP,#0xED0+var_E80]
.text:0000000000004EEC                 STP             X25, X26, [SP,#0xED0+var_E70]
.text:0000000000004EF0                 STP             X27, X28, [SP,#0xED0+var_E60]
.text:0000000000004EF4                 ADD             X19, X29, #0x490
.text:0000000000004EF8                 BL              uw_init_context_1
.text:0000000000004EFC                 MOV             X0, X19 ; dest
.text:0000000000004F00                 MOV             X1, X21 ; src
.text:0000000000004F04                 MOV             X2, #0x3C0 ; n
.text:0000000000004F08                 ADD             X22, X29, #0x850
.text:0000000000004F0C                 BL              .memcpy
.text:0000000000004F10 loc_4F10                                ; CODE XREF: _Unwind_RaiseException+9C↓j
.text:0000000000004F10                 MOV             X0, X19
.text:0000000000004F14                 MOV             X1, X22
.text:0000000000004F18                 BL              uw_frame_state_for
.text:0000000000004F1C                 CMP             W0, #5
.text:0000000000004F20                 B.EQ            loc_4FDC
.text:0000000000004F24                 CBZ             W0, loc_4F30
.text:0000000000004F28 loc_4F28                                ; CODE XREF: _Unwind_RaiseException+C8↓j
.text:0000000000004F28                 MOV             W0, #3
.text:0000000000004F2C                 B               loc_4FDC
.text:0000000000004F30 ; ---------------------------------------------------------------------------
.text:0000000000004F30 loc_4F30                                ; CODE XREF: _Unwind_RaiseException+7C↑j
.text:0000000000004F30                 LDR             X5, [X22,#0x650]
.text:0000000000004F34                 CBNZ            X5, loc_4F48
.text:0000000000004F38 loc_4F38                                ; CODE XREF: _Unwind_RaiseException+C4↓j
.text:0000000000004F38                 MOV             X0, X19
.text:0000000000004F3C                 MOV             X1, X22
.text:0000000000004F40                 BL              uw_update_context
.text:0000000000004F44                 B               loc_4F10
.text:0000000000004F48 ; ---------------------------------------------------------------------------
.text:0000000000004F48 loc_4F48                                ; CODE XREF: _Unwind_RaiseException+8C↑j
.text:0000000000004F48                 MOV             W0, #1
.text:0000000000004F4C                 LDR             X2, [X20]
.text:0000000000004F50                 MOV             W1, W0
.text:0000000000004F54                 MOV             X3, X20
.text:0000000000004F58                 MOV             X4, X19
.text:0000000000004F5C                 BLR             X5
.text:0000000000004F60                 CMP             W0, #6
.text:0000000000004F64                 B.EQ            loc_4F74
.text:0000000000004F68                 CMP             W0, #8
.text:0000000000004F6C                 B.EQ            loc_4F38
.text:0000000000004F70                 B               loc_4F28
.text:0000000000004F74 ; ---------------------------------------------------------------------------
.text:0000000000004F74 loc_4F74                                ; CODE XREF: _Unwind_RaiseException+BC↑j
.text:0000000000004F74                 STR             XZR, [X20,#0x10]
.text:0000000000004F78                 MOV             X0, X19
.text:0000000000004F7C                 BL              ._Unwind_GetCFA
.text:0000000000004F80                 LDR             X1, [X19,#0x340]
.text:0000000000004F84                 MOV             X2, #0x3C0 ; n
.text:0000000000004F88                 SUB             X0, X0, X1,LSR#63
.text:0000000000004F8C                 MOV             X1, X21 ; src
.text:0000000000004F90                 STR             X0, [X20,#0x18]
.text:0000000000004F94                 MOV             X0, X19 ; dest
.text:0000000000004F98                 BL              .memcpy
.text:0000000000004F9C                 MOV             X0, X20
.text:0000000000004FA0                 MOV             X1, X19
.text:0000000000004FA4                 BL              _Unwind_RaiseException_Phase2
.text:0000000000004FA8                 CMP             W0, #7
.text:0000000000004FAC                 B.NE            loc_4FDC
.text:0000000000004FB0                 MOV             X1, X19
.text:0000000000004FB4                 MOV             X0, X21
.text:0000000000004FB8                 BL              uw_install_context_1
.text:0000000000004FBC                 LDR             X20, [X19,#0x318]
.text:0000000000004FC0                 STR             X0, [X29,#0xED0+var_E08]
.text:0000000000004FC4                 LDR             X0, [X19,#0x310]
.text:0000000000004FC8                 MOV             X1, X20
.text:0000000000004FCC                 BL              _Unwind_DebugHook
.text:0000000000004FD0                 STR             X20, [SP,#0xED0+var_EC8]
.text:0000000000004FD4                 LDR             X4, [X29,#0xED0+var_E08]
.text:0000000000004FD8                 B               loc_4FE0
.text:0000000000004FDC ; ---------------------------------------------------------------------------
.text:0000000000004FDC loc_4FDC                                ; CODE XREF: _Unwind_RaiseException+78↑j
.text:0000000000004FDC                                         ; _Unwind_RaiseException+84↑j ...
.text:0000000000004FDC                 MOV             X4, #0
.text:0000000000004FE0 loc_4FE0                                ; CODE XREF: _Unwind_RaiseException+130↑j
.text:0000000000004FE0                 LDP             X2, X3, [SP,#0xED0+var_EB0]
.text:0000000000004FE4                 LDP             D8, D9, [SP,#0xED0+var_E50]
.text:0000000000004FE8                 LDP             X19, X20, [SP,#0xED0+var_EA0]
.text:0000000000004FEC                 LDP             D10, D11, [SP,#0xED0+var_E40]
.text:0000000000004FF0                 LDP             X21, X22, [SP,#0xED0+var_E90]
.text:0000000000004FF4                 LDP             D12, D13, [SP,#0xED0+var_E30]
.text:0000000000004FF8                 LDP             X23, X24, [SP,#0xED0+var_E80]
.text:0000000000004FFC                 LDP             D14, D15, [SP,#0xED0+var_E20]
.text:0000000000005000                 LDP             X25, X26, [SP,#0xED0+var_E70]
.text:0000000000005004                 LDP             X27, X28, [SP,#0xED0+var_E60]
.text:0000000000005008                 LDP             X0, X1, [SP,#0xED0+var_EC0]
.text:000000000000500C                 LDP             X29, X30, [SP+0xED0+var_ED0],#0xC0
.text:0000000000005010                 MOV             X16, SP
.text:0000000000005014                 ADD             SP, SP, X4
.text:0000000000005018                 ADD             SP, SP, #0xE10
.text:000000000000501C                 RET
.text:000000000000501C ; } // starts at 4EA8
.text:000000000000501C ; End of function _Unwind_RaiseException
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020 ; Attributes: bp-based frame fpd=0x850
.text:0000000000005020                 EXPORT _Unwind_ForcedUnwind
.text:0000000000005020 _Unwind_ForcedUnwind                    ; DATA XREF: LOAD:0000000000000898↑o
.text:0000000000005020 var_850         = -0x850
.text:0000000000005020 var_848         = -0x848
.text:0000000000005020 var_840         = -0x840
.text:0000000000005020 var_830         = -0x830
.text:0000000000005020 var_820         = -0x820
.text:0000000000005020 var_810         = -0x810
.text:0000000000005020 var_800         = -0x800
.text:0000000000005020 var_7F0         = -0x7F0
.text:0000000000005020 var_7E0         = -0x7E0
.text:0000000000005020 var_7D0         = -0x7D0
.text:0000000000005020 var_7C0         = -0x7C0
.text:0000000000005020 var_7B0         = -0x7B0
.text:0000000000005020 var_7A0         = -0x7A0
.text:0000000000005020 var_788         = -0x788
.text:0000000000005020 var_B0          = -0xB0
.text:0000000000005020 var_A8          = -0xA8
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 SUB             SP, SP, #0x790
.text:0000000000005024                 STP             X29, X30, [SP,#0x790+var_850]!
.text:0000000000005028                 MOV             X29, SP
.text:000000000000502C                 STP             X19, X20, [SP,#0x850+var_820]
.text:0000000000005030                 STP             D8, D9, [SP,#0x850+var_7D0]
.text:0000000000005034                 ADD             X20, X29, #0xD0
.text:0000000000005038                 STP             D10, D11, [SP,#0x850+var_7C0]
.text:000000000000503C                 STP             X2, X3, [SP,#0x850+var_830]
.text:0000000000005040                 STP             D12, D13, [SP,#0x850+var_7B0]
.text:0000000000005044                 STP             X0, X1, [SP,#0x850+var_840]
.text:0000000000005048                 STP             D14, D15, [SP,#0x850+var_7A0]
.text:000000000000504C                 STP             X21, X22, [SP,#0x850+var_810]
.text:0000000000005050                 STP             X23, X24, [SP,#0x850+var_800]
.text:0000000000005054                 MOV             X21, X0
.text:0000000000005058                 MOV             X23, X1
.text:000000000000505C                 MOV             X22, X2
.text:0000000000005060                 MOV             X0, X20
.text:0000000000005064                 MOV             X2, X30
.text:0000000000005068                 ADD             X1, X29, #0x850
.text:000000000000506C                 ADD             X19, X29, #0x490
.text:0000000000005070                 STP             X25, X26, [SP,#0x850+var_7F0]
.text:0000000000005074                 STP             X27, X28, [SP,#0x850+var_7E0]
.text:0000000000005078                 BL              uw_init_context_1
.text:000000000000507C                 MOV             X1, X20 ; src
.text:0000000000005080                 MOV             X2, #0x3C0 ; n
.text:0000000000005084                 MOV             X0, X19 ; dest
.text:0000000000005088                 BL              .memcpy
.text:000000000000508C                 STR             X23, [X21,#0x10]
.text:0000000000005090                 STR             X22, [X21,#0x18]
.text:0000000000005094                 MOV             X0, X21
.text:0000000000005098                 MOV             X1, X19
.text:000000000000509C                 BL              _Unwind_ForcedUnwind_Phase2
.text:00000000000050A0                 CMP             W0, #7
.text:00000000000050A4                 MOV             X4, #0
.text:00000000000050A8                 B.NE            loc_50D4
.text:00000000000050AC                 MOV             X1, X19
.text:00000000000050B0                 MOV             X0, X20
.text:00000000000050B4                 BL              uw_install_context_1
.text:00000000000050B8                 LDR             X19, [X29,#0x850+var_A8]
.text:00000000000050BC                 STR             X0, [X29,#0x850+var_788]
.text:00000000000050C0                 LDR             X0, [X29,#0x850+var_B0]
.text:00000000000050C4                 MOV             X1, X19
.text:00000000000050C8                 BL              _Unwind_DebugHook
.text:00000000000050CC                 STR             X19, [SP,#0x850+var_848]
.text:00000000000050D0                 LDR             X4, [X29,#0x850+var_788]
.text:00000000000050D4 loc_50D4                                ; CODE XREF: _Unwind_ForcedUnwind+88↑j
.text:00000000000050D4                 LDP             X2, X3, [SP,#0x850+var_830]
.text:00000000000050D8                 LDP             D8, D9, [SP,#0x850+var_7D0]
.text:00000000000050DC                 LDP             X19, X20, [SP,#0x850+var_820]
.text:00000000000050E0                 LDP             D10, D11, [SP,#0x850+var_7C0]
.text:00000000000050E4                 LDP             X21, X22, [SP,#0x850+var_810]
.text:00000000000050E8                 LDP             D12, D13, [SP,#0x850+var_7B0]
.text:00000000000050EC                 LDP             X23, X24, [SP,#0x850+var_800]
.text:00000000000050F0                 LDP             D14, D15, [SP,#0x850+var_7A0]
.text:00000000000050F4                 LDP             X25, X26, [SP,#0x850+var_7F0]
.text:00000000000050F8                 LDP             X27, X28, [SP,#0x850+var_7E0]
.text:00000000000050FC                 LDP             X0, X1, [SP,#0x850+var_840]
.text:0000000000005100                 LDP             X29, X30, [SP+0x850+var_850],#0xC0
.text:0000000000005104                 MOV             X16, SP
.text:0000000000005108                 ADD             SP, SP, X4
.text:000000000000510C                 ADD             SP, SP, #0x790
.text:0000000000005110                 RET
.text:0000000000005110 ; } // starts at 5020
.text:0000000000005110 ; End of function _Unwind_ForcedUnwind
.text:0000000000005114 ; =============== S U B R O U T I N E =======================================
.text:0000000000005114 ; Attributes: noreturn bp-based frame fpd=0x850
.text:0000000000005114                 EXPORT _Unwind_Resume
.text:0000000000005114 _Unwind_Resume                          ; CODE XREF: ._Unwind_Resume+C↑j
.text:0000000000005114                                         ; DATA XREF: LOAD:0000000000000B98↑o ...
.text:0000000000005114 var_850         = -0x850
.text:0000000000005114 var_848         = -0x848
.text:0000000000005114 var_840         = -0x840
.text:0000000000005114 var_830         = -0x830
.text:0000000000005114 var_820         = -0x820
.text:0000000000005114 var_810         = -0x810
.text:0000000000005114 var_800         = -0x800
.text:0000000000005114 var_7F0         = -0x7F0
.text:0000000000005114 var_7E0         = -0x7E0
.text:0000000000005114 var_7D0         = -0x7D0
.text:0000000000005114 var_7C0         = -0x7C0
.text:0000000000005114 var_7B0         = -0x7B0
.text:0000000000005114 var_7A0         = -0x7A0
.text:0000000000005114 var_788         = -0x788
.text:0000000000005114 var_B0          = -0xB0
.text:0000000000005114 var_A8          = -0xA8
.text:0000000000005114 ; __unwind {
.text:0000000000005114                 SUB             SP, SP, #0x790
.text:0000000000005118                 STP             X29, X30, [SP,#0x790+var_850]!
.text:000000000000511C                 MOV             X29, SP
.text:0000000000005120                 STP             X19, X20, [SP,#0x850+var_820]
.text:0000000000005124                 STP             D8, D9, [SP,#0x850+var_7D0]
.text:0000000000005128                 ADD             X20, X29, #0xD0
.text:000000000000512C                 STP             D10, D11, [SP,#0x850+var_7C0]
.text:0000000000005130                 STP             X0, X1, [SP,#0x850+var_840]
.text:0000000000005134                 STP             D12, D13, [SP,#0x850+var_7B0]
.text:0000000000005138                 STP             X2, X3, [SP,#0x850+var_830]
.text:000000000000513C                 STP             D14, D15, [SP,#0x850+var_7A0]
.text:0000000000005140                 MOV             X2, X30
.text:0000000000005144                 ADD             X1, X29, #0x850
.text:0000000000005148                 STP             X21, X22, [SP,#0x850+var_810]
.text:000000000000514C                 MOV             X21, X0
.text:0000000000005150                 MOV             X0, X20
.text:0000000000005154                 STP             X23, X24, [SP,#0x850+var_800]
.text:0000000000005158                 STP             X25, X26, [SP,#0x850+var_7F0]
.text:000000000000515C                 STP             X27, X28, [SP,#0x850+var_7E0]
.text:0000000000005160                 ADD             X19, X29, #0x490
.text:0000000000005164                 BL              uw_init_context_1
.text:0000000000005168                 MOV             X0, X19 ; dest
.text:000000000000516C                 MOV             X1, X20 ; src
.text:0000000000005170                 MOV             X2, #0x3C0 ; n
.text:0000000000005174                 BL              .memcpy
.text:0000000000005178                 LDR             X0, [X21,#0x10]
.text:000000000000517C                 CBNZ            X0, loc_5190
.text:0000000000005180                 MOV             X0, X21
.text:0000000000005184                 MOV             X1, X19
.text:0000000000005188                 BL              _Unwind_RaiseException_Phase2
.text:000000000000518C                 B               loc_519C
.text:0000000000005190 ; ---------------------------------------------------------------------------
.text:0000000000005190 loc_5190                                ; CODE XREF: _Unwind_Resume+68↑j
.text:0000000000005190                 MOV             X0, X21
.text:0000000000005194                 MOV             X1, X19
.text:0000000000005198                 BL              _Unwind_ForcedUnwind_Phase2
.text:000000000000519C loc_519C                                ; CODE XREF: _Unwind_Resume+78↑j
.text:000000000000519C                 CMP             W0, #7
.text:00000000000051A0                 B.EQ            loc_51A8
.text:00000000000051A4                 BL              .abort
.text:00000000000051A8 ; ---------------------------------------------------------------------------
.text:00000000000051A8 loc_51A8                                ; CODE XREF: _Unwind_Resume+8C↑j
.text:00000000000051A8                 MOV             X1, X19
.text:00000000000051AC                 MOV             X0, X20
.text:00000000000051B0                 BL              uw_install_context_1
.text:00000000000051B4                 LDR             X19, [X29,#0x850+var_A8]
.text:00000000000051B8                 STR             X0, [X29,#0x850+var_788]
.text:00000000000051BC                 LDR             X0, [X29,#0x850+var_B0]
.text:00000000000051C0                 MOV             X1, X19
.text:00000000000051C4                 BL              _Unwind_DebugHook
.text:00000000000051C8                 STR             X19, [SP,#0x850+var_848]
.text:00000000000051CC                 LDR             X4, [X29,#0x850+var_788]
.text:00000000000051D0                 LDP             D8, D9, [SP,#0x850+var_7D0]
.text:00000000000051D4                 LDP             X0, X1, [SP,#0x850+var_840]
.text:00000000000051D8                 LDP             D10, D11, [SP,#0x850+var_7C0]
.text:00000000000051DC                 LDP             X2, X3, [SP,#0x850+var_830]
.text:00000000000051E0                 LDP             D12, D13, [SP,#0x850+var_7B0]
.text:00000000000051E4                 LDP             X19, X20, [SP,#0x850+var_820]
.text:00000000000051E8                 LDP             D14, D15, [SP,#0x850+var_7A0]
.text:00000000000051EC                 LDP             X21, X22, [SP,#0x850+var_810]
.text:00000000000051F0                 LDP             X23, X24, [SP,#0x850+var_800]
.text:00000000000051F4                 LDP             X25, X26, [SP,#0x850+var_7F0]
.text:00000000000051F8                 LDP             X27, X28, [SP,#0x850+var_7E0]
.text:00000000000051FC                 LDP             X29, X30, [SP+0x850+var_850],#0xC0
.text:0000000000005200                 MOV             X16, SP
.text:0000000000005204                 ADD             SP, SP, X4
.text:0000000000005208                 ADD             SP, SP, #0x790
.text:000000000000520C                 RET
.text:000000000000520C ; } // starts at 5114
.text:000000000000520C ; End of function _Unwind_Resume
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210 ; Attributes: noreturn bp-based frame fpd=0x850
.text:0000000000005210                 EXPORT _Unwind_Resume_or_Rethrow
.text:0000000000005210 _Unwind_Resume_or_Rethrow               ; DATA XREF: LOAD:00000000000007F0↑o
.text:0000000000005210 var_850         = -0x850
.text:0000000000005210 var_848         = -0x848
.text:0000000000005210 var_840         = -0x840
.text:0000000000005210 var_830         = -0x830
.text:0000000000005210 var_820         = -0x820
.text:0000000000005210 var_810         = -0x810
.text:0000000000005210 var_800         = -0x800
.text:0000000000005210 var_7F0         = -0x7F0
.text:0000000000005210 var_7E0         = -0x7E0
.text:0000000000005210 var_7D0         = -0x7D0
.text:0000000000005210 var_7C0         = -0x7C0
.text:0000000000005210 var_7B0         = -0x7B0
.text:0000000000005210 var_7A0         = -0x7A0
.text:0000000000005210 var_788         = -0x788
.text:0000000000005210 var_B0          = -0xB0
.text:0000000000005210 var_A8          = -0xA8
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 SUB             SP, SP, #0x790
.text:0000000000005214                 STP             X29, X30, [SP,#0x790+var_850]!
.text:0000000000005218                 MOV             X29, SP
.text:000000000000521C                 STP             D8, D9, [SP,#0x850+var_7D0]
.text:0000000000005220                 STP             X0, X1, [SP,#0x850+var_840]
.text:0000000000005224                 STP             D10, D11, [SP,#0x850+var_7C0]
.text:0000000000005228                 LDR             X1, [X0,#0x10]
.text:000000000000522C                 STP             D12, D13, [SP,#0x850+var_7B0]
.text:0000000000005230                 STP             X2, X3, [SP,#0x850+var_830]
.text:0000000000005234                 STP             D14, D15, [SP,#0x850+var_7A0]
.text:0000000000005238                 STP             X21, X22, [SP,#0x850+var_810]
.text:000000000000523C                 STP             X19, X20, [SP,#0x850+var_820]
.text:0000000000005240                 STP             X23, X24, [SP,#0x850+var_800]
.text:0000000000005244                 STP             X25, X26, [SP,#0x850+var_7F0]
.text:0000000000005248                 STP             X27, X28, [SP,#0x850+var_7E0]
.text:000000000000524C                 MOV             X2, X30
.text:0000000000005250                 MOV             X21, X0
.text:0000000000005254                 CBNZ            X1, loc_5264
.text:0000000000005258                 BL              ._Unwind_RaiseException
.text:000000000000525C                 MOV             X4, #0
.text:0000000000005260                 B               loc_52C8
.text:0000000000005264 ; ---------------------------------------------------------------------------
.text:0000000000005264 loc_5264                                ; CODE XREF: _Unwind_Resume_or_Rethrow+44↑j
.text:0000000000005264                 ADD             X20, X29, #0xD0
.text:0000000000005268                 ADD             X1, X29, #0x850
.text:000000000000526C                 MOV             X0, X20
.text:0000000000005270                 ADD             X19, X29, #0x490
.text:0000000000005274                 BL              uw_init_context_1
.text:0000000000005278                 MOV             X1, X20 ; src
.text:000000000000527C                 MOV             X2, #0x3C0 ; n
.text:0000000000005280                 MOV             X0, X19 ; dest
.text:0000000000005284                 BL              .memcpy
.text:0000000000005288                 MOV             X0, X21
.text:000000000000528C                 MOV             X1, X19
.text:0000000000005290                 BL              _Unwind_ForcedUnwind_Phase2
.text:0000000000005294                 CMP             W0, #7
.text:0000000000005298                 B.EQ            loc_52A0
.text:000000000000529C                 BL              .abort
.text:00000000000052A0 ; ---------------------------------------------------------------------------
.text:00000000000052A0 loc_52A0                                ; CODE XREF: _Unwind_Resume_or_Rethrow+88↑j
.text:00000000000052A0                 MOV             X1, X19
.text:00000000000052A4                 MOV             X0, X20
.text:00000000000052A8                 BL              uw_install_context_1
.text:00000000000052AC                 LDR             X19, [X29,#0x850+var_A8]
.text:00000000000052B0                 STR             X0, [X29,#0x850+var_788]
.text:00000000000052B4                 LDR             X0, [X29,#0x850+var_B0]
.text:00000000000052B8                 MOV             X1, X19
.text:00000000000052BC                 BL              _Unwind_DebugHook
.text:00000000000052C0                 STR             X19, [SP,#0x850+var_848]
.text:00000000000052C4                 LDR             X4, [X29,#0x850+var_788]
.text:00000000000052C8 loc_52C8                                ; CODE XREF: _Unwind_Resume_or_Rethrow+50↑j
.text:00000000000052C8                 LDP             X2, X3, [SP,#0x850+var_830]
.text:00000000000052CC                 LDP             D8, D9, [SP,#0x850+var_7D0]
.text:00000000000052D0                 LDP             X19, X20, [SP,#0x850+var_820]
.text:00000000000052D4                 LDP             D10, D11, [SP,#0x850+var_7C0]
.text:00000000000052D8                 LDP             X21, X22, [SP,#0x850+var_810]
.text:00000000000052DC                 LDP             D12, D13, [SP,#0x850+var_7B0]
.text:00000000000052E0                 LDP             X23, X24, [SP,#0x850+var_800]
.text:00000000000052E4                 LDP             D14, D15, [SP,#0x850+var_7A0]
.text:00000000000052E8                 LDP             X25, X26, [SP,#0x850+var_7F0]
.text:00000000000052EC                 LDP             X27, X28, [SP,#0x850+var_7E0]
.text:00000000000052F0                 LDP             X0, X1, [SP,#0x850+var_840]
.text:00000000000052F4                 LDP             X29, X30, [SP+0x850+var_850],#0xC0
.text:00000000000052F8                 MOV             X16, SP
.text:00000000000052FC                 ADD             SP, SP, X4
.text:0000000000005300                 ADD             SP, SP, #0x790
.text:0000000000005304                 RET
.text:0000000000005304 ; } // starts at 5210
.text:0000000000005304 ; End of function _Unwind_Resume_or_Rethrow
.text:0000000000005308 ; =============== S U B R O U T I N E =======================================
.text:0000000000005308 ; Attributes: bp-based frame
.text:0000000000005308                 EXPORT _Unwind_DeleteException
.text:0000000000005308 _Unwind_DeleteException                 ; DATA XREF: LOAD:0000000000000670↑o
.text:0000000000005308 var_s0          =  0
.text:0000000000005308 ; __unwind {
.text:0000000000005308                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:000000000000530C                 MOV             X29, SP
.text:0000000000005310                 LDR             X2, [X0,#8]
.text:0000000000005314                 CBZ             X2, loc_5324
.text:0000000000005318                 MOV             X1, X0
.text:000000000000531C                 MOV             W0, #1
.text:0000000000005320                 BLR             X2
.text:0000000000005324 loc_5324                                ; CODE XREF: _Unwind_DeleteException+C↑j
.text:0000000000005324                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000005328                 RET
.text:0000000000005328 ; } // starts at 5308
.text:0000000000005328 ; End of function _Unwind_DeleteException
.text:000000000000532C ; =============== S U B R O U T I N E =======================================
.text:000000000000532C ; Attributes: bp-based frame fpd=0xAE0
.text:000000000000532C                 EXPORT _Unwind_Backtrace
.text:000000000000532C _Unwind_Backtrace                       ; DATA XREF: LOAD:0000000000000988↑o
.text:000000000000532C var_AE0         = -0xAE0
.text:000000000000532C var_AD0         = -0xAD0
.text:000000000000532C var_AC0         = -0xAC0
.text:000000000000532C var_AB0         = -0xAB0
.text:000000000000532C var_AA0         = -0xAA0
.text:000000000000532C var_A90         = -0xA90
.text:000000000000532C var_A80         = -0xA80
.text:000000000000532C var_A70         = -0xA70
.text:000000000000532C var_A60         = -0xA60
.text:000000000000532C var_A50         = -0xA50
.text:000000000000532C ; __unwind {
.text:000000000000532C                 SUB             SP, SP, #0xA40
.text:0000000000005330                 MOV             X2, X30
.text:0000000000005334                 STP             X29, X30, [SP,#0xA40+var_AE0]!
.text:0000000000005338                 MOV             X29, SP
.text:000000000000533C                 STP             X19, X20, [SP,#0xAE0+var_AD0]
.text:0000000000005340                 STP             D8, D9, [SP,#0xAE0+var_A80]
.text:0000000000005344                 ADD             X20, X29, #0xA0
.text:0000000000005348                 STP             D10, D11, [SP,#0xAE0+var_A70]
.text:000000000000534C                 STP             X21, X22, [SP,#0xAE0+var_AC0]
.text:0000000000005350                 STP             D12, D13, [SP,#0xAE0+var_A60]
.text:0000000000005354                 STP             X23, X24, [SP,#0xAE0+var_AB0]
.text:0000000000005358                 STP             D14, D15, [SP,#0xAE0+var_A50]
.text:000000000000535C                 MOV             X22, X0
.text:0000000000005360                 MOV             X23, X1
.text:0000000000005364                 MOV             X0, X20
.text:0000000000005368                 ADD             X1, X29, #0xAE0
.text:000000000000536C                 ADD             X21, X29, #0x460
.text:0000000000005370                 STP             X25, X26, [SP,#0xAE0+var_AA0]
.text:0000000000005374                 STP             X27, X28, [SP,#0xAE0+var_A90]
.text:0000000000005378                 BL              uw_init_context_1
.text:000000000000537C loc_537C                                ; CODE XREF: _Unwind_Backtrace+90↓j
.text:000000000000537C                 MOV             X0, X20
.text:0000000000005380                 MOV             X1, X21
.text:0000000000005384                 BL              uw_frame_state_for
.text:0000000000005388                 CMP             W0, #5
.text:000000000000538C                 MOV             W19, W0
.text:0000000000005390                 B.EQ            loc_5398
.text:0000000000005394                 CBNZ            W0, loc_53C0
.text:0000000000005398 loc_5398                                ; CODE XREF: _Unwind_Backtrace+64↑j
.text:0000000000005398                 MOV             X0, X20
.text:000000000000539C                 MOV             X1, X23
.text:00000000000053A0                 BLR             X22
.text:00000000000053A4                 CBNZ            W0, loc_53C0
.text:00000000000053A8                 CMP             W19, #5
.text:00000000000053AC                 B.EQ            loc_53C8
.text:00000000000053B0                 MOV             X0, X20
.text:00000000000053B4                 MOV             X1, X21
.text:00000000000053B8                 BL              uw_update_context
.text:00000000000053BC                 B               loc_537C
.text:00000000000053C0 ; ---------------------------------------------------------------------------
.text:00000000000053C0 loc_53C0                                ; CODE XREF: _Unwind_Backtrace+68↑j
.text:00000000000053C0                                         ; _Unwind_Backtrace+78↑j
.text:00000000000053C0                 MOV             W0, #3
.text:00000000000053C4                 B               loc_53CC
.text:00000000000053C8 ; ---------------------------------------------------------------------------
.text:00000000000053C8 loc_53C8                                ; CODE XREF: _Unwind_Backtrace+80↑j
.text:00000000000053C8                 MOV             W0, W19
.text:00000000000053CC loc_53CC                                ; CODE XREF: _Unwind_Backtrace+98↑j
.text:00000000000053CC                 LDP             X19, X20, [SP,#0xAE0+var_AD0]
.text:00000000000053D0                 LDP             D8, D9, [SP,#0xAE0+var_A80]
.text:00000000000053D4                 LDP             X21, X22, [SP,#0xAE0+var_AC0]
.text:00000000000053D8                 LDP             D10, D11, [SP,#0xAE0+var_A70]
.text:00000000000053DC                 LDP             X23, X24, [SP,#0xAE0+var_AB0]
.text:00000000000053E0                 LDP             D12, D13, [SP,#0xAE0+var_A60]
.text:00000000000053E4                 LDP             X25, X26, [SP,#0xAE0+var_AA0]
.text:00000000000053E8                 LDP             D14, D15, [SP,#0xAE0+var_A50]
.text:00000000000053EC                 LDP             X27, X28, [SP,#0xAE0+var_A90]
.text:00000000000053F0                 LDP             X29, X30, [SP+0xAE0+var_AE0],#0xA0
.text:00000000000053F4                 ADD             SP, SP, #0xA40
.text:00000000000053F8                 RET
.text:00000000000053F8 ; } // starts at 532C
.text:00000000000053F8 ; End of function _Unwind_Backtrace
.text:00000000000053FC ; =============== S U B R O U T I N E =======================================
.text:00000000000053FC read_uleb128_0                          ; CODE XREF: read_encoded_value_with_base_0+64↓p
.text:00000000000053FC                                         ; get_cie_encoding+6C↓p ...
.text:00000000000053FC ; __unwind {
.text:00000000000053FC                 MOV             X2, #0
.text:0000000000005400                 MOV             W3, #0
.text:0000000000005404 loc_5404                                ; CODE XREF: read_uleb128_0+1C↓j
.text:0000000000005404                 LDRB            W5, [X0],#1
.text:0000000000005408                 AND             X4, X5, #0x7F
.text:000000000000540C                 LSL             X4, X4, X3
.text:0000000000005410                 ADD             W3, W3, #7
.text:0000000000005414                 ORR             X2, X2, X4
.text:0000000000005418                 TBNZ            W5, #7, loc_5404
.text:000000000000541C                 STR             X2, [X1]
.text:0000000000005420                 RET
.text:0000000000005420 ; } // starts at 53FC
.text:0000000000005420 ; End of function read_uleb128_0
.text:0000000000005424 ; =============== S U B R O U T I N E =======================================
.text:0000000000005424 read_sleb128_0                          ; CODE XREF: read_encoded_value_with_base_0+74↓p
.text:0000000000005424                                         ; get_cie_encoding+74↓p
.text:0000000000005424 ; __unwind {
.text:0000000000005424                 MOV             X2, #0
.text:0000000000005428                 MOV             W3, #0
.text:000000000000542C loc_542C                                ; CODE XREF: read_sleb128_0+1C↓j
.text:000000000000542C                 LDRB            W4, [X0],#1
.text:0000000000005430                 AND             X5, X4, #0x7F
.text:0000000000005434                 LSL             X5, X5, X3
.text:0000000000005438                 ADD             W3, W3, #7
.text:000000000000543C                 ORR             X2, X2, X5
.text:0000000000005440                 TBNZ            W4, #7, loc_542C
.text:0000000000005444                 CMP             W3, #0x3F ; '?'
.text:0000000000005448                 B.HI            loc_545C
.text:000000000000544C                 TBZ             W4, #6, loc_545C
.text:0000000000005450                 MOV             X4, #0xFFFFFFFFFFFFFFFF
.text:0000000000005454                 LSL             X3, X4, X3
.text:0000000000005458                 ORR             X2, X3, X2
.text:000000000000545C loc_545C                                ; CODE XREF: read_sleb128_0+24↑j
.text:000000000000545C                                         ; read_sleb128_0+28↑j
.text:000000000000545C                 STR             X2, [X1]
.text:0000000000005460                 RET
.text:0000000000005460 ; } // starts at 5424
.text:0000000000005460 ; End of function read_sleb128_0
.text:0000000000005464 ; =============== S U B R O U T I N E =======================================
.text:0000000000005464 fde_unencoded_compare                   ; DATA XREF: search_object:loc_66A0↓o
.text:0000000000005464                                         ; search_object+458↓o
.text:0000000000005464 ; __unwind {
.text:0000000000005464                 LDR             X3, [X1,#8]
.text:0000000000005468                 LDR             X1, [X2,#8]
.text:000000000000546C                 CMP             X3, X1
.text:0000000000005470                 CSETM           W0, CC
.text:0000000000005474                 CMP             X3, X1
.text:0000000000005478                 CSINC           W0, W0, WZR, LS
.text:000000000000547C                 RET
.text:000000000000547C ; } // starts at 5464
.text:000000000000547C ; End of function fde_unencoded_compare
.text:0000000000005480 ; =============== S U B R O U T I N E =======================================
.text:0000000000005480 ; Attributes: bp-based frame fpd=0x60
.text:0000000000005480 frame_downheap                          ; CODE XREF: frame_heapsort+4C↓p
.text:0000000000005480                                         ; frame_heapsort+94↓p
.text:0000000000005480 var_60          = -0x60
.text:0000000000005480 var_50          = -0x50
.text:0000000000005480 var_40          = -0x40
.text:0000000000005480 var_30          = -0x30
.text:0000000000005480 var_20          = -0x20
.text:0000000000005480 var_8           = -8
.text:0000000000005480 ; __unwind {
.text:0000000000005480                 STP             X29, X30, [SP,#var_60]!
.text:0000000000005484                 MOV             X29, SP
.text:0000000000005488                 STP             X19, X20, [SP,#0x60+var_50]
.text:000000000000548C                 LSL             W19, W3, #1
.text:0000000000005490                 STR             X25, [SP,#0x60+var_20]
.text:0000000000005494                 STP             X23, X24, [SP,#0x60+var_30]
.text:0000000000005498                 STP             X21, X22, [SP,#0x60+var_40]
.text:000000000000549C                 MOV             X24, X0
.text:00000000000054A0                 MOV             X25, X1
.text:00000000000054A4                 MOV             X20, X2
.text:00000000000054A8                 MOV             W23, W4
.text:00000000000054AC                 ADD             W19, W19, #1
.text:00000000000054B0 loc_54B0                                ; CODE XREF: frame_downheap+A4↓j
.text:00000000000054B0                 CMP             W19, W23
.text:00000000000054B4                 B.GE            loc_5528
.text:00000000000054B8                 ADD             W21, W19, #1
.text:00000000000054BC                 CMP             W21, W23
.text:00000000000054C0                 B.GE            loc_54EC
.text:00000000000054C4                 SBFIZ           X1, X19, #3, #0x20 ; ' '
.text:00000000000054C8                 MOV             X0, X24
.text:00000000000054CC                 ADD             X2, X20, X1
.text:00000000000054D0                 STR             X3, [X29,#0x60+var_8]
.text:00000000000054D4                 LDR             X1, [X20,X1]
.text:00000000000054D8                 LDR             X2, [X2,#8]
.text:00000000000054DC                 BLR             X25
.text:00000000000054E0                 CMP             W0, WZR
.text:00000000000054E4                 LDR             X3, [X29,#0x60+var_8]
.text:00000000000054E8                 CSEL            W19, W19, W21, GE
.text:00000000000054EC loc_54EC                                ; CODE XREF: frame_downheap+40↑j
.text:00000000000054EC                 SBFIZ           X21, X3, #3, #0x20 ; ' '
.text:00000000000054F0                 SBFIZ           X22, X19, #3, #0x20 ; ' '
.text:00000000000054F4                 MOV             X0, X24
.text:00000000000054F8                 LDR             X1, [X20,X21]
.text:00000000000054FC                 LDR             X2, [X20,X22]
.text:0000000000005500                 BLR             X25
.text:0000000000005504                 TBZ             W0, #0x1F, loc_5528
.text:0000000000005508                 LDR             X1, [X20,X22]
.text:000000000000550C                 MOV             W3, W19
.text:0000000000005510                 LDR             X0, [X20,X21]
.text:0000000000005514                 STR             X1, [X20,X21]
.text:0000000000005518                 STR             X0, [X20,X22]
.text:000000000000551C                 LSL             W0, W19, #1
.text:0000000000005520                 ADD             W19, W0, #1
.text:0000000000005524                 B               loc_54B0
.text:0000000000005528 ; ---------------------------------------------------------------------------
.text:0000000000005528 loc_5528                                ; CODE XREF: frame_downheap+34↑j
.text:0000000000005528                                         ; frame_downheap+84↑j
.text:0000000000005528                 LDP             X19, X20, [SP,#0x60+var_50]
.text:000000000000552C                 LDP             X21, X22, [SP,#0x60+var_40]
.text:0000000000005530                 LDP             X23, X24, [SP,#0x60+var_30]
.text:0000000000005534                 LDR             X25, [SP,#0x60+var_20]
.text:0000000000005538                 LDP             X29, X30, [SP+0x60+var_60],#0x60
.text:000000000000553C                 RET
.text:000000000000553C ; } // starts at 5480
.text:000000000000553C ; End of function frame_downheap
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540 ; Attributes: bp-based frame fpd=0x50
.text:0000000000005540 frame_heapsort                          ; CODE XREF: search_object+158↓p
.text:0000000000005540                                         ; search_object+54C↓p
.text:0000000000005540 var_50          = -0x50
.text:0000000000005540 var_40          = -0x40
.text:0000000000005540 var_30          = -0x30
.text:0000000000005540 var_20          = -0x20
.text:0000000000005540 var_10          = -0x10
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 STP             X29, X30, [SP,#var_50]!
.text:0000000000005544                 MOV             X29, SP
.text:0000000000005548                 STP             X19, X20, [SP,#0x50+var_40]
.text:000000000000554C                 LDR             X19, [X2,#8]
.text:0000000000005550                 STP             X21, X22, [SP,#0x50+var_30]
.text:0000000000005554                 STP             X23, X24, [SP,#0x50+var_20]
.text:0000000000005558                 STR             X25, [SP,#0x50+var_10]
.text:000000000000555C                 MOV             X24, X0
.text:0000000000005560                 MOV             X25, X1
.text:0000000000005564                 MOV             X21, X2
.text:0000000000005568                 ADD             X22, X2, #0x10
.text:000000000000556C                 LSR             X20, X19, #1
.text:0000000000005570 loc_5570                                ; CODE XREF: frame_heapsort+50↓j
.text:0000000000005570                 SUB             W20, W20, #1
.text:0000000000005574                 TBNZ            W20, #0x1F, loc_5594
.text:0000000000005578                 MOV             X0, X24
.text:000000000000557C                 MOV             X1, X25
.text:0000000000005580                 MOV             X2, X22
.text:0000000000005584                 MOV             W3, W20
.text:0000000000005588                 MOV             W4, W19
.text:000000000000558C                 BL              frame_downheap
.text:0000000000005590                 B               loc_5570
.text:0000000000005594 ; ---------------------------------------------------------------------------
.text:0000000000005594 loc_5594                                ; CODE XREF: frame_heapsort+34↑j
.text:0000000000005594                 MOV             X20, #0
.text:0000000000005598                 SUB             W19, W19, #1
.text:000000000000559C                 ADD             X23, X22, W19,SXTW#3
.text:00000000000055A0 loc_55A0                                ; CODE XREF: frame_heapsort+98↓j
.text:00000000000055A0                 CMP             W19, WZR
.text:00000000000055A4                 B.LE            loc_55DC
.text:00000000000055A8                 LDR             X1, [X23,X20]
.text:00000000000055AC                 MOV             W4, W19
.text:00000000000055B0                 LDR             X0, [X21,#0x10]
.text:00000000000055B4                 MOV             X2, X22
.text:00000000000055B8                 STR             X1, [X21,#0x10]
.text:00000000000055BC                 MOV             W3, #0
.text:00000000000055C0                 STR             X0, [X23,X20]
.text:00000000000055C4                 MOV             X1, X25
.text:00000000000055C8                 MOV             X0, X24
.text:00000000000055CC                 SUB             W19, W19, #1
.text:00000000000055D0                 SUB             X20, X20, #8
.text:00000000000055D4                 BL              frame_downheap
.text:00000000000055D8                 B               loc_55A0
.text:00000000000055DC ; ---------------------------------------------------------------------------
.text:00000000000055DC loc_55DC                                ; CODE XREF: frame_heapsort+64↑j
.text:00000000000055DC                 LDP             X19, X20, [SP,#0x50+var_40]
.text:00000000000055E0                 LDP             X21, X22, [SP,#0x50+var_30]
.text:00000000000055E4                 LDP             X23, X24, [SP,#0x50+var_20]
.text:00000000000055E8                 LDR             X25, [SP,#0x50+var_10]
.text:00000000000055EC                 LDP             X29, X30, [SP+0x50+var_50],#0x50
.text:00000000000055F0                 RET
.text:00000000000055F0 ; } // starts at 5540
.text:00000000000055F0 ; End of function frame_heapsort
.text:00000000000055F4 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F4 ; Attributes: bp-based frame
.text:00000000000055F4 size_of_encoded_value                   ; CODE XREF: linear_search_fdes+F8↓p
.text:00000000000055F4                                         ; _Unwind_IteratePhdrCallback+340↓p ...
.text:00000000000055F4 var_s0          =  0
.text:00000000000055F4 ; __unwind {
.text:00000000000055F4                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000055F8                 UXTB            W0, W0
.text:00000000000055FC                 CMP             W0, #0xFF
.text:0000000000005600                 MOV             X29, SP
.text:0000000000005604                 B.EQ            loc_5640
.text:0000000000005608                 AND             W0, W0, #7
.text:000000000000560C                 CMP             W0, #4  ; switch 5 cases
.text:0000000000005610                 B.HI            def_5628 ; jumptable 0000000000005628 default case, case 1
.text:0000000000005614                 ADRP            X1, #jpt_5628@PAGE
.text:0000000000005618                 ADD             X1, X1, #jpt_5628@PAGEOFF
.text:000000000000561C                 LDRB            W0, [X1,W0,UXTW]
.text:0000000000005620                 ADR             X1, loc_562C ; jumptable 0000000000005628 case 2
.text:0000000000005624                 ADD             X0, X1, W0,SXTB#2
.text:0000000000005628                 BR              X0      ; switch jump
.text:000000000000562C ; ---------------------------------------------------------------------------
.text:000000000000562C loc_562C                                ; CODE XREF: size_of_encoded_value+34↑j
.text:000000000000562C                                         ; DATA XREF: size_of_encoded_value+2C↑o
.text:000000000000562C                 MOV             W0, #2  ; jumptable 0000000000005628 case 2
.text:0000000000005630                 B               loc_564C
.text:0000000000005634 ; ---------------------------------------------------------------------------
.text:0000000000005634 loc_5634                                ; CODE XREF: size_of_encoded_value+34↑j
.text:0000000000005634                 MOV             W0, #4  ; jumptable 0000000000005628 case 3
.text:0000000000005638                 B               loc_564C
.text:000000000000563C ; ---------------------------------------------------------------------------
.text:000000000000563C def_5628                                ; CODE XREF: size_of_encoded_value+1C↑j
.text:000000000000563C                                         ; size_of_encoded_value+34↑j
.text:000000000000563C                 BL              .abort  ; jumptable 0000000000005628 default case, case 1
.text:0000000000005640 ; ---------------------------------------------------------------------------
.text:0000000000005640 loc_5640                                ; CODE XREF: size_of_encoded_value+10↑j
.text:0000000000005640                 MOV             W0, #0
.text:0000000000005644                 B               loc_564C
.text:0000000000005648 ; ---------------------------------------------------------------------------
.text:0000000000005648 loc_5648                                ; CODE XREF: size_of_encoded_value+34↑j
.text:0000000000005648                 MOV             W0, #8  ; jumptable 0000000000005628 cases 0,4
.text:000000000000564C loc_564C                                ; CODE XREF: size_of_encoded_value+3C↑j
.text:000000000000564C                                         ; size_of_encoded_value+44↑j ...
.text:000000000000564C                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000005650                 RET
.text:0000000000005650 ; } // starts at 55F4
.text:0000000000005650 ; End of function size_of_encoded_value
.text:0000000000005654 ; =============== S U B R O U T I N E =======================================
.text:0000000000005654 ; Attributes: bp-based frame
.text:0000000000005654 base_from_object                        ; CODE XREF: fde_single_encoding_compare+30↓p
.text:0000000000005654                                         ; linear_search_fdes+38↓p ...
.text:0000000000005654 var_s0          =  0
.text:0000000000005654 ; __unwind {
.text:0000000000005654                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000005658                 UXTB            W0, W0
.text:000000000000565C                 CMP             W0, #0xFF
.text:0000000000005660                 MOV             X29, SP
.text:0000000000005664                 B.EQ            loc_56A8
.text:0000000000005668                 AND             W0, W0, #0x70
.text:000000000000566C                 CMP             W0, #0x20 ; ' '
.text:0000000000005670                 B.EQ            loc_5698
.text:0000000000005674                 B.HI            loc_5684
.text:0000000000005678                 CMP             W0, #0x10
.text:000000000000567C                 CBNZ            W0, loc_5690
.text:0000000000005680                 B               loc_56A8
.text:0000000000005684 ; ---------------------------------------------------------------------------
.text:0000000000005684 loc_5684                                ; CODE XREF: base_from_object+20↑j
.text:0000000000005684                 CMP             W0, #0x30 ; '0'
.text:0000000000005688                 B.EQ            loc_56A0
.text:000000000000568C                 CMP             W0, #0x50 ; 'P'
.text:0000000000005690 loc_5690                                ; CODE XREF: base_from_object+28↑j
.text:0000000000005690                 B.EQ            loc_56A8
.text:0000000000005694                 BL              .abort
.text:0000000000005698 ; ---------------------------------------------------------------------------
.text:0000000000005698 loc_5698                                ; CODE XREF: base_from_object+1C↑j
.text:0000000000005698                 LDR             X0, [X1,#8]
.text:000000000000569C                 B               loc_56AC
.text:00000000000056A0 ; ---------------------------------------------------------------------------
.text:00000000000056A0 loc_56A0                                ; CODE XREF: base_from_object+34↑j
.text:00000000000056A0                 LDR             X0, [X1,#0x10]
.text:00000000000056A4                 B               loc_56AC
.text:00000000000056A8 ; ---------------------------------------------------------------------------
.text:00000000000056A8 loc_56A8                                ; CODE XREF: base_from_object+10↑j
.text:00000000000056A8                                         ; base_from_object+2C↑j ...
.text:00000000000056A8                 MOV             X0, #0
.text:00000000000056AC loc_56AC                                ; CODE XREF: base_from_object+48↑j
.text:00000000000056AC                                         ; base_from_object+50↑j
.text:00000000000056AC                 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000056B0                 RET
.text:00000000000056B0 ; } // starts at 5654
.text:00000000000056B0 ; End of function base_from_object
.text:00000000000056B4 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B4 ; Attributes: bp-based frame
.text:00000000000056B4 base_from_cb_data                       ; CODE XREF: _Unwind_IteratePhdrCallback+238↓p
.text:00000000000056B4                                         ; _Unwind_IteratePhdrCallback+278↓p ...
.text:00000000000056B4 var_s0          =  0
.text:00000000000056B4 ; __unwind {
.text:00000000000056B4                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000056B8                 UXTB            W0, W0
.text:00000000000056BC                 CMP             W0, #0xFF
.text:00000000000056C0                 MOV             X29, SP
.text:00000000000056C4                 B.EQ            loc_5708
.text:00000000000056C8                 AND             W0, W0, #0x70
.text:00000000000056CC                 CMP             W0, #0x20 ; ' '
.text:00000000000056D0                 B.EQ            loc_56F8
.text:00000000000056D4                 B.HI            loc_56E4
.text:00000000000056D8                 CMP             W0, #0x10
.text:00000000000056DC                 CBNZ            W0, loc_56F0
.text:00000000000056E0                 B               loc_5708
.text:00000000000056E4 ; ---------------------------------------------------------------------------
.text:00000000000056E4 loc_56E4                                ; CODE XREF: base_from_cb_data+20↑j
.text:00000000000056E4                 CMP             W0, #0x30 ; '0'
.text:00000000000056E8                 B.EQ            loc_5700
.text:00000000000056EC                 CMP             W0, #0x50 ; 'P'
.text:00000000000056F0 loc_56F0                                ; CODE XREF: base_from_cb_data+28↑j
.text:00000000000056F0                 B.EQ            loc_5708
.text:00000000000056F4                 BL              .abort
.text:00000000000056F8 ; ---------------------------------------------------------------------------
.text:00000000000056F8 loc_56F8                                ; CODE XREF: base_from_cb_data+1C↑j
.text:00000000000056F8                 LDR             X0, [X1,#8]
.text:00000000000056FC                 B               loc_570C
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005700 loc_5700                                ; CODE XREF: base_from_cb_data+34↑j
.text:0000000000005700                 LDR             X0, [X1,#0x10]
.text:0000000000005704                 B               loc_570C
.text:0000000000005708 ; ---------------------------------------------------------------------------
.text:0000000000005708 loc_5708                                ; CODE XREF: base_from_cb_data+10↑j
.text:0000000000005708                                         ; base_from_cb_data+2C↑j ...
.text:0000000000005708                 MOV             X0, #0
.text:000000000000570C loc_570C                                ; CODE XREF: base_from_cb_data+48↑j
.text:000000000000570C                                         ; base_from_cb_data+50↑j
.text:000000000000570C                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000005710                 RET
.text:0000000000005710 ; } // starts at 56B4
.text:0000000000005710 ; End of function base_from_cb_data
.text:0000000000005714 ; =============== S U B R O U T I N E =======================================
.text:0000000000005714 ; Attributes: bp-based frame fpd=0x40
.text:0000000000005714 read_encoded_value_with_base_0          ; CODE XREF: fde_single_encoding_compare+48↓p
.text:0000000000005714                                         ; fde_single_encoding_compare+60↓p ...
.text:0000000000005714 var_40          = -0x40
.text:0000000000005714 var_30          = -0x30
.text:0000000000005714 var_20          = -0x20
.text:0000000000005714 var_8           = -8
.text:0000000000005714 ; __unwind {
.text:0000000000005714                 STP             X29, X30, [SP,#var_40]!
.text:0000000000005718                 MOV             X29, SP
.text:000000000000571C                 STP             X19, X20, [SP,#0x40+var_30]
.text:0000000000005720                 UXTB            W20, W0
.text:0000000000005724                 MOV             X19, X2
.text:0000000000005728                 STP             X21, X22, [SP,#0x40+var_20]
.text:000000000000572C                 CMP             W20, #0x50 ; 'P'
.text:0000000000005730                 MOV             X22, X1
.text:0000000000005734                 MOV             X21, X3
.text:0000000000005738                 B.NE            loc_574C
.text:000000000000573C                 ADD             X19, X2, #7
.text:0000000000005740                 AND             X0, X19, #0xFFFFFFFFFFFFFFF8
.text:0000000000005744                 LDR             X1, [X0],#8
.text:0000000000005748                 B               loc_57F0
.text:000000000000574C ; ---------------------------------------------------------------------------
.text:000000000000574C loc_574C                                ; CODE XREF: read_encoded_value_with_base_0+24↑j
.text:000000000000574C                 AND             W1, W20, #0xF
.text:0000000000005750                 CMP             W1, #0xC ; switch 13 cases
.text:0000000000005754                 B.HI            def_576C ; jumptable 000000000000576C default case, cases 5-8
.text:0000000000005758                 ADRP            X0, #jpt_576C@PAGE
.text:000000000000575C                 ADD             X0, X0, #jpt_576C@PAGEOFF
.text:0000000000005760                 LDRB            W0, [X0,W1,UXTW]
.text:0000000000005764                 ADR             X1, loc_5770 ; jumptable 000000000000576C case 1
.text:0000000000005768                 ADD             X0, X1, W0,SXTB#2
.text:000000000000576C                 BR              X0      ; switch jump
.text:0000000000005770 ; ---------------------------------------------------------------------------
.text:0000000000005770 loc_5770                                ; CODE XREF: read_encoded_value_with_base_0+58↑j
.text:0000000000005770                                         ; DATA XREF: read_encoded_value_with_base_0+50↑o
.text:0000000000005770                 MOV             X0, X2  ; jumptable 000000000000576C case 1
.text:0000000000005774                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000005778                 BL              read_uleb128_0
.text:000000000000577C                 B               loc_578C
.text:0000000000005780 ; ---------------------------------------------------------------------------
.text:0000000000005780 loc_5780                                ; CODE XREF: read_encoded_value_with_base_0+58↑j
.text:0000000000005780                 MOV             X0, X2  ; jumptable 000000000000576C case 9
.text:0000000000005784                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000005788                 BL              read_sleb128_0
.text:000000000000578C loc_578C                                ; CODE XREF: read_encoded_value_with_base_0+68↑j
.text:000000000000578C                 LDR             X1, [X29,#0x40+var_8]
.text:0000000000005790                 B               loc_57D4
.text:0000000000005794 ; ---------------------------------------------------------------------------
.text:0000000000005794 loc_5794                                ; CODE XREF: read_encoded_value_with_base_0+58↑j
.text:0000000000005794                 MOV             X0, X2  ; jumptable 000000000000576C case 2
.text:0000000000005798                 LDRH            W1, [X0],#2
.text:000000000000579C                 B               loc_57D4
.text:00000000000057A0 ; ---------------------------------------------------------------------------
.text:00000000000057A0 loc_57A0                                ; CODE XREF: read_encoded_value_with_base_0+58↑j
.text:00000000000057A0                 MOV             X0, X2  ; jumptable 000000000000576C case 3
.text:00000000000057A4                 LDR             W1, [X0],#4
.text:00000000000057A8                 B               loc_57D4
.text:00000000000057AC ; ---------------------------------------------------------------------------
.text:00000000000057AC loc_57AC                                ; CODE XREF: read_encoded_value_with_base_0+58↑j
.text:00000000000057AC                 MOV             X0, X2  ; jumptable 000000000000576C case 10
.text:00000000000057B0                 LDRSH           X1, [X0],#2
.text:00000000000057B4                 B               loc_57D4
.text:00000000000057B8 ; ---------------------------------------------------------------------------
.text:00000000000057B8 loc_57B8                                ; CODE XREF: read_encoded_value_with_base_0+58↑j
.text:00000000000057B8                 MOV             X0, X2  ; jumptable 000000000000576C case 11
.text:00000000000057BC                 LDRSW           X1, [X0],#4
.text:00000000000057C0                 B               loc_57D4
.text:00000000000057C4 ; ---------------------------------------------------------------------------
.text:00000000000057C4 loc_57C4                                ; CODE XREF: read_encoded_value_with_base_0+58↑j
.text:00000000000057C4                 MOV             X0, X2  ; jumptable 000000000000576C cases 0,4,12
.text:00000000000057C8                 LDR             X1, [X0],#8
.text:00000000000057CC                 B               loc_57D4
.text:00000000000057D0 ; ---------------------------------------------------------------------------
.text:00000000000057D0 def_576C                                ; CODE XREF: read_encoded_value_with_base_0+40↑j
.text:00000000000057D0                                         ; read_encoded_value_with_base_0+58↑j
.text:00000000000057D0                 BL              .abort  ; jumptable 000000000000576C default case, cases 5-8
.text:00000000000057D4 ; ---------------------------------------------------------------------------
.text:00000000000057D4 loc_57D4                                ; CODE XREF: read_encoded_value_with_base_0+7C↑j
.text:00000000000057D4                                         ; read_encoded_value_with_base_0+88↑j ...
.text:00000000000057D4                 CBZ             X1, loc_57F0
.text:00000000000057D8                 AND             W2, W20, #0x70
.text:00000000000057DC                 CMP             W2, #0x10
.text:00000000000057E0                 CSEL            X19, X19, X22, EQ
.text:00000000000057E4                 ADD             X1, X1, X19
.text:00000000000057E8                 TBZ             W20, #7, loc_57F0
.text:00000000000057EC                 LDR             X1, [X1]
.text:00000000000057F0 loc_57F0                                ; CODE XREF: read_encoded_value_with_base_0+34↑j
.text:00000000000057F0                                         ; read_encoded_value_with_base_0:loc_57D4↑j ...
.text:00000000000057F0                 STR             X1, [X21]
.text:00000000000057F4                 LDP             X19, X20, [SP,#0x40+var_30]
.text:00000000000057F8                 LDP             X21, X22, [SP,#0x40+var_20]
.text:00000000000057FC                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:0000000000005800                 RET
.text:0000000000005800 ; } // starts at 5714
.text:0000000000005800 ; End of function read_encoded_value_with_base_0
.text:0000000000005804 ; =============== S U B R O U T I N E =======================================
.text:0000000000005804 ; Attributes: bp-based frame fpd=0x50
.text:0000000000005804 fde_single_encoding_compare             ; DATA XREF: search_object+43C↓o
.text:0000000000005804                                         ; search_object+440↓o
.text:0000000000005804 var_50          = -0x50
.text:0000000000005804 var_40          = -0x40
.text:0000000000005804 var_30          = -0x30
.text:0000000000005804 var_20          = -0x20
.text:0000000000005804 var_10          = -0x10
.text:0000000000005804 var_8           = -8
.text:0000000000005804 ; __unwind {
.text:0000000000005804                 STP             X29, X30, [SP,#var_50]!
.text:0000000000005808                 MOV             X29, SP
.text:000000000000580C                 STP             X19, X20, [SP,#0x50+var_40]
.text:0000000000005810                 LDRH            W19, [X0,#0x20]
.text:0000000000005814                 MOV             X20, X0
.text:0000000000005818                 STR             X23, [SP,#0x50+var_20]
.text:000000000000581C                 MOV             X23, X1
.text:0000000000005820                 UBFX            X19, X19, #3, #8
.text:0000000000005824                 MOV             X1, X20
.text:0000000000005828                 MOV             W0, W19
.text:000000000000582C                 STP             X21, X22, [SP,#0x50+var_30]
.text:0000000000005830                 MOV             X22, X2
.text:0000000000005834                 BL              base_from_object
.text:0000000000005838                 MOV             X21, X0
.text:000000000000583C                 ADD             X2, X23, #8
.text:0000000000005840                 MOV             X1, X21
.text:0000000000005844                 ADD             X3, X29, #0x40 ; '@'
.text:0000000000005848                 MOV             W0, W19
.text:000000000000584C                 BL              read_encoded_value_with_base_0
.text:0000000000005850                 LDRH            W0, [X20,#0x20]
.text:0000000000005854                 MOV             X1, X21
.text:0000000000005858                 ADD             X2, X22, #8
.text:000000000000585C                 ADD             X3, X29, #0x48 ; 'H'
.text:0000000000005860                 LSR             X0, X0, #3
.text:0000000000005864                 BL              read_encoded_value_with_base_0
.text:0000000000005868                 LDR             X23, [SP,#0x50+var_20]
.text:000000000000586C                 LDR             X2, [X29,#0x50+var_10]
.text:0000000000005870                 LDR             X1, [X29,#0x50+var_8]
.text:0000000000005874                 LDP             X19, X20, [SP,#0x50+var_40]
.text:0000000000005878                 CMP             X2, X1
.text:000000000000587C                 CSETM           W0, CC
.text:0000000000005880                 CMP             X2, X1
.text:0000000000005884                 LDP             X21, X22, [SP,#0x50+var_30]
.text:0000000000005888                 CSINC           W0, W0, WZR, LS
.text:000000000000588C                 LDP             X29, X30, [SP+0x50+var_50],#0x50
.text:0000000000005890                 RET
.text:0000000000005890 ; } // starts at 5804
.text:0000000000005890 ; End of function fde_single_encoding_compare
.text:0000000000005894 ; =============== S U B R O U T I N E =======================================
.text:0000000000005894 ; Attributes: bp-based frame fpd=0x40
.text:0000000000005894 get_cie_encoding                        ; CODE XREF: linear_search_fdes+80↓p
.text:0000000000005894                                         ; get_fde_encoding+C↓j ...
.text:0000000000005894 var_40          = -0x40
.text:0000000000005894 var_30          = -0x30
.text:0000000000005894 ; __unwind {
.text:0000000000005894                 STP             X29, X30, [SP,#var_40]!
.text:0000000000005898                 MOV             X29, SP
.text:000000000000589C                 STP             X19, X20, [SP,#0x40+var_30]
.text:00000000000058A0                 ADD             X20, X0, #9
.text:00000000000058A4                 MOV             X19, X0
.text:00000000000058A8                 MOV             X0, X20 ; s
.text:00000000000058AC                 BL              .strlen
.text:00000000000058B0                 ADD             X0, X0, #1
.text:00000000000058B4                 LDRB            W2, [X19,#8]
.text:00000000000058B8                 ADD             X1, X20, X0
.text:00000000000058BC                 CMP             W2, #3
.text:00000000000058C0                 B.LS            loc_58E0
.text:00000000000058C4                 LDRB            W2, [X20,X0]
.text:00000000000058C8                 MOV             W0, #0xFF
.text:00000000000058CC                 CMP             W2, #8
.text:00000000000058D0                 B.NE            loc_5984
.text:00000000000058D4                 LDRB            W2, [X1,#1]
.text:00000000000058D8                 CBNZ            W2, loc_5984
.text:00000000000058DC                 ADD             X1, X1, #2
.text:00000000000058E0 loc_58E0                                ; CODE XREF: get_cie_encoding+2C↑j
.text:00000000000058E0                 LDRB            W0, [X19,#9]
.text:00000000000058E4                 CMP             W0, #0x7A ; 'z'
.text:00000000000058E8                 B.EQ            loc_58F4
.text:00000000000058EC loc_58EC                                ; CODE XREF: get_cie_encoding+E0↓j
.text:00000000000058EC                 MOV             W0, #0
.text:00000000000058F0                 B               loc_5984
.text:00000000000058F4 ; ---------------------------------------------------------------------------
.text:00000000000058F4 loc_58F4                                ; CODE XREF: get_cie_encoding+54↑j
.text:00000000000058F4                 ADD             X20, X29, #0x30 ; '0'
.text:00000000000058F8                 MOV             X0, X1
.text:00000000000058FC                 MOV             X1, X20
.text:0000000000005900                 BL              read_uleb128_0
.text:0000000000005904                 ADD             X1, X29, #0x38 ; '8'
.text:0000000000005908                 BL              read_sleb128_0
.text:000000000000590C                 LDRB            W2, [X19,#8]
.text:0000000000005910                 CMP             W2, #1
.text:0000000000005914                 B.NE            loc_5920
.text:0000000000005918                 ADD             X0, X0, #1
.text:000000000000591C                 B               loc_5928
.text:0000000000005920 ; ---------------------------------------------------------------------------
.text:0000000000005920 loc_5920                                ; CODE XREF: get_cie_encoding+80↑j
.text:0000000000005920                 MOV             X1, X20
.text:0000000000005924                 BL              read_uleb128_0
.text:0000000000005928 loc_5928                                ; CODE XREF: get_cie_encoding+88↑j
.text:0000000000005928                 MOV             X1, X20
.text:000000000000592C                 ADD             X19, X19, #0xA
.text:0000000000005930                 ADD             X20, X29, #0x28 ; '('
.text:0000000000005934                 BL              read_uleb128_0
.text:0000000000005938 loc_5938                                ; CODE XREF: get_cie_encoding+EC↓j
.text:0000000000005938                 LDRB            W1, [X19]
.text:000000000000593C                 CMP             W1, #0x52 ; 'R'
.text:0000000000005940                 B.NE            loc_594C
.text:0000000000005944                 LDRB            W0, [X0]
.text:0000000000005948                 B               loc_5984
.text:000000000000594C ; ---------------------------------------------------------------------------
.text:000000000000594C loc_594C                                ; CODE XREF: get_cie_encoding+AC↑j
.text:000000000000594C                 CMP             W1, #0x50 ; 'P'
.text:0000000000005950                 B.NE            loc_5970
.text:0000000000005954                 MOV             X2, X0
.text:0000000000005958                 MOV             X1, #0
.text:000000000000595C                 MOV             X3, X20
.text:0000000000005960                 LDRB            W0, [X2],#1
.text:0000000000005964                 AND             W0, W0, #0x7F
.text:0000000000005968                 BL              read_encoded_value_with_base_0
.text:000000000000596C                 B               loc_597C
.text:0000000000005970 ; ---------------------------------------------------------------------------
.text:0000000000005970 loc_5970                                ; CODE XREF: get_cie_encoding+BC↑j
.text:0000000000005970                 CMP             W1, #0x4C ; 'L'
.text:0000000000005974                 B.NE            loc_58EC
.text:0000000000005978                 ADD             X0, X0, #1
.text:000000000000597C loc_597C                                ; CODE XREF: get_cie_encoding+D8↑j
.text:000000000000597C                 ADD             X19, X19, #1
.text:0000000000005980                 B               loc_5938
.text:0000000000005984 ; ---------------------------------------------------------------------------
.text:0000000000005984 loc_5984                                ; CODE XREF: get_cie_encoding+3C↑j
.text:0000000000005984                                         ; get_cie_encoding+44↑j ...
.text:0000000000005984                 LDP             X19, X20, [SP,#0x40+var_30]
.text:0000000000005988                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:000000000000598C                 RET
.text:000000000000598C ; } // starts at 5894
.text:000000000000598C ; End of function get_cie_encoding
.text:0000000000005990 ; =============== S U B R O U T I N E =======================================
.text:0000000000005990 ; Attributes: bp-based frame fpd=0x70
.text:0000000000005990 linear_search_fdes                      ; CODE XREF: _Unwind_IteratePhdrCallback+3B4↓p
.text:0000000000005990                                         ; search_object+3B0↓p ...
.text:0000000000005990 var_70          = -0x70
.text:0000000000005990 var_60          = -0x60
.text:0000000000005990 var_50          = -0x50
.text:0000000000005990 var_40          = -0x40
.text:0000000000005990 var_30          = -0x30
.text:0000000000005990 var_20          = -0x20
.text:0000000000005990 var_10          = -0x10
.text:0000000000005990 var_8           = -8
.text:0000000000005990 ; __unwind {
.text:0000000000005990                 STP             X29, X30, [SP,#var_70]!
.text:0000000000005994                 MOV             X29, SP
.text:0000000000005998                 STP             X21, X22, [SP,#0x70+var_50]
.text:000000000000599C                 MOV             X22, X0
.text:00000000000059A0                 LDRH            W0, [X0,#0x20]
.text:00000000000059A4                 STP             X19, X20, [SP,#0x70+var_60]
.text:00000000000059A8                 UBFX            X0, X0, #3, #8
.text:00000000000059AC                 MOV             X19, X1
.text:00000000000059B0                 MOV             X1, X22
.text:00000000000059B4                 STP             X23, X24, [SP,#0x70+var_40]
.text:00000000000059B8                 STP             X25, X26, [SP,#0x70+var_30]
.text:00000000000059BC                 STP             X27, X28, [SP,#0x70+var_20]
.text:00000000000059C0                 MOV             X23, X2
.text:00000000000059C4                 UXTB            W21, W0
.text:00000000000059C8                 BL              base_from_object
.text:00000000000059CC                 ADD             X24, X29, #0x60 ; '`'
.text:00000000000059D0                 MOV             X27, X0
.text:00000000000059D4                 ADD             X25, X29, #0x68 ; 'h'
.text:00000000000059D8                 MOV             X0, #0
.text:00000000000059DC                 MOV             X26, #1
.text:00000000000059E0 loc_59E0                                ; CODE XREF: linear_search_fdes+13C↓j
.text:00000000000059E0                 LDR             W1, [X19]
.text:00000000000059E4                 CBZ             W1, loc_5AD0
.text:00000000000059E8                 LDR             W1, [X19,#4]
.text:00000000000059EC                 CBZ             W1, loc_5AB8
.text:00000000000059F0                 LDRB            W2, [X22,#0x20]
.text:00000000000059F4                 MOV             X20, X0
.text:00000000000059F8                 TBZ             W2, #2, loc_5A24
.text:00000000000059FC                 ADD             X20, X19, #4
.text:0000000000005A00                 SUB             X20, X20, W1,SXTW
.text:0000000000005A04                 CMP             X20, X0
.text:0000000000005A08                 B.EQ            loc_5A24
.text:0000000000005A0C                 MOV             X0, X20
.text:0000000000005A10                 BL              get_cie_encoding
.text:0000000000005A14                 MOV             W21, W0
.text:0000000000005A18                 MOV             X1, X22
.text:0000000000005A1C                 BL              base_from_object
.text:0000000000005A20                 MOV             X27, X0
.text:0000000000005A24 loc_5A24                                ; CODE XREF: linear_search_fdes+68↑j
.text:0000000000005A24                                         ; linear_search_fdes+78↑j
.text:0000000000005A24                 CBNZ            W21, loc_5A58
.text:0000000000005A28                 LDR             X0, [X19,#8]
.text:0000000000005A2C                 LDR             X1, [X19,#0x10]
.text:0000000000005A30                 STR             X0, [X29,#0x70+var_10]
.text:0000000000005A34                 STR             X1, [X29,#0x70+var_8]
.text:0000000000005A38                 CBZ             X0, loc_5ABC
.text:0000000000005A3C loc_5A3C                                ; CODE XREF: linear_search_fdes+124↓j
.text:0000000000005A3C                 LDR             X0, [X29,#0x70+var_10]
.text:0000000000005A40                 LDR             X1, [X29,#0x70+var_8]
.text:0000000000005A44                 SUB             X0, X23, X0
.text:0000000000005A48                 CMP             X0, X1
.text:0000000000005A4C                 B.CS            loc_5ABC
.text:0000000000005A50                 MOV             X0, X19
.text:0000000000005A54                 B               loc_5AD4
.text:0000000000005A58 ; ---------------------------------------------------------------------------
.text:0000000000005A58 loc_5A58                                ; CODE XREF: linear_search_fdes:loc_5A24↑j
.text:0000000000005A58                 UXTB            W28, W21
.text:0000000000005A5C                 MOV             X1, X27
.text:0000000000005A60                 ADD             X2, X19, #8
.text:0000000000005A64                 MOV             X3, X24
.text:0000000000005A68                 MOV             W0, W28
.text:0000000000005A6C                 BL              read_encoded_value_with_base_0
.text:0000000000005A70                 MOV             X2, X0
.text:0000000000005A74                 MOV             X1, #0
.text:0000000000005A78                 MOV             X3, X25
.text:0000000000005A7C                 AND             W0, W21, #0xF
.text:0000000000005A80                 BL              read_encoded_value_with_base_0
.text:0000000000005A84                 MOV             W0, W28
.text:0000000000005A88                 BL              size_of_encoded_value
.text:0000000000005A8C                 MOV             W0, W0
.text:0000000000005A90                 CMP             X0, #7
.text:0000000000005A94                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:0000000000005A98                 B.HI            loc_5AA8
.text:0000000000005A9C                 LSL             X1, X0, #3
.text:0000000000005AA0                 LSL             X1, X26, X1
.text:0000000000005AA4                 SUB             X1, X1, #1
.text:0000000000005AA8 loc_5AA8                                ; CODE XREF: linear_search_fdes+108↑j
.text:0000000000005AA8                 LDR             X0, [X29,#0x70+var_10]
.text:0000000000005AAC                 TST             X1, X0
.text:0000000000005AB0                 B.EQ            loc_5ABC
.text:0000000000005AB4                 B               loc_5A3C
.text:0000000000005AB8 ; ---------------------------------------------------------------------------
.text:0000000000005AB8 loc_5AB8                                ; CODE XREF: linear_search_fdes+5C↑j
.text:0000000000005AB8                 MOV             X20, X0
.text:0000000000005ABC loc_5ABC                                ; CODE XREF: linear_search_fdes+A8↑j
.text:0000000000005ABC                                         ; linear_search_fdes+BC↑j ...
.text:0000000000005ABC                 LDR             W0, [X19]
.text:0000000000005AC0                 ADD             X0, X0, #4
.text:0000000000005AC4                 ADD             X19, X19, X0
.text:0000000000005AC8                 MOV             X0, X20
.text:0000000000005ACC                 B               loc_59E0
.text:0000000000005AD0 ; ---------------------------------------------------------------------------
.text:0000000000005AD0 loc_5AD0                                ; CODE XREF: linear_search_fdes+54↑j
.text:0000000000005AD0                 MOV             X0, #0
.text:0000000000005AD4 loc_5AD4                                ; CODE XREF: linear_search_fdes+C4↑j
.text:0000000000005AD4                 LDP             X19, X20, [SP,#0x70+var_60]
.text:0000000000005AD8                 LDP             X21, X22, [SP,#0x70+var_50]
.text:0000000000005ADC                 LDP             X23, X24, [SP,#0x70+var_40]
.text:0000000000005AE0                 LDP             X25, X26, [SP,#0x70+var_30]
.text:0000000000005AE4                 LDP             X27, X28, [SP,#0x70+var_20]
.text:0000000000005AE8                 LDP             X29, X30, [SP+0x70+var_70],#0x70
.text:0000000000005AEC                 RET
.text:0000000000005AEC ; } // starts at 5990
.text:0000000000005AEC ; End of function linear_search_fdes
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0 get_fde_encoding                        ; CODE XREF: _Unwind_IteratePhdrCallback+334↓p
.text:0000000000005AF0                                         ; _Unwind_IteratePhdrCallback+3C0↓p ...
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 ADD             X1, X0, #4
.text:0000000000005AF4                 LDRSW           X0, [X0,#4]
.text:0000000000005AF8                 SUB             X0, X1, X0
.text:0000000000005AFC                 B               get_cie_encoding
.text:0000000000005AFC ; } // starts at 5AF0
.text:0000000000005AFC ; End of function get_fde_encoding
.text:0000000000005B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B00 ; Attributes: bp-based frame fpd=0x90
.text:0000000000005B00 _Unwind_IteratePhdrCallback             ; DATA XREF: _Unwind_Find_FDE+14C↓o
.text:0000000000005B00                                         ; _Unwind_Find_FDE+150↓o
.text:0000000000005B00 var_90          = -0x90
.text:0000000000005B00 var_80          = -0x80
.text:0000000000005B00 var_70          = -0x70
.text:0000000000005B00 var_60          = -0x60
.text:0000000000005B00 var_48          = -0x48
.text:0000000000005B00 var_40          = -0x40
.text:0000000000005B00 var_38          = -0x38
.text:0000000000005B00 var_30          = -0x30
.text:0000000000005B00 var_28          = -0x28
.text:0000000000005B00 var_20          = -0x20
.text:0000000000005B00 var_18          = -0x18
.text:0000000000005B00 var_10          = -0x10
.text:0000000000005B00 ; __unwind {
.text:0000000000005B00                 STP             X29, X30, [SP,#var_90]!
.text:0000000000005B04                 CMP             X1, #0x2F ; '/'
.text:0000000000005B08                 MOV             X29, SP
.text:0000000000005B0C                 STP             X19, X20, [SP,#0x90+var_80]
.text:0000000000005B10                 STP             X21, X22, [SP,#0x90+var_70]
.text:0000000000005B14                 STP             X23, X24, [SP,#0x90+var_60]
.text:0000000000005B18                 CSET            W14, HI
.text:0000000000005B1C                 LDR             X6, [X0,#0x10]
.text:0000000000005B20                 LDR             X7, [X0]
.text:0000000000005B24                 CBZ             W14, loc_5C18
.text:0000000000005B28                 LDR             W3, [X2,#0x28]
.text:0000000000005B2C                 CBZ             W3, loc_5C18
.text:0000000000005B30                 ADRP            X1, #adds.7606@PAGE
.text:0000000000005B34                 LDR             X4, [X0,#0x20]
.text:0000000000005B38                 LDR             X5, [X0,#0x28]
.text:0000000000005B3C                 LDR             X3, [X1,#adds.7606@PAGEOFF]
.text:0000000000005B40                 CMP             X4, X3
.text:0000000000005B44                 ADRP            X3, #subs.7607@PAGE
.text:0000000000005B48                 B.NE            loc_5BD4
.text:0000000000005B4C                 LDR             X9, [X3,#subs.7607@PAGEOFF]
.text:0000000000005B50                 ADD             X8, X3, #subs.7607@PAGEOFF
.text:0000000000005B54                 CMP             X5, X9
.text:0000000000005B58                 B.NE            loc_5BD4
.text:0000000000005B5C                 LDR             X9, [X8,#(frame_hdr_cache_head - 0x189F8)]
.text:0000000000005B60                 MOV             X4, #0
.text:0000000000005B64                 MOV             X5, #0
.text:0000000000005B68                 MOV             X1, X9
.text:0000000000005B6C loc_5B6C                                ; CODE XREF: _Unwind_IteratePhdrCallback+D0↓j
.text:0000000000005B6C                 CBZ             X1, loc_5C30
.text:0000000000005B70                 LDR             X10, [X2]
.text:0000000000005B74                 LDR             X8, [X1]
.text:0000000000005B78                 LDR             X4, [X1,#8]
.text:0000000000005B7C                 CMP             X10, X8
.text:0000000000005B80                 B.CC            loc_5BB4
.text:0000000000005B84                 CMP             X10, X4
.text:0000000000005B88                 B.CS            loc_5BB4
.text:0000000000005B8C                 CMP             X1, X9
.text:0000000000005B90                 LDR             X7, [X1,#0x10]
.text:0000000000005B94                 LDR             X8, [X1,#0x18]
.text:0000000000005B98                 B.EQ            loc_5D10
.text:0000000000005B9C                 ADD             X3, X3, #subs.7607@PAGEOFF
.text:0000000000005BA0                 LDR             X0, [X1,#0x28]
.text:0000000000005BA4                 STR             X0, [X5,#0x28]
.text:0000000000005BA8                 STR             X9, [X1,#0x28]
.text:0000000000005BAC                 STR             X1, [X3,#(frame_hdr_cache_head - 0x189F8)]
.text:0000000000005BB0                 B               loc_5D10
.text:0000000000005BB4 ; ---------------------------------------------------------------------------
.text:0000000000005BB4 loc_5BB4                                ; CODE XREF: _Unwind_IteratePhdrCallback+80↑j
.text:0000000000005BB4                                         ; _Unwind_IteratePhdrCallback+88↑j
.text:0000000000005BB4                 ORR             X4, X8, X4
.text:0000000000005BB8                 CBZ             X4, loc_5C2C
.text:0000000000005BBC                 LDR             X8, [X1,#0x28]
.text:0000000000005BC0                 MOV             X4, X1
.text:0000000000005BC4                 CMP             X8, XZR
.text:0000000000005BC8                 CSEL            X5, X5, X1, EQ
.text:0000000000005BCC                 MOV             X1, X8
.text:0000000000005BD0                 B               loc_5B6C
.text:0000000000005BD4 ; ---------------------------------------------------------------------------
.text:0000000000005BD4 loc_5BD4                                ; CODE XREF: _Unwind_IteratePhdrCallback+48↑j
.text:0000000000005BD4                                         ; _Unwind_IteratePhdrCallback+58↑j
.text:0000000000005BD4                 STR             X4, [X1,#adds.7606@PAGEOFF]
.text:0000000000005BD8                 ADD             X4, X3, #subs.7607@PAGEOFF
.text:0000000000005BDC                 ADD             X1, X4, #0x40 ; '@'
.text:0000000000005BE0                 STR             X5, [X3,#subs.7607@PAGEOFF]
.text:0000000000005BE4                 ADD             X4, X4, #0x1C0
.text:0000000000005BE8 loc_5BE8                                ; CODE XREF: _Unwind_IteratePhdrCallback+FC↓j
.text:0000000000005BE8                 STUR            XZR, [X1,#-0x30]
.text:0000000000005BEC                 STUR            XZR, [X1,#-0x28]
.text:0000000000005BF0                 STUR            X1, [X1,#-8]
.text:0000000000005BF4                 ADD             X1, X1, #0x30 ; '0'
.text:0000000000005BF8                 CMP             X1, X4
.text:0000000000005BFC                 B.NE            loc_5BE8
.text:0000000000005C00                 ADD             X3, X3, #subs.7607@PAGEOFF
.text:0000000000005C04                 ADD             X1, X3, #0x10
.text:0000000000005C08                 STR             XZR, [X3,#(qword_18B80 - 0x189F8)]
.text:0000000000005C0C                 STR             X1, [X3,#(frame_hdr_cache_head - 0x189F8)]
.text:0000000000005C10                 STR             WZR, [X2,#0x28]
.text:0000000000005C14                 B               loc_5C20
.text:0000000000005C18 ; ---------------------------------------------------------------------------
.text:0000000000005C18 loc_5C18                                ; CODE XREF: _Unwind_IteratePhdrCallback+24↑j
.text:0000000000005C18                                         ; _Unwind_IteratePhdrCallback+2C↑j
.text:0000000000005C18                 CMP             X1, #0x19
.text:0000000000005C1C                 B.LS            loc_5EFC
.text:0000000000005C20 loc_5C20                                ; CODE XREF: _Unwind_IteratePhdrCallback+114↑j
.text:0000000000005C20                 MOV             X4, #0
.text:0000000000005C24                 MOV             X5, #0
.text:0000000000005C28                 B               loc_5C30
.text:0000000000005C2C ; ---------------------------------------------------------------------------
.text:0000000000005C2C loc_5C2C                                ; CODE XREF: _Unwind_IteratePhdrCallback+B8↑j
.text:0000000000005C2C                 MOV             X4, X1
.text:0000000000005C30 loc_5C30                                ; CODE XREF: _Unwind_IteratePhdrCallback:loc_5B6C↑j
.text:0000000000005C30                                         ; _Unwind_IteratePhdrCallback+128↑j
.text:0000000000005C30                 LDRH            W13, [X0,#0x18]
.text:0000000000005C34                 MOV             X9, #0
.text:0000000000005C38                 MOV             X10, #0
.text:0000000000005C3C                 MOV             X12, #0
.text:0000000000005C40                 MOV             X11, #0
.text:0000000000005C44                 MOV             X8, #0
.text:0000000000005C48 loc_5C48                                ; CODE XREF: _Unwind_IteratePhdrCallback+1BC↓j
.text:0000000000005C48                 SUB             X13, X13, #1
.text:0000000000005C4C                 CMN             X13, #1
.text:0000000000005C50                 B.EQ            loc_5CC0
.text:0000000000005C54                 LDR             W0, [X6]
.text:0000000000005C58                 CMP             W0, #1
.text:0000000000005C5C                 B.NE            loc_5C98
.text:0000000000005C60                 LDR             X1, [X6,#0x10]
.text:0000000000005C64                 LDR             X3, [X2]
.text:0000000000005C68                 ADD             X1, X7, X1
.text:0000000000005C6C                 CMP             X3, X1
.text:0000000000005C70                 B.CC            loc_5CB8
.text:0000000000005C74                 LDR             X0, [X6,#0x28]
.text:0000000000005C78                 ADD             X0, X1, X0
.text:0000000000005C7C                 CMP             X3, X0
.text:0000000000005C80                 CSEL            X9, X9, X0, CS
.text:0000000000005C84                 CMP             X3, X0
.text:0000000000005C88                 CSEL            X10, X10, X1, CS
.text:0000000000005C8C                 CMP             X3, X0
.text:0000000000005C90                 CSINC           X12, X12, XZR, CS
.text:0000000000005C94                 B               loc_5CB8
.text:0000000000005C98 ; ---------------------------------------------------------------------------
.text:0000000000005C98 loc_5C98                                ; CODE XREF: _Unwind_IteratePhdrCallback+15C↑j
.text:0000000000005C98                 MOV             W1, #0x6474E550
.text:0000000000005CA0                 CMP             W0, W1
.text:0000000000005CA4                 B.EQ            loc_5CB4
.text:0000000000005CA8                 CMP             W0, #2
.text:0000000000005CAC                 CSEL            X11, X11, X6, NE
.text:0000000000005CB0                 B               loc_5CB8
.text:0000000000005CB4 ; ---------------------------------------------------------------------------
.text:0000000000005CB4 loc_5CB4                                ; CODE XREF: _Unwind_IteratePhdrCallback+1A4↑j
.text:0000000000005CB4                 MOV             X8, X6
.text:0000000000005CB8 loc_5CB8                                ; CODE XREF: _Unwind_IteratePhdrCallback+170↑j
.text:0000000000005CB8                                         ; _Unwind_IteratePhdrCallback+194↑j ...
.text:0000000000005CB8                 ADD             X6, X6, #0x38 ; '8'
.text:0000000000005CBC                 B               loc_5C48
.text:0000000000005CC0 ; ---------------------------------------------------------------------------
.text:0000000000005CC0 loc_5CC0                                ; CODE XREF: _Unwind_IteratePhdrCallback+150↑j
.text:0000000000005CC0                 CBNZ            X12, loc_5CCC
.text:0000000000005CC4 loc_5CC4                                ; CODE XREF: _Unwind_IteratePhdrCallback:loc_5D10↓j
.text:0000000000005CC4                 MOV             W0, #0
.text:0000000000005CC8                 B               loc_5F08
.text:0000000000005CCC ; ---------------------------------------------------------------------------
.text:0000000000005CCC loc_5CCC                                ; CODE XREF: _Unwind_IteratePhdrCallback:loc_5CC0↑j
.text:0000000000005CCC                 CBZ             W14, loc_5D10
.text:0000000000005CD0                 ADRP            X0, #subs.7607@PAGE
.text:0000000000005CD4                 CBZ             X5, loc_5CF4
.text:0000000000005CD8                 CBZ             X4, loc_5CF4
.text:0000000000005CDC                 LDR             X1, [X4,#0x28]
.text:0000000000005CE0                 STR             X1, [X5,#0x28]
.text:0000000000005CE4                 ADD             X1, X0, #subs.7607@PAGEOFF
.text:0000000000005CE8                 LDR             X3, [X1,#(frame_hdr_cache_head - 0x189F8)]
.text:0000000000005CEC                 STR             X3, [X4,#0x28]
.text:0000000000005CF0                 STR             X4, [X1,#(frame_hdr_cache_head - 0x189F8)]
.text:0000000000005CF4 loc_5CF4                                ; CODE XREF: _Unwind_IteratePhdrCallback+1D4↑j
.text:0000000000005CF4                                         ; _Unwind_IteratePhdrCallback+1D8↑j
.text:0000000000005CF4                 ADD             X0, X0, #subs.7607@PAGEOFF
.text:0000000000005CF8                 LDR             X0, [X0,#(frame_hdr_cache_head - 0x189F8)]
.text:0000000000005CFC                 STR             X7, [X0,#0x10]
.text:0000000000005D00                 STR             X8, [X0,#0x18]
.text:0000000000005D04                 STR             X11, [X0,#0x20]
.text:0000000000005D08                 STR             X10, [X0]
.text:0000000000005D0C                 STR             X9, [X0,#8]
.text:0000000000005D10 loc_5D10                                ; CODE XREF: _Unwind_IteratePhdrCallback+98↑j
.text:0000000000005D10                                         ; _Unwind_IteratePhdrCallback+B0↑j ...
.text:0000000000005D10                 CBZ             X8, loc_5CC4
.text:0000000000005D14                 LDR             X0, [X8,#0x10]
.text:0000000000005D18                 ADD             X21, X7, X0
.text:0000000000005D1C                 LDRB            W0, [X7,X0]
.text:0000000000005D20                 CMP             W0, #1
.text:0000000000005D24                 B.NE            loc_5EF4
.text:0000000000005D28                 LDRB            W20, [X21,#1]
.text:0000000000005D2C                 MOV             X1, X2
.text:0000000000005D30                 MOV             X19, X2
.text:0000000000005D34                 MOV             W0, W20
.text:0000000000005D38                 BL              base_from_cb_data
.text:0000000000005D3C                 MOV             X1, X0
.text:0000000000005D40                 ADD             X2, X21, #4
.text:0000000000005D44                 MOV             W0, W20
.text:0000000000005D48                 ADD             X3, X29, #0x50 ; 'P'
.text:0000000000005D4C                 BL              read_encoded_value_with_base_0
.text:0000000000005D50                 LDRB            W20, [X21,#2]
.text:0000000000005D54                 MOV             X2, X0
.text:0000000000005D58                 CMP             W20, #0xFF
.text:0000000000005D5C                 B.EQ            loc_5E84
.text:0000000000005D60                 LDRB            W0, [X21,#3]
.text:0000000000005D64                 CMP             W0, #0x3B ; ';'
.text:0000000000005D68                 B.NE            loc_5E84
.text:0000000000005D6C                 MOV             X1, X19
.text:0000000000005D70                 MOV             W0, W20
.text:0000000000005D74                 STR             X2, [X29,#0x90+var_48]
.text:0000000000005D78                 BL              base_from_cb_data
.text:0000000000005D7C                 MOV             X1, X0
.text:0000000000005D80                 LDR             X2, [X29,#0x90+var_48]
.text:0000000000005D84                 MOV             W0, W20
.text:0000000000005D88                 ADD             X3, X29, #0x58 ; 'X'
.text:0000000000005D8C                 BL              read_encoded_value_with_base_0
.text:0000000000005D90                 MOV             X22, X0
.text:0000000000005D94                 LDR             X0, [X29,#0x90+var_38]
.text:0000000000005D98                 CBZ             X0, loc_5EF4
.text:0000000000005D9C                 AND             X1, X22, #3
.text:0000000000005DA0                 CBNZ            X1, loc_5E84
.text:0000000000005DA4                 LDRSW           X2, [X22]
.text:0000000000005DA8                 LDR             X1, [X19]
.text:0000000000005DAC                 ADD             X2, X21, X2
.text:0000000000005DB0                 CMP             X1, X2
.text:0000000000005DB4                 B.CC            loc_5EF4
.text:0000000000005DB8                 SUB             X0, X0, #1
.text:0000000000005DBC                 LSL             X2, X0, #3
.text:0000000000005DC0                 LDRSW           X2, [X22,X2]
.text:0000000000005DC4                 ADD             X2, X21, X2
.text:0000000000005DC8                 CMP             X1, X2
.text:0000000000005DCC                 B.CS            loc_5E20
.text:0000000000005DD0                 MOV             X3, X0
.text:0000000000005DD4                 MOV             X4, #0
.text:0000000000005DD8 loc_5DD8                                ; CODE XREF: _Unwind_IteratePhdrCallback+310↓j
.text:0000000000005DD8                                         ; _Unwind_IteratePhdrCallback+31C↓j
.text:0000000000005DD8                 CMP             X4, X3
.text:0000000000005DDC                 B.CS            loc_5F04
.text:0000000000005DE0                 ADD             X0, X3, X4
.text:0000000000005DE4                 LSR             X0, X0, #1
.text:0000000000005DE8                 LSL             X2, X0, #3
.text:0000000000005DEC                 LDRSW           X5, [X22,X2]
.text:0000000000005DF0                 ADD             X5, X21, X5
.text:0000000000005DF4                 CMP             X1, X5
.text:0000000000005DF8                 B.CC            loc_5E18
.text:0000000000005DFC                 ADD             X2, X22, X2
.text:0000000000005E00                 ADD             X4, X0, #1
.text:0000000000005E04                 LDRSW           X2, [X2,#8]
.text:0000000000005E08                 ADD             X2, X21, X2
.text:0000000000005E0C                 CMP             X1, X2
.text:0000000000005E10                 B.CS            loc_5DD8
.text:0000000000005E14                 B               loc_5E20
.text:0000000000005E18 ; ---------------------------------------------------------------------------
.text:0000000000005E18 loc_5E18                                ; CODE XREF: _Unwind_IteratePhdrCallback+2F8↑j
.text:0000000000005E18                 MOV             X3, X0
.text:0000000000005E1C                 B               loc_5DD8
.text:0000000000005E20 ; ---------------------------------------------------------------------------
.text:0000000000005E20 loc_5E20                                ; CODE XREF: _Unwind_IteratePhdrCallback+2CC↑j
.text:0000000000005E20                                         ; _Unwind_IteratePhdrCallback+314↑j
.text:0000000000005E20                 LSL             X20, X0, #3
.text:0000000000005E24                 ADD             X0, X22, X20
.text:0000000000005E28                 LDRSW           X23, [X0,#4]
.text:0000000000005E2C                 ADD             X23, X21, X23
.text:0000000000005E30                 MOV             X0, X23
.text:0000000000005E34                 BL              get_fde_encoding
.text:0000000000005E38                 UXTB            W24, W0
.text:0000000000005E3C                 MOV             W0, W24
.text:0000000000005E40                 BL              size_of_encoded_value
.text:0000000000005E44                 ADD             X2, X23, W0,UXTW
.text:0000000000005E48                 MOV             X1, #0
.text:0000000000005E4C                 AND             W0, W24, #0xF
.text:0000000000005E50                 ADD             X2, X2, #8
.text:0000000000005E54                 ADD             X3, X29, #0x60 ; '`'
.text:0000000000005E58                 BL              read_encoded_value_with_base_0
.text:0000000000005E5C                 LDRSW           X0, [X22,X20]
.text:0000000000005E60                 LDR             X1, [X19]
.text:0000000000005E64                 ADD             X21, X21, X0
.text:0000000000005E68                 LDR             X0, [X29,#0x90+var_30]
.text:0000000000005E6C                 ADD             X0, X21, X0
.text:0000000000005E70                 CMP             X1, X0
.text:0000000000005E74                 B.CS            loc_5E7C
.text:0000000000005E78                 STR             X23, [X19,#0x20]
.text:0000000000005E7C loc_5E7C                                ; CODE XREF: _Unwind_IteratePhdrCallback+374↑j
.text:0000000000005E7C                 STR             X21, [X19,#0x18]
.text:0000000000005E80                 B               loc_5EF4
.text:0000000000005E84 ; ---------------------------------------------------------------------------
.text:0000000000005E84 loc_5E84                                ; CODE XREF: _Unwind_IteratePhdrCallback+25C↑j
.text:0000000000005E84                                         ; _Unwind_IteratePhdrCallback+268↑j ...
.text:0000000000005E84                 LDR             X0, [X19,#8]
.text:0000000000005E88                 STR             X0, [X29,#0x90+var_28]
.text:0000000000005E8C                 LDR             X0, [X19,#0x10]
.text:0000000000005E90                 STR             X0, [X29,#0x90+var_20]
.text:0000000000005E94                 MOV             W0, #4
.text:0000000000005E98                 LDR             X1, [X29,#0x90+var_40]
.text:0000000000005E9C                 STR             XZR, [X29,#0x90+var_10]
.text:0000000000005EA0                 LDR             X2, [X19]
.text:0000000000005EA4                 STRB            W0, [X29,#0x90+var_10]
.text:0000000000005EA8                 ADD             X0, X29, #0x60 ; '`'
.text:0000000000005EAC                 STR             XZR, [X29,#0x90+var_30]
.text:0000000000005EB0                 STR             X1, [X29,#0x90+var_18]
.text:0000000000005EB4                 BL              linear_search_fdes
.text:0000000000005EB8                 STR             X0, [X19,#0x20]
.text:0000000000005EBC                 CBZ             X0, loc_5EF4
.text:0000000000005EC0                 BL              get_fde_encoding
.text:0000000000005EC4                 UXTB            W20, W0
.text:0000000000005EC8                 MOV             X1, X19
.text:0000000000005ECC                 MOV             W0, W20
.text:0000000000005ED0                 BL              base_from_cb_data
.text:0000000000005ED4                 MOV             X1, X0
.text:0000000000005ED8                 LDR             X2, [X19,#0x20]
.text:0000000000005EDC                 MOV             W0, W20
.text:0000000000005EE0                 ADD             X3, X29, #0x58 ; 'X'
.text:0000000000005EE4                 ADD             X2, X2, #8
.text:0000000000005EE8                 BL              read_encoded_value_with_base_0
.text:0000000000005EEC                 LDR             X0, [X29,#0x90+var_38]
.text:0000000000005EF0                 STR             X0, [X19,#0x18]
.text:0000000000005EF4 loc_5EF4                                ; CODE XREF: _Unwind_IteratePhdrCallback+224↑j
.text:0000000000005EF4                                         ; _Unwind_IteratePhdrCallback+298↑j ...
.text:0000000000005EF4                 MOV             W0, #1
.text:0000000000005EF8                 B               loc_5F08
.text:0000000000005EFC ; ---------------------------------------------------------------------------
.text:0000000000005EFC loc_5EFC                                ; CODE XREF: _Unwind_IteratePhdrCallback+11C↑j
.text:0000000000005EFC                 MOV             W0, #0xFFFFFFFF
.text:0000000000005F00                 B               loc_5F08
.text:0000000000005F04 ; ---------------------------------------------------------------------------
.text:0000000000005F04 loc_5F04                                ; CODE XREF: _Unwind_IteratePhdrCallback+2DC↑j
.text:0000000000005F04                 BL              .abort
.text:0000000000005F08 ; ---------------------------------------------------------------------------
.text:0000000000005F08 loc_5F08                                ; CODE XREF: _Unwind_IteratePhdrCallback+1C8↑j
.text:0000000000005F08                                         ; _Unwind_IteratePhdrCallback+3F8↑j ...
.text:0000000000005F08                 LDP             X19, X20, [SP,#0x90+var_80]
.text:0000000000005F0C                 LDP             X21, X22, [SP,#0x90+var_70]
.text:0000000000005F10                 LDP             X23, X24, [SP,#0x90+var_60]
.text:0000000000005F14                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:0000000000005F18                 RET
.text:0000000000005F18 ; } // starts at 5B00
.text:0000000000005F18 ; End of function _Unwind_IteratePhdrCallback
.text:0000000000005F1C ; =============== S U B R O U T I N E =======================================
.text:0000000000005F1C ; Attributes: bp-based frame fpd=0x40
.text:0000000000005F1C fde_mixed_encoding_compare              ; DATA XREF: search_object:loc_6694↓o
.text:0000000000005F1C                                         ; search_object+44C↓o
.text:0000000000005F1C var_40          = -0x40
.text:0000000000005F1C var_30          = -0x30
.text:0000000000005F1C var_20          = -0x20
.text:0000000000005F1C var_10          = -0x10
.text:0000000000005F1C var_8           = -8
.text:0000000000005F1C ; __unwind {
.text:0000000000005F1C                 STP             X29, X30, [SP,#var_40]!
.text:0000000000005F20                 MOV             X29, SP
.text:0000000000005F24                 STP             X21, X22, [SP,#0x40+var_20]
.text:0000000000005F28                 MOV             X21, X0
.text:0000000000005F2C                 MOV             X0, X1
.text:0000000000005F30                 STP             X19, X20, [SP,#0x40+var_30]
.text:0000000000005F34                 MOV             X19, X2
.text:0000000000005F38                 MOV             X20, X1
.text:0000000000005F3C                 BL              get_fde_encoding
.text:0000000000005F40                 UXTB            W22, W0
.text:0000000000005F44                 MOV             X1, X21
.text:0000000000005F48                 MOV             W0, W22
.text:0000000000005F4C                 BL              base_from_object
.text:0000000000005F50                 MOV             X1, X0
.text:0000000000005F54                 ADD             X2, X20, #8
.text:0000000000005F58                 ADD             X3, X29, #0x30 ; '0'
.text:0000000000005F5C                 MOV             W0, W22
.text:0000000000005F60                 BL              read_encoded_value_with_base_0
.text:0000000000005F64                 MOV             X0, X19
.text:0000000000005F68                 BL              get_fde_encoding
.text:0000000000005F6C                 UXTB            W20, W0
.text:0000000000005F70                 MOV             X1, X21
.text:0000000000005F74                 MOV             W0, W20
.text:0000000000005F78                 BL              base_from_object
.text:0000000000005F7C                 MOV             X1, X0
.text:0000000000005F80                 ADD             X2, X19, #8
.text:0000000000005F84                 ADD             X3, X29, #0x38 ; '8'
.text:0000000000005F88                 MOV             W0, W20
.text:0000000000005F8C                 BL              read_encoded_value_with_base_0
.text:0000000000005F90                 LDR             X2, [X29,#0x40+var_10]
.text:0000000000005F94                 LDR             X1, [X29,#0x40+var_8]
.text:0000000000005F98                 LDP             X19, X20, [SP,#0x40+var_30]
.text:0000000000005F9C                 CMP             X2, X1
.text:0000000000005FA0                 CSETM           W0, CC
.text:0000000000005FA4                 CMP             X2, X1
.text:0000000000005FA8                 LDP             X21, X22, [SP,#0x40+var_20]
.text:0000000000005FAC                 CSINC           W0, W0, WZR, LS
.text:0000000000005FB0                 LDP             X29, X30, [SP+0x40+var_40],#0x40
.text:0000000000005FB4                 RET
.text:0000000000005FB4 ; } // starts at 5F1C
.text:0000000000005FB4 ; End of function fde_mixed_encoding_compare
.text:0000000000005FB8 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FB8 ; Attributes: bp-based frame fpd=0x70
.text:0000000000005FB8 classify_object_over_fdes               ; CODE XREF: search_object+58↓p
.text:0000000000005FB8                                         ; search_object+94↓p
.text:0000000000005FB8 var_70          = -0x70
.text:0000000000005FB8 var_60          = -0x60
.text:0000000000005FB8 var_50          = -0x50
.text:0000000000005FB8 var_40          = -0x40
.text:0000000000005FB8 var_30          = -0x30
.text:0000000000005FB8 var_20          = -0x20
.text:0000000000005FB8 var_8           = -8
.text:0000000000005FB8 ; __unwind {
.text:0000000000005FB8                 STP             X29, X30, [SP,#var_70]!
.text:0000000000005FBC                 MOV             X29, SP
.text:0000000000005FC0                 STP             X19, X20, [SP,#0x70+var_60]
.text:0000000000005FC4                 STP             X23, X24, [SP,#0x70+var_40]
.text:0000000000005FC8                 STP             X25, X26, [SP,#0x70+var_30]
.text:0000000000005FCC                 STP             X21, X22, [SP,#0x70+var_50]
.text:0000000000005FD0                 MOV             X20, X0
.text:0000000000005FD4                 STR             X27, [SP,#0x70+var_20]
.text:0000000000005FD8                 MOV             X19, X1
.text:0000000000005FDC                 MOV             X26, #0
.text:0000000000005FE0                 MOV             W25, #0
.text:0000000000005FE4                 MOV             X22, #0
.text:0000000000005FE8                 MOV             X0, #0
.text:0000000000005FEC                 ADD             X23, X29, #0x68 ; 'h'
.text:0000000000005FF0                 MOV             X24, #1
.text:0000000000005FF4 loc_5FF4                                ; CODE XREF: classify_object_over_fdes+13C↓j
.text:0000000000005FF4                 LDR             W1, [X19]
.text:0000000000005FF8                 CBZ             W1, loc_60F8
.text:0000000000005FFC                 LDR             W21, [X19,#4]
.text:0000000000006000                 CBZ             W21, loc_60E0
.text:0000000000006004                 ADD             X1, X19, #4
.text:0000000000006008                 SUB             X21, X1, W21,SXTW
.text:000000000000600C                 CMP             X21, X0
.text:0000000000006010                 B.EQ            loc_607C
.text:0000000000006014                 MOV             X0, X21
.text:0000000000006018                 BL              get_cie_encoding
.text:000000000000601C                 CMP             W0, #0xFF
.text:0000000000006020                 MOV             W25, W0
.text:0000000000006024                 B.NE            loc_6030
.text:0000000000006028                 MOV             X0, #0xFFFFFFFFFFFFFFFF
.text:000000000000602C                 B               loc_60FC
.text:0000000000006030 ; ---------------------------------------------------------------------------
.text:0000000000006030 loc_6030                                ; CODE XREF: classify_object_over_fdes+6C↑j
.text:0000000000006030                 UXTB            W27, W0
.text:0000000000006034                 MOV             X1, X20
.text:0000000000006038                 MOV             W0, W27
.text:000000000000603C                 BL              base_from_object
.text:0000000000006040                 MOV             X26, X0
.text:0000000000006044                 LDRH            W1, [X20,#0x20]
.text:0000000000006048                 AND             W0, W1, #0x7F8
.text:000000000000604C                 CMP             W0, #0x7F8
.text:0000000000006050                 B.NE            loc_6060
.text:0000000000006054                 BFI             W1, W27, #3, #8
.text:0000000000006058                 STRH            W1, [X20,#0x20]
.text:000000000000605C                 B               loc_6080
.text:0000000000006060 ; ---------------------------------------------------------------------------
.text:0000000000006060 loc_6060                                ; CODE XREF: classify_object_over_fdes+98↑j
.text:0000000000006060                 UBFX            X1, X1, #3, #8
.text:0000000000006064                 CMP             W1, W25
.text:0000000000006068                 B.EQ            loc_6080
.text:000000000000606C                 LDRB            W0, [X20,#0x20]
.text:0000000000006070                 ORR             W0, W0, #4
.text:0000000000006074                 STRB            W0, [X20,#0x20]
.text:0000000000006078                 B               loc_6080
.text:000000000000607C ; ---------------------------------------------------------------------------
.text:000000000000607C loc_607C                                ; CODE XREF: classify_object_over_fdes+58↑j
.text:000000000000607C                 MOV             X21, X0
.text:0000000000006080 loc_6080                                ; CODE XREF: classify_object_over_fdes+A4↑j
.text:0000000000006080                                         ; classify_object_over_fdes+B0↑j ...
.text:0000000000006080                 UXTB            W27, W25
.text:0000000000006084                 MOV             X1, X26
.text:0000000000006088                 ADD             X2, X19, #8
.text:000000000000608C                 MOV             X3, X23
.text:0000000000006090                 MOV             W0, W27
.text:0000000000006094                 BL              read_encoded_value_with_base_0
.text:0000000000006098                 MOV             W0, W27
.text:000000000000609C                 BL              size_of_encoded_value
.text:00000000000060A0                 MOV             W0, W0
.text:00000000000060A4                 CMP             X0, #7
.text:00000000000060A8                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:00000000000060AC                 B.HI            loc_60BC
.text:00000000000060B0                 LSL             X1, X0, #3
.text:00000000000060B4                 LSL             X1, X24, X1
.text:00000000000060B8                 SUB             X1, X1, #1
.text:00000000000060BC loc_60BC                                ; CODE XREF: classify_object_over_fdes+F4↑j
.text:00000000000060BC                 LDR             X0, [X29,#0x70+var_8]
.text:00000000000060C0                 TST             X1, X0
.text:00000000000060C4                 B.EQ            loc_60E4
.text:00000000000060C8                 LDR             X1, [X20]
.text:00000000000060CC                 ADD             X22, X22, #1
.text:00000000000060D0                 CMP             X0, X1
.text:00000000000060D4                 B.CS            loc_60E4
.text:00000000000060D8                 STR             X0, [X20]
.text:00000000000060DC                 B               loc_60E4
.text:00000000000060E0 ; ---------------------------------------------------------------------------
.text:00000000000060E0 loc_60E0                                ; CODE XREF: classify_object_over_fdes+48↑j
.text:00000000000060E0                 MOV             X21, X0
.text:00000000000060E4 loc_60E4                                ; CODE XREF: classify_object_over_fdes+10C↑j
.text:00000000000060E4                                         ; classify_object_over_fdes+11C↑j ...
.text:00000000000060E4                 LDR             W0, [X19]
.text:00000000000060E8                 ADD             X0, X0, #4
.text:00000000000060EC                 ADD             X19, X19, X0
.text:00000000000060F0                 MOV             X0, X21
.text:00000000000060F4                 B               loc_5FF4
.text:00000000000060F8 ; ---------------------------------------------------------------------------
.text:00000000000060F8 loc_60F8                                ; CODE XREF: classify_object_over_fdes+40↑j
.text:00000000000060F8                 MOV             X0, X22
.text:00000000000060FC loc_60FC                                ; CODE XREF: classify_object_over_fdes+74↑j
.text:00000000000060FC                 LDP             X19, X20, [SP,#0x70+var_60]
.text:0000000000006100                 LDP             X21, X22, [SP,#0x70+var_50]
.text:0000000000006104                 LDP             X23, X24, [SP,#0x70+var_40]
.text:0000000000006108                 LDP             X25, X26, [SP,#0x70+var_30]
.text:000000000000610C                 LDR             X27, [SP,#0x70+var_20]
.text:0000000000006110                 LDP             X29, X30, [SP+0x70+var_70],#0x70
.text:0000000000006114                 RET
.text:0000000000006114 ; } // starts at 5FB8
.text:0000000000006114 ; End of function classify_object_over_fdes
.text:0000000000006118 ; =============== S U B R O U T I N E =======================================
.text:0000000000006118 ; Attributes: bp-based frame fpd=0x70
.text:0000000000006118 add_fdes                                ; CODE XREF: search_object+3F8↓p
.text:0000000000006118                                         ; search_object+40C↓p
.text:0000000000006118 var_70          = -0x70
.text:0000000000006118 var_60          = -0x60
.text:0000000000006118 var_50          = -0x50
.text:0000000000006118 var_40          = -0x40
.text:0000000000006118 var_30          = -0x30
.text:0000000000006118 var_20          = -0x20
.text:0000000000006118 var_8           = -8
.text:0000000000006118 ; __unwind {
.text:0000000000006118                 STP             X29, X30, [SP,#var_70]!
.text:000000000000611C                 MOV             X29, SP
.text:0000000000006120                 STP             X21, X22, [SP,#0x70+var_50]
.text:0000000000006124                 MOV             X22, X0
.text:0000000000006128                 LDRH            W0, [X0,#0x20]
.text:000000000000612C                 STP             X23, X24, [SP,#0x70+var_40]
.text:0000000000006130                 UBFX            X0, X0, #3, #8
.text:0000000000006134                 MOV             X23, X1
.text:0000000000006138                 MOV             X1, X22
.text:000000000000613C                 STR             X27, [SP,#0x70+var_20]
.text:0000000000006140                 STP             X25, X26, [SP,#0x70+var_30]
.text:0000000000006144                 STP             X19, X20, [SP,#0x70+var_60]
.text:0000000000006148                 UXTB            W21, W0
.text:000000000000614C                 MOV             X19, X2
.text:0000000000006150                 BL              base_from_object
.text:0000000000006154                 ADD             X24, X29, #0x68 ; 'h'
.text:0000000000006158                 MOV             X26, X0
.text:000000000000615C                 MOV             X25, #1
.text:0000000000006160                 MOV             X0, #0
.text:0000000000006164 loc_6164                                ; CODE XREF: add_fdes+114↓j
.text:0000000000006164                 LDR             W1, [X19]
.text:0000000000006168                 CBZ             W1, loc_6230
.text:000000000000616C                 LDR             W1, [X19,#4]
.text:0000000000006170                 MOV             X20, X0
.text:0000000000006174                 CBZ             W1, loc_621C
.text:0000000000006178                 LDRB            W2, [X22,#0x20]
.text:000000000000617C                 TBZ             W2, #2, loc_61A8
.text:0000000000006180                 ADD             X20, X19, #4
.text:0000000000006184                 SUB             X20, X20, W1,SXTW
.text:0000000000006188                 CMP             X20, X0
.text:000000000000618C                 B.EQ            loc_61A8
.text:0000000000006190                 MOV             X0, X20
.text:0000000000006194                 BL              get_cie_encoding
.text:0000000000006198                 MOV             W21, W0
.text:000000000000619C                 MOV             X1, X22
.text:00000000000061A0                 BL              base_from_object
.text:00000000000061A4                 MOV             X26, X0
.text:00000000000061A8 loc_61A8                                ; CODE XREF: add_fdes+64↑j
.text:00000000000061A8                                         ; add_fdes+74↑j
.text:00000000000061A8                 CBNZ            W21, loc_61B8
.text:00000000000061AC                 LDR             X0, [X19,#8]
.text:00000000000061B0                 CBZ             X0, loc_621C
.text:00000000000061B4                 B               loc_6200
.text:00000000000061B8 ; ---------------------------------------------------------------------------
.text:00000000000061B8 loc_61B8                                ; CODE XREF: add_fdes:loc_61A8↑j
.text:00000000000061B8                 UXTB            W27, W21
.text:00000000000061BC                 MOV             X1, X26
.text:00000000000061C0                 ADD             X2, X19, #8
.text:00000000000061C4                 MOV             X3, X24
.text:00000000000061C8                 MOV             W0, W27
.text:00000000000061CC                 BL              read_encoded_value_with_base_0
.text:00000000000061D0                 MOV             W0, W27
.text:00000000000061D4                 BL              size_of_encoded_value
.text:00000000000061D8                 MOV             W0, W0
.text:00000000000061DC                 CMP             X0, #7
.text:00000000000061E0                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:00000000000061E4                 B.HI            loc_61F4
.text:00000000000061E8                 LSL             X1, X0, #3
.text:00000000000061EC                 LSL             X1, X25, X1
.text:00000000000061F0                 SUB             X1, X1, #1
.text:00000000000061F4 loc_61F4                                ; CODE XREF: add_fdes+CC↑j
.text:00000000000061F4                 LDR             X0, [X29,#0x70+var_8]
.text:00000000000061F8                 TST             X1, X0
.text:00000000000061FC                 B.EQ            loc_621C
.text:0000000000006200 loc_6200                                ; CODE XREF: add_fdes+9C↑j
.text:0000000000006200                 LDR             X0, [X23]
.text:0000000000006204                 CBZ             X0, loc_621C
.text:0000000000006208                 LDR             X1, [X0,#8]
.text:000000000000620C                 ADD             X2, X1, #1
.text:0000000000006210                 ADD             X1, X1, #2
.text:0000000000006214                 STR             X2, [X0,#8]
.text:0000000000006218                 STR             X19, [X0,X1,LSL#3]
.text:000000000000621C loc_621C                                ; CODE XREF: add_fdes+5C↑j
.text:000000000000621C                                         ; add_fdes+98↑j ...
.text:000000000000621C                 LDR             W0, [X19]
.text:0000000000006220                 ADD             X0, X0, #4
.text:0000000000006224                 ADD             X19, X19, X0
.text:0000000000006228                 MOV             X0, X20
.text:000000000000622C                 B               loc_6164
.text:0000000000006230 ; ---------------------------------------------------------------------------
.text:0000000000006230 loc_6230                                ; CODE XREF: add_fdes+50↑j
.text:0000000000006230                 LDP             X19, X20, [SP,#0x70+var_60]
.text:0000000000006234                 LDP             X21, X22, [SP,#0x70+var_50]
.text:0000000000006238                 LDP             X23, X24, [SP,#0x70+var_40]
.text:000000000000623C                 LDP             X25, X26, [SP,#0x70+var_30]
.text:0000000000006240                 LDR             X27, [SP,#0x70+var_20]
.text:0000000000006244                 LDP             X29, X30, [SP+0x70+var_70],#0x70
.text:0000000000006248                 RET
.text:0000000000006248 ; } // starts at 6118
.text:0000000000006248 ; End of function add_fdes
.text:000000000000624C ; =============== S U B R O U T I N E =======================================
.text:000000000000624C ; Attributes: bp-based frame fpd=0x90
.text:000000000000624C search_object                           ; CODE XREF: _Unwind_Find_FDE+5C↓p
.text:000000000000624C                                         ; _Unwind_Find_FDE+90↓p
.text:000000000000624C var_90          = -0x90
.text:000000000000624C var_80          = -0x80
.text:000000000000624C var_70          = -0x70
.text:000000000000624C var_60          = -0x60
.text:000000000000624C var_50          = -0x50
.text:000000000000624C var_40          = -0x40
.text:000000000000624C var_30          = -0x30
.text:000000000000624C var_28          = -0x28
.text:000000000000624C var_18          = -0x18
.text:000000000000624C var_10          = -0x10
.text:000000000000624C ptr             = -8
.text:000000000000624C ; __unwind {
.text:000000000000624C                 STP             X29, X30, [SP,#var_90]!
.text:0000000000006250                 MOV             X29, SP
.text:0000000000006254                 STP             X21, X22, [SP,#0x90+var_70]
.text:0000000000006258                 MOV             X22, X1
.text:000000000000625C                 LDRB            W1, [X0,#0x20]
.text:0000000000006260                 STP             X19, X20, [SP,#0x90+var_80]
.text:0000000000006264                 STP             X23, X24, [SP,#0x90+var_60]
.text:0000000000006268                 STP             X25, X26, [SP,#0x90+var_50]
.text:000000000000626C                 STP             X27, X28, [SP,#0x90+var_40]
.text:0000000000006270                 MOV             X19, X0
.text:0000000000006274                 TBZ             W1, #0, loc_6284
.text:0000000000006278 loc_6278                                ; CODE XREF: search_object+1D8↓j
.text:0000000000006278                 LDRB            W0, [X19,#0x20]
.text:000000000000627C                 TBNZ            W0, #0, loc_6430
.text:0000000000006280                 B               loc_65E4
.text:0000000000006284 ; ---------------------------------------------------------------------------
.text:0000000000006284 loc_6284                                ; CODE XREF: search_object+28↑j
.text:0000000000006284                 LDR             W20, [X0,#0x20]
.text:0000000000006288                 UBFX            X20, X20, #0xB, #0x15
.text:000000000000628C                 CBNZ            X20, loc_6318
.text:0000000000006290                 TBZ             W1, #1, loc_62DC
.text:0000000000006294                 LDR             X21, [X0,#0x18]
.text:0000000000006298 loc_6298                                ; CODE XREF: search_object+8C↓j
.text:0000000000006298                 LDR             X1, [X21]
.text:000000000000629C                 CBZ             X1, loc_62F0
.text:00000000000062A0                 MOV             X0, X19
.text:00000000000062A4                 BL              classify_object_over_fdes
.text:00000000000062A8                 CMN             X0, #1
.text:00000000000062AC                 B.NE            loc_62D0
.text:00000000000062B0 loc_62B0                                ; CODE XREF: search_object+A0↓j
.text:00000000000062B0                 MOV             W0, #0x7F8
.text:00000000000062B4                 STR             XZR, [X19,#0x20]
.text:00000000000062B8                 STRH            W0, [X19,#0x20]
.text:00000000000062BC                 ADRP            X0, #subs.7607@PAGE
.text:00000000000062C0                 ADD             X0, X0, #subs.7607@PAGEOFF
.text:00000000000062C4                 ADD             X0, X0, #0x198
.text:00000000000062C8                 STR             X0, [X19,#0x18]
.text:00000000000062CC                 B               loc_641C
.text:00000000000062D0 ; ---------------------------------------------------------------------------
.text:00000000000062D0 loc_62D0                                ; CODE XREF: search_object+60↑j
.text:00000000000062D0                 ADD             X20, X20, X0
.text:00000000000062D4                 ADD             X21, X21, #8
.text:00000000000062D8                 B               loc_6298
.text:00000000000062DC ; ---------------------------------------------------------------------------
.text:00000000000062DC loc_62DC                                ; CODE XREF: search_object+44↑j
.text:00000000000062DC                 LDR             X1, [X0,#0x18]
.text:00000000000062E0                 BL              classify_object_over_fdes
.text:00000000000062E4                 CMN             X0, #1
.text:00000000000062E8                 MOV             X20, X0
.text:00000000000062EC                 B.EQ            loc_62B0
.text:00000000000062F0 loc_62F0                                ; CODE XREF: search_object+50↑j
.text:00000000000062F0                 AND             W0, W20, #0x1FFFFF
.text:00000000000062F4                 CMP             X0, X20
.text:00000000000062F8                 MOV             X1, X0
.text:00000000000062FC                 LDR             W0, [X19,#0x20]
.text:0000000000006300                 B.NE            loc_630C
.text:0000000000006304                 BFI             W0, W1, #0xB, #0x15
.text:0000000000006308                 B               loc_6310
.text:000000000000630C ; ---------------------------------------------------------------------------
.text:000000000000630C loc_630C                                ; CODE XREF: search_object+B4↑j
.text:000000000000630C                 AND             W0, W0, #0x7FF
.text:0000000000006310 loc_6310                                ; CODE XREF: search_object+BC↑j
.text:0000000000006310                 STR             W0, [X19,#0x20]
.text:0000000000006314                 CBZ             X20, loc_641C
.text:0000000000006318 loc_6318                                ; CODE XREF: search_object+40↑j
.text:0000000000006318                 ADD             X21, X20, #2
.text:000000000000631C                 LSL             X21, X21, #3
.text:0000000000006320                 MOV             X0, X21 ; size
.text:0000000000006324                 BL              .malloc
.text:0000000000006328                 STR             X0, [X29,#0x90+var_10]
.text:000000000000632C                 CBZ             X0, loc_641C
.text:0000000000006330                 STR             XZR, [X0,#8]
.text:0000000000006334                 MOV             X0, X21 ; size
.text:0000000000006338                 BL              .malloc
.text:000000000000633C                 STR             X0, [X29,#0x90+ptr]
.text:0000000000006340                 CBZ             X0, loc_6620
.text:0000000000006344                 STR             XZR, [X0,#8]
.text:0000000000006348                 B               loc_6620
.text:000000000000634C ; ---------------------------------------------------------------------------
.text:000000000000634C loc_634C                                ; CODE XREF: search_object+128↓j
.text:000000000000634C                 ADD             X4, X25, X2,LSL#3
.text:0000000000006350                 LDR             X5, [X26]
.text:0000000000006354                 LDR             X4, [X4,#0x10]
.text:0000000000006358                 CBZ             X4, loc_6740
.text:000000000000635C                 ADD             X4, X1, #2
.text:0000000000006360                 ADD             X1, X1, #1
.text:0000000000006364                 STR             X5, [X24,X4,LSL#3]
.text:0000000000006368 loc_6368                                ; CODE XREF: search_object+500↓j
.text:0000000000006368                 ADD             X2, X2, #1
.text:000000000000636C                 ADD             X26, X26, #8
.text:0000000000006370 loc_6370                                ; CODE XREF: search_object+4F0↓j
.text:0000000000006370                 CMP             X2, X3
.text:0000000000006374                 B.NE            loc_634C
.text:0000000000006378                 STR             X1, [X24,#8]
.text:000000000000637C                 STR             X0, [X25,#8]
.text:0000000000006380                 LDR             X2, [X29,#0x90+ptr]
.text:0000000000006384                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006388                 LDR             X1, [X2,#8]
.text:000000000000638C                 LDR             X0, [X0,#8]
.text:0000000000006390                 ADD             X0, X1, X0
.text:0000000000006394                 CMP             X0, X20
.text:0000000000006398                 B.NE            loc_6670
.text:000000000000639C                 MOV             X0, X19
.text:00000000000063A0                 MOV             X1, X23
.text:00000000000063A4                 BL              frame_heapsort
.text:00000000000063A8                 LDR             X27, [X29,#0x90+ptr]
.text:00000000000063AC                 LDR             X21, [X29,#0x90+var_10]
.text:00000000000063B0                 LDR             X20, [X27,#8]
.text:00000000000063B4                 CBZ             X20, loc_63F8
.text:00000000000063B8                 LDR             X24, [X21,#8]
.text:00000000000063BC                 LSL             X26, X20, #3
.text:00000000000063C0 loc_63C0                                ; CODE XREF: search_object+198↓j
.text:00000000000063C0                 ADD             X0, X27, X26
.text:00000000000063C4                 SUB             X20, X20, #1
.text:00000000000063C8                 ADD             X25, X21, X24,LSL#3
.text:00000000000063CC                 LDR             X28, [X0,#8]
.text:00000000000063D0 loc_63D0                                ; CODE XREF: search_object+53C↓j
.text:00000000000063D0                 CBNZ            X24, loc_6750
.text:00000000000063D4 loc_63D4                                ; CODE XREF: search_object+528↓j
.text:00000000000063D4                 ADD             X0, X20, X24
.text:00000000000063D8                 SUB             X26, X26, #8
.text:00000000000063DC                 ADD             X0, X0, #2
.text:00000000000063E0                 STR             X28, [X21,X0,LSL#3]
.text:00000000000063E4                 CBNZ            X20, loc_63C0
.text:00000000000063E8                 LDR             X1, [X21,#8]
.text:00000000000063EC                 LDR             X0, [X27,#8]
.text:00000000000063F0                 ADD             X0, X1, X0
.text:00000000000063F4                 STR             X0, [X21,#8]
.text:00000000000063F8 loc_63F8                                ; CODE XREF: search_object+168↑j
.text:00000000000063F8                 LDR             X0, [X29,#0x90+ptr] ; ptr
.text:00000000000063FC                 BL              .free
.text:0000000000006400 loc_6400                                ; CODE XREF: search_object+550↓j
.text:0000000000006400                 LDR             X0, [X29,#0x90+var_10]
.text:0000000000006404                 LDR             X1, [X19,#0x18]
.text:0000000000006408                 STR             X1, [X0]
.text:000000000000640C                 STR             X0, [X19,#0x18]
.text:0000000000006410                 LDRB            W0, [X19,#0x20]
.text:0000000000006414                 ORR             W0, W0, #1
.text:0000000000006418                 STRB            W0, [X19,#0x20]
.text:000000000000641C loc_641C                                ; CODE XREF: search_object+80↑j
.text:000000000000641C                                         ; search_object+C8↑j ...
.text:000000000000641C                 LDR             X0, [X19]
.text:0000000000006420                 CMP             X22, X0
.text:0000000000006424                 B.CS            loc_6278
.text:0000000000006428 loc_6428                                ; CODE XREF: search_object+200↓j
.text:0000000000006428                                         ; search_object+2A8↓j ...
.text:0000000000006428                 MOV             X0, #0
.text:000000000000642C                 B               loc_67A0
.text:0000000000006430 ; ---------------------------------------------------------------------------
.text:0000000000006430 loc_6430                                ; CODE XREF: search_object+30↑j
.text:0000000000006430                 TBZ             W0, #2, loc_64D8
.text:0000000000006434                 LDR             X27, [X19,#0x18]
.text:0000000000006438                 MOV             X24, #0
.text:000000000000643C                 ADD             X25, X29, #0x78 ; 'x'
.text:0000000000006440                 ADD             X26, X29, #0x80
.text:0000000000006444                 LDR             X23, [X27,#8]
.text:0000000000006448 loc_6448                                ; CODE XREF: search_object+288↓j
.text:0000000000006448                 CMP             X24, X23
.text:000000000000644C                 B.CS            loc_6428
.text:0000000000006450                 ADD             X21, X23, X24
.text:0000000000006454                 LSR             X21, X21, #1
.text:0000000000006458                 ADD             X0, X21, #2
.text:000000000000645C                 LDR             X20, [X27,X0,LSL#3]
.text:0000000000006460                 MOV             X0, X20
.text:0000000000006464                 BL              get_fde_encoding
.text:0000000000006468                 UXTB            W2, W0
.text:000000000000646C                 MOV             W28, W0
.text:0000000000006470                 MOV             X1, X19
.text:0000000000006474                 MOV             W0, W2
.text:0000000000006478                 STR             X2, [X29,#0x90+var_28]
.text:000000000000647C                 BL              base_from_object
.text:0000000000006480                 MOV             X1, X0
.text:0000000000006484                 LDR             X2, [X29,#0x90+var_28]
.text:0000000000006488                 MOV             X3, X25
.text:000000000000648C                 MOV             W0, W2
.text:0000000000006490                 ADD             X2, X20, #8
.text:0000000000006494                 BL              read_encoded_value_with_base_0
.text:0000000000006498                 MOV             X2, X0
.text:000000000000649C                 MOV             X1, #0
.text:00000000000064A0                 AND             W0, W28, #0xF
.text:00000000000064A4                 MOV             X3, X26
.text:00000000000064A8                 BL              read_encoded_value_with_base_0
.text:00000000000064AC                 LDR             X1, [X29,#0x90+var_18]
.text:00000000000064B0                 CMP             X22, X1
.text:00000000000064B4                 B.CC            loc_64D0
.text:00000000000064B8                 LDR             X0, [X29,#0x90+var_10]
.text:00000000000064BC                 ADD             X0, X1, X0
.text:00000000000064C0                 CMP             X22, X0
.text:00000000000064C4                 B.CC            loc_6564
.text:00000000000064C8                 ADD             X24, X21, #1
.text:00000000000064CC                 MOV             X21, X23
.text:00000000000064D0 loc_64D0                                ; CODE XREF: search_object+268↑j
.text:00000000000064D0                 MOV             X23, X21
.text:00000000000064D4                 B               loc_6448
.text:00000000000064D8 ; ---------------------------------------------------------------------------
.text:00000000000064D8 loc_64D8                                ; CODE XREF: search_object:loc_6430↑j
.text:00000000000064D8                 LDRH            W0, [X19,#0x20]
.text:00000000000064DC                 TST             W0, #0x7F8
.text:00000000000064E0                 B.NE            loc_6534
.text:00000000000064E4                 LDR             X5, [X19,#0x18]
.text:00000000000064E8                 MOV             X3, #0
.text:00000000000064EC                 LDR             X2, [X5,#8]
.text:00000000000064F0 loc_64F0                                ; CODE XREF: search_object+2DC↓j
.text:00000000000064F0                                         ; search_object+2E4↓j
.text:00000000000064F0                 CMP             X3, X2
.text:00000000000064F4                 B.CS            loc_6428
.text:00000000000064F8                 ADD             X1, X2, X3
.text:00000000000064FC                 LSR             X1, X1, #1
.text:0000000000006500                 ADD             X0, X1, #2
.text:0000000000006504                 LDR             X0, [X5,X0,LSL#3]
.text:0000000000006508                 LDR             X6, [X0,#8]
.text:000000000000650C                 LDR             X4, [X0,#0x10]
.text:0000000000006510                 CMP             X22, X6
.text:0000000000006514                 B.CC            loc_652C
.text:0000000000006518                 ADD             X3, X6, X4
.text:000000000000651C                 CMP             X22, X3
.text:0000000000006520                 B.CC            loc_67A0
.text:0000000000006524                 ADD             X3, X1, #1
.text:0000000000006528                 B               loc_64F0
.text:000000000000652C ; ---------------------------------------------------------------------------
.text:000000000000652C loc_652C                                ; CODE XREF: search_object+2C8↑j
.text:000000000000652C                 MOV             X2, X1
.text:0000000000006530                 B               loc_64F0
.text:0000000000006534 ; ---------------------------------------------------------------------------
.text:0000000000006534 loc_6534                                ; CODE XREF: search_object+294↑j
.text:0000000000006534                 UBFX            X0, X0, #3, #8
.text:0000000000006538                 LDR             X24, [X19,#0x18]
.text:000000000000653C                 MOV             X1, X19
.text:0000000000006540                 MOV             X23, #0
.text:0000000000006544                 UXTB            W25, W0
.text:0000000000006548                 ADD             X27, X29, #0x80
.text:000000000000654C                 BL              base_from_object
.text:0000000000006550                 AND             W26, W25, #0xF
.text:0000000000006554                 MOV             X28, X0
.text:0000000000006558                 LDR             X21, [X24,#8]
.text:000000000000655C                 ADD             X4, X29, #0x78 ; 'x'
.text:0000000000006560                 B               loc_65BC
.text:0000000000006564 ; ---------------------------------------------------------------------------
.text:0000000000006564 loc_6564                                ; CODE XREF: search_object+278↑j
.text:0000000000006564                                         ; search_object+388↓j
.text:0000000000006564                 MOV             X0, X20
.text:0000000000006568                 B               loc_67A0
.text:000000000000656C ; ---------------------------------------------------------------------------
.text:000000000000656C loc_656C                                ; CODE XREF: search_object+374↓j
.text:000000000000656C                 ADD             X19, X21, X23
.text:0000000000006570                 MOV             X3, X4
.text:0000000000006574                 LSR             X19, X19, #1
.text:0000000000006578                 MOV             X1, X28
.text:000000000000657C                 ADD             X0, X19, #2
.text:0000000000006580                 STR             X4, [X29,#0x90+var_28]
.text:0000000000006584                 LDR             X20, [X24,X0,LSL#3]
.text:0000000000006588                 MOV             W0, W25
.text:000000000000658C                 ADD             X2, X20, #8
.text:0000000000006590                 BL              read_encoded_value_with_base_0
.text:0000000000006594                 MOV             X2, X0
.text:0000000000006598                 MOV             X1, #0
.text:000000000000659C                 MOV             W0, W26
.text:00000000000065A0                 MOV             X3, X27
.text:00000000000065A4                 BL              read_encoded_value_with_base_0
.text:00000000000065A8                 LDR             X1, [X29,#0x90+var_18]
.text:00000000000065AC                 LDR             X4, [X29,#0x90+var_28]
.text:00000000000065B0                 CMP             X22, X1
.text:00000000000065B4                 B.CS            loc_65C8
.text:00000000000065B8 loc_65B8                                ; CODE XREF: search_object+394↓j
.text:00000000000065B8                 MOV             X21, X19
.text:00000000000065BC loc_65BC                                ; CODE XREF: search_object+314↑j
.text:00000000000065BC                 CMP             X23, X21
.text:00000000000065C0                 B.CC            loc_656C
.text:00000000000065C4                 B               loc_6428
.text:00000000000065C8 ; ---------------------------------------------------------------------------
.text:00000000000065C8 loc_65C8                                ; CODE XREF: search_object+368↑j
.text:00000000000065C8                 LDR             X0, [X29,#0x90+var_10]
.text:00000000000065CC                 ADD             X0, X1, X0
.text:00000000000065D0                 CMP             X22, X0
.text:00000000000065D4                 B.CC            loc_6564
.text:00000000000065D8                 ADD             X23, X19, #1
.text:00000000000065DC                 MOV             X19, X21
.text:00000000000065E0                 B               loc_65B8
.text:00000000000065E4 ; ---------------------------------------------------------------------------
.text:00000000000065E4 loc_65E4                                ; CODE XREF: search_object+34↑j
.text:00000000000065E4                 TBZ             W0, #1, loc_660C
.text:00000000000065E8                 LDR             X20, [X19,#0x18]
.text:00000000000065EC loc_65EC                                ; CODE XREF: search_object+3BC↓j
.text:00000000000065EC                 LDR             X1, [X20]
.text:00000000000065F0                 CBZ             X1, loc_6428
.text:00000000000065F4                 MOV             X0, X19
.text:00000000000065F8                 MOV             X2, X22
.text:00000000000065FC                 BL              linear_search_fdes
.text:0000000000006600                 CBNZ            X0, loc_67A0
.text:0000000000006604                 ADD             X20, X20, #8
.text:0000000000006608                 B               loc_65EC
.text:000000000000660C ; ---------------------------------------------------------------------------
.text:000000000000660C loc_660C                                ; CODE XREF: search_object:loc_65E4↑j
.text:000000000000660C                 LDR             X1, [X19,#0x18]
.text:0000000000006610                 MOV             X0, X19
.text:0000000000006614                 MOV             X2, X22
.text:0000000000006618                 BL              linear_search_fdes
.text:000000000000661C                 B               loc_67A0
.text:0000000000006620 ; ---------------------------------------------------------------------------
.text:0000000000006620 loc_6620                                ; CODE XREF: search_object+F4↑j
.text:0000000000006620                                         ; search_object+FC↑j
.text:0000000000006620                 LDRB            W0, [X19,#0x20]
.text:0000000000006624                 TBZ             W0, #1, loc_664C
.text:0000000000006628                 LDR             X21, [X19,#0x18]
.text:000000000000662C                 ADD             X23, X29, #0x80
.text:0000000000006630 loc_6630                                ; CODE XREF: search_object+3FC↓j
.text:0000000000006630                 LDR             X2, [X21]
.text:0000000000006634                 CBZ             X2, loc_665C
.text:0000000000006638                 MOV             X0, X19
.text:000000000000663C                 MOV             X1, X23
.text:0000000000006640                 ADD             X21, X21, #8
.text:0000000000006644                 BL              add_fdes
.text:0000000000006648                 B               loc_6630
.text:000000000000664C ; ---------------------------------------------------------------------------
.text:000000000000664C loc_664C                                ; CODE XREF: search_object+3D8↑j
.text:000000000000664C                 LDR             X2, [X19,#0x18]
.text:0000000000006650                 MOV             X0, X19
.text:0000000000006654                 ADD             X1, X29, #0x80
.text:0000000000006658                 BL              add_fdes
.text:000000000000665C loc_665C                                ; CODE XREF: search_object+3E8↑j
.text:000000000000665C                 LDR             X24, [X29,#0x90+var_10]
.text:0000000000006660                 CBZ             X24, loc_6674
.text:0000000000006664                 LDR             X0, [X24,#8]
.text:0000000000006668                 CMP             X0, X20
.text:000000000000666C                 B.EQ            loc_6674
.text:0000000000006670 loc_6670                                ; CODE XREF: search_object+14C↑j
.text:0000000000006670                 BL              .abort
.text:0000000000006674 ; ---------------------------------------------------------------------------
.text:0000000000006674 loc_6674                                ; CODE XREF: search_object+414↑j
.text:0000000000006674                                         ; search_object+420↑j
.text:0000000000006674                 LDRB            W0, [X19,#0x20]
.text:0000000000006678                 TBNZ            W0, #2, loc_6694
.text:000000000000667C                 LDRH            W0, [X19,#0x20]
.text:0000000000006680                 TST             W0, #0x7F8
.text:0000000000006684                 B.EQ            loc_66A0
.text:0000000000006688                 ADRP            X23, #fde_single_encoding_compare@PAGE
.text:000000000000668C                 ADD             X23, X23, #fde_single_encoding_compare@PAGEOFF
.text:0000000000006690                 B               loc_66A8
.text:0000000000006694 ; ---------------------------------------------------------------------------
.text:0000000000006694 loc_6694                                ; CODE XREF: search_object+42C↑j
.text:0000000000006694                 ADRP            X23, #fde_mixed_encoding_compare@PAGE
.text:0000000000006698                 ADD             X23, X23, #fde_mixed_encoding_compare@PAGEOFF
.text:000000000000669C                 B               loc_66A8
.text:00000000000066A0 ; ---------------------------------------------------------------------------
.text:00000000000066A0 loc_66A0                                ; CODE XREF: search_object+438↑j
.text:00000000000066A0                 ADRP            X23, #fde_unencoded_compare@PAGE
.text:00000000000066A4                 ADD             X23, X23, #fde_unencoded_compare@PAGEOFF
.text:00000000000066A8 loc_66A8                                ; CODE XREF: search_object+444↑j
.text:00000000000066A8                                         ; search_object+450↑j
.text:00000000000066A8                 LDR             X25, [X29,#0x90+ptr]
.text:00000000000066AC                 CBZ             X25, loc_678C
.text:00000000000066B0                 ADRP            X21, #subs.7607@PAGE
.text:00000000000066B4                 ADD             X26, X24, #0x10
.text:00000000000066B8                 ADD             X21, X21, #subs.7607@PAGEOFF
.text:00000000000066BC                 LDR             X3, [X24,#8]
.text:00000000000066C0                 ADD             X21, X21, #0x190
.text:00000000000066C4                 MOV             X28, X26
.text:00000000000066C8                 MOV             X27, #0
.text:00000000000066CC                 MOV             X4, X21
.text:00000000000066D0 loc_66D0                                ; CODE XREF: search_object+4E0↓j
.text:00000000000066D0                 CMP             X27, X3
.text:00000000000066D4                 B.EQ            loc_6730
.text:00000000000066D8 loc_66D8                                ; CODE XREF: search_object+4C8↓j
.text:00000000000066D8                 CMP             X21, X4
.text:00000000000066DC                 B.EQ            loc_6718
.text:00000000000066E0                 LDR             X1, [X28]
.text:00000000000066E4                 MOV             X0, X19
.text:00000000000066E8                 LDR             X2, [X21]
.text:00000000000066EC                 STR             X4, [X29,#0x90+var_30]
.text:00000000000066F0                 STR             X3, [X29,#0x90+var_28]
.text:00000000000066F4                 BLR             X23
.text:00000000000066F8                 LDR             X3, [X29,#0x90+var_28]
.text:00000000000066FC                 LDR             X4, [X29,#0x90+var_30]
.text:0000000000006700                 TBZ             W0, #0x1F, loc_6718
.text:0000000000006704                 SUB             X0, X21, X26
.text:0000000000006708                 ADD             X0, X25, X0
.text:000000000000670C                 LDR             X21, [X0,#0x10]
.text:0000000000006710                 STR             XZR, [X0,#0x10]
.text:0000000000006714                 B               loc_66D8
.text:0000000000006718 ; ---------------------------------------------------------------------------
.text:0000000000006718 loc_6718                                ; CODE XREF: search_object+490↑j
.text:0000000000006718                                         ; search_object+4B4↑j
.text:0000000000006718                 ADD             X0, X25, X27,LSL#3
.text:000000000000671C                 ADD             X27, X27, #1
.text:0000000000006720                 STR             X21, [X0,#0x10]
.text:0000000000006724                 MOV             X21, X28
.text:0000000000006728                 ADD             X28, X28, #8
.text:000000000000672C                 B               loc_66D0
.text:0000000000006730 ; ---------------------------------------------------------------------------
.text:0000000000006730 loc_6730                                ; CODE XREF: search_object+488↑j
.text:0000000000006730                 MOV             X0, #0
.text:0000000000006734                 MOV             X1, #0
.text:0000000000006738                 MOV             X2, #0
.text:000000000000673C                 B               loc_6370
.text:0000000000006740 ; ---------------------------------------------------------------------------
.text:0000000000006740 loc_6740                                ; CODE XREF: search_object+10C↑j
.text:0000000000006740                 ADD             X4, X0, #2
.text:0000000000006744                 ADD             X0, X0, #1
.text:0000000000006748                 STR             X5, [X25,X4,LSL#3]
.text:000000000000674C                 B               loc_6368
.text:0000000000006750 ; ---------------------------------------------------------------------------
.text:0000000000006750 loc_6750                                ; CODE XREF: search_object:loc_63D0↑j
.text:0000000000006750                 LDR             X1, [X25,#8]
.text:0000000000006754                 SUB             X3, X24, #1
.text:0000000000006758                 MOV             X0, X19
.text:000000000000675C                 STR             X3, [X29,#0x90+var_28]
.text:0000000000006760                 MOV             X2, X28
.text:0000000000006764                 SUB             X25, X25, #8
.text:0000000000006768                 BLR             X23
.text:000000000000676C                 CMP             W0, WZR
.text:0000000000006770                 LDR             X3, [X29,#0x90+var_28]
.text:0000000000006774                 B.LE            loc_63D4
.text:0000000000006778                 ADD             X0, X25, X26
.text:000000000000677C                 LDR             X1, [X25,#0x10]
.text:0000000000006780                 MOV             X24, X3
.text:0000000000006784                 STR             X1, [X0,#0x10]
.text:0000000000006788                 B               loc_63D0
.text:000000000000678C ; ---------------------------------------------------------------------------
.text:000000000000678C loc_678C                                ; CODE XREF: search_object+460↑j
.text:000000000000678C                 MOV             X0, X19
.text:0000000000006790                 MOV             X1, X23
.text:0000000000006794                 MOV             X2, X24
.text:0000000000006798                 BL              frame_heapsort
.text:000000000000679C                 B               loc_6400
.text:00000000000067A0 ; ---------------------------------------------------------------------------
.text:00000000000067A0 loc_67A0                                ; CODE XREF: search_object+1E0↑j
.text:00000000000067A0                                         ; search_object+2D4↑j ...
.text:00000000000067A0                 LDP             X19, X20, [SP,#0x90+var_80]
.text:00000000000067A4                 LDP             X21, X22, [SP,#0x90+var_70]
.text:00000000000067A8                 LDP             X23, X24, [SP,#0x90+var_60]
.text:00000000000067AC                 LDP             X25, X26, [SP,#0x90+var_50]
.text:00000000000067B0                 LDP             X27, X28, [SP,#0x90+var_40]
.text:00000000000067B4                 LDP             X29, X30, [SP+0x90+var_90],#0x90
.text:00000000000067B8                 RET
.text:00000000000067B8 ; } // starts at 624C
.text:00000000000067B8 ; End of function search_object
.text:00000000000067BC ; =============== S U B R O U T I N E =======================================
.text:00000000000067BC ; Attributes: bp-based frame fpd=0x30
.text:00000000000067BC                 EXPORT __register_frame_info_bases
.text:00000000000067BC __register_frame_info_bases             ; CODE XREF: .__register_frame_info_bases+C↑j
.text:00000000000067BC                                         ; DATA XREF: LOAD:00000000000009D0↑o ...
.text:00000000000067BC var_30          = -0x30
.text:00000000000067BC var_20          = -0x20
.text:00000000000067BC var_10          = -0x10
.text:00000000000067BC ; __unwind {
.text:00000000000067BC                 STP             X29, X30, [SP,#var_30]!
.text:00000000000067C0                 MOV             X29, SP
.text:00000000000067C4                 STP             X19, X20, [SP,#0x30+var_20]
.text:00000000000067C8                 STR             X21, [SP,#0x30+var_10]
.text:00000000000067CC                 CBZ             X0, loc_6848
.text:00000000000067D0                 LDR             W4, [X0]
.text:00000000000067D4                 CBZ             W4, loc_6848
.text:00000000000067D8                 MOV             X19, X1
.text:00000000000067DC                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:00000000000067E0                 ADRP            X20, #subs.7607@PAGE
.text:00000000000067E4                 STR             X1, [X19]
.text:00000000000067E8                 ADRP            X1, #pthread_create_ptr@PAGE
.text:00000000000067EC                 STR             XZR, [X19,#0x20]
.text:00000000000067F0                 MOV             X21, X1
.text:00000000000067F4                 STR             X0, [X19,#0x18]
.text:00000000000067F8                 MOV             W0, #0x7F8
.text:00000000000067FC                 STR             X2, [X19,#8]
.text:0000000000006800                 STR             X3, [X19,#0x10]
.text:0000000000006804                 STRH            W0, [X19,#0x20]
.text:0000000000006808                 LDR             X0, [X1,#pthread_create_ptr@PAGEOFF]
.text:000000000000680C                 CBZ             X0, loc_681C
.text:0000000000006810                 ADD             X0, X20, #subs.7607@PAGEOFF
.text:0000000000006814                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000006818                 BL              .pthread_mutex_lock
.text:000000000000681C loc_681C                                ; CODE XREF: __register_frame_info_bases+50↑j
.text:000000000000681C                 ADD             X0, X20, #subs.7607@PAGEOFF
.text:0000000000006820                 LDR             X1, [X0,#(unseen_objects - 0x189F8)]
.text:0000000000006824                 STR             X1, [X19,#0x28]
.text:0000000000006828                 STR             X19, [X0,#(unseen_objects - 0x189F8)]
.text:000000000000682C                 LDR             X21, [X21,#(pthread_create_ptr - 0x18000)] ; pthread_create
.text:0000000000006830                 CBZ             X21, loc_6848
.text:0000000000006834                 LDP             X19, X20, [SP,#0x30+var_20]
.text:0000000000006838                 LDR             X21, [SP,#0x30+var_10]
.text:000000000000683C                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000006840                 LDP             X29, X30, [SP+0x30+var_30],#0x30
.text:0000000000006844                 B               .pthread_mutex_unlock
.text:0000000000006848 ; ---------------------------------------------------------------------------
.text:0000000000006848 loc_6848                                ; CODE XREF: __register_frame_info_bases+10↑j
.text:0000000000006848                                         ; __register_frame_info_bases+18↑j ...
.text:0000000000006848                 LDP             X19, X20, [SP,#0x30+var_20]
.text:000000000000684C                 LDR             X21, [SP,#0x30+var_10]
.text:0000000000006850                 LDP             X29, X30, [SP+0x30+var_30],#0x30
.text:0000000000006854                 RET
.text:0000000000006854 ; } // starts at 67BC
.text:0000000000006854 ; End of function __register_frame_info_bases
.text:0000000000006858 ; =============== S U B R O U T I N E =======================================
.text:0000000000006858                 EXPORT __register_frame_info
.text:0000000000006858 __register_frame_info                   ; CODE XREF: .__register_frame_info+C↑j
.text:0000000000006858                                         ; DATA XREF: LOAD:0000000000000838↑o ...
.text:0000000000006858 ; __unwind {
.text:0000000000006858                 MOV             X2, #0
.text:000000000000685C                 MOV             X3, #0
.text:0000000000006860                 B               .__register_frame_info_bases
.text:0000000000006860 ; } // starts at 6858
.text:0000000000006860 ; End of function __register_frame_info
.text:0000000000006864 ; =============== S U B R O U T I N E =======================================
.text:0000000000006864 ; Attributes: bp-based frame fpd=0x20
.text:0000000000006864                 EXPORT __register_frame
.text:0000000000006864 __register_frame                        ; DATA XREF: LOAD:0000000000000730↑o
.text:0000000000006864 var_20          = -0x20
.text:0000000000006864 var_10          = -0x10
.text:0000000000006864 ; __unwind {
.text:0000000000006864                 STP             X29, X30, [SP,#var_20]!
.text:0000000000006868                 MOV             X29, SP
.text:000000000000686C                 LDR             W1, [X0]
.text:0000000000006870                 STR             X19, [SP,#0x20+var_10]
.text:0000000000006874                 CBZ             W1, loc_6898
.text:0000000000006878                 MOV             X19, X0
.text:000000000000687C                 MOV             X0, #0x30 ; '0' ; size
.text:0000000000006880                 BL              .malloc
.text:0000000000006884                 MOV             X1, X0
.text:0000000000006888                 MOV             X0, X19
.text:000000000000688C                 LDR             X19, [SP,#0x20+var_10]
.text:0000000000006890                 LDP             X29, X30, [SP+0x20+var_20],#0x20
.text:0000000000006894                 B               .__register_frame_info
.text:0000000000006898 ; ---------------------------------------------------------------------------
.text:0000000000006898 loc_6898                                ; CODE XREF: __register_frame+10↑j
.text:0000000000006898                 LDR             X19, [SP,#0x20+var_10]
.text:000000000000689C                 LDP             X29, X30, [SP+0x20+var_20],#0x20
.text:00000000000068A0                 RET
.text:00000000000068A0 ; } // starts at 6864
.text:00000000000068A0 ; End of function __register_frame
.text:00000000000068A4 ; =============== S U B R O U T I N E =======================================
.text:00000000000068A4 ; Attributes: bp-based frame fpd=0x30
.text:00000000000068A4                 EXPORT __register_frame_info_table_bases
.text:00000000000068A4 __register_frame_info_table_bases       ; CODE XREF: .__register_frame_info_table_bases+C↑j
.text:00000000000068A4                                         ; DATA XREF: LOAD:0000000000000C58↑o ...
.text:00000000000068A4 var_30          = -0x30
.text:00000000000068A4 var_20          = -0x20
.text:00000000000068A4 var_8           = -8
.text:00000000000068A4 ; __unwind {
.text:00000000000068A4                 STP             X29, X30, [SP,#var_30]!
.text:00000000000068A8                 MOV             X4, #0xFFFFFFFFFFFFFFFF
.text:00000000000068AC                 MOV             X29, SP
.text:00000000000068B0                 STP             X19, X20, [SP,#0x30+var_20]
.text:00000000000068B4                 STR             XZR, [X1,#0x20]
.text:00000000000068B8                 ADRP            X19, #subs.7607@PAGE
.text:00000000000068BC                 STR             X0, [X1,#0x18]
.text:00000000000068C0                 MOV             W0, #2
.text:00000000000068C4                 STRB            W0, [X1,#0x20]
.text:00000000000068C8                 STR             X2, [X1,#8]
.text:00000000000068CC                 ADRP            X2, #pthread_create_ptr@PAGE
.text:00000000000068D0                 LDRH            W0, [X1,#0x20]
.text:00000000000068D4                 MOV             X20, X2
.text:00000000000068D8                 STR             X4, [X1]
.text:00000000000068DC                 ORR             W0, W0, #0x7F8
.text:00000000000068E0                 STR             X3, [X1,#0x10]
.text:00000000000068E4                 STRH            W0, [X1,#0x20]
.text:00000000000068E8                 LDR             X0, [X2,#pthread_create_ptr@PAGEOFF]
.text:00000000000068EC                 CBZ             X0, loc_6904
.text:00000000000068F0                 ADD             X0, X19, #subs.7607@PAGEOFF
.text:00000000000068F4                 STR             X1, [X29,#0x30+var_8]
.text:00000000000068F8                 ADD             X0, X0, #0x1A0 ; mutex
.text:00000000000068FC                 BL              .pthread_mutex_lock
.text:0000000000006900                 LDR             X1, [X29,#0x30+var_8]
.text:0000000000006904 loc_6904                                ; CODE XREF: __register_frame_info_table_bases+48↑j
.text:0000000000006904                 ADD             X0, X19, #subs.7607@PAGEOFF
.text:0000000000006908                 LDR             X2, [X0,#(unseen_objects - 0x189F8)]
.text:000000000000690C                 STR             X2, [X1,#0x28]
.text:0000000000006910                 STR             X1, [X0,#(unseen_objects - 0x189F8)]
.text:0000000000006914                 LDR             X20, [X20,#(pthread_create_ptr - 0x18000)] ; pthread_create
.text:0000000000006918                 CBZ             X20, loc_692C
.text:000000000000691C                 LDP             X19, X20, [SP,#0x30+var_20]
.text:0000000000006920                 LDP             X29, X30, [SP+0x30+var_30],#0x30
.text:0000000000006924                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000006928                 B               .pthread_mutex_unlock
.text:000000000000692C ; ---------------------------------------------------------------------------
.text:000000000000692C loc_692C                                ; CODE XREF: __register_frame_info_table_bases+74↑j
.text:000000000000692C                 LDP             X19, X20, [SP,#0x30+var_20]
.text:0000000000006930                 LDP             X29, X30, [SP+0x30+var_30],#0x30
.text:0000000000006934                 RET
.text:0000000000006934 ; } // starts at 68A4
.text:0000000000006934 ; End of function __register_frame_info_table_bases
.text:0000000000006938 ; =============== S U B R O U T I N E =======================================
.text:0000000000006938                 EXPORT __register_frame_info_table
.text:0000000000006938 __register_frame_info_table             ; CODE XREF: .__register_frame_info_table+C↑j
.text:0000000000006938                                         ; DATA XREF: LOAD:00000000000008E0↑o ...
.text:0000000000006938 ; __unwind {
.text:0000000000006938                 MOV             X2, #0
.text:000000000000693C                 MOV             X3, #0
.text:0000000000006940                 B               .__register_frame_info_table_bases
.text:0000000000006940 ; } // starts at 6938
.text:0000000000006940 ; End of function __register_frame_info_table
.text:0000000000006944 ; =============== S U B R O U T I N E =======================================
.text:0000000000006944 ; Attributes: bp-based frame fpd=0x20
.text:0000000000006944                 EXPORT __register_frame_table
.text:0000000000006944 __register_frame_table                  ; DATA XREF: LOAD:0000000000000C70↑o
.text:0000000000006944 var_20          = -0x20
.text:0000000000006944 var_10          = -0x10
.text:0000000000006944 ; __unwind {
.text:0000000000006944                 STP             X29, X30, [SP,#var_20]!
.text:0000000000006948                 MOV             X29, SP
.text:000000000000694C                 STR             X19, [SP,#0x20+var_10]
.text:0000000000006950                 MOV             X19, X0
.text:0000000000006954                 MOV             X0, #0x30 ; '0' ; size
.text:0000000000006958                 BL              .malloc
.text:000000000000695C                 MOV             X1, X0
.text:0000000000006960                 MOV             X0, X19
.text:0000000000006964                 LDR             X19, [SP,#0x20+var_10]
.text:0000000000006968                 LDP             X29, X30, [SP+0x20+var_20],#0x20
.text:000000000000696C                 B               .__register_frame_info_table
.text:000000000000696C ; } // starts at 6944
.text:000000000000696C ; End of function __register_frame_table
.text:0000000000006970 ; =============== S U B R O U T I N E =======================================
.text:0000000000006970 ; Attributes: bp-based frame
.text:0000000000006970                 EXPORT __deregister_frame_info_bases
.text:0000000000006970 __deregister_frame_info_bases           ; CODE XREF: .__deregister_frame_info_bases+C↑j
.text:0000000000006970                                         ; DATA XREF: LOAD:0000000000000778↑o ...
.text:0000000000006970 var_s0          =  0
.text:0000000000006970 var_s10         =  0x10
.text:0000000000006970 var_s20         =  0x20
.text:0000000000006970 ; __unwind {
.text:0000000000006970                 STP             X29, X30, [SP,#-0x30+var_s0]!
.text:0000000000006974                 MOV             X29, SP
.text:0000000000006978                 STP             X19, X20, [SP,#var_s10]
.text:000000000000697C                 STP             X21, X22, [SP,#var_s20]
.text:0000000000006980                 CBZ             X0, loc_6A30
.text:0000000000006984                 LDR             W1, [X0]
.text:0000000000006988                 CBZ             W1, loc_6A30
.text:000000000000698C                 ADRP            X20, #pthread_create_ptr@PAGE
.text:0000000000006990                 MOV             X21, X0
.text:0000000000006994                 ADRP            X22, #subs.7607@PAGE
.text:0000000000006998                 LDR             X0, [X20,#pthread_create_ptr@PAGEOFF]
.text:000000000000699C                 CBZ             X0, loc_69AC
.text:00000000000069A0                 ADD             X0, X22, #subs.7607@PAGEOFF
.text:00000000000069A4                 ADD             X0, X0, #0x1A0 ; mutex
.text:00000000000069A8                 BL              .pthread_mutex_lock
.text:00000000000069AC loc_69AC                                ; CODE XREF: __deregister_frame_info_bases+2C↑j
.text:00000000000069AC                 ADD             X0, X22, #subs.7607@PAGEOFF
.text:00000000000069B0                 ADD             X0, X0, #0x1C8
.text:00000000000069B4                 LDR             X19, [X0]
.text:00000000000069B8 loc_69B8                                ; CODE XREF: __deregister_frame_info_bases+60↓j
.text:00000000000069B8                 CBZ             X19, loc_69D4
.text:00000000000069BC                 LDR             X1, [X19,#0x18]
.text:00000000000069C0                 CMP             X1, X21
.text:00000000000069C4                 B.EQ            loc_6A00
.text:00000000000069C8                 ADD             X0, X19, #0x28 ; '('
.text:00000000000069CC                 LDR             X19, [X19,#0x28]
.text:00000000000069D0                 B               loc_69B8
.text:00000000000069D4 ; ---------------------------------------------------------------------------
.text:00000000000069D4 loc_69D4                                ; CODE XREF: __deregister_frame_info_bases:loc_69B8↑j
.text:00000000000069D4                 ADD             X0, X22, #subs.7607@PAGEOFF
.text:00000000000069D8                 ADD             X0, X0, #0x1D0
.text:00000000000069DC                 B               loc_69E4
.text:00000000000069E0 ; ---------------------------------------------------------------------------
.text:00000000000069E0 loc_69E0                                ; CODE XREF: __deregister_frame_info_bases+8C↓j
.text:00000000000069E0                                         ; __deregister_frame_info_bases+A8↓j
.text:00000000000069E0                 ADD             X0, X19, #0x28 ; '('
.text:00000000000069E4 loc_69E4                                ; CODE XREF: __deregister_frame_info_bases+6C↑j
.text:00000000000069E4                 LDR             X19, [X0]
.text:00000000000069E8                 CBZ             X19, loc_6A38
.text:00000000000069EC                 LDRB            W1, [X19,#0x20]
.text:00000000000069F0                 TBNZ            W1, #0, loc_6A0C
.text:00000000000069F4                 LDR             X1, [X19,#0x18]
.text:00000000000069F8                 CMP             X1, X21
.text:00000000000069FC                 B.NE            loc_69E0
.text:0000000000006A00 loc_6A00                                ; CODE XREF: __deregister_frame_info_bases+54↑j
.text:0000000000006A00                 LDR             X1, [X19,#0x28]
.text:0000000000006A04                 STR             X1, [X0]
.text:0000000000006A08                 B               loc_6A54
.text:0000000000006A0C ; ---------------------------------------------------------------------------
.text:0000000000006A0C loc_6A0C                                ; CODE XREF: __deregister_frame_info_bases+80↑j
.text:0000000000006A0C                 LDR             X1, [X19,#0x18]
.text:0000000000006A10                 LDR             X1, [X1]
.text:0000000000006A14                 CMP             X1, X21
.text:0000000000006A18                 B.NE            loc_69E0
.text:0000000000006A1C                 LDR             X1, [X19,#0x28]
.text:0000000000006A20                 STR             X1, [X0]
.text:0000000000006A24                 LDR             X0, [X19,#0x18] ; ptr
.text:0000000000006A28                 BL              .free
.text:0000000000006A2C                 B               loc_6A54
.text:0000000000006A30 ; ---------------------------------------------------------------------------
.text:0000000000006A30 loc_6A30                                ; CODE XREF: __deregister_frame_info_bases+10↑j
.text:0000000000006A30                                         ; __deregister_frame_info_bases+18↑j
.text:0000000000006A30                 MOV             X19, #0
.text:0000000000006A34                 B               loc_6A5C
.text:0000000000006A38 ; ---------------------------------------------------------------------------
.text:0000000000006A38 loc_6A38                                ; CODE XREF: __deregister_frame_info_bases+78↑j
.text:0000000000006A38                 LDR             X20, [X20,#pthread_create_ptr@PAGEOFF]
.text:0000000000006A3C                 CBZ             X20, loc_6A50
.text:0000000000006A40 loc_6A40                                ; CODE XREF: __deregister_frame_info_bases+E8↓j
.text:0000000000006A40                 ADD             X0, X22, #subs.7607@PAGEOFF
.text:0000000000006A44                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000006A48                 BL              .pthread_mutex_unlock
.text:0000000000006A4C                 CBNZ            X19, loc_6A5C
.text:0000000000006A50 loc_6A50                                ; CODE XREF: __deregister_frame_info_bases+CC↑j
.text:0000000000006A50                 BL              .abort
.text:0000000000006A54 ; ---------------------------------------------------------------------------
.text:0000000000006A54 loc_6A54                                ; CODE XREF: __deregister_frame_info_bases+98↑j
.text:0000000000006A54                                         ; __deregister_frame_info_bases+BC↑j
.text:0000000000006A54                 LDR             X20, [X20,#pthread_create_ptr@PAGEOFF]
.text:0000000000006A58                 CBNZ            X20, loc_6A40
.text:0000000000006A5C loc_6A5C                                ; CODE XREF: __deregister_frame_info_bases+C4↑j
.text:0000000000006A5C                                         ; __deregister_frame_info_bases+DC↑j
.text:0000000000006A5C                 MOV             X0, X19
.text:0000000000006A60                 LDP             X19, X20, [SP,#var_s10]
.text:0000000000006A64                 LDP             X21, X22, [SP,#var_s20]
.text:0000000000006A68                 LDP             X29, X30, [SP+var_s0],#0x30
.text:0000000000006A6C                 RET
.text:0000000000006A6C ; } // starts at 6970
.text:0000000000006A6C ; End of function __deregister_frame_info_bases
.text:0000000000006A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A70                 EXPORT __deregister_frame_info
.text:0000000000006A70 __deregister_frame_info                 ; CODE XREF: .__deregister_frame_info+C↑j
.text:0000000000006A70                                         ; DATA XREF: LOAD:00000000000005B0↑o ...
.text:0000000000006A70 ; __unwind {
.text:0000000000006A70                 B               .__deregister_frame_info_bases
.text:0000000000006A70 ; } // starts at 6A70
.text:0000000000006A70 ; End of function __deregister_frame_info
.text:0000000000006A74 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A74 ; Attributes: bp-based frame
.text:0000000000006A74                 EXPORT __deregister_frame
.text:0000000000006A74 __deregister_frame                      ; DATA XREF: LOAD:0000000000000520↑o
.text:0000000000006A74 var_s0          =  0
.text:0000000000006A74 ; __unwind {
.text:0000000000006A74                 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:0000000000006A78                 MOV             X29, SP
.text:0000000000006A7C                 LDR             W1, [X0]
.text:0000000000006A80                 CBZ             W1, loc_6A90
.text:0000000000006A84                 BL              .__deregister_frame_info
.text:0000000000006A88                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000006A8C                 B               .free
.text:0000000000006A90 ; ---------------------------------------------------------------------------
.text:0000000000006A90 loc_6A90                                ; CODE XREF: __deregister_frame+C↑j
.text:0000000000006A90                 LDP             X29, X30, [SP+var_s0],#0x10
.text:0000000000006A94                 RET
.text:0000000000006A94 ; } // starts at 6A74
.text:0000000000006A94 ; End of function __deregister_frame
.text:0000000000006A98 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A98 ; Attributes: bp-based frame fpd=0x80
.text:0000000000006A98                 EXPORT _Unwind_Find_FDE
.text:0000000000006A98 _Unwind_Find_FDE                        ; CODE XREF: ._Unwind_Find_FDE+C↑j
.text:0000000000006A98                                         ; DATA XREF: LOAD:00000000000004A8↑o ...
.text:0000000000006A98 var_80          = -0x80
.text:0000000000006A98 var_70          = -0x70
.text:0000000000006A98 var_60          = -0x60
.text:0000000000006A98 var_50          = -0x50
.text:0000000000006A98 var_40          = -0x40
.text:0000000000006A98 var_30          = -0x30
.text:0000000000006A98 var_28          = -0x28
.text:0000000000006A98 var_20          = -0x20
.text:0000000000006A98 var_18          = -0x18
.text:0000000000006A98 var_10          = -0x10
.text:0000000000006A98 var_8           = -8
.text:0000000000006A98 ; __unwind {
.text:0000000000006A98                 STP             X29, X30, [SP,#var_80]!
.text:0000000000006A9C                 MOV             X29, SP
.text:0000000000006AA0                 STP             X21, X22, [SP,#0x80+var_60]
.text:0000000000006AA4                 ADRP            X21, #pthread_create_ptr@PAGE
.text:0000000000006AA8                 STR             X25, [SP,#0x80+var_40]
.text:0000000000006AAC                 STP             X23, X24, [SP,#0x80+var_50]
.text:0000000000006AB0                 MOV             X23, X0
.text:0000000000006AB4                 MOV             X22, X1
.text:0000000000006AB8                 LDR             X0, [X21,#pthread_create_ptr@PAGEOFF]
.text:0000000000006ABC                 ADRP            X25, #subs.7607@PAGE
.text:0000000000006AC0                 STP             X19, X20, [SP,#0x80+var_70]
.text:0000000000006AC4                 CBZ             X0, loc_6AD4
.text:0000000000006AC8                 ADD             X0, X25, #subs.7607@PAGEOFF
.text:0000000000006ACC                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000006AD0                 BL              .pthread_mutex_lock
.text:0000000000006AD4 loc_6AD4                                ; CODE XREF: _Unwind_Find_FDE+2C↑j
.text:0000000000006AD4                 ADD             X0, X25, #subs.7607@PAGEOFF
.text:0000000000006AD8                 LDR             X19, [X0,#(seen_objects - 0x189F8)]
.text:0000000000006ADC loc_6ADC                                ; CODE XREF: _Unwind_Find_FDE+70↓j
.text:0000000000006ADC                 CBZ             X19, loc_6B0C
.text:0000000000006AE0                 LDR             X0, [X19]
.text:0000000000006AE4                 CMP             X23, X0
.text:0000000000006AE8                 B.CC            loc_6B04
.text:0000000000006AEC                 MOV             X0, X19
.text:0000000000006AF0                 MOV             X1, X23
.text:0000000000006AF4                 BL              search_object
.text:0000000000006AF8                 MOV             X20, X0
.text:0000000000006AFC                 CBNZ            X0, loc_6C34
.text:0000000000006B00                 B               loc_6B0C
.text:0000000000006B04 ; ---------------------------------------------------------------------------
.text:0000000000006B04 loc_6B04                                ; CODE XREF: _Unwind_Find_FDE+50↑j
.text:0000000000006B04                 LDR             X19, [X19,#0x28]
.text:0000000000006B08                 B               loc_6ADC
.text:0000000000006B0C ; ---------------------------------------------------------------------------
.text:0000000000006B0C loc_6B0C                                ; CODE XREF: _Unwind_Find_FDE:loc_6ADC↑j
.text:0000000000006B0C                                         ; _Unwind_Find_FDE+68↑j
.text:0000000000006B0C                 ADD             X24, X25, #subs.7607@PAGEOFF
.text:0000000000006B10 loc_6B10                                ; CODE XREF: _Unwind_Find_FDE+C8↓j
.text:0000000000006B10                 LDR             X19, [X24,#(unseen_objects - 0x189F8)]
.text:0000000000006B14                 CBZ             X19, loc_6B68
.text:0000000000006B18                 LDR             X0, [X19,#0x28]
.text:0000000000006B1C                 MOV             X1, X23
.text:0000000000006B20                 STR             X0, [X24,#(unseen_objects - 0x189F8)]
.text:0000000000006B24                 MOV             X0, X19
.text:0000000000006B28                 BL              search_object
.text:0000000000006B2C                 MOV             X20, X0
.text:0000000000006B30                 LDR             X1, [X24,#(seen_objects - 0x189F8)]
.text:0000000000006B34                 ADD             X2, X24, #0x1D0
.text:0000000000006B38 loc_6B38                                ; CODE XREF: _Unwind_Find_FDE+BC↓j
.text:0000000000006B38                 CBZ             X1, loc_6B58
.text:0000000000006B3C                 LDR             X3, [X1]
.text:0000000000006B40                 LDR             X0, [X19]
.text:0000000000006B44                 CMP             X3, X0
.text:0000000000006B48                 B.CC            loc_6B58
.text:0000000000006B4C                 ADD             X2, X1, #0x28 ; '('
.text:0000000000006B50                 LDR             X1, [X1,#0x28]
.text:0000000000006B54                 B               loc_6B38
.text:0000000000006B58 ; ---------------------------------------------------------------------------
.text:0000000000006B58 loc_6B58                                ; CODE XREF: _Unwind_Find_FDE:loc_6B38↑j
.text:0000000000006B58                                         ; _Unwind_Find_FDE+B0↑j
.text:0000000000006B58                 STR             X1, [X19,#0x28]
.text:0000000000006B5C                 STR             X19, [X2]
.text:0000000000006B60                 CBZ             X20, loc_6B10
.text:0000000000006B64                 B               loc_6C34
.text:0000000000006B68 ; ---------------------------------------------------------------------------
.text:0000000000006B68 loc_6B68                                ; CODE XREF: _Unwind_Find_FDE+7C↑j
.text:0000000000006B68                 LDR             X21, [X21,#pthread_create_ptr@PAGEOFF]
.text:0000000000006B6C                 MOV             X20, #0
.text:0000000000006B70                 CBZ             X21, loc_6BD8
.text:0000000000006B74 loc_6B74                                ; CODE XREF: _Unwind_Find_FDE+1A0↓j
.text:0000000000006B74                 ADD             X0, X25, #subs.7607@PAGEOFF
.text:0000000000006B78                 ADD             X0, X0, #0x1A0 ; mutex
.text:0000000000006B7C                 BL              .pthread_mutex_unlock
.text:0000000000006B80                 CBZ             X20, loc_6BD8
.text:0000000000006B84 loc_6B84                                ; CODE XREF: _Unwind_Find_FDE+1A4↓j
.text:0000000000006B84                 LDR             X0, [X19,#8]
.text:0000000000006B88                 STR             X0, [X22]
.text:0000000000006B8C                 LDRB            W1, [X19,#0x20]
.text:0000000000006B90                 LDR             X0, [X19,#0x10]
.text:0000000000006B94                 STR             X0, [X22,#8]
.text:0000000000006B98                 LDRH            W0, [X19,#0x20]
.text:0000000000006B9C                 UBFX            X0, X0, #3, #8
.text:0000000000006BA0                 TBZ             W1, #2, loc_6BAC
.text:0000000000006BA4                 MOV             X0, X20
.text:0000000000006BA8                 BL              get_fde_encoding
.text:0000000000006BAC loc_6BAC                                ; CODE XREF: _Unwind_Find_FDE+108↑j
.text:0000000000006BAC                 UXTB            W21, W0
.text:0000000000006BB0                 MOV             X1, X19
.text:0000000000006BB4                 MOV             W0, W21
.text:0000000000006BB8                 BL              base_from_object
.text:0000000000006BBC                 MOV             X1, X0
.text:0000000000006BC0                 ADD             X2, X20, #8
.text:0000000000006BC4                 MOV             W0, W21
.text:0000000000006BC8                 ADD             X3, X29, #0x50 ; 'P'
.text:0000000000006BCC                 BL              read_encoded_value_with_base_0
.text:0000000000006BD0                 LDR             X0, [X29,#0x80+var_30]
.text:0000000000006BD4                 B               loc_6C2C
.text:0000000000006BD8 ; ---------------------------------------------------------------------------
.text:0000000000006BD8 loc_6BD8                                ; CODE XREF: _Unwind_Find_FDE+D8↑j
.text:0000000000006BD8                                         ; _Unwind_Find_FDE+E8↑j
.text:0000000000006BD8                 MOV             W0, #1
.text:0000000000006BDC                 ADD             X19, X29, #0x50 ; 'P'
.text:0000000000006BE0                 STR             W0, [X29,#0x80+var_8]
.text:0000000000006BE4                 ADRP            X0, #_Unwind_IteratePhdrCallback@PAGE
.text:0000000000006BE8                 ADD             X0, X0, #_Unwind_IteratePhdrCallback@PAGEOFF ; callback
.text:0000000000006BEC                 MOV             X1, X19 ; data
.text:0000000000006BF0                 STR             X23, [X29,#0x80+var_30]
.text:0000000000006BF4                 MOV             X20, #0
.text:0000000000006BF8                 STR             XZR, [X29,#0x80+var_28]
.text:0000000000006BFC                 STR             XZR, [X29,#0x80+var_20]
.text:0000000000006C00                 STR             XZR, [X29,#0x80+var_18]
.text:0000000000006C04                 STR             XZR, [X29,#0x80+var_10]
.text:0000000000006C08                 BL              .dl_iterate_phdr
.text:0000000000006C0C                 TBNZ            W0, #0x1F, loc_6C40
.text:0000000000006C10                 LDR             X20, [X29,#0x80+var_10]
.text:0000000000006C14                 CBZ             X20, loc_6C40
.text:0000000000006C18                 LDR             X0, [X19,#8]
.text:0000000000006C1C                 STR             X0, [X22]
.text:0000000000006C20                 LDR             X0, [X19,#0x10]
.text:0000000000006C24                 STR             X0, [X22,#8]
.text:0000000000006C28                 LDR             X0, [X19,#0x18]
.text:0000000000006C2C loc_6C2C                                ; CODE XREF: _Unwind_Find_FDE+13C↑j
.text:0000000000006C2C                 STR             X0, [X22,#0x10]
.text:0000000000006C30                 B               loc_6C40
.text:0000000000006C34 ; ---------------------------------------------------------------------------
.text:0000000000006C34 loc_6C34                                ; CODE XREF: _Unwind_Find_FDE+64↑j
.text:0000000000006C34                                         ; _Unwind_Find_FDE+CC↑j
.text:0000000000006C34                 LDR             X21, [X21,#pthread_create_ptr@PAGEOFF]
.text:0000000000006C38                 CBNZ            X21, loc_6B74
.text:0000000000006C3C                 B               loc_6B84
.text:0000000000006C40 ; ---------------------------------------------------------------------------
.text:0000000000006C40 loc_6C40                                ; CODE XREF: _Unwind_Find_FDE+174↑j
.text:0000000000006C40                                         ; _Unwind_Find_FDE+17C↑j ...
.text:0000000000006C40                 MOV             X0, X20
.text:0000000000006C44                 LDR             X25, [SP,#0x80+var_40]
.text:0000000000006C48                 LDP             X19, X20, [SP,#0x80+var_70]
.text:0000000000006C4C                 LDP             X21, X22, [SP,#0x80+var_60]
.text:0000000000006C50                 LDP             X23, X24, [SP,#0x80+var_50]
.text:0000000000006C54                 LDP             X29, X30, [SP+0x80+var_80],#0x80
.text:0000000000006C58                 RET
.text:0000000000006C58 ; } // starts at 6A98
.text:0000000000006C58 ; End of function _Unwind_Find_FDE
.text:0000000000006C58 ; .text         ends
