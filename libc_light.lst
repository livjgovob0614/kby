.text:00000000000E3510 BL              .__errno
.text:00000000000E3514 LDR             W0, [X0]
.text:00000000000E3518 BL              .strerror
.text:00000000000E351C ADRP            X1, #aLibc_0@PAGE ; "libc"
.text:00000000000E3520 ADRP            X2, #aPthreadCreateF@PAGE ; "pthread_create failed: couldn't mprotec"...
.text:00000000000E3524 MOV             X4, X0
.text:00000000000E3528 ADD             X1, X1, #aLibc_0@PAGEOFF ; "libc"
.text:00000000000E352C ADD             X2, X2, #aPthreadCreateF@PAGEOFF ; "pthread_create failed: couldn't mprotec"...
.text:00000000000E3530 MOV             W0, #5
.text:00000000000E3534 MOV             X3, X24
.text:00000000000E3538 BL              async_safe_format_log
.text:00000000000E353C MOV             X0, X23
.text:00000000000E3540 MOV             X1, X20
.text:00000000000E3544 BL              .munmap
.text:00000000000E3548 B               loc_E3578
.text:00000000000E354C
.text:00000000000E354C loc_E354C
.text:00000000000E354C BL              .__errno
.text:00000000000E3550 LDR             W0, [X0]
.text:00000000000E3554 BL              .strerror
.text:00000000000E3558 ADRP            X1, #aLibc_0@PAGE ; "libc"
.text:00000000000E355C ADRP            X2, #aPthreadCreateF_0@PAGE ; "pthread_create failed: couldn't allocat"...
.text:00000000000E3560 MOV             X4, X0
.text:00000000000E3564 ADD             X1, X1, #aLibc_0@PAGEOFF ; "libc"
.text:00000000000E3568 ADD             X2, X2, #aPthreadCreateF_0@PAGEOFF ; "pthread_create failed: couldn't allocat"...
.text:00000000000E356C MOV             W0, #5
.text:00000000000E3570 MOV             X3, X20
.text:00000000000E3574 BL              async_safe_format_log
.text:00000000000E3578
.text:00000000000E3578 loc_E3578
.text:00000000000E3578 MOVI            V0.2D, #0
.text:00000000000E357C STR             XZR, [X19,#0x20]
.text:00000000000E3580 STP             Q0, Q0, [X19]
.text:00000000000E3584
.text:00000000000E3584 loc_E3584
.text:00000000000E3584 LDP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E3588 LDP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E358C LDP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E3590 LDP             X24, X23, [SP+0x30+var_30],#0x40
.text:00000000000E3594 RET
.text:00000000000E3598
.text:00000000000E3598 loc_E3598
.text:00000000000E3598 LDR             X8, [X21,#0x450]
.text:00000000000E359C ADD             X9, X23, X20
.text:00000000000E35A0 STP             X23, X20, [X19]
.text:00000000000E35A4 SUB             X8, X9, X8
.text:00000000000E35A8 SUB             X8, X8, #1,LSL#12
.text:00000000000E35AC STP             X8, X23, [X19,#0x10]
.text:00000000000E35B0 STR             X8, [X19,#0x20]
.text:00000000000E35B4 B               loc_E3584
.text:00000000000E35B4 ; } // starts at E3468
.text:00000000000E35B4 ; End of function __allocate_thread_mapping(ulong,ulong)
.text:00000000000E35B4
.text:00000000000E35B8
.text:00000000000E35B8
.text:00000000000E35B8 ; Attributes: bp-based frame
.text:00000000000E35B8
.text:00000000000E35B8 WEAK pthread_create
.text:00000000000E35B8 pthread_create
.text:00000000000E35B8
.text:00000000000E35B8 var_100= -0x100
.text:00000000000E35B8 var_F8= -0xF8
.text:00000000000E35B8 var_F0= -0xF0
.text:00000000000E35B8 var_E8= -0xE8
.text:00000000000E35B8 var_DC= -0xDC
.text:00000000000E35B8 var_D8= -0xD8
.text:00000000000E35B8 var_D0= -0xD0
.text:00000000000E35B8 var_C8= -0xC8
.text:00000000000E35B8 var_C0= -0xC0
.text:00000000000E35B8 var_B0= -0xB0
.text:00000000000E35B8 var_A0= -0xA0
.text:00000000000E35B8 var_90= -0x90
.text:00000000000E35B8 var_70= -0x70
.text:00000000000E35B8 var_60= -0x60
.text:00000000000E35B8 var_50= -0x50
.text:00000000000E35B8 var_40= -0x40
.text:00000000000E35B8 var_30= -0x30
.text:00000000000E35B8 var_20= -0x20
.text:00000000000E35B8 var_10= -0x10
.text:00000000000E35B8 var_s0=  0
.text:00000000000E35B8
.text:00000000000E35B8 ; __unwind {
.text:00000000000E35B8 SUB             SP, SP, #0x110
.text:00000000000E35BC STP             X28, X27, [SP,#0x100+var_50]
.text:00000000000E35C0 STP             X26, X25, [SP,#0x100+var_40]
.text:00000000000E35C4 STP             X24, X23, [SP,#0x100+var_30]
.text:00000000000E35C8 STP             X22, X21, [SP,#0x100+var_20]
.text:00000000000E35CC STP             X20, X19, [SP,#0x100+var_10]
.text:00000000000E35D0 STP             X29, X30, [SP,#0x100+var_s0]
.text:00000000000E35D4 ADD             X29, SP, #0x100
.text:00000000000E35D8 MRS             X22, #3, c13, c0, #2
.text:00000000000E35DC MOV             X21, X3
.text:00000000000E35E0 LDR             X8, [X22,#0x28]
.text:00000000000E35E4 MOV             X26, X2
.text:00000000000E35E8 MOV             X23, X1
.text:00000000000E35EC MOV             X20, X0
.text:00000000000E35F0 STUR            X8, [X29,#var_60]
.text:00000000000E35F4 BL              .__errno
.text:00000000000E35F8 ADRP            X1, #aPthreadCreate_0@PAGE ; "pthread_create"
.text:00000000000E35FC LDR             W25, [X0]
.text:00000000000E3600 MOV             X19, X0
.text:00000000000E3604 ADD             X1, X1, #aPthreadCreate_0@PAGEOFF ; "pthread_create"
.text:00000000000E3608 ADD             X0, SP, #0x100+var_D0 ; this
.text:00000000000E360C BL              _ZN11ScopedTraceC2EPKc ; ScopedTrace::ScopedTrace(char const*)
.text:00000000000E3610 CBZ             X23, loc_E3684
.text:00000000000E3614 LDR             X8, [X23,#0x30]
.text:00000000000E3618 LDP             Q1, Q0, [X23,#0x10]
.text:00000000000E361C LDR             Q2, [X23]
.text:00000000000E3620 STR             X8, [SP,#0x100+var_70]
.text:00000000000E3624 STP             Q1, Q0, [SP,#0x100+var_90]
.text:00000000000E3628 STR             Q2, [SP,#0x100+var_A0]
.text:00000000000E362C LDR             X8, [SP,#0x100+var_A0+8]
.text:00000000000E3630 CBZ             X8, loc_E3694
.text:00000000000E3634
.text:00000000000E3634 loc_E3634
.text:00000000000E3634 ADD             X8, SP, #0x100+var_C8
.text:00000000000E3638 MOV             X0, XZR ; unsigned __int64
.text:00000000000E363C MOV             W1, #0x1000 ; unsigned __int64
.text:00000000000E3640 BL              _Z25__allocate_thread_mappingmm ; __allocate_thread_mapping(ulong,ulong)
.text:00000000000E3644 LDR             X24, [SP,#0x100+var_C8]
.text:00000000000E3648 CBZ             X24, loc_E3784
.text:00000000000E364C LDP             X9, X8, [SP,#0x100+var_A0+8]
.text:00000000000E3650 STR             W25, [SP,#0x100+var_DC]
.text:00000000000E3654 MOV             W2, #0x2C0
.text:00000000000E3658 LDP             X27, X23, [SP,#0x100+var_C0]
.text:00000000000E365C ADD             X8, X9, X8
.text:00000000000E3660 SUB             X8, X8, #0x2C0
.text:00000000000E3664 STP             X26, X21, [SP,#0x100+var_F0]
.text:00000000000E3668 AND             X25, X8, #0xFFFFFFFFFFFFFFF0
.text:00000000000E366C STR             X20, [SP,#0x100+var_100]
.text:00000000000E3670 MOV             X0, X25
.text:00000000000E3674 STR             X22, [SP,#0x100+var_D8]
.text:00000000000E3678 MOV             W1, WZR
.text:00000000000E367C BL              .memset
.text:00000000000E3680 B               loc_E36E4
.text:00000000000E3684
.text:00000000000E3684 loc_E3684
.text:00000000000E3684 ADD             X0, SP, #0x100+var_A0
.text:00000000000E3688 BL              .pthread_attr_init
.text:00000000000E368C LDR             X8, [SP,#0x100+var_A0+8]
.text:00000000000E3690 CBNZ            X8, loc_E3634
.text:00000000000E3694
.text:00000000000E3694 loc_E3694
.text:00000000000E3694 LDR             X8, [SP,#0x100+var_90+8]
.text:00000000000E3698 ADD             X9, X8, #0xFFF
.text:00000000000E369C AND             X1, X9, #0xFFFFFFFFFFFFF000 ; unsigned __int64
.text:00000000000E36A0 CMP             X1, X8
.text:00000000000E36A4 STR             X1, [SP,#0x100+var_90+8]
.text:00000000000E36A8 B.CC            loc_E3784
.text:00000000000E36AC LDR             X0, [SP,#0x100+var_90] ; unsigned __int64
.text:00000000000E36B0 ADD             X8, SP, #0x100+var_C8
.text:00000000000E36B4 BL              _Z25__allocate_thread_mappingmm ; __allocate_thread_mapping(ulong,ulong)
.text:00000000000E36B8 LDR             X24, [SP,#0x100+var_C8]
.text:00000000000E36BC CBZ             X24, loc_E3784
.text:00000000000E36C0 LDP             X9, X8, [SP,#0x100+var_B0]
.text:00000000000E36C4 LDP             X27, X23, [SP,#0x100+var_C0]
.text:00000000000E36C8 STP             X26, X21, [SP,#0x100+var_F0]
.text:00000000000E36CC SUB             X8, X8, #0x2C0
.text:00000000000E36D0 STR             X20, [SP,#0x100+var_100]
.text:00000000000E36D4 STR             W25, [SP,#0x100+var_DC]
.text:00000000000E36D8 AND             X25, X8, #0xFFFFFFFFFFFFFFF0
.text:00000000000E36DC STR             X22, [SP,#0x100+var_D8]
.text:00000000000E36E0 STR             X9, [SP,#0x100+var_A0+8]
.text:00000000000E36E4
.text:00000000000E36E4 loc_E36E4
.text:00000000000E36E4 BL              _Z21__libc_shared_globalsv ; __libc_shared_globals(void)
.text:00000000000E36E8 LDR             X8, [X0,#0x468]
.text:00000000000E36EC LDR             X9, [X0,#0x470]
.text:00000000000E36F0 MOV             X0, X23 ; void *
.text:00000000000E36F4 ADD             X20, X23, X8
.text:00000000000E36F8 ADD             X21, X23, X9
.text:00000000000E36FC BL              _Z17__init_static_tlsPv ; __init_static_tls(void *)
.text:00000000000E3700 ADRP            X8, #__stack_chk_guard_ptr@PAGE
.text:00000000000E3704 ADRP            X9, #unk_29118@PAGE
.text:00000000000E3708 MOV             X10, X20
.text:00000000000E370C LDR             X8, [X8,#__stack_chk_guard_ptr@PAGEOFF]
.text:00000000000E3710 ADD             X9, X9, #unk_29118@PAGEOFF
.text:00000000000E3714 STR             X9, [X10,#8]!
.text:00000000000E3718 STR             X25, [X20,#0x10]
.text:00000000000E371C LDR             X8, [X8]
.text:00000000000E3720 STR             X10, [SP,#0x100+var_F8]
.text:00000000000E3724 STR             X8, [X20,#0x30]
.text:00000000000E3728 STR             X21, [X25,#0x2B0]
.text:00000000000E372C STR             X21, [X20]
.text:00000000000E3730 LDR             X8, [SP,#0x100+var_A0+8]
.text:00000000000E3734 LDR             X9, [SP,#0x100+var_70]
.text:00000000000E3738 LDR             Q1, [SP,#0x100+var_A0]
.text:00000000000E373C SUB             X8, X25, X8
.text:00000000000E3740 STR             X8, [SP,#0x100+var_90]
.text:00000000000E3744 MOV             W8, #1
.text:00000000000E3748 LDP             Q2, Q0, [SP,#0x100+var_90]
.text:00000000000E374C STR             X9, [X25,#0x48]
.text:00000000000E3750 STUR            Q1, [X25,#0x18]
.text:00000000000E3754 STUR            Q0, [X25,#0x38]
.text:00000000000E3758 STUR            Q2, [X25,#0x28]
.text:00000000000E375C STP             X24, X27, [X25,#0x90]
.text:00000000000E3760 LDR             X24, [X20,#0x10]
.text:00000000000E3764 MOV             X23, X24
.text:00000000000E3768 STR             WZR, [X23,#0x88]!
.text:00000000000E376C STRB            WZR, [X24,#0x8C]
.text:00000000000E3770
.text:00000000000E3770 loc_E3770
.text:00000000000E3770 LDAXR           W9, [X23]
.text:00000000000E3774 CBNZ            W9, loc_E378C
.text:00000000000E3778 STXR            W9, W8, [X23]
.text:00000000000E377C CBNZ            W9, loc_E3770
.text:00000000000E3780 B               loc_E3808
.text:00000000000E3784
.text:00000000000E3784 loc_E3784
.text:00000000000E3784 MOV             W21, #0xB
.text:00000000000E3788 B               loc_E39D8
.text:00000000000E378C
.text:00000000000E378C loc_E378C
.text:00000000000E378C MOV             W8, #2
.text:00000000000E3790 CLREX
.text:00000000000E3794
.text:00000000000E3794 loc_E3794
.text:00000000000E3794 LDAXR           W9, [X23]
.text:00000000000E3798 STXR            W10, W8, [X23]
.text:00000000000E379C CBNZ            W10, loc_E3794
.text:00000000000E37A0 CBZ             W9, loc_E3808
.text:00000000000E37A4 MOV             W21, #9
.text:00000000000E37A8 MOV             W22, #0x89
.text:00000000000E37AC MOV             W27, #0x62 ; 'b'
.text:00000000000E37B0 MOV             W20, #2
.text:00000000000E37B4 MOV             W28, #0xFFFFFFFF
.text:00000000000E37B8 B               loc_E37C4
.text:00000000000E37BC
.text:00000000000E37BC loc_E37BC
.text:00000000000E37BC STR             W26, [X19]
.text:00000000000E37C0 B               loc_E37F8
.text:00000000000E37C4
.text:00000000000E37C4 loc_E37C4
.text:00000000000E37C4 LDRB            W8, [X24,#0x8C]
.text:00000000000E37C8 MOV             X0, X27
.text:00000000000E37CC LDR             W26, [X19]
.text:00000000000E37D0 MOV             X1, X23
.text:00000000000E37D4 MOV             W3, #2
.text:00000000000E37D8 MOV             X4, XZR
.text:00000000000E37DC CMP             W8, #0
.text:00000000000E37E0 CSEL            W2, W22, W21, EQ
.text:00000000000E37E4 MOV             X5, XZR
.text:00000000000E37E8 MOV             W6, W28
.text:00000000000E37EC BL              .syscall
.text:00000000000E37F0 CMN             W0, #1
.text:00000000000E37F4 B.EQ            loc_E37BC
.text:00000000000E37F8
.text:00000000000E37F8 loc_E37F8
.text:00000000000E37F8 LDAXR           W8, [X23]
.text:00000000000E37FC STXR            W9, W20, [X23]
.text:00000000000E3800 CBNZ            W9, loc_E37F8
.text:00000000000E3804 CBNZ            W8, loc_E37C4
.text:00000000000E3808
.text:00000000000E3808 loc_E3808
.text:00000000000E3808 LDR             X8, [SP,#0x100+var_F0]
.text:00000000000E380C STR             X8, [X24,#0x60]
.text:00000000000E3810 LDR             X8, [SP,#0x100+var_E8]
.text:00000000000E3814 STR             X8, [X24,#0x68]
.text:00000000000E3818 BL              .getpid
.text:00000000000E381C ADD             X4, X24, #0x10
.text:00000000000E3820 STR             W0, [X24,#0x14]
.text:00000000000E3824 ADRP            X0, #_ZL15__pthread_startPv@PAGE ; __pthread_start(void *)
.text:00000000000E3828 LDR             X5, [SP,#0x100+var_F8]
.text:00000000000E382C MOV             W2, #0xF00
.text:00000000000E3830 ADD             X0, X0, #_ZL15__pthread_startPv@PAGEOFF ; __pthread_start(void *)
.text:00000000000E3834 MOVK            W2, #0x3D,LSL#16 ; '='
.text:00000000000E3838 MOV             X1, X25
.text:00000000000E383C MOV             X3, X24
.text:00000000000E3840 MOV             X6, X4
.text:00000000000E3844 BL              .clone
.text:00000000000E3848 CMN             W0, #1
.text:00000000000E384C B.EQ            loc_E38D8
.text:00000000000E3850 MOV             X0, X24
.text:00000000000E3854 BL              _Z13__init_threadP18pthread_internal_t ; __init_thread(pthread_internal_t *)
.text:00000000000E3858 LDR             X22, [SP,#0x100+var_D8]
.text:00000000000E385C LDR             W25, [SP,#0x100+var_DC]
.text:00000000000E3860 CBZ             W0, loc_E3968
.text:00000000000E3864 MOV             W21, W0
.text:00000000000E3868 ADD             X8, X24, #0x50 ; 'P'
.text:00000000000E386C MOV             W9, #3
.text:00000000000E3870 MOV             X0, X24
.text:00000000000E3874 STLR            W9, [X8]
.text:00000000000E3878 BL              _Z22__pthread_internal_addP18pthread_internal_t ; __pthread_internal_add(pthread_internal_t *)
.text:00000000000E387C LDRB            W8, [X24,#0x8C]
.text:00000000000E3880 ADRP            X9, #_ZL12__do_nothingPv@PAGE ; __do_nothing(void *)
.text:00000000000E3884 ADD             X9, X9, #_ZL12__do_nothingPv@PAGEOFF ; __do_nothing(void *)
.text:00000000000E3888 STR             X9, [X24,#0x60]
.text:00000000000E388C
.text:00000000000E388C loc_E388C
.text:00000000000E388C LDXR            W9, [X23]
.text:00000000000E3890 STLXR           W10, WZR, [X23]
.text:00000000000E3894 CBNZ            W10, loc_E388C
.text:00000000000E3898 CMP             W9, #2
.text:00000000000E389C B.NE            loc_E39D8
.text:00000000000E38A0 CMP             W8, #0
.text:00000000000E38A4 LDR             W20, [X19]
.text:00000000000E38A8 MOV             W8, #0x81
.text:00000000000E38AC CSINC           W2, W8, WZR, EQ
.text:00000000000E38B0 MOV             W0, #0x62 ; 'b'
.text:00000000000E38B4 MOV             X1, X23
.text:00000000000E38B8 MOV             W3, #1
.text:00000000000E38BC MOV             X4, XZR
.text:00000000000E38C0 MOV             X5, XZR
.text:00000000000E38C4 MOV             W6, WZR
.text:00000000000E38C8 BL              .syscall
.text:00000000000E38CC CMN             W0, #1
.text:00000000000E38D0 B.NE            loc_E39D8
.text:00000000000E38D4 B               loc_E39CC
.text:00000000000E38D8
.text:00000000000E38D8 loc_E38D8
.text:00000000000E38D8 LDR             W21, [X19]
.text:00000000000E38DC LDRB            W8, [X24,#0x8C]
.text:00000000000E38E0 LDR             X22, [SP,#0x100+var_D8]
.text:00000000000E38E4 LDR             W25, [SP,#0x100+var_DC]
.text:00000000000E38E8
.text:00000000000E38E8 loc_E38E8
.text:00000000000E38E8 LDXR            W9, [X23]
.text:00000000000E38EC STLXR           W10, WZR, [X23]
.text:00000000000E38F0 CBNZ            W10, loc_E38E8
.text:00000000000E38F4 CMP             W9, #2
.text:00000000000E38F8 B.NE            loc_E3930
.text:00000000000E38FC CMP             W8, #0
.text:00000000000E3900 LDR             W20, [X19]
.text:00000000000E3904 MOV             W8, #0x81
.text:00000000000E3908 CSINC           W2, W8, WZR, EQ
.text:00000000000E390C MOV             W0, #0x62 ; 'b'
.text:00000000000E3910 MOV             X1, X23
.text:00000000000E3914 MOV             W3, #1
.text:00000000000E3918 MOV             X4, XZR
.text:00000000000E391C MOV             X5, XZR
.text:00000000000E3920 MOV             W6, WZR
.text:00000000000E3924 BL              .syscall
.text:00000000000E3928 CMN             W0, #1
.text:00000000000E392C B.EQ            loc_E3A18
.text:00000000000E3930
.text:00000000000E3930 loc_E3930
.text:00000000000E3930 LDR             X1, [X24,#0x98]
.text:00000000000E3934 CBZ             X1, loc_E3940
.text:00000000000E3938
.text:00000000000E3938 loc_E3938
.text:00000000000E3938 LDR             X0, [X24,#0x90]
.text:00000000000E393C BL              .munmap
.text:00000000000E3940
.text:00000000000E3940 loc_E3940
.text:00000000000E3940 MOV             W0, W21
.text:00000000000E3944 BL              .strerror
.text:00000000000E3948 ADRP            X1, #aLibc_0@PAGE ; "libc"
.text:00000000000E394C ADRP            X2, #aPthreadCreateF_1@PAGE ; "pthread_create failed: clone failed: %s"
.text:00000000000E3950 MOV             X3, X0
.text:00000000000E3954 ADD             X1, X1, #aLibc_0@PAGEOFF ; "libc"
.text:00000000000E3958 ADD             X2, X2, #aPthreadCreateF_1@PAGEOFF ; "pthread_create failed: clone failed: %s"
.text:00000000000E395C MOV             W0, #5
.text:00000000000E3960 BL              async_safe_format_log
.text:00000000000E3964 B               loc_E39D8
.text:00000000000E3968
.text:00000000000E3968 loc_E3968
.text:00000000000E3968 MOV             X0, X24
.text:00000000000E396C BL              _Z22__pthread_internal_addP18pthread_internal_t ; __pthread_internal_add(pthread_internal_t *)
.text:00000000000E3970 LDR             X8, [SP,#0x100+var_100]
.text:00000000000E3974 STR             X0, [X8]
.text:00000000000E3978 LDRB            W8, [X24,#0x8C]
.text:00000000000E397C
.text:00000000000E397C loc_E397C
.text:00000000000E397C LDXR            W9, [X23]
.text:00000000000E3980 STLXR           W10, WZR, [X23]
.text:00000000000E3984 CBNZ            W10, loc_E397C
.text:00000000000E3988 CMP             W9, #2
.text:00000000000E398C B.NE            loc_E39D4
.text:00000000000E3990 CMP             W8, #0
.text:00000000000E3994 LDR             W20, [X19]
.text:00000000000E3998 MOV             W8, #0x81
.text:00000000000E399C CSINC           W2, W8, WZR, EQ
.text:00000000000E39A0 MOV             W0, #0x62 ; 'b'
.text:00000000000E39A4 MOV             X1, X23
.text:00000000000E39A8 MOV             W3, #1
.text:00000000000E39AC MOV             X4, XZR
.text:00000000000E39B0 MOV             X5, XZR
.text:00000000000E39B4 MOV             W6, WZR
.text:00000000000E39B8 BL              .syscall
.text:00000000000E39BC MOV             W21, WZR
.text:00000000000E39C0 CMN             W0, #1
.text:00000000000E39C4 B.NE            loc_E39D8
.text:00000000000E39C8 MOV             W21, WZR
.text:00000000000E39CC
.text:00000000000E39CC loc_E39CC
.text:00000000000E39CC STR             W20, [X19]
.text:00000000000E39D0 B               loc_E39D8
.text:00000000000E39D4
.text:00000000000E39D4 loc_E39D4
.text:00000000000E39D4 MOV             W21, WZR
.text:00000000000E39D8
.text:00000000000E39D8 loc_E39D8               ; this
.text:00000000000E39D8 ADD             X0, SP, #0x100+var_D0
.text:00000000000E39DC BL              _ZN11ScopedTraceD2Ev ; ScopedTrace::~ScopedTrace()
.text:00000000000E39E0 STR             W25, [X19]
.text:00000000000E39E4 LDR             X8, [X22,#0x28]
.text:00000000000E39E8 LDUR            X9, [X29,#var_60]
.text:00000000000E39EC CMP             X8, X9
.text:00000000000E39F0 B.NE            loc_E3A28
.text:00000000000E39F4 MOV             W0, W21
.text:00000000000E39F8 LDP             X29, X30, [SP,#0x100+var_s0]
.text:00000000000E39FC LDP             X20, X19, [SP,#0x100+var_10]
.text:00000000000E3A00 LDP             X22, X21, [SP,#0x100+var_20]
.text:00000000000E3A04 LDP             X24, X23, [SP,#0x100+var_30]
.text:00000000000E3A08 LDP             X26, X25, [SP,#0x100+var_40]
.text:00000000000E3A0C LDP             X28, X27, [SP,#0x100+var_50]
.text:00000000000E3A10 ADD             SP, SP, #0x110
.text:00000000000E3A14 RET
.text:00000000000E3A18
.text:00000000000E3A18 loc_E3A18
.text:00000000000E3A18 STR             W20, [X19]
.text:00000000000E3A1C LDR             X1, [X24,#0x98]
.text:00000000000E3A20 CBNZ            X1, loc_E3938
.text:00000000000E3A24 B               loc_E3940
.text:00000000000E3A28
.text:00000000000E3A28 loc_E3A28
.text:00000000000E3A28 BL              .__stack_chk_fail
.text:00000000000E3A28 ; } // starts at E35B8
.text:00000000000E3A28 ; End of function pthread_create
.text:00000000000E3A28
.text:00000000000E3A2C ALIGN 0x10
.text:00000000000E3A30
.text:00000000000E3A30
.text:00000000000E3A30 ; Attributes: bp-based frame
.text:00000000000E3A30
.text:00000000000E3A30 ; __int64 __fastcall Lock::lock(Lock *__hidden this)
.text:00000000000E3A30 _ZN4Lock4lockEv
.text:00000000000E3A30
.text:00000000000E3A30 var_40= -0x40
.text:00000000000E3A30 var_30= -0x30
.text:00000000000E3A30 var_20= -0x20
.text:00000000000E3A30 var_10= -0x10
.text:00000000000E3A30 var_s0=  0
.text:00000000000E3A30
.text:00000000000E3A30 ; __unwind {
.text:00000000000E3A30 STP             X26, X25, [SP,#-0x10+var_40]!
.text:00000000000E3A34 STP             X24, X23, [SP,#0x40+var_30]
.text:00000000000E3A38 STP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E3A3C STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E3A40 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E3A44 ADD             X29, SP, #0x40
.text:00000000000E3A48 MOV             X19, X0
.text:00000000000E3A4C MOV             W8, #1
.text:00000000000E3A50
.text:00000000000E3A50 loc_E3A50
.text:00000000000E3A50 LDAXR           W9, [X19]
.text:00000000000E3A54 CBNZ            W9, loc_E3A64
.text:00000000000E3A58 STXR            W9, W8, [X19]
.text:00000000000E3A5C CBNZ            W9, loc_E3A50
.text:00000000000E3A60 B               loc_E3AE8
.text:00000000000E3A64
.text:00000000000E3A64 loc_E3A64
.text:00000000000E3A64 MOV             W8, #2
.text:00000000000E3A68 CLREX
.text:00000000000E3A6C
.text:00000000000E3A6C loc_E3A6C
.text:00000000000E3A6C LDAXR           W9, [X19]
.text:00000000000E3A70 STXR            W10, W8, [X19]
.text:00000000000E3A74 CBNZ            W10, loc_E3A6C
.text:00000000000E3A78 CBZ             W9, loc_E3AE8
.text:00000000000E3A7C BL              .__errno
.text:00000000000E3A80 MOV             X20, X0
.text:00000000000E3A84 MOV             W23, #9
.text:00000000000E3A88 MOV             W24, #0x89
.text:00000000000E3A8C MOV             W21, #0x62 ; 'b'
.text:00000000000E3A90 MOV             W25, #2
.text:00000000000E3A94 MOV             W22, #0xFFFFFFFF
.text:00000000000E3A98 B               loc_E3AA4
.text:00000000000E3A9C
.text:00000000000E3A9C loc_E3A9C
.text:00000000000E3A9C STR             W26, [X20]
.text:00000000000E3AA0 B               loc_E3AD8
.text:00000000000E3AA4
.text:00000000000E3AA4 loc_E3AA4
.text:00000000000E3AA4 LDRB            W8, [X19,#4]
.text:00000000000E3AA8 MOV             X0, X21
.text:00000000000E3AAC LDR             W26, [X20]
.text:00000000000E3AB0 MOV             X1, X19
.text:00000000000E3AB4 MOV             W3, #2
.text:00000000000E3AB8 MOV             X4, XZR
.text:00000000000E3ABC CMP             W8, #0
.text:00000000000E3AC0 CSEL            W2, W24, W23, EQ
.text:00000000000E3AC4 MOV             X5, XZR
.text:00000000000E3AC8 MOV             W6, W22
.text:00000000000E3ACC BL              .syscall
.text:00000000000E3AD0 CMN             W0, #1
.text:00000000000E3AD4 B.EQ            loc_E3A9C
.text:00000000000E3AD8
.text:00000000000E3AD8 loc_E3AD8
.text:00000000000E3AD8 LDAXR           W8, [X19]
.text:00000000000E3ADC STXR            W9, W25, [X19]
.text:00000000000E3AE0 CBNZ            W9, loc_E3AD8
.text:00000000000E3AE4 CBNZ            W8, loc_E3AA4
.text:00000000000E3AE8
.text:00000000000E3AE8 loc_E3AE8
.text:00000000000E3AE8 LDP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E3AEC LDP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E3AF0 LDP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E3AF4 LDP             X24, X23, [SP,#0x40+var_30]
.text:00000000000E3AF8 LDP             X26, X25, [SP+0x40+var_40],#0x50
.text:00000000000E3AFC RET
.text:00000000000E3AFC ; } // starts at E3A30
.text:00000000000E3AFC ; End of function Lock::lock(void)
.text:00000000000E3AFC
.text:00000000000E3B00
.text:00000000000E3B00
.text:00000000000E3B00 ; Attributes: noreturn bp-based frame
.text:00000000000E3B00
.text:00000000000E3B00 ; void __fastcall __noreturn __pthread_start(void *)
.text:00000000000E3B00 _ZL15__pthread_startPv
.text:00000000000E3B00
.text:00000000000E3B00 var_10= -0x10
.text:00000000000E3B00 var_s0=  0
.text:00000000000E3B00
.text:00000000000E3B00 ; __unwind {
.text:00000000000E3B00 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000E3B04 STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3B08 ADD             X29, SP, #0x10
.text:00000000000E3B0C MOV             X19, X0
.text:00000000000E3B10 ADD             X0, X0, #0x88 ; this
.text:00000000000E3B14 BL              _ZN4Lock4lockEv ; Lock::lock(void)
.text:00000000000E3B18 MOV             X0, X19
.text:00000000000E3B1C BL              _Z24__init_additional_stacksP18pthread_internal_t ; __init_additional_stacks(pthread_internal_t *)
.text:00000000000E3B20 LDP             X8, X0, [X19,#0x60]
.text:00000000000E3B24 BLR             X8
.text:00000000000E3B28 BL              .pthread_exit
.text:00000000000E3B28 ; } // starts at E3B00
.text:00000000000E3B28 ; End of function __pthread_start(void *)
.text:00000000000E3B28
.text:00000000000E3B2C ALIGN 0x10
.text:00000000000E3B30
.text:00000000000E3B30
.text:00000000000E3B30
.text:00000000000E3B30 ; __int64 __fastcall __do_nothing(void *)
.text:00000000000E3B30 _ZL12__do_nothingPv
.text:00000000000E3B30 ; __unwind {
.text:00000000000E3B30 MOV             X0, XZR
.text:00000000000E3B34 RET
.text:00000000000E3B34 ; } // starts at E3B30
.text:00000000000E3B34 ; End of function __do_nothing(void *)
.text:00000000000E3B34
.text:00000000000E3B38
.text:00000000000E3B38
.text:00000000000E3B38 ; Attributes: bp-based frame
.text:00000000000E3B38
.text:00000000000E3B38 WEAK pthread_detach
.text:00000000000E3B38 pthread_detach
.text:00000000000E3B38
.text:00000000000E3B38 var_10= -0x10
.text:00000000000E3B38 var_s0=  0
.text:00000000000E3B38
.text:00000000000E3B38 ; __unwind {
.text:00000000000E3B38 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000E3B3C STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3B40 ADD             X29, SP, #0x10
.text:00000000000E3B44 ADRP            X1, #aPthreadDetach_0@PAGE ; "pthread_detach"
.text:00000000000E3B48 ADD             X1, X1, #aPthreadDetach_0@PAGEOFF ; "pthread_detach"
.text:00000000000E3B4C MOV             X19, X0
.text:00000000000E3B50 BL              _Z23__pthread_internal_findlPKc ; __pthread_internal_find(long,char const*)
.text:00000000000E3B54 CBZ             X0, loc_E3BA8
.text:00000000000E3B58 MOV             W8, WZR
.text:00000000000E3B5C ADD             X9, X0, #0x50 ; 'P'
.text:00000000000E3B60 MOV             W0, #0x16
.text:00000000000E3B64 MOV             W10, #3
.text:00000000000E3B68 B               loc_E3B70
.text:00000000000E3B6C
.text:00000000000E3B6C loc_E3B6C
.text:00000000000E3B6C CLREX
.text:00000000000E3B70
.text:00000000000E3B70 loc_E3B70
.text:00000000000E3B70 CBNZ            W8, loc_E3B8C
.text:00000000000E3B74 LDAXR           W8, [X9]
.text:00000000000E3B78 CBNZ            W8, loc_E3B6C
.text:00000000000E3B7C STLXR           W11, W10, [X9]
.text:00000000000E3B80 CBNZ            W11, loc_E3B70
.text:00000000000E3B84 MOV             W0, WZR
.text:00000000000E3B88 B               loc_E3BAC
.text:00000000000E3B8C
.text:00000000000E3B8C loc_E3B8C
.text:00000000000E3B8C CMP             W8, #1
.text:00000000000E3B90 B.NE            loc_E3BAC
.text:00000000000E3B94 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3B98 MOV             X0, X19
.text:00000000000E3B9C MOV             X1, XZR
.text:00000000000E3BA0 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000E3BA4 B               .pthread_join
.text:00000000000E3BA8
.text:00000000000E3BA8 loc_E3BA8
.text:00000000000E3BA8 MOV             W0, #3
.text:00000000000E3BAC
.text:00000000000E3BAC loc_E3BAC
.text:00000000000E3BAC LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3BB0 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000E3BB4 RET
.text:00000000000E3BB4 ; } // starts at E3B38
.text:00000000000E3BB4 ; End of function pthread_detach
.text:00000000000E3BB4
.text:00000000000E3BB8
.text:00000000000E3BB8
.text:00000000000E3BB8
.text:00000000000E3BB8 EXPORT pthread_equal
.text:00000000000E3BB8 pthread_equal
.text:00000000000E3BB8 ; __unwind {
.text:00000000000E3BB8 CMP             X0, X1
.text:00000000000E3BBC CSET            W0, EQ
.text:00000000000E3BC0 RET
.text:00000000000E3BC0 ; } // starts at E3BB8
.text:00000000000E3BC0 ; End of function pthread_equal
.text:00000000000E3BC0
.text:00000000000E3BC4 ALIGN 8
.text:00000000000E3BC8
.text:00000000000E3BC8
.text:00000000000E3BC8
.text:00000000000E3BC8 WEAK __pthread_cleanup_push
.text:00000000000E3BC8 __pthread_cleanup_push
.text:00000000000E3BC8 ; __unwind {
.text:00000000000E3BC8 MRS             X8, #3, c13, c0, #2
.text:00000000000E3BCC LDR             X8, [X8,#8]
.text:00000000000E3BD0 STP             X1, X2, [X0,#8]
.text:00000000000E3BD4 LDR             X9, [X8,#0x58]
.text:00000000000E3BD8 STR             X9, [X0]
.text:00000000000E3BDC STR             X0, [X8,#0x58]
.text:00000000000E3BE0 RET
.text:00000000000E3BE0 ; } // starts at E3BC8
.text:00000000000E3BE0 ; End of function __pthread_cleanup_push
.text:00000000000E3BE0
.text:00000000000E3BE4 ALIGN 8
.text:00000000000E3BE8
.text:00000000000E3BE8
.text:00000000000E3BE8
.text:00000000000E3BE8 WEAK __pthread_cleanup_pop
.text:00000000000E3BE8 __pthread_cleanup_pop
.text:00000000000E3BE8 ; __unwind {
.text:00000000000E3BE8 MRS             X8, #3, c13, c0, #2
.text:00000000000E3BEC LDR             X9, [X0]
.text:00000000000E3BF0 LDR             X8, [X8,#8]
.text:00000000000E3BF4 STR             X9, [X8,#0x58]
.text:00000000000E3BF8 CBZ             W1, locret_E3C08
.text:00000000000E3BFC LDP             X1, X8, [X0,#8]
.text:00000000000E3C00 MOV             X0, X8
.text:00000000000E3C04 BR              X1
.text:00000000000E3C08
.text:00000000000E3C08 locret_E3C08
.text:00000000000E3C08 RET
.text:00000000000E3C08 ; } // starts at E3BE8
.text:00000000000E3C08 ; End of function __pthread_cleanup_pop
.text:00000000000E3C08
.text:00000000000E3C0C ALIGN 0x10
.text:00000000000E3C10
.text:00000000000E3C10
.text:00000000000E3C10 ; Attributes: noreturn bp-based frame
.text:00000000000E3C10
.text:00000000000E3C10 WEAK pthread_exit
.text:00000000000E3C10 pthread_exit
.text:00000000000E3C10
.text:00000000000E3C10 var_38= -0x38
.text:00000000000E3C10 var_30= -0x30
.text:00000000000E3C10 var_20= -0x20
.text:00000000000E3C10 var_18= -0x18
.text:00000000000E3C10 var_10= -0x10
.text:00000000000E3C10 var_s0=  0
.text:00000000000E3C10
.text:00000000000E3C10 ; __unwind {
.text:00000000000E3C10 SUB             SP, SP, #0x50
.text:00000000000E3C14 STR             X21, [SP,#0x40+var_20]
.text:00000000000E3C18 STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E3C1C STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E3C20 ADD             X29, SP, #0x40
.text:00000000000E3C24 MOV             X20, X0
.text:00000000000E3C28 BL              __cxa_thread_finalize
.text:00000000000E3C2C MRS             X21, #3, c13, c0, #2
.text:00000000000E3C30 LDR             X19, [X21,#8]
.text:00000000000E3C34 LDR             X8, [X19,#0x58]
.text:00000000000E3C38 STR             X20, [X19,#0x70]
.text:00000000000E3C3C CBZ             X8, loc_E3C58
.text:00000000000E3C40
.text:00000000000E3C40 loc_E3C40
.text:00000000000E3C40 LDR             X9, [X8]
.text:00000000000E3C44 STR             X9, [X19,#0x58]
.text:00000000000E3C48 LDP             X9, X0, [X8,#8]
.text:00000000000E3C4C BLR             X9
.text:00000000000E3C50 LDR             X8, [X19,#0x58]
.text:00000000000E3C54 CBNZ            X8, loc_E3C40
.text:00000000000E3C58
.text:00000000000E3C58 loc_E3C58
.text:00000000000E3C58 BL              _Z21pthread_key_clean_allv ; pthread_key_clean_all(void)
.text:00000000000E3C5C LDR             X8, [X19,#0x78]
.text:00000000000E3C60 CBZ             X8, loc_E3C90
.text:00000000000E3C64 MOV             W8, #2
.text:00000000000E3C68 STP             XZR, XZR, [SP,#0x40+var_30]
.text:00000000000E3C6C ADD             X0, SP, #0x40+var_38
.text:00000000000E3C70 STR             XZR, [SP,#0x40+var_38]
.text:00000000000E3C74 MOV             X1, XZR
.text:00000000000E3C78 STR             W8, [SP,#0x40+var_30]
.text:00000000000E3C7C BL              .sigaltstack
.text:00000000000E3C80 LDR             X0, [X19,#0x78]
.text:00000000000E3C84 MOV             W1, #0x9000
.text:00000000000E3C88 BL              .munmap
.text:00000000000E3C8C STR             XZR, [X19,#0x78]
.text:00000000000E3C90
.text:00000000000E3C90 loc_E3C90
.text:00000000000E3C90 MOV             W9, WZR
.text:00000000000E3C94 ADD             X8, X19, #0x50 ; 'P'
.text:00000000000E3C98 MOV             W10, #1
.text:00000000000E3C9C B               loc_E3CA4
.text:00000000000E3CA0
.text:00000000000E3CA0 loc_E3CA0
.text:00000000000E3CA0 CLREX
.text:00000000000E3CA4
.text:00000000000E3CA4 loc_E3CA4
.text:00000000000E3CA4 MOV             W20, W9
.text:00000000000E3CA8 CBNZ            W9, loc_E3CBC
.text:00000000000E3CAC LDAXR           W9, [X8]
.text:00000000000E3CB0 CBNZ            W9, loc_E3CA0
.text:00000000000E3CB4 STLXR           W11, W10, [X8]
.text:00000000000E3CB8 CBNZ            W11, loc_E3CA4
.text:00000000000E3CBC
.text:00000000000E3CBC loc_E3CBC
.text:00000000000E3CBC ADD             X0, SP, #0x40+var_38
.text:00000000000E3CC0 BL              .sigfillset64
.text:00000000000E3CC4 ADD             X1, SP, #0x40+var_38
.text:00000000000E3CC8 SUB             X2, X29, #-var_18
.text:00000000000E3CCC MOV             W0, WZR
.text:00000000000E3CD0 BL              .sigprocmask64
.text:00000000000E3CD4 LDR             X0, [X19,#0x80]
.text:00000000000E3CD8 MOV             W1, #0x1000000
.text:00000000000E3CDC BL              .munmap
.text:00000000000E3CE0 SUB             X0, X21, #8
.text:00000000000E3CE4 BL              _Z18__free_dynamic_tlsP10bionic_tcb ; __free_dynamic_tls(bionic_tcb *)
.text:00000000000E3CE8 CMP             W20, #3
.text:00000000000E3CEC B.NE            loc_E3D08
.text:00000000000E3CF0 MOV             X0, XZR
.text:00000000000E3CF4 BL              __set_tid_address
.text:00000000000E3CF8 MOV             X0, X19
.text:00000000000E3CFC BL              _Z25__pthread_internal_removeP18pthread_internal_t ; __pthread_internal_remove(pthread_internal_t *)
.text:00000000000E3D00 LDR             X1, [X19,#0x98]
.text:00000000000E3D04 CBNZ            X1, loc_E3D10
.text:00000000000E3D08
.text:00000000000E3D08 loc_E3D08               ; status
.text:00000000000E3D08 MOV             W0, WZR
.text:00000000000E3D0C BL              __exit
.text:00000000000E3D10
.text:00000000000E3D10 loc_E3D10
.text:00000000000E3D10 LDR             X0, [X19,#0x90]
.text:00000000000E3D14 BL              _exit_with_stack_teardown
.text:00000000000E3D14 ; } // starts at E3C10
.text:00000000000E3D14 ; End of function pthread_exit
.text:00000000000E3D14
.text:00000000000E3D18
.text:00000000000E3D18
.text:00000000000E3D18 ; Attributes: bp-based frame
.text:00000000000E3D18
.text:00000000000E3D18 EXPORT pthread_getcpuclockid
.text:00000000000E3D18 pthread_getcpuclockid
.text:00000000000E3D18
.text:00000000000E3D18 var_10= -0x10
.text:00000000000E3D18 var_s0=  0
.text:00000000000E3D18
.text:00000000000E3D18 ; __unwind {
.text:00000000000E3D18 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000E3D1C STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3D20 ADD             X29, SP, #0x10
.text:00000000000E3D24 MOV             X19, X1
.text:00000000000E3D28 ADRP            X1, #aPthreadGetcpuc_0@PAGE ; "pthread_getcpuclockid"
.text:00000000000E3D2C ADD             X1, X1, #aPthreadGetcpuc_0@PAGEOFF ; "pthread_getcpuclockid"
.text:00000000000E3D30 BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E3D34 CMN             W0, #1
.text:00000000000E3D38 B.EQ            loc_E3D50
.text:00000000000E3D3C LSL             W8, W0, #3
.text:00000000000E3D40 EOR             W8, W8, #0xFFFFFFFE
.text:00000000000E3D44 MOV             W0, WZR
.text:00000000000E3D48 STR             W8, [X19]
.text:00000000000E3D4C B               loc_E3D54
.text:00000000000E3D50
.text:00000000000E3D50 loc_E3D50
.text:00000000000E3D50 MOV             W0, #3
.text:00000000000E3D54
.text:00000000000E3D54 loc_E3D54
.text:00000000000E3D54 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3D58 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000E3D5C RET
.text:00000000000E3D5C ; } // starts at E3D18
.text:00000000000E3D5C ; End of function pthread_getcpuclockid
.text:00000000000E3D5C
.text:00000000000E3D60
.text:00000000000E3D60
.text:00000000000E3D60 ; Attributes: bp-based frame
.text:00000000000E3D60
.text:00000000000E3D60 WEAK pthread_getschedparam
.text:00000000000E3D60 pthread_getschedparam
.text:00000000000E3D60
.text:00000000000E3D60 var_30= -0x30
.text:00000000000E3D60 var_20= -0x20
.text:00000000000E3D60 var_10= -0x10
.text:00000000000E3D60 var_s0=  0
.text:00000000000E3D60
.text:00000000000E3D60 ; __unwind {
.text:00000000000E3D60 STR             X23, [SP,#-0x10+var_30]!
.text:00000000000E3D64 STP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E3D68 STP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E3D6C STP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E3D70 ADD             X29, SP, #0x30
.text:00000000000E3D74 MOV             X21, X2
.text:00000000000E3D78 MOV             X20, X1
.text:00000000000E3D7C MOV             X22, X0
.text:00000000000E3D80 BL              .__errno
.text:00000000000E3D84 ADRP            X1, #aPthreadGetsche_0@PAGE ; "pthread_getschedparam"
.text:00000000000E3D88 LDR             W23, [X0]
.text:00000000000E3D8C MOV             X19, X0
.text:00000000000E3D90 ADD             X1, X1, #aPthreadGetsche_0@PAGEOFF ; "pthread_getschedparam"
.text:00000000000E3D94 MOV             X0, X22 ; __int64
.text:00000000000E3D98 BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E3D9C CMN             W0, #1
.text:00000000000E3DA0 B.EQ            loc_E3DD0
.text:00000000000E3DA4 MOV             X1, X21
.text:00000000000E3DA8 MOV             W22, W0
.text:00000000000E3DAC BL              .sched_getparam
.text:00000000000E3DB0 CMN             W0, #1
.text:00000000000E3DB4 B.EQ            loc_E3DD8
.text:00000000000E3DB8 MOV             W0, W22
.text:00000000000E3DBC BL              .sched_getscheduler
.text:00000000000E3DC0 MOV             W8, W0
.text:00000000000E3DC4 MOV             W0, WZR
.text:00000000000E3DC8 STR             W8, [X20]
.text:00000000000E3DCC B               loc_E3DDC
.text:00000000000E3DD0
.text:00000000000E3DD0 loc_E3DD0
.text:00000000000E3DD0 MOV             W0, #3
.text:00000000000E3DD4 B               loc_E3DDC
.text:00000000000E3DD8
.text:00000000000E3DD8 loc_E3DD8
.text:00000000000E3DD8 LDR             W0, [X19]
.text:00000000000E3DDC
.text:00000000000E3DDC loc_E3DDC
.text:00000000000E3DDC STR             W23, [X19]
.text:00000000000E3DE0 LDP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E3DE4 LDP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E3DE8 LDP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E3DEC LDR             X23, [SP+0x30+var_30],#0x40
.text:00000000000E3DF0 RET
.text:00000000000E3DF0 ; } // starts at E3D60
.text:00000000000E3DF0 ; End of function pthread_getschedparam
.text:00000000000E3DF0
.text:00000000000E3DF4 ALIGN 8
.text:00000000000E3DF8
.text:00000000000E3DF8
.text:00000000000E3DF8
.text:00000000000E3DF8 WEAK pthread_gettid_np
.text:00000000000E3DF8 pthread_gettid_np
.text:00000000000E3DF8 ; __unwind {
.text:00000000000E3DF8 ADRP            X1, #aPthreadGettidN_0@PAGE ; "pthread_gettid_np"
.text:00000000000E3DFC ADD             X1, X1, #aPthreadGettidN_0@PAGEOFF ; "pthread_gettid_np"
.text:00000000000E3E00 B               _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E3E00 ; } // starts at E3DF8
.text:00000000000E3E00 ; End of function pthread_gettid_np
.text:00000000000E3E00
.text:00000000000E3E04 ALIGN 8
.text:00000000000E3E08
.text:00000000000E3E08
.text:00000000000E3E08 ; Attributes: bp-based frame
.text:00000000000E3E08
.text:00000000000E3E08 ; __pthread_internal_add(pthread_internal_t *)
.text:00000000000E3E08 _Z22__pthread_internal_addP18pthread_internal_t
.text:00000000000E3E08
.text:00000000000E3E08 var_10= -0x10
.text:00000000000E3E08 var_s0=  0
.text:00000000000E3E08
.text:00000000000E3E08 ; __unwind {
.text:00000000000E3E08 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000E3E0C STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3E10 ADD             X29, SP, #0x10
.text:00000000000E3E14 MOV             X19, X0
.text:00000000000E3E18 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3E1C ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3E20 BL              .pthread_rwlock_wrlock
.text:00000000000E3E24 ADRP            X8, #_ZL13g_thread_list@PAGE ; g_thread_list
.text:00000000000E3E28 LDR             X9, [X8,#_ZL13g_thread_list@PAGEOFF] ; g_thread_list
.text:00000000000E3E2C STP             X9, XZR, [X19]
.text:00000000000E3E30 CBZ             X9, loc_E3E38
.text:00000000000E3E34 STR             X19, [X9,#8]
.text:00000000000E3E38
.text:00000000000E3E38 loc_E3E38
.text:00000000000E3E38 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3E3C STR             X19, [X8,#_ZL13g_thread_list@PAGEOFF] ; g_thread_list
.text:00000000000E3E40 ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3E44 BL              .pthread_rwlock_unlock
.text:00000000000E3E48 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3E4C MOV             X0, X19
.text:00000000000E3E50 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000E3E54 RET
.text:00000000000E3E54 ; } // starts at E3E08
.text:00000000000E3E54 ; End of function __pthread_internal_add(pthread_internal_t *)
.text:00000000000E3E54
.text:00000000000E3E58
.text:00000000000E3E58
.text:00000000000E3E58 ; Attributes: bp-based frame
.text:00000000000E3E58
.text:00000000000E3E58 ; __pthread_internal_remove(pthread_internal_t *)
.text:00000000000E3E58 _Z25__pthread_internal_removeP18pthread_internal_t
.text:00000000000E3E58
.text:00000000000E3E58 var_10= -0x10
.text:00000000000E3E58 var_s0=  0
.text:00000000000E3E58
.text:00000000000E3E58 ; __unwind {
.text:00000000000E3E58 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000E3E5C STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3E60 ADD             X29, SP, #0x10
.text:00000000000E3E64 MOV             X19, X0
.text:00000000000E3E68 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3E6C ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3E70 BL              .pthread_rwlock_wrlock
.text:00000000000E3E74 LDR             X8, [X19]
.text:00000000000E3E78 CBZ             X8, loc_E3E88
.text:00000000000E3E7C LDR             X9, [X19,#8]
.text:00000000000E3E80 STR             X9, [X8,#8]
.text:00000000000E3E84 LDR             X8, [X19]
.text:00000000000E3E88
.text:00000000000E3E88 loc_E3E88
.text:00000000000E3E88 LDR             X9, [X19,#8]
.text:00000000000E3E8C ADRP            X10, #_ZL13g_thread_list@PAGE ; g_thread_list
.text:00000000000E3E90 ADD             X10, X10, #_ZL13g_thread_list@PAGEOFF ; g_thread_list
.text:00000000000E3E94 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3E98 ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3E9C CMP             X9, #0
.text:00000000000E3EA0 CSEL            X9, X10, X9, EQ
.text:00000000000E3EA4 STR             X8, [X9]
.text:00000000000E3EA8 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3EAC LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000E3EB0 B               .pthread_rwlock_unlock
.text:00000000000E3EB0 ; } // starts at E3E58
.text:00000000000E3EB0 ; End of function __pthread_internal_remove(pthread_internal_t *)
.text:00000000000E3EB0
.text:00000000000E3EB4 ALIGN 8
.text:00000000000E3EB8
.text:00000000000E3EB8
.text:00000000000E3EB8 ; Attributes: bp-based frame
.text:00000000000E3EB8
.text:00000000000E3EB8 ; __pthread_internal_remove_and_free(pthread_internal_t *)
.text:00000000000E3EB8 _Z34__pthread_internal_remove_and_freeP18pthread_internal_t
.text:00000000000E3EB8
.text:00000000000E3EB8 var_10= -0x10
.text:00000000000E3EB8 var_s0=  0
.text:00000000000E3EB8
.text:00000000000E3EB8 ; __unwind {
.text:00000000000E3EB8 STR             X19, [SP,#-0x10+var_10]!
.text:00000000000E3EBC STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3EC0 ADD             X29, SP, #0x10
.text:00000000000E3EC4 MOV             X19, X0
.text:00000000000E3EC8 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3ECC ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3ED0 BL              .pthread_rwlock_wrlock
.text:00000000000E3ED4 LDR             X8, [X19]
.text:00000000000E3ED8 CBZ             X8, loc_E3EE8
.text:00000000000E3EDC LDR             X9, [X19,#8]
.text:00000000000E3EE0 STR             X9, [X8,#8]
.text:00000000000E3EE4 LDR             X8, [X19]
.text:00000000000E3EE8
.text:00000000000E3EE8 loc_E3EE8
.text:00000000000E3EE8 LDR             X9, [X19,#8]
.text:00000000000E3EEC ADRP            X10, #_ZL13g_thread_list@PAGE ; g_thread_list
.text:00000000000E3EF0 ADD             X10, X10, #_ZL13g_thread_list@PAGEOFF ; g_thread_list
.text:00000000000E3EF4 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3EF8 ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3EFC CMP             X9, #0
.text:00000000000E3F00 CSEL            X9, X10, X9, EQ
.text:00000000000E3F04 STR             X8, [X9]
.text:00000000000E3F08 BL              .pthread_rwlock_unlock
.text:00000000000E3F0C LDR             X1, [X19,#0x98]
.text:00000000000E3F10 CBZ             X1, loc_E3F24
.text:00000000000E3F14 LDR             X0, [X19,#0x90]
.text:00000000000E3F18 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3F1C LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000E3F20 B               .munmap
.text:00000000000E3F24
.text:00000000000E3F24 loc_E3F24
.text:00000000000E3F24 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3F28 LDR             X19, [SP+0x10+var_10],#0x20
.text:00000000000E3F2C RET
.text:00000000000E3F2C ; } // starts at E3EB8
.text:00000000000E3F2C ; End of function __pthread_internal_remove_and_free(pthread_internal_t *)
.text:00000000000E3F2C
.text:00000000000E3F30
.text:00000000000E3F30
.text:00000000000E3F30 ; Attributes: bp-based frame
.text:00000000000E3F30
.text:00000000000E3F30 ; __int64 __fastcall __pthread_internal_gettid(__int64, const char *)
.text:00000000000E3F30 _Z25__pthread_internal_gettidlPKc
.text:00000000000E3F30
.text:00000000000E3F30 var_s0=  0
.text:00000000000E3F30
.text:00000000000E3F30 ; __unwind {
.text:00000000000E3F30 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000E3F34 MOV             X29, SP
.text:00000000000E3F38 BL              _Z23__pthread_internal_findlPKc ; __pthread_internal_find(long,char const*)
.text:00000000000E3F3C CBZ             X0, loc_E3F4C
.text:00000000000E3F40 LDR             W0, [X0,#0x10]
.text:00000000000E3F44 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000E3F48 RET
.text:00000000000E3F4C
.text:00000000000E3F4C loc_E3F4C
.text:00000000000E3F4C MOV             W0, #0xFFFFFFFF
.text:00000000000E3F50 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000E3F54 RET
.text:00000000000E3F54 ; } // starts at E3F30
.text:00000000000E3F54 ; End of function __pthread_internal_gettid(long,char const*)
.text:00000000000E3F54
.text:00000000000E3F58
.text:00000000000E3F58
.text:00000000000E3F58 ; Attributes: bp-based frame
.text:00000000000E3F58
.text:00000000000E3F58 ; __int64 __fastcall __pthread_internal_find(__int64, const char *)
.text:00000000000E3F58 _Z23__pthread_internal_findlPKc
.text:00000000000E3F58
.text:00000000000E3F58 var_10= -0x10
.text:00000000000E3F58 var_s0=  0
.text:00000000000E3F58
.text:00000000000E3F58 ; __unwind {
.text:00000000000E3F58 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000E3F5C STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3F60 ADD             X29, SP, #0x10
.text:00000000000E3F64 MRS             X8, #3, c13, c0, #2
.text:00000000000E3F68 MOV             X19, X0
.text:00000000000E3F6C LDR             X8, [X8,#8]
.text:00000000000E3F70 CMP             X8, X0
.text:00000000000E3F74 B.EQ            loc_E3FF4
.text:00000000000E3F78 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3F7C ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3F80 MOV             X20, X1
.text:00000000000E3F84 BL              .pthread_rwlock_rdlock
.text:00000000000E3F88 ADRP            X8, #_ZL13g_thread_list@PAGE ; g_thread_list
.text:00000000000E3F8C LDR             X8, [X8,#_ZL13g_thread_list@PAGEOFF] ; g_thread_list
.text:00000000000E3F90 CBZ             X8, loc_E3FA4
.text:00000000000E3F94
.text:00000000000E3F94 loc_E3F94
.text:00000000000E3F94 CMP             X8, X19
.text:00000000000E3F98 B.EQ            loc_E3FE8
.text:00000000000E3F9C LDR             X8, [X8]
.text:00000000000E3FA0 CBNZ            X8, loc_E3F94
.text:00000000000E3FA4
.text:00000000000E3FA4 loc_E3FA4
.text:00000000000E3FA4 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3FA8 ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3FAC BL              .pthread_rwlock_unlock
.text:00000000000E3FB0 BL              .android_get_application_target_sdk_version
.text:00000000000E3FB4 CMP             W0, #0x1A
.text:00000000000E3FB8 B.LT            loc_E3FE0
.text:00000000000E3FBC CBNZ            X19, loc_E4004
.text:00000000000E3FC0 ADRP            X1, #aLibc_0@PAGE ; "libc"
.text:00000000000E3FC4 ADRP            X2, #aInvalidPthread@PAGE ; "invalid pthread_t (0) passed to %s"
.text:00000000000E3FC8 ADD             X1, X1, #aLibc_0@PAGEOFF ; "libc"
.text:00000000000E3FCC ADD             X2, X2, #aInvalidPthread@PAGEOFF ; "invalid pthread_t (0) passed to %s"
.text:00000000000E3FD0 MOV             W0, #5
.text:00000000000E3FD4 MOV             X3, X20
.text:00000000000E3FD8 BL              async_safe_format_log
.text:00000000000E3FDC B               loc_E3FF4
.text:00000000000E3FE0
.text:00000000000E3FE0 loc_E3FE0
.text:00000000000E3FE0 MOV             X19, XZR
.text:00000000000E3FE4 B               loc_E3FF4
.text:00000000000E3FE8
.text:00000000000E3FE8 loc_E3FE8
.text:00000000000E3FE8 ADRP            X0, #_ZL18g_thread_list_lock@PAGE ; g_thread_list_lock
.text:00000000000E3FEC ADD             X0, X0, #_ZL18g_thread_list_lock@PAGEOFF ; g_thread_list_lock
.text:00000000000E3FF0 BL              .pthread_rwlock_unlock
.text:00000000000E3FF4
.text:00000000000E3FF4 loc_E3FF4
.text:00000000000E3FF4 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E3FF8 MOV             X0, X19
.text:00000000000E3FFC LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:00000000000E4000 RET
.text:00000000000E4004
.text:00000000000E4004 loc_E4004
.text:00000000000E4004 ADRP            X0, #aInvalidPthread_0@PAGE ; "invalid pthread_t %p passed to %s"
.text:00000000000E4008 ADD             X0, X0, #aInvalidPthread_0@PAGEOFF ; "invalid pthread_t %p passed to %s"
.text:00000000000E400C MOV             X1, X19
.text:00000000000E4010 MOV             X2, X20
.text:00000000000E4014 BL              async_safe_fatal_no_abort
.text:00000000000E4018 BL              .abort
.text:00000000000E4018 ; } // starts at E3F58
.text:00000000000E4018 ; End of function __pthread_internal_find(long,char const*)
.text:00000000000E4018
.text:00000000000E401C ALIGN 0x20
.text:00000000000E4020
.text:00000000000E4020
.text:00000000000E4020 ; Attributes: bp-based frame
.text:00000000000E4020
.text:00000000000E4020 WEAK pthread_join
.text:00000000000E4020 pthread_join
.text:00000000000E4020
.text:00000000000E4020 var_48= -0x48
.text:00000000000E4020 var_40= -0x40
.text:00000000000E4020 var_30= -0x30
.text:00000000000E4020 var_20= -0x20
.text:00000000000E4020 var_10= -0x10
.text:00000000000E4020 var_s0=  0
.text:00000000000E4020
.text:00000000000E4020 ; __unwind {
.text:00000000000E4020 SUB             SP, SP, #0x60
.text:00000000000E4024 STP             X26, X25, [SP,#0x50+var_40]
.text:00000000000E4028 STP             X24, X23, [SP,#0x50+var_30]
.text:00000000000E402C STP             X22, X21, [SP,#0x50+var_20]
.text:00000000000E4030 STP             X20, X19, [SP,#0x50+var_10]
.text:00000000000E4034 STP             X29, X30, [SP,#0x50+var_s0]
.text:00000000000E4038 ADD             X29, SP, #0x50
.text:00000000000E403C MRS             X25, #3, c13, c0, #2
.text:00000000000E4040 MOV             X19, X1
.text:00000000000E4044 LDR             X8, [X25,#0x28]
.text:00000000000E4048 ADRP            X1, #aPthreadJoin_0@PAGE ; "pthread_join"
.text:00000000000E404C MOV             X20, X0
.text:00000000000E4050 ADD             X1, X1, #aPthreadJoin_0@PAGEOFF ; "pthread_join"
.text:00000000000E4054 MOV             X0, SP  ; this
.text:00000000000E4058 STR             X8, [SP,#0x50+var_48]
.text:00000000000E405C BL              _ZN11ScopedTraceC2EPKc ; ScopedTrace::ScopedTrace(char const*)
.text:00000000000E4060 BL              .pthread_self
.text:00000000000E4064 CMP             X0, X20
.text:00000000000E4068 B.NE            loc_E4074
.text:00000000000E406C MOV             W19, #0x23 ; '#'
.text:00000000000E4070 B               loc_E4154
.text:00000000000E4074
.text:00000000000E4074 loc_E4074
.text:00000000000E4074 ADRP            X1, #aPthreadJoin_0@PAGE ; "pthread_join"
.text:00000000000E4078 ADD             X1, X1, #aPthreadJoin_0@PAGEOFF ; "pthread_join"
.text:00000000000E407C MOV             X0, X20 ; __int64
.text:00000000000E4080 BL              _Z23__pthread_internal_findlPKc ; __pthread_internal_find(long,char const*)
.text:00000000000E4084 CBZ             X0, loc_E40D4
.text:00000000000E4088 MOV             X20, X0
.text:00000000000E408C MOV             W9, WZR
.text:00000000000E4090 ADD             X8, X0, #0x50 ; 'P'
.text:00000000000E4094 MOV             W10, #2
.text:00000000000E4098 B               loc_E40A0
.text:00000000000E409C
.text:00000000000E409C loc_E409C
.text:00000000000E409C CLREX
.text:00000000000E40A0
.text:00000000000E40A0 loc_E40A0
.text:00000000000E40A0 MOV             W11, W9
.text:00000000000E40A4 CMP             W9, #1
.text:00000000000E40A8 B.HI            loc_E40C0
.text:00000000000E40AC LDAXR           W9, [X8]
.text:00000000000E40B0 CMP             W9, W11
.text:00000000000E40B4 B.NE            loc_E409C
.text:00000000000E40B8 STLXR           W12, W10, [X8]
.text:00000000000E40BC CBNZ            W12, loc_E40A0
.text:00000000000E40C0
.text:00000000000E40C0 loc_E40C0
.text:00000000000E40C0 ORR             W8, W11, #1
.text:00000000000E40C4 CMP             W8, #3
.text:00000000000E40C8 B.NE            loc_E40DC
.text:00000000000E40CC MOV             W19, #0x16
.text:00000000000E40D0 B               loc_E4154
.text:00000000000E40D4
.text:00000000000E40D4 loc_E40D4
.text:00000000000E40D4 MOV             W19, #3
.text:00000000000E40D8 B               loc_E4154
.text:00000000000E40DC
.text:00000000000E40DC loc_E40DC
.text:00000000000E40DC MOV             X21, X20
.text:00000000000E40E0 LDR             W22, [X21,#0x10]!
.text:00000000000E40E4 LDR             W8, [X21]
.text:00000000000E40E8 CBZ             W8, loc_E413C
.text:00000000000E40EC BL              .__errno
.text:00000000000E40F0 MOV             X23, X0
.text:00000000000E40F4 MOV             W24, #0x62 ; 'b'
.text:00000000000E40F8
.text:00000000000E40F8 loc_E40F8
.text:00000000000E40F8 LDR             W26, [X23]
.text:00000000000E40FC MOV             X0, X24
.text:00000000000E4100 MOV             X1, X21
.text:00000000000E4104 MOV             W2, WZR
.text:00000000000E4108 MOV             W3, W22
.text:00000000000E410C MOV             X4, XZR
.text:00000000000E4110 MOV             X5, XZR
.text:00000000000E4114 MOV             W6, WZR
.text:00000000000E4118 BL              .syscall
.text:00000000000E411C CMN             W0, #1
.text:00000000000E4120 B.EQ            loc_E4130
.text:00000000000E4124 LDR             W8, [X21]
.text:00000000000E4128 CBNZ            W8, loc_E40F8
.text:00000000000E412C B               loc_E413C
.text:00000000000E4130
.text:00000000000E4130 loc_E4130
.text:00000000000E4130 STR             W26, [X23]
.text:00000000000E4134 LDR             W8, [X21]
.text:00000000000E4138 CBNZ            W8, loc_E40F8
.text:00000000000E413C
.text:00000000000E413C loc_E413C
.text:00000000000E413C CBZ             X19, loc_E4148
.text:00000000000E4140 LDR             X8, [X20,#0x70]
.text:00000000000E4144 STR             X8, [X19]
.text:00000000000E4148
.text:00000000000E4148 loc_E4148
.text:00000000000E4148 MOV             X0, X20
.text:00000000000E414C BL              _Z34__pthread_internal_remove_and_freeP18pthread_internal_t ; __pthread_internal_remove_and_free(pthread_internal_t *)
.text:00000000000E4150 MOV             W19, WZR
.text:00000000000E4154
.text:00000000000E4154 loc_E4154               ; this
.text:00000000000E4154 MOV             X0, SP
.text:00000000000E4158 BL              _ZN11ScopedTraceD2Ev ; ScopedTrace::~ScopedTrace()
.text:00000000000E415C LDR             X8, [X25,#0x28]
.text:00000000000E4160 LDR             X9, [SP,#0x50+var_48]
.text:00000000000E4164 CMP             X8, X9
.text:00000000000E4168 B.NE            loc_E418C
.text:00000000000E416C MOV             W0, W19
.text:00000000000E4170 LDP             X29, X30, [SP,#0x50+var_s0]
.text:00000000000E4174 LDP             X20, X19, [SP,#0x50+var_10]
.text:00000000000E4178 LDP             X22, X21, [SP,#0x50+var_20]
.text:00000000000E417C LDP             X24, X23, [SP,#0x50+var_30]
.text:00000000000E4180 LDP             X26, X25, [SP,#0x50+var_40]
.text:00000000000E4184 ADD             SP, SP, #0x60 ; '`'
.text:00000000000E4188 RET
.text:00000000000E418C
.text:00000000000E418C loc_E418C
.text:00000000000E418C BL              .__stack_chk_fail
.text:00000000000E418C ; } // starts at E4020
.text:00000000000E418C ; End of function pthread_join
.text:00000000000E418C
.text:00000000000E4190
.text:00000000000E4190
.text:00000000000E4190 ; Attributes: bp-based frame
.text:00000000000E4190
.text:00000000000E4190 ; __int64 pthread_key_clean_all(void)
.text:00000000000E4190 _Z21pthread_key_clean_allv
.text:00000000000E4190
.text:00000000000E4190 var_30= -0x30
.text:00000000000E4190 var_20= -0x20
.text:00000000000E4190 var_10= -0x10
.text:00000000000E4190 var_s0=  0
.text:00000000000E4190
.text:00000000000E4190 ; __unwind {
.text:00000000000E4190 STR             X23, [SP,#-0x10+var_30]!
.text:00000000000E4194 STP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E4198 STP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E419C STP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E41A0 ADD             X29, SP, #0x30
.text:00000000000E41A4 MRS             X8, #3, c13, c0, #2
.text:00000000000E41A8 LDUR            X19, [X8,#-8]
.text:00000000000E41AC ADRP            X21, #_ZL7key_map@PAGE ; key_map
.text:00000000000E41B0 MOV             W20, #4
.text:00000000000E41B4 ADD             X21, X21, #_ZL7key_map@PAGEOFF ; key_map
.text:00000000000E41B8
.text:00000000000E41B8 loc_E41B8
.text:00000000000E41B8 MOV             X23, XZR
.text:00000000000E41BC MOV             X22, XZR
.text:00000000000E41C0
.text:00000000000E41C0 loc_E41C0
.text:00000000000E41C0 LDR             X8, [X21,X23]
.text:00000000000E41C4 TBZ             W8, #0, loc_E420C
.text:00000000000E41C8 LDR             X9, [X19,X23]
.text:00000000000E41CC CMP             X8, X9
.text:00000000000E41D0 B.NE            loc_E420C
.text:00000000000E41D4 ADD             X9, X19, X23
.text:00000000000E41D8 LDR             X10, [X9,#8]
.text:00000000000E41DC CBZ             X10, loc_E420C
.text:00000000000E41E0 ADD             X10, X21, X23
.text:00000000000E41E4 LDR             X10, [X10,#8]
.text:00000000000E41E8 CBZ             X10, loc_E420C
.text:00000000000E41EC DMB             ISHLD
.text:00000000000E41F0 LDR             X11, [X21,X23]
.text:00000000000E41F4 CMP             X11, X8
.text:00000000000E41F8 B.NE            loc_E420C
.text:00000000000E41FC LDR             X0, [X9,#8]
.text:00000000000E4200 STR             XZR, [X9,#8]
.text:00000000000E4204 BLR             X10
.text:00000000000E4208 ADD             X22, X22, #1
.text:00000000000E420C
.text:00000000000E420C loc_E420C
.text:00000000000E420C ADD             X23, X23, #0x10
.text:00000000000E4210 CMP             X23, #0x820
.text:00000000000E4214 B.NE            loc_E41C0
.text:00000000000E4218 CBZ             X22, loc_E4224
.text:00000000000E421C SUB             X20, X20, #1
.text:00000000000E4220 CBNZ            X20, loc_E41B8
.text:00000000000E4224
.text:00000000000E4224 loc_E4224
.text:00000000000E4224 LDP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E4228 LDP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E422C LDP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E4230 LDR             X23, [SP+0x30+var_30],#0x40
.text:00000000000E4234 RET
.text:00000000000E4234 ; } // starts at E4190
.text:00000000000E4234 ; End of function pthread_key_clean_all(void)
.text:00000000000E4234
.text:00000000000E4238
.text:00000000000E4238
.text:00000000000E4238
.text:00000000000E4238 WEAK pthread_key_create
.text:00000000000E4238 pthread_key_create
.text:00000000000E4238 ; __unwind {
.text:00000000000E4238 ADRP            X10, #_ZL7key_map@PAGE ; key_map
.text:00000000000E423C MOV             X9, XZR
.text:00000000000E4240 MOV             W8, #0xB
.text:00000000000E4244 ADD             X10, X10, #_ZL7key_map@PAGEOFF ; key_map
.text:00000000000E4248
.text:00000000000E4248 loc_E4248
.text:00000000000E4248 ADD             X11, X10, X9,LSL#4
.text:00000000000E424C LDR             X12, [X11]
.text:00000000000E4250 B               loc_E425C
.text:00000000000E4254
.text:00000000000E4254 loc_E4254
.text:00000000000E4254 MOV             X12, X13
.text:00000000000E4258 CLREX
.text:00000000000E425C
.text:00000000000E425C loc_E425C
.text:00000000000E425C TBNZ            W12, #0, loc_E4280
.text:00000000000E4260 LDAXR           X13, [X11]
.text:00000000000E4264 CMP             X13, X12
.text:00000000000E4268 B.NE            loc_E4254
.text:00000000000E426C ADD             X12, X12, #1
.text:00000000000E4270 STLXR           W14, X12, [X11]
.text:00000000000E4274 MOV             X12, X13
.text:00000000000E4278 CBNZ            W14, loc_E425C
.text:00000000000E427C B               loc_E4294
.text:00000000000E4280
.text:00000000000E4280 loc_E4280
.text:00000000000E4280 ADD             X9, X9, #1
.text:00000000000E4284 CMP             X9, #0x82
.text:00000000000E4288 B.CC            loc_E4248
.text:00000000000E428C MOV             W0, W8
.text:00000000000E4290 RET
.text:00000000000E4294
.text:00000000000E4294 loc_E4294
.text:00000000000E4294 ADD             X10, X11, #8
.text:00000000000E4298 ORR             W9, W9, #0x80000000
.text:00000000000E429C STLR            X1, [X10]
.text:00000000000E42A0 STR             W9, [X0]
.text:00000000000E42A4 MOV             W0, WZR
.text:00000000000E42A8 RET
.text:00000000000E42A8 ; } // starts at E4238
.text:00000000000E42A8 ; End of function pthread_key_create
.text:00000000000E42A8
.text:00000000000E42AC ALIGN 0x10
.text:00000000000E42B0
.text:00000000000E42B0
.text:00000000000E42B0
.text:00000000000E42B0 WEAK pthread_key_delete
.text:00000000000E42B0 pthread_key_delete
.text:00000000000E42B0 ; __unwind {
.text:00000000000E42B0 MOV             W8, #0x80000081
.text:00000000000E42B8 CMP             W0, W8
.text:00000000000E42BC B.GT            loc_E430C
.text:00000000000E42C0 AND             W8, W0, #0x7FFFFFFF
.text:00000000000E42C4 ADRP            X9, #_ZL7key_map@PAGE ; key_map
.text:00000000000E42C8 ADD             X9, X9, #_ZL7key_map@PAGEOFF ; key_map
.text:00000000000E42CC ADD             X8, X9, W8,UXTW#4
.text:00000000000E42D0 LDR             X9, [X8]
.text:00000000000E42D4 TBNZ            W9, #0, loc_E42E0
.text:00000000000E42D8 MOV             W0, #0x16
.text:00000000000E42DC RET
.text:00000000000E42E0
.text:00000000000E42E0 loc_E42E0
.text:00000000000E42E0 ADD             X10, X9, #1
.text:00000000000E42E4
.text:00000000000E42E4 loc_E42E4
.text:00000000000E42E4 LDAXR           X11, [X8]
.text:00000000000E42E8 CMP             X11, X9
.text:00000000000E42EC B.NE            loc_E4300
.text:00000000000E42F0 STLXR           W11, X10, [X8]
.text:00000000000E42F4 CBNZ            W11, loc_E42E4
.text:00000000000E42F8 MOV             W0, WZR
.text:00000000000E42FC RET
.text:00000000000E4300
.text:00000000000E4300 loc_E4300
.text:00000000000E4300 MOV             W0, #0x16
.text:00000000000E4304 CLREX
.text:00000000000E4308 RET
.text:00000000000E430C
.text:00000000000E430C loc_E430C
.text:00000000000E430C MOV             W0, #0x16
.text:00000000000E4310 RET
.text:00000000000E4310 ; } // starts at E42B0
.text:00000000000E4310 ; End of function pthread_key_delete
.text:00000000000E4310
.text:00000000000E4314 ALIGN 8
.text:00000000000E4318
.text:00000000000E4318
.text:00000000000E4318
.text:00000000000E4318 WEAK pthread_getspecific
.text:00000000000E4318 pthread_getspecific
.text:00000000000E4318 ; __unwind {
.text:00000000000E4318 MOV             W8, #0x80000081
.text:00000000000E4320 CMP             W0, W8
.text:00000000000E4324 B.GT            loc_E4360
.text:00000000000E4328 ADRP            X10, #_ZL7key_map@PAGE ; key_map
.text:00000000000E432C AND             W8, W0, #0x7FFFFFFF
.text:00000000000E4330 ADD             X10, X10, #_ZL7key_map@PAGEOFF ; key_map
.text:00000000000E4334 LSL             X9, X8, #4
.text:00000000000E4338 LDR             X9, [X10,X9]
.text:00000000000E433C MRS             X10, #3, c13, c0, #2
.text:00000000000E4340 LDUR            X10, [X10,#-8]
.text:00000000000E4344 ADD             X8, X10, X8,LSL#4
.text:00000000000E4348 TBZ             W9, #0, loc_E4368
.text:00000000000E434C LDR             X10, [X8],#8
.text:00000000000E4350 CMP             X10, X9
.text:00000000000E4354 B.NE            loc_E436C
.text:00000000000E4358 LDR             X0, [X8]
.text:00000000000E435C RET
.text:00000000000E4360
.text:00000000000E4360 loc_E4360
.text:00000000000E4360 MOV             X0, XZR
.text:00000000000E4364 RET
.text:00000000000E4368
.text:00000000000E4368 loc_E4368
.text:00000000000E4368 ADD             X8, X8, #8
.text:00000000000E436C
.text:00000000000E436C loc_E436C
.text:00000000000E436C MOV             X0, XZR
.text:00000000000E4370 STR             XZR, [X8]
.text:00000000000E4374 RET
.text:00000000000E4374 ; } // starts at E4318
.text:00000000000E4374 ; End of function pthread_getspecific
.text:00000000000E4374
.text:00000000000E4378
.text:00000000000E4378
.text:00000000000E4378
.text:00000000000E4378 WEAK pthread_setspecific
.text:00000000000E4378 pthread_setspecific
.text:00000000000E4378 ; __unwind {
.text:00000000000E4378 MOV             W8, #0x80000081
.text:00000000000E4380 CMP             W0, W8
.text:00000000000E4384 B.GT            loc_E43B8
.text:00000000000E4388 ADRP            X10, #_ZL7key_map@PAGE ; key_map
.text:00000000000E438C AND             W8, W0, #0x7FFFFFFF
.text:00000000000E4390 ADD             X10, X10, #_ZL7key_map@PAGEOFF ; key_map
.text:00000000000E4394 LSL             X9, X8, #4
.text:00000000000E4398 LDR             X9, [X10,X9]
.text:00000000000E439C TBZ             W9, #0, loc_E43C0
.text:00000000000E43A0 MRS             X10, #3, c13, c0, #2
.text:00000000000E43A4 MOV             W0, WZR
.text:00000000000E43A8 LDUR            X10, [X10,#-8]
.text:00000000000E43AC ADD             X8, X10, X8,LSL#4
.text:00000000000E43B0 STP             X9, X1, [X8]
.text:00000000000E43B4 RET
.text:00000000000E43B8
.text:00000000000E43B8 loc_E43B8
.text:00000000000E43B8 MOV             W0, #0x16
.text:00000000000E43BC RET
.text:00000000000E43C0
.text:00000000000E43C0 loc_E43C0
.text:00000000000E43C0 MOV             W0, #0x16
.text:00000000000E43C4 RET
.text:00000000000E43C4 ; } // starts at E4378
.text:00000000000E43C4 ; End of function pthread_setspecific
.text:00000000000E43C4
.text:00000000000E43C8
.text:00000000000E43C8
.text:00000000000E43C8 ; Attributes: bp-based frame
.text:00000000000E43C8
.text:00000000000E43C8 EXPORT pthread_kill
.text:00000000000E43C8 pthread_kill
.text:00000000000E43C8
.text:00000000000E43C8 var_20= -0x20
.text:00000000000E43C8 var_10= -0x10
.text:00000000000E43C8 var_s0=  0
.text:00000000000E43C8
.text:00000000000E43C8 ; __unwind {
.text:00000000000E43C8 STP             X22, X21, [SP,#-0x10+var_20]!
.text:00000000000E43CC STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E43D0 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E43D4 ADD             X29, SP, #0x20
.text:00000000000E43D8 MOV             W20, W1
.text:00000000000E43DC MOV             X21, X0
.text:00000000000E43E0 BL              .__errno
.text:00000000000E43E4 ADRP            X1, #aPthreadKill_0@PAGE ; "pthread_kill"
.text:00000000000E43E8 LDR             W22, [X0]
.text:00000000000E43EC MOV             X19, X0
.text:00000000000E43F0 ADD             X1, X1, #aPthreadKill_0@PAGEOFF ; "pthread_kill"
.text:00000000000E43F4 MOV             X0, X21 ; __int64
.text:00000000000E43F8 BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E43FC ADD             W8, W0, #1
.text:00000000000E4400 CMP             W8, #2
.text:00000000000E4404 B.CS            loc_E4410
.text:00000000000E4408 MOV             W0, #3
.text:00000000000E440C B               loc_E4438
.text:00000000000E4410
.text:00000000000E4410 loc_E4410
.text:00000000000E4410 MOV             W21, W0
.text:00000000000E4414 BL              .getpid
.text:00000000000E4418 MOV             W1, W21
.text:00000000000E441C MOV             W2, W20
.text:00000000000E4420 BL              .tgkill
.text:00000000000E4424 CMN             W0, #1
.text:00000000000E4428 B.EQ            loc_E4434
.text:00000000000E442C MOV             W0, WZR
.text:00000000000E4430 B               loc_E4438
.text:00000000000E4434
.text:00000000000E4434 loc_E4434
.text:00000000000E4434 LDR             W0, [X19]
.text:00000000000E4438
.text:00000000000E4438 loc_E4438
.text:00000000000E4438 STR             W22, [X19]
.text:00000000000E443C LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E4440 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E4444 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000E4448 RET
.text:00000000000E4448 ; } // starts at E43C8
.text:00000000000E4448 ; End of function pthread_kill
.text:00000000000E4448
.text:00000000000E444C ALIGN 0x10
.text:00000000000E4450
.text:00000000000E4450
.text:00000000000E4450
.text:00000000000E4450 EXPORT pthread_mutexattr_init
.text:00000000000E4450 pthread_mutexattr_init
.text:00000000000E4450 ; __unwind {
.text:00000000000E4450 MOV             X8, X0
.text:00000000000E4454 MOV             W0, WZR
.text:00000000000E4458 STR             XZR, [X8]
.text:00000000000E445C RET
.text:00000000000E445C ; } // starts at E4450
.text:00000000000E445C ; End of function pthread_mutexattr_init
.text:00000000000E445C
.text:00000000000E4460
.text:00000000000E4460
.text:00000000000E4460
.text:00000000000E4460 EXPORT pthread_mutexattr_destroy
.text:00000000000E4460 pthread_mutexattr_destroy
.text:00000000000E4460 ; __unwind {
.text:00000000000E4460 MOV             X8, X0
.text:00000000000E4464 MOV             X9, #0xFFFFFFFFFFFFFFFF
.text:00000000000E4468 MOV             W0, WZR
.text:00000000000E446C STR             X9, [X8]
.text:00000000000E4470 RET
.text:00000000000E4470 ; } // starts at E4460
.text:00000000000E4470 ; End of function pthread_mutexattr_destroy
.text:00000000000E4470
.text:00000000000E4474 ALIGN 8
.text:00000000000E4478
.text:00000000000E4478
.text:00000000000E4478
.text:00000000000E4478 EXPORT pthread_mutexattr_gettype
.text:00000000000E4478 pthread_mutexattr_gettype
.text:00000000000E4478 ; __unwind {
.text:00000000000E4478 LDR             W8, [X0]
.text:00000000000E447C AND             W8, W8, #0xF
.text:00000000000E4480 CMP             W8, #2
.text:00000000000E4484 B.LS            loc_E4490
.text:00000000000E4488 MOV             W0, #0x16
.text:00000000000E448C RET
.text:00000000000E4490
.text:00000000000E4490 loc_E4490
.text:00000000000E4490 MOV             W0, WZR
.text:00000000000E4494 STR             W8, [X1]
.text:00000000000E4498 RET
.text:00000000000E4498 ; } // starts at E4478
.text:00000000000E4498 ; End of function pthread_mutexattr_gettype
.text:00000000000E4498
.text:00000000000E449C ALIGN 0x20
.text:00000000000E44A0
.text:00000000000E44A0
.text:00000000000E44A0
.text:00000000000E44A0 EXPORT pthread_mutexattr_settype
.text:00000000000E44A0 pthread_mutexattr_settype
.text:00000000000E44A0 ; __unwind {
.text:00000000000E44A0 CMP             W1, #2
.text:00000000000E44A4 B.LS            loc_E44B4
.text:00000000000E44A8 MOV             W8, #0x16
.text:00000000000E44AC MOV             W0, W8
.text:00000000000E44B0 RET
.text:00000000000E44B4
.text:00000000000E44B4 loc_E44B4
.text:00000000000E44B4 LDR             X8, [X0]
.text:00000000000E44B8 SXTW            X9, W1
.text:00000000000E44BC AND             X8, X8, #0xFFFFFFFFFFFFFFF0
.text:00000000000E44C0 ORR             X9, X8, X9
.text:00000000000E44C4 STR             X9, [X0]
.text:00000000000E44C8 MOV             W0, WZR
.text:00000000000E44CC RET
.text:00000000000E44CC ; } // starts at E44A0
.text:00000000000E44CC ; End of function pthread_mutexattr_settype
.text:00000000000E44CC
.text:00000000000E44D0
.text:00000000000E44D0
.text:00000000000E44D0
.text:00000000000E44D0 EXPORT pthread_mutexattr_setpshared
.text:00000000000E44D0 pthread_mutexattr_setpshared
.text:00000000000E44D0 ; __unwind {
.text:00000000000E44D0 CMP             W1, #1
.text:00000000000E44D4 B.EQ            loc_E44E8
.text:00000000000E44D8 CBNZ            W1, loc_E44FC
.text:00000000000E44DC LDR             X8, [X0]
.text:00000000000E44E0 AND             X9, X8, #0xFFFFFFFFFFFFFFEF
.text:00000000000E44E4 B               loc_E44F0
.text:00000000000E44E8
.text:00000000000E44E8 loc_E44E8
.text:00000000000E44E8 LDR             X8, [X0]
.text:00000000000E44EC ORR             X9, X8, #0x10
.text:00000000000E44F0
.text:00000000000E44F0 loc_E44F0
.text:00000000000E44F0 STR             X9, [X0]
.text:00000000000E44F4 MOV             W0, WZR
.text:00000000000E44F8 RET
.text:00000000000E44FC
.text:00000000000E44FC loc_E44FC
.text:00000000000E44FC MOV             W8, #0x16
.text:00000000000E4500 MOV             W0, W8
.text:00000000000E4504 RET
.text:00000000000E4504 ; } // starts at E44D0
.text:00000000000E4504 ; End of function pthread_mutexattr_setpshared
.text:00000000000E4504
.text:00000000000E4508
.text:00000000000E4508
.text:00000000000E4508
.text:00000000000E4508 EXPORT pthread_mutexattr_getpshared
.text:00000000000E4508 pthread_mutexattr_getpshared
.text:00000000000E4508 ; __unwind {
.text:00000000000E4508 LDR             W8, [X0]
.text:00000000000E450C MOV             W0, WZR
.text:00000000000E4510 UBFX            W8, W8, #4, #1
.text:00000000000E4514 STR             W8, [X1]
.text:00000000000E4518 RET
.text:00000000000E4518 ; } // starts at E4508
.text:00000000000E4518 ; End of function pthread_mutexattr_getpshared
.text:00000000000E4518
.text:00000000000E451C ALIGN 0x20
.text:00000000000E4520
.text:00000000000E4520
.text:00000000000E4520
.text:00000000000E4520 EXPORT pthread_mutexattr_setprotocol
.text:00000000000E4520 pthread_mutexattr_setprotocol
.text:00000000000E4520 ; __unwind {
.text:00000000000E4520 CMP             W1, #1
.text:00000000000E4524 B.LS            loc_E4534
.text:00000000000E4528 MOV             W8, #0x16
.text:00000000000E452C MOV             W0, W8
.text:00000000000E4530 RET
.text:00000000000E4534
.text:00000000000E4534 loc_E4534
.text:00000000000E4534 LDR             X8, [X0]
.text:00000000000E4538 LSL             W9, W1, #5
.text:00000000000E453C SXTW            X9, W9
.text:00000000000E4540 AND             X8, X8, #0xFFFFFFFFFFFFFFDF
.text:00000000000E4544 ORR             X9, X8, X9
.text:00000000000E4548 STR             X9, [X0]
.text:00000000000E454C MOV             W0, WZR
.text:00000000000E4550 RET
.text:00000000000E4550 ; } // starts at E4520
.text:00000000000E4550 ; End of function pthread_mutexattr_setprotocol
.text:00000000000E4550
.text:00000000000E4554 ALIGN 8
.text:00000000000E4558
.text:00000000000E4558
.text:00000000000E4558
.text:00000000000E4558 EXPORT pthread_mutexattr_getprotocol
.text:00000000000E4558 pthread_mutexattr_getprotocol
.text:00000000000E4558 ; __unwind {
.text:00000000000E4558 LDR             W8, [X0]
.text:00000000000E455C MOV             W0, WZR
.text:00000000000E4560 UBFX            W8, W8, #5, #1
.text:00000000000E4564 STR             W8, [X1]
.text:00000000000E4568 RET
.text:00000000000E4568 ; } // starts at E4558
.text:00000000000E4568 ; End of function pthread_mutexattr_getprotocol
.text:00000000000E4568
.text:00000000000E456C ALIGN 0x10
.text:00000000000E4570
.text:00000000000E4570
.text:00000000000E4570
.text:00000000000E4570 EXPORT pthread_mutex_init
.text:00000000000E4570 pthread_mutex_init
.text:00000000000E4570 ; __unwind {
.text:00000000000E4570 MOVI            V0.2D, #0
.text:00000000000E4574 STR             XZR, [X0,#0x20]
.text:00000000000E4578 STP             Q0, Q0, [X0]
.text:00000000000E457C CBNZ            X1, loc_E458C
.text:00000000000E4580 STRH            WZR, [X0]
.text:00000000000E4584 MOV             W0, WZR
.text:00000000000E4588 RET
.text:00000000000E458C
.text:00000000000E458C loc_E458C
.text:00000000000E458C LDR             X8, [X1]
.text:00000000000E4590 LSL             W9, W8, #9
.text:00000000000E4594 AND             W9, W9, #0x2000
.text:00000000000E4598 ANDS            X10, X8, #0xF
.text:00000000000E459C B.EQ            loc_E45C0
.text:00000000000E45A0 CMP             X10, #2
.text:00000000000E45A4 B.EQ            loc_E45BC
.text:00000000000E45A8 CMP             X10, #1
.text:00000000000E45AC B.NE            loc_E45FC
.text:00000000000E45B0 ORR             W9, W9, #0x4000
.text:00000000000E45B4 TBZ             W8, #5, loc_E45C4
.text:00000000000E45B8 B               loc_E45D4
.text:00000000000E45BC
.text:00000000000E45BC loc_E45BC
.text:00000000000E45BC ORR             W9, W9, #0xFFFF8000
.text:00000000000E45C0
.text:00000000000E45C0 loc_E45C0
.text:00000000000E45C0 TBNZ            W8, #5, loc_E45D4
.text:00000000000E45C4
.text:00000000000E45C4 loc_E45C4
.text:00000000000E45C4 STRH            W9, [X0]
.text:00000000000E45C8 STR             WZR, [X0,#4]
.text:00000000000E45CC MOV             W0, WZR
.text:00000000000E45D0 RET
.text:00000000000E45D4
.text:00000000000E45D4 loc_E45D4
.text:00000000000E45D4 MOV             W9, #0xC000
.text:00000000000E45D8 STRH            W9, [X0]
.text:00000000000E45DC LDRB            W9, [X1]
.text:00000000000E45E0 AND             W9, W9, #0xF
.text:00000000000E45E4 STRB            W9, [X0,#4]
.text:00000000000E45E8 LDR             W9, [X1]
.text:00000000000E45EC UBFX            W9, W9, #4, #1
.text:00000000000E45F0 STRB            W9, [X0,#5]
.text:00000000000E45F4 MOV             W0, WZR
.text:00000000000E45F8 RET
.text:00000000000E45FC
.text:00000000000E45FC loc_E45FC
.text:00000000000E45FC MOV             W8, #0x16
.text:00000000000E4600 MOV             W0, W8
.text:00000000000E4604 RET
.text:00000000000E4604 ; } // starts at E4570
.text:00000000000E4604 ; End of function pthread_mutex_init
.text:00000000000E4604
.text:00000000000E4608
.text:00000000000E4608
.text:00000000000E4608
.text:00000000000E4608 EXPORT pthread_mutex_lock
.text:00000000000E4608 pthread_mutex_lock
.text:00000000000E4608
.text:00000000000E4608 var_10= -0x10
.text:00000000000E4608
.text:00000000000E4608 ; __unwind {
.text:00000000000E4608 LDRH            W9, [X0]
.text:00000000000E460C AND             X8, X9, #0xFFFF
.text:00000000000E4610 UBFX            W9, W9, #0xE, #2
.text:00000000000E4614 CBNZ            W9, loc_E465C
.text:00000000000E4618 AND             X8, X8, #0x2000
.text:00000000000E461C ORR             X9, X8, #1
.text:00000000000E4620
.text:00000000000E4620 loc_E4620
.text:00000000000E4620 LDAXRH          W10, [X0]
.text:00000000000E4624 CMP             W10, W8
.text:00000000000E4628 B.NE            loc_E464C
.text:00000000000E462C STXRH           W10, W9, [X0]
.text:00000000000E4630 CBNZ            W10, loc_E4620
.text:00000000000E4634 MRS             X8, #3, c13, c0, #2
.text:00000000000E4638 LDR             X8, [X8,#8]
.text:00000000000E463C LDR             W8, [X8,#0x10]
.text:00000000000E4640 STR             W8, [X0,#4]
.text:00000000000E4644 MOV             W0, WZR
.text:00000000000E4648 RET
.text:00000000000E464C
.text:00000000000E464C loc_E464C
.text:00000000000E464C CLREX
.text:00000000000E4650
.text:00000000000E4650 loc_E4650
.text:00000000000E4650 MOV             W1, WZR
.text:00000000000E4654 MOV             X2, XZR
.text:00000000000E4658 B               _ZN5NonPIL20MutexLockWithTimeoutEP24pthread_mutex_internal_tbPK8timespec ; NonPI::MutexLockWithTimeout(pthread_mutex_internal_t *,bool,timespec const*)
.text:00000000000E465C
.text:00000000000E465C loc_E465C
.text:00000000000E465C CMP             W8, #0xC,LSL#12
.text:00000000000E4660 B.NE            loc_E4690
.text:00000000000E4664 MRS             X8, #3, c13, c0, #2
.text:00000000000E4668 LDR             X9, [X8,#8]
.text:00000000000E466C ADD             X8, X0, #4
.text:00000000000E4670 ADD             X11, X0, #8
.text:00000000000E4674 LDR             W10, [X9,#0x10]
.text:00000000000E4678
.text:00000000000E4678 loc_E4678
.text:00000000000E4678 LDAXR           W9, [X11]
.text:00000000000E467C CBNZ            W9, loc_E46C0
.text:00000000000E4680 STXR            W12, W10, [X11]
.text:00000000000E4684 CBNZ            W12, loc_E4678
.text:00000000000E4688 MOV             W0, W9  ; pthread_mutex_t *
.text:00000000000E468C RET
.text:00000000000E4690
.text:00000000000E4690 loc_E4690
.text:00000000000E4690 MOV             W9, #0xFFFF
.text:00000000000E4694 CMP             W8, W9
.text:00000000000E4698 B.NE            loc_E4650
.text:00000000000E469C STP             X29, X30, [SP,#var_10]!
.text:00000000000E46A0 MOV             X29, SP
.text:00000000000E46A4 ADRP            X1, #aPthreadMutexLo_0@PAGE ; "pthread_mutex_lock"
.text:00000000000E46A8 ADD             X1, X1, #aPthreadMutexLo_0@PAGEOFF ; "pthread_mutex_lock"
.text:00000000000E46AC BL              _ZL25HandleUsingDestroyedMutexP15pthread_mutex_tPKc ; HandleUsingDestroyedMutex(pthread_mutex_t *,char const*)
.text:00000000000E46B0 MOV             W9, #0x10
.text:00000000000E46B4 LDP             X29, X30, [SP+0x10+var_10],#0x10
.text:00000000000E46B8 MOV             W0, W9
.text:00000000000E46BC RET
.text:00000000000E46C0
.text:00000000000E46C0 loc_E46C0
.text:00000000000E46C0 AND             W9, W9, #0x3FFFFFFF
.text:00000000000E46C4 CLREX
.text:00000000000E46C8 CMP             W10, W9
.text:00000000000E46CC B.NE            loc_E46E0
.text:00000000000E46D0 LDRB            W9, [X8]
.text:00000000000E46D4 ORR             W9, W9, #2
.text:00000000000E46D8 CMP             W9, #2
.text:00000000000E46DC B.NE            loc_E46F0
.text:00000000000E46E0
.text:00000000000E46E0 loc_E46E0
.text:00000000000E46E0 MOV             X0, X8
.text:00000000000E46E4 MOV             W1, WZR
.text:00000000000E46E8 MOV             X2, XZR
.text:00000000000E46EC B               _ZL16PIMutexTimedLockR7PIMutexbPK8timespec ; PIMutexTimedLock(PIMutex &,bool,timespec const*)
.text:00000000000E46F0
.text:00000000000E46F0 loc_E46F0
.text:00000000000E46F0 LDRH            W9, [X8,#2]
.text:00000000000E46F4 MOV             W10, #0xFFFF
.text:00000000000E46F8 CMP             W9, W10
.text:00000000000E46FC B.EQ            loc_E46E0
.text:00000000000E4700 ADD             W10, W9, #1
.text:00000000000E4704 MOV             W0, WZR
.text:00000000000E4708 STRH            W10, [X8,#2]
.text:00000000000E470C RET
.text:00000000000E470C ; } // starts at E4608
.text:00000000000E470C ; End of function pthread_mutex_lock
.text:00000000000E470C
.text:00000000000E4710
.text:00000000000E4710
.text:00000000000E4710 ; Attributes: bp-based frame
.text:00000000000E4710
.text:00000000000E4710 ; PIMutexTimedLock(PIMutex &, bool, timespec const*)
.text:00000000000E4710 _ZL16PIMutexTimedLockR7PIMutexbPK8timespec
.text:00000000000E4710
.text:00000000000E4710 var_38= -0x38
.text:00000000000E4710 var_30= -0x30
.text:00000000000E4710 var_20= -0x20
.text:00000000000E4710 var_10= -0x10
.text:00000000000E4710 var_s0=  0
.text:00000000000E4710
.text:00000000000E4710 ; __unwind {
.text:00000000000E4710 SUB             SP, SP, #0x50
.text:00000000000E4714 STR             X23, [SP,#0x40+var_30]
.text:00000000000E4718 STP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E471C STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E4720 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E4724 ADD             X29, SP, #0x40
.text:00000000000E4728 MRS             X23, #3, c13, c0, #2
.text:00000000000E472C MOV             X20, X2
.text:00000000000E4730 LDR             X8, [X23,#0x28]
.text:00000000000E4734 MOV             W21, W1
.text:00000000000E4738 MOV             X19, X0
.text:00000000000E473C ADD             X22, X0, #4
.text:00000000000E4740 STR             X8, [SP,#0x40+var_38]
.text:00000000000E4744 MRS             X8, #3, c13, c0, #2
.text:00000000000E4748 LDR             X8, [X8,#8]
.text:00000000000E474C LDR             W8, [X8,#0x10]
.text:00000000000E4750
.text:00000000000E4750 loc_E4750
.text:00000000000E4750 LDAXR           W9, [X22]
.text:00000000000E4754 CBNZ            W9, loc_E4768
.text:00000000000E4758 STXR            W9, W8, [X22]
.text:00000000000E475C CBNZ            W9, loc_E4750
.text:00000000000E4760 MOV             W20, WZR
.text:00000000000E4764 B               loc_E47C0
.text:00000000000E4768
.text:00000000000E4768 loc_E4768
.text:00000000000E4768 AND             W9, W9, #0x3FFFFFFF
.text:00000000000E476C CLREX
.text:00000000000E4770 CMP             W8, W9
.text:00000000000E4774 B.NE            loc_E4790
.text:00000000000E4778 LDRB            W8, [X19]
.text:00000000000E477C CBZ             W8, loc_E4790
.text:00000000000E4780 CMP             W8, #2
.text:00000000000E4784 B.NE            loc_E47EC
.text:00000000000E4788 MOV             W20, #0x23 ; '#'
.text:00000000000E478C B               loc_E47C0
.text:00000000000E4790
.text:00000000000E4790 loc_E4790
.text:00000000000E4790 ADRP            X1, #aContendingForP@PAGE ; "Contending for pthread mutex"
.text:00000000000E4794 ADD             X1, X1, #aContendingForP@PAGEOFF ; "Contending for pthread mutex"
.text:00000000000E4798 MOV             X0, SP  ; this
.text:00000000000E479C BL              _ZN11ScopedTraceC2EPKc ; ScopedTrace::ScopedTrace(char const*)
.text:00000000000E47A0 LDRB            W1, [X19,#1] ; bool
.text:00000000000E47A4 AND             W2, W21, #1 ; bool
.text:00000000000E47A8 MOV             X0, X22 ; volatile void *
.text:00000000000E47AC MOV             X3, X20 ; timespec *
.text:00000000000E47B0 BL              _Z18__futex_pi_lock_exPVvbbPK8timespec ; __futex_pi_lock_ex(void volatile*,bool,bool,timespec const*)
.text:00000000000E47B4 NEG             W20, W0
.text:00000000000E47B8 MOV             X0, SP  ; this
.text:00000000000E47BC BL              _ZN11ScopedTraceD2Ev ; ScopedTrace::~ScopedTrace()
.text:00000000000E47C0
.text:00000000000E47C0 loc_E47C0
.text:00000000000E47C0 LDR             X8, [X23,#0x28]
.text:00000000000E47C4 LDR             X9, [SP,#0x40+var_38]
.text:00000000000E47C8 CMP             X8, X9
.text:00000000000E47CC B.NE            loc_E4814
.text:00000000000E47D0 MOV             W0, W20
.text:00000000000E47D4 LDR             X23, [SP,#0x40+var_30]
.text:00000000000E47D8 LDP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E47DC LDP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E47E0 LDP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E47E4 ADD             SP, SP, #0x50 ; 'P'
.text:00000000000E47E8 RET
.text:00000000000E47EC
.text:00000000000E47EC loc_E47EC
.text:00000000000E47EC LDRH            W8, [X19,#2]
.text:00000000000E47F0 MOV             W9, #0xFFFF
.text:00000000000E47F4 CMP             W8, W9
.text:00000000000E47F8 B.EQ            loc_E480C
.text:00000000000E47FC ADD             W8, W8, #1
.text:00000000000E4800 MOV             W20, WZR
.text:00000000000E4804 STRH            W8, [X19,#2]
.text:00000000000E4808 B               loc_E47C0
.text:00000000000E480C
.text:00000000000E480C loc_E480C
.text:00000000000E480C MOV             W20, #0xB
.text:00000000000E4810 B               loc_E47C0
.text:00000000000E4814
.text:00000000000E4814 loc_E4814
.text:00000000000E4814 BL              .__stack_chk_fail
.text:00000000000E4814 ; } // starts at E4710
.text:00000000000E4814 ; End of function PIMutexTimedLock(PIMutex &,bool,timespec const*)
.text:00000000000E4814
.text:00000000000E4818
.text:00000000000E4818
.text:00000000000E4818 ; Attributes: bp-based frame
.text:00000000000E4818
.text:00000000000E4818 ; __int64 __fastcall HandleUsingDestroyedMutex(pthread_mutex_t *, const char *)
.text:00000000000E4818 _ZL25HandleUsingDestroyedMutexP15pthread_mutex_tPKc
.text:00000000000E4818
.text:00000000000E4818 var_10= -0x10
.text:00000000000E4818 var_s0=  0
.text:00000000000E4818
.text:00000000000E4818 ; __unwind {
.text:00000000000E4818 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000E481C STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E4820 ADD             X29, SP, #0x10
.text:00000000000E4824 MOV             X20, X1
.text:00000000000E4828 MOV             X19, X0
.text:00000000000E482C BL              .android_get_application_target_sdk_version
.text:00000000000E4830 CMP             W0, #0x1C
.text:00000000000E4834 B.GE            loc_E4844
.text:00000000000E4838 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E483C LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:00000000000E4840 RET
.text:00000000000E4844
.text:00000000000E4844 loc_E4844
.text:00000000000E4844 MOV             X1, X20
.text:00000000000E4848 MOV             X2, X19
.text:00000000000E484C BL              _ZL15__fortify_fatalPKcz_3 ; __fortify_fatal(char const*,...)
.text:00000000000E484C ; } // starts at E4818
.text:00000000000E484C ; End of function HandleUsingDestroyedMutex(pthread_mutex_t *,char const*)
.text:00000000000E484C
.text:00000000000E4850
.text:00000000000E4850
.text:00000000000E4850 ; Attributes: bp-based frame
.text:00000000000E4850
.text:00000000000E4850 ; NonPI::MutexLockWithTimeout(pthread_mutex_internal_t *, bool, timespec const*)
.text:00000000000E4850 _ZN5NonPIL20MutexLockWithTimeoutEP24pthread_mutex_internal_tbPK8timespec
.text:00000000000E4850
.text:00000000000E4850 var_68= -0x68
.text:00000000000E4850 var_60= -0x60
.text:00000000000E4850 var_58= -0x58
.text:00000000000E4850 var_50= -0x50
.text:00000000000E4850 var_40= -0x40
.text:00000000000E4850 var_30= -0x30
.text:00000000000E4850 var_20= -0x20
.text:00000000000E4850 var_10= -0x10
.text:00000000000E4850 var_s0=  0
.text:00000000000E4850
.text:00000000000E4850 ; __unwind {
.text:00000000000E4850 SUB             SP, SP, #0x80
.text:00000000000E4854 STP             X28, X27, [SP,#0x70+var_50]
.text:00000000000E4858 STP             X26, X25, [SP,#0x70+var_40]
.text:00000000000E485C STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000E4860 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000E4864 STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000E4868 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000E486C ADD             X29, SP, #0x70
.text:00000000000E4870 MRS             X24, #3, c13, c0, #2
.text:00000000000E4874 MOV             X20, X2
.text:00000000000E4878 LDR             X8, [X24,#0x28]
.text:00000000000E487C MOV             W21, W1
.text:00000000000E4880 MOV             X19, X0
.text:00000000000E4884 STR             X8, [SP,#0x70+var_58]
.text:00000000000E4888 LDRH            W8, [X0]
.text:00000000000E488C AND             X25, X8, #0x2000
.text:00000000000E4890 TST             W8, #0xC000
.text:00000000000E4894 B.NE            loc_E49A0
.text:00000000000E4898 ORR             X8, X25, #1
.text:00000000000E489C
.text:00000000000E489C loc_E489C
.text:00000000000E489C LDAXRH          W9, [X19]
.text:00000000000E48A0 CMP             W9, W25
.text:00000000000E48A4 B.NE            loc_E48C8
.text:00000000000E48A8 STXRH           W9, W8, [X19]
.text:00000000000E48AC CBNZ            W9, loc_E489C
.text:00000000000E48B0 MRS             X8, #3, c13, c0, #2
.text:00000000000E48B4 MOV             W22, WZR
.text:00000000000E48B8 LDR             X8, [X8,#8]
.text:00000000000E48BC LDR             W8, [X8,#0x10]
.text:00000000000E48C0 STR             W8, [X19,#4]
.text:00000000000E48C4 B               loc_E4964
.text:00000000000E48C8
.text:00000000000E48C8 loc_E48C8
.text:00000000000E48C8 CLREX
.text:00000000000E48CC CBZ             X20, loc_E48F4
.text:00000000000E48D0 LDR             X8, [X20,#8]
.text:00000000000E48D4 MOV             W9, #0x3B9AC9FF
.text:00000000000E48DC CMP             X8, X9
.text:00000000000E48E0 B.LS            loc_E48EC
.text:00000000000E48E4 MOV             W22, #0x16
.text:00000000000E48E8 B               loc_E4964
.text:00000000000E48EC
.text:00000000000E48EC loc_E48EC
.text:00000000000E48EC LDR             X8, [X20]
.text:00000000000E48F0 TBNZ            X8, #0x3F, loc_E4998 ; '?'
.text:00000000000E48F4
.text:00000000000E48F4 loc_E48F4
.text:00000000000E48F4 ADRP            X1, #aContendingForP@PAGE ; "Contending for pthread mutex"
.text:00000000000E48F8 ADD             X1, X1, #aContendingForP@PAGEOFF ; "Contending for pthread mutex"
.text:00000000000E48FC ADD             X0, SP, #0x70+var_60 ; this
.text:00000000000E4900 BL              _ZN11ScopedTraceC2EPKc ; ScopedTrace::ScopedTrace(char const*)
.text:00000000000E4904 ORR             W23, W25, #2
.text:00000000000E4908 MOV             W22, #0x6E ; 'n'
.text:00000000000E490C
.text:00000000000E490C loc_E490C
.text:00000000000E490C LDAXRH          W8, [X19]
.text:00000000000E4910 STXRH           W9, W23, [X19]
.text:00000000000E4914 CBNZ            W9, loc_E490C
.text:00000000000E4918 CMP             W8, W25
.text:00000000000E491C B.EQ            loc_E4948
.text:00000000000E4920 CMP             W25, #0
.text:00000000000E4924 CSET            W1, NE  ; bool
.text:00000000000E4928 AND             W3, W21, #1 ; bool
.text:00000000000E492C MOV             X0, X19 ; volatile void *
.text:00000000000E4930 MOV             W2, W23 ; int
.text:00000000000E4934 MOV             X4, X20 ; timespec *
.text:00000000000E4938 BL              _Z15__futex_wait_exPVvbibPK8timespec ; __futex_wait_ex(void volatile*,bool,int,bool,timespec const*)
.text:00000000000E493C CMN             W0, #0x6E ; 'n'
.text:00000000000E4940 B.NE            loc_E490C
.text:00000000000E4944 B               loc_E495C
.text:00000000000E4948
.text:00000000000E4948 loc_E4948
.text:00000000000E4948 MRS             X8, #3, c13, c0, #2
.text:00000000000E494C MOV             W22, WZR
.text:00000000000E4950 LDR             X8, [X8,#8]
.text:00000000000E4954 LDR             W8, [X8,#0x10]
.text:00000000000E4958 STR             W8, [X19,#4]
.text:00000000000E495C
.text:00000000000E495C loc_E495C               ; this
.text:00000000000E495C ADD             X0, SP, #0x70+var_60
.text:00000000000E4960
.text:00000000000E4960 loc_E4960
.text:00000000000E4960 BL              _ZN11ScopedTraceD2Ev ; ScopedTrace::~ScopedTrace()
.text:00000000000E4964
.text:00000000000E4964 loc_E4964
.text:00000000000E4964 LDR             X8, [X24,#0x28]
.text:00000000000E4968 LDR             X9, [SP,#0x70+var_58]
.text:00000000000E496C CMP             X8, X9
.text:00000000000E4970 B.NE            loc_E4B1C
.text:00000000000E4974 MOV             W0, W22
.text:00000000000E4978 LDP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000E497C LDP             X20, X19, [SP,#0x70+var_10]
.text:00000000000E4980 LDP             X22, X21, [SP,#0x70+var_20]
.text:00000000000E4984 LDP             X24, X23, [SP,#0x70+var_30]
.text:00000000000E4988 LDP             X26, X25, [SP,#0x70+var_40]
.text:00000000000E498C LDP             X28, X27, [SP,#0x70+var_50]
.text:00000000000E4990 ADD             SP, SP, #0x80
.text:00000000000E4994 RET
.text:00000000000E4998
.text:00000000000E4998 loc_E4998
.text:00000000000E4998 MOV             W22, #0x6E ; 'n'
.text:00000000000E499C B               loc_E4964
.text:00000000000E49A0
.text:00000000000E49A0 loc_E49A0
.text:00000000000E49A0 MRS             X9, #3, c13, c0, #2
.text:00000000000E49A4 LDR             X9, [X9,#8]
.text:00000000000E49A8 LDR             W23, [X9,#0x10]
.text:00000000000E49AC LDR             W9, [X19,#4]
.text:00000000000E49B0 CMP             W23, W9
.text:00000000000E49B4 B.NE            loc_E49D0
.text:00000000000E49B8 AND             W9, W8, #0xFFFFC000
.text:00000000000E49BC AND             W9, W9, #0xFFFF
.text:00000000000E49C0 CMP             W9, #8,LSL#12
.text:00000000000E49C4 B.NE            loc_E4A08
.text:00000000000E49C8 MOV             W22, #0x23 ; '#'
.text:00000000000E49CC B               loc_E4964
.text:00000000000E49D0
.text:00000000000E49D0 loc_E49D0
.text:00000000000E49D0 AND             X9, X8, #0xFFFF
.text:00000000000E49D4 AND             X26, X9, #0xE000
.text:00000000000E49D8 MOV             W28, W8
.text:00000000000E49DC CMP             W26, W8,UXTH
.text:00000000000E49E0 B.NE            loc_E4A20
.text:00000000000E49E4 ORR             X9, X9, #1
.text:00000000000E49E8
.text:00000000000E49E8 loc_E49E8
.text:00000000000E49E8 LDAXRH          W28, [X19]
.text:00000000000E49EC CMP             W28, W8,UXTH
.text:00000000000E49F0 B.NE            loc_E4A1C
.text:00000000000E49F4 STXRH           W10, W9, [X19]
.text:00000000000E49F8 CBNZ            W10, loc_E49E8
.text:00000000000E49FC MOV             W22, WZR
.text:00000000000E4A00 STR             W23, [X19,#4]
.text:00000000000E4A04 B               loc_E4964
.text:00000000000E4A08
.text:00000000000E4A08 loc_E4A08
.text:00000000000E4A08 MVN             W8, W8
.text:00000000000E4A0C TST             W8, #0x1FFC
.text:00000000000E4A10 B.NE            loc_E4AF4
.text:00000000000E4A14 MOV             W22, #0xB
.text:00000000000E4A18 B               loc_E4964
.text:00000000000E4A1C
.text:00000000000E4A1C loc_E4A1C
.text:00000000000E4A1C CLREX
.text:00000000000E4A20
.text:00000000000E4A20 loc_E4A20
.text:00000000000E4A20 ADRP            X1, #aContendingForP@PAGE ; "Contending for pthread mutex"
.text:00000000000E4A24 ADD             X1, X1, #aContendingForP@PAGEOFF ; "Contending for pthread mutex"
.text:00000000000E4A28 ADD             X0, SP, #0x70+var_68 ; this
.text:00000000000E4A2C ORR             X27, X26, #2
.text:00000000000E4A30 BL              _ZN11ScopedTraceC2EPKc ; ScopedTrace::ScopedTrace(char const*)
.text:00000000000E4A34 MOV             W22, #0x16
.text:00000000000E4A38 B               loc_E4A40
.text:00000000000E4A3C
.text:00000000000E4A3C loc_E4A3C
.text:00000000000E4A3C LDRH            W28, [X19]
.text:00000000000E4A40
.text:00000000000E4A40 loc_E4A40
.text:00000000000E4A40 CMP             W26, W28,UXTH
.text:00000000000E4A44 B.NE            loc_E4A60
.text:00000000000E4A48 LDAXRH          W28, [X19]
.text:00000000000E4A4C CMP             W28, W26
.text:00000000000E4A50 B.NE            loc_E4A8C
.text:00000000000E4A54 STXRH           W8, W27, [X19]
.text:00000000000E4A58 CBNZ            W8, loc_E4A40
.text:00000000000E4A5C B               loc_E4B0C
.text:00000000000E4A60
.text:00000000000E4A60 loc_E4A60
.text:00000000000E4A60 AND             W8, W28, #3
.text:00000000000E4A64 CMP             W8, #1
.text:00000000000E4A68 B.NE            loc_E4A94
.text:00000000000E4A6C LDXRH           W9, [X19]
.text:00000000000E4A70 CMP             W9, W28,UXTH
.text:00000000000E4A74 B.NE            loc_E4AE0
.text:00000000000E4A78 EOR             W8, W28, #3
.text:00000000000E4A7C MOV             W28, W9
.text:00000000000E4A80 STXRH           W10, W8, [X19]
.text:00000000000E4A84 CBNZ            W10, loc_E4A40
.text:00000000000E4A88 B               loc_E4A98
.text:00000000000E4A8C
.text:00000000000E4A8C loc_E4A8C
.text:00000000000E4A8C CLREX
.text:00000000000E4A90 B               loc_E4A40
.text:00000000000E4A94
.text:00000000000E4A94 loc_E4A94
.text:00000000000E4A94 MOV             W8, W28
.text:00000000000E4A98
.text:00000000000E4A98 loc_E4A98
.text:00000000000E4A98 CBZ             X20, loc_E4AB8
.text:00000000000E4A9C LDR             X9, [X20,#8]
.text:00000000000E4AA0 MOV             W10, #0x3B9AC9FF
.text:00000000000E4AA8 CMP             X9, X10
.text:00000000000E4AAC B.HI            loc_E4B14
.text:00000000000E4AB0 LDR             X9, [X20]
.text:00000000000E4AB4 TBNZ            X9, #0x3F, loc_E4AEC ; '?'
.text:00000000000E4AB8
.text:00000000000E4AB8 loc_E4AB8
.text:00000000000E4AB8 CMP             W25, #0
.text:00000000000E4ABC CSET            W1, NE  ; bool
.text:00000000000E4AC0 AND             W2, W8, #0xFFFF ; int
.text:00000000000E4AC4 AND             W3, W21, #1 ; bool
.text:00000000000E4AC8 MOV             X0, X19 ; volatile void *
.text:00000000000E4ACC MOV             X4, X20 ; timespec *
.text:00000000000E4AD0 BL              _Z15__futex_wait_exPVvbibPK8timespec ; __futex_wait_ex(void volatile*,bool,int,bool,timespec const*)
.text:00000000000E4AD4 CMN             W0, #0x6E ; 'n'
.text:00000000000E4AD8 B.NE            loc_E4A3C
.text:00000000000E4ADC B               loc_E4AEC
.text:00000000000E4AE0
.text:00000000000E4AE0 loc_E4AE0
.text:00000000000E4AE0 MOV             W28, W9
.text:00000000000E4AE4 CLREX
.text:00000000000E4AE8 B               loc_E4A40
.text:00000000000E4AEC
.text:00000000000E4AEC loc_E4AEC
.text:00000000000E4AEC MOV             W22, #0x6E ; 'n'
.text:00000000000E4AF0 B               loc_E4B14
.text:00000000000E4AF4
.text:00000000000E4AF4 loc_E4AF4
.text:00000000000E4AF4 MOV             W22, WZR
.text:00000000000E4AF8
.text:00000000000E4AF8 loc_E4AF8
.text:00000000000E4AF8 LDXRH           W8, [X19]
.text:00000000000E4AFC ADD             W8, W8, #4
.text:00000000000E4B00 STXRH           W9, W8, [X19]
.text:00000000000E4B04 CBNZ            W9, loc_E4AF8
.text:00000000000E4B08 B               loc_E4964
.text:00000000000E4B0C
.text:00000000000E4B0C loc_E4B0C
.text:00000000000E4B0C MOV             W22, WZR
.text:00000000000E4B10 STR             W23, [X19,#4]
.text:00000000000E4B14
.text:00000000000E4B14 loc_E4B14
.text:00000000000E4B14 ADD             X0, SP, #0x70+var_68
.text:00000000000E4B18 B               loc_E4960
.text:00000000000E4B1C
.text:00000000000E4B1C loc_E4B1C
.text:00000000000E4B1C BL              .__stack_chk_fail
.text:00000000000E4B1C ; } // starts at E4850
.text:00000000000E4B1C ; End of function NonPI::MutexLockWithTimeout(pthread_mutex_internal_t *,bool,timespec const*)
.text:00000000000E4B1C
.text:00000000000E4B20
.text:00000000000E4B20
.text:00000000000E4B20 ; Attributes: bp-based frame
.text:00000000000E4B20
.text:00000000000E4B20 ; __int64 __fastcall pthread_mutex_unlock(pthread_mutex_t *)
.text:00000000000E4B20 EXPORT pthread_mutex_unlock
.text:00000000000E4B20 pthread_mutex_unlock
.text:00000000000E4B20
.text:00000000000E4B20 var_28= -0x28
.text:00000000000E4B20 var_20= -0x20
.text:00000000000E4B20 var_10= -0x10
.text:00000000000E4B20 var_s0=  0
.text:00000000000E4B20
.text:00000000000E4B20 ; __unwind {
.text:00000000000E4B20 SUB             SP, SP, #0x40
.text:00000000000E4B24 STP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E4B28 STP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E4B2C STP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E4B30 ADD             X29, SP, #0x30
.text:00000000000E4B34 LDRH            W9, [X0]
.text:00000000000E4B38 MOV             X19, X0
.text:00000000000E4B3C AND             X8, X9, #0x2000
.text:00000000000E4B40 UBFX            W10, W9, #0xE, #2
.text:00000000000E4B44 CBNZ            W10, loc_E4BB8
.text:00000000000E4B48 ORR             W9, W8, #2
.text:00000000000E4B4C STR             WZR, [X19,#4]
.text:00000000000E4B50
.text:00000000000E4B50 loc_E4B50
.text:00000000000E4B50 LDXRH           W10, [X19]
.text:00000000000E4B54 STLXRH          W11, W8, [X19]
.text:00000000000E4B58 CBNZ            W11, loc_E4B50
.text:00000000000E4B5C CMP             W10, W9
.text:00000000000E4B60 B.NE            loc_E4C9C
.text:00000000000E4B64
.text:00000000000E4B64 loc_E4B64
.text:00000000000E4B64 CMP             W8, #0
.text:00000000000E4B68 MOV             W8, #0x81
.text:00000000000E4B6C CSINC           W21, W8, WZR, EQ
.text:00000000000E4B70 BL              .__errno
.text:00000000000E4B74 MOV             X20, X0
.text:00000000000E4B78 LDR             W22, [X0]
.text:00000000000E4B7C MOV             W0, #0x62 ; 'b'
.text:00000000000E4B80 MOV             X1, X19
.text:00000000000E4B84 MOV             W2, W21
.text:00000000000E4B88 MOV             W3, #1
.text:00000000000E4B8C MOV             X4, XZR
.text:00000000000E4B90 MOV             X5, XZR
.text:00000000000E4B94 MOV             W6, WZR
.text:00000000000E4B98 BL              .syscall
.text:00000000000E4B9C MOV             X8, X0
.text:00000000000E4BA0 MOV             W0, WZR
.text:00000000000E4BA4 CMN             W8, #1
.text:00000000000E4BA8 B.NE            loc_E4CA0
.text:00000000000E4BAC MOV             W0, WZR
.text:00000000000E4BB0 STR             W22, [X20]
.text:00000000000E4BB4 B               loc_E4CA0
.text:00000000000E4BB8
.text:00000000000E4BB8 loc_E4BB8
.text:00000000000E4BB8 AND             X9, X9, #0xFFFF
.text:00000000000E4BBC CMP             W9, #0xC,LSL#12
.text:00000000000E4BC0 B.NE            loc_E4BF8
.text:00000000000E4BC4 MRS             X8, #3, c13, c0, #2
.text:00000000000E4BC8 LDRB            W10, [X19,#4]
.text:00000000000E4BCC LDR             X8, [X8,#8]
.text:00000000000E4BD0 ADD             X9, X19, #8
.text:00000000000E4BD4 LDR             W8, [X8,#0x10]
.text:00000000000E4BD8 CBNZ            W10, loc_E4D30
.text:00000000000E4BDC
.text:00000000000E4BDC loc_E4BDC
.text:00000000000E4BDC LDXR            W10, [X9]
.text:00000000000E4BE0 CMP             W10, W8
.text:00000000000E4BE4 B.NE            loc_E4C3C
.text:00000000000E4BE8 STLXR           W10, WZR, [X9]
.text:00000000000E4BEC MOV             W0, WZR
.text:00000000000E4BF0 CBNZ            W10, loc_E4BDC
.text:00000000000E4BF4 B               loc_E4CA0
.text:00000000000E4BF8
.text:00000000000E4BF8 loc_E4BF8
.text:00000000000E4BF8 MOV             W10, #0xFFFF
.text:00000000000E4BFC CMP             W9, W10
.text:00000000000E4C00 B.EQ            loc_E4D38
.text:00000000000E4C04 MRS             X10, #3, c13, c0, #2
.text:00000000000E4C08 LDR             X10, [X10,#8]
.text:00000000000E4C0C LDR             W10, [X10,#0x10]
.text:00000000000E4C10 LDR             W11, [X19,#4]
.text:00000000000E4C14 CMP             W10, W11
.text:00000000000E4C18 B.NE            loc_E4C74
.text:00000000000E4C1C TST             W9, #0x1FFC
.text:00000000000E4C20 B.EQ            loc_E4C7C
.text:00000000000E4C24 MOV             W0, WZR
.text:00000000000E4C28
.text:00000000000E4C28 loc_E4C28
.text:00000000000E4C28 LDXRH           W8, [X19]
.text:00000000000E4C2C SUB             W8, W8, #4
.text:00000000000E4C30 STXRH           W9, W8, [X19]
.text:00000000000E4C34 CBNZ            W9, loc_E4C28
.text:00000000000E4C38 B               loc_E4CA0
.text:00000000000E4C3C
.text:00000000000E4C3C loc_E4C3C
.text:00000000000E4C3C CLREX
.text:00000000000E4C40
.text:00000000000E4C40 loc_E4C40
.text:00000000000E4C40 AND             W11, W10, #0x3FFFFFFF
.text:00000000000E4C44 CMP             W8, W11
.text:00000000000E4C48 B.NE            loc_E4C74
.text:00000000000E4C4C STR             X9, [SP,#0x30+var_28]
.text:00000000000E4C50 LDRB            W9, [X19,#4]
.text:00000000000E4C54 CMP             W9, #1
.text:00000000000E4C58 B.NE            loc_E4CB4
.text:00000000000E4C5C LDRH            W9, [X19,#6]
.text:00000000000E4C60 CBZ             W9, loc_E4CB4
.text:00000000000E4C64 SUB             W8, W9, #1
.text:00000000000E4C68 MOV             W0, WZR
.text:00000000000E4C6C STRH            W8, [X19,#6]
.text:00000000000E4C70 B               loc_E4CA0
.text:00000000000E4C74
.text:00000000000E4C74 loc_E4C74
.text:00000000000E4C74 MOV             W0, #1
.text:00000000000E4C78 B               loc_E4CA0
.text:00000000000E4C7C
.text:00000000000E4C7C loc_E4C7C
.text:00000000000E4C7C AND             X9, X9, #0xE000
.text:00000000000E4C80 STR             WZR, [X19,#4]
.text:00000000000E4C84
.text:00000000000E4C84 loc_E4C84
.text:00000000000E4C84 LDXRH           W10, [X19]
.text:00000000000E4C88 STLXRH          W11, W9, [X19]
.text:00000000000E4C8C CBNZ            W11, loc_E4C84
.text:00000000000E4C90 AND             W9, W10, #3
.text:00000000000E4C94 CMP             W9, #2
.text:00000000000E4C98 B.EQ            loc_E4B64
.text:00000000000E4C9C
.text:00000000000E4C9C loc_E4C9C
.text:00000000000E4C9C MOV             W0, WZR
.text:00000000000E4CA0
.text:00000000000E4CA0 loc_E4CA0
.text:00000000000E4CA0 LDP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E4CA4 LDP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E4CA8 LDP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E4CAC ADD             SP, SP, #0x40 ; '@'
.text:00000000000E4CB0 RET
.text:00000000000E4CB4
.text:00000000000E4CB4 loc_E4CB4
.text:00000000000E4CB4 CMP             W10, W8
.text:00000000000E4CB8 B.NE            loc_E4CE0
.text:00000000000E4CBC LDR             X9, [SP,#0x30+var_28]
.text:00000000000E4CC0
.text:00000000000E4CC0 loc_E4CC0
.text:00000000000E4CC0 LDXR            W10, [X9]
.text:00000000000E4CC4 CMP             W10, W8
.text:00000000000E4CC8 B.NE            loc_E4CDC
.text:00000000000E4CCC STLXR           W10, WZR, [X9]
.text:00000000000E4CD0 MOV             W0, WZR
.text:00000000000E4CD4 CBNZ            W10, loc_E4CC0
.text:00000000000E4CD8 B               loc_E4CA0
.text:00000000000E4CDC
.text:00000000000E4CDC loc_E4CDC
.text:00000000000E4CDC CLREX
.text:00000000000E4CE0
.text:00000000000E4CE0 loc_E4CE0
.text:00000000000E4CE0 LDRB            W8, [X19,#5]
.text:00000000000E4CE4 MOV             W9, #7
.text:00000000000E4CE8 CMP             W8, #0
.text:00000000000E4CEC MOV             W8, #0x87
.text:00000000000E4CF0 CSEL            W20, W8, W9, EQ
.text:00000000000E4CF4 BL              .__errno
.text:00000000000E4CF8 LDR             X1, [SP,#0x30+var_28]
.text:00000000000E4CFC MOV             X19, X0
.text:00000000000E4D00 LDR             W21, [X0]
.text:00000000000E4D04 MOV             W0, #0x62 ; 'b'
.text:00000000000E4D08 MOV             W2, W20
.text:00000000000E4D0C MOV             W3, WZR
.text:00000000000E4D10 MOV             X4, XZR
.text:00000000000E4D14 MOV             X5, XZR
.text:00000000000E4D18 MOV             W6, WZR
.text:00000000000E4D1C BL              .syscall
.text:00000000000E4D20 CMN             W0, #1
.text:00000000000E4D24 B.EQ            loc_E4D50
.text:00000000000E4D28
.text:00000000000E4D28 loc_E4D28
.text:00000000000E4D28 NEG             W0, W0
.text:00000000000E4D2C B               loc_E4CA0
.text:00000000000E4D30
.text:00000000000E4D30 loc_E4D30
.text:00000000000E4D30 LDR             W10, [X9]
.text:00000000000E4D34 B               loc_E4C40
.text:00000000000E4D38
.text:00000000000E4D38 loc_E4D38
.text:00000000000E4D38 ADRP            X1, #aPthreadMutexUn_0@PAGE ; "pthread_mutex_unlock"
.text:00000000000E4D3C ADD             X1, X1, #aPthreadMutexUn_0@PAGEOFF ; "pthread_mutex_unlock"
.text:00000000000E4D40 MOV             X0, X19 ; pthread_mutex_t *
.text:00000000000E4D44 BL              _ZL25HandleUsingDestroyedMutexP15pthread_mutex_tPKc ; HandleUsingDestroyedMutex(pthread_mutex_t *,char const*)
.text:00000000000E4D48 MOV             W0, #0x10
.text:00000000000E4D4C B               loc_E4CA0
.text:00000000000E4D50
.text:00000000000E4D50 loc_E4D50
.text:00000000000E4D50 LDR             W8, [X19]
.text:00000000000E4D54 STR             W21, [X19]
.text:00000000000E4D58 NEG             W0, W8
.text:00000000000E4D5C B               loc_E4D28
.text:00000000000E4D5C ; } // starts at E4B20
.text:00000000000E4D5C ; End of function pthread_mutex_unlock
.text:00000000000E4D5C
.text:00000000000E4D60
.text:00000000000E4D60
.text:00000000000E4D60
.text:00000000000E4D60 EXPORT pthread_mutex_trylock
.text:00000000000E4D60 pthread_mutex_trylock
.text:00000000000E4D60
.text:00000000000E4D60 var_10= -0x10
.text:00000000000E4D60
.text:00000000000E4D60 ; __unwind {
.text:00000000000E4D60 LDRH            W10, [X0]
.text:00000000000E4D64 AND             X8, X10, #0xFFFF
.text:00000000000E4D68 TST             W10, #0xC000
.text:00000000000E4D6C B.NE            loc_E4DA8
.text:00000000000E4D70 AND             X8, X8, #0x2000
.text:00000000000E4D74 ORR             X9, X8, #1
.text:00000000000E4D78
.text:00000000000E4D78 loc_E4D78
.text:00000000000E4D78 LDAXRH          W10, [X0]
.text:00000000000E4D7C CMP             W10, W8
.text:00000000000E4D80 B.NE            loc_E4E60
.text:00000000000E4D84 STXRH           W10, W9, [X0]
.text:00000000000E4D88 CBNZ            W10, loc_E4D78
.text:00000000000E4D8C MRS             X8, #3, c13, c0, #2
.text:00000000000E4D90 LDR             X8, [X8,#8]
.text:00000000000E4D94 LDR             W9, [X8,#0x10]
.text:00000000000E4D98
.text:00000000000E4D98 loc_E4D98
.text:00000000000E4D98 MOV             W8, WZR
.text:00000000000E4D9C STR             W9, [X0,#4]
.text:00000000000E4DA0
.text:00000000000E4DA0 loc_E4DA0
.text:00000000000E4DA0 MOV             W0, W8
.text:00000000000E4DA4 RET
.text:00000000000E4DA8
.text:00000000000E4DA8 loc_E4DA8
.text:00000000000E4DA8 CMP             W8, #0xC,LSL#12
.text:00000000000E4DAC B.NE            loc_E4DD4
.text:00000000000E4DB0 MRS             X8, #3, c13, c0, #2
.text:00000000000E4DB4 ADD             X10, X0, #8
.text:00000000000E4DB8 LDR             X8, [X8,#8]
.text:00000000000E4DBC LDR             W9, [X8,#0x10]
.text:00000000000E4DC0
.text:00000000000E4DC0 loc_E4DC0
.text:00000000000E4DC0 LDAXR           W8, [X10]
.text:00000000000E4DC4 CBNZ            W8, loc_E4E14
.text:00000000000E4DC8 STXR            W11, W9, [X10]
.text:00000000000E4DCC CBNZ            W11, loc_E4DC0
.text:00000000000E4DD0 B               loc_E4DA0
.text:00000000000E4DD4
.text:00000000000E4DD4 loc_E4DD4
.text:00000000000E4DD4 MOV             W9, #0xFFFF
.text:00000000000E4DD8 CMP             W8, W9
.text:00000000000E4DDC B.EQ            loc_E4EE4
.text:00000000000E4DE0 MRS             X9, #3, c13, c0, #2
.text:00000000000E4DE4 LDR             X9, [X9,#8]
.text:00000000000E4DE8 LDR             W9, [X9,#0x10]
.text:00000000000E4DEC LDR             W11, [X0,#4]
.text:00000000000E4DF0 CMP             W9, W11
.text:00000000000E4DF4 B.NE            loc_E4E40
.text:00000000000E4DF8 AND             W9, W10, #0xFFFFC000
.text:00000000000E4DFC AND             W9, W9, #0xFFFF
.text:00000000000E4E00 CMP             W9, #8,LSL#12
.text:00000000000E4E04 B.NE            loc_E4E7C
.text:00000000000E4E08 MOV             W8, #0x10
.text:00000000000E4E0C MOV             W0, W8
.text:00000000000E4E10 RET
.text:00000000000E4E14
.text:00000000000E4E14 loc_E4E14
.text:00000000000E4E14 AND             W8, W8, #0x3FFFFFFF
.text:00000000000E4E18 CLREX
.text:00000000000E4E1C CMP             W9, W8
.text:00000000000E4E20 B.NE            loc_E4E70
.text:00000000000E4E24 LDRB            W8, [X0,#4]
.text:00000000000E4E28 CBZ             W8, loc_E4EAC
.text:00000000000E4E2C CMP             W8, #2
.text:00000000000E4E30 B.NE            loc_E4EB8
.text:00000000000E4E34 MOV             W8, #0x23 ; '#'
.text:00000000000E4E38 MOV             W0, W8
.text:00000000000E4E3C RET
.text:00000000000E4E40
.text:00000000000E4E40 loc_E4E40
.text:00000000000E4E40 AND             X8, X8, #0xE000
.text:00000000000E4E44 ORR             X10, X8, #1
.text:00000000000E4E48
.text:00000000000E4E48 loc_E4E48
.text:00000000000E4E48 LDAXRH          W11, [X0]
.text:00000000000E4E4C CMP             W11, W8
.text:00000000000E4E50 B.NE            loc_E4E60
.text:00000000000E4E54 STXRH           W11, W10, [X0]
.text:00000000000E4E58 CBNZ            W11, loc_E4E48
.text:00000000000E4E5C B               loc_E4D98
.text:00000000000E4E60
.text:00000000000E4E60 loc_E4E60
.text:00000000000E4E60 MOV             W8, #0x10
.text:00000000000E4E64 CLREX
.text:00000000000E4E68 MOV             W0, W8
.text:00000000000E4E6C RET
.text:00000000000E4E70
.text:00000000000E4E70 loc_E4E70
.text:00000000000E4E70 MOV             W8, #0x10
.text:00000000000E4E74 MOV             W0, W8
.text:00000000000E4E78 RET
.text:00000000000E4E7C
.text:00000000000E4E7C loc_E4E7C
.text:00000000000E4E7C MVN             W8, W8
.text:00000000000E4E80 TST             W8, #0x1FFC
.text:00000000000E4E84 B.NE            loc_E4E94
.text:00000000000E4E88 MOV             W8, #0xB
.text:00000000000E4E8C MOV             W0, W8
.text:00000000000E4E90 RET
.text:00000000000E4E94
.text:00000000000E4E94 loc_E4E94
.text:00000000000E4E94 LDXRH           W8, [X0]
.text:00000000000E4E98 ADD             W8, W8, #4
.text:00000000000E4E9C STXRH           W9, W8, [X0]
.text:00000000000E4EA0 MOV             W8, WZR
.text:00000000000E4EA4 CBNZ            W9, loc_E4E94
.text:00000000000E4EA8 B               loc_E4DA0
.text:00000000000E4EAC
.text:00000000000E4EAC loc_E4EAC
.text:00000000000E4EAC MOV             W8, #0x10
.text:00000000000E4EB0 MOV             W0, W8
.text:00000000000E4EB4 RET
.text:00000000000E4EB8
.text:00000000000E4EB8 loc_E4EB8
.text:00000000000E4EB8 LDRH            W8, [X0,#6]
.text:00000000000E4EBC MOV             W9, #0xFFFF
.text:00000000000E4EC0 CMP             W8, W9
.text:00000000000E4EC4 B.EQ            loc_E4ED8
.text:00000000000E4EC8 ADD             W9, W8, #1
.text:00000000000E4ECC STRH            W9, [X0,#6]
.text:00000000000E4ED0 MOV             W0, WZR
.text:00000000000E4ED4 RET
.text:00000000000E4ED8
.text:00000000000E4ED8 loc_E4ED8
.text:00000000000E4ED8 MOV             W8, #(byte_9+2)
.text:00000000000E4EDC MOV             W0, W8  ; pthread_mutex_t *
.text:00000000000E4EE0 RET
.text:00000000000E4EE4
.text:00000000000E4EE4 loc_E4EE4
.text:00000000000E4EE4 STP             X29, X30, [SP,#var_10]!
.text:00000000000E4EE8 MOV             X29, SP
.text:00000000000E4EEC ADRP            X1, #aPthreadMutexTr_0@PAGE ; "pthread_mutex_trylock"
.text:00000000000E4EF0 ADD             X1, X1, #aPthreadMutexTr_0@PAGEOFF ; "pthread_mutex_trylock"
.text:00000000000E4EF4 BL              _ZL25HandleUsingDestroyedMutexP15pthread_mutex_tPKc ; HandleUsingDestroyedMutex(pthread_mutex_t *,char const*)
.text:00000000000E4EF8 MOV             W8, #0x10
.text:00000000000E4EFC LDP             X29, X30, [SP+0x10+var_10],#0x10
.text:00000000000E4F00 MOV             W0, W8
.text:00000000000E4F04 RET
.text:00000000000E4F04 ; } // starts at E4D60
.text:00000000000E4F04 ; End of function pthread_mutex_trylock
.text:00000000000E4F04
.text:00000000000E4F08
.text:00000000000E4F08
.text:00000000000E4F08
.text:00000000000E4F08 EXPORT pthread_mutex_timedlock
.text:00000000000E4F08 pthread_mutex_timedlock
.text:00000000000E4F08
.text:00000000000E4F08 var_10= -0x10
.text:00000000000E4F08
.text:00000000000E4F08 ; __unwind {
.text:00000000000E4F08 LDRH            W9, [X0]
.text:00000000000E4F0C MOV             X2, X1
.text:00000000000E4F10 AND             X8, X9, #0xFFFF
.text:00000000000E4F14 UBFX            W9, W9, #0xE, #2
.text:00000000000E4F18 CBNZ            W9, loc_E4F5C
.text:00000000000E4F1C AND             X8, X8, #0x2000
.text:00000000000E4F20 ORR             X9, X8, #1
.text:00000000000E4F24
.text:00000000000E4F24 loc_E4F24
.text:00000000000E4F24 LDAXRH          W10, [X0]
.text:00000000000E4F28 CMP             W10, W8
.text:00000000000E4F2C B.NE            loc_E4F50
.text:00000000000E4F30 STXRH           W10, W9, [X0]
.text:00000000000E4F34 CBNZ            W10, loc_E4F24
.text:00000000000E4F38 MRS             X8, #3, c13, c0, #2
.text:00000000000E4F3C LDR             X8, [X8,#8]
.text:00000000000E4F40 LDR             W9, [X8,#0x10]
.text:00000000000E4F44 STR             W9, [X0,#4]
.text:00000000000E4F48 MOV             W0, WZR
.text:00000000000E4F4C RET
.text:00000000000E4F50
.text:00000000000E4F50 loc_E4F50
.text:00000000000E4F50 CLREX
.text:00000000000E4F54
.text:00000000000E4F54 loc_E4F54
.text:00000000000E4F54 MOV             W1, #1
.text:00000000000E4F58 B               _ZN5NonPIL20MutexLockWithTimeoutEP24pthread_mutex_internal_tbPK8timespec ; NonPI::MutexLockWithTimeout(pthread_mutex_internal_t *,bool,timespec const*)
.text:00000000000E4F5C
.text:00000000000E4F5C loc_E4F5C
.text:00000000000E4F5C CMP             W8, #0xC,LSL#12
.text:00000000000E4F60 B.NE            loc_E4F70
.text:00000000000E4F64 ADD             X0, X0, #4 ; pthread_mutex_t *
.text:00000000000E4F68 MOV             W1, #1
.text:00000000000E4F6C B               _ZL16PIMutexTimedLockR7PIMutexbPK8timespec ; PIMutexTimedLock(PIMutex &,bool,timespec const*)
.text:00000000000E4F70
.text:00000000000E4F70 loc_E4F70
.text:00000000000E4F70 MOV             W9, #0xFFFF
.text:00000000000E4F74 CMP             W8, W9
.text:00000000000E4F78 B.NE            loc_E4F54
.text:00000000000E4F7C STP             X29, X30, [SP,#var_10]!
.text:00000000000E4F80 MOV             X29, SP
.text:00000000000E4F84 ADRP            X1, #aPthreadMutexTi_1@PAGE ; "pthread_mutex_timedlock"
.text:00000000000E4F88 ADD             X1, X1, #aPthreadMutexTi_1@PAGEOFF ; "pthread_mutex_timedlock"
.text:00000000000E4F8C BL              _ZL25HandleUsingDestroyedMutexP15pthread_mutex_tPKc ; HandleUsingDestroyedMutex(pthread_mutex_t *,char const*)
.text:00000000000E4F90 MOV             W8, #0x10
.text:00000000000E4F94 LDP             X29, X30, [SP+0x10+var_10],#0x10
.text:00000000000E4F98 MOV             W0, W8
.text:00000000000E4F9C RET
.text:00000000000E4F9C ; } // starts at E4F08
.text:00000000000E4F9C ; End of function pthread_mutex_timedlock
.text:00000000000E4F9C
.text:00000000000E4FA0
.text:00000000000E4FA0
.text:00000000000E4FA0
.text:00000000000E4FA0 EXPORT pthread_mutex_timedlock_monotonic_np
.text:00000000000E4FA0 pthread_mutex_timedlock_monotonic_np
.text:00000000000E4FA0
.text:00000000000E4FA0 var_10= -0x10
.text:00000000000E4FA0
.text:00000000000E4FA0 ; __unwind {
.text:00000000000E4FA0 LDRH            W9, [X0]
.text:00000000000E4FA4 MOV             X2, X1
.text:00000000000E4FA8 AND             X8, X9, #0xFFFF
.text:00000000000E4FAC UBFX            W9, W9, #0xE, #2
.text:00000000000E4FB0 CBNZ            W9, loc_E4FF4
.text:00000000000E4FB4 AND             X8, X8, #0x2000
.text:00000000000E4FB8 ORR             X9, X8, #1
.text:00000000000E4FBC
.text:00000000000E4FBC loc_E4FBC
.text:00000000000E4FBC LDAXRH          W10, [X0]
.text:00000000000E4FC0 CMP             W10, W8
.text:00000000000E4FC4 B.NE            loc_E4FE8
.text:00000000000E4FC8 STXRH           W10, W9, [X0]
.text:00000000000E4FCC CBNZ            W10, loc_E4FBC
.text:00000000000E4FD0 MRS             X8, #3, c13, c0, #2
.text:00000000000E4FD4 LDR             X8, [X8,#8]
.text:00000000000E4FD8 LDR             W9, [X8,#0x10]
.text:00000000000E4FDC STR             W9, [X0,#4]
.text:00000000000E4FE0 MOV             W0, WZR
.text:00000000000E4FE4 RET
.text:00000000000E4FE8
.text:00000000000E4FE8 loc_E4FE8
.text:00000000000E4FE8 CLREX
.text:00000000000E4FEC
.text:00000000000E4FEC loc_E4FEC
.text:00000000000E4FEC MOV             W1, WZR
.text:00000000000E4FF0 B               _ZN5NonPIL20MutexLockWithTimeoutEP24pthread_mutex_internal_tbPK8timespec ; NonPI::MutexLockWithTimeout(pthread_mutex_internal_t *,bool,timespec const*)
.text:00000000000E4FF4
.text:00000000000E4FF4 loc_E4FF4
.text:00000000000E4FF4 CMP             W8, #0xC,LSL#12
.text:00000000000E4FF8 B.NE            loc_E5008
.text:00000000000E4FFC ADD             X0, X0, #4 ; pthread_mutex_t *
.text:00000000000E5000 MOV             W1, WZR
.text:00000000000E5004 B               _ZL16PIMutexTimedLockR7PIMutexbPK8timespec ; PIMutexTimedLock(PIMutex &,bool,timespec const*)
.text:00000000000E5008
.text:00000000000E5008 loc_E5008
.text:00000000000E5008 MOV             W9, #0xFFFF
.text:00000000000E500C CMP             W8, W9
.text:00000000000E5010 B.NE            loc_E4FEC
.text:00000000000E5014 STP             X29, X30, [SP,#var_10]!
.text:00000000000E5018 MOV             X29, SP
.text:00000000000E501C ADRP            X1, #aPthreadMutexTi_2@PAGE ; "pthread_mutex_timedlock_monotonic_np"
.text:00000000000E5020 ADD             X1, X1, #aPthreadMutexTi_2@PAGEOFF ; "pthread_mutex_timedlock_monotonic_np"
.text:00000000000E5024 BL              _ZL25HandleUsingDestroyedMutexP15pthread_mutex_tPKc ; HandleUsingDestroyedMutex(pthread_mutex_t *,char const*)
.text:00000000000E5028 MOV             W8, #0x10
.text:00000000000E502C LDP             X29, X30, [SP+0x10+var_10],#0x10
.text:00000000000E5030 MOV             W0, W8
.text:00000000000E5034 RET
.text:00000000000E5034 ; } // starts at E4FA0
.text:00000000000E5034 ; End of function pthread_mutex_timedlock_monotonic_np
.text:00000000000E5034
.text:00000000000E5038
.text:00000000000E5038
.text:00000000000E5038
.text:00000000000E5038 EXPORT pthread_mutex_destroy
.text:00000000000E5038 pthread_mutex_destroy
.text:00000000000E5038
.text:00000000000E5038 var_10= -0x10
.text:00000000000E5038
.text:00000000000E5038 ; __unwind {
.text:00000000000E5038 LDRH            W8, [X0]
.text:00000000000E503C AND             W9, W8, #0xFFFF
.text:00000000000E5040 CMP             W9, #0xC,LSL#12
.text:00000000000E5044 B.EQ            loc_E5068
.text:00000000000E5048 MOV             W10, #0xFFFF
.text:00000000000E504C CMP             W9, W10
.text:00000000000E5050 B.EQ            loc_E50BC
.text:00000000000E5054 TST             W8, #3
.text:00000000000E5058 B.EQ            loc_E508C
.text:00000000000E505C MOV             W8, #0x10
.text:00000000000E5060 MOV             W0, W8
.text:00000000000E5064 RET
.text:00000000000E5068
.text:00000000000E5068 loc_E5068
.text:00000000000E5068 ADD             X8, X0, #8
.text:00000000000E506C MOV             W9, #0xFFFFFFFF
.text:00000000000E5070
.text:00000000000E5070 loc_E5070
.text:00000000000E5070 LDXR            W10, [X8]
.text:00000000000E5074 CBNZ            W10, loc_E50AC
.text:00000000000E5078 STXR            W10, W9, [X8]
.text:00000000000E507C CBNZ            W10, loc_E5070
.text:00000000000E5080 STLRH           W9, [X0]
.text:00000000000E5084 MOV             W0, WZR
.text:00000000000E5088 RET
.text:00000000000E508C
.text:00000000000E508C loc_E508C
.text:00000000000E508C MOV             W9, #0xFFFF
.text:00000000000E5090
.text:00000000000E5090 loc_E5090
.text:00000000000E5090 LDXRH           W10, [X0]
.text:00000000000E5094 CMP             W10, W8,UXTH
.text:00000000000E5098 B.NE            loc_E50AC
.text:00000000000E509C STXRH           W10, W9, [X0]
.text:00000000000E50A0 CBNZ            W10, loc_E5090
.text:00000000000E50A4 MOV             W0, WZR
.text:00000000000E50A8 RET
.text:00000000000E50AC
.text:00000000000E50AC loc_E50AC
.text:00000000000E50AC MOV             W8, #word_10
.text:00000000000E50B0 CLREX
.text:00000000000E50B4 MOV             W0, W8  ; pthread_mutex_t *
.text:00000000000E50B8 RET
.text:00000000000E50BC
.text:00000000000E50BC loc_E50BC
.text:00000000000E50BC STP             X29, X30, [SP,#var_10]!
.text:00000000000E50C0 MOV             X29, SP
.text:00000000000E50C4 ADRP            X1, #aPthreadMutexDe_0@PAGE ; "pthread_mutex_destroy"
.text:00000000000E50C8 ADD             X1, X1, #aPthreadMutexDe_0@PAGEOFF ; "pthread_mutex_destroy"
.text:00000000000E50CC BL              _ZL25HandleUsingDestroyedMutexP15pthread_mutex_tPKc ; HandleUsingDestroyedMutex(pthread_mutex_t *,char const*)
.text:00000000000E50D0 MOV             W8, #0x10
.text:00000000000E50D4 LDP             X29, X30, [SP+0x10+var_10],#0x10
.text:00000000000E50D8 MOV             W0, W8
.text:00000000000E50DC RET
.text:00000000000E50DC ; } // starts at E5038
.text:00000000000E50DC ; End of function pthread_mutex_destroy
.text:00000000000E50DC
.text:00000000000E50E0
.text:00000000000E50E0
.text:00000000000E50E0 ; Attributes: noreturn bp-based frame
.text:00000000000E50E0
.text:00000000000E50E0 ; void __noreturn __fortify_fatal(const char *, ...)
.text:00000000000E50E0 _ZL15__fortify_fatalPKcz_3
.text:00000000000E50E0
.text:00000000000E50E0 var_110= -0x110
.text:00000000000E50E0 var_F0= -0xF0
.text:00000000000E50E0 var_D0= -0xD0
.text:00000000000E50E0 var_B0= -0xB0
.text:00000000000E50E0 var_88= -0x88
.text:00000000000E50E0 var_80= -0x80
.text:00000000000E50E0 var_70= -0x70
.text:00000000000E50E0 var_60= -0x60
.text:00000000000E50E0 var_50= -0x50
.text:00000000000E50E0 var_30= -0x30
.text:00000000000E50E0 var_20= -0x20
.text:00000000000E50E0 var_10= -0x10
.text:00000000000E50E0 var_s0=  0
.text:00000000000E50E0
.text:00000000000E50E0 ; __unwind {
.text:00000000000E50E0 SUB             SP, SP, #0x120
.text:00000000000E50E4 STR             X28, [SP,#0x110+var_10]
.text:00000000000E50E8 STP             X29, X30, [SP,#0x110+var_s0]
.text:00000000000E50EC ADD             X29, SP, #0x110
.text:00000000000E50F0 MOV             X8, #0xFFFFFFFFFFFFFFC8
.text:00000000000E50F4 STP             Q0, Q1, [SP,#0x110+var_110]
.text:00000000000E50F8 MOV             X9, SP
.text:00000000000E50FC STR             X1, [SP,#0x110+var_88]
.text:00000000000E5100 ADD             X10, SP, #0x110+var_88
.text:00000000000E5104 STP             X2, X3, [SP,#0x110+var_80]
.text:00000000000E5108 MOVK            X8, #0xFF80,LSL#32
.text:00000000000E510C STP             Q6, Q7, [SP,#0x110+var_B0]
.text:00000000000E5110 ADD             X9, X9, #0x80
.text:00000000000E5114 STP             Q4, Q5, [SP,#0x110+var_D0]
.text:00000000000E5118 ADD             X10, X10, #0x38 ; '8'
.text:00000000000E511C STP             Q2, Q3, [SP,#0x110+var_F0]
.text:00000000000E5120 ADD             X11, X29, #0x10
.text:00000000000E5124 STP             X6, X7, [SP,#0x110+var_60]
.text:00000000000E5128 STP             X9, X8, [X29,#var_20]
.text:00000000000E512C ADRP            X0, #aFortify@PAGE ; "FORTIFY"
.text:00000000000E5130 ADRP            X1, #aSCalledOnADest@PAGE ; "%s called on a destroyed mutex (%p)"
.text:00000000000E5134 STP             X4, X5, [SP,#0x110+var_70]
.text:00000000000E5138 STP             X11, X10, [X29,#var_30]
.text:00000000000E513C ADD             X0, X0, #aFortify@PAGEOFF ; "FORTIFY"
.text:00000000000E5140 LDP             Q1, Q0, [X29,#var_30]
.text:00000000000E5144 ADD             X1, X1, #aSCalledOnADest@PAGEOFF ; "%s called on a destroyed mutex (%p)"
.text:00000000000E5148 SUB             X2, X29, #-var_50
.text:00000000000E514C STP             Q1, Q0, [X29,#var_50]
.text:00000000000E5150 BL              async_safe_fatal_va_list
.text:00000000000E5154 BL              .abort
.text:00000000000E5154 ; } // starts at E50E0
.text:00000000000E5154 ; End of function __fortify_fatal(char const*,...)
.text:00000000000E5154
.text:00000000000E5158
.text:00000000000E5158
.text:00000000000E5158 ; Attributes: bp-based frame
.text:00000000000E5158
.text:00000000000E5158 EXPORT pthread_once
.text:00000000000E5158 pthread_once
.text:00000000000E5158
.text:00000000000E5158 var_20= -0x20
.text:00000000000E5158 var_10= -0x10
.text:00000000000E5158 var_s0=  0
.text:00000000000E5158
.text:00000000000E5158 ; __unwind {
.text:00000000000E5158 STR             X21, [SP,#-0x10+var_20]!
.text:00000000000E515C STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E5160 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E5164 ADD             X29, SP, #0x20
.text:00000000000E5168 LDAR            W2, [X0]
.text:00000000000E516C CMP             W2, #2
.text:00000000000E5170 B.NE            loc_E5188
.text:00000000000E5174
.text:00000000000E5174 loc_E5174
.text:00000000000E5174 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E5178 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E517C MOV             W0, WZR ; volatile void *
.text:00000000000E5180 LDR             X21, [SP+0x20+var_20],#0x30
.text:00000000000E5184 RET
.text:00000000000E5188
.text:00000000000E5188 loc_E5188
.text:00000000000E5188 MOV             W20, #1
.text:00000000000E518C
.text:00000000000E518C loc_E518C
.text:00000000000E518C MOV             W8, W2
.text:00000000000E5190 LDAXR           W2, [X0] ; int
.text:00000000000E5194 CMP             W2, W8
.text:00000000000E5198 B.NE            loc_E51D8
.text:00000000000E519C STXR            W8, W20, [X0]
.text:00000000000E51A0 CBNZ            W8, loc_E51DC
.text:00000000000E51A4 MOV             X21, X1
.text:00000000000E51A8 CBZ             W2, loc_E51E8
.text:00000000000E51AC MOV             W1, WZR ; bool
.text:00000000000E51B0 MOV             W3, WZR ; bool
.text:00000000000E51B4 MOV             X4, XZR ; timespec *
.text:00000000000E51B8 MOV             X19, X0
.text:00000000000E51BC BL              _Z15__futex_wait_exPVvbibPK8timespec ; __futex_wait_ex(void volatile*,bool,int,bool,timespec const*)
.text:00000000000E51C0 LDAR            W2, [X19]
.text:00000000000E51C4 MOV             X0, X19
.text:00000000000E51C8 MOV             X1, X21
.text:00000000000E51CC CMP             W2, #2
.text:00000000000E51D0 B.EQ            loc_E5174
.text:00000000000E51D4 B               loc_E518C
.text:00000000000E51D8
.text:00000000000E51D8 loc_E51D8
.text:00000000000E51D8 CLREX
.text:00000000000E51DC
.text:00000000000E51DC loc_E51DC
.text:00000000000E51DC CMP             W2, #2
.text:00000000000E51E0 B.EQ            loc_E5174
.text:00000000000E51E4 B               loc_E518C
.text:00000000000E51E8
.text:00000000000E51E8 loc_E51E8
.text:00000000000E51E8 MOV             X20, X0
.text:00000000000E51EC BLR             X21
.text:00000000000E51F0 MOV             W8, #2
.text:00000000000E51F4 STLR            W8, [X20]
.text:00000000000E51F8 BL              .__errno
.text:00000000000E51FC MOV             X19, X0
.text:00000000000E5200 LDR             W21, [X0]
.text:00000000000E5204 MOV             W0, #0x62 ; 'b'
.text:00000000000E5208 MOV             W2, #0x81
.text:00000000000E520C MOV             X1, X20
.text:00000000000E5210 MOV             W3, #0x7FFFFFFF
.text:00000000000E5214 MOV             X4, XZR
.text:00000000000E5218 MOV             X5, XZR
.text:00000000000E521C MOV             W6, WZR
.text:00000000000E5220 BL              .syscall
.text:00000000000E5224 CMN             W0, #1
.text:00000000000E5228 B.NE            loc_E5174
.text:00000000000E522C STR             W21, [X19]
.text:00000000000E5230 B               loc_E5174
.text:00000000000E5230 ; } // starts at E5158
.text:00000000000E5230 ; End of function pthread_once
.text:00000000000E5230
.text:00000000000E5234 ALIGN 8
.text:00000000000E5238
.text:00000000000E5238
.text:00000000000E5238
.text:00000000000E5238 EXPORT pthread_rwlockattr_init
.text:00000000000E5238 pthread_rwlockattr_init
.text:00000000000E5238 ; __unwind {
.text:00000000000E5238 MOV             X8, X0
.text:00000000000E523C MOV             W0, WZR
.text:00000000000E5240 STR             XZR, [X8]
.text:00000000000E5244 RET
.text:00000000000E5244 ; } // starts at E5238
.text:00000000000E5244 ; End of function pthread_rwlockattr_init
.text:00000000000E5244
.text:00000000000E5248
.text:00000000000E5248
.text:00000000000E5248
.text:00000000000E5248 EXPORT pthread_rwlockattr_destroy
.text:00000000000E5248 pthread_rwlockattr_destroy
.text:00000000000E5248 ; __unwind {
.text:00000000000E5248 MOV             X8, X0
.text:00000000000E524C MOV             X9, #0xFFFFFFFFFFFFFFFF
.text:00000000000E5250 MOV             W0, WZR
.text:00000000000E5254 STR             X9, [X8]
.text:00000000000E5258 RET
.text:00000000000E5258 ; } // starts at E5248
.text:00000000000E5258 ; End of function pthread_rwlockattr_destroy
.text:00000000000E5258
.text:00000000000E525C ALIGN 0x20
.text:00000000000E5260
.text:00000000000E5260
.text:00000000000E5260
.text:00000000000E5260 EXPORT pthread_rwlockattr_getpshared
.text:00000000000E5260 pthread_rwlockattr_getpshared
.text:00000000000E5260 ; __unwind {
.text:00000000000E5260 LDR             W8, [X0]
.text:00000000000E5264 MOV             W0, WZR
.text:00000000000E5268 AND             W8, W8, #1
.text:00000000000E526C STR             W8, [X1]
.text:00000000000E5270 RET
.text:00000000000E5270 ; } // starts at E5260
.text:00000000000E5270 ; End of function pthread_rwlockattr_getpshared
.text:00000000000E5270
.text:00000000000E5274 ALIGN 8
.text:00000000000E5278
.text:00000000000E5278
.text:00000000000E5278
.text:00000000000E5278 EXPORT pthread_rwlockattr_setpshared
.text:00000000000E5278 pthread_rwlockattr_setpshared
.text:00000000000E5278 ; __unwind {
.text:00000000000E5278 CMP             W1, #1
.text:00000000000E527C B.EQ            loc_E5290
.text:00000000000E5280 CBNZ            W1, loc_E52A4
.text:00000000000E5284 LDR             X8, [X0]
.text:00000000000E5288 AND             X9, X8, #0xFFFFFFFFFFFFFFFE
.text:00000000000E528C B               loc_E5298
.text:00000000000E5290
.text:00000000000E5290 loc_E5290
.text:00000000000E5290 LDR             X8, [X0]
.text:00000000000E5294 ORR             X9, X8, #1
.text:00000000000E5298
.text:00000000000E5298 loc_E5298
.text:00000000000E5298 STR             X9, [X0]
.text:00000000000E529C MOV             W0, WZR
.text:00000000000E52A0 RET
.text:00000000000E52A4
.text:00000000000E52A4 loc_E52A4
.text:00000000000E52A4 MOV             W8, #0x16
.text:00000000000E52A8 MOV             W0, W8
.text:00000000000E52AC RET
.text:00000000000E52AC ; } // starts at E5278
.text:00000000000E52AC ; End of function pthread_rwlockattr_setpshared
.text:00000000000E52AC
.text:00000000000E52B0
.text:00000000000E52B0
.text:00000000000E52B0
.text:00000000000E52B0 EXPORT pthread_rwlockattr_getkind_np
.text:00000000000E52B0 pthread_rwlockattr_getkind_np
.text:00000000000E52B0 ; __unwind {
.text:00000000000E52B0 LDR             W8, [X0]
.text:00000000000E52B4 MOV             W0, WZR
.text:00000000000E52B8 UBFX            W8, W8, #1, #1
.text:00000000000E52BC STR             W8, [X1]
.text:00000000000E52C0 RET
.text:00000000000E52C0 ; } // starts at E52B0
.text:00000000000E52C0 ; End of function pthread_rwlockattr_getkind_np
.text:00000000000E52C0
.text:00000000000E52C4 ALIGN 8
.text:00000000000E52C8
.text:00000000000E52C8
.text:00000000000E52C8
.text:00000000000E52C8 EXPORT pthread_rwlockattr_setkind_np
.text:00000000000E52C8 pthread_rwlockattr_setkind_np
.text:00000000000E52C8 ; __unwind {
.text:00000000000E52C8 CMP             W1, #1
.text:00000000000E52CC B.HI            loc_E52F0
.text:00000000000E52D0 LDR             X8, [X0]
.text:00000000000E52D4 LSL             W9, W1, #1
.text:00000000000E52D8 SXTW            X9, W9
.text:00000000000E52DC AND             X8, X8, #0xFFFFFFFFFFFFFFFD
.text:00000000000E52E0 ORR             X9, X8, X9
.text:00000000000E52E4 STR             X9, [X0]
.text:00000000000E52E8 MOV             W0, WZR
.text:00000000000E52EC RET
.text:00000000000E52F0
.text:00000000000E52F0 loc_E52F0
.text:00000000000E52F0 MOV             W8, #0x16
.text:00000000000E52F4 MOV             W0, W8
.text:00000000000E52F8 RET
.text:00000000000E52F8 ; } // starts at E52C8
.text:00000000000E52F8 ; End of function pthread_rwlockattr_setkind_np
.text:00000000000E52F8
.text:00000000000E52FC ALIGN 0x20
.text:00000000000E5300
.text:00000000000E5300
.text:00000000000E5300
.text:00000000000E5300 EXPORT pthread_rwlock_init
.text:00000000000E5300 pthread_rwlock_init
.text:00000000000E5300 ; __unwind {
.text:00000000000E5300 MOVI            V0.2D, #0
.text:00000000000E5304 STR             XZR, [X0,#0x30]
.text:00000000000E5308 STP             Q0, Q0, [X0,#0x10]
.text:00000000000E530C STR             Q0, [X0]
.text:00000000000E5310 CBNZ            X1, loc_E532C
.text:00000000000E5314 LDRB            W9, [X0,#8]
.text:00000000000E5318
.text:00000000000E5318 loc_E5318
.text:00000000000E5318 STR             WZR, [X0]
.text:00000000000E531C STR             WZR, [X0,#0xC]
.text:00000000000E5320 STRB            W9, [X0,#0x10]
.text:00000000000E5324 MOV             W0, WZR
.text:00000000000E5328 RET
.text:00000000000E532C
.text:00000000000E532C loc_E532C
.text:00000000000E532C LDRB            W8, [X1]
.text:00000000000E5330 AND             W9, W8, #1
.text:00000000000E5334 STRB            W9, [X0,#8]
.text:00000000000E5338 LDR             W8, [X1]
.text:00000000000E533C UBFX            W8, W8, #1, #1
.text:00000000000E5340 STRB            W8, [X0,#9]
.text:00000000000E5344 LDR             X8, [X1]
.text:00000000000E5348 CMP             X8, #3
.text:00000000000E534C B.LS            loc_E5318
.text:00000000000E5350 MOV             W8, #0x16
.text:00000000000E5354 MOV             W0, W8
.text:00000000000E5358 RET
.text:00000000000E5358 ; } // starts at E5300
.text:00000000000E5358 ; End of function pthread_rwlock_init
.text:00000000000E5358
.text:00000000000E535C ALIGN 0x20
.text:00000000000E5360
.text:00000000000E5360
.text:00000000000E5360
.text:00000000000E5360 EXPORT pthread_rwlock_destroy
.text:00000000000E5360 pthread_rwlock_destroy
.text:00000000000E5360 ; __unwind {
.text:00000000000E5360 LDR             W8, [X0]
.text:00000000000E5364 CMP             W8, #0
.text:00000000000E5368 CSET            W8, NE
.text:00000000000E536C LSL             W0, W8, #4
.text:00000000000E5370 RET
.text:00000000000E5370 ; } // starts at E5360
.text:00000000000E5370 ; End of function pthread_rwlock_destroy
.text:00000000000E5370
.text:00000000000E5374 ALIGN 8
.text:00000000000E5378
.text:00000000000E5378
.text:00000000000E5378
.text:00000000000E5378 EXPORT pthread_rwlock_rdlock
.text:00000000000E5378 pthread_rwlock_rdlock
.text:00000000000E5378 ; __unwind {
.text:00000000000E5378 LDR             W8, [X0]
.text:00000000000E537C B               loc_E5388
.text:00000000000E5380
.text:00000000000E5380 loc_E5380
.text:00000000000E5380 MOV             W8, W10
.text:00000000000E5384 CLREX
.text:00000000000E5388
.text:00000000000E5388 loc_E5388
.text:00000000000E5388 TBNZ            W8, #0x1F, loc_E539C
.text:00000000000E538C LDRB            W9, [X0,#9]
.text:00000000000E5390 CBZ             W9, loc_E539C
.text:00000000000E5394 TBZ             W8, #1, loc_E53A0
.text:00000000000E5398 B               loc_E53CC
.text:00000000000E539C
.text:00000000000E539C loc_E539C
.text:00000000000E539C TBNZ            W8, #0x1F, loc_E53CC
.text:00000000000E53A0
.text:00000000000E53A0 loc_E53A0
.text:00000000000E53A0 ADD             W9, W8, #4
.text:00000000000E53A4 CMP             W9, #4
.text:00000000000E53A8 B.LT            loc_E53CC
.text:00000000000E53AC LDAXR           W10, [X0]
.text:00000000000E53B0 CMP             W10, W8
.text:00000000000E53B4 B.NE            loc_E5380
.text:00000000000E53B8 STXR            W11, W9, [X0]
.text:00000000000E53BC MOV             W8, W10
.text:00000000000E53C0 CBNZ            W11, loc_E5388
.text:00000000000E53C4 MOV             W0, WZR
.text:00000000000E53C8 RET
.text:00000000000E53CC
.text:00000000000E53CC loc_E53CC
.text:00000000000E53CC MOV             W1, WZR
.text:00000000000E53D0 MOV             X2, XZR
.text:00000000000E53D4 B               _ZL28__pthread_rwlock_timedrdlockP25pthread_rwlock_internal_tbPK8timespec ; __pthread_rwlock_timedrdlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E53D4 ; } // starts at E5378
.text:00000000000E53D4 ; End of function pthread_rwlock_rdlock
.text:00000000000E53D4
.text:00000000000E53D8
.text:00000000000E53D8
.text:00000000000E53D8 ; Attributes: bp-based frame
.text:00000000000E53D8
.text:00000000000E53D8 ; __pthread_rwlock_timedrdlock(pthread_rwlock_internal_t *, bool, timespec const*)
.text:00000000000E53D8 _ZL28__pthread_rwlock_timedrdlockP25pthread_rwlock_internal_tbPK8timespec
.text:00000000000E53D8
.text:00000000000E53D8 var_64= -0x64
.text:00000000000E53D8 var_60= -0x60
.text:00000000000E53D8 var_54= -0x54
.text:00000000000E53D8 var_50= -0x50
.text:00000000000E53D8 var_40= -0x40
.text:00000000000E53D8 var_30= -0x30
.text:00000000000E53D8 var_20= -0x20
.text:00000000000E53D8 var_10= -0x10
.text:00000000000E53D8 var_s0=  0
.text:00000000000E53D8
.text:00000000000E53D8 ; __unwind {
.text:00000000000E53D8 SUB             SP, SP, #0x80
.text:00000000000E53DC STP             X28, X27, [SP,#0x70+var_50]
.text:00000000000E53E0 STP             X26, X25, [SP,#0x70+var_40]
.text:00000000000E53E4 STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000E53E8 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000E53EC STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000E53F0 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000E53F4 ADD             X29, SP, #0x70
.text:00000000000E53F8 MRS             X8, #3, c13, c0, #2
.text:00000000000E53FC LDR             W9, [X0,#4]
.text:00000000000E5400 LDR             X8, [X8,#8]
.text:00000000000E5404 LDR             W8, [X8,#0x10]
.text:00000000000E5408 CMP             W9, W8
.text:00000000000E540C B.NE            loc_E5418
.text:00000000000E5410 MOV             W21, #0x23 ; '#'
.text:00000000000E5414 B               loc_E5750
.text:00000000000E5418
.text:00000000000E5418 loc_E5418
.text:00000000000E5418 MOV             W14, #0xC9FF
.text:00000000000E541C MOV             X19, X2
.text:00000000000E5420 MOV             X20, X0
.text:00000000000E5424 ADD             X22, X0, #0xC
.text:00000000000E5428 ADD             X23, X0, #0x1C
.text:00000000000E542C MOV             W24, #1
.text:00000000000E5430 AND             W25, W1, #1
.text:00000000000E5434 MOV             W21, #0x6E ; 'n'
.text:00000000000E5438 MOV             W26, #2
.text:00000000000E543C MOV             W12, #0x16
.text:00000000000E5440 MOVK            W14, #0x3B9A,LSL#16
.text:00000000000E5444 MOV             W13, #0xB
.text:00000000000E5448
.text:00000000000E5448 loc_E5448
.text:00000000000E5448 LDR             W8, [X20]
.text:00000000000E544C B               loc_E5458
.text:00000000000E5450
.text:00000000000E5450 loc_E5450
.text:00000000000E5450 MOV             W8, W10
.text:00000000000E5454 CLREX
.text:00000000000E5458
.text:00000000000E5458 loc_E5458
.text:00000000000E5458 LDRB            W9, [X20,#9]
.text:00000000000E545C TBNZ            W8, #0x1F, loc_E546C
.text:00000000000E5460 CBZ             W9, loc_E546C
.text:00000000000E5464 TBZ             W8, #1, loc_E5470
.text:00000000000E5468 B               loc_E5498
.text:00000000000E546C
.text:00000000000E546C loc_E546C
.text:00000000000E546C TBNZ            W8, #0x1F, loc_E5498
.text:00000000000E5470
.text:00000000000E5470 loc_E5470
.text:00000000000E5470 ADD             W9, W8, #4
.text:00000000000E5474 CMP             W9, #4
.text:00000000000E5478 B.LT            loc_E5774
.text:00000000000E547C LDAXR           W10, [X20]
.text:00000000000E5480 CMP             W10, W8
.text:00000000000E5484 B.NE            loc_E5450
.text:00000000000E5488 STXR            W11, W9, [X20]
.text:00000000000E548C MOV             W8, W10
.text:00000000000E5490 CBNZ            W11, loc_E5458
.text:00000000000E5494 B               loc_E574C
.text:00000000000E5498
.text:00000000000E5498 loc_E5498
.text:00000000000E5498 CBZ             X19, loc_E54B0
.text:00000000000E549C LDR             X8, [X19,#8]
.text:00000000000E54A0 CMP             X8, X14
.text:00000000000E54A4 B.HI            loc_E577C
.text:00000000000E54A8 LDR             X8, [X19]
.text:00000000000E54AC TBNZ            X8, #0x3F, loc_E5750 ; '?'
.text:00000000000E54B0
.text:00000000000E54B0 loc_E54B0
.text:00000000000E54B0 LDR             W8, [X20]
.text:00000000000E54B4 TBNZ            W8, #0x1F, loc_E54C4
.text:00000000000E54B8 CBZ             W9, loc_E54C4
.text:00000000000E54BC TBZ             W8, #1, loc_E5448
.text:00000000000E54C0 B               loc_E54C8
.text:00000000000E54C4
.text:00000000000E54C4 loc_E54C4
.text:00000000000E54C4 TBZ             W8, #0x1F, loc_E5448
.text:00000000000E54C8
.text:00000000000E54C8 loc_E54C8
.text:00000000000E54C8 LDAXR           W8, [X22]
.text:00000000000E54CC CBNZ            W8, loc_E54DC
.text:00000000000E54D0 STXR            W8, W24, [X22]
.text:00000000000E54D4 CBNZ            W8, loc_E54C8
.text:00000000000E54D8 B               loc_E5550
.text:00000000000E54DC
.text:00000000000E54DC loc_E54DC
.text:00000000000E54DC CLREX
.text:00000000000E54E0
.text:00000000000E54E0 loc_E54E0
.text:00000000000E54E0 LDAXR           W8, [X22]
.text:00000000000E54E4 STXR            W9, W26, [X22]
.text:00000000000E54E8 CBNZ            W9, loc_E54E0
.text:00000000000E54EC CBZ             W8, loc_E5550
.text:00000000000E54F0 BL              .__errno
.text:00000000000E54F4 MOV             X27, X0
.text:00000000000E54F8 B               loc_E5504
.text:00000000000E54FC
.text:00000000000E54FC loc_E54FC
.text:00000000000E54FC STR             W28, [X27]
.text:00000000000E5500 B               loc_E5540
.text:00000000000E5504
.text:00000000000E5504 loc_E5504
.text:00000000000E5504 LDRB            W8, [X20,#0x10]
.text:00000000000E5508 MOV             W9, #0x89
.text:00000000000E550C LDR             W28, [X27]
.text:00000000000E5510 MOV             W0, #0x62 ; 'b'
.text:00000000000E5514 MOV             X1, X22
.text:00000000000E5518 MOV             W3, #2
.text:00000000000E551C CMP             W8, #0
.text:00000000000E5520 MOV             W8, #9
.text:00000000000E5524 CSEL            W2, W9, W8, EQ
.text:00000000000E5528 MOV             X4, XZR
.text:00000000000E552C MOV             X5, XZR
.text:00000000000E5530 MOV             W6, #0xFFFFFFFF
.text:00000000000E5534 BL              .syscall
.text:00000000000E5538 CMN             W0, #1
.text:00000000000E553C B.EQ            loc_E54FC
.text:00000000000E5540
.text:00000000000E5540 loc_E5540
.text:00000000000E5540 LDAXR           W8, [X22]
.text:00000000000E5544 STXR            W9, W26, [X22]
.text:00000000000E5548 CBNZ            W9, loc_E5540
.text:00000000000E554C CBNZ            W8, loc_E5504
.text:00000000000E5550
.text:00000000000E5550 loc_E5550
.text:00000000000E5550 LDR             W8, [X20,#0x14]
.text:00000000000E5554 ADD             W8, W8, #1
.text:00000000000E5558 STR             W8, [X20,#0x14]
.text:00000000000E555C
.text:00000000000E555C loc_E555C
.text:00000000000E555C LDXR            W28, [X20]
.text:00000000000E5560 ORR             W8, W28, #1
.text:00000000000E5564 STXR            W9, W8, [X20]
.text:00000000000E5568 CBNZ            W9, loc_E555C
.text:00000000000E556C LDR             W2, [X20,#0x1C]
.text:00000000000E5570 LDRB            W8, [X20,#0x10]
.text:00000000000E5574
.text:00000000000E5574 loc_E5574
.text:00000000000E5574 LDXR            W9, [X22]
.text:00000000000E5578 STLXR           W10, WZR, [X22]
.text:00000000000E557C CBNZ            W10, loc_E5574
.text:00000000000E5580 CMP             W9, #2
.text:00000000000E5584 B.NE            loc_E55D4
.text:00000000000E5588 CMP             W8, #0
.text:00000000000E558C STR             W2, [SP,#0x70+var_54]
.text:00000000000E5590 MOV             W8, #0x81
.text:00000000000E5594 CSINC           W27, W8, WZR, EQ
.text:00000000000E5598 BL              .__errno
.text:00000000000E559C LDR             W8, [X0]
.text:00000000000E55A0 MOV             X1, X22
.text:00000000000E55A4 STR             X0, [SP,#0x70+var_60]
.text:00000000000E55A8 MOV             W0, #0x62 ; 'b'
.text:00000000000E55AC MOV             W2, W27
.text:00000000000E55B0 MOV             W3, #1
.text:00000000000E55B4 MOV             X4, XZR
.text:00000000000E55B8 STR             W8, [SP,#0x70+var_64]
.text:00000000000E55BC MOV             X5, XZR
.text:00000000000E55C0 MOV             W6, WZR
.text:00000000000E55C4 BL              .syscall
.text:00000000000E55C8 LDR             W2, [SP,#0x70+var_54] ; int
.text:00000000000E55CC CMN             W0, #1
.text:00000000000E55D0 B.EQ            loc_E5610
.text:00000000000E55D4
.text:00000000000E55D4 loc_E55D4
.text:00000000000E55D4 TBNZ            W28, #0x1F, loc_E5620
.text:00000000000E55D8
.text:00000000000E55D8 loc_E55D8
.text:00000000000E55D8 LDRB            W8, [X20,#9]
.text:00000000000E55DC CBZ             W8, loc_E5620
.text:00000000000E55E0 TBZ             W28, #1, loc_E5624
.text:00000000000E55E4
.text:00000000000E55E4 loc_E55E4               ; bool
.text:00000000000E55E4 LDRB            W1, [X20,#8]
.text:00000000000E55E8 MOV             X0, X23 ; volatile void *
.text:00000000000E55EC MOV             W3, W25 ; bool
.text:00000000000E55F0 MOV             X4, X19 ; timespec *
.text:00000000000E55F4 BL              _Z15__futex_wait_exPVvbibPK8timespec ; __futex_wait_ex(void volatile*,bool,int,bool,timespec const*)
.text:00000000000E55F8 STR             W0, [SP,#0x70+var_54]
.text:00000000000E55FC
.text:00000000000E55FC loc_E55FC
.text:00000000000E55FC LDAXR           W8, [X22]
.text:00000000000E5600 CBNZ            W8, loc_E5630
.text:00000000000E5604
.text:00000000000E5604 loc_E5604
.text:00000000000E5604 STXR            W8, W24, [X22]
.text:00000000000E5608 CBNZ            W8, loc_E55FC
.text:00000000000E560C B               loc_E56A4
.text:00000000000E5610
.text:00000000000E5610 loc_E5610
.text:00000000000E5610 LDR             X8, [SP,#0x70+var_60]
.text:00000000000E5614 LDR             W9, [SP,#0x70+var_64]
.text:00000000000E5618 STR             W9, [X8]
.text:00000000000E561C TBZ             W28, #0x1F, loc_E55D8
.text:00000000000E5620
.text:00000000000E5620 loc_E5620
.text:00000000000E5620 TBNZ            W28, #0x1F, loc_E55E4
.text:00000000000E5624
.text:00000000000E5624 loc_E5624
.text:00000000000E5624 STR             WZR, [SP,#0x70+var_54]
.text:00000000000E5628 LDAXR           W8, [X22]
.text:00000000000E562C CBZ             W8, loc_E5604
.text:00000000000E5630
.text:00000000000E5630 loc_E5630
.text:00000000000E5630 CLREX
.text:00000000000E5634
.text:00000000000E5634 loc_E5634
.text:00000000000E5634 LDAXR           W8, [X22]
.text:00000000000E5638 STXR            W9, W26, [X22]
.text:00000000000E563C CBNZ            W9, loc_E5634
.text:00000000000E5640 CBZ             W8, loc_E56A4
.text:00000000000E5644 BL              .__errno
.text:00000000000E5648 MOV             X28, X0
.text:00000000000E564C B               loc_E5658
.text:00000000000E5650
.text:00000000000E5650 loc_E5650
.text:00000000000E5650 STR             W27, [X28]
.text:00000000000E5654 B               loc_E5694
.text:00000000000E5658
.text:00000000000E5658 loc_E5658
.text:00000000000E5658 LDRB            W8, [X20,#0x10]
.text:00000000000E565C MOV             W9, #0x89
.text:00000000000E5660 LDR             W27, [X28]
.text:00000000000E5664 MOV             W0, #0x62 ; 'b'
.text:00000000000E5668 MOV             X1, X22
.text:00000000000E566C MOV             W3, #2
.text:00000000000E5670 CMP             W8, #0
.text:00000000000E5674 MOV             W8, #9
.text:00000000000E5678 CSEL            W2, W9, W8, EQ
.text:00000000000E567C MOV             X4, XZR
.text:00000000000E5680 MOV             X5, XZR
.text:00000000000E5684 MOV             W6, #0xFFFFFFFF
.text:00000000000E5688 BL              .syscall
.text:00000000000E568C CMN             W0, #1
.text:00000000000E5690 B.EQ            loc_E5650
.text:00000000000E5694
.text:00000000000E5694 loc_E5694
.text:00000000000E5694 LDAXR           W8, [X22]
.text:00000000000E5698 STXR            W9, W26, [X22]
.text:00000000000E569C CBNZ            W9, loc_E5694
.text:00000000000E56A0 CBNZ            W8, loc_E5658
.text:00000000000E56A4
.text:00000000000E56A4 loc_E56A4
.text:00000000000E56A4 LDR             W8, [X20,#0x14]
.text:00000000000E56A8 SUBS            W8, W8, #1
.text:00000000000E56AC STR             W8, [X20,#0x14]
.text:00000000000E56B0 B.NE            loc_E56C4
.text:00000000000E56B4
.text:00000000000E56B4 loc_E56B4
.text:00000000000E56B4 LDXR            W8, [X20]
.text:00000000000E56B8 AND             W8, W8, #0xFFFFFFFE
.text:00000000000E56BC STXR            W9, W8, [X20]
.text:00000000000E56C0 CBNZ            W9, loc_E56B4
.text:00000000000E56C4
.text:00000000000E56C4 loc_E56C4
.text:00000000000E56C4 LDRB            W8, [X20,#0x10]
.text:00000000000E56C8
.text:00000000000E56C8 loc_E56C8
.text:00000000000E56C8 LDXR            W9, [X22]
.text:00000000000E56CC STLXR           W10, WZR, [X22]
.text:00000000000E56D0 CBNZ            W10, loc_E56C8
.text:00000000000E56D4 CMP             W9, #2
.text:00000000000E56D8 B.NE            loc_E5720
.text:00000000000E56DC CMP             W8, #0
.text:00000000000E56E0 MOV             W8, #0x81
.text:00000000000E56E4 CSINC           W27, W8, WZR, EQ
.text:00000000000E56E8 BL              .__errno
.text:00000000000E56EC LDR             W8, [X0]
.text:00000000000E56F0 MOV             X28, X0
.text:00000000000E56F4 MOV             W0, #0x62 ; 'b'
.text:00000000000E56F8 MOV             X1, X22
.text:00000000000E56FC MOV             W2, W27
.text:00000000000E5700 MOV             W3, #1
.text:00000000000E5704 STR             W8, [SP,#0x70+var_60]
.text:00000000000E5708 MOV             X4, XZR
.text:00000000000E570C MOV             X5, XZR
.text:00000000000E5710 MOV             W6, WZR
.text:00000000000E5714 BL              .syscall
.text:00000000000E5718 CMN             W0, #1
.text:00000000000E571C B.EQ            loc_E5740
.text:00000000000E5720
.text:00000000000E5720 loc_E5720
.text:00000000000E5720 LDR             W8, [SP,#0x70+var_54]
.text:00000000000E5724 MOV             W14, #0xC9FF
.text:00000000000E5728 MOV             W12, #0x16
.text:00000000000E572C MOV             W13, #0xB
.text:00000000000E5730 MOVK            W14, #0x3B9A,LSL#16
.text:00000000000E5734 CMN             W8, #0x6E ; 'n'
.text:00000000000E5738 B.NE            loc_E5448
.text:00000000000E573C B               loc_E5750
.text:00000000000E5740
.text:00000000000E5740 loc_E5740
.text:00000000000E5740 LDR             W8, [SP,#0x70+var_60]
.text:00000000000E5744 STR             W8, [X28]
.text:00000000000E5748 B               loc_E5720
.text:00000000000E574C
.text:00000000000E574C loc_E574C
.text:00000000000E574C MOV             W21, WZR
.text:00000000000E5750
.text:00000000000E5750 loc_E5750
.text:00000000000E5750 MOV             W0, W21
.text:00000000000E5754 LDP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000E5758 LDP             X20, X19, [SP,#0x70+var_10]
.text:00000000000E575C LDP             X22, X21, [SP,#0x70+var_20]
.text:00000000000E5760 LDP             X24, X23, [SP,#0x70+var_30]
.text:00000000000E5764 LDP             X26, X25, [SP,#0x70+var_40]
.text:00000000000E5768 LDP             X28, X27, [SP,#0x70+var_50]
.text:00000000000E576C ADD             SP, SP, #0x80
.text:00000000000E5770 RET
.text:00000000000E5774
.text:00000000000E5774 loc_E5774
.text:00000000000E5774 MOV             W21, W13
.text:00000000000E5778 B               loc_E5750
.text:00000000000E577C
.text:00000000000E577C loc_E577C
.text:00000000000E577C MOV             W21, W12
.text:00000000000E5780 B               loc_E5750
.text:00000000000E5780 ; } // starts at E53D8
.text:00000000000E5780 ; End of function __pthread_rwlock_timedrdlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E5780
.text:00000000000E5784 ALIGN 8
.text:00000000000E5788
.text:00000000000E5788
.text:00000000000E5788
.text:00000000000E5788 EXPORT pthread_rwlock_timedrdlock
.text:00000000000E5788 pthread_rwlock_timedrdlock
.text:00000000000E5788 ; __unwind {
.text:00000000000E5788 MOV             X2, X1
.text:00000000000E578C MOV             W1, #1
.text:00000000000E5790 B               _ZL28__pthread_rwlock_timedrdlockP25pthread_rwlock_internal_tbPK8timespec ; __pthread_rwlock_timedrdlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E5790 ; } // starts at E5788
.text:00000000000E5790 ; End of function pthread_rwlock_timedrdlock
.text:00000000000E5790
.text:00000000000E5794 ALIGN 8
.text:00000000000E5798
.text:00000000000E5798
.text:00000000000E5798
.text:00000000000E5798 EXPORT pthread_rwlock_timedrdlock_monotonic_np
.text:00000000000E5798 pthread_rwlock_timedrdlock_monotonic_np
.text:00000000000E5798 ; __unwind {
.text:00000000000E5798 MOV             X2, X1
.text:00000000000E579C MOV             W1, WZR
.text:00000000000E57A0 B               _ZL28__pthread_rwlock_timedrdlockP25pthread_rwlock_internal_tbPK8timespec ; __pthread_rwlock_timedrdlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E57A0 ; } // starts at E5798
.text:00000000000E57A0 ; End of function pthread_rwlock_timedrdlock_monotonic_np
.text:00000000000E57A0
.text:00000000000E57A4 ALIGN 8
.text:00000000000E57A8
.text:00000000000E57A8
.text:00000000000E57A8
.text:00000000000E57A8 EXPORT pthread_rwlock_tryrdlock
.text:00000000000E57A8 pthread_rwlock_tryrdlock
.text:00000000000E57A8 ; __unwind {
.text:00000000000E57A8 LDR             W9, [X0]
.text:00000000000E57AC MOV             X8, X0
.text:00000000000E57B0 MOV             W0, #0xB
.text:00000000000E57B4 B               loc_E57C0
.text:00000000000E57B8
.text:00000000000E57B8 loc_E57B8
.text:00000000000E57B8 MOV             W9, W11
.text:00000000000E57BC CLREX
.text:00000000000E57C0
.text:00000000000E57C0 loc_E57C0
.text:00000000000E57C0 TBNZ            W9, #0x1F, loc_E57D4
.text:00000000000E57C4 LDRB            W10, [X8,#9]
.text:00000000000E57C8 CBZ             W10, loc_E57D4
.text:00000000000E57CC TBZ             W9, #1, loc_E57D8
.text:00000000000E57D0 B               loc_E5804
.text:00000000000E57D4
.text:00000000000E57D4 loc_E57D4
.text:00000000000E57D4 TBNZ            W9, #0x1F, loc_E580C
.text:00000000000E57D8
.text:00000000000E57D8 loc_E57D8
.text:00000000000E57D8 ADD             W10, W9, #4
.text:00000000000E57DC CMP             W10, #4
.text:00000000000E57E0 B.LT            locret_E5800
.text:00000000000E57E4 LDAXR           W11, [X8]
.text:00000000000E57E8 CMP             W11, W9
.text:00000000000E57EC B.NE            loc_E57B8
.text:00000000000E57F0 STXR            W12, W10, [X8]
.text:00000000000E57F4 MOV             W9, W11
.text:00000000000E57F8 CBNZ            W12, loc_E57C0
.text:00000000000E57FC MOV             W0, WZR
.text:00000000000E5800
.text:00000000000E5800 locret_E5800
.text:00000000000E5800 RET
.text:00000000000E5804
.text:00000000000E5804 loc_E5804
.text:00000000000E5804 MOV             W0, #0x10
.text:00000000000E5808 RET
.text:00000000000E580C
.text:00000000000E580C loc_E580C
.text:00000000000E580C MOV             W0, #0x10
.text:00000000000E5810 RET
.text:00000000000E5810 ; } // starts at E57A8
.text:00000000000E5810 ; End of function pthread_rwlock_tryrdlock
.text:00000000000E5810
.text:00000000000E5814 ALIGN 8
.text:00000000000E5818
.text:00000000000E5818
.text:00000000000E5818
.text:00000000000E5818 EXPORT pthread_rwlock_wrlock
.text:00000000000E5818 pthread_rwlock_wrlock
.text:00000000000E5818 ; __unwind {
.text:00000000000E5818 LDR             W9, [X0]
.text:00000000000E581C MOV             X8, X0
.text:00000000000E5820 B               loc_E582C
.text:00000000000E5824
.text:00000000000E5824 loc_E5824
.text:00000000000E5824 MOV             W9, W10
.text:00000000000E5828 CLREX
.text:00000000000E582C
.text:00000000000E582C loc_E582C
.text:00000000000E582C CMP             W9, #3
.text:00000000000E5830 B.HI            loc_E5868
.text:00000000000E5834 LDAXR           W10, [X8]
.text:00000000000E5838 CMP             W10, W9
.text:00000000000E583C B.NE            loc_E5824
.text:00000000000E5840 ORR             W9, W9, #0x80000000
.text:00000000000E5844 STXR            W11, W9, [X8]
.text:00000000000E5848 MOV             W9, W10
.text:00000000000E584C CBNZ            W11, loc_E582C
.text:00000000000E5850 MRS             X9, #3, c13, c0, #2
.text:00000000000E5854 MOV             W0, WZR
.text:00000000000E5858 LDR             X9, [X9,#8]
.text:00000000000E585C LDR             W9, [X9,#0x10]
.text:00000000000E5860 STR             W9, [X8,#4]
.text:00000000000E5864 RET
.text:00000000000E5868
.text:00000000000E5868 loc_E5868
.text:00000000000E5868 MOV             X0, X8
.text:00000000000E586C MOV             W1, WZR
.text:00000000000E5870 MOV             X2, XZR
.text:00000000000E5874 B               _ZL28__pthread_rwlock_timedwrlockP25pthread_rwlock_internal_tbPK8timespec ; __pthread_rwlock_timedwrlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E5874 ; } // starts at E5818
.text:00000000000E5874 ; End of function pthread_rwlock_wrlock
.text:00000000000E5874
.text:00000000000E5878
.text:00000000000E5878
.text:00000000000E5878 ; Attributes: bp-based frame
.text:00000000000E5878
.text:00000000000E5878 ; __pthread_rwlock_timedwrlock(pthread_rwlock_internal_t *, bool, timespec const*)
.text:00000000000E5878 _ZL28__pthread_rwlock_timedwrlockP25pthread_rwlock_internal_tbPK8timespec
.text:00000000000E5878
.text:00000000000E5878 var_64= -0x64
.text:00000000000E5878 var_60= -0x60
.text:00000000000E5878 var_54= -0x54
.text:00000000000E5878 var_50= -0x50
.text:00000000000E5878 var_40= -0x40
.text:00000000000E5878 var_30= -0x30
.text:00000000000E5878 var_20= -0x20
.text:00000000000E5878 var_10= -0x10
.text:00000000000E5878 var_s0=  0
.text:00000000000E5878
.text:00000000000E5878 ; __unwind {
.text:00000000000E5878 SUB             SP, SP, #0x80
.text:00000000000E587C STP             X28, X27, [SP,#0x70+var_50]
.text:00000000000E5880 STP             X26, X25, [SP,#0x70+var_40]
.text:00000000000E5884 STP             X24, X23, [SP,#0x70+var_30]
.text:00000000000E5888 STP             X22, X21, [SP,#0x70+var_20]
.text:00000000000E588C STP             X20, X19, [SP,#0x70+var_10]
.text:00000000000E5890 STP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000E5894 ADD             X29, SP, #0x70
.text:00000000000E5898 MRS             X24, #3, c13, c0, #2
.text:00000000000E589C LDR             W8, [X0,#4]
.text:00000000000E58A0 LDR             X9, [X24,#8]
.text:00000000000E58A4 LDR             W9, [X9,#0x10]
.text:00000000000E58A8 CMP             W8, W9
.text:00000000000E58AC B.NE            loc_E58B8
.text:00000000000E58B0 MOV             W21, #0x23 ; '#'
.text:00000000000E58B4 B               loc_E5BE0
.text:00000000000E58B8
.text:00000000000E58B8 loc_E58B8
.text:00000000000E58B8 MOV             W13, #0xC9FF
.text:00000000000E58BC MOV             X20, X2
.text:00000000000E58C0 MOV             X19, X0
.text:00000000000E58C4 ADD             X22, X0, #0xC
.text:00000000000E58C8 ADD             X23, X0, #0x20 ; ' '
.text:00000000000E58CC MOV             W11, #1
.text:00000000000E58D0 MOV             W21, #0x6E ; 'n'
.text:00000000000E58D4 MOV             W25, #2
.text:00000000000E58D8 AND             W26, W1, #1
.text:00000000000E58DC MOV             W12, #0x16
.text:00000000000E58E0 MOVK            W13, #0x3B9A,LSL#16
.text:00000000000E58E4
.text:00000000000E58E4 loc_E58E4
.text:00000000000E58E4 LDR             W8, [X19]
.text:00000000000E58E8 B               loc_E58F4
.text:00000000000E58EC
.text:00000000000E58EC loc_E58EC
.text:00000000000E58EC MOV             W8, W9
.text:00000000000E58F0 CLREX
.text:00000000000E58F4
.text:00000000000E58F4 loc_E58F4
.text:00000000000E58F4 CMP             W8, #3
.text:00000000000E58F8 B.HI            loc_E591C
.text:00000000000E58FC LDAXR           W9, [X19]
.text:00000000000E5900 CMP             W9, W8
.text:00000000000E5904 B.NE            loc_E58EC
.text:00000000000E5908 ORR             W8, W8, #0x80000000
.text:00000000000E590C STXR            W10, W8, [X19]
.text:00000000000E5910 MOV             W8, W9
.text:00000000000E5914 CBNZ            W10, loc_E58F4
.text:00000000000E5918 B               loc_E5BD0
.text:00000000000E591C
.text:00000000000E591C loc_E591C
.text:00000000000E591C CBZ             X20, loc_E5934
.text:00000000000E5920 LDR             X8, [X20,#8]
.text:00000000000E5924 CMP             X8, X13
.text:00000000000E5928 B.HI            loc_E5C04
.text:00000000000E592C LDR             X8, [X20]
.text:00000000000E5930 TBNZ            X8, #0x3F, loc_E5BE0 ; '?'
.text:00000000000E5934
.text:00000000000E5934 loc_E5934
.text:00000000000E5934 LDR             W8, [X19]
.text:00000000000E5938 CMP             W8, #4
.text:00000000000E593C B.CC            loc_E58E4
.text:00000000000E5940
.text:00000000000E5940 loc_E5940
.text:00000000000E5940 LDAXR           W8, [X22]
.text:00000000000E5944 CBNZ            W8, loc_E5954
.text:00000000000E5948 STXR            W8, W11, [X22]
.text:00000000000E594C CBNZ            W8, loc_E5940
.text:00000000000E5950 B               loc_E59CC
.text:00000000000E5954
.text:00000000000E5954 loc_E5954
.text:00000000000E5954 CLREX
.text:00000000000E5958
.text:00000000000E5958 loc_E5958
.text:00000000000E5958 LDAXR           W8, [X22]
.text:00000000000E595C STXR            W9, W25, [X22]
.text:00000000000E5960 CBNZ            W9, loc_E5958
.text:00000000000E5964 CBZ             W8, loc_E59CC
.text:00000000000E5968 BL              .__errno
.text:00000000000E596C MOV             X27, X0
.text:00000000000E5970 B               loc_E597C
.text:00000000000E5974
.text:00000000000E5974 loc_E5974
.text:00000000000E5974 STR             W28, [X27]
.text:00000000000E5978 B               loc_E59B8
.text:00000000000E597C
.text:00000000000E597C loc_E597C
.text:00000000000E597C LDRB            W8, [X19,#0x10]
.text:00000000000E5980 MOV             W9, #0x89
.text:00000000000E5984 LDR             W28, [X27]
.text:00000000000E5988 MOV             W0, #0x62 ; 'b'
.text:00000000000E598C MOV             X1, X22
.text:00000000000E5990 MOV             W3, #2
.text:00000000000E5994 CMP             W8, #0
.text:00000000000E5998 MOV             W8, #9
.text:00000000000E599C CSEL            W2, W9, W8, EQ
.text:00000000000E59A0 MOV             X4, XZR
.text:00000000000E59A4 MOV             X5, XZR
.text:00000000000E59A8 MOV             W6, #0xFFFFFFFF
.text:00000000000E59AC BL              .syscall
.text:00000000000E59B0 CMN             W0, #1
.text:00000000000E59B4 B.EQ            loc_E5974
.text:00000000000E59B8
.text:00000000000E59B8 loc_E59B8
.text:00000000000E59B8 LDAXR           W8, [X22]
.text:00000000000E59BC STXR            W9, W25, [X22]
.text:00000000000E59C0 CBNZ            W9, loc_E59B8
.text:00000000000E59C4 MOV             W11, #1
.text:00000000000E59C8 CBNZ            W8, loc_E597C
.text:00000000000E59CC
.text:00000000000E59CC loc_E59CC
.text:00000000000E59CC LDR             W8, [X19,#0x18]
.text:00000000000E59D0 ADD             W8, W8, #1
.text:00000000000E59D4 STR             W8, [X19,#0x18]
.text:00000000000E59D8
.text:00000000000E59D8 loc_E59D8
.text:00000000000E59D8 LDXR            W28, [X19]
.text:00000000000E59DC ORR             W8, W28, #2
.text:00000000000E59E0 STXR            W9, W8, [X19]
.text:00000000000E59E4 CBNZ            W9, loc_E59D8
.text:00000000000E59E8 LDR             W2, [X19,#0x20]
.text:00000000000E59EC LDRB            W8, [X19,#0x10]
.text:00000000000E59F0
.text:00000000000E59F0 loc_E59F0
.text:00000000000E59F0 LDXR            W9, [X22]
.text:00000000000E59F4 STLXR           W10, WZR, [X22]
.text:00000000000E59F8 CBNZ            W10, loc_E59F0
.text:00000000000E59FC CMP             W9, #2
.text:00000000000E5A00 B.NE            loc_E5A54
.text:00000000000E5A04 CMP             W8, #0
.text:00000000000E5A08 STR             W2, [SP,#0x70+var_54]
.text:00000000000E5A0C MOV             W8, #0x81
.text:00000000000E5A10 CSINC           W27, W8, WZR, EQ
.text:00000000000E5A14 BL              .__errno
.text:00000000000E5A18 LDR             W8, [X0]
.text:00000000000E5A1C MOV             X1, X22
.text:00000000000E5A20 STR             X0, [SP,#0x70+var_60]
.text:00000000000E5A24 MOV             W0, #0x62 ; 'b'
.text:00000000000E5A28 MOV             W2, W27
.text:00000000000E5A2C MOV             W3, #1
.text:00000000000E5A30 MOV             X4, XZR
.text:00000000000E5A34 STR             W8, [SP,#0x70+var_64]
.text:00000000000E5A38 MOV             X5, XZR
.text:00000000000E5A3C MOV             W6, WZR
.text:00000000000E5A40 BL              .syscall
.text:00000000000E5A44 LDR             W2, [SP,#0x70+var_54] ; int
.text:00000000000E5A48 MOV             W11, #1
.text:00000000000E5A4C CMN             W0, #1
.text:00000000000E5A50 B.EQ            loc_E5A6C
.text:00000000000E5A54
.text:00000000000E5A54 loc_E5A54
.text:00000000000E5A54 CMP             W28, #4
.text:00000000000E5A58 B.CS            loc_E5A80
.text:00000000000E5A5C
.text:00000000000E5A5C loc_E5A5C
.text:00000000000E5A5C STR             WZR, [SP,#0x70+var_54]
.text:00000000000E5A60 LDAXR           W8, [X22]
.text:00000000000E5A64 CBZ             W8, loc_E5AA4
.text:00000000000E5A68 B               loc_E5AB0
.text:00000000000E5A6C
.text:00000000000E5A6C loc_E5A6C
.text:00000000000E5A6C LDR             X8, [SP,#0x70+var_60]
.text:00000000000E5A70 LDR             W9, [SP,#0x70+var_64]
.text:00000000000E5A74 STR             W9, [X8]
.text:00000000000E5A78 CMP             W28, #4
.text:00000000000E5A7C B.CC            loc_E5A5C
.text:00000000000E5A80
.text:00000000000E5A80 loc_E5A80               ; bool
.text:00000000000E5A80 LDRB            W1, [X19,#8]
.text:00000000000E5A84 MOV             X0, X23 ; volatile void *
.text:00000000000E5A88 MOV             W3, W26 ; bool
.text:00000000000E5A8C MOV             X4, X20 ; timespec *
.text:00000000000E5A90 BL              _Z15__futex_wait_exPVvbibPK8timespec ; __futex_wait_ex(void volatile*,bool,int,bool,timespec const*)
.text:00000000000E5A94 MOV             W11, #1
.text:00000000000E5A98 STR             W0, [SP,#0x70+var_54]
.text:00000000000E5A9C
.text:00000000000E5A9C loc_E5A9C
.text:00000000000E5A9C LDAXR           W8, [X22]
.text:00000000000E5AA0 CBNZ            W8, loc_E5AB0
.text:00000000000E5AA4
.text:00000000000E5AA4 loc_E5AA4
.text:00000000000E5AA4 STXR            W8, W11, [X22]
.text:00000000000E5AA8 CBNZ            W8, loc_E5A9C
.text:00000000000E5AAC B               loc_E5B28
.text:00000000000E5AB0
.text:00000000000E5AB0 loc_E5AB0
.text:00000000000E5AB0 CLREX
.text:00000000000E5AB4
.text:00000000000E5AB4 loc_E5AB4
.text:00000000000E5AB4 LDAXR           W8, [X22]
.text:00000000000E5AB8 STXR            W9, W25, [X22]
.text:00000000000E5ABC CBNZ            W9, loc_E5AB4
.text:00000000000E5AC0 CBZ             W8, loc_E5B28
.text:00000000000E5AC4 BL              .__errno
.text:00000000000E5AC8 MOV             X28, X0
.text:00000000000E5ACC B               loc_E5AD8
.text:00000000000E5AD0
.text:00000000000E5AD0 loc_E5AD0
.text:00000000000E5AD0 STR             W27, [X28]
.text:00000000000E5AD4 B               loc_E5B14
.text:00000000000E5AD8
.text:00000000000E5AD8 loc_E5AD8
.text:00000000000E5AD8 LDRB            W8, [X19,#0x10]
.text:00000000000E5ADC MOV             W9, #0x89
.text:00000000000E5AE0 LDR             W27, [X28]
.text:00000000000E5AE4 MOV             W0, #0x62 ; 'b'
.text:00000000000E5AE8 MOV             X1, X22
.text:00000000000E5AEC MOV             W3, #2
.text:00000000000E5AF0 CMP             W8, #0
.text:00000000000E5AF4 MOV             W8, #9
.text:00000000000E5AF8 CSEL            W2, W9, W8, EQ
.text:00000000000E5AFC MOV             X4, XZR
.text:00000000000E5B00 MOV             X5, XZR
.text:00000000000E5B04 MOV             W6, #0xFFFFFFFF
.text:00000000000E5B08 BL              .syscall
.text:00000000000E5B0C CMN             W0, #1
.text:00000000000E5B10 B.EQ            loc_E5AD0
.text:00000000000E5B14
.text:00000000000E5B14 loc_E5B14
.text:00000000000E5B14 LDAXR           W8, [X22]
.text:00000000000E5B18 STXR            W9, W25, [X22]
.text:00000000000E5B1C CBNZ            W9, loc_E5B14
.text:00000000000E5B20 MOV             W11, #1
.text:00000000000E5B24 CBNZ            W8, loc_E5AD8
.text:00000000000E5B28
.text:00000000000E5B28 loc_E5B28
.text:00000000000E5B28 LDR             W8, [X19,#0x18]
.text:00000000000E5B2C SUBS            W8, W8, #1
.text:00000000000E5B30 STR             W8, [X19,#0x18]
.text:00000000000E5B34 B.NE            loc_E5B48
.text:00000000000E5B38
.text:00000000000E5B38 loc_E5B38
.text:00000000000E5B38 LDXR            W8, [X19]
.text:00000000000E5B3C AND             W8, W8, #0xFFFFFFFD
.text:00000000000E5B40 STXR            W9, W8, [X19]
.text:00000000000E5B44 CBNZ            W9, loc_E5B38
.text:00000000000E5B48
.text:00000000000E5B48 loc_E5B48
.text:00000000000E5B48 LDRB            W8, [X19,#0x10]
.text:00000000000E5B4C
.text:00000000000E5B4C loc_E5B4C
.text:00000000000E5B4C LDXR            W9, [X22]
.text:00000000000E5B50 STLXR           W10, WZR, [X22]
.text:00000000000E5B54 CBNZ            W10, loc_E5B4C
.text:00000000000E5B58 CMP             W9, #2
.text:00000000000E5B5C B.NE            loc_E5BA8
.text:00000000000E5B60 CMP             W8, #0
.text:00000000000E5B64 MOV             W8, #0x81
.text:00000000000E5B68 CSINC           W27, W8, WZR, EQ
.text:00000000000E5B6C BL              .__errno
.text:00000000000E5B70 LDR             W8, [X0]
.text:00000000000E5B74 MOV             X28, X0
.text:00000000000E5B78 MOV             W0, #0x62 ; 'b'
.text:00000000000E5B7C MOV             X1, X22
.text:00000000000E5B80 MOV             W2, W27
.text:00000000000E5B84 MOV             W3, #1
.text:00000000000E5B88 STR             W8, [SP,#0x70+var_60]
.text:00000000000E5B8C MOV             X4, XZR
.text:00000000000E5B90 MOV             X5, XZR
.text:00000000000E5B94 MOV             W6, WZR
.text:00000000000E5B98 BL              .syscall
.text:00000000000E5B9C MOV             W11, #1
.text:00000000000E5BA0 CMN             W0, #1
.text:00000000000E5BA4 B.EQ            loc_E5BC4
.text:00000000000E5BA8
.text:00000000000E5BA8 loc_E5BA8
.text:00000000000E5BA8 LDR             W8, [SP,#0x70+var_54]
.text:00000000000E5BAC MOV             W13, #0xC9FF
.text:00000000000E5BB0 MOV             W12, #0x16
.text:00000000000E5BB4 MOVK            W13, #0x3B9A,LSL#16
.text:00000000000E5BB8 CMN             W8, #0x6E ; 'n'
.text:00000000000E5BBC B.NE            loc_E58E4
.text:00000000000E5BC0 B               loc_E5BE0
.text:00000000000E5BC4
.text:00000000000E5BC4 loc_E5BC4
.text:00000000000E5BC4 LDR             W8, [SP,#0x70+var_60]
.text:00000000000E5BC8 STR             W8, [X28]
.text:00000000000E5BCC B               loc_E5BA8
.text:00000000000E5BD0
.text:00000000000E5BD0 loc_E5BD0
.text:00000000000E5BD0 LDR             X8, [X24,#8]
.text:00000000000E5BD4 MOV             W21, WZR
.text:00000000000E5BD8 LDR             W8, [X8,#0x10]
.text:00000000000E5BDC STR             W8, [X19,#4]
.text:00000000000E5BE0
.text:00000000000E5BE0 loc_E5BE0
.text:00000000000E5BE0 MOV             W0, W21
.text:00000000000E5BE4 LDP             X29, X30, [SP,#0x70+var_s0]
.text:00000000000E5BE8 LDP             X20, X19, [SP,#0x70+var_10]
.text:00000000000E5BEC LDP             X22, X21, [SP,#0x70+var_20]
.text:00000000000E5BF0 LDP             X24, X23, [SP,#0x70+var_30]
.text:00000000000E5BF4 LDP             X26, X25, [SP,#0x70+var_40]
.text:00000000000E5BF8 LDP             X28, X27, [SP,#0x70+var_50]
.text:00000000000E5BFC ADD             SP, SP, #0x80
.text:00000000000E5C00 RET
.text:00000000000E5C04
.text:00000000000E5C04 loc_E5C04
.text:00000000000E5C04 MOV             W21, W12
.text:00000000000E5C08 B               loc_E5BE0
.text:00000000000E5C08 ; } // starts at E5878
.text:00000000000E5C08 ; End of function __pthread_rwlock_timedwrlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E5C08
.text:00000000000E5C0C ALIGN 0x10
.text:00000000000E5C10
.text:00000000000E5C10
.text:00000000000E5C10
.text:00000000000E5C10 EXPORT pthread_rwlock_timedwrlock
.text:00000000000E5C10 pthread_rwlock_timedwrlock
.text:00000000000E5C10 ; __unwind {
.text:00000000000E5C10 MOV             X2, X1
.text:00000000000E5C14 MOV             W1, #1
.text:00000000000E5C18 B               _ZL28__pthread_rwlock_timedwrlockP25pthread_rwlock_internal_tbPK8timespec ; __pthread_rwlock_timedwrlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E5C18 ; } // starts at E5C10
.text:00000000000E5C18 ; End of function pthread_rwlock_timedwrlock
.text:00000000000E5C18
.text:00000000000E5C1C ALIGN 0x20
.text:00000000000E5C20
.text:00000000000E5C20
.text:00000000000E5C20
.text:00000000000E5C20 EXPORT pthread_rwlock_timedwrlock_monotonic_np
.text:00000000000E5C20 pthread_rwlock_timedwrlock_monotonic_np
.text:00000000000E5C20 ; __unwind {
.text:00000000000E5C20 MOV             X2, X1
.text:00000000000E5C24 MOV             W1, WZR
.text:00000000000E5C28 B               _ZL28__pthread_rwlock_timedwrlockP25pthread_rwlock_internal_tbPK8timespec ; __pthread_rwlock_timedwrlock(pthread_rwlock_internal_t *,bool,timespec const*)
.text:00000000000E5C28 ; } // starts at E5C20
.text:00000000000E5C28 ; End of function pthread_rwlock_timedwrlock_monotonic_np
.text:00000000000E5C28
.text:00000000000E5C2C ALIGN 0x10
.text:00000000000E5C30
.text:00000000000E5C30
.text:00000000000E5C30
.text:00000000000E5C30 EXPORT pthread_rwlock_trywrlock
.text:00000000000E5C30 pthread_rwlock_trywrlock
.text:00000000000E5C30 ; __unwind {
.text:00000000000E5C30 LDR             W8, [X0]
.text:00000000000E5C34 B               loc_E5C40
.text:00000000000E5C38
.text:00000000000E5C38 loc_E5C38
.text:00000000000E5C38 MOV             W8, W9
.text:00000000000E5C3C CLREX
.text:00000000000E5C40
.text:00000000000E5C40 loc_E5C40
.text:00000000000E5C40 CMP             W8, #3
.text:00000000000E5C44 B.HI            loc_E5C7C
.text:00000000000E5C48 LDAXR           W9, [X0]
.text:00000000000E5C4C CMP             W9, W8
.text:00000000000E5C50 B.NE            loc_E5C38
.text:00000000000E5C54 ORR             W8, W8, #0x80000000
.text:00000000000E5C58 STXR            W10, W8, [X0]
.text:00000000000E5C5C MOV             W8, W9
.text:00000000000E5C60 CBNZ            W10, loc_E5C40
.text:00000000000E5C64 MRS             X8, #3, c13, c0, #2
.text:00000000000E5C68 LDR             X8, [X8,#8]
.text:00000000000E5C6C LDR             W9, [X8,#0x10]
.text:00000000000E5C70 STR             W9, [X0,#4]
.text:00000000000E5C74 MOV             W0, WZR
.text:00000000000E5C78 RET
.text:00000000000E5C7C
.text:00000000000E5C7C loc_E5C7C
.text:00000000000E5C7C MOV             W8, #0x10
.text:00000000000E5C80 MOV             W0, W8
.text:00000000000E5C84 RET
.text:00000000000E5C84 ; } // starts at E5C30
.text:00000000000E5C84 ; End of function pthread_rwlock_trywrlock
.text:00000000000E5C84
.text:00000000000E5C88
.text:00000000000E5C88
.text:00000000000E5C88 ; Attributes: bp-based frame
.text:00000000000E5C88
.text:00000000000E5C88 EXPORT pthread_rwlock_unlock
.text:00000000000E5C88 pthread_rwlock_unlock
.text:00000000000E5C88
.text:00000000000E5C88 var_50= -0x50
.text:00000000000E5C88 var_40= -0x40
.text:00000000000E5C88 var_30= -0x30
.text:00000000000E5C88 var_20= -0x20
.text:00000000000E5C88 var_10= -0x10
.text:00000000000E5C88 var_s0=  0
.text:00000000000E5C88
.text:00000000000E5C88 ; __unwind {
.text:00000000000E5C88 STR             X27, [SP,#-0x10+var_50]!
.text:00000000000E5C8C STP             X26, X25, [SP,#0x50+var_40]
.text:00000000000E5C90 STP             X24, X23, [SP,#0x50+var_30]
.text:00000000000E5C94 STP             X22, X21, [SP,#0x50+var_20]
.text:00000000000E5C98 STP             X20, X19, [SP,#0x50+var_10]
.text:00000000000E5C9C STP             X29, X30, [SP,#0x50+var_s0]
.text:00000000000E5CA0 ADD             X29, SP, #0x50
.text:00000000000E5CA4 LDR             W8, [X0]
.text:00000000000E5CA8 MOV             X19, X0
.text:00000000000E5CAC TBNZ            W8, #0x1F, loc_E5CE0
.text:00000000000E5CB0 CMP             W8, #4
.text:00000000000E5CB4 B.LT            loc_E5D30
.text:00000000000E5CB8
.text:00000000000E5CB8 loc_E5CB8
.text:00000000000E5CB8 LDXR            W8, [X19]
.text:00000000000E5CBC SUB             W9, W8, #4
.text:00000000000E5CC0 STLXR           W10, W9, [X19]
.text:00000000000E5CC4 CBNZ            W10, loc_E5CB8
.text:00000000000E5CC8 AND             W9, W8, #0xFFFFFFFC
.text:00000000000E5CCC AND             W8, W8, #3
.text:00000000000E5CD0 CMP             W9, #4
.text:00000000000E5CD4 CCMP            W8, #0, #4, EQ
.text:00000000000E5CD8 B.NE            loc_E5D14
.text:00000000000E5CDC B               loc_E5F38
.text:00000000000E5CE0
.text:00000000000E5CE0 loc_E5CE0
.text:00000000000E5CE0 MRS             X9, #3, c13, c0, #2
.text:00000000000E5CE4 LDR             W8, [X19,#4]
.text:00000000000E5CE8 LDR             X9, [X9,#8]
.text:00000000000E5CEC LDR             W9, [X9,#0x10]
.text:00000000000E5CF0 CMP             W8, W9
.text:00000000000E5CF4 B.NE            loc_E5D30
.text:00000000000E5CF8 STR             WZR, [X19,#4]
.text:00000000000E5CFC
.text:00000000000E5CFC loc_E5CFC
.text:00000000000E5CFC LDXR            W8, [X19]
.text:00000000000E5D00 AND             W9, W8, #0x7FFFFFFF
.text:00000000000E5D04 STLXR           W10, W9, [X19]
.text:00000000000E5D08 CBNZ            W10, loc_E5CFC
.text:00000000000E5D0C TST             W8, #3
.text:00000000000E5D10 B.EQ            loc_E5F38
.text:00000000000E5D14
.text:00000000000E5D14 loc_E5D14
.text:00000000000E5D14 ADD             X20, X19, #0xC
.text:00000000000E5D18 MOV             W8, #1
.text:00000000000E5D1C
.text:00000000000E5D1C loc_E5D1C
.text:00000000000E5D1C LDAXR           W9, [X20]
.text:00000000000E5D20 CBNZ            W9, loc_E5D38
.text:00000000000E5D24 STXR            W9, W8, [X20]
.text:00000000000E5D28 CBNZ            W9, loc_E5D1C
.text:00000000000E5D2C B               loc_E5DBC
.text:00000000000E5D30
.text:00000000000E5D30 loc_E5D30
.text:00000000000E5D30 MOV             W0, #1
.text:00000000000E5D34 B               loc_E5F88
.text:00000000000E5D38
.text:00000000000E5D38 loc_E5D38
.text:00000000000E5D38 MOV             W8, #2
.text:00000000000E5D3C CLREX
.text:00000000000E5D40
.text:00000000000E5D40 loc_E5D40
.text:00000000000E5D40 LDAXR           W9, [X20]
.text:00000000000E5D44 STXR            W10, W8, [X20]
.text:00000000000E5D48 CBNZ            W10, loc_E5D40
.text:00000000000E5D4C CBZ             W9, loc_E5DBC
.text:00000000000E5D50 BL              .__errno
.text:00000000000E5D54 MOV             X21, X0
.text:00000000000E5D58 MOV             W24, #9
.text:00000000000E5D5C MOV             W25, #0x89
.text:00000000000E5D60 MOV             W22, #0x62 ; 'b'
.text:00000000000E5D64 MOV             W26, #2
.text:00000000000E5D68 MOV             W23, #0xFFFFFFFF
.text:00000000000E5D6C B               loc_E5D78
.text:00000000000E5D70
.text:00000000000E5D70 loc_E5D70
.text:00000000000E5D70 STR             W27, [X21]
.text:00000000000E5D74 B               loc_E5DAC
.text:00000000000E5D78
.text:00000000000E5D78 loc_E5D78
.text:00000000000E5D78 LDRB            W8, [X19,#0x10]
.text:00000000000E5D7C MOV             X0, X22
.text:00000000000E5D80 LDR             W27, [X21]
.text:00000000000E5D84 MOV             X1, X20
.text:00000000000E5D88 MOV             W3, #2
.text:00000000000E5D8C MOV             X4, XZR
.text:00000000000E5D90 CMP             W8, #0
.text:00000000000E5D94 CSEL            W2, W25, W24, EQ
.text:00000000000E5D98 MOV             X5, XZR
.text:00000000000E5D9C MOV             W6, W23
.text:00000000000E5DA0 BL              .syscall
.text:00000000000E5DA4 CMN             W0, #1
.text:00000000000E5DA8 B.EQ            loc_E5D70
.text:00000000000E5DAC
.text:00000000000E5DAC loc_E5DAC
.text:00000000000E5DAC LDAXR           W8, [X20]
.text:00000000000E5DB0 STXR            W9, W26, [X20]
.text:00000000000E5DB4 CBNZ            W9, loc_E5DAC
.text:00000000000E5DB8 CBNZ            W8, loc_E5D78
.text:00000000000E5DBC
.text:00000000000E5DBC loc_E5DBC
.text:00000000000E5DBC LDR             W8, [X19,#0x18]
.text:00000000000E5DC0 CBZ             W8, loc_E5E34
.text:00000000000E5DC4 MOV             X21, X19
.text:00000000000E5DC8 LDR             W8, [X21,#0x20]!
.text:00000000000E5DCC ADD             W9, W8, #1
.text:00000000000E5DD0 LDURB           W8, [X21,#-0x10]
.text:00000000000E5DD4 STR             W9, [X21]
.text:00000000000E5DD8
.text:00000000000E5DD8 loc_E5DD8
.text:00000000000E5DD8 LDXR            W9, [X20]
.text:00000000000E5DDC STLXR           W10, WZR, [X20]
.text:00000000000E5DE0 CBNZ            W10, loc_E5DD8
.text:00000000000E5DE4 CMP             W9, #2
.text:00000000000E5DE8 B.NE            loc_E5EAC
.text:00000000000E5DEC CMP             W8, #0
.text:00000000000E5DF0 MOV             W8, #0x81
.text:00000000000E5DF4 CSINC           W23, W8, WZR, EQ
.text:00000000000E5DF8 BL              .__errno
.text:00000000000E5DFC MOV             X22, X0
.text:00000000000E5E00 LDR             W24, [X0]
.text:00000000000E5E04 MOV             W0, #0x62 ; 'b'
.text:00000000000E5E08 MOV             X1, X20
.text:00000000000E5E0C MOV             W2, W23
.text:00000000000E5E10 MOV             W3, #1
.text:00000000000E5E14 MOV             X4, XZR
.text:00000000000E5E18 MOV             X5, XZR
.text:00000000000E5E1C MOV             W6, WZR
.text:00000000000E5E20 BL              .syscall
.text:00000000000E5E24 CMN             W0, #1
.text:00000000000E5E28 B.NE            loc_E5EB4
.text:00000000000E5E2C STR             W24, [X22]
.text:00000000000E5E30 B               loc_E5EB4
.text:00000000000E5E34
.text:00000000000E5E34 loc_E5E34
.text:00000000000E5E34 LDR             W8, [X19,#0x14]
.text:00000000000E5E38 CBZ             W8, loc_E5ECC
.text:00000000000E5E3C MOV             X21, X19
.text:00000000000E5E40 LDR             W8, [X21,#0x1C]!
.text:00000000000E5E44 ADD             W9, W8, #1
.text:00000000000E5E48 LDURB           W8, [X21,#-0xC]
.text:00000000000E5E4C STR             W9, [X21]
.text:00000000000E5E50
.text:00000000000E5E50 loc_E5E50
.text:00000000000E5E50 LDXR            W9, [X20]
.text:00000000000E5E54 STLXR           W10, WZR, [X20]
.text:00000000000E5E58 CBNZ            W10, loc_E5E50
.text:00000000000E5E5C CMP             W9, #2
.text:00000000000E5E60 B.NE            loc_E5F40
.text:00000000000E5E64 CMP             W8, #0
.text:00000000000E5E68 MOV             W8, #0x81
.text:00000000000E5E6C CSINC           W23, W8, WZR, EQ
.text:00000000000E5E70 BL              .__errno
.text:00000000000E5E74 MOV             X22, X0
.text:00000000000E5E78 LDR             W24, [X0]
.text:00000000000E5E7C MOV             W0, #0x62 ; 'b'
.text:00000000000E5E80 MOV             X1, X20
.text:00000000000E5E84 MOV             W2, W23
.text:00000000000E5E88 MOV             W3, #1
.text:00000000000E5E8C MOV             X4, XZR
.text:00000000000E5E90 MOV             X5, XZR
.text:00000000000E5E94 MOV             W6, WZR
.text:00000000000E5E98 BL              .syscall
.text:00000000000E5E9C CMN             W0, #1
.text:00000000000E5EA0 B.NE            loc_E5F48
.text:00000000000E5EA4 STR             W24, [X22]
.text:00000000000E5EA8 B               loc_E5F48
.text:00000000000E5EAC
.text:00000000000E5EAC loc_E5EAC
.text:00000000000E5EAC BL              .__errno
.text:00000000000E5EB0 MOV             X22, X0
.text:00000000000E5EB4
.text:00000000000E5EB4 loc_E5EB4
.text:00000000000E5EB4 LDRB            W8, [X19,#8]
.text:00000000000E5EB8 MOV             W0, #0x62 ; 'b'
.text:00000000000E5EBC LDR             W19, [X22]
.text:00000000000E5EC0 MOV             X1, X21
.text:00000000000E5EC4 MOV             W3, #1
.text:00000000000E5EC8 B               loc_E5F5C
.text:00000000000E5ECC
.text:00000000000E5ECC loc_E5ECC
.text:00000000000E5ECC LDRB            W8, [X19,#0x10]
.text:00000000000E5ED0
.text:00000000000E5ED0 loc_E5ED0
.text:00000000000E5ED0 LDXR            W9, [X20]
.text:00000000000E5ED4 STLXR           W10, WZR, [X20]
.text:00000000000E5ED8 CBNZ            W10, loc_E5ED0
.text:00000000000E5EDC CMP             W9, #2
.text:00000000000E5EE0 B.NE            loc_E5F38
.text:00000000000E5EE4 CMP             W8, #0
.text:00000000000E5EE8 MOV             W8, #0x81
.text:00000000000E5EEC CSINC           W21, W8, WZR, EQ
.text:00000000000E5EF0 BL              .__errno
.text:00000000000E5EF4 MOV             X19, X0
.text:00000000000E5EF8 LDR             W22, [X0]
.text:00000000000E5EFC MOV             W0, #0x62 ; 'b'
.text:00000000000E5F00 MOV             X1, X20
.text:00000000000E5F04 MOV             W2, W21
.text:00000000000E5F08 MOV             W3, #1
.text:00000000000E5F0C MOV             X4, XZR
.text:00000000000E5F10 MOV             X5, XZR
.text:00000000000E5F14 MOV             W6, WZR
.text:00000000000E5F18 BL              .syscall
.text:00000000000E5F1C MOV             X8, X0
.text:00000000000E5F20 MOV             W0, WZR
.text:00000000000E5F24 CMN             W8, #1
.text:00000000000E5F28 B.NE            loc_E5F88
.text:00000000000E5F2C MOV             W0, WZR
.text:00000000000E5F30 STR             W22, [X19]
.text:00000000000E5F34 B               loc_E5F88
.text:00000000000E5F38
.text:00000000000E5F38 loc_E5F38
.text:00000000000E5F38 MOV             W0, WZR
.text:00000000000E5F3C B               loc_E5F88
.text:00000000000E5F40
.text:00000000000E5F40 loc_E5F40
.text:00000000000E5F40 BL              .__errno
.text:00000000000E5F44 MOV             X22, X0
.text:00000000000E5F48
.text:00000000000E5F48 loc_E5F48
.text:00000000000E5F48 LDRB            W8, [X19,#8]
.text:00000000000E5F4C MOV             W0, #0x62 ; 'b'
.text:00000000000E5F50 LDR             W19, [X22]
.text:00000000000E5F54 MOV             X1, X21
.text:00000000000E5F58 MOV             W3, #0x7FFFFFFF
.text:00000000000E5F5C
.text:00000000000E5F5C loc_E5F5C
.text:00000000000E5F5C CMP             W8, #0
.text:00000000000E5F60 MOV             W8, #0x81
.text:00000000000E5F64 CSINC           W2, W8, WZR, EQ
.text:00000000000E5F68 MOV             X4, XZR
.text:00000000000E5F6C MOV             X5, XZR
.text:00000000000E5F70 MOV             W6, WZR
.text:00000000000E5F74 BL              .syscall
.text:00000000000E5F78 MOV             X8, X0
.text:00000000000E5F7C MOV             W0, WZR
.text:00000000000E5F80 CMN             W8, #1
.text:00000000000E5F84 B.EQ            loc_E5FA4
.text:00000000000E5F88
.text:00000000000E5F88 loc_E5F88
.text:00000000000E5F88 LDP             X29, X30, [SP,#0x50+var_s0]
.text:00000000000E5F8C LDP             X20, X19, [SP,#0x50+var_10]
.text:00000000000E5F90 LDP             X22, X21, [SP,#0x50+var_20]
.text:00000000000E5F94 LDP             X24, X23, [SP,#0x50+var_30]
.text:00000000000E5F98 LDP             X26, X25, [SP,#0x50+var_40]
.text:00000000000E5F9C LDR             X27, [SP+0x50+var_50],#0x60
.text:00000000000E5FA0 RET
.text:00000000000E5FA4
.text:00000000000E5FA4 loc_E5FA4
.text:00000000000E5FA4 MOV             W0, WZR
.text:00000000000E5FA8 STR             W19, [X22]
.text:00000000000E5FAC B               loc_E5F88
.text:00000000000E5FAC ; } // starts at E5C88
.text:00000000000E5FAC ; End of function pthread_rwlock_unlock
.text:00000000000E5FAC
.text:00000000000E5FB0
.text:00000000000E5FB0
.text:00000000000E5FB0 ; Attributes: bp-based frame
.text:00000000000E5FB0
.text:00000000000E5FB0 EXPORT pthread_sigqueue
.text:00000000000E5FB0 pthread_sigqueue
.text:00000000000E5FB0
.text:00000000000E5FB0 var_B8= -0xB8
.text:00000000000E5FB0 var_B0= -0xB0
.text:00000000000E5FB0 var_A8= -0xA8
.text:00000000000E5FB0 var_A4= -0xA4
.text:00000000000E5FB0 var_A0= -0xA0
.text:00000000000E5FB0 var_38= -0x38
.text:00000000000E5FB0 var_30= -0x30
.text:00000000000E5FB0 var_20= -0x20
.text:00000000000E5FB0 var_10= -0x10
.text:00000000000E5FB0 var_s0=  0
.text:00000000000E5FB0
.text:00000000000E5FB0 ; __unwind {
.text:00000000000E5FB0 SUB             SP, SP, #0xD0
.text:00000000000E5FB4 STP             X24, X23, [SP,#0xC0+var_30]
.text:00000000000E5FB8 STP             X22, X21, [SP,#0xC0+var_20]
.text:00000000000E5FBC STP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E5FC0 STP             X29, X30, [SP,#0xC0+var_s0]
.text:00000000000E5FC4 ADD             X29, SP, #0xC0
.text:00000000000E5FC8 MRS             X23, #3, c13, c0, #2
.text:00000000000E5FCC MOV             X21, X2
.text:00000000000E5FD0 LDR             X8, [X23,#0x28]
.text:00000000000E5FD4 MOV             W20, W1
.text:00000000000E5FD8 MOV             X22, X0
.text:00000000000E5FDC STUR            X8, [X29,#var_38]
.text:00000000000E5FE0 BL              .__errno
.text:00000000000E5FE4 ADRP            X1, #aPthreadSigqueu_0@PAGE ; "pthread_sigqueue"
.text:00000000000E5FE8 LDR             W24, [X0]
.text:00000000000E5FEC MOV             X19, X0
.text:00000000000E5FF0 ADD             X1, X1, #aPthreadSigqueu_0@PAGEOFF ; "pthread_sigqueue"
.text:00000000000E5FF4 MOV             X0, X22 ; __int64
.text:00000000000E5FF8 BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E5FFC CMN             W0, #1
.text:00000000000E6000 B.EQ            loc_E604C
.text:00000000000E6004 MOV             W8, #0xFFFFFFFF
.text:00000000000E6008 MOV             W22, W0
.text:00000000000E600C STR             W8, [SP,#0xC0+var_B0]
.text:00000000000E6010 BL              .getpid
.text:00000000000E6014 STR             W0, [SP,#0xC0+var_A8]
.text:00000000000E6018 BL              .getuid
.text:00000000000E601C STR             X21, [SP,#0xC0+var_A0]
.text:00000000000E6020 STR             W0, [SP,#0xC0+var_A4]
.text:00000000000E6024 BL              .getpid
.text:00000000000E6028 MOV             W1, W0
.text:00000000000E602C ADD             X4, SP, #0xC0+var_B8
.text:00000000000E6030 MOV             W0, #0xF0
.text:00000000000E6034 MOV             W2, W22
.text:00000000000E6038 MOV             W3, W20
.text:00000000000E603C BL              .syscall
.text:00000000000E6040 CBZ             X0, loc_E6050
.text:00000000000E6044 LDR             W0, [X19]
.text:00000000000E6048 B               loc_E6050
.text:00000000000E604C
.text:00000000000E604C loc_E604C
.text:00000000000E604C MOV             W0, #3
.text:00000000000E6050
.text:00000000000E6050 loc_E6050
.text:00000000000E6050 STR             W24, [X19]
.text:00000000000E6054 LDR             X8, [X23,#0x28]
.text:00000000000E6058 LDUR            X9, [X29,#var_38]
.text:00000000000E605C CMP             X8, X9
.text:00000000000E6060 B.NE            loc_E607C
.text:00000000000E6064 LDP             X29, X30, [SP,#0xC0+var_s0]
.text:00000000000E6068 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E606C LDP             X22, X21, [SP,#0xC0+var_20]
.text:00000000000E6070 LDP             X24, X23, [SP,#0xC0+var_30]
.text:00000000000E6074 ADD             SP, SP, #0xD0
.text:00000000000E6078 RET
.text:00000000000E607C
.text:00000000000E607C loc_E607C
.text:00000000000E607C BL              .__stack_chk_fail
.text:00000000000E607C ; } // starts at E5FB0
.text:00000000000E607C ; End of function pthread_sigqueue
.text:00000000000E607C
.text:00000000000E6080
.text:00000000000E6080
.text:00000000000E6080
.text:00000000000E6080 EXPORT pthread_self
.text:00000000000E6080 pthread_self
.text:00000000000E6080 ; __unwind {
.text:00000000000E6080 MRS             X8, #3, c13, c0, #2
.text:00000000000E6084 LDR             X0, [X8,#8]
.text:00000000000E6088 RET
.text:00000000000E6088 ; } // starts at E6080
.text:00000000000E6088 ; End of function pthread_self
.text:00000000000E6088
.text:00000000000E608C ALIGN 0x10
.text:00000000000E6090
.text:00000000000E6090
.text:00000000000E6090 ; Attributes: bp-based frame
.text:00000000000E6090
.text:00000000000E6090 EXPORT pthread_getname_np
.text:00000000000E6090 pthread_getname_np
.text:00000000000E6090
.text:00000000000E6090 var_88= -0x88
.text:00000000000E6090 var_48= -0x48
.text:00000000000E6090 var_40= -0x40
.text:00000000000E6090 var_30= -0x30
.text:00000000000E6090 var_20= -0x20
.text:00000000000E6090 var_10= -0x10
.text:00000000000E6090 var_s0=  0
.text:00000000000E6090
.text:00000000000E6090 ; __unwind {
.text:00000000000E6090 SUB             SP, SP, #0xA0
.text:00000000000E6094 STR             X25, [SP,#0x90+var_40]
.text:00000000000E6098 STP             X24, X23, [SP,#0x90+var_30]
.text:00000000000E609C STP             X22, X21, [SP,#0x90+var_20]
.text:00000000000E60A0 STP             X20, X19, [SP,#0x90+var_10]
.text:00000000000E60A4 STP             X29, X30, [SP,#0x90+var_s0]
.text:00000000000E60A8 ADD             X29, SP, #0x90
.text:00000000000E60AC MRS             X24, #3, c13, c0, #2
.text:00000000000E60B0 MOV             X21, X2
.text:00000000000E60B4 LDR             X8, [X24,#0x28]
.text:00000000000E60B8 MOV             X20, X1
.text:00000000000E60BC MOV             X22, X0
.text:00000000000E60C0 STR             X8, [SP,#0x90+var_48]
.text:00000000000E60C4 BL              .__errno
.text:00000000000E60C8 LDR             W25, [X0]
.text:00000000000E60CC MOV             X19, X0
.text:00000000000E60D0 CMP             X21, #0x10
.text:00000000000E60D4 B.CS            loc_E60E0
.text:00000000000E60D8
.text:00000000000E60D8 loc_E60D8
.text:00000000000E60D8 MOV             W0, #0x22 ; '"'
.text:00000000000E60DC B               loc_E6164
.text:00000000000E60E0
.text:00000000000E60E0 loc_E60E0
.text:00000000000E60E0 BL              .pthread_self
.text:00000000000E60E4 CMP             X0, X22
.text:00000000000E60E8 B.NE            loc_E6100
.text:00000000000E60EC MOV             W0, #0x10
.text:00000000000E60F0 MOV             X1, X20
.text:00000000000E60F4 BL              .prctl
.text:00000000000E60F8 CBNZ            W0, loc_E6160
.text:00000000000E60FC B               loc_E6164
.text:00000000000E6100
.text:00000000000E6100 loc_E6100
.text:00000000000E6100 ADRP            X1, #aPthreadGetname_0@PAGE ; "pthread_getname_np"
.text:00000000000E6104 ADD             X1, X1, #aPthreadGetname_0@PAGEOFF ; "pthread_getname_np"
.text:00000000000E6108 MOV             X0, X22 ; __int64
.text:00000000000E610C BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E6110 MOV             W4, W0
.text:00000000000E6114 ADD             X0, SP, #0x90+var_88
.text:00000000000E6118 BL              _ZL8snprintfPcU17pass_object_size1mPKcz_17 ; snprintf(char *,ulong  {pass_object_size1},char const*,...)
.text:00000000000E611C ADD             X0, SP, #0x90+var_88
.text:00000000000E6120 MOV             W1, #0x80000
.text:00000000000E6124 BL              .__open_2
.text:00000000000E6128 CMN             W0, #1
.text:00000000000E612C B.EQ            loc_E6160
.text:00000000000E6130 MOV             W22, W0
.text:00000000000E6134
.text:00000000000E6134 loc_E6134
.text:00000000000E6134 MOV             W0, W22
.text:00000000000E6138 MOV             X1, X20
.text:00000000000E613C MOV             X2, X21
.text:00000000000E6140 BL              .read
.text:00000000000E6144 CMN             X0, #1
.text:00000000000E6148 B.NE            loc_E6194
.text:00000000000E614C LDR             W8, [X19]
.text:00000000000E6150 CMP             W8, #4
.text:00000000000E6154 B.EQ            loc_E6134
.text:00000000000E6158 MOV             W0, W22
.text:00000000000E615C BL              .close
.text:00000000000E6160
.text:00000000000E6160 loc_E6160
.text:00000000000E6160 LDR             W0, [X19]
.text:00000000000E6164
.text:00000000000E6164 loc_E6164
.text:00000000000E6164 STR             W25, [X19]
.text:00000000000E6168 LDR             X8, [X24,#0x28]
.text:00000000000E616C LDR             X9, [SP,#0x90+var_48]
.text:00000000000E6170 CMP             X8, X9
.text:00000000000E6174 B.NE            loc_E61D4
.text:00000000000E6178 LDP             X29, X30, [SP,#0x90+var_s0]
.text:00000000000E617C LDP             X20, X19, [SP,#0x90+var_10]
.text:00000000000E6180 LDP             X22, X21, [SP,#0x90+var_20]
.text:00000000000E6184 LDP             X24, X23, [SP,#0x90+var_30]
.text:00000000000E6188 LDR             X25, [SP,#0x90+var_40]
.text:00000000000E618C ADD             SP, SP, #0xA0
.text:00000000000E6190 RET
.text:00000000000E6194
.text:00000000000E6194 loc_E6194
.text:00000000000E6194 MOV             X23, X0
.text:00000000000E6198 MOV             W0, W22
.text:00000000000E619C BL              .close
.text:00000000000E61A0 SUBS            X8, X23, #1
.text:00000000000E61A4 B.LT            loc_E61C0
.text:00000000000E61A8 LDRB            W9, [X20,X8]
.text:00000000000E61AC CMP             W9, #0xA
.text:00000000000E61B0 B.NE            loc_E61C0
.text:00000000000E61B4 MOV             W0, WZR
.text:00000000000E61B8 STRB            WZR, [X20,X8]
.text:00000000000E61BC B               loc_E6164
.text:00000000000E61C0
.text:00000000000E61C0 loc_E61C0
.text:00000000000E61C0 CMP             X23, X21
.text:00000000000E61C4 B.EQ            loc_E60D8
.text:00000000000E61C8 MOV             W0, WZR
.text:00000000000E61CC STRB            WZR, [X20,X23]
.text:00000000000E61D0 B               loc_E6164
.text:00000000000E61D4
.text:00000000000E61D4 loc_E61D4
.text:00000000000E61D4 BL              .__stack_chk_fail
.text:00000000000E61D4 ; } // starts at E6090
.text:00000000000E61D4 ; End of function pthread_getname_np
.text:00000000000E61D4
.text:00000000000E61D8
.text:00000000000E61D8
.text:00000000000E61D8 ; Attributes: bp-based frame
.text:00000000000E61D8
.text:00000000000E61D8 EXPORT pthread_setname_np
.text:00000000000E61D8 pthread_setname_np
.text:00000000000E61D8
.text:00000000000E61D8 var_88= -0x88
.text:00000000000E61D8 var_48= -0x48
.text:00000000000E61D8 var_40= -0x40
.text:00000000000E61D8 var_30= -0x30
.text:00000000000E61D8 var_20= -0x20
.text:00000000000E61D8 var_10= -0x10
.text:00000000000E61D8 var_s0=  0
.text:00000000000E61D8
.text:00000000000E61D8 ; __unwind {
.text:00000000000E61D8 SUB             SP, SP, #0xA0
.text:00000000000E61DC STR             X25, [SP,#0x90+var_40]
.text:00000000000E61E0 STP             X24, X23, [SP,#0x90+var_30]
.text:00000000000E61E4 STP             X22, X21, [SP,#0x90+var_20]
.text:00000000000E61E8 STP             X20, X19, [SP,#0x90+var_10]
.text:00000000000E61EC STP             X29, X30, [SP,#0x90+var_s0]
.text:00000000000E61F0 ADD             X29, SP, #0x90
.text:00000000000E61F4 MRS             X24, #3, c13, c0, #2
.text:00000000000E61F8 MOV             X20, X1
.text:00000000000E61FC LDR             X8, [X24,#0x28]
.text:00000000000E6200 MOV             X22, X0
.text:00000000000E6204 STR             X8, [SP,#0x90+var_48]
.text:00000000000E6208 BL              .__errno
.text:00000000000E620C MOV             X19, X0
.text:00000000000E6210 LDR             W25, [X0]
.text:00000000000E6214 MOV             X0, X20
.text:00000000000E6218 BL              .strlen
.text:00000000000E621C CMP             X0, #0xF
.text:00000000000E6220 B.LS            loc_E622C
.text:00000000000E6224 MOV             W0, #0x22 ; '"'
.text:00000000000E6228 B               loc_E62B8
.text:00000000000E622C
.text:00000000000E622C loc_E622C
.text:00000000000E622C MOV             X21, X0
.text:00000000000E6230 BL              .pthread_self
.text:00000000000E6234 CMP             X0, X22
.text:00000000000E6238 B.NE            loc_E6250
.text:00000000000E623C MOV             W0, #0xF
.text:00000000000E6240 MOV             X1, X20
.text:00000000000E6244 BL              .prctl
.text:00000000000E6248 CBNZ            W0, loc_E62B4
.text:00000000000E624C B               loc_E62B8
.text:00000000000E6250
.text:00000000000E6250 loc_E6250
.text:00000000000E6250 ADRP            X1, #aPthreadSetname_0@PAGE ; "pthread_setname_np"
.text:00000000000E6254 ADD             X1, X1, #aPthreadSetname_0@PAGEOFF ; "pthread_setname_np"
.text:00000000000E6258 MOV             X0, X22 ; __int64
.text:00000000000E625C BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E6260 MOV             W4, W0
.text:00000000000E6264 ADD             X0, SP, #0x90+var_88
.text:00000000000E6268 BL              _ZL8snprintfPcU17pass_object_size1mPKcz_17 ; snprintf(char *,ulong  {pass_object_size1},char const*,...)
.text:00000000000E626C MOV             W1, #0x80001
.text:00000000000E6274 ADD             X0, SP, #0x90+var_88
.text:00000000000E6278 BL              .__open_2
.text:00000000000E627C CMN             W0, #1
.text:00000000000E6280 B.EQ            loc_E62B4
.text:00000000000E6284 MOV             W22, W0
.text:00000000000E6288
.text:00000000000E6288 loc_E6288
.text:00000000000E6288 MOV             W0, W22
.text:00000000000E628C MOV             X1, X20
.text:00000000000E6290 MOV             X2, X21
.text:00000000000E6294 BL              .write
.text:00000000000E6298 CMN             X0, #1
.text:00000000000E629C B.NE            loc_E62E8
.text:00000000000E62A0 LDR             W8, [X19]
.text:00000000000E62A4 CMP             W8, #4
.text:00000000000E62A8 B.EQ            loc_E6288
.text:00000000000E62AC MOV             W0, W22
.text:00000000000E62B0 BL              .close
.text:00000000000E62B4
.text:00000000000E62B4 loc_E62B4
.text:00000000000E62B4 LDR             W0, [X19]
.text:00000000000E62B8
.text:00000000000E62B8 loc_E62B8
.text:00000000000E62B8 STR             W25, [X19]
.text:00000000000E62BC LDR             X8, [X24,#0x28]
.text:00000000000E62C0 LDR             X9, [SP,#0x90+var_48]
.text:00000000000E62C4 CMP             X8, X9
.text:00000000000E62C8 B.NE            loc_E6304
.text:00000000000E62CC LDP             X29, X30, [SP,#0x90+var_s0]
.text:00000000000E62D0 LDP             X20, X19, [SP,#0x90+var_10]
.text:00000000000E62D4 LDP             X22, X21, [SP,#0x90+var_20]
.text:00000000000E62D8 LDP             X24, X23, [SP,#0x90+var_30]
.text:00000000000E62DC LDR             X25, [SP,#0x90+var_40]
.text:00000000000E62E0 ADD             SP, SP, #0xA0
.text:00000000000E62E4 RET
.text:00000000000E62E8
.text:00000000000E62E8 loc_E62E8
.text:00000000000E62E8 MOV             X23, X0
.text:00000000000E62EC MOV             W0, W22
.text:00000000000E62F0 BL              .close
.text:00000000000E62F4 CMP             X23, X21
.text:00000000000E62F8 MOV             W8, #5
.text:00000000000E62FC CSEL            W0, WZR, W8, EQ
.text:00000000000E6300 B               loc_E62B8
.text:00000000000E6304
.text:00000000000E6304 loc_E6304
.text:00000000000E6304 BL              .__stack_chk_fail
.text:00000000000E6304 ; } // starts at E61D8
.text:00000000000E6304 ; End of function pthread_setname_np
.text:00000000000E6304
.text:00000000000E6308
.text:00000000000E6308
.text:00000000000E6308 ; Attributes: bp-based frame
.text:00000000000E6308
.text:00000000000E6308 ; snprintf(char *, unsigned long  {pass_object_size1}, char const*, ...)
.text:00000000000E6308 _ZL8snprintfPcU17pass_object_size1mPKcz_17
.text:00000000000E6308
.text:00000000000E6308 var_108= -0x108
.text:00000000000E6308 var_100= -0x100
.text:00000000000E6308 var_E0= -0xE0
.text:00000000000E6308 var_C0= -0xC0
.text:00000000000E6308 var_A0= -0xA0
.text:00000000000E6308 var_80= -0x80
.text:00000000000E6308 var_70= -0x70
.text:00000000000E6308 var_60= -0x60
.text:00000000000E6308 var_38= -0x38
.text:00000000000E6308 var_28= -0x28
.text:00000000000E6308 var_10= -0x10
.text:00000000000E6308 var_s0=  0
.text:00000000000E6308
.text:00000000000E6308 ; __unwind {
.text:00000000000E6308 SUB             SP, SP, #0x120
.text:00000000000E630C STP             X28, X19, [SP,#0x110+var_10]
.text:00000000000E6310 STP             X29, X30, [SP,#0x110+var_s0]
.text:00000000000E6314 ADD             X29, SP, #0x110
.text:00000000000E6318 MRS             X19, #3, c13, c0, #2
.text:00000000000E631C STP             Q6, Q7, [SP,#0x110+var_A0]
.text:00000000000E6320 STP             Q4, Q5, [SP,#0x110+var_C0]
.text:00000000000E6324 MOV             X9, #0xFFFFFFFFFFFFFFE0
.text:00000000000E6328 STP             Q2, Q3, [SP,#0x110+var_E0]
.text:00000000000E632C ADD             X10, SP, #0x110+var_100
.text:00000000000E6330 STP             Q0, Q1, [SP,#0x110+var_100]
.text:00000000000E6334 MOVK            X9, #0xFF80,LSL#32
.text:00000000000E6338 STP             X6, X7, [X29,#var_70]
.text:00000000000E633C ADD             X10, X10, #0x80
.text:00000000000E6340 STP             X4, X5, [X29,#var_80]
.text:00000000000E6344 SUB             X11, X29, #-var_80
.text:00000000000E6348 LDR             X8, [X19,#0x28]
.text:00000000000E634C ADRP            X4, #aProcSelfTaskDC@PAGE ; "/proc/self/task/%d/comm"
.text:00000000000E6350 ADD             X4, X4, #aProcSelfTaskDC@PAGEOFF ; "/proc/self/task/%d/comm"
.text:00000000000E6354 SUB             X5, X29, #-var_60
.text:00000000000E6358 MOV             W1, #0x40 ; '@'
.text:00000000000E635C STR             X8, [SP,#0x110+var_108]
.text:00000000000E6360 ADD             X8, X11, #0x20 ; ' '
.text:00000000000E6364 ADD             X11, X29, #0x10
.text:00000000000E6368 STP             X10, X9, [X29,#var_28]
.text:00000000000E636C SUB             X9, X29, #-var_38
.text:00000000000E6370 MOV             W2, WZR
.text:00000000000E6374 STP             X11, X8, [X29,#var_38]
.text:00000000000E6378 MOV             W3, #0x40 ; '@'
.text:00000000000E637C LDP             Q1, Q0, [X9]
.text:00000000000E6380 STP             Q1, Q0, [X29,#var_60]
.text:00000000000E6384 BL              .__vsnprintf_chk
.text:00000000000E6388 LDR             X8, [X19,#0x28]
.text:00000000000E638C LDR             X9, [SP,#0x110+var_108]
.text:00000000000E6390 CMP             X8, X9
.text:00000000000E6394 B.NE            loc_E63A8
.text:00000000000E6398 LDP             X29, X30, [SP,#0x110+var_s0]
.text:00000000000E639C LDP             X28, X19, [SP,#0x110+var_10]
.text:00000000000E63A0 ADD             SP, SP, #0x120
.text:00000000000E63A4 RET
.text:00000000000E63A8
.text:00000000000E63A8 loc_E63A8
.text:00000000000E63A8 BL              .__stack_chk_fail
.text:00000000000E63A8 ; } // starts at E6308
.text:00000000000E63A8 ; End of function snprintf(char *,ulong  {pass_object_size1},char const*,...)
.text:00000000000E63A8
.text:00000000000E63AC ALIGN 0x10
.text:00000000000E63B0
.text:00000000000E63B0
.text:00000000000E63B0 ; Attributes: bp-based frame
.text:00000000000E63B0
.text:00000000000E63B0 WEAK pthread_setschedparam
.text:00000000000E63B0 pthread_setschedparam
.text:00000000000E63B0
.text:00000000000E63B0 var_30= -0x30
.text:00000000000E63B0 var_20= -0x20
.text:00000000000E63B0 var_10= -0x10
.text:00000000000E63B0 var_s0=  0
.text:00000000000E63B0
.text:00000000000E63B0 ; __unwind {
.text:00000000000E63B0 STR             X23, [SP,#-0x10+var_30]!
.text:00000000000E63B4 STP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E63B8 STP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E63BC STP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E63C0 ADD             X29, SP, #0x30
.text:00000000000E63C4 MOV             X20, X2
.text:00000000000E63C8 MOV             W21, W1
.text:00000000000E63CC MOV             X22, X0
.text:00000000000E63D0 BL              .__errno
.text:00000000000E63D4 ADRP            X1, #aPthreadSetsche_1@PAGE ; "pthread_setschedparam"
.text:00000000000E63D8 LDR             W23, [X0]
.text:00000000000E63DC MOV             X19, X0
.text:00000000000E63E0 ADD             X1, X1, #aPthreadSetsche_1@PAGEOFF ; "pthread_setschedparam"
.text:00000000000E63E4 MOV             X0, X22 ; __int64
.text:00000000000E63E8 BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E63EC CMN             W0, #1
.text:00000000000E63F0 B.EQ            loc_E6410
.text:00000000000E63F4 MOV             W1, W21
.text:00000000000E63F8 MOV             X2, X20
.text:00000000000E63FC BL              .sched_setscheduler
.text:00000000000E6400 CMN             W0, #1
.text:00000000000E6404 B.EQ            loc_E6418
.text:00000000000E6408 MOV             W0, WZR
.text:00000000000E640C B               loc_E641C
.text:00000000000E6410
.text:00000000000E6410 loc_E6410
.text:00000000000E6410 MOV             W0, #3
.text:00000000000E6414 B               loc_E641C
.text:00000000000E6418
.text:00000000000E6418 loc_E6418
.text:00000000000E6418 LDR             W0, [X19]
.text:00000000000E641C
.text:00000000000E641C loc_E641C
.text:00000000000E641C STR             W23, [X19]
.text:00000000000E6420 LDP             X29, X30, [SP,#0x30+var_s0]
.text:00000000000E6424 LDP             X20, X19, [SP,#0x30+var_10]
.text:00000000000E6428 LDP             X22, X21, [SP,#0x30+var_20]
.text:00000000000E642C LDR             X23, [SP+0x30+var_30],#0x40
.text:00000000000E6430 RET
.text:00000000000E6430 ; } // starts at E63B0
.text:00000000000E6430 ; End of function pthread_setschedparam
.text:00000000000E6430
.text:00000000000E6434 ALIGN 8
.text:00000000000E6438
.text:00000000000E6438
.text:00000000000E6438 ; Attributes: bp-based frame
.text:00000000000E6438
.text:00000000000E6438 WEAK pthread_setschedprio
.text:00000000000E6438 pthread_setschedprio
.text:00000000000E6438
.text:00000000000E6438 var_40= -0x40
.text:00000000000E6438 var_38= -0x38
.text:00000000000E6438 var_30= -0x30
.text:00000000000E6438 var_20= -0x20
.text:00000000000E6438 var_10= -0x10
.text:00000000000E6438 var_s0=  0
.text:00000000000E6438
.text:00000000000E6438 ; __unwind {
.text:00000000000E6438 SUB             SP, SP, #0x50
.text:00000000000E643C STR             X23, [SP,#0x40+var_30]
.text:00000000000E6440 STP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E6444 STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E6448 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E644C ADD             X29, SP, #0x40
.text:00000000000E6450 MRS             X22, #3, c13, c0, #2
.text:00000000000E6454 MOV             W20, W1
.text:00000000000E6458 LDR             X8, [X22,#0x28]
.text:00000000000E645C MOV             X21, X0
.text:00000000000E6460 STR             X8, [SP,#0x40+var_38]
.text:00000000000E6464 BL              .__errno
.text:00000000000E6468 ADRP            X1, #aPthreadSetsche_2@PAGE ; "pthread_setschedprio"
.text:00000000000E646C LDR             W23, [X0]
.text:00000000000E6470 MOV             X19, X0
.text:00000000000E6474 ADD             X1, X1, #aPthreadSetsche_2@PAGEOFF ; "pthread_setschedprio"
.text:00000000000E6478 MOV             X0, X21 ; __int64
.text:00000000000E647C BL              _Z25__pthread_internal_gettidlPKc ; __pthread_internal_gettid(long,char const*)
.text:00000000000E6480 CMN             W0, #1
.text:00000000000E6484 B.EQ            loc_E64A4
.text:00000000000E6488 MOV             X1, SP
.text:00000000000E648C STR             W20, [SP,#0x40+var_40]
.text:00000000000E6490 BL              .sched_setparam
.text:00000000000E6494 CMN             W0, #1
.text:00000000000E6498 B.EQ            loc_E64AC
.text:00000000000E649C MOV             W0, WZR
.text:00000000000E64A0 B               loc_E64B0
.text:00000000000E64A4
.text:00000000000E64A4 loc_E64A4
.text:00000000000E64A4 MOV             W0, #3
.text:00000000000E64A8 B               loc_E64B0
.text:00000000000E64AC
.text:00000000000E64AC loc_E64AC
.text:00000000000E64AC LDR             W0, [X19]
.text:00000000000E64B0
.text:00000000000E64B0 loc_E64B0
.text:00000000000E64B0 STR             W23, [X19]
.text:00000000000E64B4 LDR             X8, [X22,#0x28]
.text:00000000000E64B8 LDR             X9, [SP,#0x40+var_38]
.text:00000000000E64BC CMP             X8, X9
.text:00000000000E64C0 B.NE            loc_E64DC
.text:00000000000E64C4 LDP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E64C8 LDP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E64CC LDP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E64D0 LDR             X23, [SP,#0x40+var_30]
.text:00000000000E64D4 ADD             SP, SP, #0x50 ; 'P'
.text:00000000000E64D8 RET
.text:00000000000E64DC
.text:00000000000E64DC loc_E64DC
.text:00000000000E64DC BL              .__stack_chk_fail
.text:00000000000E64DC ; } // starts at E6438
.text:00000000000E64DC ; End of function pthread_setschedprio
.text:00000000000E64DC
.text:00000000000E64E0
.text:00000000000E64E0
.text:00000000000E64E0
.text:00000000000E64E0 EXPORT pthread_spin_init
.text:00000000000E64E0 pthread_spin_init
.text:00000000000E64E0 ; __unwind {
.text:00000000000E64E0 CMP             W1, #0
.text:00000000000E64E4 MOV             X8, X0
.text:00000000000E64E8 MOV             W0, WZR
.text:00000000000E64EC CSET            W9, NE
.text:00000000000E64F0 STR             WZR, [X8]
.text:00000000000E64F4 STRB            W9, [X8,#4]
.text:00000000000E64F8 RET
.text:00000000000E64F8 ; } // starts at E64E0
.text:00000000000E64F8 ; End of function pthread_spin_init
.text:00000000000E64F8
.text:00000000000E64FC ALIGN 0x20
.text:00000000000E6500
.text:00000000000E6500
.text:00000000000E6500
.text:00000000000E6500 EXPORT pthread_spin_destroy
.text:00000000000E6500 pthread_spin_destroy
.text:00000000000E6500 ; __unwind {
.text:00000000000E6500 LDAXR           W8, [X0]
.text:00000000000E6504 CBNZ            W8, loc_E6518
.text:00000000000E6508 MOV             W8, #1
.text:00000000000E650C STXR            W9, W8, [X0]
.text:00000000000E6510 CBNZ            W9, pthread_spin_destroy
.text:00000000000E6514 B               loc_E6520
.text:00000000000E6518
.text:00000000000E6518 loc_E6518
.text:00000000000E6518 MOV             W8, WZR
.text:00000000000E651C CLREX
.text:00000000000E6520
.text:00000000000E6520 loc_E6520
.text:00000000000E6520 CMP             W8, #0
.text:00000000000E6524 MOV             W8, #0x10
.text:00000000000E6528 CSEL            W0, WZR, W8, NE
.text:00000000000E652C RET
.text:00000000000E652C ; } // starts at E6500
.text:00000000000E652C ; End of function pthread_spin_destroy
.text:00000000000E652C
.text:00000000000E6530
.text:00000000000E6530
.text:00000000000E6530
.text:00000000000E6530 EXPORT pthread_spin_trylock
.text:00000000000E6530 pthread_spin_trylock
.text:00000000000E6530 ; __unwind {
.text:00000000000E6530 LDAXR           W8, [X0]
.text:00000000000E6534 CBNZ            W8, loc_E6548
.text:00000000000E6538 MOV             W8, #1
.text:00000000000E653C STXR            W9, W8, [X0]
.text:00000000000E6540 CBNZ            W9, pthread_spin_trylock
.text:00000000000E6544 B               loc_E6550
.text:00000000000E6548
.text:00000000000E6548 loc_E6548
.text:00000000000E6548 MOV             W8, WZR
.text:00000000000E654C CLREX
.text:00000000000E6550
.text:00000000000E6550 loc_E6550
.text:00000000000E6550 CMP             W8, #0
.text:00000000000E6554 MOV             W8, #0x10
.text:00000000000E6558 CSEL            W0, WZR, W8, NE
.text:00000000000E655C RET
.text:00000000000E655C ; } // starts at E6530
.text:00000000000E655C ; End of function pthread_spin_trylock
.text:00000000000E655C
.text:00000000000E6560
.text:00000000000E6560
.text:00000000000E6560 ; Attributes: bp-based frame
.text:00000000000E6560
.text:00000000000E6560 EXPORT pthread_spin_lock
.text:00000000000E6560 pthread_spin_lock
.text:00000000000E6560
.text:00000000000E6560 var_40= -0x40
.text:00000000000E6560 var_30= -0x30
.text:00000000000E6560 var_20= -0x20
.text:00000000000E6560 var_10= -0x10
.text:00000000000E6560 var_s0=  0
.text:00000000000E6560
.text:00000000000E6560 ; __unwind {
.text:00000000000E6560 STP             X26, X25, [SP,#-0x10+var_40]!
.text:00000000000E6564 STP             X24, X23, [SP,#0x40+var_30]
.text:00000000000E6568 STP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E656C STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E6570 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E6574 ADD             X29, SP, #0x40
.text:00000000000E6578 MOV             X19, X0
.text:00000000000E657C
.text:00000000000E657C loc_E657C
.text:00000000000E657C LDAXR           W8, [X19]
.text:00000000000E6580 CBNZ            W8, loc_E6594
.text:00000000000E6584 MOV             W9, #1
.text:00000000000E6588 STXR            W8, W9, [X19]
.text:00000000000E658C CBNZ            W8, loc_E657C
.text:00000000000E6590 B               loc_E659C
.text:00000000000E6594
.text:00000000000E6594 loc_E6594
.text:00000000000E6594 MOV             W9, WZR
.text:00000000000E6598 CLREX
.text:00000000000E659C
.text:00000000000E659C loc_E659C
.text:00000000000E659C MOV             W8, WZR
.text:00000000000E65A0 TBNZ            W9, #0, loc_E65E0
.text:00000000000E65A4
.text:00000000000E65A4 loc_E65A4
.text:00000000000E65A4 ADD             W8, W8, #1
.text:00000000000E65A8
.text:00000000000E65A8 loc_E65A8
.text:00000000000E65A8 LDAXR           W9, [X19]
.text:00000000000E65AC CBNZ            W9, loc_E65C0
.text:00000000000E65B0 MOV             W9, #1
.text:00000000000E65B4 STXR            W10, W9, [X19]
.text:00000000000E65B8 CBNZ            W10, loc_E65A8
.text:00000000000E65BC B               loc_E65C8
.text:00000000000E65C0
.text:00000000000E65C0 loc_E65C0
.text:00000000000E65C0 MOV             W9, WZR
.text:00000000000E65C4 CLREX
.text:00000000000E65C8
.text:00000000000E65C8 loc_E65C8
.text:00000000000E65C8 LSR             W10, W8, #4
.text:00000000000E65CC CMP             W10, #0x270
.text:00000000000E65D0 B.HI            loc_E65DC
.text:00000000000E65D4 TBZ             W9, #0, loc_E65A4
.text:00000000000E65D8 B               loc_E65E0
.text:00000000000E65DC
.text:00000000000E65DC loc_E65DC
.text:00000000000E65DC TBZ             W9, #0, loc_E65FC
.text:00000000000E65E0
.text:00000000000E65E0 loc_E65E0
.text:00000000000E65E0 LDP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E65E4 LDP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E65E8 LDP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E65EC LDP             X24, X23, [SP,#0x40+var_30]
.text:00000000000E65F0 MOV             W0, WZR
.text:00000000000E65F4 LDP             X26, X25, [SP+0x40+var_40],#0x50
.text:00000000000E65F8 RET
.text:00000000000E65FC
.text:00000000000E65FC loc_E65FC
.text:00000000000E65FC MOV             W8, #2
.text:00000000000E6600
.text:00000000000E6600 loc_E6600
.text:00000000000E6600 LDAXR           W9, [X19]
.text:00000000000E6604 STXR            W10, W8, [X19]
.text:00000000000E6608 CBNZ            W10, loc_E6600
.text:00000000000E660C CBZ             W9, loc_E65E0
.text:00000000000E6610 BL              .__errno
.text:00000000000E6614 MOV             X20, X0
.text:00000000000E6618 MOV             W23, #9
.text:00000000000E661C MOV             W24, #0x89
.text:00000000000E6620 MOV             W21, #0x62 ; 'b'
.text:00000000000E6624 MOV             W25, #2
.text:00000000000E6628 MOV             W22, #0xFFFFFFFF
.text:00000000000E662C B               loc_E6638
.text:00000000000E6630
.text:00000000000E6630 loc_E6630
.text:00000000000E6630 STR             W26, [X20]
.text:00000000000E6634 B               loc_E666C
.text:00000000000E6638
.text:00000000000E6638 loc_E6638
.text:00000000000E6638 LDRB            W8, [X19,#4]
.text:00000000000E663C MOV             X0, X21
.text:00000000000E6640 LDR             W26, [X20]
.text:00000000000E6644 MOV             X1, X19
.text:00000000000E6648 MOV             W3, #2
.text:00000000000E664C MOV             X4, XZR
.text:00000000000E6650 CMP             W8, #0
.text:00000000000E6654 CSEL            W2, W24, W23, EQ
.text:00000000000E6658 MOV             X5, XZR
.text:00000000000E665C MOV             W6, W22
.text:00000000000E6660 BL              .syscall
.text:00000000000E6664 CMN             W0, #1
.text:00000000000E6668 B.EQ            loc_E6630
.text:00000000000E666C
.text:00000000000E666C loc_E666C
.text:00000000000E666C LDAXR           W8, [X19]
.text:00000000000E6670 STXR            W9, W25, [X19]
.text:00000000000E6674 CBNZ            W9, loc_E666C
.text:00000000000E6678 CBNZ            W8, loc_E6638
.text:00000000000E667C B               loc_E65E0
.text:00000000000E667C ; } // starts at E6560
.text:00000000000E667C ; End of function pthread_spin_lock
.text:00000000000E667C
.text:00000000000E6680
.text:00000000000E6680
.text:00000000000E6680 ; Attributes: bp-based frame
.text:00000000000E6680
.text:00000000000E6680 EXPORT pthread_spin_unlock
.text:00000000000E6680 pthread_spin_unlock
.text:00000000000E6680
.text:00000000000E6680 var_20= -0x20
.text:00000000000E6680 var_10= -0x10
.text:00000000000E6680 var_s0=  0
.text:00000000000E6680
.text:00000000000E6680 ; __unwind {
.text:00000000000E6680 STP             X22, X21, [SP,#-0x10+var_20]!
.text:00000000000E6684 STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E6688 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E668C ADD             X29, SP, #0x20
.text:00000000000E6690 LDRB            W8, [X0,#4]
.text:00000000000E6694 MOV             X19, X0
.text:00000000000E6698
.text:00000000000E6698 loc_E6698
.text:00000000000E6698 LDXR            W9, [X19]
.text:00000000000E669C STLXR           W10, WZR, [X19]
.text:00000000000E66A0 CBNZ            W10, loc_E6698
.text:00000000000E66A4 CMP             W9, #2
.text:00000000000E66A8 B.NE            loc_E66EC
.text:00000000000E66AC CMP             W8, #0
.text:00000000000E66B0 MOV             W8, #0x81
.text:00000000000E66B4 CSINC           W21, W8, WZR, EQ
.text:00000000000E66B8 BL              .__errno
.text:00000000000E66BC MOV             X20, X0
.text:00000000000E66C0 LDR             W22, [X0]
.text:00000000000E66C4 MOV             W0, #0x62 ; 'b'
.text:00000000000E66C8 MOV             X1, X19
.text:00000000000E66CC MOV             W2, W21
.text:00000000000E66D0 MOV             W3, #1
.text:00000000000E66D4 MOV             X4, XZR
.text:00000000000E66D8 MOV             X5, XZR
.text:00000000000E66DC MOV             W6, WZR
.text:00000000000E66E0 BL              .syscall
.text:00000000000E66E4 CMN             W0, #1
.text:00000000000E66E8 B.EQ            loc_E6700
.text:00000000000E66EC
.text:00000000000E66EC loc_E66EC
.text:00000000000E66EC LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E66F0 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E66F4 MOV             W0, WZR
.text:00000000000E66F8 LDP             X22, X21, [SP+0x20+var_20],#0x30
.text:00000000000E66FC RET
.text:00000000000E6700
.text:00000000000E6700 loc_E6700
.text:00000000000E6700 STR             W22, [X20]
.text:00000000000E6704 B               loc_E66EC
.text:00000000000E6704 ; } // starts at E6680
.text:00000000000E6704 ; End of function pthread_spin_unlock
.text:00000000000E6704
.text:00000000000E6708
.text:00000000000E6708
.text:00000000000E6708 ; Attributes: bp-based frame
.text:00000000000E6708
.text:00000000000E6708 WEAK __cxa_thread_atexit_impl
.text:00000000000E6708 __cxa_thread_atexit_impl
.text:00000000000E6708
.text:00000000000E6708 var_20= -0x20
.text:00000000000E6708 var_10= -0x10
.text:00000000000E6708 var_s0=  0
.text:00000000000E6708
.text:00000000000E6708 ; __unwind {
.text:00000000000E6708 STR             X21, [SP,#-0x10+var_20]!
.text:00000000000E670C STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E6710 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E6714 ADD             X29, SP, #0x20
.text:00000000000E6718 MOV             X21, X0
.text:00000000000E671C MOV             W0, #0x20 ; ' ' ; unsigned __int64
.text:00000000000E6720 MOV             X19, X2
.text:00000000000E6724 MOV             X20, X1
.text:00000000000E6728 BL              _Znwm   ; operator new(ulong)
.text:00000000000E672C MOVI            V0.2D, #0
.text:00000000000E6730 MRS             X8, #3, c13, c0, #2
.text:00000000000E6734 ADRP            X10, #__loader_add_thread_local_dtor_ptr@PAGE
.text:00000000000E6738 STP             Q0, Q0, [X0]
.text:00000000000E673C STP             X21, X20, [X0]
.text:00000000000E6740 STR             X19, [X0,#0x10]
.text:00000000000E6744 LDR             X8, [X8,#8]
.text:00000000000E6748 LDR             X9, [X8,#0xA0]
.text:00000000000E674C LDR             X10, [X10,#__loader_add_thread_local_dtor_ptr@PAGEOFF]
.text:00000000000E6750 STR             X9, [X0,#0x18]
.text:00000000000E6754 STR             X0, [X8,#0xA0]
.text:00000000000E6758 CBZ             X10, loc_E6764
.text:00000000000E675C MOV             X0, X19
.text:00000000000E6760 BL              .__loader_add_thread_local_dtor
.text:00000000000E6764
.text:00000000000E6764 loc_E6764
.text:00000000000E6764 LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E6768 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E676C MOV             W0, WZR
.text:00000000000E6770 LDR             X21, [SP+0x20+var_20],#0x30
.text:00000000000E6774 RET
.text:00000000000E6774 ; } // starts at E6708
.text:00000000000E6774 ; End of function __cxa_thread_atexit_impl
.text:00000000000E6774
.text:00000000000E6778
.text:00000000000E6778
.text:00000000000E6778 ; Attributes: bp-based frame
.text:00000000000E6778
.text:00000000000E6778 __cxa_thread_finalize
.text:00000000000E6778
.text:00000000000E6778 var_20= -0x20
.text:00000000000E6778 var_10= -0x10
.text:00000000000E6778 var_s0=  0
.text:00000000000E6778
.text:00000000000E6778 ; __unwind {
.text:00000000000E6778 STR             X21, [SP,#-0x10+var_20]!
.text:00000000000E677C STP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E6780 STP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E6784 ADD             X29, SP, #0x20
.text:00000000000E6788 MRS             X8, #3, c13, c0, #2
.text:00000000000E678C LDR             X20, [X8,#8]
.text:00000000000E6790 LDR             X19, [X20,#0xA0]
.text:00000000000E6794 CBZ             X19, loc_E67CC
.text:00000000000E6798 ADRP            X21, #__loader_remove_thread_local_dtor_ptr@PAGE
.text:00000000000E679C LDR             X21, [X21,#__loader_remove_thread_local_dtor_ptr@PAGEOFF]
.text:00000000000E67A0
.text:00000000000E67A0 loc_E67A0
.text:00000000000E67A0 LDR             X8, [X19,#0x18]
.text:00000000000E67A4 STR             X8, [X20,#0xA0]
.text:00000000000E67A8 LDP             X8, X0, [X19]
.text:00000000000E67AC BLR             X8
.text:00000000000E67B0 CBZ             X21, loc_E67BC
.text:00000000000E67B4 LDR             X0, [X19,#0x10]
.text:00000000000E67B8 BL              .__loader_remove_thread_local_dtor
.text:00000000000E67BC
.text:00000000000E67BC loc_E67BC               ; void *
.text:00000000000E67BC MOV             X0, X19
.text:00000000000E67C0 BL              _ZdlPv  ; operator delete(void *)
.text:00000000000E67C4 LDR             X19, [X20,#0xA0]
.text:00000000000E67C8 CBNZ            X19, loc_E67A0
.text:00000000000E67CC
.text:00000000000E67CC loc_E67CC
.text:00000000000E67CC LDP             X29, X30, [SP,#0x20+var_s0]
.text:00000000000E67D0 LDP             X20, X19, [SP,#0x20+var_10]
.text:00000000000E67D4 LDR             X21, [SP+0x20+var_20],#0x30
.text:00000000000E67D8 RET
.text:00000000000E67D8 ; } // starts at E6778
.text:00000000000E67D8 ; End of function __cxa_thread_finalize
.text:00000000000E67D8
.text:00000000000E67DC ALIGN 0x20
.text:00000000000E67E0
.text:00000000000E67E0
.text:00000000000E67E0 ; Attributes: bp-based frame
.text:00000000000E67E0
.text:00000000000E67E0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.text:00000000000E67E0 EXPORT __cxa_atexit
.text:00000000000E67E0 __cxa_atexit
.text:00000000000E67E0
.text:00000000000E67E0 var_40= -0x40
.text:00000000000E67E0 var_30= -0x30
.text:00000000000E67E0 var_20= -0x20
.text:00000000000E67E0 var_10= -0x10
.text:00000000000E67E0 var_s0=  0
.text:00000000000E67E0
.text:00000000000E67E0 ; __unwind {
.text:00000000000E67E0 STR             X25, [SP,#-0x10+var_40]!
.text:00000000000E67E4 STP             X24, X23, [SP,#0x40+var_30]
.text:00000000000E67E8 STP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E67EC STP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E67F0 STP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E67F4 ADD             X29, SP, #0x40
.text:00000000000E67F8 MOV             X19, X2
.text:00000000000E67FC MOV             X20, X1
.text:00000000000E6800 MOV             X21, X0
.text:00000000000E6804 BL              .getpagesize
.text:00000000000E6808 CMP             W0, #0x28 ; '('
.text:00000000000E680C B.CS            loc_E6818
.text:00000000000E6810 MOV             W24, #0xFFFFFFFF
.text:00000000000E6814 B               loc_E6940
.text:00000000000E6818
.text:00000000000E6818 loc_E6818
.text:00000000000E6818 SXTW            X22, W0
.text:00000000000E681C ADRP            X0, #g_atexit_lock@PAGE
.text:00000000000E6820 ADD             X0, X0, #g_atexit_lock@PAGEOFF
.text:00000000000E6824 BL              .pthread_mutex_lock
.text:00000000000E6828 ADRP            X25, #__atexit@PAGE
.text:00000000000E682C LDR             X23, [X25,#__atexit@PAGEOFF]
.text:00000000000E6830 CBZ             X23, loc_E685C
.text:00000000000E6834 LDP             W8, W9, [X23,#8]
.text:00000000000E6838 ADD             W8, W8, #1
.text:00000000000E683C CMP             W8, W9
.text:00000000000E6840 B.GE            loc_E685C
.text:00000000000E6844 MOV             X0, X23
.text:00000000000E6848 MOV             X1, X22
.text:00000000000E684C MOV             W2, #3
.text:00000000000E6850 BL              .mprotect
.text:00000000000E6854 CBNZ            W0, loc_E6920
.text:00000000000E6858 B               loc_E68EC
.text:00000000000E685C
.text:00000000000E685C loc_E685C
.text:00000000000E685C MOV             W24, #0xFFFFFFFF
.text:00000000000E6860 MOV             W3, #0x22 ; '"'
.text:00000000000E6864 MOV             X0, XZR
.text:00000000000E6868 MOV             X1, X22
.text:00000000000E686C MOV             W2, #3
.text:00000000000E6870 MOV             W4, W24
.text:00000000000E6874 MOV             X5, XZR
.text:00000000000E6878 BL              .mmap64
.text:00000000000E687C CMN             X0, #1
.text:00000000000E6880 B.EQ            loc_E6934
.text:00000000000E6884 MOV             X23, X0
.text:00000000000E6888 ADRP            X4, #aAtexitHandlers@PAGE ; "atexit handlers"
.text:00000000000E688C MOV             W0, #0x4D41
.text:00000000000E6890 ADD             X4, X4, #aAtexitHandlers@PAGEOFF ; "atexit handlers"
.text:00000000000E6894 MOVK            W0, #0x5356,LSL#16
.text:00000000000E6898 MOV             W1, WZR
.text:00000000000E689C MOV             X2, X23
.text:00000000000E68A0 MOV             X3, X22
.text:00000000000E68A4 BL              .prctl
.text:00000000000E68A8 LDR             X8, [X25,#__atexit@PAGEOFF]
.text:00000000000E68AC CBZ             X8, loc_E68B8
.text:00000000000E68B0 STR             WZR, [X23,#8]
.text:00000000000E68B4 B               loc_E68CC
.text:00000000000E68B8
.text:00000000000E68B8 loc_E68B8
.text:00000000000E68B8 LDR             X8, [X25,#__atexit@PAGEOFF]
.text:00000000000E68BC MOV             W9, #1
.text:00000000000E68C0 STP             XZR, XZR, [X23,#0x10]
.text:00000000000E68C4 STR             XZR, [X23,#0x20]
.text:00000000000E68C8 STR             W9, [X23,#8]
.text:00000000000E68CC
.text:00000000000E68CC loc_E68CC
.text:00000000000E68CC MOV             X10, #0xAAAAAAAAAAAAAAAA
.text:00000000000E68D0 STR             X8, [X23]
.text:00000000000E68D4 SUB             X9, X22, #0x10
.text:00000000000E68D8 MOVK            X10, #0xAAAB
.text:00000000000E68DC UMULH           X9, X9, X10
.text:00000000000E68E0 LSR             X9, X9, #4
.text:00000000000E68E4 STR             W9, [X23,#0xC]
.text:00000000000E68E8 STR             X23, [X25,#__atexit@PAGEOFF]
.text:00000000000E68EC
.text:00000000000E68EC loc_E68EC
.text:00000000000E68EC LDRSW           X8, [X23,#8]
.text:00000000000E68F0 MOV             W9, #0x18
.text:00000000000E68F4 MOV             X0, X23
.text:00000000000E68F8 MOV             X1, X22
.text:00000000000E68FC MOV             W2, #1
.text:00000000000E6900 ADD             W10, W8, #1
.text:00000000000E6904 MADD            X8, X8, X9, X23
.text:00000000000E6908 STR             W10, [X23,#8]
.text:00000000000E690C STP             X21, X20, [X8,#0x10]
.text:00000000000E6910 STR             X19, [X8,#0x20]
.text:00000000000E6914 MOV             W19, #1
.text:00000000000E6918 BL              .mprotect
.text:00000000000E691C CBZ             W0, loc_E6928
.text:00000000000E6920
.text:00000000000E6920 loc_E6920
.text:00000000000E6920 MOV             W24, #0xFFFFFFFF
.text:00000000000E6924 B               loc_E6934
.text:00000000000E6928
.text:00000000000E6928 loc_E6928
.text:00000000000E6928 ADRP            X8, #restartloop@PAGE
.text:00000000000E692C MOV             W24, WZR
.text:00000000000E6930 STRB            W19, [X8,#restartloop@PAGEOFF]
.text:00000000000E6934
.text:00000000000E6934 loc_E6934
.text:00000000000E6934 ADRP            X0, #g_atexit_lock@PAGE
.text:00000000000E6938 ADD             X0, X0, #g_atexit_lock@PAGEOFF ; pthread_mutex_t *
.text:00000000000E693C BL              .pthread_mutex_unlock
.text:00000000000E6940
.text:00000000000E6940 loc_E6940
.text:00000000000E6940 MOV             W0, W24
.text:00000000000E6944 LDP             X29, X30, [SP,#0x40+var_s0]
.text:00000000000E6948 LDP             X20, X19, [SP,#0x40+var_10]
.text:00000000000E694C LDP             X22, X21, [SP,#0x40+var_20]
.text:00000000000E6950 LDP             X24, X23, [SP,#0x40+var_30]
.text:00000000000E6954 LDR             X25, [SP+0x40+var_40],#0x50
.text:00000000000E6958 RET
.text:00000000000E6958 ; } // starts at E67E0
.text:00000000000E6958 ; End of function __cxa_atexit
.text:00000000000E6958
.text:00000000000E695C ALIGN 0x20
.text:00000000000E6960
.text:00000000000E6960
.text:00000000000E6960 ; Attributes: bp-based frame
.text:00000000000E6960
.text:00000000000E6960 ; int __fastcall _cxa_finalize(void *)
.text:00000000000E6960 EXPORT __cxa_finalize
.text:00000000000E6960 __cxa_finalize
.text:00000000000E6960
.text:00000000000E6960 var_58= -0x58
.text:00000000000E6960 var_50= -0x50
.text:00000000000E6960 var_40= -0x40
.text:00000000000E6960 var_30= -0x30
.text:00000000000E6960 var_20= -0x20
.text:00000000000E6960 var_10= -0x10
.text:00000000000E6960 var_s0=  0
.text:00000000000E6960
.text:00000000000E6960 ; __unwind {
.text:00000000000E6960 SUB             SP, SP, #0x70
.text:00000000000E6964 STP             X28, X27, [SP,#0x60+var_50]
.text:00000000000E6968 STP             X26, X25, [SP,#0x60+var_40]
.text:00000000000E696C STP             X24, X23, [SP,#0x60+var_30]
.text:00000000000E6970 STP             X22, X21, [SP,#0x60+var_20]
.text:00000000000E6974 STP             X20, X19, [SP,#0x60+var_10]
.text:00000000000E6978 STP             X29, X30, [SP,#0x60+var_s0]
.text:00000000000E697C ADD             X29, SP, #0x60
.text:00000000000E6980 MOV             X19, X0
.text:00000000000E6984 BL              .getpagesize
.text:00000000000E6988 STR             X0, [SP,#0x60+var_58]
.text:00000000000E698C ADRP            X0, #g_atexit_lock@PAGE
.text:00000000000E6990 ADD             X0, X0, #g_atexit_lock@PAGEOFF
.text:00000000000E6994 BL              .pthread_mutex_lock
.text:00000000000E6998 ADRP            X10, #__cxa_finalize.call_depth@PAGE
.text:00000000000E699C ADRP            X9, #__atexit@PAGE
.text:00000000000E69A0 ADRP            X27, #restartloop@PAGE
.text:00000000000E69A4 LDR             W8, [X10,#__cxa_finalize.call_depth@PAGEOFF]
.text:00000000000E69A8 LDR             X21, [X9,#__atexit@PAGEOFF]
.text:00000000000E69AC STRB            WZR, [X27,#restartloop@PAGEOFF]
.text:00000000000E69B0 ADD             W8, W8, #1
.text:00000000000E69B4 STR             W8, [X10,#__cxa_finalize.call_depth@PAGEOFF]
.text:00000000000E69B8 CBZ             X21, loc_E6A74
.text:00000000000E69BC LDR             X8, [SP,#0x60+var_58]
.text:00000000000E69C0 ADRP            X23, #g_atexit_lock@PAGE
.text:00000000000E69C4 MOV             W28, #0x18
.text:00000000000E69C8 ADD             X23, X23, #g_atexit_lock@PAGEOFF
.text:00000000000E69CC SXTW            X22, W8
.text:00000000000E69D0
.text:00000000000E69D0 loc_E69D0
.text:00000000000E69D0 LDRSW           X20, [X21,#8]
.text:00000000000E69D4 CMP             W20, #1
.text:00000000000E69D8 B.LT            loc_E6A58
.text:00000000000E69DC MADD            X8, X20, X28, X21
.text:00000000000E69E0 SUB             X26, X8, #8
.text:00000000000E69E4
.text:00000000000E69E4 loc_E69E4
.text:00000000000E69E4 LDR             X25, [X26]
.text:00000000000E69E8 CBZ             X25, loc_E6A48
.text:00000000000E69EC CBZ             X19, loc_E69FC
.text:00000000000E69F0 LDR             X8, [X26,#0x10]
.text:00000000000E69F4 CMP             X8, X19
.text:00000000000E69F8 B.NE            loc_E6A48
.text:00000000000E69FC
.text:00000000000E69FC loc_E69FC
.text:00000000000E69FC LDR             X24, [X26,#8]
.text:00000000000E6A00 MOV             X0, X21
.text:00000000000E6A04 MOV             X1, X22
.text:00000000000E6A08 MOV             W2, #3
.text:00000000000E6A0C BL              .mprotect
.text:00000000000E6A10 CBNZ            W0, loc_E6A28
.text:00000000000E6A14 MOV             X0, X21
.text:00000000000E6A18 STR             XZR, [X26]
.text:00000000000E6A1C MOV             X1, X22
.text:00000000000E6A20 MOV             W2, #1
.text:00000000000E6A24 BL              .mprotect
.text:00000000000E6A28
.text:00000000000E6A28 loc_E6A28               ; pthread_mutex_t *
.text:00000000000E6A28 MOV             X0, X23
.text:00000000000E6A2C BL              .pthread_mutex_unlock
.text:00000000000E6A30 MOV             X0, X24
.text:00000000000E6A34 BLR             X25
.text:00000000000E6A38 MOV             X0, X23
.text:00000000000E6A3C BL              .pthread_mutex_lock
.text:00000000000E6A40 LDRB            W8, [X27,#restartloop@PAGEOFF]
.text:00000000000E6A44 TBNZ            W8, #0, loc_E6A64
.text:00000000000E6A48
.text:00000000000E6A48 loc_E6A48
.text:00000000000E6A48 SUB             X20, X20, #1
.text:00000000000E6A4C SUB             X26, X26, #0x18
.text:00000000000E6A50 CMP             X20, #0
.text:00000000000E6A54 B.GT            loc_E69E4
.text:00000000000E6A58
.text:00000000000E6A58 loc_E6A58
.text:00000000000E6A58 LDR             X21, [X21]
.text:00000000000E6A5C CBNZ            X21, loc_E69D0
.text:00000000000E6A60 B               loc_E6A74
.text:00000000000E6A64
.text:00000000000E6A64 loc_E6A64
.text:00000000000E6A64 ADRP            X8, #__atexit@PAGE
.text:00000000000E6A68 STRB            WZR, [X27,#restartloop@PAGEOFF]
.text:00000000000E6A6C LDR             X21, [X8,#__atexit@PAGEOFF]
.text:00000000000E6A70 CBNZ            X21, loc_E69D0
.text:00000000000E6A74
.text:00000000000E6A74 loc_E6A74
.text:00000000000E6A74 ADRP            X8, #__cxa_finalize.call_depth@PAGE
.text:00000000000E6A78 MOV             X9, X8
.text:00000000000E6A7C LDR             W8, [X8,#__cxa_finalize.call_depth@PAGEOFF]
.text:00000000000E6A80 SUB             W8, W8, #1
.text:00000000000E6A84 STR             W8, [X9,#(__cxa_finalize.call_depth - 0xF4000)]
.text:00000000000E6A88 CBNZ            X19, loc_E6AC0
.text:00000000000E6A8C CBNZ            W8, loc_E6AC0
.text:00000000000E6A90 ADRP            X8, #__atexit@PAGE
.text:00000000000E6A94 LDR             X0, [X8,#__atexit@PAGEOFF]
.text:00000000000E6A98 CBZ             X0, loc_E6AB8
.text:00000000000E6A9C LDR             X8, [SP,#0x60+var_58]
.text:00000000000E6AA0 SXTW            X20, W8
.text:00000000000E6AA4
.text:00000000000E6AA4 loc_E6AA4
.text:00000000000E6AA4 LDR             X21, [X0]
.text:00000000000E6AA8 MOV             X1, X20
.text:00000000000E6AAC BL              .munmap
.text:00000000000E6AB0 MOV             X0, X21
.text:00000000000E6AB4 CBNZ            X21, loc_E6AA4
.text:00000000000E6AB8
.text:00000000000E6AB8 loc_E6AB8
.text:00000000000E6AB8 ADRP            X8, #__atexit@PAGE
.text:00000000000E6ABC STR             XZR, [X8,#__atexit@PAGEOFF]
.text:00000000000E6AC0
.text:00000000000E6AC0 loc_E6AC0
.text:00000000000E6AC0 ADRP            X0, #g_atexit_lock@PAGE
.text:00000000000E6AC4 ADD             X0, X0, #g_atexit_lock@PAGEOFF ; pthread_mutex_t *
.text:00000000000E6AC8 BL              .pthread_mutex_unlock
.text:00000000000E6ACC CBZ             X19, loc_E6AF4
.text:00000000000E6AD0 MOV             X0, X19
.text:00000000000E6AD4 LDP             X29, X30, [SP,#0x60+var_s0]
.text:00000000000E6AD8 LDP             X20, X19, [SP,#0x60+var_10]
.text:00000000000E6ADC LDP             X22, X21, [SP,#0x60+var_20]
.text:00000000000E6AE0 LDP             X24, X23, [SP,#0x60+var_30]
.text:00000000000E6AE4 LDP             X26, X25, [SP,#0x60+var_40]
.text:00000000000E6AE8 LDP             X28, X27, [SP,#0x60+var_50]
.text:00000000000E6AEC ADD             SP, SP, #0x70 ; 'p'
.text:00000000000E6AF0 B               __unregister_atfork
.text:00000000000E6AF4
.text:00000000000E6AF4 loc_E6AF4
.text:00000000000E6AF4 LDP             X29, X30, [SP,#0x60+var_s0]
.text:00000000000E6AF8 LDP             X20, X19, [SP,#0x60+var_10]
.text:00000000000E6AFC LDP             X22, X21, [SP,#0x60+var_20]
.text:00000000000E6B00 LDP             X24, X23, [SP,#0x60+var_30]
.text:00000000000E6B04 LDP             X26, X25, [SP,#0x60+var_40]
.text:00000000000E6B08 LDP             X28, X27, [SP,#0x60+var_50]
.text:00000000000E6B0C ADD             SP, SP, #0x70 ; 'p'
.text:00000000000E6B10 B               __libc_stdio_cleanup
.text:00000000000E6B10 ; } // starts at E6960
.text:00000000000E6B10 ; End of function __cxa_finalize
.text:00000000000E6B10
.text:00000000000E6B14 ALIGN 8
.text:00000000000E6B18
.text:00000000000E6B18
.text:00000000000E6B18 ; Attributes: bp-based frame
.text:00000000000E6B18
.text:00000000000E6B18 WEAK fork
.text:00000000000E6B18 fork
.text:00000000000E6B18
.text:00000000000E6B18 var_10= -0x10
.text:00000000000E6B18 var_s0=  0
.text:00000000000E6B18
.text:00000000000E6B18 ; __unwind {
.text:00000000000E6B18 STP             X20, X19, [SP,#-0x10+var_10]!
.text:00000000000E6B1C STP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E6B20 ADD             X29, SP, #0x10
.text:00000000000E6B24 BL              _Z27__bionic_atfork_run_preparev ; __bionic_atfork_run_prepare(void)
.text:00000000000E6B28 MRS             X8, #3, c13, c0, #2
.text:00000000000E6B2C LDR             X20, [X8,#8]
.text:00000000000E6B30 MOV             W2, #0x1200011
.text:00000000000E6B38 MOV             X0, XZR
.text:00000000000E6B3C ADD             X6, X20, #0x10
.text:00000000000E6B40 MOV             X1, XZR
.text:00000000000E6B44 MOV             X3, XZR
.text:00000000000E6B48 MOV             X4, XZR
.text:00000000000E6B4C MOV             X5, XZR
.text:00000000000E6B50 BL              .clone
.text:00000000000E6B54 MOV             W19, W0
.text:00000000000E6B58 CBZ             W0, loc_E6B64
.text:00000000000E6B5C BL              _Z26__bionic_atfork_run_parentv ; __bionic_atfork_run_parent(void)
.text:00000000000E6B60 B               loc_E6B78
.text:00000000000E6B64
.text:00000000000E6B64 loc_E6B64
.text:00000000000E6B64 BL              .gettid
.text:00000000000E6B68 STR             W0, [X20,#0x14]
.text:00000000000E6B6C MOV             W0, WZR
.text:00000000000E6B70 BL              .android_fdsan_set_error_level
.text:00000000000E6B74 BL              _Z25__bionic_atfork_run_childv ; __bionic_atfork_run_child(void)
.text:00000000000E6B78
.text:00000000000E6B78 loc_E6B78
.text:00000000000E6B78 LDP             X29, X30, [SP,#0x10+var_s0]
.text:00000000000E6B7C MOV             W0, W19
.text:00000000000E6B80 LDP             X20, X19, [SP+0x10+var_10],#0x20
.text:00000000000E6B84 RET
.text:00000000000E6B84 ; } // starts at E6B18
.text:00000000000E6B84 ; End of function fork
.text:00000000000E6B84
.text:00000000000E6B88
.text:00000000000E6B88
.text:00000000000E6B88 ; Attributes: bp-based frame
.text:00000000000E6B88
.text:00000000000E6B88 android_get_exported_namespace
.text:00000000000E6B88
.text:00000000000E6B88 var_s0=  0
.text:00000000000E6B88
.text:00000000000E6B88 ; __unwind {
.text:00000000000E6B88 STP             X29, X30, [SP,#-0x10+var_s0]!
.text:00000000000E6B8C MOV             X29, SP
.text:00000000000E6B90 BL              .__loader_android_get_exported_namespace
.text:00000000000E6B94 LDP             X29, X30, [SP+var_s0],#0x10
.text:00000000000E6B98 RET
.text:00000000000E6B98 ; } // starts at E6B88
.text:00000000000E6B98 ; End of function android_get_exported_namespace
.text:00000000000E6B98
.text:00000000000E6B9C
.text:00000000000E6B9C
.text:00000000000E6B9C
.text:00000000000E6B9C __getf2
.text:00000000000E6B9C
.text:00000000000E6B9C var_20= -0x20
.text:00000000000E6B9C var_10= -0x10
.text:00000000000E6B9C
.text:00000000000E6B9C ; __unwind {
.text:00000000000E6B9C STP             Q1, Q0, [SP,#var_20]!
.text:00000000000E6BA0 LDP             X9, X8, [SP,#0x20+var_10]
.text:00000000000E6BA4 MOV             X13, #0x7FFF000000000000
.text:00000000000E6BA8 MOV             W0, #0xFFFFFFFF
.text:00000000000E6BAC AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6BB0 CMP             X9, #0
.text:00000000000E6BB4 CSET            W10, NE
.text:00000000000E6BB8 CMP             X12, X13
.text:00000000000E6BBC CSET            W11, HI
.text:00000000000E6BC0 CSEL            W10, W10, W11, EQ
.text:00000000000E6BC4 TBNZ            W10, #0, loc_E6C68
.text:00000000000E6BC8 LDP             X11, X10, [SP,#0x20+var_20]
.text:00000000000E6BCC AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6BD0 CMP             X11, #0
.text:00000000000E6BD4 CSET            W15, NE
.text:00000000000E6BD8 CMP             X14, X13
.text:00000000000E6BDC CSET            W13, HI
.text:00000000000E6BE0 CSEL            W13, W15, W13, EQ
.text:00000000000E6BE4 TBNZ            W13, #0, loc_E6C68
.text:00000000000E6BE8 ORR             X13, X11, X9
.text:00000000000E6BEC ORR             X12, X14, X12
.text:00000000000E6BF0 ORR             X12, X13, X12
.text:00000000000E6BF4 CBZ             X12, loc_E6C24
.text:00000000000E6BF8 TST             X10, X8
.text:00000000000E6BFC B.LT            loc_E6C30
.text:00000000000E6C00 CMP             X9, X11
.text:00000000000E6C04 CSET            W12, CC
.text:00000000000E6C08 CMP             X8, X10
.text:00000000000E6C0C CSET            W13, LT
.text:00000000000E6C10 CSEL            W12, W12, W13, EQ
.text:00000000000E6C14 TBZ             W12, #0, loc_E6C54
.text:00000000000E6C18 MOV             W0, #0xFFFFFFFF
.text:00000000000E6C1C ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6C20 RET
.text:00000000000E6C24
.text:00000000000E6C24 loc_E6C24
.text:00000000000E6C24 MOV             W0, WZR
.text:00000000000E6C28 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6C2C RET
.text:00000000000E6C30
.text:00000000000E6C30 loc_E6C30
.text:00000000000E6C30 CMP             X9, X11
.text:00000000000E6C34 CSET            W12, HI
.text:00000000000E6C38 CMP             X8, X10
.text:00000000000E6C3C CSET            W13, GT
.text:00000000000E6C40 CSEL            W12, W12, W13, EQ
.text:00000000000E6C44 TBZ             W12, #0, loc_E6C54
.text:00000000000E6C48 MOV             W0, #0xFFFFFFFF
.text:00000000000E6C4C ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6C50 RET
.text:00000000000E6C54
.text:00000000000E6C54 loc_E6C54
.text:00000000000E6C54 EOR             X9, X9, X11
.text:00000000000E6C58 EOR             X8, X8, X10
.text:00000000000E6C5C ORR             X8, X9, X8
.text:00000000000E6C60 CMP             X8, #0
.text:00000000000E6C64 CSET            W0, NE
.text:00000000000E6C68
.text:00000000000E6C68 loc_E6C68
.text:00000000000E6C68 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6C6C RET
.text:00000000000E6C6C ; } // starts at E6B9C
.text:00000000000E6C6C ; End of function __getf2
.text:00000000000E6C6C
.text:00000000000E6C70
.text:00000000000E6C70
.text:00000000000E6C70
.text:00000000000E6C70 __unordtf2
.text:00000000000E6C70
.text:00000000000E6C70 var_20= -0x20
.text:00000000000E6C70 var_10= -0x10
.text:00000000000E6C70
.text:00000000000E6C70 ; __unwind {
.text:00000000000E6C70 STP             Q1, Q0, [SP,#var_20]!
.text:00000000000E6C74 LDP             X10, X9, [SP,#0x20+var_10]
.text:00000000000E6C78 MOV             X8, #0x7FFF000000000000
.text:00000000000E6C7C LDP             X12, X11, [SP+0x20+var_20],#0x20
.text:00000000000E6C80 AND             X9, X9, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6C84 CMP             X10, #0
.text:00000000000E6C88 AND             X10, X11, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6C8C CSET            W11, NE
.text:00000000000E6C90 CMP             X9, X8
.text:00000000000E6C94 CSET            W9, HI
.text:00000000000E6C98 CSEL            W9, W11, W9, EQ
.text:00000000000E6C9C CMP             X12, #0
.text:00000000000E6CA0 CSET            W11, NE
.text:00000000000E6CA4 CMP             X10, X8
.text:00000000000E6CA8 CSET            W8, HI
.text:00000000000E6CAC CSEL            W8, W11, W8, EQ
.text:00000000000E6CB0 ORR             W0, W9, W8
.text:00000000000E6CB4 RET
.text:00000000000E6CB4 ; } // starts at E6C70
.text:00000000000E6CB4 ; End of function __unordtf2
.text:00000000000E6CB4
.text:00000000000E6CB8
.text:00000000000E6CB8
.text:00000000000E6CB8
.text:00000000000E6CB8 __eqtf2
.text:00000000000E6CB8
.text:00000000000E6CB8 var_20= -0x20
.text:00000000000E6CB8 var_10= -0x10
.text:00000000000E6CB8
.text:00000000000E6CB8 ; __unwind {
.text:00000000000E6CB8 STP             Q1, Q0, [SP,#var_20]!
.text:00000000000E6CBC LDP             X9, X8, [SP,#0x20+var_10]
.text:00000000000E6CC0 MOV             X13, #0x7FFF000000000000
.text:00000000000E6CC4 MOV             W0, #1
.text:00000000000E6CC8 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6CCC CMP             X9, #0
.text:00000000000E6CD0 CSET            W10, NE
.text:00000000000E6CD4 CMP             X12, X13
.text:00000000000E6CD8 CSET            W11, HI
.text:00000000000E6CDC CSEL            W10, W10, W11, EQ
.text:00000000000E6CE0 TBNZ            W10, #0, loc_E6D84
.text:00000000000E6CE4 LDP             X11, X10, [SP,#0x20+var_20]
.text:00000000000E6CE8 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6CEC CMP             X11, #0
.text:00000000000E6CF0 CSET            W15, NE
.text:00000000000E6CF4 CMP             X14, X13
.text:00000000000E6CF8 CSET            W13, HI
.text:00000000000E6CFC CSEL            W13, W15, W13, EQ
.text:00000000000E6D00 TBNZ            W13, #0, loc_E6D84
.text:00000000000E6D04 ORR             X13, X11, X9
.text:00000000000E6D08 ORR             X12, X14, X12
.text:00000000000E6D0C ORR             X12, X13, X12
.text:00000000000E6D10 CBZ             X12, loc_E6D40
.text:00000000000E6D14 TST             X10, X8
.text:00000000000E6D18 B.LT            loc_E6D4C
.text:00000000000E6D1C CMP             X9, X11
.text:00000000000E6D20 CSET            W12, CC
.text:00000000000E6D24 CMP             X8, X10
.text:00000000000E6D28 CSET            W13, LT
.text:00000000000E6D2C CSEL            W12, W12, W13, EQ
.text:00000000000E6D30 TBZ             W12, #0, loc_E6D70
.text:00000000000E6D34 MOV             W0, #0xFFFFFFFF
.text:00000000000E6D38 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6D3C RET
.text:00000000000E6D40
.text:00000000000E6D40 loc_E6D40
.text:00000000000E6D40 MOV             W0, WZR
.text:00000000000E6D44 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6D48 RET
.text:00000000000E6D4C
.text:00000000000E6D4C loc_E6D4C
.text:00000000000E6D4C CMP             X9, X11
.text:00000000000E6D50 CSET            W12, HI
.text:00000000000E6D54 CMP             X8, X10
.text:00000000000E6D58 CSET            W13, GT
.text:00000000000E6D5C CSEL            W12, W12, W13, EQ
.text:00000000000E6D60 TBZ             W12, #0, loc_E6D70
.text:00000000000E6D64 MOV             W0, #0xFFFFFFFF
.text:00000000000E6D68 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6D6C RET
.text:00000000000E6D70
.text:00000000000E6D70 loc_E6D70
.text:00000000000E6D70 EOR             X9, X9, X11
.text:00000000000E6D74 EOR             X8, X8, X10
.text:00000000000E6D78 ORR             X8, X9, X8
.text:00000000000E6D7C CMP             X8, #0
.text:00000000000E6D80 CSET            W0, NE
.text:00000000000E6D84
.text:00000000000E6D84 loc_E6D84
.text:00000000000E6D84 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6D88 RET
.text:00000000000E6D88 ; } // starts at E6CB8
.text:00000000000E6D88 ; End of function __eqtf2
.text:00000000000E6D88
.text:00000000000E6D8C
.text:00000000000E6D8C
.text:00000000000E6D8C
.text:00000000000E6D8C __lttf2
.text:00000000000E6D8C
.text:00000000000E6D8C var_20= -0x20
.text:00000000000E6D8C var_10= -0x10
.text:00000000000E6D8C
.text:00000000000E6D8C ; __unwind {
.text:00000000000E6D8C STP             Q1, Q0, [SP,#var_20]!
.text:00000000000E6D90 LDP             X9, X8, [SP,#0x20+var_10]
.text:00000000000E6D94 MOV             X13, #0x7FFF000000000000
.text:00000000000E6D98 MOV             W0, #1
.text:00000000000E6D9C AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6DA0 CMP             X9, #0
.text:00000000000E6DA4 CSET            W10, NE
.text:00000000000E6DA8 CMP             X12, X13
.text:00000000000E6DAC CSET            W11, HI
.text:00000000000E6DB0 CSEL            W10, W10, W11, EQ
.text:00000000000E6DB4 TBNZ            W10, #0, loc_E6E58
.text:00000000000E6DB8 LDP             X11, X10, [SP,#0x20+var_20]
.text:00000000000E6DBC AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6DC0 CMP             X11, #0
.text:00000000000E6DC4 CSET            W15, NE
.text:00000000000E6DC8 CMP             X14, X13
.text:00000000000E6DCC CSET            W13, HI
.text:00000000000E6DD0 CSEL            W13, W15, W13, EQ
.text:00000000000E6DD4 TBNZ            W13, #0, loc_E6E58
.text:00000000000E6DD8 ORR             X13, X11, X9
.text:00000000000E6DDC ORR             X12, X14, X12
.text:00000000000E6DE0 ORR             X12, X13, X12
.text:00000000000E6DE4 CBZ             X12, loc_E6E14
.text:00000000000E6DE8 TST             X10, X8
.text:00000000000E6DEC B.LT            loc_E6E20
.text:00000000000E6DF0 CMP             X9, X11
.text:00000000000E6DF4 CSET            W12, CC
.text:00000000000E6DF8 CMP             X8, X10
.text:00000000000E6DFC CSET            W13, LT
.text:00000000000E6E00 CSEL            W12, W12, W13, EQ
.text:00000000000E6E04 TBZ             W12, #0, loc_E6E44
.text:00000000000E6E08 MOV             W0, #0xFFFFFFFF
.text:00000000000E6E0C ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6E10 RET
.text:00000000000E6E14
.text:00000000000E6E14 loc_E6E14
.text:00000000000E6E14 MOV             W0, WZR
.text:00000000000E6E18 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6E1C RET
.text:00000000000E6E20
.text:00000000000E6E20 loc_E6E20
.text:00000000000E6E20 CMP             X9, X11
.text:00000000000E6E24 CSET            W12, HI
.text:00000000000E6E28 CMP             X8, X10
.text:00000000000E6E2C CSET            W13, GT
.text:00000000000E6E30 CSEL            W12, W12, W13, EQ
.text:00000000000E6E34 TBZ             W12, #0, loc_E6E44
.text:00000000000E6E38 MOV             W0, #0xFFFFFFFF
.text:00000000000E6E3C ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6E40 RET
.text:00000000000E6E44
.text:00000000000E6E44 loc_E6E44
.text:00000000000E6E44 EOR             X9, X9, X11
.text:00000000000E6E48 EOR             X8, X8, X10
.text:00000000000E6E4C ORR             X8, X9, X8
.text:00000000000E6E50 CMP             X8, #0
.text:00000000000E6E54 CSET            W0, NE
.text:00000000000E6E58
.text:00000000000E6E58 loc_E6E58
.text:00000000000E6E58 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6E5C RET
.text:00000000000E6E5C ; } // starts at E6D8C
.text:00000000000E6E5C ; End of function __lttf2
.text:00000000000E6E5C
.text:00000000000E6E60
.text:00000000000E6E60
.text:00000000000E6E60
.text:00000000000E6E60 __netf2
.text:00000000000E6E60
.text:00000000000E6E60 var_20= -0x20
.text:00000000000E6E60 var_10= -0x10
.text:00000000000E6E60
.text:00000000000E6E60 ; __unwind {
.text:00000000000E6E60 STP             Q1, Q0, [SP,#var_20]!
.text:00000000000E6E64 LDP             X9, X8, [SP,#0x20+var_10]
.text:00000000000E6E68 MOV             X13, #0x7FFF000000000000
.text:00000000000E6E6C MOV             W0, #1
.text:00000000000E6E70 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6E74 CMP             X9, #0
.text:00000000000E6E78 CSET            W10, NE
.text:00000000000E6E7C CMP             X12, X13
.text:00000000000E6E80 CSET            W11, HI
.text:00000000000E6E84 CSEL            W10, W10, W11, EQ
.text:00000000000E6E88 TBNZ            W10, #0, loc_E6F2C
.text:00000000000E6E8C LDP             X11, X10, [SP,#0x20+var_20]
.text:00000000000E6E90 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6E94 CMP             X11, #0
.text:00000000000E6E98 CSET            W15, NE
.text:00000000000E6E9C CMP             X14, X13
.text:00000000000E6EA0 CSET            W13, HI
.text:00000000000E6EA4 CSEL            W13, W15, W13, EQ
.text:00000000000E6EA8 TBNZ            W13, #0, loc_E6F2C
.text:00000000000E6EAC ORR             X13, X11, X9
.text:00000000000E6EB0 ORR             X12, X14, X12
.text:00000000000E6EB4 ORR             X12, X13, X12
.text:00000000000E6EB8 CBZ             X12, loc_E6EE8
.text:00000000000E6EBC TST             X10, X8
.text:00000000000E6EC0 B.LT            loc_E6EF4
.text:00000000000E6EC4 CMP             X9, X11
.text:00000000000E6EC8 CSET            W12, CC
.text:00000000000E6ECC CMP             X8, X10
.text:00000000000E6ED0 CSET            W13, LT
.text:00000000000E6ED4 CSEL            W12, W12, W13, EQ
.text:00000000000E6ED8 TBZ             W12, #0, loc_E6F18
.text:00000000000E6EDC MOV             W0, #0xFFFFFFFF
.text:00000000000E6EE0 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6EE4 RET
.text:00000000000E6EE8
.text:00000000000E6EE8 loc_E6EE8
.text:00000000000E6EE8 MOV             W0, WZR
.text:00000000000E6EEC ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6EF0 RET
.text:00000000000E6EF4
.text:00000000000E6EF4 loc_E6EF4
.text:00000000000E6EF4 CMP             X9, X11
.text:00000000000E6EF8 CSET            W12, HI
.text:00000000000E6EFC CMP             X8, X10
.text:00000000000E6F00 CSET            W13, GT
.text:00000000000E6F04 CSEL            W12, W12, W13, EQ
.text:00000000000E6F08 TBZ             W12, #0, loc_E6F18
.text:00000000000E6F0C MOV             W0, #0xFFFFFFFF
.text:00000000000E6F10 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6F14 RET
.text:00000000000E6F18
.text:00000000000E6F18 loc_E6F18
.text:00000000000E6F18 EOR             X9, X9, X11
.text:00000000000E6F1C EOR             X8, X8, X10
.text:00000000000E6F20 ORR             X8, X9, X8
.text:00000000000E6F24 CMP             X8, #0
.text:00000000000E6F28 CSET            W0, NE
.text:00000000000E6F2C
.text:00000000000E6F2C loc_E6F2C
.text:00000000000E6F2C ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6F30 RET
.text:00000000000E6F30 ; } // starts at E6E60
.text:00000000000E6F30 ; End of function __netf2
.text:00000000000E6F30
.text:00000000000E6F34
.text:00000000000E6F34
.text:00000000000E6F34
.text:00000000000E6F34 __gttf2
.text:00000000000E6F34
.text:00000000000E6F34 var_20= -0x20
.text:00000000000E6F34 var_10= -0x10
.text:00000000000E6F34
.text:00000000000E6F34 ; __unwind {
.text:00000000000E6F34 STP             Q1, Q0, [SP,#var_20]!
.text:00000000000E6F38 LDP             X9, X8, [SP,#0x20+var_10]
.text:00000000000E6F3C MOV             X13, #0x7FFF000000000000
.text:00000000000E6F40 MOV             W0, #0xFFFFFFFF
.text:00000000000E6F44 AND             X12, X8, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6F48 CMP             X9, #0
.text:00000000000E6F4C CSET            W10, NE
.text:00000000000E6F50 CMP             X12, X13
.text:00000000000E6F54 CSET            W11, HI
.text:00000000000E6F58 CSEL            W10, W10, W11, EQ
.text:00000000000E6F5C TBNZ            W10, #0, loc_E7000
.text:00000000000E6F60 LDP             X11, X10, [SP,#0x20+var_20]
.text:00000000000E6F64 AND             X14, X10, #0x7FFFFFFFFFFFFFFF
.text:00000000000E6F68 CMP             X11, #0
.text:00000000000E6F6C CSET            W15, NE
.text:00000000000E6F70 CMP             X14, X13
.text:00000000000E6F74 CSET            W13, HI
.text:00000000000E6F78 CSEL            W13, W15, W13, EQ
.text:00000000000E6F7C TBNZ            W13, #0, loc_E7000
.text:00000000000E6F80 ORR             X13, X11, X9
.text:00000000000E6F84 ORR             X12, X14, X12
.text:00000000000E6F88 ORR             X12, X13, X12
.text:00000000000E6F8C CBZ             X12, loc_E6FBC
.text:00000000000E6F90 TST             X10, X8
.text:00000000000E6F94 B.LT            loc_E6FC8
.text:00000000000E6F98 CMP             X9, X11
.text:00000000000E6F9C CSET            W12, CC
.text:00000000000E6FA0 CMP             X8, X10
.text:00000000000E6FA4 CSET            W13, LT
.text:00000000000E6FA8 CSEL            W12, W12, W13, EQ
.text:00000000000E6FAC TBZ             W12, #0, loc_E6FEC
.text:00000000000E6FB0 MOV             W0, #0xFFFFFFFF
.text:00000000000E6FB4 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6FB8 RET
.text:00000000000E6FBC
.text:00000000000E6FBC loc_E6FBC
.text:00000000000E6FBC MOV             W0, WZR
.text:00000000000E6FC0 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6FC4 RET
.text:00000000000E6FC8
.text:00000000000E6FC8 loc_E6FC8
.text:00000000000E6FC8 CMP             X9, X11
.text:00000000000E6FCC CSET            W12, HI
.text:00000000000E6FD0 CMP             X8, X10
.text:00000000000E6FD4 CSET            W13, GT
.text:00000000000E6FD8 CSEL            W12, W12, W13, EQ
.text:00000000000E6FDC TBZ             W12, #0, loc_E6FEC
.text:00000000000E6FE0 MOV             W0, #0xFFFFFFFF
.text:00000000000E6FE4 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E6FE8 RET
.text:00000000000E6FEC
.text:00000000000E6FEC loc_E6FEC
.text:00000000000E6FEC EOR             X9, X9, X11
.text:00000000000E6FF0 EOR             X8, X8, X10
.text:00000000000E6FF4 ORR             X8, X9, X8
.text:00000000000E6FF8 CMP             X8, #0
.text:00000000000E6FFC CSET            W0, NE
.text:00000000000E7000
.text:00000000000E7000 loc_E7000
.text:00000000000E7000 ADD             SP, SP, #0x20 ; ' '
.text:00000000000E7004 RET
.text:00000000000E7004 ; } // starts at E6F34
.text:00000000000E7004 ; End of function __gttf2
.text:00000000000E7004
.text:00000000000E7008
.text:00000000000E7008
.text:00000000000E7008
.text:00000000000E7008 __multf3
.text:00000000000E7008
.text:00000000000E7008 var_C0= -0xC0
.text:00000000000E7008 var_B0= -0xB0
.text:00000000000E7008 var_A0= -0xA0
.text:00000000000E7008 var_90= -0x90
.text:00000000000E7008 var_80= -0x80
.text:00000000000E7008 var_70= -0x70
.text:00000000000E7008 var_60= -0x60
.text:00000000000E7008 var_50= -0x50
.text:00000000000E7008 var_40= -0x40
.text:00000000000E7008 var_30= -0x30
.text:00000000000E7008 var_20= -0x20
.text:00000000000E7008 var_10= -0x10
.text:00000000000E7008
.text:00000000000E7008 ; __unwind {
.text:00000000000E7008 SUB             SP, SP, #0xC0
.text:00000000000E700C STP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E7010 STP             Q1, Q0, [SP,#0xC0+var_30]
.text:00000000000E7014 LDP             X12, X3, [SP,#0xC0+var_20]
.text:00000000000E7018 LDP             X14, X4, [SP,#0xC0+var_30]
.text:00000000000E701C MOV             W11, #0x7FFD
.text:00000000000E7020 UBFX            X9, X3, #0x30, #0xF ; '0'
.text:00000000000E7024 EOR             X8, X4, X3
.text:00000000000E7028 AND             X2, X4, #0xFFFFFFFFFFFF
.text:00000000000E702C SUB             W16, W9, #1
.text:00000000000E7030 AND             X13, X3, #0xFFFFFFFFFFFF
.text:00000000000E7034 EXTR            X15, X3, X12, #0x20 ; ' '
.text:00000000000E7038 UBFX            X0, X3, #0x20, #0x10 ; ' '
.text:00000000000E703C UBFX            X10, X4, #0x30, #0xF ; '0'
.text:00000000000E7040 EXTR            X17, X4, X14, #0x11
.text:00000000000E7044 AND             X8, X8, #0x8000000000000000
.text:00000000000E7048 EXTR            X1, X2, X14, #0x31 ; '1'
.text:00000000000E704C CMP             W16, W11
.text:00000000000E7050 UBFX            X11, X4, #0x11, #0x1F
.text:00000000000E7054 B.HI            loc_E71A4
.text:00000000000E7058 SUB             W16, W10, #1
.text:00000000000E705C MOV             W5, #0x7FFE
.text:00000000000E7060 CMP             W16, W5
.text:00000000000E7064 B.CS            loc_E71A4
.text:00000000000E7068 MOV             W16, WZR
.text:00000000000E706C
.text:00000000000E706C loc_E706C
.text:00000000000E706C ORR             X0, X0, #0x10000
.text:00000000000E7070 MOV             W2, #0x80000000
.text:00000000000E7074 AND             X17, X17, #0xFFFFFFFF
.text:00000000000E7078 UBFIZ           X14, X14, #0xF, #0x11
.text:00000000000E707C AND             X13, X13, #0xFFFFFFFF
.text:00000000000E7080 AND             X15, X15, #0xFFFFFFFF
.text:00000000000E7084 AND             X12, X12, #0xFFFFFFFF
.text:00000000000E7088 AND             X1, X1, #0xFFFFFFFF
.text:00000000000E708C ADD             W9, W9, W10
.text:00000000000E7090 BFXIL           X2, X11, #0, #0x1F
.text:00000000000E7094 MUL             X3, X17, X0
.text:00000000000E7098 MUL             X5, X17, X13
.text:00000000000E709C MUL             X19, X17, X15
.text:00000000000E70A0 MUL             X20, X14, X15
.text:00000000000E70A4 MUL             X17, X17, X12
.text:00000000000E70A8 MUL             X4, X1, X13
.text:00000000000E70AC MUL             X6, X14, X13
.text:00000000000E70B0 MUL             X7, X1, X15
.text:00000000000E70B4 ADD             W16, W9, W16
.text:00000000000E70B8 MUL             X9, X2, X13
.text:00000000000E70BC MUL             X13, X2, X15
.text:00000000000E70C0 ADDS            X15, X17, X20
.text:00000000000E70C4 ADCS            X17, XZR, XZR
.text:00000000000E70C8 ADDS            X6, X19, X6
.text:00000000000E70CC MUL             X10, X1, X0
.text:00000000000E70D0 MUL             X1, X1, X12
.text:00000000000E70D4 ADCS            X19, XZR, XZR
.text:00000000000E70D8 ADDS            X1, X6, X1
.text:00000000000E70DC MUL             X11, X14, X0
.text:00000000000E70E0 ADCS            X6, X19, XZR
.text:00000000000E70E4 ADDS            X11, X5, X11
.text:00000000000E70E8 ADCS            X5, XZR, XZR
.text:00000000000E70EC ADDS            X11, X11, X7
.text:00000000000E70F0 MUL             X14, X14, X12
.text:00000000000E70F4 MUL             X12, X2, X12
.text:00000000000E70F8 ADCS            X5, X5, XZR
.text:00000000000E70FC ADDS            X11, X11, X12
.text:00000000000E7100 ADCS            X12, X5, XZR
.text:00000000000E7104 ADDS            X9, X9, X10
.text:00000000000E7108 ADCS            X7, XZR, XZR
.text:00000000000E710C ADDS            X10, X14, X15,LSL#32
.text:00000000000E7110 EXTR            X17, X17, X15, #0x20 ; ' '
.text:00000000000E7114 ADCS            X15, XZR, XZR
.text:00000000000E7118 ADDS            X17, X1, X17
.text:00000000000E711C ADCS            X1, XZR, XZR
.text:00000000000E7120 LSR             X5, X12, #0x20 ; ' '
.text:00000000000E7124 EXTR            X12, X12, X11, #0x20 ; ' '
.text:00000000000E7128 ADDS            X11, X17, X11,LSL#32
.text:00000000000E712C ADCS            X17, X1, XZR
.text:00000000000E7130 ADD             X11, X15, X11
.text:00000000000E7134 ADDS            X15, X4, X3
.text:00000000000E7138 ADCS            X1, XZR, XZR
.text:00000000000E713C ADDS            X13, X15, X13
.text:00000000000E7140 ADCS            X15, X1, XZR
.text:00000000000E7144 ADDS            X13, X13, X6
.text:00000000000E7148 ADCS            X15, X15, XZR
.text:00000000000E714C EXTR            X14, X7, X9, #0x20 ; ' '
.text:00000000000E7150 MADD            X15, X2, X0, X15
.text:00000000000E7154 ADDS            X9, X13, X9,LSL#32
.text:00000000000E7158 ADCS            X13, X15, X14
.text:00000000000E715C ADDS            X9, X9, X12
.text:00000000000E7160 ADCS            X12, X13, X5
.text:00000000000E7164 ADDS            X9, X9, X17
.text:00000000000E7168 MOV             W13, #0xFFFFC001
.text:00000000000E716C ADCS            X12, X12, XZR
.text:00000000000E7170 ADD             W13, W16, W13
.text:00000000000E7174 TBNZ            X12, #0x30, loc_E71DC ; '0'
.text:00000000000E7178 EXTR            X12, X12, X9, #0x3F ; '?'
.text:00000000000E717C EXTR            X9, X9, X11, #0x3F ; '?'
.text:00000000000E7180 EXTR            X11, X11, X10, #0x3F ; '?'
.text:00000000000E7184 LSL             X10, X10, #1
.text:00000000000E7188 MOV             W14, #0x7FFF
.text:00000000000E718C CMP             W13, W14
.text:00000000000E7190 B.GE            loc_E71EC
.text:00000000000E7194
.text:00000000000E7194 loc_E7194
.text:00000000000E7194 CMP             W13, #0
.text:00000000000E7198 B.LE            loc_E7264
.text:00000000000E719C BFI             X12, X13, #0x30, #0x10 ; '0'
.text:00000000000E71A0 B               loc_E736C
.text:00000000000E71A4
.text:00000000000E71A4 loc_E71A4
.text:00000000000E71A4 AND             X16, X3, #0x7FFFFFFFFFFFFFFF
.text:00000000000E71A8 CMP             X12, #0
.text:00000000000E71AC MOV             X5, #0x7FFF000000000000
.text:00000000000E71B0 CSET            W6, EQ
.text:00000000000E71B4 CMP             X16, X5
.text:00000000000E71B8 CSET            W7, CC
.text:00000000000E71BC CSEL            W6, W6, W7, EQ
.text:00000000000E71C0 TBNZ            W6, #0, loc_E7204
.text:00000000000E71C4 ORR             X8, X3, #0x800000000000
.text:00000000000E71C8 STP             X12, X8, [SP,#0xC0+var_C0]
.text:00000000000E71CC LDR             Q0, [SP,#0xC0+var_C0]
.text:00000000000E71D0 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E71D4 ADD             SP, SP, #0xC0
.text:00000000000E71D8 RET
.text:00000000000E71DC
.text:00000000000E71DC loc_E71DC
.text:00000000000E71DC ADD             W13, W13, #1
.text:00000000000E71E0 MOV             W14, #0x7FFF
.text:00000000000E71E4 CMP             W13, W14
.text:00000000000E71E8 B.LT            loc_E7194
.text:00000000000E71EC
.text:00000000000E71EC loc_E71EC
.text:00000000000E71EC ORR             X8, X8, #0x7FFF000000000000
.text:00000000000E71F0 STP             XZR, X8, [SP,#0xC0+var_70]
.text:00000000000E71F4 LDR             Q0, [SP,#0xC0+var_70]
.text:00000000000E71F8 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E71FC ADD             SP, SP, #0xC0
.text:00000000000E7200 RET
.text:00000000000E7204
.text:00000000000E7204 loc_E7204
.text:00000000000E7204 AND             X3, X4, #0x7FFFFFFFFFFFFFFF
.text:00000000000E7208 CMP             X14, #0
.text:00000000000E720C CSET            W6, EQ
.text:00000000000E7210 CMP             X3, X5
.text:00000000000E7214 CSET            W5, CC
.text:00000000000E7218 CSEL            W5, W6, W5, EQ
.text:00000000000E721C TBNZ            W5, #0, loc_E7238
.text:00000000000E7220 ORR             X8, X4, #0x800000000000
.text:00000000000E7224 STP             X14, X8, [SP,#0xC0+var_B0]
.text:00000000000E7228 LDR             Q0, [SP,#0xC0+var_B0]
.text:00000000000E722C LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E7230 ADD             SP, SP, #0xC0
.text:00000000000E7234 RET
.text:00000000000E7238
.text:00000000000E7238 loc_E7238
.text:00000000000E7238 EOR             X4, X16, #0x7FFF000000000000
.text:00000000000E723C ORR             X4, X12, X4
.text:00000000000E7240 CBNZ            X4, loc_E7288
.text:00000000000E7244 ORR             X9, X14, X3
.text:00000000000E7248 CBZ             X9, loc_E73C4
.text:00000000000E724C ORR             X8, X8, #0x7FFF000000000000
.text:00000000000E7250 STP             XZR, X8, [SP,#0xC0+var_A0]
.text:00000000000E7254 LDR             Q0, [SP,#0xC0+var_A0]
.text:00000000000E7258 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E725C ADD             SP, SP, #0xC0
.text:00000000000E7260 RET
.text:00000000000E7264
.text:00000000000E7264 loc_E7264
.text:00000000000E7264 MOV             W14, #1
.text:00000000000E7268 SUB             W13, W14, W13
.text:00000000000E726C CMP             W13, #0x7F
.text:00000000000E7270 B.LS            loc_E72B4
.text:00000000000E7274 STP             XZR, X8, [SP,#0xC0+var_60]
.text:00000000000E7278 LDR             Q0, [SP,#0xC0+var_60]
.text:00000000000E727C LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E7280 ADD             SP, SP, #0xC0
.text:00000000000E7284 RET
.text:00000000000E7288
.text:00000000000E7288 loc_E7288
.text:00000000000E7288 EOR             X4, X3, #0x7FFF000000000000
.text:00000000000E728C ORR             X4, X14, X4
.text:00000000000E7290 CBNZ            X4, loc_E73D8
.text:00000000000E7294 ORR             X9, X12, X16
.text:00000000000E7298 CBZ             X9, loc_E73C4
.text:00000000000E729C ORR             X8, X8, #0x7FFF000000000000
.text:00000000000E72A0 STP             XZR, X8, [SP,#0xC0+var_90]
.text:00000000000E72A4 LDR             Q0, [SP,#0xC0+var_90]
.text:00000000000E72A8 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E72AC ADD             SP, SP, #0xC0
.text:00000000000E72B0 RET
.text:00000000000E72B4
.text:00000000000E72B4 loc_E72B4
.text:00000000000E72B4 MOV             W14, #0x80
.text:00000000000E72B8 MOV             W16, #0x40 ; '@'
.text:00000000000E72BC NEG             X15, X13
.text:00000000000E72C0 SUB             X14, X14, X13
.text:00000000000E72C4 SUB             X16, X16, X13
.text:00000000000E72C8 LSL             X1, X9, X15
.text:00000000000E72CC NEG             X2, X14
.text:00000000000E72D0 CMP             X16, #0
.text:00000000000E72D4 CSEL            X3, XZR, X1, GE
.text:00000000000E72D8 CMP             X14, #0
.text:00000000000E72DC LSR             X14, X10, X2
.text:00000000000E72E0 LSR             X2, X9, X2
.text:00000000000E72E4 LSR             X0, X10, X13
.text:00000000000E72E8 CSEL            X14, XZR, X14, EQ
.text:00000000000E72EC CSEL            X2, XZR, X2, EQ
.text:00000000000E72F0 CMP             X16, #0
.text:00000000000E72F4 LSL             X16, X12, X15
.text:00000000000E72F8 LSL             X10, X10, X15
.text:00000000000E72FC LSL             X15, X11, X15
.text:00000000000E7300 ORR             X14, X14, X15
.text:00000000000E7304 CSEL            X14, X10, X14, GE
.text:00000000000E7308 CSEL            X10, XZR, X10, GE
.text:00000000000E730C ORR             X2, X2, X16
.text:00000000000E7310 ORR             X10, X10, X14
.text:00000000000E7314 CSEL            X1, X1, X2, GE
.text:00000000000E7318 CMP             X10, #0
.text:00000000000E731C CSET            W10, NE
.text:00000000000E7320 CMP             X13, #0
.text:00000000000E7324 SUB             X17, X13, #0x40 ; '@'
.text:00000000000E7328 LSR             X2, X11, X13
.text:00000000000E732C LSR             X11, X11, X13
.text:00000000000E7330 LSR             X9, X9, X13
.text:00000000000E7334 LSR             X14, X12, X13
.text:00000000000E7338 LSR             X12, X12, X13
.text:00000000000E733C CSEL            X13, XZR, X15, EQ
.text:00000000000E7340 CSEL            X15, XZR, X16, EQ
.text:00000000000E7344 CMP             X17, #0
.text:00000000000E7348 ORR             X13, X0, X13
.text:00000000000E734C CSEL            X13, X2, X13, GE
.text:00000000000E7350 CSEL            X11, XZR, X11, GE
.text:00000000000E7354 ORR             X9, X9, X15
.text:00000000000E7358 ORR             X13, X3, X13
.text:00000000000E735C ORR             X11, X1, X11
.text:00000000000E7360 CSEL            X9, X14, X9, GE
.text:00000000000E7364 ORR             X10, X13, X10
.text:00000000000E7368 CSEL            X12, XZR, X12, GE
.text:00000000000E736C
.text:00000000000E736C loc_E736C
.text:00000000000E736C CMP             X10, #0
.text:00000000000E7370 MOV             X13, #0x8000000000000000
.text:00000000000E7374 CSET            W14, EQ
.text:00000000000E7378 CMP             X11, #0
.text:00000000000E737C CSET            W15, GE
.text:00000000000E7380 CMP             X11, X13
.text:00000000000E7384 CSEL            W13, W14, W15, EQ
.text:00000000000E7388 ORR             X8, X12, X8
.text:00000000000E738C TBNZ            W13, #0, loc_E7398
.text:00000000000E7390 ADDS            X9, X9, #1
.text:00000000000E7394 B               loc_E73AC
.text:00000000000E7398
.text:00000000000E7398 loc_E7398
.text:00000000000E7398 EOR             X11, X11, #0x8000000000000000
.text:00000000000E739C ORR             X10, X10, X11
.text:00000000000E73A0 CBNZ            X10, loc_E73B0
.text:00000000000E73A4 AND             X10, X9, #1
.text:00000000000E73A8 ADDS            X9, X9, X10
.text:00000000000E73AC
.text:00000000000E73AC loc_E73AC
.text:00000000000E73AC ADCS            X8, X8, XZR
.text:00000000000E73B0
.text:00000000000E73B0 loc_E73B0
.text:00000000000E73B0 STP             X9, X8, [SP,#0xC0+var_50]
.text:00000000000E73B4 LDR             Q0, [SP,#0xC0+var_50]
.text:00000000000E73B8 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E73BC ADD             SP, SP, #0xC0
.text:00000000000E73C0 RET
.text:00000000000E73C4
.text:00000000000E73C4 loc_E73C4
.text:00000000000E73C4 ADRP            X8, #xmmword_22E00@PAGE
.text:00000000000E73C8 LDR             Q0, [X8,#xmmword_22E00@PAGEOFF]
.text:00000000000E73CC LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E73D0 ADD             SP, SP, #0xC0
.text:00000000000E73D4 RET
.text:00000000000E73D8
.text:00000000000E73D8 loc_E73D8
.text:00000000000E73D8 ORR             X4, X12, X16
.text:00000000000E73DC CBZ             X4, loc_E7458
.text:00000000000E73E0 ORR             X4, X14, X3
.text:00000000000E73E4 CBZ             X4, loc_E746C
.text:00000000000E73E8 LSR             X16, X16, #0x30 ; '0'
.text:00000000000E73EC CBNZ            X16, loc_E7480
.text:00000000000E73F0 CMP             X13, #0
.text:00000000000E73F4 CSEL            X0, X12, X13, EQ
.text:00000000000E73F8 CSET            W16, EQ
.text:00000000000E73FC CLZ             X0, X0
.text:00000000000E7400 ADD             W16, W0, W16,LSL#6
.text:00000000000E7404 MOV             W15, #0x10
.text:00000000000E7408 SUB             W0, W16, #0xF
.text:00000000000E740C SUB             W16, W15, W16
.text:00000000000E7410 NEG             X15, X0
.text:00000000000E7414 CMP             X0, #0
.text:00000000000E7418 LSL             X4, X12, X0
.text:00000000000E741C SUB             X5, X0, #0x40 ; '@'
.text:00000000000E7420 LSL             X13, X13, X0
.text:00000000000E7424 LSL             X0, X12, X0
.text:00000000000E7428 LSR             X12, X12, X15
.text:00000000000E742C CSEL            X12, XZR, X12, EQ
.text:00000000000E7430 CMP             X5, #0
.text:00000000000E7434 ORR             X12, X12, X13
.text:00000000000E7438 CSEL            X4, XZR, X4, GE
.text:00000000000E743C CSEL            X13, X0, X12, GE
.text:00000000000E7440 EXTR            X15, X13, X4, #0x20 ; ' '
.text:00000000000E7444 LSR             X0, X13, #0x20 ; ' '
.text:00000000000E7448 MOV             X12, X4
.text:00000000000E744C LSR             X3, X3, #0x30 ; '0'
.text:00000000000E7450 CBNZ            X3, loc_E706C
.text:00000000000E7454 B               loc_E748C
.text:00000000000E7458
.text:00000000000E7458 loc_E7458
.text:00000000000E7458 STP             XZR, X8, [SP,#0xC0+var_40]
.text:00000000000E745C LDR             Q0, [SP,#0xC0+var_40]
.text:00000000000E7460 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E7464 ADD             SP, SP, #0xC0
.text:00000000000E7468 RET
.text:00000000000E746C
.text:00000000000E746C loc_E746C
.text:00000000000E746C STP             XZR, X8, [SP,#0xC0+var_80]
.text:00000000000E7470 LDR             Q0, [SP,#0xC0+var_80]
.text:00000000000E7474 LDP             X20, X19, [SP,#0xC0+var_10]
.text:00000000000E7478 ADD             SP, SP, #0xC0
.text:00000000000E747C RET
.text:00000000000E7480
.text:00000000000E7480 loc_E7480
.text:00000000000E7480 MOV             W16, WZR
.text:00000000000E7484 LSR             X3, X3, #0x30 ; '0'
.text:00000000000E7488 CBNZ            X3, loc_E706C
.text:00000000000E748C
.text:00000000000E748C loc_E748C
.text:00000000000E748C CMP             X2, #0
.text:00000000000E7490 CSEL            X1, X14, X2, EQ
.text:00000000000E7494 CSET            W17, EQ
.text:00000000000E7498 CLZ             X1, X1
.text:00000000000E749C ADD             W17, W1, W17,LSL#6
.text:00000000000E74A0 MOV             W11, #0x10
.text:00000000000E74A4 SUB             W1, W17, #0xF
.text:00000000000E74A8 SUB             W11, W11, W17
.text:00000000000E74AC NEG             X17, X1
.text:00000000000E74B0 CMP             X1, #0
.text:00000000000E74B4 ADD             W16, W11, W16
.text:00000000000E74B8 LSR             X11, X14, X17
.text:00000000000E74BC SUB             X4, X1, #0x40 ; '@'
.text:00000000000E74C0 LSL             X2, X2, X1
.text:00000000000E74C4 CSEL            X11, XZR, X11, EQ
.text:00000000000E74C8 LSL             X3, X14, X1
.text:00000000000E74CC LSL             X1, X14, X1
.text:00000000000E74D0 CMP             X4, #0
.text:00000000000E74D4 ORR             X11, X11, X2
.text:00000000000E74D8 CSEL            X14, XZR, X3, GE
.text:00000000000E74DC CSEL            X1, X1, X11, GE
.text:00000000000E74E0 EXTR            X17, X1, X14, #0x11
.text:00000000000E74E4 LSR             X11, X1, #0x11
.text:00000000000E74E8 EXTR            X1, X1, X14, #0x31 ; '1'
.text:00000000000E74EC B               loc_E706C
.text:00000000000E74EC ; } // starts at E7008
.text:00000000000E74EC ; End of function __multf3
.text:00000000000E74EC
.text:00000000000E74F0
.text:00000000000E74F0
.text:00000000000E74F0
.text:00000000000E74F0 __CortexA53843419_82004
.text:00000000000E74F0 LDR             X8, [X8,#_ZN9prop_area13pa_data_size_E_ptr@PAGEOFF]
.text:00000000000E74F4 B               loc_82008
.text:00000000000E74F4 ; End of function __CortexA53843419_82004
.text:00000000000E74F4
.text:00000000000E74F4 ; .text ends
.text:00000000000E74F4
LOAD:00000000000E74F8
LOAD:00000000000E74F8 ; Segment type: Pure code
LOAD:00000000000E74F8 AREA LOAD, CODE, READWRITE, ALIGN=12
LOAD:00000000000E74F8 ; ORG 0xE74F8
LOAD:00000000000E74F8 CODE64
LOAD:00000000000E74F8 ALIGN 0x20
LOAD:00000000000E74F8 ; LOAD ends
LOAD:00000000000E74F8
